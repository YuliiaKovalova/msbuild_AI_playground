{
  "number": 10892,
  "title": "Always respect warning-as-error properties",
  "body": "Remote (built in another node) projects were not respecting MSBuildWarningsNotAsErrors configured  in the projects, when the API or CLI `-warnaserror` option was enabled.\r\n\r\nFixes #10874.\r\n",
  "state": "MERGED",
  "createdAt": "2024-10-25T16:23:41Z",
  "updatedAt": "2024-11-19T18:17:56Z",
  "closedAt": "2024-11-07T20:56:07Z",
  "mergedAt": "2024-11-07T20:56:07Z",
  "additions": 6,
  "deletions": 6,
  "changedFiles": 3,
  "headRefName": "respect-warningsnotaserrors-from-worker-nodes",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f38f1479e9de2f495a99671806ef7eca20325fa0",
          "message": "Always respect warning-as-error properties\n\nRemote (built in another node) projects were not\nrespecting MSBuildWarningsNotAsErrors configured\nin the projects, when the API or CLI `-warnaserror`\noption was enabled.\n\nFixes #10874.",
          "committedDate": "2024-11-07T20:15:40Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/backport to vs17.12",
        "createdAt": "2024-11-19T18:17:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Started backporting to vs17.12: https://github.com/dotnet/msbuild/actions/runs/11919226150",
        "createdAt": "2024-11-19T18:17:54Z",
        "author": {
          "login": "github-actions"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It'll need the worker node side adjust as well:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/5e119d75b47cbf7f35cdcb0690f2bbb4f6ef2288/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1282\r\n\r\n\r\nHopefuly it shouldn't have significant perf impact - but I haven't test that as it was limited to BuildCheck that's perf hit anyways.",
              "createdAt": "2024-10-27T20:22:03Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1666,8 +1666,8 @@ private void RouteBuildEvent(object loggingEvent)\n                 }\n             }\n \n-            // If this is BuildCheck-ed build - add the warnings promotability/demotability to the service\n-            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent && this._componentHost.BuildParameters.IsBuildCheckEnabled)\n+            // Respect warning-promotion properties from the remote project\n+            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I don't think I understand why that needs to change. This does fix the basic issue in #10874.",
              "createdAt": "2024-10-28T21:19:45Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1666,8 +1666,8 @@ private void RouteBuildEvent(object loggingEvent)\n                 }\n             }\n \n-            // If this is BuildCheck-ed build - add the warnings promotability/demotability to the service\n-            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent && this._componentHost.BuildParameters.IsBuildCheckEnabled)\n+            // Respect warning-promotion properties from the remote project\n+            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If receiving of `ProjectStartedEventArgs.Warnings[Not]As[Errors|Messages]` is wanted to be active regardless of BuildCheck being on - then the population of those properties should not be conditioned on that either. So the `buildCheckManager != null &&` should be removed in that code.\r\n\r\nIt worked because that conditioning was buggy - it should have conditioned based on `BuildParameters.IsBuildCheckEnabled` - as `buildCheckManager` has the \"null object\" value if BuildCheck is disabled - so the current condition is misleading. On top of that it causes skipping of the code during restore - which is the stage where we actualy want that to transfer the information.",
              "createdAt": "2024-11-01T10:45:56Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1666,8 +1666,8 @@ private void RouteBuildEvent(object loggingEvent)\n                 }\n             }\n \n-            // If this is BuildCheck-ed build - add the warnings promotability/demotability to the service\n-            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent && this._componentHost.BuildParameters.IsBuildCheckEnabled)\n+            // Respect warning-promotion properties from the remote project\n+            if (buildEventArgs is ProjectStartedEventArgs projectStartedEvent)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}