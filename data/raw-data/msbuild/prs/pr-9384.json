{
  "number": 9384,
  "title": "Fix solution-based graph builds when non 'well-known' project types are used",
  "body": "Fixes #9375\r\n\r\nPreviously, only projects which were `SolutionProjectType.KnownToBeMSBuildFormat` (handful of project type guids) would be considered. This would cause some projects in a sln to not be in the graph at all.\r\n\r\nThis change removes that check and in general brings solution-based graph construction slightly more aligned with how non-graph builds construct the metaproj (`SolutionProjectGenerator`). My ideal scenario would be that the graph would just directly call into `SolutionProjectGenerator` to create a metaproj and then use that as the entry point into the graph construction, but we would need to teach the metaproj the p2p protocol used for graph which is a bit more work. Maybe one day though :)\r\n\r\nChange details:\r\n* Removed the check for `SolutionProjectType.KnownToBeMSBuildFormat`\r\n* Replaced the check for non-zero `ProjectConfigurations` with a call to `SolutionFile.IsBuildableProject`, which does that and also filters out `SolutionProjectType.SolutionFolder`\r\n* Replaced the check for `projectConfiguration.IncludeInBuild` and `SolutionFile.ProjectShouldBuild` with a call to `SolutionProjectGenerator.WouldProjectBuild`, which does both those checks.",
  "state": "MERGED",
  "createdAt": "2023-11-01T20:28:45Z",
  "updatedAt": "2023-12-01T22:21:46Z",
  "closedAt": "2023-11-23T14:10:37Z",
  "mergedAt": "2023-11-23T14:10:37Z",
  "additions": 64,
  "deletions": 27,
  "changedFiles": 3,
  "headRefName": "dfederm/fix-graph-non-wellknown-proj",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bfd219eae635ca7e0641b213d50d3766367e0d78",
          "message": "Fix solution-based graph builds when non 'well-known' project types are used",
          "committedDate": "2023-11-01T20:24:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I actually like using this method for slnf support. I don't think you currently support that anyway, but it'd be a nice future scenario to consider.",
              "createdAt": "2023-11-14T22:19:27Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -307,41 +305,39 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n             // Project configurations are reused heavily, so cache the global properties for each\n             Dictionary<string, ImmutableDictionary<string, string>> globalPropertiesForProjectConfiguration = new(StringComparer.OrdinalIgnoreCase);\n \n+            IReadOnlyList<ProjectInSolution> projectsInSolution = solution.ProjectsInOrder;\n             var newEntryPoints = new List<ProjectGraphEntryPoint>(projectsInSolution.Count);\n \n             foreach (ProjectInSolution project in projectsInSolution)\n             {\n-                if (project.ProjectConfigurations.Count == 0)\n+                if (!SolutionFile.IsBuildableProject(project))\n                 {\n                     continue;\n                 }\n \n                 ProjectConfigurationInSolution projectConfiguration = SelectProjectConfiguration(currentSolutionConfiguration, project.ProjectConfigurations);\n \n-                if (projectConfiguration.IncludeInBuild)\n+                if (!SolutionProjectGenerator.WouldProjectBuild(solution, currentSolutionConfiguration.FullName, project, projectConfiguration))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yep, I'll look into slnf in the future.",
              "createdAt": "2023-11-23T14:08:19Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -307,41 +305,39 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n             // Project configurations are reused heavily, so cache the global properties for each\n             Dictionary<string, ImmutableDictionary<string, string>> globalPropertiesForProjectConfiguration = new(StringComparer.OrdinalIgnoreCase);\n \n+            IReadOnlyList<ProjectInSolution> projectsInSolution = solution.ProjectsInOrder;\n             var newEntryPoints = new List<ProjectGraphEntryPoint>(projectsInSolution.Count);\n \n             foreach (ProjectInSolution project in projectsInSolution)\n             {\n-                if (project.ProjectConfigurations.Count == 0)\n+                if (!SolutionFile.IsBuildableProject(project))\n                 {\n                     continue;\n                 }\n \n                 ProjectConfigurationInSolution projectConfiguration = SelectProjectConfiguration(currentSolutionConfiguration, project.ProjectConfigurations);\n \n-                if (projectConfiguration.IncludeInBuild)\n+                if (!SolutionProjectGenerator.WouldProjectBuild(solution, currentSolutionConfiguration.FullName, project, projectConfiguration))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}