{
  "number": 10487,
  "title": "Adjust output for NoEnvironmentVariablePropertyAnalyzer based on CustomConfuguration",
  "body": "Fixes #10429\r\n\r\n### Context\r\nEnvironment variables might contain secret information. It order to have it exposed, customers should specify a special configuration:\r\n\r\n`build_check.BC0103.allow_displaying_environment_variable_value=true`\r\n\r\n### Changes Made\r\nAdd respecting of `allow_displaying_environment_variable_value` configuration.\r\n\r\n### Testing\r\nAdded e2e tests\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-06T14:49:11Z",
  "updatedAt": "2024-08-07T08:43:01Z",
  "closedAt": "2024-08-07T08:43:01Z",
  "mergedAt": "2024-08-07T08:43:01Z",
  "additions": 104,
  "deletions": 33,
  "changedFiles": 8,
  "headRefName": "dev/ykovalova/display_env_value_on_verbose_only",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d2c8d2f485faa7363040e83e251b668d28e54b09",
          "message": "remove value reporting",
          "committedDate": "2024-08-06T12:28:47Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "295aaf3c52e1a4cc3c375932dfa26e91e78075c8",
          "message": "adjust the rule text based on custom configuration",
          "committedDate": "2024-08-06T14:45:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "687abc1bd75f96b096405190850dcc9b137113da",
          "message": "Merge branch 'main' into dev/ykovalova/display_env_value_on_verbose_only",
          "committedDate": "2024-08-06T16:37:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99060f0d03dcb557c867b0627bee93c22634d696",
          "message": "add test coverage for custom config in NoEnvironmentVariablePropertyAnalyzer",
          "committedDate": "2024-08-06T17:20:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e40b75a3df83b70e73a51ed372ad2db8e5a83900",
          "message": "fix review comment related to message formatting",
          "committedDate": "2024-08-07T07:48:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@JanKrivanek , heads up on the change",
              "createdAt": "2024-08-06T14:51:47Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerRule.cs",
              "diffHunk": "@@ -45,7 +49,7 @@ public class BuildAnalyzerRule\n     /// <summary>\n     /// Message format that will be used by the actual reports (<see cref=\"BuildCheckResult\"/>) - those will just supply the actual arguments.\n     /// </summary>\n-    public string MessageFormat { get; }\n+    public string MessageFormat { get; set; }",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "I like the nicely readable and organized formats per both verbosity options. On the other hand adding a mutability to this class feels to high tradeoff.\r\nLet's keep this immutable at the cost of less nice format (can be '{0}'). We can figure out better approach later onif needed often.",
              "createdAt": "2024-08-07T07:40:24Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerRule.cs",
              "diffHunk": "@@ -45,7 +49,7 @@ public class BuildAnalyzerRule\n     /// <summary>\n     /// Message format that will be used by the actual reports (<see cref=\"BuildCheckResult\"/>) - those will just supply the actual arguments.\n     /// </summary>\n-    public string MessageFormat { get; }\n+    public string MessageFormat { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Your analyzer has just single rule - so you can as well call just `GetVerboseEnvVarOutputConfig(configurationContext.CustomConfigurationData[0], RuleId);`",
              "createdAt": "2024-08-07T07:38:13Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -9,25 +9,39 @@ namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n \n internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n {\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n+                \"BC0103\",\n+                \"NoEnvironmentVariablePropertyAnalyzer\",\n+                \"No implicit property derived from an environment variable should be used during the build\",\n+                StandardMessage,\n+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });\n+\n+    private const string RuleId = \"BC0103\";\n+\n+    private const string VerboseEnvVariableOutputKey = \"allow_displaying_environment_variable_value\";\n+\n     /// <summary>\n     /// Contains the list of reported environment variables.\n     /// </summary>\n     private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();\n \n-    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n-        \"BC0103\",\n-        \"NoEnvironmentVariablePropertyAnalyzer\",\n-        \"No implicit property derived from an environment variable should be used during the build\",\n-        \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\",\n-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });\n+    private const string VerboseMessage = \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\";\n+\n+    private const string StandardMessage = \"Property is derived from environment variable: '{0}'. Properties should be passed explicitly using the /p option.\";\n+\n+    private bool _isVerboseEnvVarOutput;\n \n     public override string FriendlyName => \"MSBuild.NoEnvironmentVariablePropertyAnalyzer\";\n \n     public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n \n     public override void Initialize(ConfigurationContext configurationContext)\n     {\n-        // No custom configuration\n+        foreach (CustomConfigurationData customConfigurationData in configurationContext.CustomConfigurationData)\n+        {\n+            bool? isVerboseEnvVarOutput = GetVerboseEnvVarOutputConfig(customConfigurationData, RuleId);\n+            _isVerboseEnvVarOutput = isVerboseEnvVarOutput.HasValue && isVerboseEnvVarOutput.Value;           \n+        }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "But your code is fine as well and actually more universal - so let's maybe keep it :-)",
              "createdAt": "2024-08-07T07:38:28Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -9,25 +9,39 @@ namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n \n internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n {\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n+                \"BC0103\",\n+                \"NoEnvironmentVariablePropertyAnalyzer\",\n+                \"No implicit property derived from an environment variable should be used during the build\",\n+                StandardMessage,\n+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });\n+\n+    private const string RuleId = \"BC0103\";\n+\n+    private const string VerboseEnvVariableOutputKey = \"allow_displaying_environment_variable_value\";\n+\n     /// <summary>\n     /// Contains the list of reported environment variables.\n     /// </summary>\n     private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();\n \n-    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n-        \"BC0103\",\n-        \"NoEnvironmentVariablePropertyAnalyzer\",\n-        \"No implicit property derived from an environment variable should be used during the build\",\n-        \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\",\n-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Suggestion });\n+    private const string VerboseMessage = \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\";\n+\n+    private const string StandardMessage = \"Property is derived from environment variable: '{0}'. Properties should be passed explicitly using the /p option.\";\n+\n+    private bool _isVerboseEnvVarOutput;\n \n     public override string FriendlyName => \"MSBuild.NoEnvironmentVariablePropertyAnalyzer\";\n \n     public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n \n     public override void Initialize(ConfigurationContext configurationContext)\n     {\n-        // No custom configuration\n+        foreach (CustomConfigurationData customConfigurationData in configurationContext.CustomConfigurationData)\n+        {\n+            bool? isVerboseEnvVarOutput = GetVerboseEnvVarOutputConfig(customConfigurationData, RuleId);\n+            _isVerboseEnvVarOutput = isVerboseEnvVarOutput.HasValue && isVerboseEnvVarOutput.Value;           \n+        }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}