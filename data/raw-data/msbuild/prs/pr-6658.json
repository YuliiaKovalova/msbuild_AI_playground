{
  "number": 6658,
  "title": "Add ETW trace for PerformDependencyAnalysis",
  "body": "I was considering adding bucket.bucketSequenceNumber, but I don't think that's too important. Complicated information can't be easily ( / efficiently) attached to ETW traces\r\n\r\nFixes #6616\r\n\r\nI should make sure they appear in PerfView before merging.",
  "state": "MERGED",
  "createdAt": "2021-07-08T18:53:08Z",
  "updatedAt": "2021-07-26T09:17:40Z",
  "closedAt": "2021-07-26T09:17:40Z",
  "mergedAt": "2021-07-26T09:17:40Z",
  "additions": 15,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "add-etw-traces-for-utd-checks",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "16c3e8ecb3a0e821f24d7928d26a4197330cdb58",
          "message": "Add ETW trace for PerformDependencyAnalysis\n\nI was considering adding bucket.bucketSequenceNumber, but I don't think that's too important. Complicated information can't be easily ( / efficiently) attached to ETW traces",
          "committedDate": "2021-07-07T19:09:53Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a28449de00a99087d9930fb1a8539b0e6da9065",
          "message": "Copy + comments",
          "committedDate": "2021-07-08T23:14:25Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5cd6737369b03912bd8d1a46adb93e8826847b83",
          "message": "Remove Copy ETW",
          "committedDate": "2021-07-09T17:38:43Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I added an ETW event to Copy. I'd looked it over before, but it mostly seemed captured by the ExecuteTask ETW. I added something that notes whether it's parallel, but I'm now thinking it would have made more sense to specify how parallel, i.e., an int for parallelism (if parallel) or 1 if not. It also might be useful to put it under a IsEnabled check and include destinationFilesSuccessfullyCopied.Select(f => f.ItemSpec) on Stop events. Will do if you think it's a good idea.\r\n\r\nI'm not really sure how to find other tasks that run unconditionally, since you suggested away from debugging, and I couldn't (quickly) find documentation on it.",
        "createdAt": "2021-07-08T23:20:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I'm not really sure how to find other tasks that run unconditionally\r\n\r\n[Targets run incrementally](https://docs.microsoft.com/visualstudio/msbuild/incremental-builds) if they define inputs and outputs and the outputs are up to date with respect to the inputs' timestamps.\r\n\r\nSome targets do not define inputs and outputs. This is sometimes a bug (especially in custom targets/additions to the standard process) but sometimes intentional behavior because incremental behavior happens at another layer (like inside the Copy task or with tracker-based incremental builds for C++ compilation), can't be represented (like in the case of RAR), or isn't important (targets that just mutate MSBuild item/property state and are quick).\r\n\r\nOne way to do this would be to create a template project, build it, build it again, and see what tasks ran the second time through. Another would be to explicitly look for targets that don't have inputs/outputs.",
        "createdAt": "2021-07-12T14:33:36Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd claim that creating the object is part of the time spent (I doubt this matters much though).\r\n\r\n```suggestion\r\n                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();\r\n                        TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);\r\n```",
              "createdAt": "2021-07-08T19:22:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -465,7 +466,9 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n \n                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.\n                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can this log the result? I think we'll be interested in two aspects:\r\n\r\n1. Time it takes to decide something's fully up to date (pure overhead in a no-op incremental build)\r\n2. Time it takes to decide something's _not_ up to date in \"obvious\" cases (overhead when we need to build).",
              "createdAt": "2021-07-08T19:23:18Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -465,7 +466,9 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n \n                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.\n                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();\n                         DependencyAnalysisResult dependencyResult = dependencyAnalyzer.PerformDependencyAnalysis(bucket, out changedTargetInputs, out upToDateTargetInputs);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStop();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It definitely can...I don't think it can log what the result really means, though. In other words, it can log the int corresponding to the enum, but I don't think it can log what \"0\" or \"4\" correspond to. I can add it in anyway, since you can always look it up if it's important to you.",
              "createdAt": "2021-07-08T23:04:20Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -465,7 +466,9 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n \n                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.\n                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();\n                         DependencyAnalysisResult dependencyResult = dependencyAnalyzer.PerformDependencyAnalysis(bucket, out changedTargetInputs, out upToDateTargetInputs);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStop();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That's good enough for me too.",
              "createdAt": "2021-07-09T14:16:59Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -465,7 +466,9 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n \n                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.\n                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStart();\n                         DependencyAnalysisResult dependencyResult = dependencyAnalyzer.PerformDependencyAnalysis(bucket, out changedTargetInputs, out upToDateTargetInputs);\n+                        MSBuildEventSource.Log.PerformDependencyAnalysisStop();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I'd prefer a name like `TargetUpToDateCheckStart`/Stop; as the comment above notes this \"isn't really dependency analysis\" so I'd love to avoid propagating the bad name. Thoughts?",
              "createdAt": "2021-07-08T19:24:36Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -423,6 +423,18 @@ public void PacketReadSize(int size)\n         {\n             WriteEvent(55, size);\n         }\n+\n+        [Event(56, Keywords = Keywords.All)]\n+        public void PerformDependencyAnalysisStart()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I slightly prefer it this way because 1) there is other work that happens when it does an UTD check, albeit not too much, and 2) consistency is good even if it's slightly wrong consistency. I don't feel at all strongly, though, so I can change it.",
              "createdAt": "2021-07-08T23:06:24Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -423,6 +423,18 @@ public void PacketReadSize(int size)\n         {\n             WriteEvent(55, size);\n         }\n+\n+        [Event(56, Keywords = Keywords.All)]\n+        public void PerformDependencyAnalysisStart()",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think CopyStart/Stop is well covered by ExecuteTaskStart/Stop events. I was hoping for events measuring the up-to-date check within Copy.",
              "createdAt": "2021-07-09T14:21:56Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -423,6 +423,30 @@ public void PacketReadSize(int size)\n         {\n             WriteEvent(55, size);\n         }\n+\n+        [Event(56, Keywords = Keywords.All)]\n+        public void TargetUpToDateStart()\n+        {\n+            WriteEvent(56);\n+        }\n+\n+        [Event(57, Keywords = Keywords.All)]\n+        public void TargetUpToDateStop(int result)\n+        {\n+            WriteEvent(57, result);\n+        }\n+\n+        [Event(58, Keywords = Keywords.All)]\n+        public void CopyStart(bool singleThreaded)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}