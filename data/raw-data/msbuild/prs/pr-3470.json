{
  "number": 3470,
  "title": "Fix cache misses for out of cone globs",
  "body": "Out of cone globs do not depend on the project directory, so do not include the project directory in the out of cone glob key. Noticed this while debugging stepping my way through some vcxproj builds.",
  "state": "MERGED",
  "createdAt": "2018-07-02T22:38:14Z",
  "updatedAt": "2020-12-30T22:52:42Z",
  "closedAt": "2018-07-04T19:13:39Z",
  "mergedAt": "2018-07-04T19:13:39Z",
  "additions": 161,
  "deletions": 19,
  "changedFiles": 3,
  "headRefName": "fixCacheMissesForOutOfConeGlobs",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4cbe188b21c1d9bcdde891245ee87c5f8be56301",
          "message": "Fix cache misses for out of cone globs\n\nOut of cone globs do not depend on the project directory, so do not include the project directory in the out of cone glob key.",
          "committedDate": "2018-07-02T22:38:57Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1884de82497a07a74c8a213edf7b25f94a2c4be4",
          "message": "No Contains overload for net46 :(",
          "committedDate": "2018-07-02T23:29:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "382b0fd7182e81e4c50079168036f2ba03622464",
          "message": "feedback",
          "committedDate": "2018-07-03T18:01:55Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "655220d70d32d24fbb4d30a073e8c063210e260b",
          "message": "Honor legacy comment",
          "committedDate": "2018-07-03T22:18:44Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b0fd072369fb9f11a35eed89d20f204664d0e8a",
          "message": "Ignore IO exception during enumeration key computation",
          "committedDate": "2018-07-03T22:35:28Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-bot test OSX10.13 Build for CoreCLR\r\nhttps://ci2.dot.net/job/Microsoft_msbuild/job/master/job/innerloop_OSX10.13_CoreCLR_prtest/549/",
        "createdAt": "2018-07-04T18:29:23Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I get the gist of this comment but I found it a bit confusing. I think it'd be clearer if you said `when the project-directory-independent glob is used in multiple projects`?",
              "createdAt": "2018-07-03T16:03:41Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1782,9 +1782,27 @@ internal string[] GetFiles\n \n         private static string ComputeFileEnumerationCacheKey(string projectDirectoryUnescaped, string filespecUnescaped, IEnumerable<string> excludes)\n         {\n+            Debug.Assert(projectDirectoryUnescaped != null);\n+            Debug.Assert(filespecUnescaped != null);\n+\n             var sb = new StringBuilder();\n \n-            sb.Append(projectDirectoryUnescaped);\n+            if (filespecUnescaped.Contains(\"..\"))\n+            {\n+                filespecUnescaped = FileUtilities.GetFullPathNoThrow(filespecUnescaped);\n+            }\n+\n+            var filespecIsAnAbsoluteGlobPointingOutsideOfProjectCone =\n+                Path.IsPathRooted(filespecUnescaped) &&\n+                !filespecUnescaped.StartsWith(projectDirectoryUnescaped, StringComparison.OrdinalIgnoreCase);\n+\n+            // If we include the project directory when the filespec does not depend on it we'll get cache misses\n+            // when the project directory independent glob repeats for each project.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So many `object`s \ud83e\udd2f",
              "createdAt": "2018-07-03T16:05:48Z",
              "path": "src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs",
              "diffHunk": "@@ -243,6 +244,93 @@ public void ContextCachesItemElementGlobExpansions(EvaluationContext.SharingPoli\n                 );\n         }\n \n+        private static string[] _projectsWithOutOfConeGlobs =\n+        {\n+            @\"<Project>\n+                <ItemGroup>\n+                    <i Include=`{0}**/*.cs` />\n+                </ItemGroup>\n+            </Project>\",\n+\n+            @\"<Project>\n+                <ItemGroup>\n+                    <i Include=`{0}**/*.cs` />\n+                </ItemGroup>\n+            </Project>\",\n+        };\n+\n+        public static IEnumerable<object> ContextCachesCommonOutOfProjectConeGlobData\n+        {\n+            get\n+            {\n+                // combine the globbing test data with another bool for relative / absolute itemspecs\n+                foreach (var itemSpecPathIsRelative in new []{true, false})\n+                {\n+                    foreach (var globData in ContextPinsGlobExpansionCacheData)\n+                    {\n+                        object[] globDataArray = (object[]) globData;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: comma spacing in `(p ,i)`",
              "createdAt": "2018-07-03T16:06:43Z",
              "path": "src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs",
              "diffHunk": "@@ -243,6 +244,93 @@ public void ContextCachesItemElementGlobExpansions(EvaluationContext.SharingPoli\n                 );\n         }\n \n+        private static string[] _projectsWithOutOfConeGlobs =\n+        {\n+            @\"<Project>\n+                <ItemGroup>\n+                    <i Include=`{0}**/*.cs` />\n+                </ItemGroup>\n+            </Project>\",\n+\n+            @\"<Project>\n+                <ItemGroup>\n+                    <i Include=`{0}**/*.cs` />\n+                </ItemGroup>\n+            </Project>\",\n+        };\n+\n+        public static IEnumerable<object> ContextCachesCommonOutOfProjectConeGlobData\n+        {\n+            get\n+            {\n+                // combine the globbing test data with another bool for relative / absolute itemspecs\n+                foreach (var itemSpecPathIsRelative in new []{true, false})\n+                {\n+                    foreach (var globData in ContextPinsGlobExpansionCacheData)\n+                    {\n+                        object[] globDataArray = (object[]) globData;\n+\n+                        yield return new[]\n+                        {\n+                            itemSpecPathIsRelative,\n+                            globDataArray[0],\n+                            globDataArray[1],\n+                        };\n+                    }\n+                }\n+            }\n+        }\n+\n+        [Theory]\n+        [MemberData(nameof(ContextCachesCommonOutOfProjectConeGlobData))]\n+        // projects should cache glob expansions when the glob is shared between projects and points outside of project cone\n+        public void ContextCachesCommonOutOfProjectConeGlob(bool itemSpecPathIsRelative, EvaluationContext.SharingPolicy policy, string[][] expectedGlobExpansions)\n+        {\n+            var testDirectory = _env.DefaultTestDirectory.FolderPath;\n+            var globDirectory = Path.Combine(testDirectory, \"GlobDirectory\");\n+\n+            var itemSpecDirectoryPart = itemSpecPathIsRelative\n+                ? Path.Combine(\"..\", \"GlobDirectory\")\n+                : globDirectory;\n+\n+            itemSpecDirectoryPart = itemSpecDirectoryPart.WithTrailingSlash();\n+\n+            Directory.CreateDirectory(globDirectory);\n+\n+            // Globs with a directory part will produce items prepended with that directory part\n+            foreach (var globExpansion in expectedGlobExpansions)\n+            {\n+                for (var i = 0; i < globExpansion.Length; i++)\n+                {\n+                    globExpansion[i] = Path.Combine(itemSpecDirectoryPart, globExpansion[i]);\n+                }\n+            }\n+\n+            var projectSpecs = _projectsWithOutOfConeGlobs\n+                .Select(p => string.Format(p, itemSpecDirectoryPart))\n+                .Select((p ,i) => (Path.Combine(testDirectory, $\"ProjectDirectory{i}\", $\"Project{i}.proj\"), p));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is this, Python? `IEnumerable<named tuple>` . . .\r\n\r\n:)",
              "createdAt": "2018-07-03T16:09:02Z",
              "path": "src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs",
              "diffHunk": "@@ -346,19 +430,30 @@ public void ContextCachesExistenceChecksInConditions(EvaluationContext.SharingPo\n                 );\n         }\n \n+        private void EvaluateProjects(IEnumerable<string> projectContents, EvaluationContext context, Action<Project> afterEvaluationAction)\n+        {\n+            EvaluateProjects(\n+                projectContents.Select((p, i) => (Path.Combine(_env.DefaultTestDirectory.FolderPath, $\"Project{i}.proj\"), p)),\n+                context,\n+                afterEvaluationAction);\n+        }\n+\n         /// <summary>\n         /// Should be at least two test projects to test cache visibility between projects\n         /// </summary>\n-        private void EvaluateProjects(string[] projectContents, EvaluationContext context, Action<Project> afterEvaluationAction)\n+        private void EvaluateProjects(IEnumerable<(string ProjectPath, string ProjectContents)> projectSpecs, EvaluationContext context, Action<Project> afterEvaluationAction)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}