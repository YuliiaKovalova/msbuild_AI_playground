{
  "number": 7386,
  "title": "Opt into IncludeEvaluationPropertiesAndItems in NullLogger",
  "body": "This keeps a build with all distribution-aware loggers from vetoing the\r\nnew behavior because a logger (NullLogger) is attached that doesn't indicate\r\nthat it can handle it. It trivially can, so it should!\r\n\r\nRelated to #1222.",
  "state": "MERGED",
  "createdAt": "2022-02-11T18:19:11Z",
  "updatedAt": "2022-02-16T20:10:15Z",
  "closedAt": "2022-02-16T20:10:15Z",
  "mergedAt": "2022-02-16T20:10:15Z",
  "additions": 19,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "fancify-NullLogger",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Logging",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dd7ee140445013fad6f229a4e22d4676f3132d9a",
          "message": "Opt into IncludeEvaluationPropertiesAndItems in NullLogger\n\nThis keeps a build with all distribution-aware loggers from vetoing the\nnew behavior because a logger (NullLogger) is attached that doesn't indicate\nthat it can handle it. It trivially can, so it should!",
          "committedDate": "2022-02-11T18:14:56Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't IEventSource public? Can't someone have made their own IEventSource that doesn't implement IEventSource4?",
              "createdAt": "2022-02-14T04:48:16Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -3230,6 +3230,25 @@ public string Parameters\n             /// </summary>\n             public void Initialize(IEventSource eventSource)\n             {\n+                // The concrete type we get should always be our internal\n+                // implementation and up-to-date, but we need to meet the\n+                // external contract so can't specify that for the\n+                // argument.\n+\n+                IEventSource4 eventSource4 = (IEventSource4)eventSource;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "How would such a thing make it to this point? The engine instantiates the concrete implementation of `IEventSource` that is passed to loggers at runtime.\r\n\r\nI originally wrote this with an `as` and a null check, but that seems like it would be more likely to silently fail if something very odd happened.",
              "createdAt": "2022-02-14T15:18:55Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -3230,6 +3230,25 @@ public string Parameters\n             /// </summary>\n             public void Initialize(IEventSource eventSource)\n             {\n+                // The concrete type we get should always be our internal\n+                // implementation and up-to-date, but we need to meet the\n+                // external contract so can't specify that for the\n+                // argument.\n+\n+                IEventSource4 eventSource4 = (IEventSource4)eventSource;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}