{
  "number": 10026,
  "title": "Update AssignCulture Task to support existing Culture metadata",
  "body": "Fixes #9954\r\n\r\n### Context\r\nCurrently there is a difference in public documentation and actual implementation of AssignCulture task. \r\n\r\n### The difference: \r\n```If the incoming item from the Files parameter already contains a Culture metadata entry, the original metadata entry is used.```\r\n\r\n#### In fact the Culture is not respected. \r\n\r\nPlease see the comment: https://github.com/dotnet/msbuild/issues/9954#issuecomment-2049388980\r\n\r\n### Changes Made\r\nUpdate the AssignCulture task to include the property that will allow switch the way existing Culture metadata is handled. \r\n\r\n- If RespectAlreadyAssignedItemCulture is set to false\r\n   - the Culture will not be respected. \r\n- If RespectAlreadyAssignedItemCulture = true \r\n   - set Culture metadata is respected and the CultureNeutralAssignedFiles will be populated with unchanged filename of Files. \r\n\r\nUpdated the Microsoft.Common.CurrentVersion.targets to make it possible to set the property on the project\r\n\r\n### Testing\r\nAdded unit test + manually tested on the local project.",
  "state": "MERGED",
  "createdAt": "2024-04-17T14:10:34Z",
  "updatedAt": "2024-06-14T10:04:07Z",
  "closedAt": "2024-04-26T15:58:23Z",
  "mergedAt": "2024-04-26T15:58:23Z",
  "additions": 115,
  "deletions": 65,
  "changedFiles": 4,
  "headRefName": "dev/f-alizada/assign-culture-task-updates",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8f316c6972f9c4218a33f024888e670959d1f9b4",
          "message": "Update AssignCulture Task to support already assigned Culture",
          "committedDate": "2024-04-17T13:47:18Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f5fd516d43b82783852d27607f9a4400542dcfd9",
          "message": "Merge branch 'main' into dev/f-alizada/assign-culture-task-updates",
          "committedDate": "2024-04-18T09:46:33Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "47f0a8478005b0c55b375b4c17354d760078bbd1",
          "message": "Address PR comments",
          "committedDate": "2024-04-18T09:54:39Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbab9f0c4e98458043cc7b369171719246a8b19c",
          "message": "fix typo",
          "committedDate": "2024-04-18T09:56:50Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87ed9413b8085cbde237dcb9d176648540ef389d",
          "message": "address PR comment",
          "committedDate": "2024-04-26T13:31:06Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d13baaf9648e5a4e9a9369dffec5bcd701cee416",
          "message": "Update src/Tasks.UnitTests/AssignCulture_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-04-26T14:59:01Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "104755925+f-alizada@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2024-04-17T14:48:57Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-04-17T14:49:06Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-04-17T15:26:56Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-04-17T15:27:05Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo \"Cutlture\"",
              "createdAt": "2024-04-18T07:50:12Z",
              "path": "src/Tasks/AssignCulture.cs",
              "diffHunk": "@@ -41,6 +41,12 @@ public class AssignCulture : TaskExtension\n         [Required]\n         public ITaskItem[] Files { get; set; } = Array.Empty<ITaskItem>();\n \n+        /// <summary>\n+        /// If the flag set to 'true' the incoming list with existing Culture metadata will not be ammended and CultureNeutralAssignedFiles filename will be equal to the original.\n+        /// In case the Cutlture metadata was not provided, the logic of RespectAlreadyAssignedItemCulture will not take any effect.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thank you! Updated",
              "createdAt": "2024-04-18T09:58:34Z",
              "path": "src/Tasks/AssignCulture.cs",
              "diffHunk": "@@ -41,6 +41,12 @@ public class AssignCulture : TaskExtension\n         [Required]\n         public ITaskItem[] Files { get; set; } = Array.Empty<ITaskItem>();\n \n+        /// <summary>\n+        /// If the flag set to 'true' the incoming list with existing Culture metadata will not be ammended and CultureNeutralAssignedFiles filename will be equal to the original.\n+        /// In case the Cutlture metadata was not provided, the logic of RespectAlreadyAssignedItemCulture will not take any effect.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo \"repected\"",
              "createdAt": "2024-04-18T08:37:47Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -277,5 +261,47 @@ public void Pseudolocales_CaseInsensitive()\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Any pre-existing Culture attribute on the item is to be repected",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thank you! Addressed",
              "createdAt": "2024-04-18T09:59:02Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -277,5 +261,47 @@ public void Pseudolocales_CaseInsensitive()\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Any pre-existing Culture attribute on the item is to be repected",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: remove * from previous multiline comment",
              "createdAt": "2024-04-26T12:02:58Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -194,12 +179,11 @@ public void Regress283991()\n             Assert.Single(t.AssignedFilesWithNoCulture);\n         }\n \n-        /*\n-        * Method:   PseudoLocalization\n-        *\n-        * Test the usage of Windows Pseudo-Locales\n-        * https://docs.microsoft.com/en-gb/windows/desktop/Intl/pseudo-locales\n-        */\n+        /// <summary>\n+        /// Test the usage of Windows Pseudo-Locales\n+        /// * https://docs.microsoft.com/en-gb/windows/desktop/Intl/pseudo-locales",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a rollout plan for making this `true`?",
              "createdAt": "2024-04-26T14:33:16Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3244,6 +3244,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       Name=\"SplitResourcesByCulture\"\n       DependsOnTargets=\"AssignTargetPaths\">\n \n+    <PropertyGroup>\n+      <RespectAlreadyAssignedItemCulture Condition=\"'$(RespectAlreadyAssignedItemCulture)' == ''\">false</RespectAlreadyAssignedItemCulture>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, once this is checked in -> enabling possibility to to use the predefined Culture metada functionality. \r\nWithin the next release I'll enable this behaviour by default (under the change wave 17.12). I planned to file a issue not to forget it (after PR is merged). ",
              "createdAt": "2024-04-26T15:07:10Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3244,6 +3244,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       Name=\"SplitResourcesByCulture\"\n       DependsOnTargets=\"AssignTargetPaths\">\n \n+    <PropertyGroup>\n+      <RespectAlreadyAssignedItemCulture Condition=\"'$(RespectAlreadyAssignedItemCulture)' == ''\">false</RespectAlreadyAssignedItemCulture>",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public void CultureMetaDataShouldNotBeRespected()\r\n```",
              "createdAt": "2024-04-26T14:34:11Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -277,5 +261,47 @@ public void Pseudolocales_CaseInsensitive()\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Any pre-existing Culture attribute on the item is to be respected\n+        /// </summary>\n+        [Fact]\n+        public void CultureMetaDataShouldBeRespected()\n+        {\n+            AssignCulture t = new AssignCulture();\n+            t.BuildEngine = new MockEngine();\n+            ITaskItem i = new TaskItem(\"MyResource.fr.resx\");\n+            i.SetMetadata(\"Culture\", \"en-GB\");\n+            t.Files = new ITaskItem[] { i };\n+            t.RespectAlreadyAssignedItemCulture = true;\n+            t.Execute();\n+\n+            Assert.Single(t.AssignedFiles);\n+            Assert.Single(t.CultureNeutralAssignedFiles);\n+            Assert.Equal(\"en-GB\", t.AssignedFiles[0].GetMetadata(\"Culture\"));\n+            Assert.Equal(\"MyResource.fr.resx\", t.AssignedFiles[0].ItemSpec);\n+            Assert.Equal(\"MyResource.fr.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n+        }\n+\n+        /// <summary>\n+        /// Any pre-existing Culture attribute on the item is not to be respected, because culture is not set\n+        /// </summary>\n+        [Fact]\n+        public void CultureMetaDataShouldNoBeRespected()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}