{
  "number": 11284,
  "title": "Prevent race condition in LoggingService",
  "body": "Fixes: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/2320135/\r\n\r\n### Context\r\n`Reset()` method invocation sometimes causes exception `System.IO.IOException: 'The handle is invalid.'`.\r\nVery likely it happens on application shutdown.\r\nThe assumption is:\r\n- [ShutdownComponent](https://github.com/dotnet/msbuild/blob/71e99de14ceadc86db7ee46551bd709a788bb95a/src/Build/BackEnd/Components/Logging/LoggingService.cs#L888) starts and gets the _lockObject\r\n- It cleans up/disposes the events\r\n- _Meanwhile_ our logging thread is trying to use those same [events ](https://github.com/dotnet/msbuild/blob/71e99de14ceadc86db7ee46551bd709a788bb95a/src/Build/BackEnd/Components/Logging/LoggingService.cs#L1432) without checking _lockObject in context of StartLoggingEventProcessing()\r\n\r\n###  Changes Made\r\n 1. All local vars to prevent a race to set fields null and then use them\r\n 2. Add catch if fields got disposed while Logging still was going on.\r\n \r\n![image](https://github.com/user-attachments/assets/38fe843e-8028-4486-83b7-428f3df1c812)\r\n\r\n\r\n### Testing\r\nN/A\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-14T17:07:06Z",
  "updatedAt": "2025-02-11T16:19:44Z",
  "closedAt": "2025-02-11T16:19:44Z",
  "mergedAt": "2025-02-11T16:19:44Z",
  "additions": 40,
  "deletions": 23,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/better_handle_event_reset",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "91335ea0147923ec84892d241865c2bd2877b394",
          "message": "apply double check pattern to avoid race condition",
          "committedDate": "2025-01-14T17:05:56Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74a1a7468bd8859d95ff0224cba8c5fa45af9c7f",
          "message": "adjust double check pattern",
          "committedDate": "2025-01-27T09:18:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eacfff5045c47df6ed791ae8415374d18333c309",
          "message": "make fields nullable",
          "committedDate": "2025-01-27T09:29:33Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "012e3d1340cc1056d425cdb634ed2af31686ce11",
          "message": "Add timeout to WaitAny to prevent indefinite waits",
          "committedDate": "2025-01-27T09:57:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63897a19b16d84ebb9f26150250bf524d8061a67",
          "message": "change logic for wait loop",
          "committedDate": "2025-01-27T10:14:32Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "365391088f5cac47a4ae7c911a03d4f2726071ef",
          "message": "check what causes build hang?",
          "committedDate": "2025-01-27T10:52:34Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73417859902162434e42138f3f9a8f80b496294f",
          "message": "cleanup",
          "committedDate": "2025-01-27T11:37:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f9c3409cbff2025c30f5f749cd7559554a4849e",
          "message": "adjustments",
          "committedDate": "2025-01-27T11:48:49Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b87fe20074c2a34109bc01ec303c709930034098",
          "message": "Store field references locally to prevent race with cleanup",
          "committedDate": "2025-02-06T16:41:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "280c68b854f098c39cfd17dfcfe8ed5e2c59116c",
          "message": "add catch for ObjectDisposedException",
          "committedDate": "2025-02-11T11:44:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb18627924a50c90a9bc5e3cca889155c525b898",
          "message": "extend catch block",
          "committedDate": "2025-02-11T11:52:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ad97e9a9d8783fe80c01bc6106d182f9b00d72e",
          "message": "return reset method",
          "committedDate": "2025-02-11T12:16:16Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The solution isn't ideal, but it allows to avoid \"System.IO.IOException: 'The handle is invalid.'\" exception.\r\nif it's not enough and causes other crashes, we will reconsider it.",
        "createdAt": "2025-02-11T16:17:14Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's try to avoid this - we'd have no indications of unexpected behavior from labs or watsons",
              "createdAt": "2025-01-30T14:23:38Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1398,49 +1412,61 @@ private void StartLoggingEventProcessing()\n             void LoggingEventProc()\n             {\n                 var completeAdding = _loggingEventProcessingCancellation.Token;\n-                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent };\n+                WaitHandle[] waitHandlesForNextEvent = [completeAdding.WaitHandle, _enqueueEvent];\n \n-                do\n+                try\n                 {\n-                    if (_eventQueue.TryDequeue(out object ev))\n+                    do\n                     {\n-                        LoggingEventProcessor(ev);\n-                        _dequeueEvent.Set();\n-                    }\n-                    else\n-                    {\n-                        _emptyQueueEvent.Set();\n+                        // Check if instance fields are nulled (cleanup was called)\n+                        if (_eventQueue == null || _dequeueEvent == null || _emptyQueueEvent == null || _enqueueEvent == null)\n+                        {\n+                            break;\n+                        }\n \n-                        // Wait for next event, or finish.\n-                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                        if (_eventQueue.TryDequeue(out object ev))\n                         {\n-                            WaitHandle.WaitAny(waitHandlesForNextEvent);\n+                            LoggingEventProcessor(ev);\n+                            _dequeueEvent?.Set();\n                         }\n+                        else\n+                        {\n+                            _emptyQueueEvent?.Set();\n \n-                        _emptyQueueEvent.Reset();\n-                    }\n-                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);\n+                            if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                            {\n+                                WaitHandle.WaitAny(waitHandlesForNextEvent);\n+                            }\n+\n+                            _emptyQueueEvent?.Reset();\n+                        }\n+                    } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested || _emptyQueueEvent != null);\n \n-                _emptyQueueEvent.Set();\n+                    _emptyQueueEvent?.Set();\n+                }\n+                catch (Exception)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why are those needed?",
              "createdAt": "2025-01-30T14:31:48Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -244,16 +244,23 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler\n         /// </summary>\n         private ConcurrentQueue<object> _eventQueue;\n \n+        // Long-lived event handles that never get disposed to avoid race conditions.\n+        private readonly AutoResetEvent _longLivedDequeueEvent = new AutoResetEvent(false);\n+        private readonly ManualResetEvent _longLivedEmptyQueueEvent = new ManualResetEvent(true);\n+        private readonly AutoResetEvent _longLivedEnqueueEvent = new AutoResetEvent(false);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The idea was to keep long living events and just reset their state when StartLoggingEventProcessing() is called.",
              "createdAt": "2025-02-06T13:57:54Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -244,16 +244,23 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler\n         /// </summary>\n         private ConcurrentQueue<object> _eventQueue;\n \n+        // Long-lived event handles that never get disposed to avoid race conditions.\n+        private readonly AutoResetEvent _longLivedDequeueEvent = new AutoResetEvent(false);\n+        private readonly ManualResetEvent _longLivedEmptyQueueEvent = new ManualResetEvent(true);\n+        private readonly AutoResetEvent _longLivedEnqueueEvent = new AutoResetEvent(false);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These can still get  nullified right after checking.\r\nWe should store them in local variables and check and use those here. Then nullyfying in the close method could be kept",
              "createdAt": "2025-01-30T14:35:57Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1398,49 +1412,61 @@ private void StartLoggingEventProcessing()\n             void LoggingEventProc()\n             {\n                 var completeAdding = _loggingEventProcessingCancellation.Token;\n-                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent };\n+                WaitHandle[] waitHandlesForNextEvent = [completeAdding.WaitHandle, _enqueueEvent];\n \n-                do\n+                try\n                 {\n-                    if (_eventQueue.TryDequeue(out object ev))\n+                    do\n                     {\n-                        LoggingEventProcessor(ev);\n-                        _dequeueEvent.Set();\n-                    }\n-                    else\n-                    {\n-                        _emptyQueueEvent.Set();\n+                        // Check if instance fields are nulled (cleanup was called)\n+                        if (_eventQueue == null || _dequeueEvent == null || _emptyQueueEvent == null || _enqueueEvent == null)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "let me know if it looks better now",
              "createdAt": "2025-02-06T14:02:38Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1398,49 +1412,61 @@ private void StartLoggingEventProcessing()\n             void LoggingEventProc()\n             {\n                 var completeAdding = _loggingEventProcessingCancellation.Token;\n-                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent };\n+                WaitHandle[] waitHandlesForNextEvent = [completeAdding.WaitHandle, _enqueueEvent];\n \n-                do\n+                try\n                 {\n-                    if (_eventQueue.TryDequeue(out object ev))\n+                    do\n                     {\n-                        LoggingEventProcessor(ev);\n-                        _dequeueEvent.Set();\n-                    }\n-                    else\n-                    {\n-                        _emptyQueueEvent.Set();\n+                        // Check if instance fields are nulled (cleanup was called)\n+                        if (_eventQueue == null || _dequeueEvent == null || _emptyQueueEvent == null || _enqueueEvent == null)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "@rainersigwald please join the discussion ",
              "createdAt": "2025-02-06T14:03:02Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1398,49 +1412,61 @@ private void StartLoggingEventProcessing()\n             void LoggingEventProc()\n             {\n                 var completeAdding = _loggingEventProcessingCancellation.Token;\n-                WaitHandle[] waitHandlesForNextEvent = { completeAdding.WaitHandle, _enqueueEvent };\n+                WaitHandle[] waitHandlesForNextEvent = [completeAdding.WaitHandle, _enqueueEvent];\n \n-                do\n+                try\n                 {\n-                    if (_eventQueue.TryDequeue(out object ev))\n+                    do\n                     {\n-                        LoggingEventProcessor(ev);\n-                        _dequeueEvent.Set();\n-                    }\n-                    else\n-                    {\n-                        _emptyQueueEvent.Set();\n+                        // Check if instance fields are nulled (cleanup was called)\n+                        if (_eventQueue == null || _dequeueEvent == null || _emptyQueueEvent == null || _enqueueEvent == null)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}