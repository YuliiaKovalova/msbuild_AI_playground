{
  "number": 9578,
  "title": "Improve ConfigurableForwardingLogger",
  "body": "### Context\r\nRandom find - `ConfigurableForwardingLogger` is checking a string dictionary for each build event, while a simple events (un)subscriptions can achieve same job with less efforts (coding and CPU)\r\n\r\n### Testing\r\nExisting tests ([`ConfigureableForwardingLogger_Tests`](https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/ConfigureableForwardingLogger_Tests.cs))\r\n",
  "state": "MERGED",
  "createdAt": "2023-12-29T12:11:38Z",
  "updatedAt": "2024-01-16T10:58:34Z",
  "closedAt": "2024-01-06T19:47:38Z",
  "mergedAt": "2024-01-06T19:47:38Z",
  "additions": 332,
  "deletions": 289,
  "changedFiles": 2,
  "headRefName": "proto/FwdingLogger-improve",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0c161a0d9072e2b11b2f9c8cdc10324d82e5ce6b",
          "message": "Improve ConfigurableForwardingLogger",
          "committedDate": "2024-01-03T13:35:19Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4530419f401cdaded7f3b21b633ad884188157e0",
          "message": "Fix style checks",
          "committedDate": "2024-01-03T14:26:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c24c2bc5013738af7d2ba51e49bd807de63a14b",
          "message": "Fix missing subscriptions",
          "committedDate": "2024-01-03T17:03:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c37382e468cf8f62787a1d34a6cdfe67351a4951",
          "message": "Solidify code",
          "committedDate": "2024-01-04T10:21:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Done\r\n\r\n~~Note - I accidentally eddited the Deprecated sources version - so porting the changes to the proper source~~\r\n\r\nBtw. - I cannot wait till we'll finally geer rid of the Deprecated sources!! :-)",
        "createdAt": "2024-01-03T13:04:50Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek this change broke terminal logger output, can you please investigate?\r\n\r\nTo reproduce, build the MSBuild repo with `/tl`. With this change it's missing most of the `Project tfm succeeded (N.Ns) \u2192 path/to/output` log lines.\r\n\r\n**Good:**\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/09ff98dd-5b0e-415d-a261-de721f770585)\r\n&lt;snip&gt;\r\n\r\n**Bad:**\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/a460b688-7947-45a8-8e80-2b32c9b8b1f7)\r\n\r\n",
        "createdAt": "2024-01-16T10:58:33Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n        private bool forwardLowImportanceMessages, forwardNormalImportanceMessages, forwardHighImportanceMessages, forwardTaskCommandLine;\r\n```\r\n\r\n(And similar in this PR)",
              "createdAt": "2024-01-02T21:56:09Z",
              "path": "src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -529,6 +425,11 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)\n         /// </summary>\n         private bool showCommandLine = false;\n \n+        /// <summary>\n+        /// Fine tunning of BuildMessageEventArgs forwarding\n+        /// </summary>\n+        private bool forwardLowImportnaceMessages, forwardNormalImportnaceMessages, forwardHighImportnaceMessages, forwardTaskCommandLine;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good catch - I needed to go letter by letter to see the actual difference :-D",
              "createdAt": "2024-01-03T13:37:02Z",
              "path": "src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -529,6 +425,11 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)\n         /// </summary>\n         private bool showCommandLine = false;\n \n+        /// <summary>\n+        /// Fine tunning of BuildMessageEventArgs forwarding\n+        /// </summary>\n+        private bool forwardLowImportnaceMessages, forwardNormalImportnaceMessages, forwardHighImportnaceMessages, forwardTaskCommandLine;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is only called once per logger and at initialization time, correct? How are double subscriptions possible?",
              "createdAt": "2024-01-02T22:00:57Z",
              "path": "src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -188,67 +219,80 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "True - but some of those events can get multiple subscribed even during single call - as e.g. `showSummary` implies subscription to errors and warnings that can be subscribed based on verbosity",
              "createdAt": "2024-01-03T11:56:47Z",
              "path": "src/Deprecated/Engine/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -188,67 +219,80 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: `-= .. +=` pattern to unsure at most once evens subscription repeats a lot here. Please consider introducing helping methods.  such as `ProjectStartedHandling(); BuildStartedHandling(); ...`",
              "createdAt": "2024-01-03T19:34:01Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -125,8 +98,10 @@ private void ParseParameters()\n                     // We can't know whether the project items needed to find ForwardProjectContextDescription\n                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know\n                     // all of the other loggers that will be attached. So turn both on.\n-                    _forwardingTable[ProjectStartedEventDescription] = 1;\n-                    _forwardingTable[ProjectEvaluationEventDescription] = 1;\n+                    eventSource.StatusEventRaised -= BuildStatusHandler;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I'm not 100% sure of this, but it would be nice if you can make it a bit more generic, i.e.,\r\nHandleEvent(eventSource.ProjectStarted, ForwardEvent);",
              "createdAt": "2024-01-03T20:40:48Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -125,8 +98,10 @@ private void ParseParameters()\n                     // We can't know whether the project items needed to find ForwardProjectContextDescription\n                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know\n                     // all of the other loggers that will be attached. So turn both on.\n-                    _forwardingTable[ProjectStartedEventDescription] = 1;\n-                    _forwardingTable[ProjectEvaluationEventDescription] = 1;\n+                    eventSource.StatusEventRaised -= BuildStatusHandler;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I am not sure if it is possible since every event is different type. At least I don't know how to do that without heavy reflections work.",
              "createdAt": "2024-01-03T21:38:03Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -125,8 +98,10 @@ private void ParseParameters()\n                     // We can't know whether the project items needed to find ForwardProjectContextDescription\n                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know\n                     // all of the other loggers that will be attached. So turn both on.\n-                    _forwardingTable[ProjectStartedEventDescription] = 1;\n-                    _forwardingTable[ProjectEvaluationEventDescription] = 1;\n+                    eventSource.StatusEventRaised -= BuildStatusHandler;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Events are special beasts - even if all the events would have same type, it still would not be possible - as it is not allowed to pass event as an argument.\r\n\r\nBut let me add all those methods as extensions for a general usage by any code that would wish - that way the chatty code will not look so overkill",
              "createdAt": "2024-01-04T09:30:12Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -125,8 +98,10 @@ private void ParseParameters()\n                     // We can't know whether the project items needed to find ForwardProjectContextDescription\n                     // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know\n                     // all of the other loggers that will be attached. So turn both on.\n-                    _forwardingTable[ProjectStartedEventDescription] = 1;\n-                    _forwardingTable[ProjectEvaluationEventDescription] = 1;\n+                    eventSource.StatusEventRaised -= BuildStatusHandler;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: I was thinking maybe we can preserve IEventSource from initialize method as class field so we don't need to  propagate it down the stack.",
              "createdAt": "2024-01-03T19:39:25Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I prefer having it explicit that subscriptions can happen only during the construction.",
              "createdAt": "2024-01-04T09:31:41Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: Please consider `-=` as well here.\r\nAlthough with current code it is not possible people will do double subcription here, unless they call Initialize twice, omitting `-=` here makes code unnecessarily fragile.\r\nUsing those `ProjectStartedHandling()` would address it too.",
              "createdAt": "2024-01-03T19:39:59Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83e\udd26 Better twice times than none :-)",
              "createdAt": "2024-01-03T19:43:36Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Detailed))\n             {\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[TaskStartedEventDescription] = 1;\n-                _forwardingTable[TaskFinishedEventDescription] = 1;\n-                _forwardingTable[LowMessageEventDescription] = 1;\n+                eventSource.TaskStarted += ForwardEvent;\n+                eventSource.TaskFinished += ForwardEvent;\n+\n+                // MessageHandler already subscribed\n+                _forwardLowImportanceMessages = true;\n+                _forwardTaskCommandLine = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Diagnostic))\n             {\n-                _forwardingTable[CustomEventDescription] = 1;\n-                _forwardingTable[ProjectEvaluationEventDescription] = 1;\n+                eventSource.CustomEventRaised += ForwardEvent;\n+                eventSource.StatusEventRaised += BuildStatusHandler;\n             }\n \n             if (_showSummary)\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                // Prevent double subscribe\n+                eventSource.ErrorRaised -= ForwardEvent;\n+                eventSource.WarningRaised -= ForwardEvent;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (_showPerfSummary)\n             {\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[TaskStartedEventDescription] = 1;\n-                _forwardingTable[TaskFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we shall set `_forwardTaskCommandLine` here, shall we? Also, why it had not bee caught by unit tests?",
              "createdAt": "2024-01-03T19:55:16Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "This is deal-breaker and reason for change request, if I am not mistaken.",
              "createdAt": "2024-01-03T19:59:51Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "You mean line 265?",
              "createdAt": "2024-01-03T20:42:40Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No I mean missing `_forwardTaskCommandLine = true` somewhere here",
              "createdAt": "2024-01-03T21:30:20Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Wait a minute, .... I must have had reviewed code without last commit.... It is fixed now.",
              "createdAt": "2024-01-03T21:35:29Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Sorry for churn and for wasted reviewing effort.\r\n\r\nI blame it on the presence of deprecated code. We should realy push on getting rid of it - this is not the first time when it cost me some extra time (not counting all those gazillions of times per day when I searh through the types and everything is twice in the results, but one of them is just 'clickbait trap' :-))",
              "createdAt": "2024-01-04T08:25:16Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,83 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n-\n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These are both covered above, right? Just delete them?",
              "createdAt": "2024-01-03T20:43:59Z",
              "path": "src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs",
              "diffHunk": "@@ -210,69 +241,88 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n             Initialize(eventSource);\n         }\n \n-        private void SetForwardingBasedOnVerbosity()\n+        private void SetForwardingBasedOnVerbosity(IEventSource eventSource)\n         {\n-            _forwardingTable[BuildStartedEventDescription] = 1;\n-            _forwardingTable[BuildFinishedEventDescription] = 1;\n+            eventSource.BuildStarted += ForwardEvent;\n+            eventSource.BuildFinished += ForwardEvent;\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Quiet))\n             {\n-                _forwardingTable[ErrorEventDescription] = 1;\n-                _forwardingTable[WarningEventDescription] = 1;\n+                eventSource.ErrorRaised += ForwardEvent;\n+                eventSource.WarningRaised += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Minimal))\n             {\n-                _forwardingTable[HighMessageEventDescription] = 1;\n+                eventSource.MessageRaised += MessageHandler;\n+                _forwardHighImportanceMessages = true;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Normal))\n             {\n-                _forwardingTable[NormalMessageEventDescription] = 1;\n-                _forwardingTable[ProjectStartedEventDescription] = 1;\n-                _forwardingTable[ProjectFinishedEventDescription] = 1;\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[CommandLineDescription] = 1;\n+                // MessageHandler already subscribed\n+                _forwardNormalImportanceMessages = true;\n+                _forwardTaskCommandLine = true;\n+\n+                eventSource.ProjectStarted += ForwardEvent;\n+                eventSource.ProjectFinished += ForwardEvent;\n+                eventSource.TargetStarted += ForwardEvent;\n+                eventSource.TargetFinished += ForwardEvent;\n             }\n \n             if (IsVerbosityAtLeast(LoggerVerbosity.Detailed))\n             {\n-                _forwardingTable[TargetStartedEventDescription] = 1;\n-                _forwardingTable[TargetFinishedEventDescription] = 1;\n-                _forwardingTable[TaskStartedEventDescription] = 1;\n-                _forwardingTable[TaskFinishedEventDescription] = 1;\n-                _forwardingTable[LowMessageEventDescription] = 1;\n+                eventSource.TaskStarted += ForwardEvent;\n+                eventSource.TaskFinished += ForwardEvent;\n+\n+                // MessageHandler already subscribed\n+                _forwardLowImportanceMessages = true;\n+                _forwardTaskCommandLine = true;\n+                _forwardTaskCommandLine = true;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}