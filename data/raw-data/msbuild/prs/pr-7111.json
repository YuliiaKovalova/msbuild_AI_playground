{
  "number": 7111,
  "title": "Use Enumerable.Empty<> over Array.Empty<>",
  "body": "### Context\r\n\r\nObserved while reading through code. I encountered this in a trace on a different code base and dug out my benchmarking from then.\r\n\r\nEnumeration of `Enumerable.Empty<>` incurs zero allocations, whereas enumerating `Array.Empty<>` allocates 32 bytes. The former is also 40% faster.\r\n\r\n|            Method |      Mean |     Error |    StdDev | Ratio | RatioSD |  Gen 0 | Allocated |\r\n|------------------ |----------:|----------:|----------:|------:|--------:|-------:|----------:|\r\n|        ArrayEmpty | 34.285 ns | 0.7368 ns | 1.3839 ns |  1.00 |    0.00 | 0.0055 |      32 B |\r\n|   EnumerableEmpty | 20.980 ns | 0.4713 ns | 0.6607 ns |  0.60 |    0.03 |      - |         - |\r\n\r\n```c#\r\n[SimpleJob(RuntimeMoniker.Net48)]\r\n[MemoryDiagnoser]\r\npublic class EmptyEnumeratorBenchmarks\r\n{\r\n    [Benchmark(Baseline = true)] public bool ArrayEmpty() => Array.Empty<string>().GetEnumerator().MoveNext();\r\n\r\n    [Benchmark] public bool EnumerableEmpty() => Enumerable.Empty<string>().GetEnumerator().MoveNext();\r\n}\r\n```\r\n\r\n### Changes Made\r\n\r\nReplace uses of `Array.Empty<>` with `Enumerable.Empty<>` where possible. Most of these changes appear related to build logging.\r\n\r\n### Testing\r\n\r\nCI.",
  "state": "MERGED",
  "createdAt": "2021-12-02T09:18:36Z",
  "updatedAt": "2021-12-07T05:00:00Z",
  "closedAt": "2021-12-06T17:14:56Z",
  "mergedAt": "2021-12-06T17:14:56Z",
  "additions": 10,
  "deletions": 8,
  "changedFiles": 5,
  "headRefName": "dev/drnoakes/enumerable-empty",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fe7dee80a7fa5f449ec4134965e2a0db40c19979",
          "message": "Use Enumerable.Empty<> over Array.Empty<>\n\nEnumeration of `Enumerable.Empty<>` incurs zero allocations, whereas enumerating `Array.Empty<>` allocates 32 bytes. The former is also 40% faster.\n\n|            Method |      Mean |     Error |    StdDev | Ratio | RatioSD |  Gen 0 | Allocated |\n|------------------ |----------:|----------:|----------:|------:|--------:|-------:|----------:|\n|        ArrayEmpty | 34.285 ns | 0.7368 ns | 1.3839 ns |  1.00 |    0.00 | 0.0055 |      32 B |\n|   EnumerableEmpty | 20.980 ns | 0.4713 ns | 0.6607 ns |  0.60 |    0.03 |      - |         - |",
          "committedDate": "2021-12-02T09:08:29Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81b868ba6949dae644028b9cb81c04fecdb5830c",
          "message": "Merge branch 'main' into dev/drnoakes/enumerable-empty",
          "committedDate": "2021-12-06T16:29:46Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "`foreach` over array/string is replaced with a for loop by the compiler. \r\n\r\nArray's GetEnumerator is an object. https://source.dot.net/#System.Private.CoreLib/Array.Enumerators.cs,e3f6dbfc4cf7bcab,references\r\n\r\nIt's possible Enumerable.Empty got inlined because it's an EmptyPartition.\r\n\r\nhttps://source.dot.net/#System.Linq/System/Linq/Partition.SpeedOpt.cs,9611940f9dbc593c",
        "createdAt": "2021-12-02T13:38:04Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "Also, yeah, Enumerable.Empty, afaik, is an `IPartition<T>` which is the main type optimized for in LINQ.",
        "createdAt": "2021-12-02T15:44:19Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "> `foreach` over array/string is replaced with a for loop by the compiler.\n\nThis is true when the declared type is an array. When the declared type is `IEnumerable` an enumerator is allocated.\n",
        "createdAt": "2021-12-02T20:25:16Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Yup, that's why I mentioned Array's GetEnumerator. I like this change.",
        "createdAt": "2021-12-02T20:33:24Z",
        "author": {
          "login": "Therzok"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Better yet, inline these. It looks like there are several opportunities for simplifying this constructor.",
              "createdAt": "2021-12-02T21:30:18Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -80,8 +81,8 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss\n             ProjectPropertyInstanceEnumeratorProxy properties = null;\n             ProjectItemInstanceEnumeratorProxy items = null;\n \n-            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Array.Empty<ProjectPropertyInstance>() : null;\n-            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Array.Empty<ProjectItemInstance>() : null;\n+            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Enumerable.Empty<ProjectPropertyInstance>() : null;\n+            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Enumerable.Empty<ProjectItemInstance>() : null;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Apologies, I didn't get to this before it was merged. Looks like it's been done in #7117 though.",
              "createdAt": "2021-12-07T02:34:17Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -80,8 +81,8 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss\n             ProjectPropertyInstanceEnumeratorProxy properties = null;\n             ProjectItemInstanceEnumeratorProxy items = null;\n \n-            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Array.Empty<ProjectPropertyInstance>() : null;\n-            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Array.Empty<ProjectItemInstance>() : null;\n+            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Enumerable.Empty<ProjectPropertyInstance>() : null;\n+            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Enumerable.Empty<ProjectItemInstance>() : null;",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Yes! No worries; I saw that and marked this merge-when-branch-open.",
              "createdAt": "2021-12-07T05:00:00Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -80,8 +81,8 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss\n             ProjectPropertyInstanceEnumeratorProxy properties = null;\n             ProjectItemInstanceEnumeratorProxy items = null;\n \n-            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Array.Empty<ProjectPropertyInstance>() : null;\n-            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Array.Empty<ProjectItemInstance>() : null;\n+            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Enumerable.Empty<ProjectPropertyInstance>() : null;\n+            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Enumerable.Empty<ProjectItemInstance>() : null;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}