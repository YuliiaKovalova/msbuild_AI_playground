{
  "number": 6385,
  "title": "Build out of proc sln file using MSBUILDNOINPROCNODE",
  "body": "Fixes #3517\r\n\r\n### Context\r\nWhile using MSBUILDNOINPROCNODE building *.sln project out of process has been failing.\r\n\r\n### Changes Made\r\nWhen sln file is parsed in memory metaproject is created. In such case entire metaproject is serialized and sent out of proc.\r\n\r\n### Testing\r\nUnit tests and end to end test.\r\n",
  "state": "MERGED",
  "createdAt": "2021-04-29T13:08:32Z",
  "updatedAt": "2021-05-24T20:43:30Z",
  "closedAt": "2021-05-24T20:43:30Z",
  "mergedAt": "2021-05-24T20:43:30Z",
  "additions": 133,
  "deletions": 34,
  "changedFiles": 5,
  "headRefName": "rokonec/3517-out-of-proc-sln",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bca19d7ce889a0d2bc07f4ee5bfd9bd8e4cad438",
          "message": "Unit tests",
          "committedDate": "2021-04-29T12:56:52Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9934e5900f855b3bddf42ff03443306c63bf3cda",
          "message": "Refactor EntireState flag propagation and its escape hatches",
          "committedDate": "2021-04-29T12:58:26Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a92b8d5b5ed6be66f65b17f2a46d76a1909d440",
          "message": "Set TranslateEntireState for sln metaprojects",
          "committedDate": "2021-04-29T12:59:27Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb1279a3c0f272edbdef1998140e95f17c06bec5",
          "message": "Review comments: Ladi#1",
          "committedDate": "2021-04-29T14:30:49Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eba706d6fe37382e033da6ecb8d0a1eb6fb98ba9",
          "message": "Review changes #2\n- fix unit test to verify serialized data",
          "committedDate": "2021-05-03T14:14:42Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2737e156bb9e0e632cde00b8c80c05f6a629962",
          "message": "Proper English\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-05-03T17:50:45Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a606bc5e721cf65a79619ab9b0a00ed83f413a2",
          "message": "Temporary logging changes to identify test hang",
          "committedDate": "2021-05-03T18:02:48Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c797ea326d0a78ffa719801ef2f9546e1d9f2637",
          "message": "Merge branch 'rokonec/3517-out-of-proc-sln' of https://github.com/rokonec/msbuild into rokonec/3517-out-of-proc-sln",
          "committedDate": "2021-05-03T18:02:56Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29c7e987156ec7f943b564b3307b4273117f11f6",
          "message": "Temp logging",
          "committedDate": "2021-05-03T21:04:02Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da15134def3c05d77c8aed316c621490e7563805",
          "message": "Unit test, null check bug",
          "committedDate": "2021-05-03T23:14:53Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f36775cb759fc8a1db2a9d81bad833c8aac430c8",
          "message": "Mark failing tests on osx and linux",
          "committedDate": "2021-05-05T15:02:40Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "183d6f321a6fbe67eb58f1a6c914a07e3a37e2ee",
          "message": "Revert incidental changes",
          "committedDate": "2021-05-06T12:16:06Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems like a breaking change. Before, everybody who read the TranslateEntireState property (it's public, so anyone can read it) got the Traits switch logic. Now, it's only happening here in translate. If CPS is using the property to derive other logic from it, their stuff will stop working correctly if they set the Trait to enforce a certain value.",
              "createdAt": "2021-04-29T23:38:28Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Is there a use case why would CPS like to play with this particular Trait to enforce it? To me it looks rather risky thing to do. I was under impression that this Trait is there only for internal testing and verifications.",
              "createdAt": "2021-04-30T07:40:17Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Well, it's public surface. Seems safest to either delete the trait, or have the property getter / setter take it into account just like before. Let's go for deleting the trait in dev17 and for now keeping the property as is. @rainersigwald, want to add this one (removing the Trait escape hatch) to the list of dev17 breaking changes?",
              "createdAt": "2021-04-30T17:04:07Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Having espace hatch enforcing rules as part of that getter is problematic as It effects both serialization and deserialization. I believe that expected format in deserialization shall be dictate by deserialization stream content only. For example If one node starts with escape hatch and other do not, their communication contract will be broken resulting in wide range of unexpected exceptions such as OutOfMemoryException or unexpected system behavior.",
              "createdAt": "2021-05-03T13:08:14Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "This is within a build, right? I imagine someone would either want the escape hatch or not.",
              "createdAt": "2021-05-03T14:25:07Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": ">If one node starts with escape hatch and other do not\r\n\r\nCurrently escape hatches are activated via environment variables which are inherited by child processes. Since out of proc nodes are spawned by the build manager process, they will always share the same escape hatches right? ",
              "createdAt": "2021-05-03T17:16:42Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "@rokonec pointed out that you could build once with one set of environment variables, then change them and build again but connect to processes left over from the first build.",
              "createdAt": "2021-05-03T18:14:24Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Aha. Yeah, that would be a problem. I think the initial design of the out of proc nodes didn't envision carrying over so much state. As the nodes do start to carry over more and more state, maybe we should define a more first class / sturdy cache invalidation infrastructure. For example, if we want correctness w.r.t. stuff in Traits, we should make it hashable and include that hash in the handshake.",
              "createdAt": "2021-05-03T20:55:37Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I have scanned github and devdiv AzDO for usage of 'TranslateEntireState'. Apart from MSBuild usage and refs found only two occurences of projects system setting this property to true.\r\nWith public interface there is always non zero chance we will break someone, but I believe that the risk in this particular case is acceptable.\r\nI recommend to keep code as is in this PR. I recommend to keep that escape hatch as it might have tactical value for troubleshooting or experimenting.",
              "createdAt": "2021-05-05T18:32:00Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Aren't global properties serialized either way? Something like targets or project file location might be better tests.",
              "createdAt": "2021-04-30T17:31:09Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs",
              "diffHunk": "@@ -260,6 +260,51 @@ public void TestTranslation()\n             Assert.Equal(config, deserializedConfig);\n         }\n \n+        [Fact]\n+        public void TestTranslationWithEntireProjectState()\n+        {\n+            string projectBody = ObjectModelHelpers.CleanupFileContents(@\"\n+<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>\n+<PropertyGroup>\n+    <One>1</One>\n+    <Two>2</Two>\n+    <Three>$(ThreeIn)</Three>\n+</PropertyGroup>\n+<Target Name='Build'>\n+    <CallTarget Targets='Foo'/>\n+</Target>\n+</Project>\");\n+\n+            Dictionary<string, string> globalProperties = new (StringComparer.OrdinalIgnoreCase);\n+            globalProperties[\"ThreeIn\"] = \"3\";\n+\n+            Project project = new Project(\n+                XmlReader.Create(new StringReader(projectBody)),\n+                globalProperties,\n+                ObjectModelHelpers.MSBuildDefaultToolsVersion,\n+                new ProjectCollection());\n+            project.FullPath = \"foo\";\n+            ProjectInstance instance = project.CreateProjectInstance();\n+\n+            instance.TranslateEntireState = true;\n+\n+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), \"2.0\");\n+            configuration.ConfigurationId = 1;\n+\n+            ((ITranslatable)configuration).Translate(TranslationHelpers.GetWriteTranslator());\n+            INodePacket packet = BuildRequestConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());\n+\n+            BuildRequestConfiguration deserializedConfig = packet as BuildRequestConfiguration;\n+\n+            deserializedConfig.ShouldNotBeNull();\n+            deserializedConfig.ShouldBe(configuration);\n+            deserializedConfig.Project.ShouldNotBeNull();\n+\n+            // Verify that at least some data from 'entire project state' has been deserialized.\n+            deserializedConfig.Project.GlobalProperties.ShouldNotBeEmpty();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good catch. Fixed",
              "createdAt": "2021-05-03T17:48:59Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs",
              "diffHunk": "@@ -260,6 +260,51 @@ public void TestTranslation()\n             Assert.Equal(config, deserializedConfig);\n         }\n \n+        [Fact]\n+        public void TestTranslationWithEntireProjectState()\n+        {\n+            string projectBody = ObjectModelHelpers.CleanupFileContents(@\"\n+<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>\n+<PropertyGroup>\n+    <One>1</One>\n+    <Two>2</Two>\n+    <Three>$(ThreeIn)</Three>\n+</PropertyGroup>\n+<Target Name='Build'>\n+    <CallTarget Targets='Foo'/>\n+</Target>\n+</Project>\");\n+\n+            Dictionary<string, string> globalProperties = new (StringComparer.OrdinalIgnoreCase);\n+            globalProperties[\"ThreeIn\"] = \"3\";\n+\n+            Project project = new Project(\n+                XmlReader.Create(new StringReader(projectBody)),\n+                globalProperties,\n+                ObjectModelHelpers.MSBuildDefaultToolsVersion,\n+                new ProjectCollection());\n+            project.FullPath = \"foo\";\n+            ProjectInstance instance = project.CreateProjectInstance();\n+\n+            instance.TranslateEntireState = true;\n+\n+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), \"2.0\");\n+            configuration.ConfigurationId = 1;\n+\n+            ((ITranslatable)configuration).Translate(TranslationHelpers.GetWriteTranslator());\n+            INodePacket packet = BuildRequestConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());\n+\n+            BuildRequestConfiguration deserializedConfig = packet as BuildRequestConfiguration;\n+\n+            deserializedConfig.ShouldNotBeNull();\n+            deserializedConfig.ShouldBe(configuration);\n+            deserializedConfig.Project.ShouldNotBeNull();\n+\n+            // Verify that at least some data from 'entire project state' has been deserialized.\n+            deserializedConfig.Project.GlobalProperties.ShouldNotBeEmpty();",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\nYou can also express `\"` in a string with double double quotes: `\"\"`",
              "createdAt": "2021-04-30T17:32:03Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2335,6 +2335,49 @@ public void EndToEndWarnAsErrors()\n             success.ShouldBeFalse();\n         }\n \n+        [Fact]\n+        public void BuildSlnOutOfProc()\n+        {\n+            using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())\n+            {\n+                string solutionFileContents =\n+                    @\"\n+Microsoft Visual Studio Solution File, Format Version 12.00\n+# Visual Studio Version 16\n+Project('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'TestProject', 'TestProject.proj', '{6185CC21-BE89-448A-B3C0-D1C27112E595}'\n+EndProject\n+Global\n+    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+        Debug|Mixed Platforms = Debug|Mixed Platforms\n+        Release|Any CPU = Release|Any CPU\n+    EndGlobalSection\n+    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+        {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.ActiveCfg = CSConfig1|Any CPU\n+        {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.Build.0 = CSConfig1|Any CPU\n+    EndGlobalSection\n+EndGlobal\n+                    \".Replace(\"'\", \"\\\"\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I have intentionally choose to use ' for readability purposes. I truly believe it is better this way. I am resolving this comment, feel free to reopen it if needed.",
              "createdAt": "2021-05-03T07:59:28Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2335,6 +2335,49 @@ public void EndToEndWarnAsErrors()\n             success.ShouldBeFalse();\n         }\n \n+        [Fact]\n+        public void BuildSlnOutOfProc()\n+        {\n+            using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())\n+            {\n+                string solutionFileContents =\n+                    @\"\n+Microsoft Visual Studio Solution File, Format Version 12.00\n+# Visual Studio Version 16\n+Project('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'TestProject', 'TestProject.proj', '{6185CC21-BE89-448A-B3C0-D1C27112E595}'\n+EndProject\n+Global\n+    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+        Debug|Mixed Platforms = Debug|Mixed Platforms\n+        Release|Any CPU = Release|Any CPU\n+    EndGlobalSection\n+    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+        {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.ActiveCfg = CSConfig1|Any CPU\n+        {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.Build.0 = CSConfig1|Any CPU\n+    EndGlobalSection\n+EndGlobal\n+                    \".Replace(\"'\", \"\\\"\");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        // if EscapeHatches.ProjectInstanceTranslation has an unexpected value, do not force TranslateEntireStateMode.\r\n                        // Just leave it as is.\r\n```",
              "createdAt": "2021-05-03T14:25:56Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()\n+        {\n+            var forcedProjectInstanceTranslationMode = Traits.Instance.EscapeHatches.ProjectInstanceTranslation;\n+            if (forcedProjectInstanceTranslationMode != null)\n+            {\n+                switch (forcedProjectInstanceTranslationMode)\n+                {\n+                    case EscapeHatches.ProjectInstanceTranslationMode.Full:\n+                        _translateEntireState = true;\n+                        break;\n+                    case EscapeHatches.ProjectInstanceTranslationMode.Partial:\n+                        _translateEntireState = false;\n+                        break;\n+                    default:\n+                        // if EscapeHatches.ProjectInstanceTranslation have unexpected value, do not force TranslateEntireStateMode\n+                        // and keep it as is",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: accidental newline delete?",
              "createdAt": "2021-05-05T21:10:41Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -1,5 +1,4 @@\n-// Copyright (c) Microsoft. All rights reserved.\n-// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+// Copyright (c) Microsoft. All rights reserved.// Licensed under the MIT license. See LICENSE file in the project root for full license information.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Were you able to figure out why this is hanging? IIRC I reproed on my Mac and then forgot to ask if you wanted to look at it :(",
              "createdAt": "2021-05-05T21:11:31Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2335,6 +2334,51 @@ public void EndToEndWarnAsErrors()\n             success.ShouldBeFalse();\n         }\n \n+        [Trait(\"Category\", \"netcore-osx-failing\")]\n+        [Trait(\"Category\", \"netcore-linux-failing\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald  I have reproduced it on WSL. Got and analyzed its hanging process dump, however that hanging process was entry process blocked waiting on read from pipe - i.e. wrong process. What was weird was that out of proc node process wasn't there. It most probably crashed otherwise there would be error logged by entry node - i think. What's even more weird is that when I started the same command from shell by `export MSBUILDNOINPROCNODE=1 && /home/rokonecn/dev/msbuild/.dotnet/dotnet /home/rokonecn/dev/msbuild/artifacts/bin/Microsoft.Build.CommandLine.UnitTests/Debug/net5.0/MSBuild.dll /tmp/umsex53t.mvo/Temporary258ec66ef0b94800b53904586527acd9/TestSolution.sln /p:Configuration=Debug /t:Build` it worked.\r\nGiven my limited experience with linux unit test debugging, I've considered it too time consuming and moved on.\r\nDoes MSBUILDDEBUGONSTART works on linux? Is there a way to debug it on linux somehow? Is there msbuild crash log somewhere on linux?\r\n",
              "createdAt": "2021-05-06T00:02:26Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2335,6 +2334,51 @@ public void EndToEndWarnAsErrors()\n             success.ShouldBeFalse();\n         }\n \n+        [Trait(\"Category\", \"netcore-osx-failing\")]\n+        [Trait(\"Category\", \"netcore-linux-failing\")]",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There is a conditional `_translateEntireState = false` further down in this constructor. Have you verified that it cannot break the scenario of building solution/meta-projects?",
              "createdAt": "2021-05-10T14:05:15Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -564,8 +564,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject\n             _hostServices = that._hostServices;\n             _isImmutable = isImmutable;\n             _evaluationId = that.EvaluationId;\n-\n-            TranslateEntireState = that.TranslateEntireState;\n+            _translateEntireState = that._translateEntireState;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "That conditional `_translateEntireState = false` is not used by traversal project items (such as sln). I have verified it with Rainer, and it shall be OK.",
              "createdAt": "2021-05-13T08:15:34Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -564,8 +564,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject\n             _hostServices = that._hostServices;\n             _isImmutable = isImmutable;\n             _evaluationId = that.EvaluationId;\n-\n-            TranslateEntireState = that.TranslateEntireState;\n+            _translateEntireState = that._translateEntireState;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: You can remove the condition and let the `default` switch case handle the `null` value.",
              "createdAt": "2021-05-10T14:09:30Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)\n             }\n         }\n \n+        private void MaybeForceTranslateEntireStateMode()\n+        {\n+            var forcedProjectInstanceTranslationMode = Traits.Instance.EscapeHatches.ProjectInstanceTranslation;\n+            if (forcedProjectInstanceTranslationMode != null)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you think it would make sense to test all combinations of\r\n\r\n`TranslateEntireState` was set/unset via escape hatch on the write side\r\nx\r\n`TranslateEntireState` was set/unset via escape hatch on the read side\r\n\r\nThis would cover what's described in [this your comment](https://github.com/dotnet/msbuild/pull/6385#discussion_r625072838).",
              "createdAt": "2021-05-10T14:17:08Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs",
              "diffHunk": "@@ -260,6 +260,51 @@ public void TestTranslation()\n             Assert.Equal(config, deserializedConfig);\n         }\n \n+        [Fact]\n+        public void TestTranslationWithEntireProjectState()",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}