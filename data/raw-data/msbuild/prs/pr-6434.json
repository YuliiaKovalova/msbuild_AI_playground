{
  "number": 6434,
  "title": "Query cache in parallel",
  "body": "Depends on #6412. Merge that one in first (or close it and merge this one).\r\nMake sure to hide white-space in the diffs because there's a lot of indentation changes by moving around locking blocks.\r\n\r\n### Context\r\nThe project cache was being queried serially. Oops.\r\nThis is because the monolithic BuildManager._syncLock was being held during the cache query, thus serializing all access.\r\n\r\n### Changes Made\r\nBroke down the monolithic lock in `ExecuteBuildSubmission(BuildSubmission)` in three successive regions:\r\n1. Compute a BuildRequestConfiguration for the given build submission (and various other arbitrary BM state mutations). Protected by _syncLock.\r\n2. If a cache is present, evaluate the build configuration if necessary (non static graph cache scenarios) and query the cache. Protected by locking each BuildRequestConfiguration. This achieves lock striping and enables parallel access to the cache.\r\n3. Respond to cache query result and do arbitrary BM state mutations. Protected by _synclock.\r\n\r\n### Testing\r\nAdded a parallel stress test. This should be a good test to both ensure the cache is queried in parallel and to stress test the concurrency in the engine.",
  "state": "CLOSED",
  "createdAt": "2021-05-08T21:37:26Z",
  "updatedAt": "2021-05-14T00:13:24Z",
  "closedAt": "2021-05-14T00:13:24Z",
  "mergedAt": null,
  "additions": 241,
  "deletions": 98,
  "changedFiles": 3,
  "headRefName": "parallel_cache_queries",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5cbae88975a604e419da98454f28b45d5cd4837d",
          "message": "Lock writes to _overallBuildSuccess",
          "committedDate": "2021-05-04T22:25:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "19e251ae1b6ee7d22b9c5d20efb3f7284d6b9667",
          "message": "Log when mock cache is about to throw an exception",
          "committedDate": "2021-05-04T22:31:14Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a3510d70bc5172cba02f12db087d2a4127d437ac",
          "message": "More locking",
          "committedDate": "2021-05-05T18:21:11Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85dd0a7944a1f622b499206799a978c339006409",
          "message": "Debug assert that lock is held",
          "committedDate": "2021-05-07T01:41:28Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e66e62bcbf9d6d825b4443a8520e79f86bd24aed",
          "message": "Call the project cache in parallel",
          "committedDate": "2021-05-08T04:59:54Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "965b870431459c48f69535f0f1a4461b139267a9",
          "message": "Check for serialized run",
          "committedDate": "2021-05-08T22:03:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing and trying this a new way.",
        "createdAt": "2021-05-14T00:13:24Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if it's worth it to try to minimize the time spent in locks, especially this one. Something like:\r\n```C#\r\nif (_projectCacheService == null) {\r\n  // var p = ProjectCacheService.FromDescriptorAsync(...);\r\n  lock (_syncLock) {\r\n    if (_projectCacheService == null) {\r\n      _projectCacheService = p;\r\n    }\r\n  }\r\n}",
              "createdAt": "2021-05-11T22:01:53Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -567,13 +569,21 @@ void InitializeCaches()\n                 ErrorUtilities.ThrowInternalError(\"Only one project cache plugin may be set on the BuildManager during a begin / end build session\");\n             }\n \n-            LogMessage(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"LoadingProjectCachePlugin\", pluginDescriptor.GetDetailedDescription()));\n+            lock (_syncLock)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does any part of this outside of 1098-1106 really need the lock?",
              "createdAt": "2021-05-11T22:04:43Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1069,8 +1079,12 @@ void ExecuteSubmissionImpl()\n                     }\n \n                     VerifyStateInternal(BuildManagerState.Building);\n+                }\n \n-                    try\n+                try\n+                {\n+                    BuildRequestConfiguration newConfiguration;\n+                    lock (_syncLock)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we actually need a lock if we successfully ensured each configuration is unique and built exactly once?",
              "createdAt": "2021-05-11T22:05:46Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1095,27 +1109,36 @@ void ExecuteSubmissionImpl()\n                         // Create/Retrieve a configuration for each request\n                         var buildRequestConfiguration = new BuildRequestConfiguration(submission.BuildRequestData, _buildParameters.DefaultToolsVersion);\n                         var matchingConfiguration = _configCache.GetMatchingConfiguration(buildRequestConfiguration);\n-                        var newConfiguration = ResolveConfiguration(\n+                        newConfiguration = ResolveConfiguration(\n                             buildRequestConfiguration,\n                             matchingConfiguration,\n                             submission.BuildRequestData.Flags.HasFlag(BuildRequestDataFlags.ReplaceExistingProjectInstance));\n \n                         newConfiguration.ExplicitlyLoaded = true;\n+                    }\n \n-                        submission.BuildRequest = CreateRealBuildRequest(submission, newConfiguration.ConfigurationId);\n-\n+                    CacheResult cacheResult = null;\n+                    // Don't lock on _syncLock to avoid calling the cache serially.\n+                    // Ideally, we should lock on the <configuration, targets> tuple, but that would make the code even more convoluted\n+                    // so lock just on the configuration. Realistically it should not cause overlocking because the cache is only called on\n+                    // top level submissions and those tend to be unique.\n+                    lock (newConfiguration)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What part of this needs a lock?",
              "createdAt": "2021-05-11T22:07:44Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1095,27 +1109,36 @@ void ExecuteSubmissionImpl()\n                         // Create/Retrieve a configuration for each request\n                         var buildRequestConfiguration = new BuildRequestConfiguration(submission.BuildRequestData, _buildParameters.DefaultToolsVersion);\n                         var matchingConfiguration = _configCache.GetMatchingConfiguration(buildRequestConfiguration);\n-                        var newConfiguration = ResolveConfiguration(\n+                        newConfiguration = ResolveConfiguration(\n                             buildRequestConfiguration,\n                             matchingConfiguration,\n                             submission.BuildRequestData.Flags.HasFlag(BuildRequestDataFlags.ReplaceExistingProjectInstance));\n \n                         newConfiguration.ExplicitlyLoaded = true;\n+                    }\n \n-                        submission.BuildRequest = CreateRealBuildRequest(submission, newConfiguration.ConfigurationId);\n-\n+                    CacheResult cacheResult = null;\n+                    // Don't lock on _syncLock to avoid calling the cache serially.\n+                    // Ideally, we should lock on the <configuration, targets> tuple, but that would make the code even more convoluted\n+                    // so lock just on the configuration. Realistically it should not cause overlocking because the cache is only called on\n+                    // top level submissions and those tend to be unique.\n+                    lock (newConfiguration)\n+                    {\n                         // TODO: Remove this when VS gets updated to setup project cache plugins.\n                         AutomaticallyDetectAndInstantiateProjectCacheServiceForVisualStudio(submission, newConfiguration);\n \n-                        CacheResult cacheResult = null;\n                         if (_projectCacheService != null)\n                         {\n                             cacheResult = QueryCache(submission, newConfiguration);\n                         }\n+                    }\n \n+                    lock (_syncLock)\n+                    {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Setting something that's already true to true doesn't seem bad. I'd skip this lock and the if/return.",
              "createdAt": "2021-05-11T22:10:01Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1278,7 +1308,15 @@ static BuildRequest CreateRealBuildRequest(BuildSubmission submission, int confi\n                 _projectCacheService == null &&\n                 _buildParameters.ProjectCacheDescriptor == null)\n             {\n-                _projectCacheServiceInstantiatedByVSWorkaround = true;\n+                lock (_syncLock)\n+                {\n+                    if (_projectCacheServiceInstantiatedByVSWorkaround)\n+                    {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need a lock for this? Everything else should be ended, right?",
              "createdAt": "2021-05-11T22:11:54Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1597,16 +1637,19 @@ private void HandleExecuteSubmissionException(BuildSubmission submission, Except\n                 }\n             }\n \n-            // BuildRequest may be null if the submission fails early on.\n-            if (submission.BuildRequest != null)\n+            lock(_syncLock)\n             {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}