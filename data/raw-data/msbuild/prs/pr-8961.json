{
  "number": 8961,
  "title": "Add unit test for https://github.com/dotnet/msbuild/pull/8870",
  "body": "Fixes [8939](https://github.com/dotnet/msbuild/issues/8939)\r\n\r\n### Context\r\nhttps://github.com/dotnet/msbuild/pull/8870#issuecomment-1593945527\r\n\r\n### Changes Made\r\nAdd a task that returns a custom ITaskItem implementation that has a custom IDictionary type returned from CloneCustomMetadata()\r\nAdd unit test TestTaskDictionaryOutputItems()\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-27T09:37:13Z",
  "updatedAt": "2023-07-28T02:15:23Z",
  "closedAt": "2023-07-28T02:15:22Z",
  "mergedAt": "2023-07-28T02:15:22Z",
  "additions": 234,
  "deletions": 5,
  "changedFiles": 2,
  "headRefName": "jennybai/issue8939",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2ad13764b6580e166c6d8d4d1f3671224fea8e8d",
          "message": "Add unit test for https://github.com/dotnet/msbuild/pull/8870",
          "committedDate": "2023-06-27T09:36:51Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b33dbe1be5efc8c348477d26874df31ccfe2fae",
          "message": "Merge branch 'main' of https://github.com/jehhynes/msbuild into jennybai/issue8939",
          "committedDate": "2023-06-28T06:23:35Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ed33277e56ca64c5ca0bd0d6c285c3fc6c71ea3",
          "message": "Add the output verification",
          "committedDate": "2023-07-03T07:20:02Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a406e07004df02c26f5e8b967cdaadc075265f7",
          "message": "write an entirely new, minimal IDictionary implementation",
          "committedDate": "2023-07-18T08:13:06Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25179b451b076ef1796021a803900c76b2b8cc23",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into jennybai/issue8939",
          "committedDate": "2023-07-26T07:14:37Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run\r\n",
        "createdAt": "2023-07-03T02:04:21Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-07-03T02:04:30Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe we need a custom `IDictionary` implementation (not `Dictionary<string, string>`) here to test the https://github.com/dotnet/msbuild/pull/8870 fix",
              "createdAt": "2023-06-29T08:22:03Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1468,4 +1486,32 @@ private ProjectInstance CreateTestProject()\n             return project.CreateProjectInstance();\n         }\n     }\n+\n+    /// <summary>\n+    /// Task that returns a custom ITaskItem implementation that has a custom IDictionary type returned from CloneCustomMetadata()\n+    /// </summary>\n+    public sealed class TaskThatReturnsDictionaryTaskItem : Utilities.Task\n+    {\n+        public override bool Execute() => true;\n+\n+        [Output]\n+        public ITaskItem DictionaryTaskItemOutput { get => new DictionaryTaskItem(); }\n+    }\n+\n+    internal sealed class DictionaryTaskItem : ITaskItem\n+    {\n+        public string ItemSpec { get => $\"{nameof(DictionaryTaskItem)}spec\"; set => throw new NotImplementedException(); }\n+\n+        public ICollection MetadataNames => throw new NotImplementedException();\n+\n+        public int MetadataCount => throw new NotImplementedException();\n+\n+        private Dictionary<string, string> metaData = new() { [\"a\"] = \"b\" };\n+\n+        public IDictionary CloneCustomMetadata() => new Dictionary<string, string>(metaData);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes, please write an entirely new, minimal `IDictionary` implementation.",
              "createdAt": "2023-07-10T19:10:18Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1468,4 +1486,32 @@ private ProjectInstance CreateTestProject()\n             return project.CreateProjectInstance();\n         }\n     }\n+\n+    /// <summary>\n+    /// Task that returns a custom ITaskItem implementation that has a custom IDictionary type returned from CloneCustomMetadata()\n+    /// </summary>\n+    public sealed class TaskThatReturnsDictionaryTaskItem : Utilities.Task\n+    {\n+        public override bool Execute() => true;\n+\n+        [Output]\n+        public ITaskItem DictionaryTaskItemOutput { get => new DictionaryTaskItem(); }\n+    }\n+\n+    internal sealed class DictionaryTaskItem : ITaskItem\n+    {\n+        public string ItemSpec { get => $\"{nameof(DictionaryTaskItem)}spec\"; set => throw new NotImplementedException(); }\n+\n+        public ICollection MetadataNames => throw new NotImplementedException();\n+\n+        public int MetadataCount => throw new NotImplementedException();\n+\n+        private Dictionary<string, string> metaData = new() { [\"a\"] = \"b\" };\n+\n+        public IDictionary CloneCustomMetadata() => new Dictionary<string, string>(metaData);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Do not store the return value unless required",
              "createdAt": "2023-06-29T08:22:35Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1029,6 +1029,24 @@ public void TestTaskResolutionFailureWithNoUsingTask()\n             _logger.AssertLogContains(\"MSB4036\");\n         }\n \n+        /// <summary>\n+        /// https://github.com/dotnet/msbuild/issues/8864\n+        /// </summary>\n+        [Fact]\n+        public void TestTaskDictionaryOutputItems()\n+        {\n+            string customTaskPath = Assembly.GetExecutingAssembly().Location;\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess($\"\"\"",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can this somehow test as well that the output has the expected metadata (to verify that the fix aids to properly copying of the metadata)",
              "createdAt": "2023-06-29T08:24:52Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1029,6 +1029,24 @@ public void TestTaskResolutionFailureWithNoUsingTask()\n             _logger.AssertLogContains(\"MSB4036\");\n         }\n \n+        /// <summary>\n+        /// https://github.com/dotnet/msbuild/issues/8864\n+        /// </summary>\n+        [Fact]\n+        public void TestTaskDictionaryOutputItems()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}