{
  "number": 6699,
  "title": "Update schema for combining TargetFramework info to allow for invalid xml names such as including '+'",
  "body": "Fixes #6603 \r\n\r\n### Context\r\nThe ability to gather extra properties from referenced projects was added in https://github.com/dotnet/msbuild/pull/5994. It used XML transformations to couch that logic in a way that MSBuild could understand.\r\n\r\nUnfortunately, the XML-based logic assumed everything was a valid XML element. Ultimately, the goal of the change, at least as I understand it, was just to pass information.\r\n\r\n### Changes Made\r\nTargetFrameworks had been XML elements, but some are not valid XML names. This was changed to being a property on the more generically named `TargetFramework` element. This also allows for escaping.\r\n\r\n### Testing\r\nVerified that a simple case that had not previously worked now works and looked at what it produced in a debugger.\r\n\r\n### Notes\r\nAfter this PR, the SDK can opt in. Then MSBuild can turn it on by default, and the SDK can stop specifying the property.",
  "state": "MERGED",
  "createdAt": "2021-07-21T22:43:08Z",
  "updatedAt": "2021-08-16T23:17:08Z",
  "closedAt": "2021-08-16T23:17:07Z",
  "mergedAt": "2021-08-16T23:17:07Z",
  "additions": 20,
  "deletions": 13,
  "changedFiles": 6,
  "headRefName": "combinetargetframeworkproperties-with-plus",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7b41f2c47cb69e26021ba31d8b586204e8b4a4e1",
          "message": "Call XElements \"Property\" with escaped names",
          "committedDate": "2021-07-30T18:58:00Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f90bd8630e3475eddc92a22e130d6492416c0e3b",
          "message": "Merge https://github.com/dotnet/msbuild into combinetargetframeworkproperties-with-plus",
          "committedDate": "2021-08-04T16:01:13Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8d833fa7a0645527a2ad206d84fd71d8560ffafa",
          "message": "Workaround to prevent SDK breakages",
          "committedDate": "2021-08-04T21:50:10Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0bb260b3dca7ef15cdff0a9723554b7afb5fc19",
          "message": "Switch switch to optional input",
          "committedDate": "2021-08-04T22:06:26Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c51ae038031026c2416857144330b9543c000f64",
          "message": "Make enableable via property",
          "committedDate": "2021-08-04T22:49:25Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11d458ece36cffde8479c4bce1b99dedc01cd8c6",
          "message": "Add reference assemblies\n\nThey didn't autogenerate for some reason with build.cmd. Had to use the CIBuild.",
          "committedDate": "2021-08-05T03:38:59Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd7137ad5601575fabb541b1e766a1daefa9bd16",
          "message": "One other case",
          "committedDate": "2021-08-05T03:56:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ccc6dedfbce2a4a2230870367e0e04078547b95a",
          "message": "Feedback",
          "committedDate": "2021-08-05T20:28:00Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05caac0cc31995964b74fdaaa21a41c87efa622e",
          "message": "build",
          "committedDate": "2021-08-05T23:07:27Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a5f66e8dad66494844358b86aea263491b09fe6",
          "message": "Remove escaping from CombineXmlElements",
          "committedDate": "2021-08-06T17:18:10Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9db3be180a0cfb5fc44191ad2cac2d1b6c3b308a",
          "message": "Change name",
          "committedDate": "2021-08-09T23:29:28Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d9ee0e56bdc209f36db3b98a2694c0a393133d63",
          "message": "Update documentation/ProjectReference-Protocol.md",
          "committedDate": "2021-08-16T15:35:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I think this data is parsed as XML elsewhere, so I don't think this will fix the problem.  Instead of allowing invalid XML, I think we should escape characters that aren't valid.",
        "createdAt": "2021-07-23T02:33:14Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> I think this data is parsed as XML elsewhere, so I don't think this will fix the problem. Instead of allowing invalid XML, I think we should escape characters that aren't valid.\r\n\r\nI just went with this because it made the repro not work anymore.\r\n\r\nAs far as escaping invalid characters, I tried replacing `+` with %2b, &2b;, or \\+, and all of those failed. Is there some other escaping standard I should be using? Should I be replacing it with something like 'literalPlus' in CombineTargetFrameworkInfoProperties and looking for that in CombineXmlElements and replacing it again with +?",
        "createdAt": "2021-07-23T02:37:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Looks like there's not much we can do to escape characters in an XML name: https://stackoverflow.com/questions/19049954/escape-in-a-element-name-in-xml-file\r\n\r\nI think what we should do is that if the ItemSpec isn't a valid XML name, then we should come up with a name that is valid (perhaps by removing invalid characters), and put the real name in an attribute value.",
        "createdAt": "2021-07-26T16:04:48Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "So were you thinking something more like this:\r\nhttps://github.com/Forgind/msbuild/commit/2525a1593b8df5d60640abe97d87c5d9e17a00d5\r\n?\r\n\r\n(Cleaned up a bit)",
        "createdAt": "2021-07-26T23:28:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I think what we should do is that if the ItemSpec isn't a valid XML name, then we should come up with a name that is valid (perhaps by removing invalid characters), and put the real name in an attribute value.\r\n\r\nCan we instead change the schema to be something like\r\n\r\n```xml\r\n<Property Name=\"...\" Value=\"...\" />\r\n```\r\n\r\nAnd then use standard XML escaping to represent anything?",
        "createdAt": "2021-07-28T03:54:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > I think what we should do is that if the ItemSpec isn't a valid XML name, then we should come up with a name that is valid (perhaps by removing invalid characters), and put the real name in an attribute value.\r\n> \r\n> Can we instead change the schema to be something like\r\n> \r\n> ```\r\n> <Property Name=\"...\" Value=\"...\" />\r\n> ```\r\n> \r\n> And then use standard XML escaping to represent anything?\r\n\r\nThat would be better, but there's the ValidateExecutableReferences task [in dotnet/sdk](https://github.com/dotnet/sdk/pull/15134) consumes this XML.  So we'd have to figure out how to change the format in a compatible way.  It's also possible (though probably unlikely, as this is new code) that there are other consumers of this XML.",
        "createdAt": "2021-07-28T04:20:13Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Hopefully you're fine with how I did this\u2014I made the new schema only activate if you set the UseNewSchema input to be true (it defaults to false), so this should have no impact unless you ask it to.\r\n\r\nIn SDK-land, then, we can opt into using that and make the relevant changes to ValidateExecutableReferences.\r\n\r\nThen MSBuild can remove the UseNewSchema flag and just always use it, and the SDK can stop setting it.\r\n\r\nIf we don't document it, and we keep it all within one release, hopefully it's fine to tempt users with an extra flag then take it away.\r\n\r\nAny other comments or concerns?",
        "createdAt": "2021-08-04T22:08:18Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think this is a good idea, but we need a better name for `UseNewSchema`.  For the property, it should probably start with an underscore, and be something like `_UseAttributeForTargetFrameworkInfoPropertyNames`.  Also, the example XML in the documentation should also be updated: https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md",
        "createdAt": "2021-08-05T17:44:05Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I can fix that. I was thinking it doesn't matter too much if we want it taken out later, but we definitely don't want someone making explicit use of it before that happens \ud83d\ude42\r\n\r\nI think I should hold off on the documentation change until `Then MSBuild can remove the UseNewSchema flag and just always use it, and the SDK can stop setting it.` because otherwise anyone trying to understand it would be confused. Hopefully that's no one, but not being able to get something to work in the moment can be frustrating. Maybe I should add a comment saying it's changing so don't assume it's static?",
        "createdAt": "2021-08-05T19:39:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> \ud83d\udc4d\r\n> \r\n> Were you able to do any sanity testing of this?\r\n\r\nI know how to do one kind of sanity testing, that is, checking whether the repro still reproduces, in this case with the property enabled, and I can inspect it in the debugger. Is there a more definitive test I can try?",
        "createdAt": "2021-08-06T15:46:20Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "That sounds good",
        "createdAt": "2021-08-06T15:54:05Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This is what it looks like, by the way:\r\n```XML\r\n<Property Name=\"AdditionalProjectProperties\">\r\n  <Property Name=\"netstandard1.3\">\r\n    <SelfContained></SelfContained>\r\n    <_IsExecutable></_IsExecutable>\r\n    <ShouldBeValidatedAsExecutableReference></ShouldBeValidatedAsExecutableReference>\r\n  </Property>\r\n  <Property Name=\"portable-net45+win8+wp8\">\r\n    <SelfContained></SelfContained>\r\n    <_IsExecutable></_IsExecutable>\r\n    <ShouldBeValidatedAsExecutableReference></ShouldBeValidatedAsExecutableReference>\r\n  </Property>\r\n</Property>\r\n```\r\n\r\nI wasn't 100% sure that the second level of escaping was necessary (in CombineXmlElements), but at worst, it shouldn't hurt.",
        "createdAt": "2021-08-06T16:14:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Actually, let's not do it in CombineXmlElements, that's probably always just going to be `AdditionalProjectProperties`, and if it's not we still shouldn't need arbitrary property names there, because it's the root element of the XML document.",
        "createdAt": "2021-08-06T16:19:18Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Sounds good. I changed it to look like:\r\n```XML\r\n<AdditionalProjectProperties>\r\n  <Property Name=\"netstandard1.3\">\r\n    <SelfContained></SelfContained>\r\n    <_IsExecutable></_IsExecutable>\r\n    <ShouldBeValidatedAsExecutableReference></ShouldBeValidatedAsExecutableReference>\r\n  </Property>\r\n  <Property Name=\"portable-net45+win8+wp8\">\r\n    <SelfContained></SelfContained>\r\n    <_IsExecutable></_IsExecutable>\r\n    <ShouldBeValidatedAsExecutableReference></ShouldBeValidatedAsExecutableReference>\r\n  </Property>\r\n</AdditionalProjectProperties>\r\n```",
        "createdAt": "2021-08-06T17:18:48Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the getmetadata search case sensitive? And should there be a tab in the append line?",
              "createdAt": "2021-07-22T18:45:21Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -36,14 +32,15 @@ public override bool Execute()\n         {\n             if (PropertiesAndValues != null)\n             {\n-                XElement root = new XElement(RootElementName);\n-\n+                StringBuilder sb = StringBuilderCache.Acquire();\n+                sb.AppendLine($\"<{RootElementName}>\");\n                 foreach (var item in PropertiesAndValues)\n                 {\n-                    root.Add(new XElement(item.ItemSpec, item.GetMetadata(\"Value\")));\n+                    sb.AppendLine($\"  <{item.ItemSpec}>{item.GetMetadata(\"value\")}</{item.ItemSpec}>\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It should be case-insensitive, but there's no reason to test that here...\r\n\r\nI had two spaces. That seemed to be how it was with XElement rather than the tab when I was inspecting its escaped form.",
              "createdAt": "2021-07-22T20:59:56Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -36,14 +32,15 @@ public override bool Execute()\n         {\n             if (PropertiesAndValues != null)\n             {\n-                XElement root = new XElement(RootElementName);\n-\n+                StringBuilder sb = StringBuilderCache.Acquire();\n+                sb.AppendLine($\"<{RootElementName}>\");\n                 foreach (var item in PropertiesAndValues)\n                 {\n-                    root.Add(new XElement(item.ItemSpec, item.GetMetadata(\"Value\")));\n+                    sb.AppendLine($\"  <{item.ItemSpec}>{item.GetMetadata(\"value\")}</{item.ItemSpec}>\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also, I verified that this can build the repro but not that it actually produces correct results, which is why I said it isn't properly tested yet \ud83d\ude42 In my list of things to do. A test is a good plan.",
              "createdAt": "2021-07-22T21:00:41Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -36,14 +32,15 @@ public override bool Execute()\n         {\n             if (PropertiesAndValues != null)\n             {\n-                XElement root = new XElement(RootElementName);\n-\n+                StringBuilder sb = StringBuilderCache.Acquire();\n+                sb.AppendLine($\"<{RootElementName}>\");\n                 foreach (var item in PropertiesAndValues)\n                 {\n-                    root.Add(new XElement(item.ItemSpec, item.GetMetadata(\"Value\")));\n+                    sb.AppendLine($\"  <{item.ItemSpec}>{item.GetMetadata(\"value\")}</{item.ItemSpec}>\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "PR Triage: TargetFramework Name=...",
              "createdAt": "2021-08-09T15:26:47Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -36,9 +37,11 @@ public override bool Execute()\n         {\n             if (PropertiesAndValues != null)\n             {\n-                XElement root = new XElement(RootElementName);\n+                XElement root = UseAttributeForTargetFrameworkInfoPropertyNames ?\n+                    new(\"Property\", new XAttribute(\"Name\", EscapingUtilities.Escape(RootElementName))) :",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Change title pre-merge",
              "createdAt": "2021-08-16T15:14:30Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -36,9 +37,11 @@ public override bool Execute()\n         {\n             if (PropertiesAndValues != null)\n             {\n-                XElement root = new XElement(RootElementName);\n+                XElement root = UseAttributeForTargetFrameworkInfoPropertyNames ?\n+                    new(\"Property\", new XAttribute(\"Name\", EscapingUtilities.Escape(RootElementName))) :",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Update this too please",
              "createdAt": "2021-08-16T15:14:29Z",
              "path": "documentation/ProjectReference-Protocol.md",
              "diffHunk": "@@ -106,6 +106,8 @@ As of MSBuild 16.10, it is possible to gather additional properties from referen\n \n These properties will then be gathered via the `GetTargetFrameworks` call.  They will be available to the referencing project via the `AdditionalPropertiesFromProject` metadata on the `_MSBuildProjectReferenceExistent` item.  The `AdditionalPropertiesFromProject` value will be an XML string which contains the values of the properties for each `TargetFramework` in the referenced project.  For example:\n \n+> :warning: This format is being changed. Soon, the schema will replace <net5.0> with <Property Name=\"net5.0\">. You can opt into that behavior early by setting the _UseAttributeForTargetFrameworkInfoPropertyNames property to true. This property will have no effect after the transition is complete.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "```suggestion\r\n> :warning: This format is being changed. Soon, the schema will replace <net5.0> with <TargetFramework Name=\"net5.0\">. You can opt into that behavior early by setting the _UseAttributeForTargetFrameworkInfoPropertyNames property to true. This property will have no effect after the transition is complete.\r\n```",
              "createdAt": "2021-08-16T15:35:44Z",
              "path": "documentation/ProjectReference-Protocol.md",
              "diffHunk": "@@ -106,6 +106,8 @@ As of MSBuild 16.10, it is possible to gather additional properties from referen\n \n These properties will then be gathered via the `GetTargetFrameworks` call.  They will be available to the referencing project via the `AdditionalPropertiesFromProject` metadata on the `_MSBuildProjectReferenceExistent` item.  The `AdditionalPropertiesFromProject` value will be an XML string which contains the values of the properties for each `TargetFramework` in the referenced project.  For example:\n \n+> :warning: This format is being changed. Soon, the schema will replace <net5.0> with <Property Name=\"net5.0\">. You can opt into that behavior early by setting the _UseAttributeForTargetFrameworkInfoPropertyNames property to true. This property will have no effect after the transition is complete.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}