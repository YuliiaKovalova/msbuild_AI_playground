{
  "number": 3144,
  "title": "Add source build support",
  "body": "",
  "state": "MERGED",
  "createdAt": "2018-03-27T22:02:23Z",
  "updatedAt": "2020-12-30T22:52:29Z",
  "closedAt": "2018-04-10T20:31:16Z",
  "mergedAt": "2018-04-10T20:31:16Z",
  "additions": 433,
  "deletions": 139,
  "changedFiles": 8,
  "headRefName": "sourceBuild",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "792ce90063718036ea9fa4d1db25dc4a1f30ebf1",
          "message": "Support SourceBuild builds",
          "committedDate": "2018-04-10T16:37:38Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e1748f92208ae6e6603a0e89cf4fdf865efaea0",
          "message": "Add sourcebuild rhel CI jobs",
          "committedDate": "2018-04-10T16:37:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-bot test ci",
        "createdAt": "2018-03-29T18:11:41Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test ci please",
        "createdAt": "2018-03-29T23:25:15Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test ci please",
        "createdAt": "2018-03-30T16:57:48Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Changed back to master as 15.7 is a bit risky now. We'll fork off of 15.7 if sourcebuild needs another 15.7 based build for which https://github.com/Microsoft/msbuild/tree/sourceBuild_2.1.101 is not good enough\r\n",
        "createdAt": "2018-04-10T16:39:52Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This could end up decreasing though right? This doesn't seem great :(",
              "createdAt": "2018-03-29T20:30:18Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -122,7 +125,21 @@ private static int FileVersionHash\n                     // them, so just check COMPLUS_InstallRoot.\n                     string complusInstallRoot = Environment.GetEnvironmentVariable(\"COMPLUS_INSTALLROOT\");\n \n-                    s_fileVersionHash = GetHandshakeHashCode(complusInstallRoot ?? ThisAssembly.AssemblyInformationalVersion);\n+#if THISASSEMBLY\n+                    var fileIdentity = ThisAssembly.AssemblyInformationalVersion;\n+#else\n+                    var fileIdentity = string.Empty;\n+\n+                    using (var sha1 = SHA1.Create())\n+                    {\n+                        var hashBytes = sha1.ComputeHash(File.ReadAllBytes(AssemblyUtilities.GetAssemblyLocation(typeof(CommunicationsUtilities).Assembly)));\n+                        fileIdentity = Encoding.UTF8.GetString(hashBytes);\n+                    }\n+\n+                    ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(fileIdentity), \"file hashing failed\");",
              "author": {
                "login": "AndyGerlicher"
              }
            },
            {
              "body": "This is just getting a hash, not a version, though, right? Or do I misunderstand your concern?",
              "createdAt": "2018-03-29T22:31:14Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -122,7 +125,21 @@ private static int FileVersionHash\n                     // them, so just check COMPLUS_InstallRoot.\n                     string complusInstallRoot = Environment.GetEnvironmentVariable(\"COMPLUS_INSTALLROOT\");\n \n-                    s_fileVersionHash = GetHandshakeHashCode(complusInstallRoot ?? ThisAssembly.AssemblyInformationalVersion);\n+#if THISASSEMBLY\n+                    var fileIdentity = ThisAssembly.AssemblyInformationalVersion;\n+#else\n+                    var fileIdentity = string.Empty;\n+\n+                    using (var sha1 = SHA1.Create())\n+                    {\n+                        var hashBytes = sha1.ComputeHash(File.ReadAllBytes(AssemblyUtilities.GetAssemblyLocation(typeof(CommunicationsUtilities).Assembly)));\n+                        fileIdentity = Encoding.UTF8.GetString(hashBytes);\n+                    }\n+\n+                    ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(fileIdentity), \"file hashing failed\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Discussed offline, hash is fine because it is only used in the handshake and nothing else.",
              "createdAt": "2018-03-29T23:09:12Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -122,7 +125,21 @@ private static int FileVersionHash\n                     // them, so just check COMPLUS_InstallRoot.\n                     string complusInstallRoot = Environment.GetEnvironmentVariable(\"COMPLUS_INSTALLROOT\");\n \n-                    s_fileVersionHash = GetHandshakeHashCode(complusInstallRoot ?? ThisAssembly.AssemblyInformationalVersion);\n+#if THISASSEMBLY\n+                    var fileIdentity = ThisAssembly.AssemblyInformationalVersion;\n+#else\n+                    var fileIdentity = string.Empty;\n+\n+                    using (var sha1 = SHA1.Create())\n+                    {\n+                        var hashBytes = sha1.ComputeHash(File.ReadAllBytes(AssemblyUtilities.GetAssemblyLocation(typeof(CommunicationsUtilities).Assembly)));\n+                        fileIdentity = Encoding.UTF8.GetString(hashBytes);\n+                    }\n+\n+                    ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(fileIdentity), \"file hashing failed\");",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we also have a master job, or PR is good enough?",
              "createdAt": "2018-03-29T21:32:22Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -27,118 +82,69 @@ def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n         //     runtimes.add('MonoTest')\n         // }\n \n-        runtimes.each { runtime ->\n-            def newJobName = Utilities.getFullJobName(\"innerloop_${osName}_${runtime}\", isPR)\n-            def skipTestsWhenResultsNotFound = true\n+        def script = \"NA\"\n \n-            // Create a new job with the specified name.  The brace opens a new closure\n-            // and calls made within that closure apply to the newly created job.\n-            def newJob = job(newJobName) {\n-                description('')\n-            }\n-\n-            // Define job.\n+        runtimes.each { runtime ->\n             switch(osName) {\n                 case 'Windows_NT':\n-                    newJob.with{\n-                        steps{\n-                            // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n-                            def script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n-\n-                            //  Should the build be Release?  The default is Debug\n-                            if (runtime == \"Full\") {\n-                                script += \" && build\\\\cibuild.cmd\"\n-                            }\n-                            else if (runtime == \"CoreCLR\") {\n-                                script += \" && build\\\\cibuild.cmd -hostType Core\"\n-                            }\n-\n-                            batchFile(script)\n-                        }\n-\n-                        skipTestsWhenResultsNotFound = false\n+\n+                    // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n+                    script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n+\n+                    if (runtime == \"Full\") {\n+                        script += \" && build\\\\cibuild.cmd\"\n+                    }\n+                    else if (runtime == \"CoreCLR\") {\n+                        script += \" && build\\\\cibuild.cmd -hostType Core\"\n                     }\n \n                     break;\n                 case 'OSX10.13':\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n                 case { it.startsWith('Ubuntu') }:\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n             }\n \n-            // Add xunit result archiving. Skip if no results found.\n-            Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)\n-            def imageVersion = imageVersionMap[osName];\n-            Utilities.setMachineAffinity(newJob, osName, imageVersion)\n-            Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")\n-            // Add archiving of logs (even if the build failed)\n-            Utilities.addArchival(newJob,\n-                                  'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */\n-                                  '', /* filesToExclude */\n-                                  false, /* doNotFailIfNothingArchived */\n-                                  false, /* archiveOnlyIfSuccessful */)\n-            // Add trigger\n-            if (isPR) {\n-                TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()\n-\n-                if (runtime == \"MonoTest\") {\n-                    // Until they're passing reliably, require opt in\n-                    // for Mono tests\n-                    prTrigger.setCustomTriggerPhrase(\"(?i).*test\\\\W+mono.*\")\n-                    prTrigger.triggerOnlyOnComment()\n-                }\n-\n-                prTrigger.triggerForBranch(branch)\n-                // Set up what shows up in Github:\n-                prTrigger.setGithubContext(\"${osName} Build for ${runtime}\")\n-                prTrigger.emitTrigger(newJob)\n-            } else {\n-                if (runtime != \"Mono\") {\n-                    Utilities.addGithubPushTrigger(newJob)\n-                }\n-            }\n+            CreateJob(script, runtime, osName, isPR)\n         }\n     }\n }\n \n+//sourcebuild\n+CreateJob(",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I think PR is probably ok.",
              "createdAt": "2018-03-29T22:29:00Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -27,118 +82,69 @@ def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n         //     runtimes.add('MonoTest')\n         // }\n \n-        runtimes.each { runtime ->\n-            def newJobName = Utilities.getFullJobName(\"innerloop_${osName}_${runtime}\", isPR)\n-            def skipTestsWhenResultsNotFound = true\n+        def script = \"NA\"\n \n-            // Create a new job with the specified name.  The brace opens a new closure\n-            // and calls made within that closure apply to the newly created job.\n-            def newJob = job(newJobName) {\n-                description('')\n-            }\n-\n-            // Define job.\n+        runtimes.each { runtime ->\n             switch(osName) {\n                 case 'Windows_NT':\n-                    newJob.with{\n-                        steps{\n-                            // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n-                            def script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n-\n-                            //  Should the build be Release?  The default is Debug\n-                            if (runtime == \"Full\") {\n-                                script += \" && build\\\\cibuild.cmd\"\n-                            }\n-                            else if (runtime == \"CoreCLR\") {\n-                                script += \" && build\\\\cibuild.cmd -hostType Core\"\n-                            }\n-\n-                            batchFile(script)\n-                        }\n-\n-                        skipTestsWhenResultsNotFound = false\n+\n+                    // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n+                    script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n+\n+                    if (runtime == \"Full\") {\n+                        script += \" && build\\\\cibuild.cmd\"\n+                    }\n+                    else if (runtime == \"CoreCLR\") {\n+                        script += \" && build\\\\cibuild.cmd -hostType Core\"\n                     }\n \n                     break;\n                 case 'OSX10.13':\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n                 case { it.startsWith('Ubuntu') }:\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n             }\n \n-            // Add xunit result archiving. Skip if no results found.\n-            Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)\n-            def imageVersion = imageVersionMap[osName];\n-            Utilities.setMachineAffinity(newJob, osName, imageVersion)\n-            Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")\n-            // Add archiving of logs (even if the build failed)\n-            Utilities.addArchival(newJob,\n-                                  'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */\n-                                  '', /* filesToExclude */\n-                                  false, /* doNotFailIfNothingArchived */\n-                                  false, /* archiveOnlyIfSuccessful */)\n-            // Add trigger\n-            if (isPR) {\n-                TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()\n-\n-                if (runtime == \"MonoTest\") {\n-                    // Until they're passing reliably, require opt in\n-                    // for Mono tests\n-                    prTrigger.setCustomTriggerPhrase(\"(?i).*test\\\\W+mono.*\")\n-                    prTrigger.triggerOnlyOnComment()\n-                }\n-\n-                prTrigger.triggerForBranch(branch)\n-                // Set up what shows up in Github:\n-                prTrigger.setGithubContext(\"${osName} Build for ${runtime}\")\n-                prTrigger.emitTrigger(newJob)\n-            } else {\n-                if (runtime != \"Mono\") {\n-                    Utilities.addGithubPushTrigger(newJob)\n-                }\n-            }\n+            CreateJob(script, runtime, osName, isPR)\n         }\n     }\n }\n \n+//sourcebuild\n+CreateJob(",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "But . . . isn't it quoted? Not sure I understand the comment.",
              "createdAt": "2018-03-29T21:36:01Z",
              "path": "build/build.sh",
              "diffHunk": "@@ -203,9 +236,21 @@ function InstallDotNetCli {\n       return $LASTEXITCODE\n     fi\n   fi\n+}\n+\n+function InstallDotNetCli {\n+  if [ \"$dotnetCoreSdkDir\" = \"\" ]\n+  then\n+    DownloadDotnetCli\n+  else\n+    export DOTNET_INSTALL_DIR=$dotnetCoreSdkDir\n+  fi\n+\n+  # don't double quote this otherwise the csc tooltask will fail with double double-quotting\n+  export DOTNET_HOST_PATH=\"$DOTNET_INSTALL_DIR/dotnet\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's an inherited comment :)\r\nI think the comment says to not add literal quotes.",
              "createdAt": "2018-03-29T23:11:53Z",
              "path": "build/build.sh",
              "diffHunk": "@@ -203,9 +236,21 @@ function InstallDotNetCli {\n       return $LASTEXITCODE\n     fi\n   fi\n+}\n+\n+function InstallDotNetCli {\n+  if [ \"$dotnetCoreSdkDir\" = \"\" ]\n+  then\n+    DownloadDotnetCli\n+  else\n+    export DOTNET_INSTALL_DIR=$dotnetCoreSdkDir\n+  fi\n+\n+  # don't double quote this otherwise the csc tooltask will fail with double double-quotting\n+  export DOTNET_HOST_PATH=\"$DOTNET_INSTALL_DIR/dotnet\"",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: trailing newline",
              "createdAt": "2018-03-29T21:37:20Z",
              "path": "build/build.sh",
              "diffHunk": "@@ -381,11 +429,14 @@ fi\n NuGetPackageRoot=$NUGET_PACKAGES\n \n Build\n-LASTEXITCODE=$?\n \n-if ! $ci # kill command not permitted on CI machines\n+ExitIfError $? \"Build failed\"\n+\n+if $dotnetBuildFromSource\n then\n-  StopProcesses\n+  MSBuildSolution=\"$RepoRoot/MSBuild.SourceBuild.sln\"\n fi\n \n-exit $LASTEXITCODE\n+AssertNugetPackages\n+\n+ExitIfError $? \"AssertNugetPackages failed\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Redundant with conditional above?",
              "createdAt": "2018-03-29T21:38:10Z",
              "path": "build/build.sh",
              "diffHunk": "@@ -381,11 +429,14 @@ fi\n NuGetPackageRoot=$NUGET_PACKAGES\n \n Build\n-LASTEXITCODE=$?\n \n-if ! $ci # kill command not permitted on CI machines\n+ExitIfError $? \"Build failed\"\n+\n+if $dotnetBuildFromSource\n then\n-  StopProcesses\n+  MSBuildSolution=\"$RepoRoot/MSBuild.SourceBuild.sln\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yup, will delete",
              "createdAt": "2018-03-29T23:14:44Z",
              "path": "build/build.sh",
              "diffHunk": "@@ -381,11 +429,14 @@ fi\n NuGetPackageRoot=$NUGET_PACKAGES\n \n Build\n-LASTEXITCODE=$?\n \n-if ! $ci # kill command not permitted on CI machines\n+ExitIfError $? \"Build failed\"\n+\n+if $dotnetBuildFromSource\n then\n-  StopProcesses\n+  MSBuildSolution=\"$RepoRoot/MSBuild.SourceBuild.sln\"",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we remember why this is pinned to a specific image instead of latest? I don't.",
              "createdAt": "2018-03-29T21:50:35Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n                        'OSX10.13':'latest-or-auto',\n                        'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+                       'Ubuntu16.04':'20170731',",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Nope, I'll send another PR for that to see what happens :)",
              "createdAt": "2018-03-29T23:16:14Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n                        'OSX10.13':'latest-or-auto',\n                        'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+                       'Ubuntu16.04':'20170731',",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "According to this commit, it's hardcoded for Mono :) https://github.com/Microsoft/msbuild/commit/ccce59c0dd41c278ef3292bc56cd958fb6a5e851",
              "createdAt": "2018-03-29T23:19:19Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n                        'OSX10.13':'latest-or-auto',\n                        'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+                       'Ubuntu16.04':'20170731',",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't `/p:DisableNerdbankVersioning=true` redundant with `-dotnetBuildFromSource`?",
              "createdAt": "2018-03-29T22:34:42Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -27,118 +82,69 @@ def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n         //     runtimes.add('MonoTest')\n         // }\n \n-        runtimes.each { runtime ->\n-            def newJobName = Utilities.getFullJobName(\"innerloop_${osName}_${runtime}\", isPR)\n-            def skipTestsWhenResultsNotFound = true\n+        def script = \"NA\"\n \n-            // Create a new job with the specified name.  The brace opens a new closure\n-            // and calls made within that closure apply to the newly created job.\n-            def newJob = job(newJobName) {\n-                description('')\n-            }\n-\n-            // Define job.\n+        runtimes.each { runtime ->\n             switch(osName) {\n                 case 'Windows_NT':\n-                    newJob.with{\n-                        steps{\n-                            // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n-                            def script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n-\n-                            //  Should the build be Release?  The default is Debug\n-                            if (runtime == \"Full\") {\n-                                script += \" && build\\\\cibuild.cmd\"\n-                            }\n-                            else if (runtime == \"CoreCLR\") {\n-                                script += \" && build\\\\cibuild.cmd -hostType Core\"\n-                            }\n-\n-                            batchFile(script)\n-                        }\n-\n-                        skipTestsWhenResultsNotFound = false\n+\n+                    // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n+                    script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n+\n+                    if (runtime == \"Full\") {\n+                        script += \" && build\\\\cibuild.cmd\"\n+                    }\n+                    else if (runtime == \"CoreCLR\") {\n+                        script += \" && build\\\\cibuild.cmd -hostType Core\"\n                     }\n \n                     break;\n                 case 'OSX10.13':\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n                 case { it.startsWith('Ubuntu') }:\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n             }\n \n-            // Add xunit result archiving. Skip if no results found.\n-            Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)\n-            def imageVersion = imageVersionMap[osName];\n-            Utilities.setMachineAffinity(newJob, osName, imageVersion)\n-            Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")\n-            // Add archiving of logs (even if the build failed)\n-            Utilities.addArchival(newJob,\n-                                  'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */\n-                                  '', /* filesToExclude */\n-                                  false, /* doNotFailIfNothingArchived */\n-                                  false, /* archiveOnlyIfSuccessful */)\n-            // Add trigger\n-            if (isPR) {\n-                TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()\n-\n-                if (runtime == \"MonoTest\") {\n-                    // Until they're passing reliably, require opt in\n-                    // for Mono tests\n-                    prTrigger.setCustomTriggerPhrase(\"(?i).*test\\\\W+mono.*\")\n-                    prTrigger.triggerOnlyOnComment()\n-                }\n-\n-                prTrigger.triggerForBranch(branch)\n-                // Set up what shows up in Github:\n-                prTrigger.setGithubContext(\"${osName} Build for ${runtime}\")\n-                prTrigger.emitTrigger(newJob)\n-            } else {\n-                if (runtime != \"Mono\") {\n-                    Utilities.addGithubPushTrigger(newJob)\n-                }\n-            }\n+            CreateJob(script, runtime, osName, isPR)\n         }\n     }\n }\n \n+//sourcebuild\n+CreateJob(\n+    \"./build/build.sh build -dotnetBuildFromSource -bootstraponly -skiptests -pack -configuration Release /p:DisableNerdbankVersioning=true\",",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It is indeed",
              "createdAt": "2018-03-29T23:21:45Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -27,118 +82,69 @@ def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n         //     runtimes.add('MonoTest')\n         // }\n \n-        runtimes.each { runtime ->\n-            def newJobName = Utilities.getFullJobName(\"innerloop_${osName}_${runtime}\", isPR)\n-            def skipTestsWhenResultsNotFound = true\n+        def script = \"NA\"\n \n-            // Create a new job with the specified name.  The brace opens a new closure\n-            // and calls made within that closure apply to the newly created job.\n-            def newJob = job(newJobName) {\n-                description('')\n-            }\n-\n-            // Define job.\n+        runtimes.each { runtime ->\n             switch(osName) {\n                 case 'Windows_NT':\n-                    newJob.with{\n-                        steps{\n-                            // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n-                            def script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n-\n-                            //  Should the build be Release?  The default is Debug\n-                            if (runtime == \"Full\") {\n-                                script += \" && build\\\\cibuild.cmd\"\n-                            }\n-                            else if (runtime == \"CoreCLR\") {\n-                                script += \" && build\\\\cibuild.cmd -hostType Core\"\n-                            }\n-\n-                            batchFile(script)\n-                        }\n-\n-                        skipTestsWhenResultsNotFound = false\n+\n+                    // Protect against VsDevCmd behaviour of changing the current working directory https://developercommunity.visualstudio.com/content/problem/26780/vsdevcmdbat-changes-the-current-working-directory.html\n+                    script = \"set VSCMD_START_DIR=\\\"%CD%\\\" && call \\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\\\\Common7\\\\Tools\\\\VsDevCmd.bat\\\"\"\n+\n+                    if (runtime == \"Full\") {\n+                        script += \" && build\\\\cibuild.cmd\"\n+                    }\n+                    else if (runtime == \"CoreCLR\") {\n+                        script += \" && build\\\\cibuild.cmd -hostType Core\"\n                     }\n \n                     break;\n                 case 'OSX10.13':\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n                 case { it.startsWith('Ubuntu') }:\n-                    newJob.with{\n-                        steps{\n-                            def buildCmd = \"./build/cibuild.sh\"\n-\n-                            if (runtime == \"Mono\") {\n-                                // tests are failing on mono right now\n-                                buildCmd += \" --scope Compile\"\n-                            }\n-\n-                            if (runtime.startsWith(\"Mono\")) {\n-                                // Redundantly specify target to override\n-                                // \"MonoTest\" which cibuild.sh doesn't know\n-                                buildCmd += \" --host Mono --target Mono\"\n-                            }\n-\n-                            shell(buildCmd)\n-                        }\n+                    script = \"./build/cibuild.sh\"\n+\n+                    if (runtime == \"Mono\") {\n+                        // tests are failing on mono right now\n+                        script += \" --scope Compile\"\n+                    }\n+\n+                    if (runtime.startsWith(\"Mono\")) {\n+                        // Redundantly specify target to override\n+                        // \"MonoTest\" which cibuild.sh doesn't know\n+                        script += \" --host Mono --target Mono\"\n                     }\n \n                     break;\n             }\n \n-            // Add xunit result archiving. Skip if no results found.\n-            Utilities.addXUnitDotNETResults(newJob, 'artifacts/**/TestResults/*.xml', skipTestsWhenResultsNotFound)\n-            def imageVersion = imageVersionMap[osName];\n-            Utilities.setMachineAffinity(newJob, osName, imageVersion)\n-            Utilities.standardJobSetup(newJob, project, isPR, \"*/${branch}\")\n-            // Add archiving of logs (even if the build failed)\n-            Utilities.addArchival(newJob,\n-                                  'artifacts/**/log/*.binlog,artifacts/**/log/*.log,artifacts/**/TestResults/*,artifacts/**/MSBuild_*.failure.txt', /* filesToArchive */\n-                                  '', /* filesToExclude */\n-                                  false, /* doNotFailIfNothingArchived */\n-                                  false, /* archiveOnlyIfSuccessful */)\n-            // Add trigger\n-            if (isPR) {\n-                TriggerBuilder prTrigger = TriggerBuilder.triggerOnPullRequest()\n-\n-                if (runtime == \"MonoTest\") {\n-                    // Until they're passing reliably, require opt in\n-                    // for Mono tests\n-                    prTrigger.setCustomTriggerPhrase(\"(?i).*test\\\\W+mono.*\")\n-                    prTrigger.triggerOnlyOnComment()\n-                }\n-\n-                prTrigger.triggerForBranch(branch)\n-                // Set up what shows up in Github:\n-                prTrigger.setGithubContext(\"${osName} Build for ${runtime}\")\n-                prTrigger.emitTrigger(newJob)\n-            } else {\n-                if (runtime != \"Mono\") {\n-                    Utilities.addGithubPushTrigger(newJob)\n-                }\n-            }\n+            CreateJob(script, runtime, osName, isPR)\n         }\n     }\n }\n \n+//sourcebuild\n+CreateJob(\n+    \"./build/build.sh build -dotnetBuildFromSource -bootstraponly -skiptests -pack -configuration Release /p:DisableNerdbankVersioning=true\",",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You'll need to pass in the \"project and branch\" variables here\r\nAlso, the \"job\" method is not going to be available here.  You'll need to pass in the dsl factory when you call CreateJob.  For example, here is similar usage.\r\n\r\nhttps://github.com/dotnet/dotnet-ci/blob/master/src/jobs/generation/Utilities.groovy#L1167",
              "createdAt": "2018-03-30T15:44:43Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "So as it is right now, project, branch, and job will just evaluate to null? I can probably capture them in a class right? To avoid the super long param list.",
              "createdAt": "2018-03-30T16:51:21Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I think you might be able to use \"this.project\" in the method",
              "createdAt": "2018-03-30T16:58:06Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "(where this == the dslFactory parameter)",
              "createdAt": "2018-03-30T16:58:22Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "What's the relationship between the dslFactory, project and branch, and the netci.groovy script class? Are they just local vars in the generated run method?",
              "createdAt": "2018-03-30T17:31:03Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "So I ran one of the generated test jobs and it seems to just work: https://ci2.dot.net/job/Microsoft_msbuild/job/vs15.7/job/GenPRTest/job/innerloop_Windows_NT_CoreCLR/1/console\r\n\r\nDoes this mean it's all good? :)",
              "createdAt": "2018-03-30T17:37:29Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "project and branch are just local variables to the script\r\ndslFactory is passed in as the \"this\" pointer to the script, which is the class context that can be used to invoke the DSL methods, e.g.:\r\n\r\n```\r\nfoo(factory) {\r\n    factory.job {\r\n    }\r\n}\r\n\r\nfoo(this)\r\n```",
              "createdAt": "2018-03-30T20:45:00Z",
              "path": "netci.groovy",
              "diffHunk": "@@ -2,16 +2,71 @@\n import jobs.generation.*;\n \n // The input project name\n-def project = GithubProject\n+project = GithubProject\n \n // The input branch name (e.g. master)\n-def branch = GithubBranchName\n+branch = GithubBranchName\n \n // What this repo is using for its machine images at the current time\n-def imageVersionMap = ['Windows_NT':'latest-dev15-5',\n-                       'OSX10.13':'latest-or-auto',\n-                       'Ubuntu14.04':'latest-or-auto',\n-                       'Ubuntu16.04':'20170731']\n+imageVersionMap = ['Windows_NT':'latest-dev15-5',\n+                    'OSX10.13':'latest-or-auto',\n+                    'Ubuntu14.04':'latest-or-auto',\n+                    'Ubuntu16.04':'20170731',\n+                    'RHEL7.2' : 'latest']\n+\n+def CreateJob(script, runtime, osName, isPR, shouldSkipTestsWhenResultsNotFound=false, isSourceBuild = false) {",
              "author": {
                "login": "mmitche"
              }
            }
          ]
        }
      }
    ]
  }
}