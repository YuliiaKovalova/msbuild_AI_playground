{
  "number": 8870,
  "title": "Backward-compatibility with KeyValuePair<string, string> metadata items [#8864]",
  "body": "Fixes #8864 \r\n\r\n### Context\r\nTaskExecutionHost.cs\r\n\r\n### Changes Made\r\nFallback to the prior behavior of expecting metadata items of type KeyValuePair<string, string>\r\n\r\n### Testing\r\nThis has not been tested\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-12T12:57:43Z",
  "updatedAt": "2023-06-29T17:23:43Z",
  "closedAt": "2023-06-29T15:23:28Z",
  "mergedAt": "2023-06-29T15:23:28Z",
  "additions": 9,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "jehhynes"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7f6b2a9b7b319baa4d0334b8760203db9a5bcf5e",
          "message": "Backward-compatibility with KeyValuePair<string, string> metadata items [#8864]",
          "committedDate": "2023-06-14T17:09:17Z",
          "author": {
            "name": "Jon Hynes",
            "email": "jonh@datarg.com"
          }
        }
      },
      {
        "commit": {
          "oid": "91f61864f339183d1261c18d63acdfa15f381d58",
          "message": "Update src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-06-14T20:09:59Z",
          "author": {
            "name": "Jon Hynes",
            "email": "jehhynes@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3298b1978dba67ea7f6d3e0adb8b26ff0965ed67",
          "message": "Avoid allocations (and fix SA1509 nitpick)",
          "committedDate": "2023-06-21T20:03:35Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-policy-service agree",
        "createdAt": "2023-06-12T13:01:25Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "(oh and also . . . thanks for the PR!)",
        "createdAt": "2023-06-12T18:19:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@donJoseLuis @rainersigwald I have updated the PR based on the suggestions to use `foreach`, `InternalErrorException`, and `if` statements.\r\nI believe I will let you guys take it from here - as far as unit testing and discussiong @donJoseLuis 's other concerns. Thanks!\r\n\r\nP.S. Do we care that we are assuming all DictionaryEntry's will be <string, string>?",
        "createdAt": "2023-06-13T18:26:56Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "> P.S. Do we care that we are assuming all DictionaryEntry's will be <string, string>?\r\n\r\nNo, that's ok--it's the only thing that would ever have worked AFAIK.",
        "createdAt": "2023-06-13T18:30:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Updated to loop DictionaryEntry's in the foreach.",
        "createdAt": "2023-06-13T18:40:06Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "> One more small nit (we can avoid reallocations by specifying the size of the list up front). Thanks for working through this, it's looking great!\r\n> \r\n> @JaynieBai, could you please write a test for this case? We'll need a task that returns a custom `ITaskItem` implementation that has a custom `IDictionary` type returned from `CloneCustomMetadata()`.\r\n\r\nYeah, I will do that",
        "createdAt": "2023-06-16T01:38:38Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "@rainersigwald - all expressed concerns seem to be addressed - do you want to revise?",
        "createdAt": "2023-06-29T08:16:03Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/backport to vs17.7",
        "createdAt": "2023-06-29T17:23:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Started backporting to vs17.7: https://github.com/dotnet/msbuild/actions/runs/5415050762",
        "createdAt": "2023-06-29T17:23:43Z",
        "author": {
          "login": "github-actions"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "MSBuild has a specific exception type we like to throw in cases like this:\r\n\r\n```suggestion\r\n                                            throw new InternalErrorException(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\")));\r\n```",
              "createdAt": "2023-06-12T15:10:37Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,11 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\n+                                        .Select(x =>\n+                                            x is DictionaryEntry de ? new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)) :\n+                                            x is KeyValuePair<string, string> kvp ? new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)) :\n+                                            throw new Exception(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\")));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: is it worth-while just mention that the type was unexpected vs. detailing the specific types that are expected?\r\nAny chance we'll add more valid custom data types in the future?",
              "createdAt": "2023-06-13T13:44:14Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,11 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\n+                                        .Select(x =>\n+                                            x is DictionaryEntry de ? new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)) :\n+                                            x is KeyValuePair<string, string> kvp ? new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)) :\n+                                            throw new Exception(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\")));",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Outdated - code removed",
              "createdAt": "2023-06-29T15:23:03Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,11 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\n+                                        .Select(x =>\n+                                            x is DictionaryEntry de ? new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)) :\n+                                            x is KeyValuePair<string, string> kvp ? new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)) :\n+                                            throw new Exception(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\")));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the logic makes sense. separating old vs new & handling it accordingly.\r\n\r\nminor: the multi-tier ternary operator is not optimal for code maintenance.\r\ncan a couple of `if` statements achieve the same job but reduce complexity?\r\n[it's very possible that this is a preference and not a fact]",
              "createdAt": "2023-06-13T13:49:27Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,11 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\n+                                        .Select(x =>",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Outdated - code removed",
              "createdAt": "2023-06-29T15:23:09Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,11 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\n+                                        .Select(x =>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You don't have to do all this--in the `foreach`, you're guaranteed to get the `DictionaryEntry`.",
              "createdAt": "2023-06-13T18:29:14Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,24 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    var items = new List<KeyValuePair<string, string>>();\n+                                    foreach (object entry in output.CloneCustomMetadata())\n+                                    {\n+                                        if (entry is DictionaryEntry de)\n+                                        {\n+                                            items.Add(new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)));\n+                                        }\n+                                        else if (entry is KeyValuePair<string, string> kvp)\n+                                        {\n+                                            items.Add(new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)));\n+                                        }\n+                                        else\n+                                        {\n+                                            throw new InternalErrorException(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\");\n+                                        }\n+                                    }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Outdated",
              "createdAt": "2023-06-29T08:02:39Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,24 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    var items = new List<KeyValuePair<string, string>>();\n+                                    foreach (object entry in output.CloneCustomMetadata())\n+                                    {\n+                                        if (entry is DictionaryEntry de)\n+                                        {\n+                                            items.Add(new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)));\n+                                        }\n+                                        else if (entry is KeyValuePair<string, string> kvp)\n+                                        {\n+                                            items.Add(new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)));\n+                                        }\n+                                        else\n+                                        {\n+                                            throw new InternalErrorException(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\");\n+                                        }\n+                                    }",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the `SetMetadataOnTaskOutput` -> `SetMetadata` change intentional?",
              "createdAt": "2023-06-14T17:04:20Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,13 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    var items = new List<KeyValuePair<string, string>>();\n+                                    foreach (DictionaryEntry de in output.CloneCustomMetadata())\n+                                    {\n+                                        items.Add(new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)));\n+                                    }\n+\n+                                    newItem.SetMetadata(items);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@JanKrivanek It was not intentional. Fixed.",
              "createdAt": "2023-06-14T17:09:53Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,13 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    var items = new List<KeyValuePair<string, string>>();\n+                                    foreach (DictionaryEntry de in output.CloneCustomMetadata())\n+                                    {\n+                                        items.Add(new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)));\n+                                    }\n+\n+                                    newItem.SetMetadata(items);",
              "author": {
                "login": "jehhynes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                                    IDictionary customMetadata = output.CloneCustomMetadata();\r\n                                    var items = new List<KeyValuePair<string, string>>(customMetadata.Count);\r\n\r\n                                    foreach (DictionaryEntry de in customMetadata)\r\n\r\n```",
              "createdAt": "2023-06-14T19:50:22Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,9 +1395,13 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n                                     // Setting an item spec expects the escaped value, as does setting metadata.\n                                     newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\n \n-                                    newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\n-                                        .Cast<DictionaryEntry>()\n-                                        .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\n+                                    var items = new List<KeyValuePair<string, string>>();\n+                                    foreach (DictionaryEntry de in output.CloneCustomMetadata())",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}