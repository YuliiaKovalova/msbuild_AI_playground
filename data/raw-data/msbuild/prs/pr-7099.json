{
  "number": 7099,
  "title": "Adding Options attribute to SDK style import",
  "body": "VC team would like to use SDKResolver for vcpkg integration with msbuild, but to be able to minimize what is actually getting downloaded for particular project configurations, the vcpkg needs to know a number of configuration/project  specific options like TargetOS, TargetArchitecture, etc.\r\n\r\nWe'd like to add \"Options\" attribute to \"Import\" element. It will be meaningful only together with \"SDK\" attribute. \r\nThe usage in cpp .props will look like \r\n\r\n  ```\r\n<PropertyGroup>\r\n    <VcpkgManifestDirectory>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), vcpkg.json))</VcpkgManifestDirectory>\r\n  </PropertyGroup>\r\n  <Import Condition=\"'$(VcpkgManifestDirectory)' != ''\" Project=\"Sdk.props\" Sdk=\"vcpkg\" Options=\"ManifestDirectory=$(VcpkgManifestDirectory);TargetOS=$(TargetOS);Configuration=$(Configuration);TargetArchitecture=$(PlatformTarget);$(AdditionalVCPksConfigurationOptions)\" />\r\n\r\n```\r\nThe vcpkg sdk resolver will only create .props file from vcpkg.json and the options (if not already up-to-date), the actual download of libs and tools will happen later, so this should not take much time.\r\n\r\nThe changes in this PR work for my experimental vcpkg sdk resolver and I'd like to get an early review from msbuild team on them.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-11-30T02:36:44Z",
  "updatedAt": "2022-12-05T21:45:09Z",
  "closedAt": "2022-12-05T21:45:09Z",
  "mergedAt": null,
  "additions": 120,
  "deletions": 46,
  "changedFiles": 20,
  "headRefName": "main",
  "isDraft": true,
  "author": {
    "login": "olgaark"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "69508c4358c7afc13d4768fc75d9908fa756ec86",
          "message": "Adding Options attribute to SDK style import",
          "committedDate": "2021-11-30T01:38:24Z",
          "author": {
            "name": "Olga Arkhipova",
            "email": "olgaark@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a6ed36fc541d88a990bbc93acf72bb0bba489de",
          "message": "Additional changes for prev commit",
          "committedDate": "2021-11-30T02:04:18Z",
          "author": {
            "name": "Olga Arkhipova",
            "email": "olgaark@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43111a33aa95efcf14462dda34d37e7275b1011d",
          "message": "Merge with main",
          "committedDate": "2022-01-10T23:34:14Z",
          "author": {
            "name": "Olga Arkhipova",
            "email": "olgaark@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7c4adda93ebb47386d37efd9235d8130556fde84",
          "message": "Additional changes for merge",
          "committedDate": "2022-01-10T23:43:05Z",
          "author": {
            "name": "Olga Arkhipova",
            "email": "olgaark@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13137f79d557c6ebb64ccc3ba0b94d18b7d45f0c",
          "message": "Additional changes",
          "committedDate": "2022-01-11T00:39:04Z",
          "author": {
            "name": "Olga Arkhipova",
            "email": "olgaark@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This seems interesting but what happens when you give `Options` for `Sdk.targets` import of `vcpkg` Sdk and any other subsequent imports there-after?",
        "createdAt": "2022-01-11T03:48:46Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@olgaark, there was something about C++ having added a new SDK resolver recently. Do you still need this PR?",
        "createdAt": "2022-04-28T20:17:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We found a way for me start the work without this change, but I am afraid, it still might be needed to be able react on the vcpkg manifest changes in the IDE. Can we keep it for some time? \r\n",
        "createdAt": "2022-04-28T20:34:54Z",
        "author": {
          "login": "olgaark"
        }
      },
      {
        "body": "Of course! Just let me know if you decide you don't need it anymore.",
        "createdAt": "2022-04-28T22:03:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Closing for now but we can always bring it back.",
        "createdAt": "2022-12-05T21:45:09Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Aren't we expecting `Options` to always have **key** **value** pairs, if so, why not make `sdkOptions` a dictionary instead?\n\nThat way we can parse and validate the string early on.",
              "createdAt": "2022-01-11T03:54:24Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs",
              "diffHunk": "@@ -42,7 +42,8 @@ internal interface ISdkResolverService\n         /// <param name=\"projectPath\">The full path to the project file that is resolving the SDK.</param>\n         /// <param name=\"interactive\">Indicates whether or not the resolver is allowed to be interactive.</param>\n         /// <param name=\"isRunningInVisualStudio\">Indicates whether or not the resolver is running in Visual Studio.</param>\n+        /// <param name=\"sdkOptions\">SdkOptions attribute of the sdk style import.</param>\n         /// <returns>An <see cref=\"SdkResult\"/> containing information about the resolved SDK. If no resolver was able to resolve it, then <see cref=\"Framework.SdkResult.Success\"/> == false. </returns>\n-        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio);\n+        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions);",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "I'd rather not limit Options to key-value pairs nor have any validation in msbuild for them as meaning can be different for different resolvers.",
              "createdAt": "2022-01-11T17:51:32Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs",
              "diffHunk": "@@ -42,7 +42,8 @@ internal interface ISdkResolverService\n         /// <param name=\"projectPath\">The full path to the project file that is resolving the SDK.</param>\n         /// <param name=\"interactive\">Indicates whether or not the resolver is allowed to be interactive.</param>\n         /// <param name=\"isRunningInVisualStudio\">Indicates whether or not the resolver is running in Visual Studio.</param>\n+        /// <param name=\"sdkOptions\">SdkOptions attribute of the sdk style import.</param>\n         /// <returns>An <see cref=\"SdkResult\"/> containing information about the resolved SDK. If no resolver was able to resolve it, then <see cref=\"Framework.SdkResult.Success\"/> == false. </returns>\n-        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio);\n+        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions);",
              "author": {
                "login": "olgaark"
              }
            },
            {
              "body": "That's a valid argument but what else do we have for `Options` (_as the name implies_) other than key-value pairs?",
              "createdAt": "2022-01-11T18:04:48Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs",
              "diffHunk": "@@ -42,7 +42,8 @@ internal interface ISdkResolverService\n         /// <param name=\"projectPath\">The full path to the project file that is resolving the SDK.</param>\n         /// <param name=\"interactive\">Indicates whether or not the resolver is allowed to be interactive.</param>\n         /// <param name=\"isRunningInVisualStudio\">Indicates whether or not the resolver is running in Visual Studio.</param>\n+        /// <param name=\"sdkOptions\">SdkOptions attribute of the sdk style import.</param>\n         /// <returns>An <see cref=\"SdkResult\"/> containing information about the resolved SDK. If no resolver was able to resolve it, then <see cref=\"Framework.SdkResult.Success\"/> == false. </returns>\n-        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio);\n+        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions);",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "It can be just a string with, say, command line or a file path.",
              "createdAt": "2022-01-11T18:34:32Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs",
              "diffHunk": "@@ -42,7 +42,8 @@ internal interface ISdkResolverService\n         /// <param name=\"projectPath\">The full path to the project file that is resolving the SDK.</param>\n         /// <param name=\"interactive\">Indicates whether or not the resolver is allowed to be interactive.</param>\n         /// <param name=\"isRunningInVisualStudio\">Indicates whether or not the resolver is running in Visual Studio.</param>\n+        /// <param name=\"sdkOptions\">SdkOptions attribute of the sdk style import.</param>\n         /// <returns>An <see cref=\"SdkResult\"/> containing information about the resolved SDK. If no resolver was able to resolve it, then <see cref=\"Framework.SdkResult.Success\"/> == false. </returns>\n-        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio);\n+        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions);",
              "author": {
                "login": "olgaark"
              }
            },
            {
              "body": "If so, you could have `variable_name=<cmd-line/file-path>` and it'll still work. You'll also get the validation for free. Better validate and objectize before sending it to the resolver, IMHO.",
              "createdAt": "2022-01-11T19:26:33Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/ISdkResolverService.cs",
              "diffHunk": "@@ -42,7 +42,8 @@ internal interface ISdkResolverService\n         /// <param name=\"projectPath\">The full path to the project file that is resolving the SDK.</param>\n         /// <param name=\"interactive\">Indicates whether or not the resolver is allowed to be interactive.</param>\n         /// <param name=\"isRunningInVisualStudio\">Indicates whether or not the resolver is running in Visual Studio.</param>\n+        /// <param name=\"sdkOptions\">SdkOptions attribute of the sdk style import.</param>\n         /// <returns>An <see cref=\"SdkResult\"/> containing information about the resolved SDK. If no resolver was able to resolve it, then <see cref=\"Framework.SdkResult.Success\"/> == false. </returns>\n-        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio);\n+        SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions);",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\n                sdkNameAndOptions = $\"{sdk.Name}:${sdkOptions}\";\n```\n\nHave a separator so that the string is parsable. Using dictionary we can do...\n\n```suggestion\n                sdkNameAndOptions = $\"{sdk.Name}:${sdkOptions.ToString()}\";\n```\n\nTo preserve the order of **key** **value** pairs, we can use a custom `OrderedDictionary`.",
              "createdAt": "2022-01-11T04:01:11Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -64,20 +64,25 @@ public override void PacketReceived(int node, INodePacket packet)\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions)\n         {\n             bool wasResultCached = true;\n \n             MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n \n+            string sdkNameAndOptions = sdk.Name;\n+            if (sdkOptions != null)\n+            {\n+                sdkNameAndOptions = $\"{sdk.Name}${sdkOptions}\";",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "'$' before {sdkOptions} is a separator, the strings are already evaluated here",
              "createdAt": "2022-01-11T19:14:49Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -64,20 +64,25 @@ public override void PacketReceived(int node, INodePacket packet)\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions)\n         {\n             bool wasResultCached = true;\n \n             MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n \n+            string sdkNameAndOptions = sdk.Name;\n+            if (sdkOptions != null)\n+            {\n+                sdkNameAndOptions = $\"{sdk.Name}${sdkOptions}\";",
              "author": {
                "login": "olgaark"
              }
            },
            {
              "body": "Ahhh... Silly me!! I thought it was a string variable. My bad!!!",
              "createdAt": "2022-01-11T19:30:33Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -64,20 +64,25 @@ public override void PacketReceived(int node, INodePacket packet)\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, string sdkOptions)\n         {\n             bool wasResultCached = true;\n \n             MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n \n+            string sdkNameAndOptions = sdk.Name;\n+            if (sdkOptions != null)\n+            {\n+                sdkNameAndOptions = $\"{sdk.Name}${sdkOptions}\";",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is an alias. We don't need to rename this. You can just have\u2026\n\n```suggestion\nusing SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext2;\n```\n\nInfact, we can remove this alias entirely now that there's no conflict in naming!",
              "createdAt": "2022-01-11T05:27:04Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs",
              "diffHunk": "@@ -3,25 +3,26 @@\n \n using System;\n \n-using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;\n+using SdkResolverContextBase2 = Microsoft.Build.Framework.SdkResolverContext2;",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Make sense. How about very explicit\r\ninternal sealed class SdkResolverContext : Microsoft.Build.Framework.SdkResolverContext2\r\n?",
              "createdAt": "2022-01-11T19:16:32Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs",
              "diffHunk": "@@ -3,25 +3,26 @@\n \n using System;\n \n-using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;\n+using SdkResolverContextBase2 = Microsoft.Build.Framework.SdkResolverContext2;",
              "author": {
                "login": "olgaark"
              }
            },
            {
              "body": "It'll confuse readers. I personally prefer keeping the `Base` suffix, since it makes clear that the imported class is base class.",
              "createdAt": "2022-01-11T19:33:27Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs",
              "diffHunk": "@@ -3,25 +3,26 @@\n \n using System;\n \n-using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;\n+using SdkResolverContextBase2 = Microsoft.Build.Framework.SdkResolverContext2;",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    internal sealed class SdkResolverContext : SdkResolverContextBase\r\n```\r\n\r\nsee previous comment. This makes it clear that the imported class is base class.",
              "createdAt": "2022-01-11T05:28:26Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverContext.cs",
              "diffHunk": "@@ -3,25 +3,26 @@\n \n using System;\n \n-using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;\n+using SdkResolverContextBase2 = Microsoft.Build.Framework.SdkResolverContext2;\n \n #nullable disable\n \n namespace Microsoft.Build.BackEnd.SdkResolution\n {\n     /// <summary>\n-    /// An internal implementation of <see cref=\"Framework.SdkResolverContext\"/>.\n+    /// An internal implementation of <see cref=\"Framework.SdkResolverContext2\"/>.\n     /// </summary>\n-    internal sealed class SdkResolverContext : SdkResolverContextBase\n+    internal sealed class SdkResolverContext : SdkResolverContextBase2",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}