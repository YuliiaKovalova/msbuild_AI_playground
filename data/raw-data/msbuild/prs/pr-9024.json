{
  "number": 9024,
  "title": "Add StringIntern for Item and Property Functions.",
  "body": "Remove duplicated strings from Item and Property Function.  Intern these strings to reduce memory usage.\r\n\r\n### Context\r\nStrings used parsing Item and Property Function are duplicated many times, common offenders are \"Contains\", \"Strings\", and \"true\".  \r\n\r\n### Changes Made\r\nUse the  Strings.WeakIntern() tool to cache the strings.  Since these are common strings which are shared among projects, use the global String store instead of the project specific store.\r\n\r\n### Testing\r\nProfiled with the Visual Studio Memory Inspector.  This reduced 5-6mb of strings saved in our internal Repro of 200 projects.\r\n\r\n### Notes\r\nThere are still other places here duplicate string exists, this PR focus only on these locations.",
  "state": "MERGED",
  "createdAt": "2023-07-13T00:18:16Z",
  "updatedAt": "2024-02-22T22:27:53Z",
  "closedAt": "2023-07-24T09:47:28Z",
  "mergedAt": "2023-07-24T09:47:27Z",
  "additions": 6,
  "deletions": 9,
  "changedFiles": 2,
  "headRefName": "dev/yuehuang/main_propertyfunc_mem",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8422faf55a317439f023c596c0d8e77a9e59bc5f",
          "message": "Add StringIntern for Item and Property Functions.",
          "committedDate": "2023-07-13T00:00:59Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Out of curiosity, how much is it in relative terms - i.e. compared to the total amount allocated when evaluating the projects?\r\n\r\nWhen all projects are loaded, it took 700-1000mb, depending on GC.  Thus, the saving is small but measurable.\r\n\r\n> Also, since these are hot code paths, have you confirmed that the change doesn't regress evaluation throughput / CPU time?\r\n\r\nI haven't noticed any major perf regression, but this change would only show up in CPU micro-benchmarks.  I have used the memory profiler to verify that the strings are no longer allocated after the change.",
        "createdAt": "2023-07-18T16:38:25Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}