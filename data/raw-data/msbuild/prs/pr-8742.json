{
  "number": 8742,
  "title": "Optimize locking in ProjectCollection (low risk)",
  "body": "Fixes [AB#1811627](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1811627) (@davkean will likely file a GH issue)\r\n\r\n### Context\r\n\r\n`ProjectCollection` uses a `ReaderWriterLockSlim` but it never takes it just for reading with `EnterReadLock`. Instead it uses `EnterUpgradeableReadLock`, which effectively provides mutual exclusion when reading data and results in unnecessary contention. The reason cited in comments revolves around reentrancy but calling `EnterReadLock` while already holding the write lock is perfectly legal with `LockRecursionPolicy.SupportsRecursion` so there's no need to mutually exclude readers.\r\n\r\n### Changes Made\r\n\r\n- Made `ProjectCollection` use plain read lock instead of the upgradeable one.\r\n- Simplified the `IDisposable` holder structs by removing the unneeded interlocked operation.\r\n\r\n### Testing\r\n\r\nExisting unit tests.\r\n\r\n### Notes\r\n\r\nThis is a safer version of #8728, which attempts to optimize concurrency in this class even further at the expense of readability. In particular, many readers could be converted to volatile reads to eliminate the possibility of contention with writers, some of which may be long-running. Since the reader-writer contention should not happen in VS scenarios, that PR was closed due to unfavorable risk/benefit and left just for future reference.",
  "state": "MERGED",
  "createdAt": "2023-05-09T13:46:12Z",
  "updatedAt": "2023-05-10T06:52:30Z",
  "closedAt": "2023-05-09T20:48:30Z",
  "mergedAt": "2023-05-09T20:48:30Z",
  "additions": 47,
  "deletions": 66,
  "changedFiles": 2,
  "headRefName": "projectcollection-locking2",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1af5e5bd9bf18402d4e8c607c42061297afd4a69",
          "message": "Optimize locking in ProjectCollection (low risk)",
          "committedDate": "2023-05-09T13:44:55Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm bit split on this simplification - it makes the code cleaner, but the possibility of calling the Dispose twice and just silently unlocking unrelated scope feels too high price for the simplifiation (even though it's rather esoteric and that we controll all the code).\r\n\r\nWhat about adding it only for `#DEBUG`?",
              "createdAt": "2023-05-09T18:15:42Z",
              "path": "src/Build/Utilities/ReaderWriterLockSlimExtensions.cs",
              "diffHunk": "@@ -22,44 +22,21 @@ public static DisposableWriteLock EnterDisposableWriteLock(this ReaderWriterLock\n         return new DisposableWriteLock(rwLock);\n     }\n \n-    // Officially, Dispose() being called more than once is allowable, but in this case if that were to happen\n-    // that means something is very, very wrong. Since it's an internal type, better to be strict.\n-\n-    internal struct UpgradeableReadLockDisposer : IDisposable\n+    internal readonly struct DisposableReadLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n-\n-        public UpgradeableReadLockDisposer(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n-\n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(UpgradeableReadLockDisposer)} is being disposed twice.\");\n-            }\n+        public DisposableReadLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-            rwLockToDispose.ExitUpgradeableReadLock();\n-        }\n+        public void Dispose() => _rwLock.ExitReadLock();\n     }\n \n-    internal struct DisposableWriteLock : IDisposable\n+    internal readonly struct DisposableWriteLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n         public DisposableWriteLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n-\n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(DisposableWriteLock)} is being disposed twice.\");\n-            }\n-\n-            rwLockToDispose.ExitWriteLock();\n-        }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I'm fine with this as-is. As far as I'm concerned, explicitly calling Dispose should be rare, since using statements are cleaner and avoid the need for try/finally blocks to guarantee proper disposal of resources.",
              "createdAt": "2023-05-09T18:57:02Z",
              "path": "src/Build/Utilities/ReaderWriterLockSlimExtensions.cs",
              "diffHunk": "@@ -22,44 +22,21 @@ public static DisposableWriteLock EnterDisposableWriteLock(this ReaderWriterLock\n         return new DisposableWriteLock(rwLock);\n     }\n \n-    // Officially, Dispose() being called more than once is allowable, but in this case if that were to happen\n-    // that means something is very, very wrong. Since it's an internal type, better to be strict.\n-\n-    internal struct UpgradeableReadLockDisposer : IDisposable\n+    internal readonly struct DisposableReadLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n-\n-        public UpgradeableReadLockDisposer(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n-\n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(UpgradeableReadLockDisposer)} is being disposed twice.\");\n-            }\n+        public DisposableReadLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-            rwLockToDispose.ExitUpgradeableReadLock();\n-        }\n+        public void Dispose() => _rwLock.ExitReadLock();\n     }\n \n-    internal struct DisposableWriteLock : IDisposable\n+    internal readonly struct DisposableWriteLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n         public DisposableWriteLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n-\n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(DisposableWriteLock)} is being disposed twice.\");\n-            }\n-\n-            rwLockToDispose.ExitWriteLock();\n-        }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Unbalanced enter/exit calls are checked by `ReaderWriterLockSlim` so if someone double-called `Dispose` it would blow up later. Unless someone else forgets to call `Dispose` on the same code path.\r\n\r\nI'd be fine with re-adding the check but not with an interlocked operation, that in my opinion is not justified.",
              "createdAt": "2023-05-10T06:51:03Z",
              "path": "src/Build/Utilities/ReaderWriterLockSlimExtensions.cs",
              "diffHunk": "@@ -22,44 +22,21 @@ public static DisposableWriteLock EnterDisposableWriteLock(this ReaderWriterLock\n         return new DisposableWriteLock(rwLock);\n     }\n \n-    // Officially, Dispose() being called more than once is allowable, but in this case if that were to happen\n-    // that means something is very, very wrong. Since it's an internal type, better to be strict.\n-\n-    internal struct UpgradeableReadLockDisposer : IDisposable\n+    internal readonly struct DisposableReadLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n-\n-        public UpgradeableReadLockDisposer(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n-\n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(UpgradeableReadLockDisposer)} is being disposed twice.\");\n-            }\n+        public DisposableReadLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-            rwLockToDispose.ExitUpgradeableReadLock();\n-        }\n+        public void Dispose() => _rwLock.ExitReadLock();\n     }\n \n-    internal struct DisposableWriteLock : IDisposable\n+    internal readonly struct DisposableWriteLock : IDisposable\n     {\n-        private ReaderWriterLockSlim? _rwLock;\n+        private readonly ReaderWriterLockSlim _rwLock;\n \n         public DisposableWriteLock(ReaderWriterLockSlim rwLock) => _rwLock = rwLock;\n \n-        public void Dispose()\n-        {\n-            var rwLockToDispose = Interlocked.Exchange(ref _rwLock, null);\n-\n-            if (rwLockToDispose is null)\n-            {\n-                throw new ObjectDisposedException($\"Somehow a {nameof(DisposableWriteLock)} is being disposed twice.\");\n-            }\n-\n-            rwLockToDispose.ExitWriteLock();\n-        }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}