{
  "number": 9652,
  "title": "[Doc] Clarify the transitive dependencies document",
  "body": "### Context\r\n\r\nDocumentation change only\r\n\r\nAccess to transitive dependencies can be confusing for users. Let's clarify explicitly where it does and does not work and that it should not be abused.\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-17T10:37:01Z",
  "updatedAt": "2024-01-31T12:25:01Z",
  "closedAt": "2024-01-31T12:25:01Z",
  "mergedAt": "2024-01-31T12:25:01Z",
  "additions": 24,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "doc/transitive-references",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "95260a67006cc5dd70b7b0495d328f4c91eba873",
          "message": "Clarify the transitive dependencies document",
          "committedDate": "2024-01-17T10:34:20Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea258c77275979880c1d16409af9183a7af6e753",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Chet Husk <baronfel@users.noreply.github.com>",
          "committedDate": "2024-01-30T14:34:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\nFollowing sections will describe details of transitive dependencies accessibility for `ProjectReference`, `PackageReference` and `Reference`. To summarize the content: Projects requiring access to particular dependency (project, package or assembly) should always explicitly declare the required dependency (via the appropriate item). \n```\n",
              "createdAt": "2024-01-30T14:27:16Z",
              "path": "documentation/wiki/Controlling-Dependencies-Behavior.md",
              "diffHunk": "@@ -2,6 +2,12 @@\n \n MSBuild recognizes a [few types of references](https://learn.microsoft.com/previous-versions/visualstudio/visual-studio-2015/msbuild/common-msbuild-project-items) (here we are mainly interested in `ProjectReference`, `PackageReference`, `Reference` aka assembly reference) and offers optional mechanisms to tailor some aspects of the references workings - transitive references resolution, multitargeted references resolution, copying references to output directory.\n \n+## Access to transitive dependencies\n+\n+Following sections will describe details of transitive dependencies accessibility for `ProjectReference`, `PackageReference` and `Reference`. To summarize the content: Projects requiring access to particular dependency (project, package or assembly) should allways explicitly declare the required dependency (via the appropriate item). ",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\n`Reference` (AKA assembly reference) referenced by a project is not transitively accessible from projects referencing the said directly referencing project:\n```\n",
              "createdAt": "2024-01-30T14:27:45Z",
              "path": "documentation/wiki/Controlling-Dependencies-Behavior.md",
              "diffHunk": "@@ -101,6 +107,24 @@ public class PersonsAccessor\n **Notes:**\n    `PrivateAssets` metadatum (and it's counterparts `IncludeAssets` and `ExcludeAssets`) is applicable to `PackageReference` and controls exposure of dependencies to the consuming projects, not the current project. It is currently not possible to prevent access to package references from within directly referencing project - this is purely decision of the package itself (as it can define it's dependencies as `PrivateAssets`).\n \n+## Access to transitive assembly references\n+\n+`Reference` (AKA assemly reference) referenced by a project is not transitively accessible from projects referncing the said directly referencing project:",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}