{
  "number": 8013,
  "title": "Restore newline auto return",
  "body": "Fixes #8008\r\n\r\n### Context\r\nWith the MSBuild server, I added support for VT100, which meant we could understand colorization and such from an older command prompt, but I also added DISABLE_NEWLINE_AUTO_RETURN, which made the UI look worse.\r\n\r\n### Customer Impact\r\nCustomers using MSBuild server  and trying to print newlines (`\\n`) will see output with extra space.\r\n\r\n### Testing\r\nManually tested the change: ran the proposed repro project and saw the bug. Overwrote the MSBuild in that SDK with custom bits from this PR and retested it, and I could no longer reproduce the issue. Tried using MSBuild.exe on a random project, and the important part of the VT100 change was preserved.\r\n\r\n### Code Reviewers\r\nrokonec\r\n\r\n### Description of fix\r\nRemoved the DISABLE_NEWLINE_AUTO_RETURN argument\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-29T18:42:20Z",
  "updatedAt": "2022-10-10T14:10:28Z",
  "closedAt": "2022-10-10T14:10:27Z",
  "mergedAt": "2022-10-10T14:10:26Z",
  "additions": 2,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "remove-extra-space",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a50e3caa2c5a6bf8adfd962098082f46503e2e83",
          "message": "Remove newline auto return",
          "committedDate": "2022-09-29T18:31:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "148bc3b532149da27f4da93d887aea9488e25fce",
          "message": "Remove definition",
          "committedDate": "2022-09-29T18:41:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e8628685b7605afdd2e6bf9515a18e97e4478d45",
          "message": "Merge branch 'main' into remove-extra-space",
          "committedDate": "2022-10-06T16:44:18Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The bug mentioned an alternate solution strategy, which was \"replace the mode at the end of the build\". Did you consider and discard that? Is this a better option?",
        "createdAt": "2022-09-29T18:49:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was the one who first noticed the VT100 issue because I use cmd for most things. I typically believe the simplest solution that resolves the problem is the best solution, as it is least likely to have hidden bugs, and this simplifies the code rather than potentially leaving some issue open with a build that fails to reset the mode after some unusual sequence of events. I tested that this did not reintroduce the issue I'd seen by building something with the bootstrapped MSBuild.exe. If the problem remains resolved, and the code is simpler, I think it is the best solution.",
        "createdAt": "2022-09-29T18:55:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Looks legit. What was the intent behind disabling it originally?\r\n\r\nAs I recall, I found code that claimed to resolve the VT100 issue. I put it into MSBuild and tried testing it, and it seemed to work properly whether or not that parameter was present. Since whoever wrote the snippet I'd found online seemed to think it was important, I figured there was some case I hadn't tested where it would be useful, so I left it in.",
        "createdAt": "2022-09-29T20:57:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Does leaving `ENABLE_VIRTUAL_TERMINAL_PROCESSING` on have no cost to subsequent CLI interactions or user programs in `dotnet run`? Wouldn't it mask the need to set that in the actual application if it emits VT100 codes?",
        "createdAt": "2022-09-29T21:34:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For instance, is this behavior difference acceptable, even if we fix the newline situation?\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/193151209-ecf8a5c6-5231-44c5-a607-645f09741072.png)\r\n",
        "createdAt": "2022-09-29T22:11:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For clarity, is your concern that it converted `\\x1b[31m` into \"change the color to red\"? Honestly, I don't know why someone would want to see `\\x1b[31m`.\r\n\r\nBut cc @baronfel for a proper opinion.",
        "createdAt": "2022-09-29T22:15:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yes, that's the concern. It's possible that it's explicitly outputting that for Reasons, but I would say my concern runs the other way: if you run it with `dotnet run` and it always renders the VT100 codes instead of spewing console gibberish, you'll likely be surprised when the deployed app instead spews gibberish.",
        "createdAt": "2022-09-29T22:16:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": " Correct - @rainersigwald has the scenario nailed here. MSBuild should return the state to whatever it was before invoking MSBuild. Other applications shouldn't have to alter their behavior based on whether or not they were run after MSBuild in a `dotnet run` scenario.",
        "createdAt": "2022-09-29T22:18:33Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Ok, that's more reasonable than wanting random codes in your output. I'd suggest that's perpendicular to this change, as this change is specifically for newline and (in my opinion) should happen regardless. I can try to put something together to resolve that issue as well.",
        "createdAt": "2022-09-29T22:33:17Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}