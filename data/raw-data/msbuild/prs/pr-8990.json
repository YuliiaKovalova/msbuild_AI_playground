{
  "number": 8990,
  "title": "cleanup ErrorUtilities",
  "body": "1. Moved resource string existence check (in debug) consistently outside of the condition. This detected cases where we were using an invalid resource string, but the condition was never false. Fixed these. Note, it doesn't need to be localized message or even probably the same exception type because almost by definition, these conditions have never been true, and possibly can never be true (otherwise they'd have hit the missing resource already). Also, change method to be debug-only so as to remove the #if.\r\n\r\n2. Moved s_throwExceptions consistently inside the condition check as cleaner.\r\n\r\n3. Move exception construction consistently out of the VerifyThrowXX methods so this cold path doesn't prevent them inlining.\r\n\r\n4. Remove string formatting inside the condition in one place where string interpolation was happening.",
  "state": "MERGED",
  "createdAt": "2023-07-02T17:27:51Z",
  "updatedAt": "2023-07-13T22:23:56Z",
  "closedAt": "2023-07-13T21:16:15Z",
  "mergedAt": "2023-07-13T21:16:15Z",
  "additions": 331,
  "deletions": 554,
  "changedFiles": 56,
  "headRefName": "verifythrow",
  "isDraft": false,
  "author": {
    "login": "danmoseley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "38ae477ee5a5500da8612f4c5d7263fabf3f9c4a",
          "message": "cleanup errors",
          "committedDate": "2023-07-03T00:56:51Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96fc865484f1c5f833a2efaad2df22891d8b6739",
          "message": "remove if debug",
          "committedDate": "2023-07-03T02:24:26Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7c9b414bd0dc90630b75cb8474164a0ff59db47",
          "message": "param",
          "committedDate": "2023-07-03T02:59:29Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5364cbd0ea770fdfc9e07d9e25ad40dbacedd436",
          "message": "fix comment",
          "committedDate": "2023-07-03T03:06:51Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42da226ae395c71bb4a1e90e45571697325d9640",
          "message": "xlf",
          "committedDate": "2023-07-03T14:47:16Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a38fb42441fa03563e4639291551071f71102b28",
          "message": "feedback",
          "committedDate": "2023-07-11T17:09:46Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c3a779c468974c26ab70bc0b56967206e57b662",
          "message": "feedback",
          "committedDate": "2023-07-11T17:59:31Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c05ec8a9a534498b39e0a74f308fcdf3675f6b59",
          "message": "formatting",
          "committedDate": "2023-07-11T19:19:35Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> This would make it hard to keep the two strings in alignment, right? Is there a plan there?\r\n\r\nI can put them into Shared\\Resources\\Strings.shared.resx if you like? that is built into tasks, engine, utilities, task host, and exe. but then they are only in one file in the code.",
        "createdAt": "2023-07-07T20:33:40Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> > This would make it hard to keep the two strings in alignment, right? Is there a plan there?\r\n> \r\n> I can put them into Shared\\Resources\\Strings.shared.resx if you like? that is built into tasks, engine, utilities, task host, and exe. but then they are only in one file in the code.\r\n\r\nWorks for me! Maybe get buyoff from someone who actually works on MSBuild, though \ud83d\ude05",
        "createdAt": "2023-07-07T22:03:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "What do you work on @Forgind ... entirely in SDK?",
        "createdAt": "2023-07-07T22:36:17Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Yup!",
        "createdAt": "2023-07-07T22:37:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > > This would make it hard to keep the two strings in alignment, right? Is there a plan there?\r\n> > \r\n> > \r\n> > I can put them into Shared\\Resources\\Strings.shared.resx if you like? that is built into tasks, engine, utilities, task host, and exe. but then they are only in one file in the code.\r\n> \r\n> Works for me! Maybe get buyoff from someone who actually works on MSBuild, though \ud83d\ude05\r\n\r\nSounds good.\r\n\r\nI suppose this string would not change often (especially to extent of adding/removing fmting params) - but I definitely wouldn't complain to future-proof it by moving to single resx",
        "createdAt": "2023-07-10T13:14:53Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "feedback hopefully addressed",
        "createdAt": "2023-07-11T18:03:15Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "(I removed some low value comments and formatting for todays less narrow monitors..)",
        "createdAt": "2023-07-11T20:51:07Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "is this ready to merge?",
        "createdAt": "2023-07-13T01:04:15Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Note that interpolated string in this case a is a perf antipattern. It formats the string even if the condition is false. That is exactly why there are VerifyThrow overloads that take args.",
              "createdAt": "2023-07-02T17:28:41Z",
              "path": "src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs",
              "diffHunk": "@@ -85,9 +85,9 @@ public static T FactoryForDeserializingTypeWithName<T>(this ITranslator translat\n                 {\n                     ConstructorInfo constructor = null;\n                     constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, Type.EmptyTypes, null);\n-                    ErrorUtilities.VerifyThrowInvalidOperation(\n+                    ErrorUtilities.VerifyThrow(\n                         constructor != null,\n-                        $\"{typeName} must have a private parameterless constructor\");",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this is thrown out of the MSBuild intrinsic task, which is in the engine side. copy/pasted the resource from utilities over.",
              "createdAt": "2023-07-02T17:29:08Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     likely because of a programming error in the logger). When a logger dies, we cannot proceed with the build, and we throw a\n     special exception to abort the build.</comment>\n   </data>\n+  <data name=\"LoggingBeforeTaskInitialization\" UESanitized=\"false\" Visibility=\"Public\">",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "This would make it hard to keep the two strings in alignment, right? Is there a plan there?",
              "createdAt": "2023-07-05T19:06:45Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     likely because of a programming error in the logger). When a logger dies, we cannot proceed with the build, and we throw a\n     special exception to abort the build.</comment>\n   </data>\n+  <data name=\"LoggingBeforeTaskInitialization\" UESanitized=\"false\" Visibility=\"Public\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It sounded like you did this for perf reasons, but it does change the type of exception thrown if it fails. Would it be equivalent to put MethodImpl(AggressiveInlining) here instead?",
              "createdAt": "2023-07-05T18:57:54Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1322,9 +1322,9 @@ private int GetNextBuildRequestId()\n         /// <param name=\"config\">The configuration to be mapped.</param>\n         private void IssueConfigurationRequest(BuildRequestConfiguration config)\n         {\n-            ErrorUtilities.VerifyThrowArgument(config.WasGeneratedByNode, \"InvalidConfigurationId\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> it does change the type of exception thrown if it fails\r\n\r\nI'm not sure it can ever have thrown ArgumentException. Before this change it presumably threw MissingManifestResourceException. (My guess is that it's never thrown at all but I guess we could introduce a bug that would trigger it)",
              "createdAt": "2023-07-07T20:36:03Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1322,9 +1322,9 @@ private int GetNextBuildRequestId()\n         /// <param name=\"config\">The configuration to be mapped.</param>\n         private void IssueConfigurationRequest(BuildRequestConfiguration config)\n         {\n-            ErrorUtilities.VerifyThrowArgument(config.WasGeneratedByNode, \"InvalidConfigurationId\");",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Oh, because InvalidConfigurationId doesn't exist? I'm kinda wondering if we should have an explicit part of CI that prevents you from checking in a use of a localized string without actually adding that string...",
              "createdAt": "2023-07-07T22:03:09Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1322,9 +1322,9 @@ private int GetNextBuildRequestId()\n         /// <param name=\"config\">The configuration to be mapped.</param>\n         private void IssueConfigurationRequest(BuildRequestConfiguration config)\n         {\n-            ErrorUtilities.VerifyThrowArgument(config.WasGeneratedByNode, \"InvalidConfigurationId\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@Forgind exactly. the usual way to handle this is to use strongly typed resource strings. but that would not solve the problem here because the VerifyThrow things (that throw InternalErrorException) use unlocalized strings. So they'd still get raw strings and the two could still get mixed up. Hence my suggestion in https://github.com/dotnet/msbuild/issues/8991",
              "createdAt": "2023-07-11T16:59:15Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1322,9 +1322,9 @@ private int GetNextBuildRequestId()\n         /// <param name=\"config\">The configuration to be mapped.</param>\n         private void IssueConfigurationRequest(BuildRequestConfiguration config)\n         {\n-            ErrorUtilities.VerifyThrowArgument(config.WasGeneratedByNode, \"InvalidConfigurationId\");",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did this work before? Did it just never fire?",
              "createdAt": "2023-07-05T19:04:58Z",
              "path": "src/Build/Construction/ProjectElement.cs",
              "diffHunk": "@@ -351,7 +351,7 @@ public ProjectElement Clone()\n         public virtual void CopyFrom(ProjectElement element)\n         {\n             ErrorUtilities.VerifyThrowArgumentNull(element, nameof(element));\n-            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), nameof(element));\n+            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), \"CannotCopyFromElementOfThatType\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I guess if anyone triggered it they got MissingManifestResourceException but never opened a bug.",
              "createdAt": "2023-07-07T20:37:24Z",
              "path": "src/Build/Construction/ProjectElement.cs",
              "diffHunk": "@@ -351,7 +351,7 @@ public ProjectElement Clone()\n         public virtual void CopyFrom(ProjectElement element)\n         {\n             ErrorUtilities.VerifyThrowArgumentNull(element, nameof(element));\n-            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), nameof(element));\n+            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), \"CannotCopyFromElementOfThatType\");",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald Can we safely get rid of s_throwExceptions ?\r\nI believe there is no use for it any longer. It currently blocks some \"nullable enable\" refactorings as it does not recognize `VerifyThrowArgumentNull` as always throwing on given conditions.",
              "createdAt": "2023-07-10T14:05:31Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -736,12 +740,19 @@ internal static void VerifyThrowArgumentLength<T>(IReadOnlyCollection<T> paramet\n         /// <param name=\"parameterName\"></param>\n         internal static void VerifyThrowArgumentLengthIfNotNull<T>(IReadOnlyCollection<T> parameter, string parameterName)\n         {\n-            if (parameter?.Count == 0 && s_throwExceptions)\n+            if (parameter?.Count == 0)\n             {\n-                throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"Shared.ParameterCannotHaveZeroLength\", parameterName));\n+                ThrowArgumentLength(parameterName);\n             }\n         }\n #endif\n+        private static void ThrowArgumentLength(string parameterName)\n+        {\n+            if (s_throwExceptions)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I don't know of a current use for it. My understanding is it was created as a super-duper-emergency escape hatch for customers to work around MSBuild bugs that cause exceptions but where the exception is actually benign. But that's super rare, I haven't used it in 10+ years, and we can ship fixes pretty quickly these days. File an issue and let's run it by the team but I'm ok with trying to remove it.",
              "createdAt": "2023-07-10T19:22:26Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -736,12 +740,19 @@ internal static void VerifyThrowArgumentLength<T>(IReadOnlyCollection<T> paramet\n         /// <param name=\"parameterName\"></param>\n         internal static void VerifyThrowArgumentLengthIfNotNull<T>(IReadOnlyCollection<T> parameter, string parameterName)\n         {\n-            if (parameter?.Count == 0 && s_throwExceptions)\n+            if (parameter?.Count == 0)\n             {\n-                throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"Shared.ParameterCannotHaveZeroLength\", parameterName));\n+                ThrowArgumentLength(parameterName);\n             }\n         }\n #endif\n+        private static void ThrowArgumentLength(string parameterName)\n+        {\n+            if (s_throwExceptions)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think it may date from my era? If so, do we recall ever needing to use it? If not then I think it would be safe to remove.",
              "createdAt": "2023-07-10T19:31:54Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -736,12 +740,19 @@ internal static void VerifyThrowArgumentLength<T>(IReadOnlyCollection<T> paramet\n         /// <param name=\"parameterName\"></param>\n         internal static void VerifyThrowArgumentLengthIfNotNull<T>(IReadOnlyCollection<T> parameter, string parameterName)\n         {\n-            if (parameter?.Count == 0 && s_throwExceptions)\n+            if (parameter?.Count == 0)\n             {\n-                throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"Shared.ParameterCannotHaveZeroLength\", parameterName));\n+                ThrowArgumentLength(parameterName);\n             }\n         }\n #endif\n+        private static void ThrowArgumentLength(string parameterName)\n+        {\n+            if (s_throwExceptions)",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could/should this string be passed the type names?",
              "createdAt": "2023-07-10T19:14:25Z",
              "path": "src/Build/Construction/ProjectElementContainer.cs",
              "diffHunk": "@@ -331,7 +331,7 @@ public void RemoveAllChildren()\n         public virtual void DeepCopyFrom(ProjectElementContainer element)\n         {\n             ErrorUtilities.VerifyThrowArgumentNull(element, nameof(element));\n-            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), nameof(element));\n+            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), \"CannotCopyFromElementOfThatType\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "if you want? it's probably fairly obscure and to do this I'd have to break out a new VerifyThrowArgumentEquivalentTypes(type, type) because we don't want to create the type name strings unless the condition is false.",
              "createdAt": "2023-07-11T18:03:08Z",
              "path": "src/Build/Construction/ProjectElementContainer.cs",
              "diffHunk": "@@ -331,7 +331,7 @@ public void RemoveAllChildren()\n         public virtual void DeepCopyFrom(ProjectElementContainer element)\n         {\n             ErrorUtilities.VerifyThrowArgumentNull(element, nameof(element));\n-            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), nameof(element));\n+            ErrorUtilities.VerifyThrowArgument(GetType().IsEquivalentTo(element.GetType()), \"CannotCopyFromElementOfThatType\");",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[not for this PR] We should teach this thing about `CallerArgumentExpression`.",
              "createdAt": "2023-07-10T19:34:52Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -788,7 +799,16 @@ internal static void VerifyThrowArgumentNull(object parameter, string parameterN\n         /// <remarks>This method is thread-safe.</remarks>\n         internal static void VerifyThrowArgumentNull(object parameter, string parameterName, string resourceName)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}