{
  "number": 6663,
  "title": "Stop checking .ni.dll/exe on Core",
  "body": "We believe these were remnants of old pre-crossgen file naming patterns that haven't been used in a very long time.\r\n\r\nRemoving the checks to avoid filesystem activity on files that almost certainly will not exist.\r\n\r\nFixes #5042.",
  "state": "MERGED",
  "createdAt": "2021-07-12T14:55:53Z",
  "updatedAt": "2021-07-28T13:51:08Z",
  "closedAt": "2021-07-28T13:51:08Z",
  "mergedAt": "2021-07-28T13:51:07Z",
  "additions": 16,
  "deletions": 25,
  "changedFiles": 2,
  "headRefName": "no-ni-on-core",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d26cfbe43bc976f72d2aa0927bddb4cbf8744809",
          "message": "Stop checking .ni.dll/exe on Core\n\nWe believe these were remnants of old pre-crossgen file naming patterns that haven't been used in a very long time.\n\nRemoving the checks to avoid filesystem activity on files that almost certainly will not exist.\n\nFixes #5042.",
          "committedDate": "2021-07-12T14:55:11Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab9e654681f473496539164bfae451d386740be8",
          "message": "Only look for .dll assemblies on Core\n\n.NET Core can sometimes use .exe extensions but in that case\nthe file is not a managed assembly any more and thus can't\nbe loaded by our plugin loader.",
          "committedDate": "2021-07-27T19:27:08Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I believe that crossgen still creates .ni.dll files. At least I remember getting them when I invoked the tool a few months back. @vitek-karas is it a valid scenario to crossgen an assembly, delete the .dll, and assembly-load the .ni.dll?",
        "createdAt": "2021-07-12T15:11:19Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I guess the relevant question here is \"is there a supported plugin scenario where we should be explicitly loading a `.ni.dll`, as opposed to letting the runtime handle it?\r\n\r\nI don't see any `.ni.dll` files in the various .NET SDKs from 3.1.100 to 6.0.100-preview.4 I have handy locally.",
        "createdAt": "2021-07-12T17:16:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I personally haven't seen `.ni.dll` in a while - but I'm no crossgen expert. @trylek should have a better idea is `.ni.dll` is still a thing. The runtime loader can load these just fine but as far as I know the current design is that:\r\n* Native images for a single assembly are always bundled into the assembly itself (result is one file, typically with just `.dll` extension)\r\n* Composite images (native image for multiple assemblies together) is a separate file (not sure about the extension actually) to which all the managed assemblies have a reference - so runtime will know what to look for.",
        "createdAt": "2021-07-12T18:17:53Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "For .ni.dll, Crossgen2 doesn't automatically force this naming scheme as early in Crossgen2 development @jkotas explicitly suggested we should drop the \".ni\" naming scheme for end customers and only maintain it for internal testing. In addition to our various test build scripts that still expect the .ni bit it turns out that the DiaSymReader PDB processing library contains hard-coded bits checking for the .ni extension, @davidwrighton had to provide special hacks to make it work in Crossgen2 / R2RDump context. The biggest thing I'm aware of right now is the naming overlap between the IL PDB (these days probably a modern managed PDB right out of @tmat's factory) and the native (Crossgen2) legacy Windows-style PDB used to propagate method addresses to PerfView. I'm not yet aware of any known plan to overcome this dichotomy but I guess we should figure one out for .NET 7.",
        "createdAt": "2021-07-19T23:42:01Z",
        "author": {
          "login": "trylek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: The .exe suffix does not really exist in .NET Core world either. Apps are managed .dlls in .NET Core too.",
              "createdAt": "2021-07-20T00:03:24Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "jkotas"
              }
            },
            {
              "body": "Hmm, I believe that for managed exes we do generate the wrapper exe files running dll under the system-wide dotnet host, doesn't msbuild need to take them into account? Just curious, I'm not really familiar with msbuild source code, I just took a few quick peeks in the past when I was double-checking some details.",
              "createdAt": "2021-07-20T21:51:16Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "trylek"
              }
            },
            {
              "body": "The wrapper exe files are not managed assemblies. These extensions are only used for probe for managed assemblies only (it is obvious from the local context in which this static is used).",
              "createdAt": "2021-07-21T11:05:56Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "jkotas"
              }
            },
            {
              "body": "I see, thanks for explaining!",
              "createdAt": "2021-07-21T11:25:12Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "trylek"
              }
            },
            {
              "body": "Thank you, not an urgent fix so I'll leave it up to @rainersigwald to address this when he's back.",
              "createdAt": "2021-07-21T11:36:10Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yeah, I think removing it entirely is a good idea, so I did.",
              "createdAt": "2021-07-27T19:31:44Z",
              "path": "src/Shared/MSBuildLoadContext.cs",
              "diffHunk": "@@ -29,7 +29,7 @@ internal class MSBuildLoadContext : AssemblyLoadContext\n                 \"Microsoft.Build.Utilities.Core\",\n             }.ToImmutableHashSet();\n \n-        internal static readonly string[] Extensions = new[] { \"ni.dll\", \"ni.exe\", \"dll\", \"exe\" };\n+        internal static readonly string[] Extensions = new[] { \"dll\", \"exe\" };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}