{
  "number": 6312,
  "title": "Fail Restore when an SDK is unresolved or entry target does not exist",
  "body": "Fixes #6281\r\n\r\n### Context\r\n`BuildRequestDataFlags` and `ProjectLoadSettings` are set during `/t:restore` in a best effort to run the Restore target in hopes that it will correct the potentially bad state that a project is in.  Visual Studio also sets `ProjectLoadSettings.IgnoreMissingImports` so that an unresolved MSBuild project SDK doesn't prevent loading of a bad project so it can give the user an error and let them edit the file.\r\n\r\nHowever, this means that from the command-line an unresolved SDK doesn't fail `/t:restore`.  This is because the missing \"import\" is ignored and non-existent targets are ignored so the build succeeds.\r\n\r\n### Changes Made\r\nIntroduced two new `BuildRequestDataFlags`:\r\n\r\n* `SkipNonexistentNonTopLevelTargets` - A new flag to be used in this context to tell the build to ignore non-existent targets but not top level ones.  In this case we're specifying `/t:restore` so if the Restore target doesn't exist, that should be an error.  Only other targets that are trying to run are ignored (like InitialTargets, Before/AfterTargets, etc).\r\n* `FailOnUnresolvedSdk` - We still need to ignore missing imports and I can't introduce a new flag to split the implementation now since Visual Studio sets `ProjectLoadSettings.IgnoreMissingImports` as a way to ignore unresolved SDKs.  So this flag tells the evaluator to fail on an unresolved SDK but to continue ignoring other missing imports.\r\n\r\n### Testing\r\nAdded three new unit tests:\r\n* Restore fails when an SDK can't be resolved\r\n* Restore fails if a top-level target like Restore doesn't exist\r\n* Restore succeeds if a non-top-level target doesn't exist",
  "state": "MERGED",
  "createdAt": "2021-03-31T16:41:35Z",
  "updatedAt": "2021-04-15T15:48:37Z",
  "closedAt": "2021-04-08T16:09:41Z",
  "mergedAt": "2021-04-08T16:09:41Z",
  "additions": 179,
  "deletions": 14,
  "changedFiles": 10,
  "headRefName": "fix-restore-success",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dd7831c03cc4d668fdd432d65a75087cf88a388e",
          "message": "Correctly fail a restore if an SDK can't be resolved or a top level target like Restore doesn't exist\n\nFixes #6281",
          "committedDate": "2021-03-31T20:29:18Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a23e416012950a8354a490cef64b218e74ceaa6",
          "message": "Fix condition where initial targets were skipped because they were non entry targets",
          "committedDate": "2021-04-01T21:27:36Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind \r\n> Seems like there was no easy way to pass the entrypoint target(s) through to here?\r\n\r\nSort of, in this context `entry.Request.Targets` represents the top level target(s) to be executed based on the command-line based build:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/dd7831c03cc4d668fdd432d65a75087cf88a388e/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L152\r\n\r\nWhich is why I'm checking if the target that doesn't exist is in that list, this tells us if a top level target isn't there which should fail the build in this context.  Other targets like InitialTargets and Before/AfterTargets to be built are [passed in](https://github.com/dotnet/msbuild/blob/dd7831c03cc4d668fdd432d65a75087cf88a388e/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L100) as `targetNames` by [the RequestBuilder](https://github.com/dotnet/msbuild/blob/073022eb44eb1664eb1c35055b4f5ed377f09706/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1157) which handles figuring that out.\r\n\r\nSo the original `entry.Request.Targets` represents the \"entry\" targets or \"top level\" targets.",
        "createdAt": "2021-04-01T16:48:21Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Oh, I think I misunderstood that part, then. So did you add the new BuildRequestDataFlag in case that part fails? Looking more closely at it, it seems to log a message if (a particular target isn't in the list and the SkipNonexistentTopLevelTargets flag is set) or (the target is missing, and another flag is set). Otherwise, it adds it as if it's present. How is the error fitting in? Also, is that right? I would imagine something more like:\r\n`!targetExists && ((SkipNonexistentTargets && !entry.Request.Targets.Contains(targetName)) || (SkipNonexistentTopLevelTargets && entry.Request.Targets.Contains(targetName)))`\r\nOtherwise, it's skipping when you have a nonentry target but set SkipNonexistentTopLevelTargets.\r\n\r\nAlso, as a nit, [HasFlag is slow](https://stackoverflow.com/questions/7368652/what-is-it-that-makes-enum-hasflag-so-slow). Not that big a deal, but I thought I should mention it.",
        "createdAt": "2021-04-01T19:20:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I've updated the PR to address the issue you pointed out and added a unit test for it as well.  I'm going to leave `HasFlag` in for now since its adding to an existing one, but I do think we should ban it in the repo.",
        "createdAt": "2021-04-01T21:33:23Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-04-05T19:36:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-04-05T19:36:34Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}