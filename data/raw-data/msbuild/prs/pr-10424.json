{
  "number": 10424,
  "title": "Add Build Submission Started event",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/10145\r\n\r\n### Context\r\nIt is currently not possible to check for global variables during build execution. To have access to that data it needs to be passed on events to the processing nodes. None of the events we had previously were good matches to pass along this information, so it was decided to create one for build submission started, as this point in the build we have all properties loaded with the correct value, but its not too late to make use of them.\r\n\r\n### Changes Made\r\n- Added a new `BuildSubmissionStartedEventArgs` based on `BuildStatusEventArgs` and added it to the event handlers.\r\n- A copy of the enum `BuildRequestDataFlags` was added to `Microsoft.Build.Framework`.\r\n\r\n### Testing\r\nTo be added.\r\n\r\n### Notes\r\nBlocker for https://github.com/dotnet/msbuild/issues/9747\r\n",
  "state": "MERGED",
  "createdAt": "2024-07-22T14:15:07Z",
  "updatedAt": "2024-10-22T12:07:11Z",
  "closedAt": "2024-08-07T09:13:13Z",
  "mergedAt": "2024-08-07T09:13:13Z",
  "additions": 439,
  "deletions": 87,
  "changedFiles": 17,
  "headRefName": "10145",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "838949ddc4751edeae9e2c12546bb9ec36e91d26",
          "message": "Event draft",
          "committedDate": "2024-07-16T20:06:45Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9af7466716f42b4552a6de659ea3255d1169ee24",
          "message": "Copy enum to Framework",
          "committedDate": "2024-07-17T13:36:16Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b197f82aff38708eeb55375f865a126b1e37a14b",
          "message": "Event base",
          "committedDate": "2024-07-17T18:54:32Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a8fea793c54bbdf3f68470619cfa5bc34bd2423",
          "message": "Added event to handlers",
          "committedDate": "2024-07-22T12:25:58Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4faf5bc43390a25c2bfb2987a3974056a57aa8ad",
          "message": "Fix ambiguity from enum copy",
          "committedDate": "2024-07-22T12:57:15Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8de36e7074f5f87db36f7222bdef499675393d7e",
          "message": "Added event logging",
          "committedDate": "2024-07-22T14:07:00Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "040e90bf43d3010d8f9ed73e3c3c2c1cf748e891",
          "message": "Solve merge conflicts",
          "committedDate": "2024-07-22T14:09:31Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5e6c296de1e7bdafcc243915d45f299213f2daab",
          "message": "Changed from copy to type forwarding",
          "committedDate": "2024-07-23T20:32:23Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "89ea87f55ddc169a8476b27ebe38f719920ec7d4",
          "message": "Addressed some PR comments",
          "committedDate": "2024-07-23T21:05:44Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad259e820b07d08b82b34e16506746152a1f1c9a",
          "message": "Added event writers",
          "committedDate": "2024-07-25T13:58:23Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b61ba0e922ec4217bb166531acb0fd9588190701",
          "message": "Progress on binary reader / writer",
          "committedDate": "2024-07-25T15:34:59Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9f77a3984438a974444414f24d41da1fb1faf77",
          "message": "Added serialization tests",
          "committedDate": "2024-07-30T09:52:36Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eef5b049eeee8f4f26501fdee12a71eb4fada759",
          "message": " Fixed reader / writer tests",
          "committedDate": "2024-07-30T15:08:25Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5c4b0dc9ba23e36466bc781c26ef61212ab5489",
          "message": "Changed nullability",
          "committedDate": "2024-07-31T09:56:28Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "afaf96883172682175e99817cac2d97e315dcfb7",
          "message": "Fixed test failures",
          "committedDate": "2024-07-31T13:17:31Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d22a7929753c039d1d017b5957c97f4af07bad8d",
          "message": "Merge branch 'main' into 10145",
          "committedDate": "2024-07-31T13:55:58Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e8258b883ebe3ae90838fe0959b4bba8a8460a90",
          "message": " Fix build",
          "committedDate": "2024-07-31T14:42:56Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94452a5ab6bf58bff606a92269162cfb200c92d8",
          "message": "Another try at fixing tests",
          "committedDate": "2024-08-02T10:22:53Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7f46efe82ccb4e4a5d931245e17b5f617921ee9a",
          "message": "Merge branch 'main' into 10145",
          "committedDate": "2024-08-02T10:23:16Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd026390887ab81c73d4867fc6fb293577ea1a3f",
          "message": "Fix nullbility issue",
          "committedDate": "2024-08-02T11:51:33Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd2fbdaf8f3241b05b4ecb6579ceb911f6bcbb4f",
          "message": "Chaged mux logger test",
          "committedDate": "2024-08-07T06:17:00Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d3dee2511e60a89e83b92e6d83ac4ac1aba856b",
          "message": "Adress PR comments",
          "committedDate": "2024-08-07T06:43:39Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bff56d687ca9fe58aeab570353f0bb28c9912e19",
          "message": "Merge branch 'main' into 10145",
          "committedDate": "2024-08-07T06:45:54Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need this specific event? Could we use `AnyEventHandler` instead?",
              "createdAt": "2024-07-22T14:29:18Z",
              "path": "src/Framework/IEventSource.cs",
              "diffHunk": "@@ -27,6 +27,11 @@ namespace Microsoft.Build.Framework\n     /// </summary>\n     public delegate void CustomBuildEventHandler(object sender, CustomBuildEventArgs e);\n \n+    /// <summary>\n+    /// Type of handler for BuildSubmissionStartedEvent events\n+    /// </summary>\n+    public delegate void BuildSubmissionStartedEventHandler(object sender, BuildSubmissionStartedEventArgs e);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The nullability on these seems bad to me, feels like they should all be guaranteed to be present?",
              "createdAt": "2024-07-22T15:41:08Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }\n+\n+        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }\n+\n+        public ICollection<string>? TargetNames { get; protected set; }\n+\n+        public BuildRequestDataFlags? Flags { get; protected set; }\n+\n+        public int? SubmissionId { get; protected set; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "+1\r\nNone of the source members on `BuildSubmissionBase` are marked nullable. They all are guaranteed to have a meaningfull values.",
              "createdAt": "2024-07-23T09:59:46Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }\n+\n+        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }\n+\n+        public ICollection<string>? TargetNames { get; protected set; }\n+\n+        public BuildRequestDataFlags? Flags { get; protected set; }\n+\n+        public int? SubmissionId { get; protected set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I added the nullable because of this function: https://github.com/dotnet/msbuild/blob/8b03742aafd18a26a5d03cd045e4d24963886503/src/Shared/LogMessagePacketBase.cs#L608 Where all the events are initialized with default or null constructors. I'm honestly not really sure in what part of the logging this falls on, but if there is a way around it I can make the properties non nullable.",
              "createdAt": "2024-07-23T21:41:24Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }\n+\n+        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }\n+\n+        public ICollection<string>? TargetNames { get; protected set; }\n+\n+        public BuildRequestDataFlags? Flags { get; protected set; }\n+\n+        public int? SubmissionId { get; protected set; }",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`[Serializable]` is not needed for new events (or old ones for that matter, we should go back and clean 'em up right @JanKrivanek?)",
              "createdAt": "2024-07-22T17:09:26Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Absolutely.\r\nThey'll eventually became obsolete and we'll be forced to do so anyways",
              "createdAt": "2024-07-23T09:26:43Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could we [type forward](https://learn.microsoft.com/dotnet/standard/assembly/type-forwarding) instead of having two copies of this?",
              "createdAt": "2024-07-22T17:12:23Z",
              "path": "src/Build/BackEnd/BuildManager/BuildRequestData.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ namespace Microsoft.Build.Execution\n {\n     /// <summary>\n     /// Flags providing additional control over the build request\n+    /// This enum has a copt on Microsoft.Build.Framework. Any modifications must be mirrored on the copy.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Nice trick. I wasn't aware - so I advised copying.\r\n\r\nTo specify more - we'll need to move the type to Microsoft.Build.Framework assembly (keep the namespace and naming) and use the `TypeForwardedToAttribute` in the Microsoft.Build assembly. (This is because the Microsoft.Build.Framework can be used standalone - so it needs to own the type)",
              "createdAt": "2024-07-23T09:34:42Z",
              "path": "src/Build/BackEnd/BuildManager/BuildRequestData.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ namespace Microsoft.Build.Execution\n {\n     /// <summary>\n     /// Flags providing additional control over the build request\n+    /// This enum has a copt on Microsoft.Build.Framework. Any modifications must be mirrored on the copy.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\\*cough\\*",
              "createdAt": "2024-07-22T17:15:55Z",
              "path": "src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs",
              "diffHunk": "@@ -0,0 +1,15 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.UnitTests\n+{\n+    internal class BuildSubmissionStartedEventAgs_Tests\n+    {",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Lets remove the TODO",
              "createdAt": "2024-07-23T09:37:54Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1376,9 +1377,15 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)\n             where TResultData : BuildResultBase\n         {\n             // TODO: here we should add BuildRequestStarted https://github.com/dotnet/msbuild/issues/10145",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The context needs to be attached to the submissionStartedEvent.\r\n\r\n```suggestion\r\n            // For the current submission we only know the SubmissionId and that it happened on scheduler node - all other BuildEventContext dimensions are unknown now.\r\n            BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, nodeId: 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\r\n            submissionStartedEvent.BuildEventContext = buildEventContext;\r\n```",
              "createdAt": "2024-07-23T09:44:14Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1376,9 +1377,15 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)\n             where TResultData : BuildResultBase\n         {\n             // TODO: here we should add BuildRequestStarted https://github.com/dotnet/msbuild/issues/10145\n-            // BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-            // ((IBuildComponentHost)this).LoggingService.LogBuildEvent()\n-\n+            BuildSubmissionStartedEventArgs submissionStartedEvent = new(\n+                submission.BuildRequestDataBase.GlobalPropertiesLookup,\n+                submission.BuildRequestDataBase.EntryProjectsFullPath,\n+                submission.BuildRequestDataBase.TargetNames,\n+                (Framework.BuildRequestDataFlags)submission.BuildRequestDataBase.Flags,\n+                submission.BuildResultBase!.SubmissionId);\n+\n+            BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```\r\n\r\nBase parameterless ctor is called implicitly",
              "createdAt": "2024-07-23T09:47:16Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }\n+\n+        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }\n+\n+        public ICollection<string>? TargetNames { get; protected set; }\n+\n+        public BuildRequestDataFlags? Flags { get; protected set; }\n+\n+        public int? SubmissionId { get; protected set; }\n+\n+        /// <summary>\n+        /// Default constructor\n+        /// </summary>\n+        protected BuildSubmissionStartedEventArgs()\n+            : base()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\r\n```\r\n\r\nWe do not want anyone to custom derive the BuildEventArgs classes.",
              "createdAt": "2024-07-23T09:48:21Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this constructor ever used?\r\n\r\nIt is protected and class is not subclassed (and shouldn't be) - so protected members should not be needed.",
              "createdAt": "2024-07-23T09:49:14Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; protected set; }\n+\n+        public IEnumerable<string>? EntryProjectsFullPath { get; protected set; }\n+\n+        public ICollection<string>? TargetNames { get; protected set; }\n+\n+        public BuildRequestDataFlags? Flags { get; protected set; }\n+\n+        public int? SubmissionId { get; protected set; }\n+\n+        /// <summary>\n+        /// Default constructor\n+        /// </summary>\n+        protected BuildSubmissionStartedEventArgs()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Node to node de/serialization of this class needs to be handled. You need to add `internal override void WriteToStream(BinaryWriter writer)` and `internal override void CreateFromStream(BinaryReader reader, int version)` methods. Plus the de/serialization should be tested.\r\n\r\n\r\nAlso BinaryLogger de/serialization needs to be added. Look for the last changes that have done similar: https://github.com/dotnet/msbuild/commits/main/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs or ping @surayya-MS for a details on her recent addition to binlog format.",
              "createdAt": "2024-07-23T09:55:43Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [Serializable]\n+    public class BuildSubmissionStartedEventArgs : BuildStatusEventArgs",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                submission.SubmissionId);\r\n```\r\n\r\nThe result will not be populated during submission - so this would reliably crash.",
              "createdAt": "2024-07-23T09:58:19Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1376,9 +1377,15 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)\n             where TResultData : BuildResultBase\n         {\n             // TODO: here we should add BuildRequestStarted https://github.com/dotnet/msbuild/issues/10145\n-            // BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-            // ((IBuildComponentHost)this).LoggingService.LogBuildEvent()\n-\n+            BuildSubmissionStartedEventArgs submissionStartedEvent = new(\n+                submission.BuildRequestDataBase.GlobalPropertiesLookup,\n+                submission.BuildRequestDataBase.EntryProjectsFullPath,\n+                submission.BuildRequestDataBase.TargetNames,\n+                (Framework.BuildRequestDataFlags)submission.BuildRequestDataBase.Flags,\n+                submission.BuildResultBase!.SubmissionId);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's move this to AssemblyInfo.cs - https://github.com/dotnet/msbuild/blob/main/src/Build/AssemblyInfo.cs",
              "createdAt": "2024-07-24T11:33:59Z",
              "path": "src/Build/BackEnd/BuildManager/BuildRequestData.cs",
              "diffHunk": "@@ -6,89 +6,16 @@\n using System.Collections.Generic;\n using System.Collections.Immutable;\n using System.Linq;\n+using System.Runtime.CompilerServices;\n using Microsoft.Build.Collections;\n using Microsoft.Build.Evaluation;\n using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n using Microsoft.Build.Shared;\n \n+[assembly: TypeForwardedTo(typeof(Microsoft.Build.Execution.BuildRequestDataFlags))]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this required?",
              "createdAt": "2024-08-05T11:29:26Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -8,6 +8,7 @@\n using System.Globalization;\n using System.IO;\n using System.Linq;\n+using System.Net.NetworkInformation;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "No, VS sometimes adds imports automatically for typos.",
              "createdAt": "2024-08-07T06:18:14Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -8,6 +8,7 @@\n using System.Globalization;\n using System.IO;\n using System.Linq;\n+using System.Net.NetworkInformation;",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The `_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion ||` should not be needed - as this event is newly introduced - it won't be written in older version of logs",
              "createdAt": "2024-08-05T11:31:58Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -617,6 +620,35 @@ private BuildEventArgs ReadBuildFinishedEventArgs()\n             return e;\n         }\n \n+        private BuildEventArgs ReadBuildSubmissionStartedEventArgs()\n+        {\n+            var fields = ReadBuildEventArgsFields();\n+\n+            IDictionary<string, string>? globalProperties = null;\n+            // See ReadProjectEvaluationFinishedEventArgs for details on why we always store global properties in newer version.\n+            if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion ||",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The log version needs to be incremented when changing the binary logger contract.\r\n\r\nSee e.g. this change: https://github.com/dotnet/msbuild/pull/9746/files#diff-0864a6f2e10a87d935fbf19d81370f534e67f33931642dec1f30023b108e2cdc (and other changes in that PR) for referene on adding the new Event type",
              "createdAt": "2024-08-05T11:37:23Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ public enum BinaryLogRecordKind\n         EndOfFile = 0,\n         BuildStarted,\n         BuildFinished,\n+        BuildSubmissionStarted,",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. - to be on a safe side let's add the enum at the end - as the code is converting to enum from bytes being read from the file - old version files then might be misinterpreted",
              "createdAt": "2024-08-05T11:42:05Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ public enum BinaryLogRecordKind\n         EndOfFile = 0,\n         BuildStarted,\n         BuildFinished,\n+        BuildSubmissionStarted,",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Once this is done, you should shortly after update the log view, by updating the BinaryLogRecordKind.cs, BinaryLogger.cs, BuildEventArgsReader.cs and BuildEventArgsWriter.cs in the viewer repo (https://github.com/KirillOsenkov/MSBuildStructuredLog) to be in sync with the changes here.\r\n\r\nSample PR: https://github.com/KirillOsenkov/MSBuildStructuredLog/pull/653",
              "createdAt": "2024-08-05T11:44:35Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ public enum BinaryLogRecordKind\n         EndOfFile = 0,\n         BuildStarted,\n         BuildFinished,\n+        BuildSubmissionStarted,",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I will mark this comment as resolved to keep the PR going. But I'll open a PR to the viewer repo at a later date.",
              "createdAt": "2024-08-07T06:44:42Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ public enum BinaryLogRecordKind\n         EndOfFile = 0,\n         BuildStarted,\n         BuildFinished,\n+        BuildSubmissionStarted,",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                if (key != null)\r\n```\r\n\r\nnull value is valid based on the type declaration (Dictionary<string, string?>)",
              "createdAt": "2024-08-05T11:46:58Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,121 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        /// <summary>\n+        /// Constructor with default values.\n+        /// </summary>\n+        public BuildSubmissionStartedEventArgs()\n+        {\n+            GlobalProperties = new Dictionary<string, string?>();\n+            EntryProjectsFullPath = Enumerable.Empty<string>();\n+            TargetNames = Enumerable.Empty<string>();\n+            Flags = BuildRequestDataFlags.None;\n+            SubmissionId = 0;\n+        }\n+\n+        public BuildSubmissionStartedEventArgs(\n+            IReadOnlyDictionary<string, string?> globalProperties,\n+            IEnumerable<string> entryProjectsFullPath,\n+            IEnumerable<string> targetNames,\n+            BuildRequestDataFlags flags,\n+            int submissionId)\n+            : base(\"\", null, null, DateTime.UtcNow)\n+        {\n+            GlobalProperties = globalProperties;\n+            EntryProjectsFullPath = entryProjectsFullPath;\n+            TargetNames = targetNames;\n+            Flags = flags;\n+            SubmissionId = submissionId;\n+        }\n+\n+        public IReadOnlyDictionary<string, string?> GlobalProperties { get; set; }\n+\n+        public IEnumerable<string> EntryProjectsFullPath { get; set; }\n+\n+        public IEnumerable<string> TargetNames { get; set; }\n+\n+        public BuildRequestDataFlags Flags { get; set; }\n+\n+        public int SubmissionId { get; set; }\n+\n+        internal override void WriteToStream(BinaryWriter writer)\n+        {\n+            base.WriteToStream(writer);\n+\n+            writer.Write(GlobalProperties.Count);\n+            foreach (var entry in GlobalProperties)\n+            {\n+                writer.Write((string)entry.Key);\n+                writer.Write((string?)entry.Value ?? \"\");\n+            }\n+\n+            writer.Write(EntryProjectsFullPath.Count());\n+            foreach(var entry in EntryProjectsFullPath)\n+            {\n+                writer.Write((string)entry);\n+            }\n+\n+            writer.Write(TargetNames.Count());\n+            foreach (var entry in TargetNames)\n+            {\n+                writer.Write((string)entry);\n+            }\n+\n+            writer.Write((int)Flags);\n+            writer.Write((int)SubmissionId);\n+        }\n+\n+        internal override void CreateFromStream(BinaryReader reader, int version)\n+        {\n+            base.CreateFromStream(reader, version);\n+\n+            int numberOfProperties = reader.ReadInt32();\n+            Dictionary<string, string?> globalProperties = new Dictionary<string, string?>(numberOfProperties);\n+            for (int i = 0; i < numberOfProperties; i++)\n+            {\n+                string key = reader.ReadString();\n+                string value = reader.ReadString();\n+\n+                if (key != null && value != null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                writer.WriteOptionalString(entry.Value);\r\n```\r\n\r\nIf we support nulls - let's not change them to empty strings\r\n\r\nBe carefull that then on reading side you'll need to use ReadOptionalString - to handle reading null properly",
              "createdAt": "2024-08-05T11:48:41Z",
              "path": "src/Framework/BuildSubmissionStartedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,121 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs\n+    {\n+        /// <summary>\n+        /// Constructor with default values.\n+        /// </summary>\n+        public BuildSubmissionStartedEventArgs()\n+        {\n+            GlobalProperties = new Dictionary<string, string?>();\n+            EntryProjectsFullPath = Enumerable.Empty<string>();\n+            TargetNames = Enumerable.Empty<string>();\n+            Flags = BuildRequestDataFlags.None;\n+            SubmissionId = 0;\n+        }\n+\n+        public BuildSubmissionStartedEventArgs(\n+            IReadOnlyDictionary<string, string?> globalProperties,\n+            IEnumerable<string> entryProjectsFullPath,\n+            IEnumerable<string> targetNames,\n+            BuildRequestDataFlags flags,\n+            int submissionId)\n+            : base(\"\", null, null, DateTime.UtcNow)\n+        {\n+            GlobalProperties = globalProperties;\n+            EntryProjectsFullPath = entryProjectsFullPath;\n+            TargetNames = targetNames;\n+            Flags = flags;\n+            SubmissionId = submissionId;\n+        }\n+\n+        public IReadOnlyDictionary<string, string?> GlobalProperties { get; set; }\n+\n+        public IEnumerable<string> EntryProjectsFullPath { get; set; }\n+\n+        public IEnumerable<string> TargetNames { get; set; }\n+\n+        public BuildRequestDataFlags Flags { get; set; }\n+\n+        public int SubmissionId { get; set; }\n+\n+        internal override void WriteToStream(BinaryWriter writer)\n+        {\n+            base.WriteToStream(writer);\n+\n+            writer.Write(GlobalProperties.Count);\n+            foreach (var entry in GlobalProperties)\n+            {\n+                writer.Write((string)entry.Key);\n+                writer.Write((string?)entry.Value ?? \"\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}