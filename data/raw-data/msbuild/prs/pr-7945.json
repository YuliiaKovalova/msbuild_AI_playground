{
  "number": 7945,
  "title": "Fix processor count on Windows for multiple processor groups",
  "body": "Fixes #7943\r\n\r\n### Context\r\nMSBuild detects the wrong processor count on Windows when debugging processor groups\r\n\r\n### Changes Made\r\nReplaces GetLogicalProcessorInformationEx with GetActiveProcessorCount and removes an incorrect check for >32 processors which is incompatible with Windows boot parameters for debugging processor groups.\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-05T22:44:53Z",
  "updatedAt": "2022-10-07T14:59:14Z",
  "closedAt": "2022-10-07T14:59:14Z",
  "mergedAt": "2022-10-07T14:59:14Z",
  "additions": 2,
  "deletions": 8,
  "changedFiles": 1,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "dmex"
  },
  "milestone": {
    "title": "VS 17.5"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e303b4133ff075eabe4b90d11114aa23fe7053e9",
          "message": "Fix processor count on Windows for multiple processor groups",
          "committedDate": "2022-09-05T22:39:33Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88659dadae363a2a6ccdd7772f3a5217d8b57b17",
          "message": "Add error checking",
          "committedDate": "2022-09-05T23:09:09Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16d4838710b225ef6b0cb1399f04239fd90cef3c",
          "message": "Revert \"Add error checking\"\n\nThis reverts commit 88659dadae363a2a6ccdd7772f3a5217d8b57b17.",
          "committedDate": "2022-09-20T02:52:11Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8f72c871798f122214fd2850438094213a29f11",
          "message": "Revert \"Fix processor count on Windows for multiple processor groups\"\n\nThis reverts commit e303b4133ff075eabe4b90d11114aa23fe7053e9.",
          "committedDate": "2022-09-20T02:52:22Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05bd0b79abacda1686ad4a780be63b67822dd2b0",
          "message": "Remove check for numberOfCpus >= 32",
          "committedDate": "2022-09-20T02:53:53Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "199324d70bcd2c104d14f9a4bec16b66283176f1",
          "message": "Update src/Framework/NativeMethods.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-09-27T16:15:56Z",
          "author": {
            "name": "dmex",
            "email": "dmex04@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This certainly looks a lot simpler! However, the previous solution was developed in consultation with devs on the Windows team, so we'll want to consult with them again. There may be some subtle behaviors that are different, or (it sure looks like) we just missed this.",
        "createdAt": "2022-09-06T14:13:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Could you verify that the count is correct on 32bit and 64bit msbuild?",
        "createdAt": "2022-09-07T21:55:24Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> Could you verify that the count is correct on 32bit and 64bit msbuild?\r\n\r\n@yuehuang010 \r\n\r\nThe count is correct for both 32bit and 64bit (32bit will only return a maximum of 32 due to limitations of the architecture).\r\n\r\nYou can test this per the documentation here:\r\nhttps://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/boot-parameters-to-test-drivers-for-multiple-processor-group-support\r\n\r\n1) Execute `bcdedit.exe /set groupsize 2`\r\n2) Reboot\r\n3) GetSystemInfo() will return 2 processors and GetActiveProcessorCount returns 16 (both 32bit and 64bit)\r\n\r\nRemember to restore the original groupsize using `bcdedit /deletevalue groupsize`\r\n\r\n> the previous solution was developed in consultation with devs on the Windows team\r\n\r\n@rainersigwald \r\n\r\nAre you able to go into details or elaborate on this solution?\r\n\r\nI couldn't find anything in the source or any comments/PRs about the current implementation. MSBuild doesn't assign child processes or threads onto specific processors or specific groups and the current implementation basically just spawns X processes (nodes) for X processors - this PR doesn't make any changes to that design?\r\n\r\nI did find some other problems completely unrelated to this PR... Querying the affinity/group/ideal processor for 16 MSBuild processes returned results where 7 MSBuild processes were running on the same processor: \r\n1,1,1,1,1,1,1,3,3,7,9,12,13,14,15,16\r\n\r\nWindows, Linux and others essentially assign processes to processors using a round-robin type algorithm. MSBuild isn't the only program on the machine creating processes/threads and as a consequence of the current MSBuild design not having configured the processor/group; the processes (nodes) spawned by MSBuild are basically only running 1-3 processors on average instead of all 16 processors.\r\n\r\nThe lack of any processor/group assignment is also a major problem with Intel's 12th generation processors that include hybrid P-cores/E-cores because MSBuild ends up executing on the very slow/low power E-core processors instead of the fast P-core processors.\r\n\r\n",
        "createdAt": "2022-09-12T16:54:42Z",
        "author": {
          "login": "dmex"
        }
      },
      {
        "body": "Stumbled upon this change in .NET that was supposed to fix `Environment.ProcessorCount`: https://github.com/dotnet/runtime/pull/68639",
        "createdAt": "2022-09-12T20:58:05Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> The count is correct for both 32bit and 64bit (32bit will only return a maximum of 32 due to limitations of the architecture).\r\n\r\nIf this is the case, this is not an acceptable approach--the previous implementation was designed explicitly to avoid that limitation. It's not that unusual to run >32 32-bit MSBuild.exe processes on a big machine.",
        "createdAt": "2022-09-12T21:06:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The count is correct for both 32bit and 64bit (32bit will only return a maximum of 32 due to limitations of the architecture).\r\n\r\nI do think this point is dulled as most people will use 64bit msbuild.  For completeness, the OS can be 64bit running a 32bit MSBuild.  If the API caps at 32, then it wouldn't fully utilize the machine.",
        "createdAt": "2022-09-12T21:07:40Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> Are you able to go into details or elaborate on this solution?\r\n\r\nThe solution is what was checked in with #5625; comments there starting with https://github.com/dotnet/msbuild/pull/5625#issuecomment-686797187 describe the various problems we ran into.",
        "createdAt": "2022-09-12T21:08:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I do think this point is dulled as most people will use 64bit msbuild.\r\n\r\nThis is less true than I wish it was--many build processes never moved to 64-bit, and often you can get away with it indefinitely, especially if tools moved to 64-bit transparently.",
        "createdAt": "2022-09-12T21:09:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Nit. I used System.Environment.GetEnvironmentVariables(), then envs[\"NUMBER_OF_PROCESSORS\"].  This returned the correct value in all of my cases.",
        "createdAt": "2022-09-12T21:14:20Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> If this is the case, this is not an acceptable approach\r\n\r\nI can revert the changes back to `RelationProcessorCore`? The GetActiveProcessorCount changes are optional but the check for `(numberOfCpus >= 32)` needs to be removed.\r\n\r\n> the previous implementation was designed explicitly to avoid that limitation. \r\n\r\nThere are two severe issues with that implementation:\r\n1) MSBuild is executing on E-Core processors instead of P-Core processors.\r\n2) MSBuild does not assign nodes (child processes) to specific groups/processors.\r\n\r\nBoth of these issues are introducing a significant performance issues and preventing MSBuild from utilizing the available hardware.\r\n\r\n> It's not that unusual to run >32 32-bit MSBuild.exe processes on a big machine.\r\n\r\nThe benefits of using RelationProcessorCore in this case are highly suspect because Windows doesn't automatically spread MSBuild evenly across all processors and processor groups unless you're manually assigning specific groups/processors (at least prior to Windows 11) - which MSBuild doesn't implement.\r\n\r\nIf you have 128 processors then yeah MSBuild is creating 128 processes... However, MSBuild never gets assigned to all processors and groups because other programs and services are created/destroyed and were assigned those processors/groups by Windows instead of MSBuild. Just opening Edge/Chrome (or even notepad) is enough to push MSBuild onto the wrong processor/group and introduce performance issues.\r\n\r\nWhat MSBuild should be doing:\r\n64 processes are executing on group 0 using processors 0-64\r\n64 processes are executing on group 1 using processors 64-128\r\n\r\nWhat's actually happening at the moment (at least every XYZ number of builds):\r\n90 processes are executing on group 0 \r\n38 processes are executing on group 1\r\n\r\n\r\n26 processes were incorrectly assigned the same processor group leaving 26 processors from the other group completely underutilized. \r\n\r\nThe best way to fix this would be passing the specific processor/group to the node via commandline and then call SetThreadGroupAffinity from the child otherwise whatever value you're getting from RelationProcessorCore is almost completely useless and is causing performance issues from creating way too many processes on the one group instead of across multiple groups.\r\n\r\n> This is less true than I wish it was--many build processes never moved to 64-bit, and often you can get away with it indefinitely, especially if tools moved to 64-bit transparently.\r\n\r\nVisual Studio 2022 discontinued 32-bit kernels and drivers. 32-bit Windows was also discontinued a few years ago and can't be downloaded. The last version of MSBuild that can be used to compile 32-bit in our case is `16.11.2.50704`\r\n\r\nThe large majority still needing 32-bit are going to be using VS2019 almost indefinitely because of the changes with VS2022. Is it still the case 32bit must be the default or can 64-bit MSBuild be the default going forward?",
        "createdAt": "2022-09-19T18:26:16Z",
        "author": {
          "login": "dmex"
        }
      },
      {
        "body": "> * MSBuild is executing on E-Core processors instead of P-Core processors.\r\n\r\nMy understanding is that the standard guidance for multicore/multiprocess systems is to completely disregard core type and let the OS handle pulling hot processes to better cores, and that in an \"I can completely saturate all cores\" situation, it's best to run on all types of cores. Do you know otherwise?\r\n\r\n> 2\\. MSBuild does not assign nodes (child processes) to specific groups/processors.\r\n\r\nThis is by design. The OS can handle this, and it is very likely to be optimal to allow MSBuild.exe processes to wander across cores/groups, since the nature of MSBuild work is I/O intensive and involves a lot of blocking waits on other tools (like compilers).\r\n\r\n> 26 processes were incorrectly assigned the same processor group leaving 26 processors from the other group completely underutilized.\r\n\r\nDo you see concrete performance implications of this? As mentioned, I would not expect this to be a concrete problem.\r\n\r\n> Is it still the case 32bit must be the default or can 64-bit MSBuild be the default going forward?\r\n\r\nIt is already the case (as of VS 2022) that 64-bit MSBuild is the default on `PATH` and the only way to build using the Visual Studio UI, but Azure DevOps build definitions generally hardcode the x86 implementation (unless overridden) and thus many \"official builds\" are still on 32-bit MSBuild. Those builds can and often do run tasks that aren't run in developer-desktop builds, so they may not \"just work\" with a switch.\r\n\r\nNote that OS architecture isn't relevant here: we're talking about 32-bit MSBuild running on 64-bit Windows.",
        "createdAt": "2022-09-19T18:38:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> completely disregard core type and let the OS handle pulling hot processes to better cores, and that in an \"I can completely saturate all cores\" situation, it's best to run on all types of cores. Do you know otherwise?\r\n\r\nThis guidance was correct until Intel introduced hybrid processors \ud83d\ude0b \r\n\r\nYes, you should completely ignore the type and run on all processors unless there are any E/P cores in which case you'll need explicit assignment. For example the Intel thread director likely won't be able to execute MSBuild on all processors because it doesn't have any windows/focus/user input: https://www.youtube.com/watch?v=hdi9mPWInPA&t=71s\r\n\r\nSwap \"rendering\" with \"MSBuild\" and you have similar issues:\r\n* https://www.agner.org/forum/viewtopic.php?f=1&t=79\r\n* https://www.reddit.com/r/XMG_gg/comments/vlqn6d/psa_rendering_tasks_are_moved_to_ecores_when/\r\n* https://www.vegascreativesoftware.info/us/forum/rendering-2x-faster-when-restricting-to-p-cores-for-alder-lake--137188/\r\n\r\nMSBuild would need to be using SetThreadAffinityMask or SetThreadGroupAffinity otherwise it won't be able to use all the available cores on hybrid?\r\n\r\n> let the OS handle pulling hot processes to better cores\r\n\r\n12th gen i9 specs show E-cores @ 600-700mhz maximum compared to P-cores @ 5.10ghz (turbo). The Intel thread director overrides the OS scheduling and it's not going to move MSBuild to those cores unless there's a windows/focus/user input.\r\n\r\n> This is by design. The OS can handle this, and it is very likely to be optimal to allow MSBuild.exe processes to wander across cores/groups\r\n\r\nOnly Windows 11 supports moving processes/threads onto different processor groups. Windows 7, 8 and 10 don't have this support and MSBuild should be using SetThreadGroupAffinity and specifying the processor group.\r\n\r\n> Do you see concrete performance implications of this? As mentioned, I would not expect this to be a concrete problem.\r\n\r\nI'm not sure. Some builds are going to be worse than others but most of the time it's barely noticeable. The threads to cores radio should be 1:1 affinity and look something like:\r\n![image](https://user-images.githubusercontent.com/1306177/192581301-390afb0e-d738-4610-afa3-2ec2ebe54230.png)\r\n\r\nAt the moment the affinity ends up looking like this but the Windows scheduler is moving threads to available cores so it's not too noticeable:\r\n![image](https://user-images.githubusercontent.com/1306177/192581441-53c6970d-ff4b-407c-a2d9-093959889ffb.png)\r\n\r\nThe one exception here is Windows 7/8/10 are not able to move threads onto different processor groups so if a majority of threads end up on group 0 then those threads won't be moved to available free cores on group 1 - you might only hit this case 1 out of 100 builds.\r\n\r\n",
        "createdAt": "2022-09-27T16:35:26Z",
        "author": {
          "login": "dmex"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "No `SetLastError = true`?",
              "createdAt": "2022-09-05T23:02:33Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -895,9 +822,11 @@ private static SystemInformationData SystemInformation\n     [SupportedOSPlatform(\"windows\")]\n     internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);\n \n-    [DllImport(\"kernel32.dll\", SetLastError = true)]\n+    const ushort ALL_PROCESSOR_GROUPS = 0xFFFF;\n+\n+    [DllImport(\"kernel32.dll\")]",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "No because when I disassembled the function it only sets 2 error codes for either passing a value > maximum groups (doesn't apply in our case because we're using ALL_PROCESSOR_GROUPS) and out-of-memory (not possible with paging).\r\n\r\nI've never seen the function fail in production but just to be sure I partially reverted the changes so when it returns 0 for failure we fallback to Environment.ProcessorCount \ud83d\udc4d \r\n",
              "createdAt": "2022-09-05T23:31:54Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -895,9 +822,11 @@ private static SystemInformationData SystemInformation\n     [SupportedOSPlatform(\"windows\")]\n     internal static extern void GetNativeSystemInfo(ref SYSTEM_INFO lpSystemInfo);\n \n-    [DllImport(\"kernel32.dll\", SetLastError = true)]\n+    const ushort ALL_PROCESSOR_GROUPS = 0xFFFF;\n+\n+    [DllImport(\"kernel32.dll\")]",
              "author": {
                "login": "dmex"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        // .NET on Windows returns a core count limited to the current NUMA node\r\n        //     https://github.com/dotnet/runtime/issues/29686\r\n        // so always double-check it.\r\n```",
              "createdAt": "2022-09-20T14:43:43Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -509,13 +509,7 @@ public static int GetLogicalCoreCount()\n         // .NET Core on Windows returns a core count limited to the current NUMA node\n         //     https://github.com/dotnet/runtime/issues/29686\n         // so always double-check it.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}