{
  "number": 5704,
  "title": "Serialize both AssemblyNameExtension and SystemState, then opt into their use for all on-disk RAR caching",
  "body": "Please merge. I worked hard on the commits. :)\r\n\r\nThis is based off of #5514. That needs to go in first.",
  "state": "CLOSED",
  "createdAt": "2020-09-02T21:47:28Z",
  "updatedAt": "2021-01-25T23:28:57Z",
  "closedAt": "2021-01-25T23:28:57Z",
  "mergedAt": null,
  "additions": 797,
  "deletions": 151,
  "changedFiles": 27,
  "headRefName": "json-serialization",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a79f3080ea40840edf1a6563447a8121fa45000f",
          "message": "First stab at caching more RAR info\n\nThis gives RAR the ability to save off a modified state file and load it for later use.\n\nStill to do:\n1) Verify that the precomputed cache read in is real.\n2) Change logging such that it will log messages instead of errors or warnings if there are problems with deserializing the precomputed cache\n3) Comments at relevant points\n4) Switch serialization mode to another form (json?)\n5) Validation + performance tests\n6) Have SDK opt in",
          "committedDate": "2020-07-14T23:03:06Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d7355985217b3de3049d383a9d829173bb3d390",
          "message": "PR comments pt. 1",
          "committedDate": "2020-07-21T17:20:42Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "036c5a38dd759b46dc8cb52e9fa244f737a6acf1",
          "message": "Resolve first three bullet points",
          "committedDate": "2020-07-21T20:50:05Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b3b613b728bb62f2b6ca1e97c267229f5f81078",
          "message": "Next steps",
          "committedDate": "2020-08-03T20:28:42Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6160d48cdf18dc7ad407588204fe1f475631f7d6",
          "message": "revert to BinaryFormatter",
          "committedDate": "2020-08-03T23:01:42Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b95494d0351a91a2ed82f567c1d73cf751862e7",
          "message": "Serialize mvid",
          "committedDate": "2020-08-04T20:18:06Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43195f4f368c443643f6a9757a7d025ed19e6a92",
          "message": "Design change",
          "committedDate": "2020-08-10T21:46:13Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9045d3d68f4990896ce4c9ff774b113b9164d1ce",
          "message": "Serialize AssemblyNameExtension\n\nIt was previously serializable via BinaryFormatter. This makes it serializable via System.Text.Json's JsonConverter.",
          "committedDate": "2020-09-03T00:00:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ecf24de89e7a54f51ee3b6abccb9e79556bdad05",
          "message": "Serialize SystemState\n\nAdd support for serializing SystemState using System.Text.Json rather than the older BinaryFormatter.",
          "committedDate": "2020-09-03T00:00:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b25d16087c3d0046ce40df7b2393f26417d76414",
          "message": "Opt into new serialization behavior for all serialization rather than just when serializing and deserializing the precomputed cache",
          "committedDate": "2020-09-03T00:00:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9fa92fbafc3973efa4eaf9b554e1116da3dce914",
          "message": "Merge branch 'master' into json-serialization",
          "committedDate": "2020-09-03T00:03:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "560806632da291d575d7251256a1f96cbb853d2b",
          "message": "PR comments\n\nI have not yet measured how long it takes to read a MVID vs. reading and parsing its references, nor have I made unit tests.",
          "committedDate": "2020-09-04T01:12:29Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ccb508da7ec32a57f3e49ee232ddca480fd73a95",
          "message": "Make DeserializeCache take a generic StateFileBase",
          "committedDate": "2020-09-08T21:13:52Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "354de87d4348988be672611b780f71fd4ac64d07",
          "message": "Use FileSystems.Default.FileExists",
          "committedDate": "2020-09-08T21:14:11Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd76e0b73da602b5c1e0ba72cc652044d0bd02a0",
          "message": "Convert instanceLocalFileStateCache to a dictionary",
          "committedDate": "2020-09-08T21:18:39Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b1a7695f1291079bbebe6420e67815eea3754bdc",
          "message": "Fix generic",
          "committedDate": "2020-09-22T21:52:19Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d71f2a6552bfb85aaa7fd3695e0ca632d73f74af",
          "message": "Merge branch 'master' of https://github.com/dotnet/msbuild into rar-cache",
          "committedDate": "2020-09-22T21:53:14Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbe102851c5dbda71ef6bf3663d61231a538ccd0",
          "message": "Build",
          "committedDate": "2020-09-22T22:28:09Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d790150b5b0d1a12a3f92894173540846a9e47b8",
          "message": "Fix bad changes",
          "committedDate": "2020-09-23T17:22:33Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a759006ef6b192171673a2bf9bc2253b25acc8a6",
          "message": "Added tests 1",
          "committedDate": "2020-10-02T22:41:39Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "767f1ccbddd9c72dba9c0ed8959a3c3c2073bac4",
          "message": "Finish tests\n\n...although they don't work yet",
          "committedDate": "2020-10-06T22:42:39Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "412c21b6339c2609f49f06ce7c8e5e6f1813940e",
          "message": "Create delegates to mock system calls",
          "committedDate": "2020-10-08T23:54:57Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0450dd2b8f6a79139775b5dbe57274fff6b73ce4",
          "message": "Merge branch 'rar-cache' of https://github.com/forgind/msbuild into json-serialization",
          "committedDate": "2020-10-09T00:04:01Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f930f438685f685b022ef2cbd3a9486a3dc7748",
          "message": "Small fixups",
          "committedDate": "2020-10-09T00:21:30Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58217f657497623ad60db5c1a62c4df2ea53a084",
          "message": "Make constructor internal",
          "committedDate": "2020-10-09T00:25:20Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2043c3f5bc02a1514db81c892e9a55d2f75f9598",
          "message": "PR feedback",
          "committedDate": "2020-11-12T02:19:27Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "853fd38f0c14b0fcfeb7e760d5d7e502fad31cb4",
          "message": "Avoid using overly new feature",
          "committedDate": "2020-11-12T15:57:42Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bda6b3720ee66f0012d2dd05da8b3c7fc3aea69e",
          "message": "Real ANE",
          "committedDate": "2020-11-12T16:17:56Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2c0f4298c7eaa2af902e3a513e204d12fa58315",
          "message": "Merge https://github.com/dotnet/msbuild into rar-cache",
          "committedDate": "2020-11-12T16:18:21Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d92e5dadec4f96860bc34ef2bf8050e10ab454cb",
          "message": "Merge branch 'rar-cache' of https://github.com/forgind/msbuild into json-serialization",
          "committedDate": "2020-11-12T16:21:27Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37a758301d9b1e36541be8d353bf50b2c1548448",
          "message": "fixed test",
          "committedDate": "2020-11-12T17:10:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5577222b07804e02046e174a4ed5c860e5d3b6b",
          "message": "Update versions\n\nThe version of Arcade MSBuild currently uses uses Roslyn version 3.3.1. This updates that, but it should be removed when we've updated to a more modern version of arcade.",
          "committedDate": "2020-11-23T19:57:58Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a6851f9ae73009cbbfb123eb566e74e448433c3",
          "message": "Merge branch 'update-versions' of https://github.com/forgind/msbuild into json-serialization",
          "committedDate": "2020-11-23T19:59:03Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59aaab14e8a42ec0825b3f5941c1da774e7423a7",
          "message": "Remove MVID check",
          "committedDate": "2020-12-04T16:24:52Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df2d5c91cbed00235629911cde5ba6fab4121ca8",
          "message": "Merge branch 'rar-cache' of https://github.com/forgind/msbuild into json-serialization",
          "committedDate": "2020-12-04T16:27:05Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is json really faster than binary serialization? I thought the whole point of this feature is to maximize perf. Can you please do some measurements on real SystemState data to compare binary serialization vs json, so we're aware what the impact is?",
              "createdAt": "2020-09-04T16:21:40Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -540,16 +676,93 @@ out fileState.frameworkName\n \n             dependencies = fileState.dependencies;\n             scatterFiles = fileState.scatterFiles;\n-            frameworkName = fileState.frameworkName;\n+            frameworkName = fileState.FrameworkNameAttribute;\n         }\n \n         /// <summary>\n-        /// Cached implementation of GetDirectories.\n+        /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.\n         /// </summary>\n-        /// <param name=\"path\"></param>\n-        /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)\n+        {\n+            SystemState retVal = new SystemState();\n+            retVal.SetGetLastWriteTime(getLastWriteTime);\n+            retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n+            retVal.isDirty = stateFiles.Length > 0;\n+            HashSet<string> assembliesFound = new HashSet<string>();\n+\n+            foreach (string stateFile in stateFiles)\n+            {\n+                // Verify that it's a real stateFile; log message but do not error if not\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+                deserializeOptions.Converters.Add(new SystemState.Converter());\n+                SystemState sysBase = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(stateFile), deserializeOptions);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Most of the reason is that BinaryFormatter is unsafe, and we're supposed to move all of MSBuild off of it. I should measure perf at some point, but I haven't gotten around to it yet.",
              "createdAt": "2020-09-04T16:35:40Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -540,16 +676,93 @@ out fileState.frameworkName\n \n             dependencies = fileState.dependencies;\n             scatterFiles = fileState.scatterFiles;\n-            frameworkName = fileState.frameworkName;\n+            frameworkName = fileState.FrameworkNameAttribute;\n         }\n \n         /// <summary>\n-        /// Cached implementation of GetDirectories.\n+        /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.\n         /// </summary>\n-        /// <param name=\"path\"></param>\n-        /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)\n+        {\n+            SystemState retVal = new SystemState();\n+            retVal.SetGetLastWriteTime(getLastWriteTime);\n+            retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n+            retVal.isDirty = stateFiles.Length > 0;\n+            HashSet<string> assembliesFound = new HashSet<string>();\n+\n+            foreach (string stateFile in stateFiles)\n+            {\n+                // Verify that it's a real stateFile; log message but do not error if not\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+                deserializeOptions.Converters.Add(new SystemState.Converter());\n+                SystemState sysBase = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(stateFile), deserializeOptions);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "If that's the case, we should be replacing it with another binary serialization library that's safe and as fast or faster. I think that decision should be separate from this PR. Have it use the existing serialization for now, and after we decide what to move to we can move everything to the new thing.",
              "createdAt": "2020-09-04T18:50:18Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -540,16 +676,93 @@ out fileState.frameworkName\n \n             dependencies = fileState.dependencies;\n             scatterFiles = fileState.scatterFiles;\n-            frameworkName = fileState.frameworkName;\n+            frameworkName = fileState.FrameworkNameAttribute;\n         }\n \n         /// <summary>\n-        /// Cached implementation of GetDirectories.\n+        /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.\n         /// </summary>\n-        /// <param name=\"path\"></param>\n-        /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)\n+        {\n+            SystemState retVal = new SystemState();\n+            retVal.SetGetLastWriteTime(getLastWriteTime);\n+            retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n+            retVal.isDirty = stateFiles.Length > 0;\n+            HashSet<string> assembliesFound = new HashSet<string>();\n+\n+            foreach (string stateFile in stateFiles)\n+            {\n+                // Verify that it's a real stateFile; log message but do not error if not\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+                deserializeOptions.Converters.Add(new SystemState.Converter());\n+                SystemState sysBase = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(stateFile), deserializeOptions);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I just did a janky test comparing the time of:\r\n```\r\n[Fact]\r\n        public void SpeedTest()\r\n        {\r\n            string data = File.ReadAllText(@\"<path>\");\r\n            for (int i = 0; i < 1000; i++)\r\n            {\r\n                using (FileStream s = new FileStream(@\"<path>\", FileMode.Open))\r\n                {\r\n                    var formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();\r\n                    SystemState t = formatter.Deserialize(s) as SystemState;\r\n                }\r\n            }\r\n        }\r\n```\r\nminus the time of\r\n```\r\n[Fact]\r\n        public void SpeedTest()\r\n        {\r\n            for (int i = 0; i < 1000; i++)\r\n            {\r\n                string data = File.ReadAllText(@\"<path>\");\r\n            }\r\n        }\r\n```\r\n\r\nto the time of\r\n\r\n```\r\n[Fact]\r\n        public void TestSpeed()\r\n        {\r\n            string data = File.ReadAllText(@\"<path>\");\r\n            var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\r\n            deserializeOptions.Converters.Add(new SystemState.Converter());\r\n            for (int i = 0; i < 1000; i++)\r\n                JsonSerializer.Deserialize<SystemState>(data, deserializeOptions);\r\n        }\r\n```\r\n\r\nFor the json serializer, I used a statefile created by combining the state files cached when building all of MSBuild, whereas I used just the state file cache for Microsoft.Build.Engine.UnitTests for BinaryFormatter, so it should be smaller. Still, the two runs for the binary formatter took 2 seconds (unfortunately not more precise) and 435 ms, whereas json took 996 ms, suggesting that for this test at least, json was slightly faster.",
              "createdAt": "2020-11-07T00:37:01Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -540,16 +676,93 @@ out fileState.frameworkName\n \n             dependencies = fileState.dependencies;\n             scatterFiles = fileState.scatterFiles;\n-            frameworkName = fileState.frameworkName;\n+            frameworkName = fileState.FrameworkNameAttribute;\n         }\n \n         /// <summary>\n-        /// Cached implementation of GetDirectories.\n+        /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.\n         /// </summary>\n-        /// <param name=\"path\"></param>\n-        /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)\n+        {\n+            SystemState retVal = new SystemState();\n+            retVal.SetGetLastWriteTime(getLastWriteTime);\n+            retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n+            retVal.isDirty = stateFiles.Length > 0;\n+            HashSet<string> assembliesFound = new HashSet<string>();\n+\n+            foreach (string stateFile in stateFiles)\n+            {\n+                // Verify that it's a real stateFile; log message but do not error if not\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+                deserializeOptions.Converters.Add(new SystemState.Converter());\n+                SystemState sysBase = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(stateFile), deserializeOptions);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not hide the JSON format implementation detail under SystemState.<Serialize|Deserialize>Cache",
              "createdAt": "2020-11-12T02:30:20Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1855,27 +1857,46 @@ private void LogConflict(Reference reference, string fusionName)\n \n         #region StateFile\n         /// <summary>\n-        /// Reads the state file (if present) into the cache.\n+        /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.\n         /// </summary>\n-        private void ReadStateFile()\n+        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid = null, Func<string, bool> fileExists = null)\n         {\n-            _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));\n+            var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+            deserializeOptions.Converters.Add(new SystemState.Converter());\n+            try\n+            {\n+                _cache = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(_stateFile), deserializeOptions);\n+            }\n+            catch (Exception)\n+            {\n+                // log message\n+            }\n \n-            // Construct the cache if necessary.\n             if (_cache == null)\n             {\n-                _cache = new SystemState();\n+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo, calculateMvid, fileExists);\n+            }\n+            else\n+            {\n+                _cache.SetGetLastWriteTime(getLastWriteTime);\n+                _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n             }\n         }\n \n         /// <summary>\n-        /// Write out the state file if a state name was supplied and the cache is dirty.\n+        /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.\n         /// </summary>\n-        private void WriteStateFile()\n+        internal void WriteStateFile(Func<string, Guid> calculateMvid = null)\n         {\n-            if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            {\n+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log, calculateMvid);\n+            }\n+            else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n             {\n-                _cache.SerializeCache(_stateFile, Log);\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I don't implement JsonSerializer directly, unfortunately. As I recall, that's what determines how the reader/writer determine what counts as an interesting token. I just implement the API they provide with specifics, and they do the serializing.",
              "createdAt": "2020-11-12T02:44:13Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1855,27 +1857,46 @@ private void LogConflict(Reference reference, string fusionName)\n \n         #region StateFile\n         /// <summary>\n-        /// Reads the state file (if present) into the cache.\n+        /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.\n         /// </summary>\n-        private void ReadStateFile()\n+        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid = null, Func<string, bool> fileExists = null)\n         {\n-            _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));\n+            var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };\n+            deserializeOptions.Converters.Add(new SystemState.Converter());\n+            try\n+            {\n+                _cache = JsonSerializer.Deserialize<SystemState>(File.ReadAllText(_stateFile), deserializeOptions);\n+            }\n+            catch (Exception)\n+            {\n+                // log message\n+            }\n \n-            // Construct the cache if necessary.\n             if (_cache == null)\n             {\n-                _cache = new SystemState();\n+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo, calculateMvid, fileExists);\n+            }\n+            else\n+            {\n+                _cache.SetGetLastWriteTime(getLastWriteTime);\n+                _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n             }\n         }\n \n         /// <summary>\n-        /// Write out the state file if a state name was supplied and the cache is dirty.\n+        /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.\n         /// </summary>\n-        private void WriteStateFile()\n+        internal void WriteStateFile(Func<string, Guid> calculateMvid = null)\n         {\n-            if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            {\n+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log, calculateMvid);\n+            }\n+            else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n             {\n-                _cache.SerializeCache(_stateFile, Log);\n+                var deserializeOptions = new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping };",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sanity check: This is sufficient data to hit the Converter from `AssemblyNameExtension` right?",
              "createdAt": "2020-11-12T02:46:55Z",
              "path": "src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs",
              "diffHunk": "@@ -0,0 +1,104 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.Utilities;\n+using Shouldly;\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    public class RARPrecomputedCache_Tests\n+    {\n+        private Dictionary<string, Guid> guidStore = new Dictionary<string, Guid>();\n+\n+        private Guid calculateMvid(string path)\n+        {\n+            if (!guidStore.ContainsKey(path))\n+            {\n+                guidStore.Add(path, Guid.NewGuid());\n+            }\n+            return guidStore[path];\n+        }\n+\n+        [Fact]\n+        public void TestPrecomputedCacheOutput()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFile standardCache = env.CreateFile(\".cache\");\n+                ResolveAssemblyReference t = new ResolveAssemblyReference();\n+                t._cache = new SystemState();\n+                t._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {\n+                    { Path.Combine(standardCache.Path, \"assembly1\"), new SystemState.FileState(DateTime.Now) },\n+                    { Path.Combine(standardCache.Path, \"assembly2\"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension(\"hi\") } } };\n+                t._cache.IsDirty = true;\n+                t.StateFile = standardCache.Path;\n+                t.WriteStateFile(calculateMvid);\n+                int standardLen = File.ReadAllText(standardCache.Path).Length;\n+                File.Delete(standardCache.Path);\n+                standardLen.ShouldBeGreaterThan(0);\n+\n+                string precomputedPath = standardCache.Path + \".cache\";\n+                t._cache.IsDirty = true;\n+                t.AssemblyInformationCacheOutputPath = precomputedPath;\n+                t.WriteStateFile(calculateMvid);\n+                File.Exists(standardCache.Path).ShouldBeFalse();\n+                int preLen = File.ReadAllText(precomputedPath).Length;\n+                preLen.ShouldBeGreaterThan(0);\n+                preLen.ShouldNotBe(standardLen);\n+            }\n+        }\n+\n+        [Fact]\n+        public void TestPreComputedCacheInputAndOutput()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create()) {\n+                TransientTestFile standardCache = env.CreateFile(\".cache\");\n+                ResolveAssemblyReference t = new ResolveAssemblyReference();\n+                t._cache = new SystemState();\n+                t._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {\n+                    { Path.Combine(standardCache.Path, \"assembly1\"), new SystemState.FileState(DateTime.Now) },\n+                    { Path.Combine(standardCache.Path, \"assembly2\"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension(\"hi\") } } };\n+                t.StateFile = standardCache.Path;\n+                t._cache.IsDirty = true;\n+                t.WriteStateFile(calculateMvid);\n+\n+                string dllName = Path.Combine(Path.GetDirectoryName(standardCache.Path), \"randomFolder\", \"dll.dll\");\n+                t._cache.instanceLocalFileStateCache.Add(dllName,\n+                    new SystemState.FileState(DateTime.Now) {",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}