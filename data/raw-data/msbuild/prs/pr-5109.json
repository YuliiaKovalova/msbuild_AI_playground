{
  "number": 5109,
  "title": "Prevent duplicate targets Fixes #5071",
  "body": "Duplicate targets break the build; this prevents MSBuild's default targets from being added if they already exist.\r\n\r\nFixes #5071 ",
  "state": "MERGED",
  "createdAt": "2020-02-05T18:09:57Z",
  "updatedAt": "2021-07-25T17:17:25Z",
  "closedAt": "2020-02-12T23:34:13Z",
  "mergedAt": "2020-02-12T23:34:13Z",
  "additions": 30,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "duplicate-build-target",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0c362a4a6718715e2e873f75e1db44e30832a72c",
          "message": "Prevent duplicate targets\n\nDuplicate targets break the build; this prevents MSBuild's default targets from being added if they already exist.",
          "committedDate": "2020-02-05T18:08:25Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb82bc8216051c467850de04fe24e42026a02167",
          "message": "Added test",
          "committedDate": "2020-02-05T21:27:53Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f76c6d6acd4b9251106a2f4c6ca7a2fd7a4fce2",
          "message": "Update src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs\n\nCo-Authored-By: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2020-02-06T16:31:49Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7010a2ccb2aa55bb3a34bc64498b4f0d0223e00c",
          "message": "Update src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs\n\nCo-Authored-By: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2020-02-06T16:31:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1598b4fd60481e6f17cc796f553a368768bd7ab1",
          "message": "Flipped overwriting\n\nIn 16.3, the default version overrode before/after.<sln>.targets versions. This changes back to that mode.",
          "committedDate": "2020-02-06T19:40:46Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e49893950c9a5e9f39a4d887b93810946361eef",
          "message": "Remove condition",
          "committedDate": "2020-02-06T21:14:27Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've just run into the situation where I can no longer redefine the Build target, for example via `Directory.Solution.targets` - my redefinition of the Build target is silently ignored. This appears to be due to this 'fix'. I can redefine any other target (such as Restore). Why is this considered a desirable restriction?\r\n\r\n**UPDATE:**\r\n\r\nI've come up with a workaround of sorts:\r\n\r\n```xml\r\n<Target\r\n  Name=\"_CustomBeforeBuild\"\r\n  BeforeTargets=\"Build\"\r\n  Outputs=\"@(CollectedBuildOutput)\">\r\n\r\n  <!-- DO YOUR ACUTAL Build TARGET WORK HERE (or via DependsOnTargets etc) -->\r\n\r\n  <!-- Remove all @(ProjectReference) which effectively turns the default Build target into a no-op -->\r\n  <ItemGroup>\r\n    <_OriginalProjectReference Include=\"@(ProjectReference)\"/>\r\n    <ProjectReference Remove=\"@(ProjectReference)\" />\r\n  </ItemGroup>\r\n\r\n</Target>\r\n\r\n<Target\r\n  Name=\"_CustomAfterBuild\"\r\n  AfterTargets=\"Build\">\r\n\r\n  <!-- Restore all @(ProjectReference) in case another target is due to be executed after Build -->\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"@(_OriginalProjectReference)\" />\r\n  </ItemGroup>\r\n\r\n</Target>\r\n```",
        "createdAt": "2021-07-04T10:39:27Z",
        "author": {
          "login": "tg73"
        }
      },
      {
        "body": "Can you define the Build target by putting it in a separate file that you import in Directory.Build/Solution.props? I think Directory.Solution.targets comes in after the dummy Build target was added.",
        "createdAt": "2021-07-13T23:56:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Apologies for the delay, vacation. No, your suggestion does not work. The custom `build` target is ignored. Looking at the code, and with the disclaimer that this is my naive, non-expert understanding:\r\n\r\nThese lines in `CreateTraversalInstance` appear to seek to retain any custom definition of the standard targets, removing only the placeholder empty targets, and then call `AddStandardTraversalTargets` apparently with the intention to add in the full versions *only* of those targets that have already been removed:\r\n\r\nhttps://github.com/Forgind/msbuild/blob/1d845f30213e9ba4f36d4d5a366c0cc8285eed6e/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L986-L997\r\n\r\nHowever, `AddStandardTraversalTargets` calls `AddTraversalReferencesTarget` for each standard target, which forcibly removes *any* existing target. This appears to undermine the intent of `CreateTraversalInstance`:\r\n\r\nhttps://github.com/Forgind/msbuild/blob/3e49893950c9a5e9f39a4d887b93810946361eef/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L1961-L1977\r\n\r\nAn earlier version of `AddTraversalReferencesTarget` appears to have suitable conditional logic in place:\r\n\r\nhttps://github.com/Forgind/msbuild/blob/fb82bc8216051c467850de04fe24e42026a02167/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L1964-L1977",
        "createdAt": "2021-07-25T17:17:24Z",
        "author": {
          "login": "tg73"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This fix looks right, but can you add a unit test that proves it does what we think?",
              "createdAt": "2020-02-05T18:23:47Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1969,8 +1969,11 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec\n                 outputItemAsItem = \"@(\" + outputItem + \")\";\n             }\n \n-            ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", String.Empty, String.Empty, outputItemAsItem, null, String.Empty, String.Empty, String.Empty, String.Empty, false /* legacy target returns behaviour */);\n-            AddReferencesBuildTask(target, targetName, outputItem);\n+            if (!traversalProject.Targets.Select(target => target.Key).Contains(targetName ?? \"Build\"))\n+            {\n+                ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", string.Empty, string.Empty, outputItemAsItem, null, string.Empty, string.Empty, string.Empty, string.Empty, false /* legacy target returns behaviour */);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extreme nit: this is technically supposed to be XML so you can't use `<>`.\r\n```suggestion\r\n        /// Test that if a before.{sln}>.targets or after.{sln}.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\r\n```",
              "createdAt": "2020-02-05T22:13:50Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -60,6 +60,35 @@ public void Dispose()\n             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n         }\n \n+        /// <summary>\n+        /// Test that if a before.<sln>.targets or after.<sln>.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc4d",
              "createdAt": "2020-02-05T22:14:17Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -60,6 +60,35 @@ public void Dispose()\n             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n         }\n \n+        /// <summary>\n+        /// Test that if a before.<sln>.targets or after.<sln>.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\")]\n+        [InlineData(\"after.MySln.sln.targets\")]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    @\"<Project>\r\n```\r\n\r\nThis isn't required so I lean toward \"don't put it in\"",
              "createdAt": "2020-02-05T22:15:06Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -60,6 +60,35 @@ public void Dispose()\n             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n         }\n \n+        /// <summary>\n+        /// Test that if a before.<sln>.targets or after.<sln>.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\")]\n+        [InlineData(\"after.MySln.sln.targets\")]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n+                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n+                    @\"<Project ToolsVersion=\"\"15.0\"\" xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extract `targetName ?? \"Build\"` to a variable since it's used twice",
              "createdAt": "2020-02-05T22:17:10Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1969,8 +1969,11 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec\n                 outputItemAsItem = \"@(\" + outputItem + \")\";\n             }\n \n-            ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", String.Empty, String.Empty, outputItemAsItem, null, String.Empty, String.Empty, String.Empty, String.Empty, false /* legacy target returns behaviour */);\n-            AddReferencesBuildTask(target, targetName, outputItem);\n+            if (!traversalProject.Targets.Select(target => target.Key).Contains(targetName ?? \"Build\"))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think this is right. When defined in `before`, the dummy target from the bug should be overridden by the generated target \"in the body\" of the metaproject.\r\n\r\nHave you validated that this change behaves correctly using the repro steps from https://github.com/microsoft/msbuild/issues/5071#issuecomment-578863667?",
              "createdAt": "2020-02-06T05:37:00Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -60,6 +60,35 @@ public void Dispose()\n             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n         }\n \n+        /// <summary>\n+        /// Test that if a before.<sln>.targets or after.<sln>.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\")]\n+        [InlineData(\"after.MySln.sln.targets\")]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n+                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n+                    @\"<Project ToolsVersion=\"\"15.0\"\" xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">\n+                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n+                        </Target>\n+                      </Project>\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                instances.ShouldHaveSingleItem();\n+                if (!name.Equals(\"name.that.does.Not.Affect.The.Build.targets\"))\n+                {\n+                    instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(\"NonsenseTarget\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, I think this was a design issue. I thought it would be best for the user's version to override the generated version no matter what. I can change it.",
              "createdAt": "2020-02-06T16:25:53Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -60,6 +60,35 @@ public void Dispose()\n             ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n         }\n \n+        /// <summary>\n+        /// Test that if a before.<sln>.targets or after.<sln>.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\")]\n+        [InlineData(\"after.MySln.sln.targets\")]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n+                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n+                    @\"<Project ToolsVersion=\"\"15.0\"\" xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">\n+                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n+                        </Target>\n+                      </Project>\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                instances.ShouldHaveSingleItem();\n+                if (!name.Equals(\"name.that.does.Not.Affect.The.Build.targets\"))\n+                {\n+                    instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(\"NonsenseTarget\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can just do this unconditionally; `RemoveTarget` doesn't throw if it's not there.",
              "createdAt": "2020-02-06T19:53:17Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1969,7 +1969,13 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec\n                 outputItemAsItem = \"@(\" + outputItem + \")\";\n             }\n \n-            ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", String.Empty, String.Empty, outputItemAsItem, null, String.Empty, String.Empty, String.Empty, String.Empty, false /* legacy target returns behaviour */);\n+            string correctedTargetName = targetName ?? \"Build\";\n+\n+            if (traversalProject.Targets.Select(target => target.Key).Contains(correctedTargetName))\n+            {\n+                traversalProject.RemoveTarget(correctedTargetName);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "But this depends on the \"how did pre-16.4 behave\" question WRT having stub targets in before/after.",
              "createdAt": "2020-02-06T19:57:01Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1969,7 +1969,13 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec\n                 outputItemAsItem = \"@(\" + outputItem + \")\";\n             }\n \n-            ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", String.Empty, String.Empty, outputItemAsItem, null, String.Empty, String.Empty, String.Empty, String.Empty, false /* legacy target returns behaviour */);\n+            string correctedTargetName = targetName ?? \"Build\";\n+\n+            if (traversalProject.Targets.Select(target => target.Key).Contains(correctedTargetName))\n+            {\n+                traversalProject.RemoveTarget(correctedTargetName);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sorry\u2014I should have mentioned this rather than just pushing the change. In 16.3, if you have a before...targets or an after...targets with a Build target, the Build target is overwritten by the generated target.",
              "createdAt": "2020-02-06T21:12:19Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1969,7 +1969,13 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec\n                 outputItemAsItem = \"@(\" + outputItem + \")\";\n             }\n \n-            ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? \"Build\", String.Empty, String.Empty, outputItemAsItem, null, String.Empty, String.Empty, String.Empty, String.Empty, false /* legacy target returns behaviour */);\n+            string correctedTargetName = targetName ?? \"Build\";\n+\n+            if (traversalProject.Targets.Select(target => target.Key).Contains(correctedTargetName))\n+            {\n+                traversalProject.RemoveTarget(correctedTargetName);\n+            }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}