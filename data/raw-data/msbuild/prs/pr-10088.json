{
  "number": 10088,
  "title": "[BuildCheck]: Guide of rules/analyzers id name",
  "body": "Fixes #9823\r\n\r\n### Context\r\nProvide the document describing the guidence on the rule id and analyzers name built in and custom ones. \r\n\r\nFormatted view: https://github.com/f-alizada/msbuild/blob/f-alizada/dev/design-for-rules-id/documentation/specs/proposed/BuildCheck-Rules-Identification.md\r\n\r\nThe PR does not introduce the actual implementation. The implementation and changes will be made once this PR is merged (meaning all comments are addressed) ",
  "state": "CLOSED",
  "createdAt": "2024-04-30T09:35:52Z",
  "updatedAt": "2025-04-02T17:26:11Z",
  "closedAt": "2025-04-02T17:26:10Z",
  "mergedAt": null,
  "additions": 123,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "f-alizada/dev/design-for-rules-id",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1c942078dec72b3f85582009a0098ce1480d217e",
          "message": "The document to provide guide of rules/analyzers id name",
          "committedDate": "2024-04-30T09:29:22Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51e00689bc6763e7c4764265a7a7d311dc257c88",
          "message": "Merge branch 'main' into f-alizada/dev/design-for-rules-id",
          "committedDate": "2024-05-06T06:25:32Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "754c21c57f6bd07028420ec2f880cce0a8522c42",
          "message": "Apply suggestions from PR reviews",
          "committedDate": "2024-05-06T09:10:16Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ab032776034269448aadfb028f72e59c346a334",
          "message": "Add section of same analyzer name prevention",
          "committedDate": "2024-05-06T12:18:06Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17b0d9c9801f1ac9c56a4bbd049825ff5e3d995f",
          "message": "Remove cagory section for now",
          "committedDate": "2024-05-06T12:18:52Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c73ed0424ceac3f0b0e6cfd0f3355ad8b840331",
          "message": "rephrase",
          "committedDate": "2024-05-06T12:21:52Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "close as out of the priorities now.\r\nThe history is available if we decide to contribute more.",
        "createdAt": "2025-04-02T17:26:10Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering whether the term 'error' might confuse anyone here (as we use term error as well for the type of finding). How about \"Execution and configuration issues and execution time reporting for analyzers\"?",
              "createdAt": "2024-04-30T12:02:00Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\r\n```\r\n\r\nWe basically want to prevent 2 things:\r\n* a community analyzer/rule producing reports that can be confused with the reports from official MSFT analyzers\r\n* some community analyzers having same id's and those being loaded into the build produces report that uses identification, while that identification cannot be unambiguously linked to the analyzer package.\r\n\r\nTo prevent first case - we reserve prefix for ourselves. Thus it cannot be used in any analyzer in any build\r\nTo prevent second case - we need to control clashes on the level of the individual builds - as we do not have mechanism for producers to reserve their own prefixes",
              "createdAt": "2024-04-30T12:06:50Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you for pointing! \r\nThe section \"Rules Identification clash prevention\" is added to the document. \r\n",
              "createdAt": "2024-05-06T12:24:28Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\"build_check.BuildCheck...\" - feels like duplication. \"build_check.Microsoft....\" might be more expressive here?",
              "createdAt": "2024-04-30T12:11:11Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.\n+Example configuration for a category rule:\n+- build_check.Category.Output.enabled = true|false\n+- build_check.Category.MSBuildProperty.severity = Error\n+\n+#### Priority of configuration\n+\n+- Category\n+- Analyzer\n+- Rule\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Agree it feels like it. \r\nWhat do you think about the \"msbuild_analyzer.BuildCheck.AnalyzerName ... \" where msbuild_analyzer is a required prefix to be respected by infra?  ",
              "createdAt": "2024-05-02T13:48:07Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.\n+Example configuration for a category rule:\n+- build_check.Category.Output.enabled = true|false\n+- build_check.Category.MSBuildProperty.severity = Error\n+\n+#### Priority of configuration\n+\n+- Category\n+- Analyzer\n+- Rule\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Additional option: \r\nTo leave the `build_check` as a infra-key, but reserve the `MSBuild` as a reserved prefix for built-in analyzers.   ",
              "createdAt": "2024-05-06T07:38:12Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.\n+Example configuration for a category rule:\n+- build_check.Category.Output.enabled = true|false\n+- build_check.Category.MSBuildProperty.severity = Error\n+\n+#### Priority of configuration\n+\n+- Category\n+- Analyzer\n+- Rule\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I think\r\n\r\n```editorconfig\r\nbuild_check.MSBuild.SharedOutputPath.enabled = true\r\n```\r\n\r\nmakes sense to me",
              "createdAt": "2024-05-06T16:05:47Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.\n+Example configuration for a category rule:\n+- build_check.Category.Output.enabled = true|false\n+- build_check.Category.MSBuildProperty.severity = Error\n+\n+#### Priority of configuration\n+\n+- Category\n+- Analyzer\n+- Rule\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agree with Rainer here - having the `build_check` 'namespace' is a good thing (see how language or ecosystem prefixes are used to scope rules for other systems), I just worry a bit about verbosity here. I'd want ideally no more than say 4 segments. `<namespace>.<analyzer_id>.<rule_id>.<setting> = <value>`.",
              "createdAt": "2024-05-10T18:34:00Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.\n+Example configuration for a category rule:\n+- build_check.Category.Output.enabled = true|false\n+- build_check.Category.MSBuildProperty.severity = Error\n+\n+#### Priority of configuration\n+\n+- Category\n+- Analyzer\n+- Rule\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wild idea - do we want to allow prefixes for the custom analyzer rules as well? And then being able to refer to that prefix in order to configure the rules by group - e.g.:\r\n\r\nFancyBuildChecks.SharedOutputPath.enabled = false\r\nFancyBuildChecks.*.enabled = true\r\n\r\nBut I haven't thought about that too deeply :)",
              "createdAt": "2024-04-30T12:16:02Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I like this idea, but my worry here is when two third party analyzers use the same prefix. The same problem that we would have with the rule IDs.",
              "createdAt": "2024-05-02T12:11:54Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "The idea is interesting, however the document presents the idea of having less flexibility at early stages of the development. \r\nOn later stages we could work on providing more flexibility into configuraition, naming.\r\nHaving the configuration based on the prefix is something that I would leave for the future, if agreed across team. \r\nOpen to the discussion",
              "createdAt": "2024-05-06T08:59:17Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "```editorconfig\r\nFancyBuildChecks.*.enabled = true\r\n```\r\n\r\nThis is dangerous, because listing by wildcard means new rules can get enabled/fail your build by nonobvious upgrades. Less dangerous for package-delivered ones since those should require an explicit upgrade gesture.",
              "createdAt": "2024-05-06T14:49:19Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is something where I'd be curious about wider feedback. I'm not sure if personally I'd prefer groupping by categories (accross all rules) or rather by producers (package names)\r\nBut probably - if authors can choose their categorization identifiaction freely - both effects can be eachieved?",
              "createdAt": "2024-04-30T12:18:15Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The categorization of the analyzers (all possible categories) will be presented by the MSBuild team. This means that it will be represented as enum values, and the identification of the categorization will be maintained by the MSBuild team. \r\n\r\nCould you please point out the scenario that you are thinking about which is not very conveniently configurable from the document? (Possibly I'm missing something.)",
              "createdAt": "2024-05-06T09:06:48Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I was trying to come up with reasonable set of Categories for the intial list of analyzers (except `usage`, `style`), however I believe having only one Category is not sufficient to actually show what the analyzer is about. \r\nAttaching multiple catogories (labeling) possibly could help here, but was not thinking of adding it in the v1. \r\nWhat do you think about not introducing the Categorization in the v1 of BuildCheck?",
              "createdAt": "2024-05-06T12:14:13Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I don't like categories in general, because of the \"I turned on 'all style checks' and then changed to a new compiler and am now mad because there are new style warnings\" case. I support dropping them from v1.",
              "createdAt": "2024-05-06T18:11:02Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels bit unorthodox\r\n\r\nI understand the motivation (quickly defunct group of analyzers that are listed in editorconfig(s) without need to comment them out), but the usuall convention for various configurations is that the more specific one takes the precedence.",
              "createdAt": "2024-04-30T12:19:34Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Agree I was thinking from the implementation point of view :) \r\nI'll update the ordering, thank you! ",
              "createdAt": "2024-05-02T13:49:08Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization\n+The proposal is to implement the configuration of the class/category of analyzers by single line in .editorconfig\n+For example, categories can include:\n+- Output\n+- MSBuildProperty\n+\n+Category configuration's priority is higher than that of a singular rule or analyzer.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The categories section feels a little bit out of place right now. I had a bit of trouble understanding how it fit with the analyzer identification topic. I think expanding it a bit would be nice.",
              "createdAt": "2024-05-02T12:09:30Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Left comment regarding the same topic: https://github.com/dotnet/msbuild/pull/10088#discussion_r1590933496",
              "createdAt": "2024-05-06T12:25:24Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,113 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Errors and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build: Clashes with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+- Categorization of the rules/analyzers.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC.` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule consists of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Categorization",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe say \"method\" or \"assembly\" or \"class\" or something?",
              "createdAt": "2024-05-06T14:24:38Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd strongly recommend using the [RFC 2119](https://www.rfc-editor.org/rfc/rfc2119) language:\r\n\r\n```suggestion\r\n- The report must unambiguously identify the rule.\r\n```",
              "createdAt": "2024-05-06T14:24:49Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this mean something like this, or something else?\r\n```suggestion\r\n- Execution and configuration issues and execution time reporting must be attributable to analyzers.\r\n```",
              "createdAt": "2024-05-06T14:27:14Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd appreciate more reasoning and description of the concepts \"friendly name\" and \"RuleId\".",
              "createdAt": "2024-05-06T14:41:32Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Btw. do we need a more strict and opinionated guidance on form and especially length of the ids?\r\n\r\n@YuliiaKovalova - can you point us to contacts for VS Error Window? - as that team might have some pre-existing guidances",
              "createdAt": "2024-05-09T10:12:32Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`Microsoft` is interesting here as there will surely be many other parts of Microsoft besides the MSBuild team that are interested in authoring rules.",
              "createdAt": "2024-05-06T15:03:09Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Even our team might want to possibly ship rules out of the band (orthogonal to official releases - to test-drive new checks).\r\n\r\nI'm wondering what might be a good way out of a 3rd party pretending to be MSFT authored check, while allowing Microsoft teams (including us) to ship the checks via nugets as well... I suppose one thing we can rely on is the package name (as trustworthy feeds should already employ reserving the prefixes) - so we might allow the reserved Check prefix, only if it comes from package that has same prefix (we'd need to make sure to reserve the prefixes on nuget.org)",
              "createdAt": "2024-05-09T10:18:04Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Similar can apply to RuleId prefixes as well - basically \"Only if you are build-in Check, or a Check comming from a package with some hardcoded recognized prefix (can be the 'Microsoft', 'BuildCheck', 'MSBuild' group) you can use any Check FriendlyName and RuleId prefixes you want, otherwise exclusions apply\".\r\n\r\nWhat do you think?",
              "createdAt": "2024-05-09T10:20:50Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "`Microsoft*` is reserved on NuGet but I don't like the idea of coupling something in the rule engine (name validity) to NuGet in that way (I can't see a way of doing it other than \"look in the path for a nuget package id pattern).",
              "createdAt": "2024-05-09T13:30:49Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Let's try to brainstorm options:\r\n* Do not allow reserved prefixes in any custom analyzers (incl internaly produced)\r\n* No checking of restricted prefixes\r\n* Pigyback on nuget naming\r\n* ?? (need ideas here :-))",
              "createdAt": "2024-05-09T14:01:45Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd add some other known-to-the-ecosystem prefixes\r\n```suggestion\r\n- Id Prefix: (BC|MSB|MS|CS|CA|VB)\r\n```",
              "createdAt": "2024-05-06T16:02:35Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nMSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\r\nMSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\r\n```",
              "createdAt": "2024-05-06T16:03:25Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the only recourse here to drop one or the other? No remap capability in the engine (I don't think there should be! but we should be clear)",
              "createdAt": "2024-05-06T16:04:47Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)\n+If custom analyzer will not meet predefined pattern the registration of the custom analyzer will fail.\n+\n+#### Custom VS Custom\n+The prevention of having the same analyzer/rule's name/id's between custom analyzers is not guaranteed, and during the registration of the custom analyzer, an additional check will happen to ensure that the analyzer name is not already registered.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I find using `SharedOutputPath` as your example custom rule a bit confusing, can you make that more distinct? `CustomThirdParty` or something?",
              "createdAt": "2024-05-06T16:06:46Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)\n+If custom analyzer will not meet predefined pattern the registration of the custom analyzer will fail.\n+\n+#### Custom VS Custom\n+The prevention of having the same analyzer/rule's name/id's between custom analyzers is not guaranteed, and during the registration of the custom analyzer, an additional check will happen to ensure that the analyzer name is not already registered.\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.severity = Error`\n+\n+- Custom BuildCheck rules configuration\n+    - `build_check.SharedOutputPath.ID0001.enabled = true|false`\n+    - `build_check.SharedOutputPath.ID0001.severity = Error`",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Elaborate on this please?",
              "createdAt": "2024-05-06T16:07:45Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)\n+If custom analyzer will not meet predefined pattern the registration of the custom analyzer will fail.\n+\n+#### Custom VS Custom\n+The prevention of having the same analyzer/rule's name/id's between custom analyzers is not guaranteed, and during the registration of the custom analyzer, an additional check will happen to ensure that the analyzer name is not already registered.\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.severity = Error`\n+\n+- Custom BuildCheck rules configuration\n+    - `build_check.SharedOutputPath.ID0001.enabled = true|false`\n+    - `build_check.SharedOutputPath.ID0001.severity = Error`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.enabled = true|false`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.severity = Error`\n+\n+- To configure the analyzer (Priority of this is higher than configuring the single rule)\n+    -  `build_check.SharedOutputPath.enabled = true|false`\n+\n+#### .editorconfig examples:\n+\n+```\n+root=true\n+\n+[FooBar.csproj]\n+build_check.BuildCheck.SharedOutputPath.BC0002.IsEnabled=true\n+build_check.BuildCheck.SharedOutputPath.BC0002.Severity=error\n+\n+[FooBar-Copy.csproj]\n+build_check.BuildCheck.SharedOutputPath.BC0002.IsEnabled=true\n+build_check.BuildCheck.SharedOutputPath.BC0002.Severity=error\n+```\n+\n+```\n+root=true\n+\n+[FooBar.csproj]\n+build_check.BuildCheck.SharedOutputPath.IsEnabled=true\n+build_check.BuildCheck.SharedOutputPath.Severity=error\n+\n+[FooBar-Copy.csproj]\n+build_check.BuildCheck.SharedOutputPath.IsEnabled=true\n+build_check.BuildCheck.SharedOutputPath.Severity=error\n+```\n+\n+#### Priority of configuration\n+\n+- Rule\n+- Analyzer",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did we discuss this in the `.editorconfig` meeting? Do we generally expect people to configure per-project by adding a project-folder `.editorconfig` or by adding a section like this?",
              "createdAt": "2024-05-06T16:08:19Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)\n+If custom analyzer will not meet predefined pattern the registration of the custom analyzer will fail.\n+\n+#### Custom VS Custom\n+The prevention of having the same analyzer/rule's name/id's between custom analyzers is not guaranteed, and during the registration of the custom analyzer, an additional check will happen to ensure that the analyzer name is not already registered.\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.severity = Error`\n+\n+- Custom BuildCheck rules configuration\n+    - `build_check.SharedOutputPath.ID0001.enabled = true|false`\n+    - `build_check.SharedOutputPath.ID0001.severity = Error`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.enabled = true|false`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.severity = Error`\n+\n+- To configure the analyzer (Priority of this is higher than configuring the single rule)\n+    -  `build_check.SharedOutputPath.enabled = true|false`\n+\n+#### .editorconfig examples:\n+\n+```\n+root=true\n+\n+[FooBar.csproj]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It shouldn't matter - due to the hierarchical nature and the fact that even in a co-located .editorconfig the user would still need the `[FooBar.csproj]` section header. So you can organize in a single file with N project sections, or N files with 1 project section, or any combination thereof.",
              "createdAt": "2024-05-10T18:35:49Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers\n+Custom analyzer will have the friendly name: `{NameOfTheAnalyzer}` with defined format: \n+- `^[A-Z]{1,}[a-zA-Z_]{1,}$`\n+- should not start with `BuildCheck.` this is built-in prefix for built-in.\n+\n+Each Custom Analyzer Rule will have the rule id format as follows:\n+- `^[A-Z]{1}[A-Za-z]{0,}[0-9]{1,}$`. \n+- should not start from `BC` this is reserved prefix for built-in rules.\n+\n+#### Example of a custom analyzer:\n+- Name: `SharedOutputPath`, `SharedOutputPath` \n+- RuleId: `SOMEPREFIX123`\n+\n+Any registered analyzers that don't follow the pattern (built-in and custom) will raise an exception and fail the build.\n+\n+The identification of the rule will consist of two components: the Friendlyname and the RuleId.\n+\n+#### Examples \n+- Built-in\n+    - `BuildCheck.SharedOutputPath.BC0001`\n+    - `BuildCheck.SharedOutputPath.BC0002`\n+    - `BuildCheck.PropertyAssignedIncorrectly.BC0002`\n+- Custom\n+    - `SharedOutputPath.ID0001`\n+    - `SharedOutputPath.ID0002`\n+    - `PropertyAssignedIncorrectly.ID0002`\n+\n+#### Example of the output:\n+```\n+...\n+Determining projects to restore...\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\bin\\Debug\\net8.0\\.\n+MSBUILD : error : BuildCheck.SharedOutputPath.BC0002: Projects FooBar-Copy.csproj and FooBar.csproj have onflicting output paths: C:\\projects\\msbuild\\playground\\buildcheck\\obj\\Debug\\net8.0\\.\n+Restore:\n+...\n+```\n+\n+### Rules Identification clash prevention\n+\n+#### Custom VS Built-In\n+The prevention of having the same analyzer/rule's name/id's between built-in and custom is guaranteed by preserved prefixes\n+- Name Prefix: (BuildCheck|MSBuild|Microsoft)\n+- Id Prefix: (BC|MSB|MS)\n+If custom analyzer will not meet predefined pattern the registration of the custom analyzer will fail.\n+\n+#### Custom VS Custom\n+The prevention of having the same analyzer/rule's name/id's between custom analyzers is not guaranteed, and during the registration of the custom analyzer, an additional check will happen to ensure that the analyzer name is not already registered.\n+\n+\n+### EditorConfig configurations\n+\n+Any build check related configuration should start with the `build_check.` prefix. Without the prefix, the BuildCheck infrastructure will not recognize the input config as a valid key-value, and the config will not be respected.\n+\n+- Built-in BuildCheck rule configuration\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.enabled = true|false`\n+    - `build_check.BuildCheck.SharedOutputPath.BC0001.severity = Error`\n+\n+- Custom BuildCheck rules configuration\n+    - `build_check.SharedOutputPath.ID0001.enabled = true|false`\n+    - `build_check.SharedOutputPath.ID0001.severity = Error`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.enabled = true|false`\n+    - `build_check.SharedOutputPathSecond.AnotherRuleId0001.severity = Error`\n+\n+- To configure the analyzer (Priority of this is higher than configuring the single rule)\n+    -  `build_check.SharedOutputPath.enabled = true|false`\n+\n+#### .editorconfig examples:\n+\n+```\n+root=true\n+\n+[FooBar.csproj]",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Where is the naming difference between built-in and custom checks coming from? As far as I know Roslyn doesn't have a similar concept here.",
              "createdAt": "2024-05-10T18:36:56Z",
              "path": "documentation/specs/proposed/BuildCheck-Rules-Identification.md",
              "diffHunk": "@@ -0,0 +1,123 @@\n+# MSBuild Rules/Analyzers Identification\n+\n+## Background and Context\n+\n+The MSBuild team is currently working on delivering the MSBuild analyzers (aka BuildCheck). The BuildCheck infrastructure has built-in analyzers and functionality to support custom ones. Hence, we need to make sure it will be possible to configure and differentiate built-in and custom analyzers.\n+\n+Note: Single analyzer can have multiple rules.\n+\n+### Problems to address:\n+- The report should unambiguously point to the rule.\n+- Execution and configuration issues and execution time reporting for analyzers.\n+- Preventing clashes of identification within a single build and clashes of custom rules/analyzers with well-known rules/analyzers.\n+- Possibility to configure the rule.\n+\n+## Proposal\n+\n+### Built-in analyzers\n+Every built-in analyzer will have the friendly name: `BuildCheck.{FriendlyName}`.\n+- Regular expression for the name: `^BuildCheck.[A-Z]{1,}[a-zA-Z0-9_]{0,}$`\n+\n+Each Rule that is shipped inbox will contain the RuleId as an identifier of the rule for this analyzer. \n+- The rule id format is as follows: `^BC[A-Za-z_.]{0,}[0-9]{1,}$`.\n+\n+#### Example of a built-in analyzer:\n+- Name: `BuildCheck.SharedOutputPath`\n+- RuleId: `BC0101` or `BC.AdditionalInfo0101` or `BC.Prefix.Test0123`\n+\n+### Custom analyzers",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}