{
  "number": 10243,
  "title": "Emit eval props if requested by any sink",
  "body": "Fixes #10225, ~~#1976~~\r\n\r\n### Context\r\nThe eval props/items were not attached to `ProjectEvaluationFinishedEventargs` if any logger didn't request `IncludeEvaluationPropertiesAndItems`\r\n\r\nIn case of VS - the `MuxLogger` is attached as well. So in case that one doesn't set the property (it might be a recent change in VS - I'm not sure) - the values are not being sent neither to binary logger.\r\n\r\n### Changes Made\r\nMake sure the values are emitted and attached if any logger requests them\r\n\r\n### Testing\r\nManual (VS with injected Msbuild)\r\n**Experimental VS insertion:** https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/558711\r\n**Experimental VS insertion for the version which can add properties on both event types:** https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/565788 (yet another: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/566698)\r\n\r\n### Notes\r\nThe change was introduced long ago - https://github.com/dotnet/msbuild/commit/794abcbb005017cf3a75850a9f001419bb47bd38 - and it mentiones possible regression concerns if applied to all loggers. I might not have understood it properly - but it seems the concern is more about `ProjectEvaluationStartedEventArgs` - which do not attach the props/items anymore. Having extra data in `ProjectEvaluationFinishedEventargs` even for loggers do not requesting it feels like very low opportunity for breakage (somebody would need to explicitly break on non-null data).\r\nFYI @KirillOsenkov  - in case my thinking is flawed\r\n",
  "state": "MERGED",
  "createdAt": "2024-06-14T11:57:24Z",
  "updatedAt": "2024-08-02T06:47:36Z",
  "closedAt": "2024-07-25T14:45:23Z",
  "mergedAt": "2024-07-25T14:45:23Z",
  "additions": 176,
  "deletions": 93,
  "changedFiles": 15,
  "headRefName": "bugfix/missing-eval-props",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "83f2ff512f29b052d829468952a452063d83c8f3",
          "message": "Emit eval props if requested by any sink",
          "committedDate": "2024-07-18T14:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9468f7f48028585e6820f9daae377420981555f",
          "message": "Ensure non-null props/items on ProjectStartedEventArgs",
          "committedDate": "2024-07-18T14:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a9006b776e6d25d5917e93d7ee0aaf2e27ec72d",
          "message": "Hide change behind changewave",
          "committedDate": "2024-07-18T14:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b54607d601d36d9956a62ed38f84c35122e74931",
          "message": "Fix unit tests",
          "committedDate": "2024-07-18T14:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e8e6b6d0758f7c71b6a4ab7374582d48d33758e5",
          "message": "Fix failing unit test",
          "committedDate": "2024-07-18T14:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c1aa3fc8de4505c21807cea9763ed8196a91220",
          "message": "Add argument name in tests",
          "committedDate": "2024-07-18T14:54:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3559b4b5c11217db3ed94b893cffef22a5fb1053",
          "message": "Fix style",
          "committedDate": "2024-07-18T14:54:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f8f062d5ab4b2bb17a4ffc19cf8c3b9e52f23871",
          "message": "Fix tests",
          "committedDate": "2024-07-18T14:54:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17a156dc49b11bb022f10b7603eeac4ea7971f37",
          "message": "Enable independent eval props population on ProjectStarted and EvaluationFinished events",
          "committedDate": "2024-07-18T16:25:15Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6b773736b4904b45fdc1f0941ce6fe5f40de5688",
          "message": "Prevent SO Exception",
          "committedDate": "2024-07-19T07:18:34Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1962acfdd345d25ba418f00464bdc2c058761a75",
          "message": "Fix unit tests",
          "committedDate": "2024-07-23T10:47:07Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "485520d040ed36a731264f9e17c5e31bcfa5ca0b",
          "message": "Reintroduce skipping the tests on core",
          "committedDate": "2024-07-23T15:17:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Does this result in big duplication for the console/text loggers at diag? That's the biggest concern off the top of my head right now.",
        "createdAt": "2024-06-14T15:02:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Does this result in big duplication for the console/text loggers at diag? That's the biggest concern off the top of my head right now.\r\n\r\nThis should be identical. Console loggers already have it:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/a9efffc4de9609e9ecb45c6c2d41487a4ed70d6f/src/Build/Logging/BaseConsoleLogger.cs#L953-L957\r\n\r\nPlus they pull data from `ProjectEvaluationStarted` if it's not in `ProjectEvaluationFinished`\r\n\r\n\r\nBUT - I now see that `IncludeEvaluationPropertiesAndItems` actually means: *\"Should the items and props be included in `ProjectEvaluationFinished` OR in `ProjectEvaluationStarted`?\"*.  Them being in ProjectEvaluationFinished is not a problem. However them NOT being in ProjectEvaluationStarted might possibly be a problem for some legacy loggers.\r\n\r\nSo we now have 2 options:\r\n* [Current PR] - Go forward with the props/items being only in `ProjectEvaluationFinished`. And allow flipping to legacy behavior (for a legacy loggers) with explicit trait. This way we'll be able to eventualy get rid of the confusing conditional logic and it's propagation. BuildChecks as well will need the new behavior.\r\n* [No change. Request investigation from VS] - Keep the logic which flips the behavior base on presence of legacy logger. We'd need to find out why `MuxLogger` has the `IncludeEvaluationPropertiesAndItems` set to `false`. I'm guessing it's change on the calling side (in VS) - as we do not set the property in our code.\r\n\r\n",
        "createdAt": "2024-06-14T17:08:48Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I thought this was determining whether the properties and items are logged at ProjectEvaluationFinished vs. legacy ProjectStarted.\r\n\r\nSome legacy loggers (like Azure DevOps pipelines distributed logger) expected them to be on ProjectStarted, and crashed with NullReferenceException when they didn't find them.\r\n\r\nI don't think they're ever on ProjectEvaluationStarted.",
        "createdAt": "2024-06-14T18:05:31Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I remember MuxLogger had these as false but somehow this was never the problem. I think something else is going on.\r\n\r\nAlso as an option we can keep this PR, and just ensure that ProjectStartedEventArgs has empty arrays for properties and items, instead of null. I regret not having done this in the first place.",
        "createdAt": "2024-06-14T18:09:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "But overall I don't think this is a safe change to make. This is pretty much equivalent to always turning it on (it's as if there's always an imaginary logger present that requests it).",
        "createdAt": "2024-06-14T18:13:41Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This one describes what was going on - it's basically the inverse of this PR:\r\nhttps://github.com/dotnet/msbuild/pull/6520",
        "createdAt": "2024-06-14T18:15:58Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "See related:\r\nhttps://github.com/dotnet/msbuild/issues/6498",
        "createdAt": "2024-06-14T18:28:44Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I remember MuxLogger had these as false but somehow this was never the problem. I think something else is going on.\r\n> \r\n\r\nI cannot wrap my head around how would that work. Perhaps viewer used to get the props from `ProjectStartedEventArgs`?\r\nOr something obvious is escaping before my eyes\r\n\r\n> Also as an option we can keep this PR, and just ensure that ProjectStartedEventArgs has empty arrays for properties and items, instead of null. I regret not having done this in the first place.\r\n\r\nI added ensuring non-null values.\r\nIt still would not prevent the problem described here https://github.com/dotnet/msbuild/issues/6498#issuecomment-860970125\r\nbut the problematic logger fixed their implementation soon after the original problem - and it can now handle nulls fine: https://github.com/microsoft/azure-pipelines-msbuild-logger/blob/56a61f46a2b0f1b037dd42532dfd09144b1df26f/MSBuild.Logger/BuildConfiguration.cs#L40-L50\r\n\r\nThere is still a risk that some existing logger relies on specific properties being always available in `ProjectStartedEventArgs` - the workaround for such would be explicit setting of `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` to 0/false.",
        "createdAt": "2024-06-14T19:23:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I like this change - I should have done that long ago.\r\n\r\nWe should debug why we don't get eval in VS - want to be absolutely sure it's because of a bad logger present. I clearly remember looking at this and MuxLogger wasn't the issue, but I might have been mistaken.",
        "createdAt": "2024-06-14T20:05:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think this was my investigation:\r\nhttps://github.com/dotnet/msbuild/issues/4044",
        "createdAt": "2024-06-14T20:06:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "See also:\r\nhttps://github.com/dotnet/msbuild/issues/7219#issuecomment-1513812893",
        "createdAt": "2024-06-14T20:07:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "See also:\r\nhttps://github.com/dotnet/msbuild/pull/4048",
        "createdAt": "2024-06-14T20:08:50Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Experimental VS insertion: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/558711\r\n\r\n",
        "createdAt": "2024-06-18T17:29:07Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Tested with VS with this PR inserted (installers: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=9745016&view=ms.vss-build-web.run-extensions-tab)\r\n\r\n**tl;dr;:** The issue is present and resolved with this PR\r\nHowever it can have impact on legacy loggers that expect the props/items in `ProjectStartedEventArgs`. Given there is a workaround (`MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` or ChangeWave) - we might want to go forward and then work with possible affected partners (as move from consuming props from `ProjectStartedEventArgs` to consuming them from `ProjectEvaluationFinishedEventArgs` requires minimal code changes).\r\n\r\n**note:** For each scenario it's important to start fresh (killing msbuild nodes, or at least change code and rebuild) - to prevent the results to be served from cache!\r\n\r\n### This PR as is\r\n\r\n```\r\n> $env:MSBUILDDEBUGPATH=\"C:\\temp\\ConsoleApplication3\\logs\"\r\n> $env:MSBUILDDEBUGENGINE = 1\r\n> $env:MSBUILDLOGIMPORTS = 1\r\n> & \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\Common7\\IDE\\devenv.exe\" \"C:\\temp\\ConsoleApplication3\\ConsoleApplication3.sln\"\r\n```\r\nIssue is **not present**:\r\n\r\n<img width=\"511\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/195d3510-d2be-408e-bb03-79ff4dcb7ef3\">\r\n\r\n\r\n### Opt-out props after eval\r\n\r\n```\r\n> $env:MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION = 0\r\n```\r\n\r\nIssue is **present** (by design - as data is explicitly opted out):\r\n\r\n<img width=\"564\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/9bb7b5c1-dcc7-4418-819d-db884f06c320\">\r\n\r\n\r\n### ChangeWave opt-out\r\n\r\n```\r\n> $env:MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION = ''\r\n> $env:MSBUILDDISABLEFEATURESFROMVERSION = '17.12'\r\n```\r\n\r\n<img width=\"515\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/3c019048-3385-4913-abae-4e20a4c80a98\">\r\n\r\n\r\nFYI: @olgaark, @yuehuang010 \r\n",
        "createdAt": "2024-06-19T07:25:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Or there is another - more conservative - approach: send props on ProjectStartedEventArgs if all loggers are legacy, send them on ProjectEvaluationFinishedEventArgs if all loggers are enlightened and in the mixture case send the props on both events. I'll work on this (+ measure) in 2 weeks",
        "createdAt": "2024-06-19T21:05:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "A page I wrote to document the whole business around enlightening loggers:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/Reading-project-properties-and-items-from-a-logger",
        "createdAt": "2024-06-21T01:50:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Sorry wrong PR :) ",
        "createdAt": "2024-08-02T06:47:35Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "don't forget to add the argument name for null",
              "createdAt": "2024-06-17T19:23:21Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -82,7 +82,7 @@ public BuildManager_Tests(ITestOutputHelper output)\n                 EnableNodeReuse = false\n             };\n             _buildManager = new BuildManager();\n-            _projectCollection = new ProjectCollection();\n+            _projectCollection = new ProjectCollection(null, _parameters.Loggers, ToolsetDefinitionLocations.Default);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Do we have any tests that checks the properties and items in ProjectStartedEventArgs? Given that we still support them being there for some cases, we should have some test for it.",
              "createdAt": "2024-07-24T09:07:10Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -137,8 +137,8 @@ public void SimpleBuild()\n             _logger.AssertLogContains(\"[success]\");\n             Assert.Single(_logger.ProjectStartedEvents);\n \n-            ProjectStartedEventArgs projectStartedEvent = _logger.ProjectStartedEvents[0];",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Yes - e.g. `OutOfProcNodeForwardCertainproperties` or the tests that explicitly set `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` to '0'",
              "createdAt": "2024-07-25T14:41:19Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -137,8 +137,8 @@ public void SimpleBuild()\n             _logger.AssertLogContains(\"[success]\");\n             Assert.Single(_logger.ProjectStartedEvents);\n \n-            ProjectStartedEventArgs projectStartedEvent = _logger.ProjectStartedEvents[0];",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarify why we are changing the event here in the tests? \r\nQuestions: \r\n- Does it mean we are moving coverage from one even to another? \r\n- If yes Shall we rename the `ExtractProjectStartedPropertyList` to `ExtractProjectEvaluationFinishedEvent`?",
              "createdAt": "2024-07-25T12:20:37Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -254,8 +254,8 @@ public void SimpleGraphBuild()\n             _logger.AssertLogContains(\"[success]\");\n             _logger.ProjectStartedEvents.Count.ShouldBe(1);\n \n-            ProjectStartedEventArgs projectStartedEvent = _logger.ProjectStartedEvents[0];\n-            Dictionary<string, string> properties = ExtractProjectStartedPropertyList(projectStartedEvent.Properties);\n+            ProjectEvaluationFinishedEventArgs evalFinishedEvent = _logger.EvaluationFinishedEvents[0];",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Based on the setting of `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` and the fact if loggers explicitly opt into getting properties on EvaluationFinished event - via calling in logger initialization:\r\n\r\n```\r\n            if (eventSource is IEventSource4 eventSource4)\r\n            {\r\n                eventSource4.IncludeEvaluationPropertiesAndItems();\r\n            }\r\n```\r\n\r\nThe properteis can be populated on the ProjectStarted or ProjectEvaluationFinished - both cases are possible, and both cases are tested in those tests.\r\n\r\n\r\nThe method should be renamed to simple `ExtractPropertyList` - good point!",
              "createdAt": "2024-07-25T14:44:27Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -254,8 +254,8 @@ public void SimpleGraphBuild()\n             _logger.AssertLogContains(\"[success]\");\n             _logger.ProjectStartedEvents.Count.ShouldBe(1);\n \n-            ProjectStartedEventArgs projectStartedEvent = _logger.ProjectStartedEvents[0];\n-            Dictionary<string, string> properties = ExtractProjectStartedPropertyList(projectStartedEvent.Properties);\n+            ProjectEvaluationFinishedEventArgs evalFinishedEvent = _logger.EvaluationFinishedEvents[0];",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}