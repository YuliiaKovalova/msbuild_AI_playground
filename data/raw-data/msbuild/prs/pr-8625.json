{
  "number": 8625,
  "title": "Emulate AssignProjectConfiguration behavior in graph construction",
  "body": "### Summary\r\nThe for sln-based builds, the `AssignProjectConfiguration` task ends up using the Configuration and Platform defined in the sln rather than passing through the global properties from the referencing project or attempting to do dynamic platform negotiation. This change adds equivalent functionality to graph construction.\r\n\r\nA concrete scenario this fixes for graph-based builds using an sln file is that most csproj define the \"x86\" platform while most vcxproj define \"Win32\". Previously for a graph build, if the csproj referenced the vcxproj, the platform passed to vcxproj would be x86, not Win32. Even worse, the vcxproj would be an entry point anyway, so it would double-build with both x86 AND Win32, which leads to race conditions.\r\n\r\n### Customer Impact\r\nMicrosoft-internal customer using sln-based builds will be able to opt-into graph builds\r\n\r\n### Regression?\r\nNo\r\n\r\n### Testing\r\nManual validation in the customer repo, as well as added unit tests\r\n\r\n### Risk\r\nLow. Graph builds are a less-used feature, and this adds parity to what non-graph builds and VS-based builds do. It's unlikely that any behavioral change would be impactful due to those other scenarios presumably working for customers who may be using graph builds.",
  "state": "MERGED",
  "createdAt": "2023-04-03T21:09:15Z",
  "updatedAt": "2023-04-26T00:01:50Z",
  "closedAt": "2023-04-25T22:56:35Z",
  "mergedAt": "2023-04-25T22:56:35Z",
  "additions": 262,
  "deletions": 64,
  "changedFiles": 8,
  "headRefName": "graph-reference-sln-config",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cc4fd194977c5b9e5b511ca2c96cb578b9411d7b",
          "message": "Emulate AssignProjectConfiguration behavior in graph construction",
          "committedDate": "2023-04-03T21:19:31Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "661873bcd42508d4e68efc780ee0c4543fcc0718",
          "message": "Fix UTs",
          "committedDate": "2023-04-03T22:38:09Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b19f414cb5eadf96041c06d20601bba53865a657",
          "message": "Fix unresolved projects",
          "committedDate": "2023-04-04T00:04:29Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1bc5955d1007002b35d914f46fcb7aa47cad733",
          "message": "PR comments",
          "committedDate": "2023-04-17T17:19:39Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81d42b01b9872f99d0222df4aafe8f5baf945ab3",
          "message": "Merge remote-tracking branch 'upstream/vs17.6' into graph-reference-sln-config",
          "committedDate": "2023-04-25T21:48:47Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-04-24T18:39:59Z",
        "author": null
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Note: I'm not planning on addressing this TODO in this PR. Dynamic platform resolution already deviated from this pattern, so a future PR should fix both of these.",
              "createdAt": "2023-04-03T21:16:06Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,60 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wish this wasn't a realloc'ing change, but not quite enough to tell you you have to rewrite to use a builder . . .",
              "createdAt": "2023-04-17T15:46:40Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -272,9 +272,12 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n                         string.Join(\";\", solution.SolutionParserErrorCodes)));\n             }\n \n-            var projectsInSolution = GetBuildableProjects(solution);\n+            IReadOnlyCollection<ProjectInSolution> projectsInSolution = GetBuildableProjects(solution);\n \n-            var currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionGlobalProperties);\n+            SolutionConfigurationInSolution currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionGlobalProperties);\n+\n+            string solutionConfigurationXml = SolutionProjectGenerator.GetSolutionConfiguration(solution, currentSolutionConfiguration);\n+            solutionGlobalProperties = solutionGlobalProperties.SetItem(\"CurrentSolutionConfigurationContents\", solutionConfigurationXml);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh that's easy enough to do",
              "createdAt": "2023-04-17T17:02:07Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -272,9 +272,12 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n                         string.Join(\";\", solution.SolutionParserErrorCodes)));\n             }\n \n-            var projectsInSolution = GetBuildableProjects(solution);\n+            IReadOnlyCollection<ProjectInSolution> projectsInSolution = GetBuildableProjects(solution);\n \n-            var currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionGlobalProperties);\n+            SolutionConfigurationInSolution currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionGlobalProperties);\n+\n+            string solutionConfigurationXml = SolutionProjectGenerator.GetSolutionConfiguration(solution, currentSolutionConfiguration);\n+            solutionGlobalProperties = solutionGlobalProperties.SetItem(\"CurrentSolutionConfigurationContents\", solutionConfigurationXml);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure I understand this comment. The latter two do become global props, right?",
              "createdAt": "2023-04-17T15:59:33Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`Configuration` and `Platform` become global props, but not `SetConfiguration` and `SetPlatform`.",
              "createdAt": "2023-04-17T16:32:17Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Basically this is describing how the behavior differs from `AssignProjectConfiguration`. Specifically if you look at `AssignProjectConfiguration.ResolveProject`, you'll see it sets `FullConfiguration`, `SetConfiguration`, `Configuration`, `SetPlatform`, and `Platform` as metadata. Only some of those item metadata actually translate to global properties in the evental `<MSBuild>` task call.",
              "createdAt": "2023-04-17T16:35:19Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "I suppose actually the `SetConfiguration` item metadata -> `Configuration` global prop, and same with platform. So I guess it's actually the `FullConfiguration`, `Configuration`, and `Platform` item metadata which are ignored here. I dunno it's kinda confusing either way. Open to suggestion on how to clarify this comment.",
              "createdAt": "2023-04-17T16:37:08Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Attempted to clarify, but open to further suggestion",
              "createdAt": "2023-04-17T17:20:00Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "That works for me!",
              "createdAt": "2023-04-17T18:35:53Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -118,22 +119,55 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             requesterInstance.FullPath));\n                 }\n \n-                var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                string projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);\n+                bool enableDynamicPlatformResolution = ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName));\n+\n+                PropertyDictionary<ProjectPropertyInstance> referenceGlobalProperties = GetGlobalPropertiesForItem(\n+                    projectReferenceItem,\n+                    requesterInstance.GlobalPropertiesDictionary,\n+                    // Only allow reuse in scenarios where we will not mutate the collection.\n+                    // TODO: Should these mutations be moved to globalPropertiesModifiers in the future?\n+                    allowCollectionReuse: solutionConfiguration == null && !enableDynamicPlatformResolution,\n+                    globalPropertiesModifiers);\n \n-                var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)), globalPropertiesModifiers);\n+                // Match what AssignProjectConfiguration does to resolve project references.\n+                if (solutionConfiguration != null)\n+                {\n+                    string projectGuid = projectReferenceItem.GetMetadataValue(ProjectMetadataName);\n+                    if (solutionConfiguration.TryGetProjectByGuid(projectGuid, out XmlElement projectElement)\n+                        || solutionConfiguration.TryGetProjectByAbsolutePath(projectReferenceFullPath, out projectElement))\n+                    {\n+                        // Note: AssignProjectConfiguration sets FullConfiguration, SetConfiguration, and SetPlatform on the item, but these do not translate to global properties.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}