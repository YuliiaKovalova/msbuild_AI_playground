{
  "number": 10100,
  "title": "[BuildCheck] Add OM and infra for tracking task invocations",
  "body": "Contributes to #9881\r\n\r\n### Context\r\n\r\nSome build checks will want to analyze tasks executed during build. This PR is adding support for these by introducing several new types and implementing processing of task-related logger events in `BuildEventsProcessor`.\r\n\r\n### Changes Made\r\n\r\n- Added `RegisterTaskInvocationAction` for analyzers to call to subscribe to task events.\r\n- Added `TaskInvocationAnalysisData` as a unit of reporting task events to analyzers.\r\n- Implemented a transform from `TaskStartedEventArgs`, `TaskFinishedEventArgs`, and `TaskParameterEventArgs` to `TaskInvocationAnalysisData`.\r\n\r\n### Testing\r\n\r\nNew unit tests.\r\n",
  "state": "MERGED",
  "createdAt": "2024-05-03T10:39:21Z",
  "updatedAt": "2024-05-13T13:35:35Z",
  "closedAt": "2024-05-13T13:35:35Z",
  "mergedAt": "2024-05-13T13:35:35Z",
  "additions": 431,
  "deletions": 15,
  "changedFiles": 16,
  "headRefName": "9881-task-infra",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a481c29f770882525827c6fa088282d1c57b1bcb",
          "message": "Add OM and infra for tracking task invocations",
          "committedDate": "2024-05-10T07:01:23Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50e046424c8b2aefdcfb6476e4e65bc02d20d06b",
          "message": "Fix test",
          "committedDate": "2024-05-10T07:01:25Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e7a58a1ab0993e9895704a308b45aaf89b2c933",
          "message": "PR feedback",
          "committedDate": "2024-05-10T07:01:25Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08ef53b89f7f6d8a457b0e30d5a7ac5cbc0dc19e",
          "message": "Fix test after rebase",
          "committedDate": "2024-05-10T07:05:21Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41f1bca43d750b2195f8357f5792a558500ddb25",
          "message": "PR feedback: Rework location information",
          "committedDate": "2024-05-10T10:16:35Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9a6fb9a897de65e6a550056a652f65253b8c039",
          "message": "Use normal verbosity logging in tests",
          "committedDate": "2024-05-10T13:58:30Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7b59a7b041fd43eb4dd4014e2fb19b4743b391cb",
          "message": "Add comment on TaskParameter",
          "committedDate": "2024-05-10T21:44:04Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "261e4bbbccd219cedb461b364d1f67954219c1b1",
          "message": "Don't look for test analyzers on nuget.org",
          "committedDate": "2024-05-13T10:48:00Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d912eb0a04fa7d65fcccb444d0a355e5092c3a0d",
          "message": "Revert \"Don't look for test analyzers on nuget.org\"\n\nThis reverts commit 261e4bbbccd219cedb461b364d1f67954219c1b1.",
          "committedDate": "2024-05-13T12:22:07Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thank you for the quick review.\r\n\r\n> Btw. - don't you want to extend the TaskParameterEventArgs as part of this PR? If not - would be nice to have addition PR for that - possibly merged prior this one.\r\n\r\nThe fact that assigning task outputs to properties is currently logged as text messages will need to be addressed in a careful and viewer-friendly way. Let me think about it a bit. I would prefer to do it in a separate PR without blocking this one. It should not be an issue for the double writes analyzer, for example.",
        "createdAt": "2024-05-03T13:11:34Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Thank you for the quick review.\r\n> \r\n> > Btw. - don't you want to extend the TaskParameterEventArgs as part of this PR? If not - would be nice to have addition PR for that - possibly merged prior this one.\r\n> \r\n> The fact that assigning task outputs to properties is currently logged as text messages will need to be addressed in a careful and viewer-friendly way. Let me think about it a bit. I would prefer to do it in a separate PR without blocking this one. It should not be an issue for the double writes analyzer, for example.\r\n\r\nFYI @KirillOsenkov - just a heads up that another change is comming ;-) But I bet that move from textual to structured info is allways appreciated.",
        "createdAt": "2024-05-04T10:12:26Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Do we have a sample analyzer that would exercise this? It's always better to design APIs driven by a real-world use case. Would love to see how this API can be used at the consumer side.",
        "createdAt": "2024-05-05T22:01:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "True that we don't currently have an analyzer that would need this. It is motivated by completeness - when something is interested in task parameters, it feels natural to provide both inputs and outputs.\r\n\r\nThe current model follows the MSBuild syntax: The viewer renders `Parameters` (input parameters), `OutputProperties` (output parameters that are assigned to props), and `OutputItems` (output parameters that are assigned to items). As an analyzer author I think I would expect the model to be task centric, i.e. I wouldn't so much be interested in where the output is going, but I would want to know the name of the output parameter so I can implement rules like \"output parameter Foo of task Bar always has this particular shape\". And again, the major issue is that the name \"Foo\" is currently not included anywhere. If a task assigns multiple output parameters to the same item, for example, the binlog is ambiguous.",
        "createdAt": "2024-05-06T07:08:30Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Here's what I'm planning to do to address the missing output parameter name issue: https://github.com/ladipro/msbuild/pull/1/files\r\nI will continue after this PR is merged.",
        "createdAt": "2024-05-10T15:30:52Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I am looking for feedback on the name. This could for example be \"execution\" instead of \"invocation\": `RegisterTaskExecutionAction`.",
              "createdAt": "2024-05-03T10:41:25Z",
              "path": "src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs",
              "diffHunk": "@@ -9,4 +9,5 @@ public interface IBuildCheckRegistrationContext\n {\n     void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n     void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+    void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "This feels nicely descriptive - I'd leave as is",
              "createdAt": "2024-05-10T16:32:03Z",
              "path": "src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs",
              "diffHunk": "@@ -9,4 +9,5 @@ public interface IBuildCheckRegistrationContext\n {\n     void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n     void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+    void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is unfortunate and will very likely require a separate PR to extend `TaskParameterEventArgs` so it carries the name of the parameter as well. Currently it has only the name of the item we're assigning the parameter to.\r\n\r\nAssignments to properties (`<Output TaskParameter=\"...\" PropertyName=\"...\" />`) are not logged with `TaskParameterEventArgs` at all.",
              "createdAt": "2024-05-03T10:46:14Z",
              "path": "src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs",
              "diffHunk": "@@ -0,0 +1,144 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+using static Microsoft.Build.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n+\n+namespace Microsoft.Build.BuildCheck.UnitTests\n+{\n+    public class TaskInvocationAnalysisDataTests : IDisposable\n+    {\n+        internal sealed class TestAnalyzer : BuildAnalyzer\n+        {\n+            #region BuildAnalyzer initialization\n+\n+            public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0000\", \"TestRule\", \"TestDescription\", \"TestMessage\",\n+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+            public override string FriendlyName => \"MSBuild.TestAnalyzer\";\n+\n+            public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n+\n+            public override void Initialize(ConfigurationContext configurationContext)\n+            { }\n+\n+            public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+            {\n+                registrationContext.RegisterTaskInvocationAction(TaskInvocationAction);\n+            }\n+\n+            #endregion\n+\n+            /// <summary>\n+            /// Stores all TaskInvocationAnalysisData reported during the build.\n+            /// </summary>\n+            public List<TaskInvocationAnalysisData> AnalysisData = new();\n+\n+            private void TaskInvocationAction(BuildCheckDataContext<TaskInvocationAnalysisData> context)\n+            {\n+                AnalysisData.Add(context.Data);\n+            }\n+        }\n+\n+        private static TestAnalyzer? s_testAnalyzer;\n+\n+        public TaskInvocationAnalysisDataTests()\n+        {\n+            BuildCheckManager.s_testFactoriesPerDataSource =\n+            [\n+                // BuildCheckDataSource.EventArgs\n+                [\n+                    ([TestAnalyzer.SupportedRule.Id], true, () => (s_testAnalyzer = new TestAnalyzer())),\n+                ],\n+                // BuildCheckDataSource.Execution\n+                [],\n+            ];\n+\n+            s_testAnalyzer?.AnalysisData.Clear();\n+        }\n+\n+        public void Dispose()\n+        {\n+            BuildCheckManager.s_testFactoriesPerDataSource = null;\n+        }\n+\n+        private void BuildProject(string taskInvocation)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var testProject = env.CreateTestProjectWithFiles($\"<Project><Target Name=\\\"Build\\\">{taskInvocation}</Target></Project>\");\n+\n+                using (var buildManager = new BuildManager())\n+                {\n+                    var request = new BuildRequestData(testProject.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, [], null, BuildRequestDataFlags.None);\n+                    var parameters = new BuildParameters\n+                    {\n+                        LogTaskInputs = true,\n+                        IsBuildCheckEnabled = true,\n+                        ShutdownInProcNodeOnBuildFinish = true,\n+                    };\n+\n+                    var result = buildManager.Build(parameters, request);\n+\n+                    result.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+\n+                foreach (var data in s_testAnalyzer!.AnalysisData)\n+                {\n+                    data.ProjectFilePath.ShouldBe(testProject.ProjectFile);\n+                    data.LineNumber.ShouldBeGreaterThan(0);\n+                    data.ColumnNumber.ShouldBeGreaterThan(0);\n+                }\n+            }\n+        }\n+\n+        [Fact]\n+        public void ReportsSimpleTaskParameters()\n+        {\n+            BuildProject(\"<Message Text='Hello'/>\");\n+\n+            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);\n+            var data = s_testAnalyzer.AnalysisData[0];\n+            data.TaskName.ShouldBe(\"Message\");\n+            data.Parameters.Count.ShouldBe(1);\n+            data.Parameters[\"Text\"].IsOutput.ShouldBe(false);\n+            data.Parameters[\"Text\"].Value.ShouldBe(\"Hello\");\n+        }\n+\n+        [Fact]\n+        public void ReportsComplexTaskParameters()\n+        {\n+            BuildProject(\"\"\"\n+                <ItemGroup>\n+                  <TestItem Include='item1;item2'/>\n+                </ItemGroup>\n+                <CombinePath BasePath='base' Paths='@(TestItem)'>\n+                    <Output TaskParameter='CombinedPaths' ItemName='OutputDirectories' />\n+                </CombinePath>\n+            \"\"\");\n+\n+            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);\n+            var data = s_testAnalyzer.AnalysisData[0];\n+            data.TaskName.ShouldBe(\"CombinePath\");\n+            data.Parameters.Count.ShouldBe(3);\n+\n+            data.Parameters[\"Paths\"].IsOutput.ShouldBe(false);\n+            data.Parameters[\"Paths\"].Value.ShouldBeAssignableTo(typeof(IList));\n+            IList listValue = (IList)data.Parameters[\"Paths\"].Value!;\n+            listValue.Count.ShouldBe(2);\n+            listValue[0]!.ToString().ShouldBe(\"item1\");\n+            listValue[1]!.ToString().ShouldBe(\"item2\");\n+\n+            // The name of the parameter would ideally be \"CombinedPaths\" but we don't seem to be currently logging it.\n+            data.Parameters[\"OutputDirectories\"].IsOutput.ShouldBe(true);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Follow-up work will be based on https://github.com/ladipro/msbuild/pull/1.",
              "createdAt": "2024-05-10T15:32:46Z",
              "path": "src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs",
              "diffHunk": "@@ -0,0 +1,144 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+using System.Collections.Generic;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+using static Microsoft.Build.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n+\n+namespace Microsoft.Build.BuildCheck.UnitTests\n+{\n+    public class TaskInvocationAnalysisDataTests : IDisposable\n+    {\n+        internal sealed class TestAnalyzer : BuildAnalyzer\n+        {\n+            #region BuildAnalyzer initialization\n+\n+            public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0000\", \"TestRule\", \"TestDescription\", \"TestMessage\",\n+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+            public override string FriendlyName => \"MSBuild.TestAnalyzer\";\n+\n+            public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n+\n+            public override void Initialize(ConfigurationContext configurationContext)\n+            { }\n+\n+            public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+            {\n+                registrationContext.RegisterTaskInvocationAction(TaskInvocationAction);\n+            }\n+\n+            #endregion\n+\n+            /// <summary>\n+            /// Stores all TaskInvocationAnalysisData reported during the build.\n+            /// </summary>\n+            public List<TaskInvocationAnalysisData> AnalysisData = new();\n+\n+            private void TaskInvocationAction(BuildCheckDataContext<TaskInvocationAnalysisData> context)\n+            {\n+                AnalysisData.Add(context.Data);\n+            }\n+        }\n+\n+        private static TestAnalyzer? s_testAnalyzer;\n+\n+        public TaskInvocationAnalysisDataTests()\n+        {\n+            BuildCheckManager.s_testFactoriesPerDataSource =\n+            [\n+                // BuildCheckDataSource.EventArgs\n+                [\n+                    ([TestAnalyzer.SupportedRule.Id], true, () => (s_testAnalyzer = new TestAnalyzer())),\n+                ],\n+                // BuildCheckDataSource.Execution\n+                [],\n+            ];\n+\n+            s_testAnalyzer?.AnalysisData.Clear();\n+        }\n+\n+        public void Dispose()\n+        {\n+            BuildCheckManager.s_testFactoriesPerDataSource = null;\n+        }\n+\n+        private void BuildProject(string taskInvocation)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var testProject = env.CreateTestProjectWithFiles($\"<Project><Target Name=\\\"Build\\\">{taskInvocation}</Target></Project>\");\n+\n+                using (var buildManager = new BuildManager())\n+                {\n+                    var request = new BuildRequestData(testProject.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, [], null, BuildRequestDataFlags.None);\n+                    var parameters = new BuildParameters\n+                    {\n+                        LogTaskInputs = true,\n+                        IsBuildCheckEnabled = true,\n+                        ShutdownInProcNodeOnBuildFinish = true,\n+                    };\n+\n+                    var result = buildManager.Build(parameters, request);\n+\n+                    result.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+\n+                foreach (var data in s_testAnalyzer!.AnalysisData)\n+                {\n+                    data.ProjectFilePath.ShouldBe(testProject.ProjectFile);\n+                    data.LineNumber.ShouldBeGreaterThan(0);\n+                    data.ColumnNumber.ShouldBeGreaterThan(0);\n+                }\n+            }\n+        }\n+\n+        [Fact]\n+        public void ReportsSimpleTaskParameters()\n+        {\n+            BuildProject(\"<Message Text='Hello'/>\");\n+\n+            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);\n+            var data = s_testAnalyzer.AnalysisData[0];\n+            data.TaskName.ShouldBe(\"Message\");\n+            data.Parameters.Count.ShouldBe(1);\n+            data.Parameters[\"Text\"].IsOutput.ShouldBe(false);\n+            data.Parameters[\"Text\"].Value.ShouldBe(\"Hello\");\n+        }\n+\n+        [Fact]\n+        public void ReportsComplexTaskParameters()\n+        {\n+            BuildProject(\"\"\"\n+                <ItemGroup>\n+                  <TestItem Include='item1;item2'/>\n+                </ItemGroup>\n+                <CombinePath BasePath='base' Paths='@(TestItem)'>\n+                    <Output TaskParameter='CombinedPaths' ItemName='OutputDirectories' />\n+                </CombinePath>\n+            \"\"\");\n+\n+            s_testAnalyzer!.AnalysisData.Count.ShouldBe(1);\n+            var data = s_testAnalyzer.AnalysisData[0];\n+            data.TaskName.ShouldBe(\"CombinePath\");\n+            data.Parameters.Count.ShouldBe(3);\n+\n+            data.Parameters[\"Paths\"].IsOutput.ShouldBe(false);\n+            data.Parameters[\"Paths\"].Value.ShouldBeAssignableTo(typeof(IList));\n+            IList listValue = (IList)data.Parameters[\"Paths\"].Value!;\n+            listValue.Count.ShouldBe(2);\n+            listValue[0]!.ToString().ShouldBe(\"item1\");\n+            listValue[1]!.ToString().ShouldBe(\"item2\");\n+\n+            // The name of the parameter would ideally be \"CombinedPaths\" but we don't seem to be currently logging it.\n+            data.Parameters[\"OutputDirectories\"].IsOutput.ShouldBe(true);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can `RegisterCustomAnalyzers` be used instead?",
              "createdAt": "2024-05-03T11:38:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I don't think I have an instance to call it on. Oh, but acquisition is now in a state that I should be able to register test analyzers directly from project files, is that correct?",
              "createdAt": "2024-05-03T12:51:55Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "That's correct. But regardless of acquisition state - the custom analyzer registration just takes a factory method - so any implementation of BuildAnalyzer can be injected this way as well.",
              "createdAt": "2024-05-04T09:51:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "At the risk of stating the obvious and not seeing a straightforward solution - the issue here is that `RegisterCustomAnalyzers` is an instance method on `BuildCheckManager` and there's no easy way to get to it from a test. I guess we could get to it through `BuildCheckManagerProvider.GlobalInstance` and a type cast. But it makes we wonder if we shouldn't expose programmatic custom analyzer registration publicly on e.g. `BuildParameters`, similar to loggers.",
              "createdAt": "2024-05-05T20:28:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I believe the type was recently test exposed by @YuliiaKovalova \r\n\r\nOverall the initial code wasn't quite component testing friendly and needs adjustments. Your current change or this suggestion are step forward in that direction, though just constructing in tests might be simplest solution.",
              "createdAt": "2024-05-07T08:09:45Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "All is good - I misunderstood the scenario (e2e tests cannot use the instance of BuildCheckManager as it deosn't exist at the test setup time)",
              "createdAt": "2024-05-10T07:28:27Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -137,11 +137,23 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n             []\n         ];\n \n+        /// <summary>\n+        /// For tests only. TODO: Remove when analyzer acquisition is done.\n+        /// </summary>\n+        internal static (string[] ruleIds, bool defaultEnablement, BuildAnalyzerFactory factory)[][]? s_testFactoriesPerDataSource;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably skip the processing here if there are no downstream analyzers consuming the data.\r\nSomething similar to checking `_buildCheckCentralContext.HasParsedItemsActions` in the `ProcessEvaluationFinishedEventArgs` handler",
              "createdAt": "2024-05-03T11:43:35Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs",
              "diffHunk": "@@ -55,6 +73,74 @@ internal class BuildEventsProcessor(BuildCheckCentralContext buildCheckCentralCo\n         }\n     }\n \n+    internal void ProcessTaskStartedEventArgs(\n+        AnalyzerLoggingContext buildAnalysisContext,\n+        TaskStartedEventArgs taskStartedEventArgs)\n+    {",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Done, thank you!",
              "createdAt": "2024-05-03T13:08:04Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs",
              "diffHunk": "@@ -55,6 +73,74 @@ internal class BuildEventsProcessor(BuildCheckCentralContext buildCheckCentralCo\n         }\n     }\n \n+    internal void ProcessTaskStartedEventArgs(\n+        AnalyzerLoggingContext buildAnalysisContext,\n+        TaskStartedEventArgs taskStartedEventArgs)\n+    {",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this needed?",
              "createdAt": "2024-05-03T11:47:11Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -3,6 +3,7 @@\n \n using System;\n using System.Collections.Generic;\n+using System.Globalization;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It is not. Fixed!",
              "createdAt": "2024-05-03T13:07:51Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -3,6 +3,7 @@\n \n using System;\n using System.Collections.Generic;\n+using System.Globalization;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels a bit confusing - the location (line, column) is on the base together with the ProjectFile - which seems to guide towards the position being applied to the project file.\r\n\r\nI was thinking about `IMsBuildElementLocation`: https://github.com/dotnet/msbuild/pull/10009/files#diff-0f140651548f5f9a51e0d3dc1cc4b5e84cb27e1a4afa361b720fbfb9bc3067c1R19, but I'm more then open to any other suggestions. But I still feel a bit opinionated about the three parts of the location (file, line, column) should be part of a single representation.",
              "createdAt": "2024-05-03T11:53:05Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> This feels a bit confusing - the location (line, column) is on the base together with the ProjectFile - which seems to guide towards the position being applied to the project file.\r\n\r\nIt is applied to the project file. It's the line/column where the task is called. Having everything encapsulated in one type would be nicer, I agree, but don't we still have callbacks that are inherently without line/column info like the existing `EvaluatedPropertiesAnalysisData` but are still associated with a file?",
              "createdAt": "2024-05-03T12:59:03Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Aha, sorry, you're pointing out the difference between project file where the particular thing is located vs. project file being built. This makes sense!",
              "createdAt": "2024-05-03T12:59:57Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yeah - now I realize the initialization of the AnalysisData.ProjectFilePath here is likely not correct - it allways needs to be the build project - basically the one to which we apply the editorconfig rules (as their are applied based on that member).\r\n\r\nWe can have projectA.csproj importing the contoso.targets, where the later contains taskX task invocation. The TaskInvocationAnalysisData.ProjectFilePath must point to projectA.csproj (for the configuration correctness). But we as well want to have proper location info for reporting corectness - that should point to contoso.targets",
              "createdAt": "2024-05-04T10:02:02Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I have pushed an update to fix this. The `ProjectFile` in event args really is the project being built. `TaskStartedEventArgs.TaskFile` is the file where the task is invoked from, which together with `LineNumber` and `ColumnNumber` makes a complete location information to be reported by build checks.",
              "createdAt": "2024-05-10T10:23:29Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'm blind :-) - but I do not see the location info (filename, line, col) - just the task assembly location",
              "createdAt": "2024-05-10T12:57:14Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/blob/41f1bca43d750b2195f8357f5792a558500ddb25/src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs#L78",
              "createdAt": "2024-05-10T13:32:19Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "See - I told you I'm blind! :-D\r\n\r\nThanks ;-)",
              "createdAt": "2024-05-10T16:29:27Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +54,47 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisDataWithLocation",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Note for self: this should ideally be decided on the node after 1st pass ov evaluation and reading of editorconfig. Though it'd as well require the custom analyzers to someho indicate during their registration via the property function what data sources they'll need (to avoid a need to load and register the analyzer in the worker node just for finding it's registrations. And registration in the main node is too late as it happens already after the ProjectEvaluationStartedBuildEventArgs are received - at which point the node can already be running the execution phase)",
              "createdAt": "2024-05-03T12:01:33Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1336,7 +1336,7 @@ private static void ResetGatheringSwitchesState()\n                 // This is a hack for now to make sure the perf hit only happens\n                 // on diagnostic. This should be changed to pipe it through properly,\n                 // perhaps as part of a fuller tracing feature.\n-                bool logTaskInputs = verbosity == LoggerVerbosity.Diagnostic;\n+                bool logTaskInputs = verbosity == LoggerVerbosity.Diagnostic || isBuildCheckEnabled;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please add an xml comment here. Especially the `Value` might need explanation about possible types, scalar vs list values...",
              "createdAt": "2024-05-10T16:46:40Z",
              "path": "src/Build/BuildCheck/OM/ParsedItemsAnalysisData.cs",
              "diffHunk": "@@ -53,3 +50,45 @@ public class ParsedItemsAnalysisData : AnalysisData\n \n     public ItemsHolder ItemsHolder { get; }\n }\n+\n+/// <summary>\n+/// BuildCheck OM data representing a task executed by a project.\n+/// </summary>\n+public sealed class TaskInvocationAnalysisData : AnalysisData\n+{\n+    public record class TaskParameter(object? Value, bool IsOutput);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}