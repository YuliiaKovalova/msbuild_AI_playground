{
  "number": 8834,
  "title": "Reduce allocations due to dictionary resizing",
  "body": "Fixes [AB#1826604](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1826604)\r\n\r\nThis change allows the metadata dictionary to be constructed with the expected size, rather than some default size which is then subject to resizing (and increased GC pressure).\r\n\r\nThis code path was identified as a top contributor to GC pauses by GCPauseWatson.\r\n\r\nAlso null annotated the types involved (in a separate commit).",
  "state": "MERGED",
  "createdAt": "2023-06-04T12:29:10Z",
  "updatedAt": "2023-06-08T21:07:20Z",
  "closedAt": "2023-06-08T14:42:11Z",
  "mergedAt": "2023-06-08T14:42:11Z",
  "additions": 16,
  "deletions": 17,
  "changedFiles": 3,
  "headRefName": "dev/drnoakes/fix-1826604-evaluator-metadata-dictionary-resizing",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e62d779e79c3423b04e1837d695b274d6b8b4745",
          "message": "Null annotate IMetadataTable and EvaluatorMetadataTable",
          "committedDate": "2023-06-07T13:25:56Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75f29177b1ca451f399c9d587f6e7b11849c1aaf",
          "message": "Reduce allocations due to dictionary resizing\n\nThe change allows the metadata dictionary to be constructed with the expected size, rather than some default size which is then subject to resizing (and increased GC pressure).",
          "committedDate": "2023-06-07T13:25:57Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Per comments and the implementation in `EvaluatorMetadataTable`, these methods never return null. Did you have to make it return a nullable type because not all implementations are null-annotated?",
              "createdAt": "2023-06-06T07:26:04Z",
              "path": "src/Build/Evaluation/IMetadataTable.cs",
              "diffHunk": "@@ -14,19 +12,19 @@ internal interface IMetadataTable\n         /// Retrieves any value we have in our metadata table for the metadata name specified.\n         /// If no value is available, returns empty string.\n         /// </summary>\n-        string GetEscapedValue(string name);\n+        string? GetEscapedValue(string name);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good question. I'll switch back to this branch in the next day or so and check. Taking a quick look at the implementations of this interface they all seem to `?? string.Empty`, so I can't see why it's a nullable return.\r\n\r\nThe docs for the methods below also say `itemType` can be null, so I'll check that too.",
              "createdAt": "2023-06-06T08:57:52Z",
              "path": "src/Build/Evaluation/IMetadataTable.cs",
              "diffHunk": "@@ -14,19 +12,19 @@ internal interface IMetadataTable\n         /// Retrieves any value we have in our metadata table for the metadata name specified.\n         /// If no value is available, returns empty string.\n         /// </summary>\n-        string GetEscapedValue(string name);\n+        string? GetEscapedValue(string name);",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Took a proper look and yes, it's only `GetEscapedValueIfPresent` that can return null. And both `itemType` parameters may be null too. Updated.",
              "createdAt": "2023-06-07T13:26:45Z",
              "path": "src/Build/Evaluation/IMetadataTable.cs",
              "diffHunk": "@@ -14,19 +12,19 @@ internal interface IMetadataTable\n         /// Retrieves any value we have in our metadata table for the metadata name specified.\n         /// If no value is available, returns empty string.\n         /// </summary>\n-        string GetEscapedValue(string name);\n+        string? GetEscapedValue(string name);",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}