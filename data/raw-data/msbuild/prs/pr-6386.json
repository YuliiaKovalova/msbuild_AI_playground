{
  "number": 6386,
  "title": "Schedule proxy builds to inproc node",
  "body": "### Context\r\nProxy builds are what project caches issue on cache hits. They are a cheap version of the expensive targets that were avoided by the cache. They need to produce the same properties and items the expensive target produced, but with none of the CPU / IO expensive stuff.\r\n\r\nThe proxy builds are super cheap because they only return properties / items. It is not worth scheduling them to out of proc nodes because:\r\n- IPC overhead\r\n- when they get scheduled to out of proc nodes they get re-evaluated. This is wasted computation because proxy builds are guaranteed to get evaluated on the scheduler node (where the inproc node resides)\r\n\r\nScheduling proxy builds to the inproc node makes a project cache build with full cache hits 16% faster.\r\n\r\n\r\n### Changes Made\r\nDuplicated what the scheduler does to confine traversal projects to the inproc node, since those are also cheap.\r\n\r\n### Testing\r\nAdded a test\r\n",
  "state": "MERGED",
  "createdAt": "2021-04-29T17:53:04Z",
  "updatedAt": "2021-05-27T20:58:01Z",
  "closedAt": "2021-05-27T20:58:01Z",
  "mergedAt": "2021-05-27T20:58:01Z",
  "additions": 286,
  "deletions": 3,
  "changedFiles": 21,
  "headRefName": "scheduleProxyBuildsToInprocNode",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d0e9245bda44d645ba7912d17fe479cbf0c32cdd",
          "message": "Schedule proxy builds to inproc node",
          "committedDate": "2021-05-17T18:35:48Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7eda61f3c436dfc67778855010374831f023a9df",
          "message": "Warn when proxy builds do not get scheduled on the inproc node",
          "committedDate": "2021-05-17T18:35:49Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "760b761c14be0a36229b1f29570dc25e5fbb9735",
          "message": "Disable project cache tests with disabled inproc node",
          "committedDate": "2021-05-17T21:17:44Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebda9a4e28cecc31f96ce897baff6f0989bba2c4",
          "message": "Update src/Build/BackEnd/Components/Scheduler/Scheduler.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-05-25T17:55:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2689e98eb4d584b416d6a761498aa83939afb1a5",
          "message": "Update src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
          "committedDate": "2021-05-25T21:18:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9eceace927a26756b7fc21534a7b2421bec9e75b",
          "message": "Update src/Build/BackEnd/Components/Scheduler/Scheduler.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-05-26T23:52:28Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52cf208af04b00b8ed6a00aa6abb68653b112717",
          "message": "Add {Schedulable}BuildRequest.IsProxyBuildRequest()",
          "committedDate": "2021-05-27T00:08:46Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Added a warning when proxy builds do not get scheduled on the inproc node. This avoids silent perf regressions.",
        "createdAt": "2021-05-04T00:47:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Rebased on vs16.11 and removed the dependency on #6400 in order to eliminate any risk.",
        "createdAt": "2021-05-17T18:36:32Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nesting nit:\r\n```suggestion\r\n                    if (CanScheduleRequestToNode(request, InProcNodeId) && IsProxyBuildRequest(request.BuildRequest))\r\n                    {\r\n```",
              "createdAt": "2021-04-30T17:39:03Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -972,6 +976,30 @@ private void AssignUnscheduledRequestsByTraversalsFirst(List<ScheduleResponse> r\n             }\n         }\n \n+        /// <summary>\n+        /// Proxy build requests <see cref=\"ProxyTargets\"/> should be really cheap (only return properties and items) and it's not worth\n+        /// paying the IPC cost and re-evaluating them on out of proc nodes (they are guaranteed to be evaluated in the Scheduler process).\n+        /// </summary>\n+        private void AssignUnscheduledProxyBuildRequestsToInProcNode(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n+        {\n+            if (idleNodes.Contains(InProcNodeId))\n+            {\n+                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled);\n+                foreach (SchedulableRequest request in unscheduledRequests)\n+                {\n+                    if (CanScheduleRequestToNode(request, InProcNodeId))\n+                    {\n+                        if (IsProxyBuildRequest(request.BuildRequest))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need to wrap this in a new list? UnscheduledRequestsWhichCanBeScheduled is already IEnumerable",
              "createdAt": "2021-04-30T17:40:22Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -972,6 +976,30 @@ private void AssignUnscheduledRequestsByTraversalsFirst(List<ScheduleResponse> r\n             }\n         }\n \n+        /// <summary>\n+        /// Proxy build requests <see cref=\"ProxyTargets\"/> should be really cheap (only return properties and items) and it's not worth\n+        /// paying the IPC cost and re-evaluating them on out of proc nodes (they are guaranteed to be evaluated in the Scheduler process).\n+        /// </summary>\n+        private void AssignUnscheduledProxyBuildRequestsToInProcNode(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n+        {\n+            if (idleNodes.Contains(InProcNodeId))\n+            {\n+                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I was just copy pasting the existing patterns of accessing those requests. I suppose it's for concurrency purposes. The method needs a snapshot, not a live list.",
              "createdAt": "2021-04-30T20:47:06Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -972,6 +976,30 @@ private void AssignUnscheduledRequestsByTraversalsFirst(List<ScheduleResponse> r\n             }\n         }\n \n+        /// <summary>\n+        /// Proxy build requests <see cref=\"ProxyTargets\"/> should be really cheap (only return properties and items) and it's not worth\n+        /// paying the IPC cost and re-evaluating them on out of proc nodes (they are guaranteed to be evaluated in the Scheduler process).\n+        /// </summary>\n+        private void AssignUnscheduledProxyBuildRequestsToInProcNode(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n+        {\n+            if (idleNodes.Contains(InProcNodeId))\n+            {\n+                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If this is happening only in the scheduler node, shouldn't this always fire once even without this?",
              "createdAt": "2021-05-25T16:13:07Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1348,7 +1386,27 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n \n             responses.Add(ScheduleResponse.CreateScheduleResponse(nodeId, request.BuildRequest, mustSendConfigurationToNode));\n             TraceScheduler(\"Executing request {0} on node {1} with parent {2}\", request.BuildRequest.GlobalRequestId, nodeId, (request.Parent == null) ? -1 : request.Parent.BuildRequest.GlobalRequestId);\n+\n+            WarnWhenProxyBuildsGetScheduledOnOutOfProcNode();\n+\n             request.ResumeExecution(nodeId);\n+\n+            void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()\n+            {\n+                if (request.BuildRequest.ProxyTargets != null && nodeId != InProcNodeId)\n+                {\n+                    ErrorUtilities.VerifyThrow(\n+                        _componentHost.BuildParameters.DisableInProcNode || _forceAffinityOutOfProc,\n+                        \"Proxy requests should only get scheduled to out of proc nodes when the inproc node is disabled\");\n+\n+                    var loggedWarnings = Interlocked.CompareExchange(ref _loggedWarningsForProxyBuildsOnOutOfProcNodes, 1, 0);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Without the check it would fire for every proxy build. If all projects are cache hits, all projects will issue proxy builds.",
              "createdAt": "2021-05-25T17:57:59Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1348,7 +1386,27 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n \n             responses.Add(ScheduleResponse.CreateScheduleResponse(nodeId, request.BuildRequest, mustSendConfigurationToNode));\n             TraceScheduler(\"Executing request {0} on node {1} with parent {2}\", request.BuildRequest.GlobalRequestId, nodeId, (request.Parent == null) ? -1 : request.Parent.BuildRequest.GlobalRequestId);\n+\n+            WarnWhenProxyBuildsGetScheduledOnOutOfProcNode();\n+\n             request.ResumeExecution(nodeId);\n+\n+            void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()\n+            {\n+                if (request.BuildRequest.ProxyTargets != null && nodeId != InProcNodeId)\n+                {\n+                    ErrorUtilities.VerifyThrow(\n+                        _componentHost.BuildParameters.DisableInProcNode || _forceAffinityOutOfProc,\n+                        \"Proxy requests should only get scheduled to out of proc nodes when the inproc node is disabled\");\n+\n+                    var loggedWarnings = Interlocked.CompareExchange(ref _loggedWarningsForProxyBuildsOnOutOfProcNodes, 1, 0);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Oh, so because of intra-process parallelism, this one node can fire several warnings. Makes sense, thanks!",
              "createdAt": "2021-05-25T21:16:22Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1348,7 +1386,27 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n \n             responses.Add(ScheduleResponse.CreateScheduleResponse(nodeId, request.BuildRequest, mustSendConfigurationToNode));\n             TraceScheduler(\"Executing request {0} on node {1} with parent {2}\", request.BuildRequest.GlobalRequestId, nodeId, (request.Parent == null) ? -1 : request.Parent.BuildRequest.GlobalRequestId);\n+\n+            WarnWhenProxyBuildsGetScheduledOnOutOfProcNode();\n+\n             request.ResumeExecution(nodeId);\n+\n+            void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()\n+            {\n+                if (request.BuildRequest.ProxyTargets != null && nodeId != InProcNodeId)\n+                {\n+                    ErrorUtilities.VerifyThrow(\n+                        _componentHost.BuildParameters.DisableInProcNode || _forceAffinityOutOfProc,\n+                        \"Proxy requests should only get scheduled to out of proc nodes when the inproc node is disabled\");\n+\n+                    var loggedWarnings = Interlocked.CompareExchange(ref _loggedWarningsForProxyBuildsOnOutOfProcNodes, 1, 0);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yup, the main node is the only one hosting a scheduler, and whenever the scheduler would schedule a proxy build it would trigger this warning, if we wouldn't inhibit it.",
              "createdAt": "2021-05-25T22:10:13Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1348,7 +1386,27 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n \n             responses.Add(ScheduleResponse.CreateScheduleResponse(nodeId, request.BuildRequest, mustSendConfigurationToNode));\n             TraceScheduler(\"Executing request {0} on node {1} with parent {2}\", request.BuildRequest.GlobalRequestId, nodeId, (request.Parent == null) ? -1 : request.Parent.BuildRequest.GlobalRequestId);\n+\n+            WarnWhenProxyBuildsGetScheduledOnOutOfProcNode();\n+\n             request.ResumeExecution(nodeId);\n+\n+            void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()\n+            {\n+                if (request.BuildRequest.ProxyTargets != null && nodeId != InProcNodeId)\n+                {\n+                    ErrorUtilities.VerifyThrow(\n+                        _componentHost.BuildParameters.DisableInProcNode || _forceAffinityOutOfProc,\n+                        \"Proxy requests should only get scheduled to out of proc nodes when the inproc node is disabled\");\n+\n+                    var loggedWarnings = Interlocked.CompareExchange(ref _loggedWarningsForProxyBuildsOnOutOfProcNodes, 1, 0);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        AssignUnscheduledRequestToNode(request, InProcNodeId, responses);\r\n                        idleNodes.Remove(InProcNodeId);\r\n                        break;\r\n```",
              "createdAt": "2021-05-25T21:18:09Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -972,6 +981,29 @@ private void AssignUnscheduledRequestsByTraversalsFirst(List<ScheduleResponse> r\n             }\n         }\n \n+        /// <summary>\n+        /// Proxy build requests <see cref=\"ProxyTargets\"/> should be really cheap (only return properties and items) and it's not worth\n+        /// paying the IPC cost and re-evaluating them on out of proc nodes (they are guaranteed to be evaluated in the Scheduler process).\n+        /// </summary>\n+        private void AssignUnscheduledProxyBuildRequestsToInProcNode(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n+        {\n+            if (idleNodes.Contains(InProcNodeId))\n+            {\n+                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled);\n+                foreach (SchedulableRequest request in unscheduledRequests)\n+                {\n+                    if (CanScheduleRequestToNode(request, InProcNodeId) && IsProxyBuildRequest(request.BuildRequest))\n+                    {\n+                        {\n+                            AssignUnscheduledRequestToNode(request, InProcNodeId, responses);\n+                            idleNodes.Remove(InProcNodeId);\n+                            break;\n+                        }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                if (IsProxyBuildRequest(request) && nodeId != InProcNodeId)\r\n```\r\n\r\n?",
              "createdAt": "2021-05-26T18:46:49Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1348,7 +1383,27 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n \n             responses.Add(ScheduleResponse.CreateScheduleResponse(nodeId, request.BuildRequest, mustSendConfigurationToNode));\n             TraceScheduler(\"Executing request {0} on node {1} with parent {2}\", request.BuildRequest.GlobalRequestId, nodeId, (request.Parent == null) ? -1 : request.Parent.BuildRequest.GlobalRequestId);\n+\n+            WarnWhenProxyBuildsGetScheduledOnOutOfProcNode();\n+\n             request.ResumeExecution(nodeId);\n+\n+            void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()\n+            {\n+                if (request.BuildRequest.ProxyTargets != null && nodeId != InProcNodeId)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}