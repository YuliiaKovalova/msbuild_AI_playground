{
  "number": 8275,
  "title": "Issue8273 corrupt nu get cache",
  "body": "Fixes #8273 \r\n\r\n### Context\r\nPrevent overwriting the source of a hard/symbolic link.\r\n\r\n### Changes Made\r\nAlways delete the destination file (unless readonly and OverwriteReadOnlyFiles is false)\r\n\r\n### Testing\r\nAdded unit test.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-03T06:08:07Z",
  "updatedAt": "2023-03-15T06:48:13Z",
  "closedAt": "2023-03-15T06:48:13Z",
  "mergedAt": "2023-03-15T06:48:12Z",
  "additions": 112,
  "deletions": 32,
  "changedFiles": 3,
  "headRefName": "issue8273_corruptNuGetCache",
  "isDraft": false,
  "author": {
    "login": "manfred-brands"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "359f511037d809503c118c67d1025868693b1ce4",
          "message": "Ensure Copy with invalid file names do not get retries",
          "committedDate": "2023-03-13T04:13:18Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "864d5b7eb713105404638d57395797bb4cb534cc",
          "message": "Always delete Destination File to prevent corrupting linked files.",
          "committedDate": "2023-03-13T04:37:19Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb5d0de703de15355d2e57d4578e969ad79936c2",
          "message": "Move issue to comment iso method name\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2023-03-13T04:37:19Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c21ac4d28294a71077f94f7901fc6df305df9ef2",
          "message": "Add ChangeWave for file deletion\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2023-03-13T04:40:33Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I opened https://github.com/dotnet/runtime/issues/80832\r\n\r\nJozkee labeled it 'bug', so I'm guessing this is a runtime bug rather than an MSBuild bug. He also noted that File.Move does not have the same issue. People using MSBuild's Copy often don't care whether the source file exists afterwards, but we can't guarantee that, so I don't think we can use File.Move, unfortunately.\r\n\r\nWe're still talking internally about whether we want to:\r\n1. Take this\r\n2. Close this in favor of the runtime fixing it\r\n3. Take this but consider reverting it if the runtime changes File.Copy's behavior\r\n4. Possible other option?\r\n\r\nWhat happens on .NET Framework (and older .NET Core) may be an important question, but I haven't tested that yet.\r\n\r\nSorry we're being a bit slow; I just wanted to give you something of an update \ud83d\ude42 ",
        "createdAt": "2023-01-19T04:41:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "It looks like runtime isn't planning to change anything in the immediate future.\r\n\r\nWe're thinking we will likely take this, but our primary concern is performance. @rokonec volunteered to take a quick look into that to see if he can find anything problematic. Additionally, would you mind putting this behind a [change wave](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md)? That will turn it on by default for all users but provide a way for users to opt out should they hit perf problems.",
        "createdAt": "2023-02-13T17:14:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Ping @rokonec",
        "createdAt": "2023-02-27T16:12:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> It looks like runtime isn't planning to change anything in the immediate future.\r\n> \r\n> We're thinking we will likely take this, but our primary concern is performance. @rokonec volunteered to take a quick look into that to see if he can find anything problematic. Additionally, would you mind putting this behind a [change wave](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md)? That will turn it on by default for all users but provide a way for users to opt out should they hit perf problems.\r\n\r\nFWIW, I've run some benchmarks (building a large solution, with and without a change from this PR), and here are my conclusions:\r\n- When building on Windows, the variant with forced `FileUtilities.DeleteNoThrow` is actually faster (2m 25s vs 2m 35s). Unfortunately, I cannot share the tested solution here as it contains IP. I attribute this difference to AntiVirus software as I suspect that it handles file deletes and file overwrites differently.\r\n- On Linux I didn't notice any real difference, in both cases, the build time was around 4 minutes:\r\n```\r\nCase 1 (forced `FileUtilities.DeleteNoThrow`)\r\nTime Elapsed 00:03:59.28\r\nTime Elapsed 00:03:58.44\r\nTime Elapsed 00:04:01.78\r\nTime Elapsed 00:03:57.04\r\nTime Elapsed 00:04:02.73\r\n\r\nCase 2:\r\nTime Elapsed 00:03:59.87\r\nTime Elapsed 00:03:56.23\r\nTime Elapsed 00:03:58.41\r\nTime Elapsed 00:03:58.95\r\nTime Elapsed 00:04:01.58\r\n```\r\nTested solution: \r\n[LargeAppWithPrivatePackagesCentralisedNGBVRemoved.zip](https://github.com/dotnet/msbuild/files/10897827/LargeAppWithPrivatePackagesCentralisedNGBVRemoved.zip)\r\nTest command: \r\n- `cd ~/LargeAppWithPrivatePackagesCentralisedNGBVRemoved/solution$` \r\n- `echo \"\" >> Directory.Build.props && ~/dotnet/dotnet build -clp:summary --no-restore /bl /p:UseLinks=false`\r\n\r\n",
        "createdAt": "2023-03-06T11:58:58Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "@rokonec I have applied your changes and rebased the branch on current main branch.",
        "createdAt": "2023-03-13T04:41:53Z",
        "author": {
          "login": "manfred-brands"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Given that the destination is always deleted, I think it would be a good idea to set the `overwrite` flag to `false` to protect us from accidental overwrites.",
              "createdAt": "2023-02-15T16:25:45Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -324,41 +329,28 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 Log.LogMessage(MessageImportance.Normal, FileComment, sourceFilePath, destinationFilePath);\n \n                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);",
              "author": {
                "login": "marcin-krystianc"
              }
            },
            {
              "body": "Yes, it is probably better to fail in case someone gets in between than overwriting a link. I will update the PR.",
              "createdAt": "2023-02-22T09:58:27Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -324,41 +329,28 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 Log.LogMessage(MessageImportance.Normal, FileComment, sourceFilePath, destinationFilePath);\n \n                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);",
              "author": {
                "login": "manfred-brands"
              }
            },
            {
              "body": "I do not believe it is necessary. Sometimes logic might change to not delete it, or new Copy task argument will be introduced, or some weird concurrent logic is relaying with last win. I would recommend to keep it as is, but if you decide to change it, it has to go under same ChangeWave or same conditions as deleting files.",
              "createdAt": "2023-03-08T23:09:41Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -324,41 +329,28 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 Log.LogMessage(MessageImportance.Normal, FileComment, sourceFilePath, destinationFilePath);\n \n                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is not following our naming standards. Please move links to related issue into method note (comments).",
              "createdAt": "2023-03-08T10:32:58Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2110,6 +2110,84 @@ public void InvalidErrorIfLinkFailed()\n             Assert.False(result);\n             engine.AssertLogContains(\"MSB3892\");\n         }\n+\n+        /// <summary>\n+        /// An existing link source should not be modified.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(false, false)]\n+        [InlineData(false, true)]\n+        [InlineData(true, false)]\n+        public void Issue8273_DonotCorruptSourceOfLink(bool useHardLink, bool useSymbolicLink)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be under ChangeWave to be able to deal with unexpected bugs",
              "createdAt": "2023-03-08T14:41:29Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -273,7 +271,14 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n             if (OverwriteReadOnlyFiles)\n             {\n                 MakeFileWriteable(destinationFileState, true);\n-                destinationFileExists = destinationFileState.FileExists;\n+            }\n+\n+            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\n+            // To prevent this, we need to delete the existing entry before we Copy or create a link.\n+            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\n+            if (destinationFileState.FileExists && !destinationFileState.IsReadOnly)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <summary>\r\n        /// An existing link source should not be modified.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// Related to issue [#8273](https://github.com/dotnet/msbuild/issues/8273)\r\n        /// </remarks>\r\n        [Theory]\r\n        [InlineData(false, false)]\r\n        [InlineData(false, true)]\r\n        [InlineData(true, false)]\r\n        public void DoNotCorruptSourceOfLink(bool useHardLink, bool useSymbolicLink)\r\n```",
              "createdAt": "2023-03-08T14:46:33Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2110,6 +2110,84 @@ public void InvalidErrorIfLinkFailed()\n             Assert.False(result);\n             engine.AssertLogContains(\"MSB3892\");\n         }\n+\n+        /// <summary>\n+        /// An existing link source should not be modified.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(false, false)]\n+        [InlineData(false, true)]\n+        [InlineData(true, false)]\n+        public void Issue8273_DonotCorruptSourceOfLink(bool useHardLink, bool useSymbolicLink)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && destinationFileState.FileExists && !destinationFileState.IsReadOnly)\r\n```",
              "createdAt": "2023-03-08T14:47:31Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -273,7 +271,14 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n             if (OverwriteReadOnlyFiles)\n             {\n                 MakeFileWriteable(destinationFileState, true);\n-                destinationFileExists = destinationFileState.FileExists;\n+            }\n+\n+            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\n+            // To prevent this, we need to delete the existing entry before we Copy or create a link.\n+            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\n+            if (destinationFileState.FileExists && !destinationFileState.IsReadOnly)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we also take into account OverwriteReadOnlyFiles and also delete them in that case?",
              "createdAt": "2023-03-13T22:56:47Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -269,7 +267,14 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n             if (OverwriteReadOnlyFiles)\n             {\n                 MakeFileWriteable(destinationFileState, true);\n-                destinationFileExists = destinationFileState.FileExists;\n+            }\n+\n+            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\n+            // To prevent this, we need to delete the existing entry before we Copy or create a link.\n+            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && destinationFileState.FileExists && !destinationFileState.IsReadOnly)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "if `OverwriteReadOnlyFiles ` is set, the file is made writable and hence deleted here.",
              "createdAt": "2023-03-14T02:58:28Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -269,7 +267,14 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n             if (OverwriteReadOnlyFiles)\n             {\n                 MakeFileWriteable(destinationFileState, true);\n-                destinationFileExists = destinationFileState.FileExists;\n+            }\n+\n+            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\n+            // To prevent this, we need to delete the existing entry before we Copy or create a link.\n+            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && destinationFileState.FileExists && !destinationFileState.IsReadOnly)",
              "author": {
                "login": "manfred-brands"
              }
            },
            {
              "body": "...and now I see it 6 lines up. Stupid question, thanks!",
              "createdAt": "2023-03-14T17:35:28Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -269,7 +267,14 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n             if (OverwriteReadOnlyFiles)\n             {\n                 MakeFileWriteable(destinationFileState, true);\n-                destinationFileExists = destinationFileState.FileExists;\n+            }\n+\n+            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\n+            // To prevent this, we need to delete the existing entry before we Copy or create a link.\n+            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && destinationFileState.FileExists && !destinationFileState.IsReadOnly)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}