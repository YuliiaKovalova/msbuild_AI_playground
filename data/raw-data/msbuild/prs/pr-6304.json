{
  "number": 6304,
  "title": "Validate the key is in the dict",
  "body": "Fixes potential access problem.",
  "state": "CLOSED",
  "createdAt": "2021-03-26T14:29:26Z",
  "updatedAt": "2021-03-31T16:58:05Z",
  "closedAt": "2021-03-31T16:58:02Z",
  "mergedAt": null,
  "additions": 2,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "remove-unchecked-dict-access",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "db672fa3fe6081cbf64ee5c180d013dba5a3f25a",
          "message": "Validate the key is in the dict",
          "committedDate": "2021-03-26T14:28:48Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This is strictly better than the previous version, approved.\r\n\r\nNote that this method is easy to confuse with how warnings are actually converted, which is handled in `LogBuildEvent`, not here. Modifying this method only modifies how tasks understand that a warning they logged would be converted to an error.\r\n\r\nIssues arise from a task relying on Log.HasLoggedError under this case:\r\n1. All warnings are errors (warningsAsErrorsExcludingMessages will be a non-null empty set)\r\n2. There are _any_ warningsAsMessages for this particular project.\r\n\r\nResult: This method returns null, which implies that there are no warnings as errors. No task will see that a warning it logged was treated as an error. While this isn't great, it's the same functionality as what came before it. The workaround for this would be to manually select warnings to be errors. I'll file a bug on it.",
        "createdAt": "2021-03-26T19:25:33Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This probably belongs to outer scope after if from line 549, as relying on _warningsAsErrorsByProject returning non empty set is a fragile promise.",
              "createdAt": "2021-03-26T14:39:05Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -546,9 +546,9 @@ public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventCont\n                 return null;\n             }\n \n-            if (_warningsAsMessagesByProject != null)\n+            if (_warningsAsMessagesByProject != null && _warningsAsMessagesByProject.TryGetValue(key, out ISet<string> warningsAsMessages))\n             {\n-                warningsAsErrorsExcludingMessages.ExceptWith(_warningsAsMessagesByProject[key]);\n+                warningsAsErrorsExcludingMessages.ExceptWith(warningsAsMessages);\n \n                 // A non-null empty set means all warnings are errors. Avoid this.\n                 if (warningsAsErrorsExcludingMessages.Count == 0)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}