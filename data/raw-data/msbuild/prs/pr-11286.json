{
  "number": 11286,
  "title": "Add UntrustedLocation check",
  "body": "Fixes https://github.com/dotnet/sdk/issues/45342\r\n\r\n### Context\r\nBuilding (or just executing targets) under the Downloads folder is not recomended, as uninteded injection of unrelated msbuild logic can happen.\r\n\r\nThis checks emits error in such case.\r\n\r\n### Testing\r\nManual testing\r\n\r\n```\r\nPS C:\\Users\\jankrivanek\\Downloads\\mytest\\console> C:\\src\\msbuild-2\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\MSBuild.exe -check -v:m -restore\r\nMSBuild version 17.14.0-dev-25064-01+a273f56ac for .NET Framework\r\n  Determining projects to restore...\r\n  Restored C:\\Users\\jankrivanek\\Downloads\\mytest\\console\\console.csproj (in 205 ms).\r\nMSBUILD : error BC0301: Location: 'C:\\Users\\jankrivanek\\Downloads\\mytest\\console' cannot be fully trusted, place your proje\r\ncts outside of that folder (Project: console.csproj).\r\n  console -> C:\\Users\\jankrivanek\\Downloads\\mytest\\console\\bin\\Debug\\net9.0\\console.dll\r\n```\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-14T18:56:00Z",
  "updatedAt": "2025-01-20T10:12:54Z",
  "closedAt": "2025-01-20T10:12:52Z",
  "mergedAt": "2025-01-20T10:12:52Z",
  "additions": 244,
  "deletions": 0,
  "changedFiles": 17,
  "headRefName": "buildcheck/untrusted-location",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "486aba9bb1d473f099b774f531f69951344eff36",
          "message": "Add UntrustedLocation check",
          "committedDate": "2025-01-14T18:51:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adc446c89e29a8ccf1fb2a036c87034435304f6f",
          "message": "Improve the Downloads inference",
          "committedDate": "2025-01-15T11:35:33Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "456d45659c6fdcd2fba30ad1f0782798af021101",
          "message": "Add documentation source",
          "committedDate": "2025-01-16T15:48:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks @YuliiaKovalova for helping to improve the Downloads location obtaining logic!",
        "createdAt": "2025-01-15T11:36:02Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we save this generic name is we check Downloads folder only?\r\n",
              "createdAt": "2025-01-15T09:21:58Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,80 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "The check description and error message are more concrete.\r\nSo probably it shouldn't matter that name is bit more generic? (and we might possibly expand the checking in the future - e.g. for locations with too permissive access; root drive location; etc.)",
              "createdAt": "2025-01-15T11:37:49Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,80 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we might expand this in the future, should we already call it \"untrusted folder\" instead? And leave the messages as Downloads folder for now.",
              "createdAt": "2025-01-15T14:26:13Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -14,6 +14,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n | [BC0201](#bc0201---usage-of-undefined-property) | Warning | Project | 9.0.100 | Usage of undefined property. |\n | [BC0202](#bc0202---property-first-declared-after-it-was-used) | Warning | Project | 9.0.100 | Property first declared after it was used. |\n | [BC0203](#bc0203----property-declared-but-never-used) | None | Project | 9.0.100 | Property declared but never used. |\n+| [BC0301](#bc0301---building-from-downloads-folder) | None | Project | 9.0.300 | Building from Downloads folder. |",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "It's very easy to edit this doc - no need for pushing any updates to users (as opposed to namings in code) - so I'd prefere to keep it very up to date with current state.",
              "createdAt": "2025-01-16T15:49:14Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -14,6 +14,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n | [BC0201](#bc0201---usage-of-undefined-property) | Warning | Project | 9.0.100 | Usage of undefined property. |\n | [BC0202](#bc0202---property-first-declared-after-it-was-used) | Warning | Project | 9.0.100 | Property first declared after it was used. |\n | [BC0203](#bc0203----property-declared-but-never-used) | None | Project | 9.0.100 | Property declared but never used. |\n+| [BC0301](#bc0301---building-from-downloads-folder) | None | Project | 9.0.300 | Building from Downloads folder. |",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you add a link to the doc that you found that info?",
              "createdAt": "2025-01-15T14:40:36Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0301\",\n+        \"UntrustedLocation\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Error });\n+\n+    public override string FriendlyName => \"DotUtils.UntrustedLocationCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule>() { SupportedRule };\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        checkedProjects.Clear();\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private HashSet<string> checkedProjects = new HashSet<string>();\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        if (checkedProjects.Add(context.Data.ProjectFilePath) &&\n+            context.Data.ProjectFileDirectory.StartsWith(PathsHelper.Downloads, Shared.FileUtilities.PathComparison))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                ElementLocation.EmptyLocation,\n+                context.Data.ProjectFileDirectory,\n+                context.Data.ProjectFilePath.Substring(context.Data.ProjectFileDirectory.Length + 1)));\n+        }\n+    }\n+\n+    private static class PathsHelper\n+    {\n+        public static readonly string Downloads = GetDownloadsPath();\n+\n+        /// <summary>\n+        /// Returns the current Downloads location. Makes sure the path doesn't end with directory separator\n+        ///   (to prevent false negatives during matching)\n+        /// </summary>\n+        private static string GetDownloadsPath()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+            {\n+                // Unsupported on pre-vista\n+                if (Environment.OSVersion.Version.Major >= 6)\n+                {\n+                    try\n+                    {\n+                        // based on doc - a final slash is not added",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Good point!\r\nAdded",
              "createdAt": "2025-01-16T15:49:43Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0301\",\n+        \"UntrustedLocation\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Error });\n+\n+    public override string FriendlyName => \"DotUtils.UntrustedLocationCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule>() { SupportedRule };\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        checkedProjects.Clear();\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private HashSet<string> checkedProjects = new HashSet<string>();\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        if (checkedProjects.Add(context.Data.ProjectFilePath) &&\n+            context.Data.ProjectFileDirectory.StartsWith(PathsHelper.Downloads, Shared.FileUtilities.PathComparison))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                ElementLocation.EmptyLocation,\n+                context.Data.ProjectFileDirectory,\n+                context.Data.ProjectFilePath.Substring(context.Data.ProjectFileDirectory.Length + 1)));\n+        }\n+    }\n+\n+    private static class PathsHelper\n+    {\n+        public static readonly string Downloads = GetDownloadsPath();\n+\n+        /// <summary>\n+        /// Returns the current Downloads location. Makes sure the path doesn't end with directory separator\n+        ///   (to prevent false negatives during matching)\n+        /// </summary>\n+        private static string GetDownloadsPath()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+            {\n+                // Unsupported on pre-vista\n+                if (Environment.OSVersion.Version.Major >= 6)\n+                {\n+                    try\n+                    {\n+                        // based on doc - a final slash is not added",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this also cover Macs (OSX)? Or we are not supporting it?",
              "createdAt": "2025-01-15T14:42:33Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0301\",\n+        \"UntrustedLocation\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Error });\n+\n+    public override string FriendlyName => \"DotUtils.UntrustedLocationCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule>() { SupportedRule };\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        checkedProjects.Clear();\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private HashSet<string> checkedProjects = new HashSet<string>();\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        if (checkedProjects.Add(context.Data.ProjectFilePath) &&\n+            context.Data.ProjectFileDirectory.StartsWith(PathsHelper.Downloads, Shared.FileUtilities.PathComparison))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                ElementLocation.EmptyLocation,\n+                context.Data.ProjectFileDirectory,\n+                context.Data.ProjectFilePath.Substring(context.Data.ProjectFileDirectory.Length + 1)));\n+        }\n+    }\n+\n+    private static class PathsHelper\n+    {\n+        public static readonly string Downloads = GetDownloadsPath();\n+\n+        /// <summary>\n+        /// Returns the current Downloads location. Makes sure the path doesn't end with directory separator\n+        ///   (to prevent false negatives during matching)\n+        /// </summary>\n+        private static string GetDownloadsPath()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+            {\n+                // Unsupported on pre-vista\n+                if (Environment.OSVersion.Version.Major >= 6)\n+                {\n+                    try\n+                    {\n+                        // based on doc - a final slash is not added\n+                        return SHGetKnownFolderPath(new Guid(\"374DE290-123F-4565-9164-39C4925E467B\"), 0, IntPtr.Zero);\n+                    }\n+                    catch\n+                    {\n+                        // ignored\n+                    }\n+                }\n+            }\n+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "There is no magic for queryable downloads location customization on MacOS - we just get the `~/Downloads` location (the last statement in this function)",
              "createdAt": "2025-01-16T15:47:25Z",
              "path": "src/Build/BuildCheck/Checks/UntrustedLocationCheck.cs",
              "diffHunk": "@@ -0,0 +1,96 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal sealed class UntrustedLocationCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0301\",\n+        \"UntrustedLocation\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0301_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Error });\n+\n+    public override string FriendlyName => \"DotUtils.UntrustedLocationCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule>() { SupportedRule };\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        checkedProjects.Clear();\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private HashSet<string> checkedProjects = new HashSet<string>();\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        if (checkedProjects.Add(context.Data.ProjectFilePath) &&\n+            context.Data.ProjectFileDirectory.StartsWith(PathsHelper.Downloads, Shared.FileUtilities.PathComparison))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                ElementLocation.EmptyLocation,\n+                context.Data.ProjectFileDirectory,\n+                context.Data.ProjectFilePath.Substring(context.Data.ProjectFileDirectory.Length + 1)));\n+        }\n+    }\n+\n+    private static class PathsHelper\n+    {\n+        public static readonly string Downloads = GetDownloadsPath();\n+\n+        /// <summary>\n+        /// Returns the current Downloads location. Makes sure the path doesn't end with directory separator\n+        ///   (to prevent false negatives during matching)\n+        /// </summary>\n+        private static string GetDownloadsPath()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+            {\n+                // Unsupported on pre-vista\n+                if (Environment.OSVersion.Version.Major >= 6)\n+                {\n+                    try\n+                    {\n+                        // based on doc - a final slash is not added\n+                        return SHGetKnownFolderPath(new Guid(\"374DE290-123F-4565-9164-39C4925E467B\"), 0, IntPtr.Zero);\n+                    }\n+                    catch\n+                    {\n+                        // ignored\n+                    }\n+                }\n+            }\n+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}