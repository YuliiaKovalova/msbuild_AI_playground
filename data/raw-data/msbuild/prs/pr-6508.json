{
  "number": 6508,
  "title": "Fix MakeRelative regression in v16.10",
  "body": "Fixes #6493\r\n\r\nReplaces PR by @pmisik : https://github.com/dotnet/msbuild/pull/6504\r\n\r\n### Context\r\n\r\nRecent change to MakeRelative function was causing existing targets to fail. The change removed the backslash from the end of paths. This change causes the function to revert to the previous behaviour.\r\n\r\n### Changes Made\r\n\r\nFileUtilities.cs updated\r\n\r\n### Testing\r\n\r\nAdded unit tests to FileUtilities_Tests.cs.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-06-02T12:20:34Z",
  "updatedAt": "2023-01-14T19:41:31Z",
  "closedAt": "2021-06-03T02:21:37Z",
  "mergedAt": null,
  "additions": 43,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "vs16.11",
  "isDraft": false,
  "author": {
    "login": "dsparkplug"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b8b1fc1b5a3b2540a0818b56c431a657591fdcf7",
          "message": "Fix MakeRelative regression in v16.10",
          "committedDate": "2021-06-02T12:09:23Z",
          "author": {
            "name": "Dave Sparks",
            "email": "dave.sparks@finalbuilder.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a55333281a5b3d5294b085ce7f4a6d9780c65102",
          "message": "Added some more unit tests as per suggestions",
          "committedDate": "2021-06-02T13:21:15Z",
          "author": {
            "name": "Dave Sparks",
            "email": "dave.sparks@finalbuilder.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ab59c5c1916c15867adced9086a55d35ea18726",
          "message": "Fixed unit test failing on linux",
          "committedDate": "2021-06-02T13:42:26Z",
          "author": {
            "name": "Dave Sparks",
            "email": "dave.sparks@finalbuilder.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ca8d99eb295726300818bee1297b663a906095a8",
          "message": "Removed unnecessary length check\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-06-02T23:16:37Z",
          "author": {
            "name": "Dave Sparks",
            "email": "5028128+dsparkplug@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "615f21e5e69700b8e02d21311c60ea10b08f4b40",
          "message": "Merge branch 'vs16.11' into vs16.11",
          "committedDate": "2021-06-02T23:26:02Z",
          "author": {
            "name": "Dave Sparks",
            "email": "5028128+dsparkplug@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6508) <br/>All CLA requirements met.",
        "createdAt": "2021-06-02T12:20:48Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6508) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6508) before we can accept your contribution.<br/><br/>:x: dsparkplug [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6508)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=6508) it.</sub>",
        "createdAt": "2021-06-02T12:20:48Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Hmmm.. didn't expect all those commits to be added to the pull request when changing the base branch. And the checks failed too - changing back...",
        "createdAt": "2021-06-02T13:29:59Z",
        "author": {
          "login": "dsparkplug"
        }
      },
      {
        "body": "Oh, and also:\r\nhttps://github.com/dotnet/msbuild/pull/6504#issuecomment-852406031\r\n\r\n\ud83d\ude42\r\n\r\nIs there any reason to keep #6504 around anymore?",
        "createdAt": "2021-06-02T23:00:37Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The other pr was started by @pmisik - it looks like he has pulled my changes into that and rebased to v16.10 - but it doesn't build for some reason. I really should have based this pr on v16.10 as the fix is needed to fix major dependency issues. Will attempt to base it on v16.10 now - do I need to rebase the source before using the new update to base branch feature?",
        "createdAt": "2021-06-02T23:24:54Z",
        "author": {
          "login": "dsparkplug"
        }
      },
      {
        "body": "Have created a new PR https://github.com/dotnet/msbuild/pull/6513 with the same changes squashed and rebased onto vs16.10 branch",
        "createdAt": "2021-06-03T02:21:37Z",
        "author": {
          "login": "dsparkplug"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "There is opportunity to extend test coverage for combination of file+directory and directory+file.\r\n```\r\n/* Directory + File */\r\n Assert.Equal(@\"def\", FileUtilities.MakeRelative(@\"c:\\abc\\\", @\"c:\\abc\\def\"));\r\n Assert.Equal(@\"..\\..\\def\", FileUtilities.MakeRelative(@c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\"));\r\n Assert.Equal(@\"..\\ghi\", FileUtilities.MakeRelative(@c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\\ghi\"));\r\n Assert.Equal(@\"..\\def\", FileUtilities.MakeRelative(@c:\\abc\\def\\\", @\"c:\\abc\\def\"));\r\n\r\n/* File + Directory */\r\n Assert.Equal(@\"def\\\", FileUtilities.MakeRelative(@c:\\abc\", @\"c:\\abc\\def\\\"));\r\n Assert.Equal(@\"..\\\", FileUtilities.MakeRelative(@c:\\abc\\def\\xyz\", @\"c:\\abc\\def\\\"));\r\n Assert.Equal(@\"..\\ghi\\\", FileUtilities.MakeRelative(@c:\\abc\\def\\xyz\", @\"c:\\abc\\def\\ghi\\\"));\r\n Assert.Equal(@\"\", FileUtilities.MakeRelative(@c:\\abc\\def\", @\"c:\\abc\\def\\\"));\r\n```",
              "createdAt": "2021-06-02T13:03:31Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -97,6 +97,12 @@ public void MakeRelativeTests()\n                 Assert.Equal(@\"\\\\host\\path\\file\", FileUtilities.MakeRelative(@\"c:\\abc\\def\", @\"\\\\host\\path\\file\"));\n                 Assert.Equal(@\"\\\\host\\d$\\file\", FileUtilities.MakeRelative(@\"c:\\abc\\def\", @\"\\\\host\\d$\\file\"));\n                 Assert.Equal(@\"..\\fff\\ggg.hh\", FileUtilities.MakeRelative(@\"c:\\foo\\bar\\..\\abc\\cde\", @\"c:\\foo\\bar\\..\\abc\\fff\\ggg.hh\"));\n+\n+                /* Directories */\n+                Assert.Equal(@\"def\\\", FileUtilities.MakeRelative(@\"c:\\abc\\\", @\"c:\\abc\\def\\\"));\n+                Assert.Equal(@\"..\\\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\\\"));\n+                Assert.Equal(@\"..\\ttt\\\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\\ttt\\\"));\n+                Assert.Equal(@\".\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\\", @\"c:\\abc\\def\\\"));",
              "author": {
                "login": "pmisik"
              }
            },
            {
              "body": "Good suggestion - have added more tests",
              "createdAt": "2021-06-02T13:23:54Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -97,6 +97,12 @@ public void MakeRelativeTests()\n                 Assert.Equal(@\"\\\\host\\path\\file\", FileUtilities.MakeRelative(@\"c:\\abc\\def\", @\"\\\\host\\path\\file\"));\n                 Assert.Equal(@\"\\\\host\\d$\\file\", FileUtilities.MakeRelative(@\"c:\\abc\\def\", @\"\\\\host\\d$\\file\"));\n                 Assert.Equal(@\"..\\fff\\ggg.hh\", FileUtilities.MakeRelative(@\"c:\\foo\\bar\\..\\abc\\cde\", @\"c:\\foo\\bar\\..\\abc\\fff\\ggg.hh\"));\n+\n+                /* Directories */\n+                Assert.Equal(@\"def\\\", FileUtilities.MakeRelative(@\"c:\\abc\\\", @\"c:\\abc\\def\\\"));\n+                Assert.Equal(@\"..\\\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\\\"));\n+                Assert.Equal(@\"..\\ttt\\\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\xyz\\\", @\"c:\\abc\\def\\ttt\\\"));\n+                Assert.Equal(@\".\", FileUtilities.MakeRelative(@\"c:\\abc\\def\\\", @\"c:\\abc\\def\\\"));",
              "author": {
                "login": "dsparkplug"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (fullPath[fullPath.Length - 1] != Path.DirectorySeparatorChar)\r\n```\r\n\r\nlength is a little too generic to be useful, but this is a fairly common idiom, so I'd just simplify it like this.\r\n\r\nAlso, I don't think we need to check length < 1, do we? Can Path.GetFullPath return something of length 0?",
              "createdAt": "2021-06-02T22:55:46Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -1078,7 +1078,13 @@ internal static string MakeRelative(string basePath, string path)\n             {\n                 sb.Append(splitPath[i]).Append(Path.DirectorySeparatorChar);\n             }\n-            sb.Length--;\n+\n+            int length = fullPath.Length;\n+            if (length < 1 || fullPath[length - 1] != Path.DirectorySeparatorChar)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}