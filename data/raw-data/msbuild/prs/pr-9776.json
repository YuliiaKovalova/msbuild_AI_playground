{
  "number": 9776,
  "title": "Make console output encoding support all languages",
  "body": "Fixes #9694\r\n\r\n### Context\r\nFor console logger, the message is not readable for some languages such as Korean if the system code page is not UTF-8.\r\n\r\n### Changes Made\r\nSet console output encoding to UTF-8 to support all languages on OSes that support UTF-8.\r\n- On Core unconditionally set the encoding\r\n- On Full framework set the encoding if the OS system locale is non-English. \r\n\r\n### Testing\r\nTest the fix with msbuild task `Message`/`Warning` that contains Chinese/Korean/Japanese using the following cases.\r\n- `dotnet build` on OS with English locale\r\n-  msbuild.exe on OS with English locale (this requires set the env var `DOTNET_CLI_UI_LANGUAGE`)\r\n- `dotnet build` on OS with Chinese locale\r\n-  msbuild.exe on OS with Chinese locale\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-02-23T11:30:40Z",
  "updatedAt": "2024-03-21T06:20:54Z",
  "closedAt": "2024-03-21T06:20:50Z",
  "mergedAt": "2024-03-21T06:20:50Z",
  "additions": 20,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "consolelogger-encoding",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5e082b08d90463a04a7992360bc952f33a8dd625",
          "message": "Make console output encoding support all languages",
          "committedDate": "2024-03-08T10:12:48Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1985518 - We should guard the calls setting the Console properties (OutputEncoding/InpuitEncoding) with try-catch",
        "createdAt": "2024-03-02T07:52:19Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we make this configurable? I'm wondering if there can be any users relying on the current behavior - encoding preserving the system wide setting",
              "createdAt": "2024-02-23T19:58:35Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This seems scary - @nagilson did something with encoding recently to mimic the .NET SDK's behavior. @nagilson can you link to our decision-making process for that change?",
              "createdAt": "2024-02-23T20:05:03Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I think this is a good change but it needs to be made with deep care. Some consoles will react differently to this change and sometimes you need to change the input encoding. There should definitely be an escape hatch if this console is an existing product as it will most likely break people. Also, some versions of Windows 10 do not even support this, so you should probably guard against that. Also, this may impact other programs running on the console, you probably want to use a RAII pattern.",
              "createdAt": "2024-02-23T20:09:00Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Please see my comments here: https://github.com/dotnet/msbuild/pull/8503\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/console-encoding this document is probably more digestible but lacks as much technical detail",
              "createdAt": "2024-02-23T20:12:40Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Interresting - after a quick look through the #8503, it feels like the way we should fix this one - but then my main question is \"Why doesn't the previous fix address this one issue?\"\r\n\r\nAnd since Developer Community feedback ticket (this is addressing) doesn't contain the versioning info, I believe it can be very possible that the reporting user wasn't on a preview release when reporting the issue.\r\n\r\n@GangWang01 - can you please try if you can repro the case with .NET 8 RTM (or any .NET 9)? If yes - then we should first investigate why the fix by @nagilson doesn't cover the case. \r\n",
              "createdAt": "2024-02-26T10:20:05Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Other option is that user was on a [Windows build that didn't yet support the UTF-8](https://learn.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page#set-a-process-code-page-to-utf-8).\r\n\r\nWould there be more user bringing up the same issue, we might want to consider adding low-prio message into log when [detecting the case](https://github.com/dotnet/msbuild/blob/42383a83b2b0d1e551cbdb713f9ae3dda27dd04d/src/Framework/EncodingUtilities.cs#L301).",
              "createdAt": "2024-02-26T10:26:38Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> @GangWang01 - can you please try if you can repro the case with .NET 8 RTM (or any .NET 9)? If yes - then we should first investigate why the fix by @nagilson doesn't cover the case.\r\n\r\nWith .NET 8 (8.0.201) or .NET 9 preview 1, I still could reproduce this issue. The fix by @nagilson works, but requires setting the environment variable `DOTNET_CLI_UI_LANGUAGE`. The issue didn't do this setting.\r\n![net8](https://github.com/dotnet/msbuild/assets/2950449/cc12863d-d4d9-424b-b126-508491c1b8e4)\r\n\r\n\r\n",
              "createdAt": "2024-02-27T08:55:38Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "GangWang01"
              }
            },
            {
              "body": "@baronfel - should the msbuild follow the suit of sdk and still require the `DOTNET_CLI_UI_LANGUAGE` here?",
              "createdAt": "2024-02-27T10:02:14Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It would be best to have product parity IMO, but my interest is how the language was different without that variable being set. Was it set in the OS and if so how? (There are several ways to set it and sometimes they conflict with one another.) The same logic should probably trigger in both layers if theres some case where the OS setting is not currently being detected by us, but the ENV var should take precedence. \r\n",
              "createdAt": "2024-02-29T19:24:47Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "@JanKrivanek I kind of feel that the SDK should use its knowledge of DOTNET_CLI_UI_LANGUAGE to set whatever MSBuild's knob for language is. The SDK is the point at which people interact with MSBuild and it already has a number of ways it customizes the invocation/behavior of MSBuild - this would just be one more.",
              "createdAt": "2024-02-29T19:29:27Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "So looking into this bit more closely, I *believe*:\r\n\r\n* SDK does the proper thing by checking only the env vars (`DOTNET_CLI_UI_LANGUAGE`, `VSLANG`): https://github.com/dotnet/sdk/blob/5c966a7d1acd6fe5c27f09b81a7652f76fd0ac23/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs#L52-L84 and specifically not checking [System Locale](https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-international-core-winpe-systemlocale) or [Display Language](https://support.microsoft.com/en-us/windows/manage-the-input-and-display-language-settings-in-windows-12a10cb4-8626-9b77-0ccb-5013e0c7c7a2), as those should be automatically reflected in  `CultureInfo.CurrentUICulture`\r\n* MSBuild almost has a feature parity with the SDK (with the Noah change #8503), it just misse the setting of the encoding if needed by locale\r\n* Gangs changes here almost fixes the missing part - it is just too wide - and needs to be conditioned, [similarly as in sdk](https://github.com/dotnet/sdk/blob/5c966a7d1acd6fe5c27f09b81a7652f76fd0ac23/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs#L27-L35)\r\n* The env vars checking logic should probably still stay in MSBuild, even if it feels duplicated with sdk - as msbuild can be invoked from VS or directly and since that's currently the main way how sdk communicates locale to other child processes anyways.\r\n\r\nAll that being - if you do not disagree @baronfel and @nagilson - we should probably keep the @GangWang01 changes, just move them to front of [`SetConsoleUI`](https://github.com/dotnet/msbuild/blob/5ba4508408b1c38aa95dcf62dc237b9a23f2523b/src/MSBuild/XMake.cs#L1834), condition them for non-english locales on OSes that support UTF8 (same as sdk does) and ensure that it plays well together with [the current codepage checking logic](https://github.com/dotnet/msbuild/blob/5ba4508408b1c38aa95dcf62dc237b9a23f2523b/src/MSBuild/XMake.cs#L1861-L1871).",
              "createdAt": "2024-03-01T09:49:49Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "We might also need to consider another case that is to output non-English(Korean/Japanese/Chinese) message with msbuild `Message`/`Warning` task in English system locale.",
              "createdAt": "2024-03-04T08:36:21Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "GangWang01"
              }
            },
            {
              "body": "> We might also need to consider another case that is to output non-English(Korean/Japanese/Chinese) message with msbuild `Message`/`Warning` task in English system locale.\r\n\r\nI believe that from the MSBuild point of view the scenario is still same: observing the `DOTNET_CLI_UI_LANGUAGE`.\r\n\r\nIf someone wants to have localized tasks on en-US OS, then I believe demanding explicit `DOTNET_CLI_UI_LANGUAGE` set by user is a reasonable requirement here.\r\n\r\nOr did you have a different case in mind?\r\n\r\n\r\n",
              "createdAt": "2024-03-04T13:19:36Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The case that often bites us is:\r\n\r\n* OS configured for CP 437(really any non-Unicode codepage)\r\n* Project is in path named with Unicode characters that aren't representable in that codepage\r\n* Messages (reasonably!) want to include paths",
              "createdAt": "2024-03-04T13:49:11Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point!\r\nDiscussed offline with @rainersigwald and we should:\r\n* use UTF-8 (if supported by OS and Console.Out present) unconditionally on Core\r\n* still require explicit opt-in of FullFW (again still checking same conditions)",
              "createdAt": "2024-03-04T14:06:24Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -72,9 +73,10 @@ public ConsoleLogger()\n         /// </summary>\n         /// <param name=\"verbosity\">Verbosity level.</param>\n         public ConsoleLogger(LoggerVerbosity verbosity) :\n-            this(verbosity, Console.Out.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n+            this(verbosity, BaseConsoleLogger.Write, BaseConsoleLogger.SetColor, BaseConsoleLogger.ResetColor)\n         {\n-            // do nothing\n+            // set output encoding to UTF-8 to support all languages.\n+            Console.OutputEncoding = Encoding.UTF8;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}