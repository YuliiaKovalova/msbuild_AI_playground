{
  "number": 11628,
  "title": "[vs17.13] Fix SdkResult Evalution when ProjectRootElement is null",
  "body": "Fixes #11550\r\n\r\n### Context\r\nThis is a regression caused by changes in `MSBuildSdkResolver` that were introduced in https://github.com/dotnet/sdk/pull/45364. Specifically by adding 2 new properties. \r\nThis results in hitting the path that was not hit before - handling properties and items of `SdkResult`:\r\nhttps://github.com/dotnet/msbuild/blob/6aeb262fe5570316ede42dc69788908b548972c5/src/Build/Evaluation/Evaluator.cs#L1867-L1875\r\n\r\nWhen `Project` is created from `XmlReader` and not from `ProjectRootElement`, it results in null `ProjectRootElement` during Evaluation. Which results in internal exception like ` InternalErrorException: MSB0001: Internal MSBuild Error: .SdkResolver.1981936763.proj unexpectedly not a rooted path` here:\r\nhttps://github.com/dotnet/msbuild/blob/6aeb262fe5570316ede42dc69788908b548972c5/src/Build/Evaluation/Evaluator.cs#L1928\r\nAbove created project path is just `.SdkResolver.1981936763.proj` with no directory. Later exception is thrown here because of it:\r\nhttps://github.com/dotnet/msbuild/blob/9e51a07c6f1b23cb28b958d63c1dff1de704108d/src/Build/Evaluation/ProjectRootElementCache.cs#L262\r\nor here if you use `SimpleProjectRootElementCache`:\r\nhttps://github.com/dotnet/msbuild/blob/9e51a07c6f1b23cb28b958d63c1dff1de704108d/src/Build/Evaluation/SimpleProjectRootElementCache.cs#L43\r\n\r\n\r\n### Changes Made\r\nChanged the projet path that is created for `SdkResult` properties and items - if there is no `ProjectRootElement` then generate name like `{Guid}.SdkResolver.{propertiesAndItemsHash}.proj` in the current directory.\r\n\r\n### Testing\r\nAdded test. Tested manually as well\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2025-03-26T10:00:13Z",
  "updatedAt": "2025-03-27T12:51:39Z",
  "closedAt": "2025-03-27T12:17:50Z",
  "mergedAt": null,
  "additions": 94,
  "deletions": 32,
  "changedFiles": 12,
  "headRefName": "sdk-result-fix",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "do-not-merge"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0586a3f904d83c5f77f8407661429caadcbdc5f9",
          "message": "[vs17.13] Update dependencies from dotnet/arcade (#11588)\n\n* Update dependencies from https://github.com/dotnet/arcade build 20250311.4\n\nMicrosoft.SourceBuild.Intermediate.arcade , Microsoft.DotNet.Arcade.Sdk , Microsoft.DotNet.XliffTasks , Microsoft.DotNet.XUnitExtensions\n From Version 9.0.0-beta.25111.5 -> To Version 9.0.0-beta.25161.4\n\n* Update Versions.props VersionPrefix\n\n* Update dependencies from https://github.com/dotnet/arcade build 20250314.2\n\nMicrosoft.SourceBuild.Intermediate.arcade , Microsoft.DotNet.Arcade.Sdk , Microsoft.DotNet.XliffTasks , Microsoft.DotNet.XUnitExtensions\n From Version 9.0.0-beta.25111.5 -> To Version 9.0.0-beta.25164.2\n\n---------\n\nCo-authored-by: dotnet-maestro[bot] <dotnet-maestro[bot]@users.noreply.github.com>\nCo-authored-by: Jenny Bai <v-jennybai@microsoft.com>",
          "committedDate": "2025-03-19T13:13:44Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ca03f84b7848ce9d7d3e5d1f68c5e090efa4f30",
          "message": "Disable loc for 17.13 (#11617)",
          "committedDate": "2025-03-24T11:57:18Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7a36b9c070bdc4640c994677a8f5332f15da1302",
          "message": "fix null projectRootElement in Evaluation when handling SdkResult with properties and items",
          "committedDate": "2025-03-26T09:27:15Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96962273078b112a5b8c949de6de6e40d6a774aa",
          "message": "add comment",
          "committedDate": "2025-03-26T09:54:29Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "89bb3cfe20be5e83117b59d9baf73590d7182650",
          "message": "Merge branch 'vs17.13' into sdk-result-fix",
          "committedDate": "2025-03-26T10:00:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4322df81fd1bdcadcde9d52484894ff90428f7c",
          "message": "bump Version",
          "committedDate": "2025-03-26T10:03:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aafd230b9dda4b260b2d79bb877cea9002cf61f7",
          "message": "merge from vs17.13",
          "committedDate": "2025-03-26T10:06:13Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing this PR because we want to target 17.14 https://github.com/dotnet/msbuild/pull/11636",
        "createdAt": "2025-03-27T12:17:46Z",
        "author": {
          "login": "surayya-MS"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // Otherwise the project is in the same directory as _projectRootElement and has a name of the same project and ends like \".SdkResolver.{propertiesAndItemsHash}.proj\".\r\n```",
              "createdAt": "2025-03-26T16:27:44Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1912,8 +1912,13 @@ private ProjectRootElement CreateProjectForSdkResult(SdkResult sdkResult)\n             propertiesAndItemsHash = hash.ToHashCode();\n #endif\n \n-            // Generate a unique filename for the generated project for each unique set of properties and items.\n-            string projectPath = _projectRootElement.FullPath + \".SdkResolver.\" + propertiesAndItemsHash + \".proj\";\n+            // Generate a unique filename for the generated project for each unique set of properties and items that ends like \".SdkResolver.{propertiesAndItemsHash}.proj\".\n+            // _projectRootElement.FullPath can be null. This can be in the case when Project is created from XmlReader. For that case we generate filename like \"{Guid}.SdkResolver.{propertiesAndItemsHash}.proj in the current directory.\n+            // Oterwise the project is in the same directory as _projectRootElement and has a name of the saem project and ends like \".SdkResolver.{propertiesAndItemsHash}.proj\".",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you need this? Doesn't an unhandled exception fail the test anyway?",
              "createdAt": "2025-03-26T16:42:27Z",
              "path": "src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs",
              "diffHunk": "@@ -137,6 +138,48 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)\n             _logger.WarningCount.ShouldBe(0);\n         }\n \n+        [Fact]\n+        public void SuccessfullyEvaluatesSdkResultWithPropertiesForNullProjectRootElement()\n+        {\n+            Dictionary<string, string> propertiesToAdd = null;\n+            Dictionary<string, SdkResultItem> itemsToAdd = null;\n+\n+            CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);\n+\n+            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(\n+                new Build.BackEnd.SdkResolution.SdkResult(\n+                        new SdkReference(\"TestPropsAndItemsFromResolverSdk\", null, null),\n+                        Enumerable.Empty<string>(),\n+                        version: null,\n+                        propertiesToAdd,\n+                        itemsToAdd,\n+                        warnings: null)));\n+\n+            string projectContent = @\"\n+                    <Project>\n+                        <Import Project=\"\"Sdk.props\"\" Sdk=\"\"TestPropsAndItemsFromResolverSdk\"\"/>\n+                    </Project>\";\n+\n+            string projectPath = Path.Combine(_testFolder, \"project.proj\");\n+            File.WriteAllText(projectPath, projectContent);\n+\n+            using XmlReader xmlReader = XmlReader.Create(projectPath);\n+            try\n+            {\n+                ProjectRootElement projectRootElement = ProjectRootElement.Open(projectPath, _projectCollection);\n+\n+                projectOptions.ProjectCollection = _projectCollection;\n+\n+                // Creating project from XmlReader results in null ProjectRootElement on Evaluation phase.\n+                // In that case project created for SdkResult properties and items is given a unique file name {Guid}.SdkResolver.{propertiesAndItemsHash}.proj in the current directory\n+                Project.FromXmlReader(xmlReader, projectOptions);\n+            }\n+            catch (Exception ex)\n+            {\n+                Assert.Fail(\"Expected no exception, but got: \" + ex.ToString());\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "you are right, i don't need it. thanks!",
              "createdAt": "2025-03-27T12:38:39Z",
              "path": "src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs",
              "diffHunk": "@@ -137,6 +138,48 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)\n             _logger.WarningCount.ShouldBe(0);\n         }\n \n+        [Fact]\n+        public void SuccessfullyEvaluatesSdkResultWithPropertiesForNullProjectRootElement()\n+        {\n+            Dictionary<string, string> propertiesToAdd = null;\n+            Dictionary<string, SdkResultItem> itemsToAdd = null;\n+\n+            CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);\n+\n+            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(\n+                new Build.BackEnd.SdkResolution.SdkResult(\n+                        new SdkReference(\"TestPropsAndItemsFromResolverSdk\", null, null),\n+                        Enumerable.Empty<string>(),\n+                        version: null,\n+                        propertiesToAdd,\n+                        itemsToAdd,\n+                        warnings: null)));\n+\n+            string projectContent = @\"\n+                    <Project>\n+                        <Import Project=\"\"Sdk.props\"\" Sdk=\"\"TestPropsAndItemsFromResolverSdk\"\"/>\n+                    </Project>\";\n+\n+            string projectPath = Path.Combine(_testFolder, \"project.proj\");\n+            File.WriteAllText(projectPath, projectContent);\n+\n+            using XmlReader xmlReader = XmlReader.Create(projectPath);\n+            try\n+            {\n+                ProjectRootElement projectRootElement = ProjectRootElement.Open(projectPath, _projectCollection);\n+\n+                projectOptions.ProjectCollection = _projectCollection;\n+\n+                // Creating project from XmlReader results in null ProjectRootElement on Evaluation phase.\n+                // In that case project created for SdkResult properties and items is given a unique file name {Guid}.SdkResolver.{propertiesAndItemsHash}.proj in the current directory\n+                Project.FromXmlReader(xmlReader, projectOptions);\n+            }\n+            catch (Exception ex)\n+            {\n+                Assert.Fail(\"Expected no exception, but got: \" + ex.ToString());\n+            }",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's this testing? I don't see it used later.",
              "createdAt": "2025-03-26T16:43:05Z",
              "path": "src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs",
              "diffHunk": "@@ -137,6 +138,48 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)\n             _logger.WarningCount.ShouldBe(0);\n         }\n \n+        [Fact]\n+        public void SuccessfullyEvaluatesSdkResultWithPropertiesForNullProjectRootElement()\n+        {\n+            Dictionary<string, string> propertiesToAdd = null;\n+            Dictionary<string, SdkResultItem> itemsToAdd = null;\n+\n+            CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);\n+\n+            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(\n+                new Build.BackEnd.SdkResolution.SdkResult(\n+                        new SdkReference(\"TestPropsAndItemsFromResolverSdk\", null, null),\n+                        Enumerable.Empty<string>(),\n+                        version: null,\n+                        propertiesToAdd,\n+                        itemsToAdd,\n+                        warnings: null)));\n+\n+            string projectContent = @\"\n+                    <Project>\n+                        <Import Project=\"\"Sdk.props\"\" Sdk=\"\"TestPropsAndItemsFromResolverSdk\"\"/>\n+                    </Project>\";\n+\n+            string projectPath = Path.Combine(_testFolder, \"project.proj\");\n+            File.WriteAllText(projectPath, projectContent);\n+\n+            using XmlReader xmlReader = XmlReader.Create(projectPath);\n+            try\n+            {\n+                ProjectRootElement projectRootElement = ProjectRootElement.Open(projectPath, _projectCollection);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "it is a leftover code that i forgot to remove. thanks!",
              "createdAt": "2025-03-27T12:51:39Z",
              "path": "src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs",
              "diffHunk": "@@ -137,6 +138,48 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)\n             _logger.WarningCount.ShouldBe(0);\n         }\n \n+        [Fact]\n+        public void SuccessfullyEvaluatesSdkResultWithPropertiesForNullProjectRootElement()\n+        {\n+            Dictionary<string, string> propertiesToAdd = null;\n+            Dictionary<string, SdkResultItem> itemsToAdd = null;\n+\n+            CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);\n+\n+            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(\n+                new Build.BackEnd.SdkResolution.SdkResult(\n+                        new SdkReference(\"TestPropsAndItemsFromResolverSdk\", null, null),\n+                        Enumerable.Empty<string>(),\n+                        version: null,\n+                        propertiesToAdd,\n+                        itemsToAdd,\n+                        warnings: null)));\n+\n+            string projectContent = @\"\n+                    <Project>\n+                        <Import Project=\"\"Sdk.props\"\" Sdk=\"\"TestPropsAndItemsFromResolverSdk\"\"/>\n+                    </Project>\";\n+\n+            string projectPath = Path.Combine(_testFolder, \"project.proj\");\n+            File.WriteAllText(projectPath, projectContent);\n+\n+            using XmlReader xmlReader = XmlReader.Create(projectPath);\n+            try\n+            {\n+                ProjectRootElement projectRootElement = ProjectRootElement.Open(projectPath, _projectCollection);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}