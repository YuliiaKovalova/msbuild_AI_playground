{
  "number": 11788,
  "title": "TotalMemoryConsumption: include GC'd memory.",
  "body": "Use GetTotalAllocatedBytes instead of GetTotalMemory.\r\n\r\nThis causes objects that were allocated to the heap but have since been collected to be accounted as well.\r\n\r\n@JanKrivanek @rainersigwald ptal",
  "state": "MERGED",
  "createdAt": "2025-05-05T11:38:20Z",
  "updatedAt": "2025-05-05T15:23:39Z",
  "closedAt": "2025-05-05T15:23:39Z",
  "mergedAt": "2025-05-05T15:23:39Z",
  "additions": 11,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "mem_consumed",
  "isDraft": false,
  "author": {
    "login": "tmds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ef5c4bd9e0403c26e8d30d81f91391e070320bf7",
          "message": "TotalMemoryConsumption: include GC'd memory.\n\nUse GetTotalAllocatedBytes instead of GetTotalMemory.\n\nThis causes objects that were allocated to the heap but have since\nbeen collected to be accounted as well.",
          "committedDate": "2025-05-05T12:03:37Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e64229286b4ee55dc170af9114683b2ec1ad445",
          "message": "Use GetTotalMemory on netfx.",
          "committedDate": "2025-05-05T14:38:14Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@JanProvaznik @AR-May have we used this memory telemetry data for anything yet? I'm wondering if we should instead just remove it. If it's been useful, would this change hurt that?\r\n\r\n(I don't object to the change in principle, just want to make sure there's not a more straightforward solution)",
        "createdAt": "2025-05-05T13:39:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald It was useful for a memory investigation in runtime once so far. I think it's a perf bug if this runs outside of the telemetry scenario, (It might have been intentionally enabled to get memory logging, I have to check), (or it should run if we decide to implement https://github.com/dotnet/msbuild/issues/11337 ) ",
        "createdAt": "2025-05-05T14:06:06Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "https://github.com/dotnet/msbuild/blob/38feb3d42bc7c0f0586752c44cedf531d1ba14bf/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L431\r\nNarrator: It was in fact not a cheap call",
        "createdAt": "2025-05-05T14:26:53Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "@pavelsavara is not guilty/involved, I checked that he used this only during an investigation and didn't enable it for the runtime build by default so it's our bug.",
        "createdAt": "2025-05-05T14:29:18Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "> @JanProvaznik @AR-May have we used this memory telemetry data for anything yet? I'm wondering if we should instead just remove it. If it's been useful, would this change hurt that?\r\n\r\n\r\nIt was very useful to track down guilty Task and implement workaround see\r\nhttps://github.com/dotnet/msbuild/issues/11337#issuecomment-2788790624\r\n\r\n",
        "createdAt": "2025-05-05T14:58:44Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "> If it's been useful, would this change hurt that?\r\n\r\nNo. The metric is meant to determine how allocaty a Task is, and by using `GetTotalAllocatedBytes` instead of `GetTotalMemory` the effect/noise of GCs on the measurement is eliminated.",
        "createdAt": "2025-05-05T15:12:58Z",
        "author": {
          "login": "tmds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We want this behavior in net472 distribution of MSBuild.exe so please add an `#else` with the previous behavior. \r\nThough if this is causing perf trouble, it's a perf bug that it runs by default, but that can be solved in subsequent PR by me.",
              "createdAt": "2025-05-05T14:09:35Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1182,21 +1182,27 @@ internal class Stats()\n                 public short ExecutedCount { get; private set; } = 0;\n                 public long TotalMemoryConsumption { get; private set; } = 0;\n                 private readonly Stopwatch _executedSw  = new Stopwatch();\n+#if NET\n                 private long _memoryConsumptionOnStart;\n+#endif\n \n                 public TimeSpan ExecutedTime => _executedSw.Elapsed;\n \n                 public void ExecutionStarted()\n                 {\n-                    _memoryConsumptionOnStart = GC.GetTotalMemory(false);\n+#if NET\n+                    _memoryConsumptionOnStart = GC.GetTotalAllocatedBytes(false);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I will add the `#else`. Note that these APIs return different things. With `GetTotalAllocatedBytes` you get how much was allocated by the Task. With `GetTotalMemory` you get how much the heap size differed at the end vs the start.",
              "createdAt": "2025-05-05T14:12:19Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1182,21 +1182,27 @@ internal class Stats()\n                 public short ExecutedCount { get; private set; } = 0;\n                 public long TotalMemoryConsumption { get; private set; } = 0;\n                 private readonly Stopwatch _executedSw  = new Stopwatch();\n+#if NET\n                 private long _memoryConsumptionOnStart;\n+#endif\n \n                 public TimeSpan ExecutedTime => _executedSw.Elapsed;\n \n                 public void ExecutionStarted()\n                 {\n-                    _memoryConsumptionOnStart = GC.GetTotalMemory(false);\n+#if NET\n+                    _memoryConsumptionOnStart = GC.GetTotalAllocatedBytes(false);",
              "author": {
                "login": "tmds"
              }
            }
          ]
        }
      }
    ]
  }
}