{
  "number": 5743,
  "title": "Flip meaning of AllowFailureWithoutError Fixes #5701",
  "body": "Fixes #5701.\r\n\r\nChanges its meaning without altering the default behavior. Also fixed tests and added one to verify that the default is as expected.",
  "state": "CLOSED",
  "createdAt": "2020-09-17T17:53:53Z",
  "updatedAt": "2020-10-06T07:53:24Z",
  "closedAt": "2020-10-02T15:40:10Z",
  "mergedAt": "2020-10-02T15:40:10Z",
  "author": {
    "login": "Forgind"
  },
  "labels": [],
  "additions": 16,
  "deletions": 12,
  "changedFiles": 7,
  "headRefName": "flip-error",
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "09746aef0a2d059a0038f87d396e2712aab48cc0",
          "message": "Flip meaning of AllowFailureWithoutError\n\nFixes #5701.\n\nChanges its meaning without altering the default behavior. Also fixed tests and added one to verify that the default is as expected.",
          "committedDate": "2020-09-17T17:53:26Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@sae42,\r\n\r\nSince you're the only user of this that we know of, FYI and do you think this change would be too annoying?",
        "createdAt": "2020-09-18T15:53:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Intuitively this feels like the right thing to do and better to fix now. The only issue I can see (and it may not be a big issue) is the value assigned to this property (to avoid MSB4181 being output) would be false in 16.7 and true for 16.8+. Is there a really easy way to determine if a task is running under 16.7 or 16.8 etc? As a aside, when will the MSBuild NuGet packages be updated? Right now they are 16.6 so the only way to use IBuildEngine7 is using the MSBuild assemblies in a VS install or use the reflection hack.",
        "createdAt": "2020-09-22T09:14:28Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "We came up with three ways, although two are pretty bad:\r\n1) Use the BuildEngine to build a small project that outputs the version.\r\n2) Reflect on an MSBuild type to find the assembly and then its version.\r\n3) Pass `$(MSBuildVersion)` as a parameter to the task.\r\n\r\nI'm also a little worried about users using an early 16.8 preview, since just looking at the 16.8 part of the version would you make you think this boolean is flipped, but it isn't. That's only a short-term problem, though, whereas getting it wrong on 16.7 is a long-term problem.\r\n\r\nThe new ones should have already been pushed, but they weren't for some reason. I reported it to the relevant people, so it should be reasonably soon now. Sorry about that!",
        "createdAt": "2020-09-22T16:25:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> * Use the BuildEngine to build a small project that outputs the version.\r\n\r\nDefinitely do not do this.",
        "createdAt": "2020-09-22T16:39:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Actually, they all sound pretty bad to me. Perhaps a future API enhancement in the build engine to get a version would be a useful feature.\r\nI think I would be happy with treating 16.7 as a dead/unsupported version. 16.8 is LTS and I suspect any users on 16.7 would swiftly move to 16.8 when available anyway. So I'll align with that.",
        "createdAt": "2020-09-22T17:46:50Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "16.7 and 16.9 are LTS, unfortunately. That's only a few extra months, but it's still problematic.",
        "createdAt": "2020-09-22T18:09:03Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> 16.7 and 16.9 are LTS, unfortunately. That's only a few extra months, but it's still problematic.\r\n\r\nAh, you're right - that's a pain. What are the timescales for 16.9 - could you delay this change until then?\r\n\r\nIf the balance of opinion says make the change now, I'd say go with it and I'll figure out a way to live with it (probably option 2 above) ",
        "createdAt": "2020-09-22T19:27:54Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "Team Triage: We're going to wait for 16.9",
        "createdAt": "2020-09-23T16:29:35Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@Forgind VSTest also uses this. For the net5.0 release I flipped the switch in our code as suggested by @rainersigwald to get rid of the error message. Any suggestion of what to do next? Will you be adding and API to check the version? We insert VStest into VS and dotnet SDK, but there is also TestPlatform pacakge, and integration with VSCode which looks up available MSBuild versions, so I don't think we can just flip the default in the new version and call it a day. \ud83d\ude41 ",
        "createdAt": "2020-10-05T07:58:41Z",
        "author": {
          "login": "nohwnd"
        }
      },
      {
        "body": "@nohwnd, do any of the options in https://github.com/dotnet/msbuild/pull/5743#issuecomment-696832326 work for you?\r\n\r\nWhat version of MSBuild does net5.0 use?",
        "createdAt": "2020-10-05T17:05:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": " 2. should work, we are already using reflection to set the option anyway. I think we build against 15.0 but use whatever is available in the place where we insert, which would be VS, and 3.1 and 5.0 SDK. \r\n\r\nI don't know why it did not click before, thanks :) ",
        "createdAt": "2020-10-06T07:53:24Z",
        "author": {
          "login": "nohwnd"
        }
      }
    ]
  }
}