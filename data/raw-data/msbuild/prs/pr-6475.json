{
  "number": 6475,
  "title": "Make MSBuildFileSystemBase non-abstract to remove versioning and usability constraints",
  "body": "Partially fixes #6068\r\n\r\n### Context\r\n\r\n`MSBuildFileSystemBase` was introduced as a replacement of `IFileSystem` in #5546. It was added as an abstract class so potentially with the same constraints as an interface:\r\n- Versioning constraints. We can't add a new public member to the class, unless we make it non-abstract and provide a default implementation of new members.\r\n- Usability constraints. It is not possible to use `MSBuildFileSystemBase` to intercept calls or override a subset of them because the default MSBuild-provided file system is not exposed.\r\n\r\n### Changes Made\r\n\r\nTo address the constraints above, I am making the class non-abstract and having it by default forward all calls to the default MSBuild file system. This way the caller may choose to override only a subset of methods (e.g. file enumeration and existence/metadata checks) leaving the rest as is (e.g. actual file reads).\r\n\r\nAs a result I was able to delete both `IFileSystemAdapter.cs` and `MSBuildFileSystemAdapter.cs` because they're not needed anymore.\r\n\r\nThe difference between `IFileSystem` methods and public `MSBuildFileSystemBase` methods was just one method having a different name. I have renamed the one on the internal interface, assuming that this does not cause any troubles with the old NuGet, as tested by `TestOldNuget()`. This enabled further simplification and reduce the number of the \"adapter\" call hops.\r\n\r\nWith the changes in this PR, we have:\r\n- An internal interface `IFileSystem`, kept around for compat reasons.\r\n- A public class `MSBuildFileSystemBase`, which implements `IFileSystem` with virtual methods. The class is meant to be derived from and its methods overridden.\r\n\r\nIf we find ourselves adding new methods to the contract, it won't break existing `MSBuildFileSystemBase` because the new calls will just call through to the default implementation. If the change we need to make requires an orchestrated behavior change, we can always add a virtual 'version' prop, overriding which the derived class tells us which version of the contract it supports.\r\n\r\n### Testing\r\n\r\nExisting unit test coverage.\r\n\r\n### Notes\r\n\r\nThis change is meant to be non-breaking. I'm basically just making an abstract class non-abstract (would have to be done at some point anyways if we were to add a new method). The rest of the changes are internal.",
  "state": "MERGED",
  "createdAt": "2021-05-24T11:33:15Z",
  "updatedAt": "2021-05-29T04:54:44Z",
  "closedAt": "2021-05-29T04:54:44Z",
  "mergedAt": "2021-05-29T04:54:44Z",
  "additions": 83,
  "deletions": 226,
  "changedFiles": 17,
  "headRefName": "6068-MSBuildFileSystemBase",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "23b3d87dcb7b8d22d795082530c50f42205a7be6",
          "message": "Expose default FS via MSBuildFileSystemBase",
          "committedDate": "2021-05-27T12:21:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "281243b1c6b04eb0ddfc32db762fed1e6a3793a9",
          "message": "Further simplify the code by renaming an IFileSystem method",
          "committedDate": "2021-05-27T12:21:46Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b6a357c930f235b2bb0abb36d3b5dde17e049509",
          "message": "PR feedback: Keep MSBuildFileSystemBase abstract",
          "committedDate": "2021-05-27T12:21:46Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If you want to set a different file system, you override this class? Might it be helpful to make this public so you could just override the file system without making a new class?",
              "createdAt": "2021-05-24T23:38:55Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);\n+                    System.Threading.Interlocked.CompareExchange(ref _defaultFileSystem, newDefaultFileSystem, null);\n+                }\n+                return _defaultFileSystem;\n+            }\n+        }\n+\n+        public MSBuildFileSystemBase()\n+        { }\n+\n+        internal MSBuildFileSystemBase(IFileSystem defaultFileSystem)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "IFileSystem is private and should be kept that way (it only exists to avoid breaking old nuget), no sense making it public.",
              "createdAt": "2021-05-25T01:18:19Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);\n+                    System.Threading.Interlocked.CompareExchange(ref _defaultFileSystem, newDefaultFileSystem, null);\n+                }\n+                return _defaultFileSystem;\n+            }\n+        }\n+\n+        public MSBuildFileSystemBase()\n+        { }\n+\n+        internal MSBuildFileSystemBase(IFileSystem defaultFileSystem)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "My recommendation is to:\r\n- keep it an abstract class to make it clear it's a contract. But this is more of a personal preference of mine, treat it as a nit :)\r\n- have default implementations that call into FileSystems.Default, without any caching. This enables users to implement a subset without coupling them to caching semantics.\r\n- add a protected bool Property via which subclasses can request that the default implementations should cache.\r\n\r\nIssues with the current approach:\r\n- users might not want caching, but they are forced into caching\r\n- coherency issues when the user overrides but not all methods, which conflates the forced caching.\r\n",
              "createdAt": "2021-05-25T01:27:37Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I like not having to implement everything, but you're right about some coherency issues if a user overrides some but not all methods. Maybe implement methods with \"throw new MethodNotImplementedException()\"?",
              "createdAt": "2021-05-25T15:56:11Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The new requirement is that users want to implement only a subset, so if MSBuild ends up calling a non implemented method, it will throw.\r\n\r\nSo one approach is the one Ladi did here, where the interface chooses some implementation of itself and uses that for non overriden methods. I'm starting to think it might be the simplest, non-bloated solution. The caveat is the forced caching which can be fixed by adding a protected switch turn caching of the default implementation on or off.\r\n\r\nAnother approach would be to split the big interface into smaller, more coherent interfaces: IExistenceChecks, IFileMetadata, IFileContents. The user can choose which one to implement and msbuild would provide default implementations for the others. But this adds a lot of boilerplate for minimal gains.",
              "createdAt": "2021-05-25T18:10:22Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "This is a great point, thank you. How about falling back only to the non-caching default implementation, and not exposing any switches for now?\r\n\r\nWe can always add the switch later if such a need arises. Better than regretting introducing something that we later find is not needed or causing troubles. Basically we're saying that caching is internal to MSBuild and activated only if the caller didn't pass their `MSBuildFileSystemBase`-derived implementation. This way none of the caching semantics is publicly exposed.\r\n",
              "createdAt": "2021-05-26T13:12:53Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> keep it an abstract class to make it clear it's a contract. But this is more of a personal preference of mine, treat it as a nit :)\r\n\r\nI hear you. I'll keep it abstract and add back the adapter as a trivial non-abstract subclass of `MSBuildFileSystemBase`.",
              "createdAt": "2021-05-26T13:14:37Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> How about falling back only to the non-caching default implementation, and not exposing any switches for now?\r\n\r\nSeems the simplest. Downside is that the maximal caching benefits won't be reached. This makes me think whether it's worth supporting partial contract implementation at all. The implementor can noop the methods they don't want to support by just copying from https://github.com/dotnet/msbuild/blob/main/src/Shared/FileSystem/ManagedFileSystem.cs. Or we could make [FileSystems](https://github.com/dotnet/msbuild/blob/main/src/Shared/FileSystem/FileSystems.cs) public and the implementor can defer to `FileSystems.Default` for the things they don't want to implement.\r\n\r\nLater edit: Ah, the above suggestion breaks the \"thou shall not make breaking  changes\" requirement. Yeah, it seems that in order to not break implementors the interface is forced to choose a default implementation and call it for any new APIs that are introduced later on.",
              "createdAt": "2021-05-26T17:13:52Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Yes, I was just going to reply with the same.\r\n\r\nAlthough: Let's say we add a new method in a future version of MSBuild and it defaults to regular file system I/O, like the existing ones. If the goal of the 3rd party implementation is some kind of optimization, it's probably fine. Until they implement the new method they will be getting an unoptimized behavior so perhaps worst case just losing perf. If the goal is a complete virtualization of the filesystem, though, it's going to break them.\r\n\r\nWe need a mechanism to tell which version of the contract is being implemented. MSBuild can either optionally depend on a newer contract or have a hard dependency on it. The latter case would presumably generate a nice exception saying \"sorry, your FS implementation is too old, I refuse to use it\". I think this can be done simply with inheritance. Need to add a new method? Have `MSBuildFileSystemBase2` derive from `MSBuildFileSystemBase` so MSBuild can do an `is MSBuildFileSystemBase2` check. It's ironic that we're just trying to get rid of a similar pattern in `IBuildEngine` but it's the exact opposite scenario (interface provided vs. interface consumed) and a good fit, as far as I can tell.\r\n\r\nThe changes in this PR are then basically just for convenience so implementors that do optimizations can override only a subset of methods. Versioning would be done by introducing new types, not by adding members to existing ones. Hope it's making sense and curious what you think.",
              "createdAt": "2021-05-26T21:58:25Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "We could have it simple: if the 3rd party implementation wants complete virtualization, they have to implement the entire interface. If they do not want complete FS virtualization but to only speedup certain calls, they can implement a subset. Caveat is, as you mentioned, that if they are going for virtualization and we introduce a new method we'll break their virtualization expectation. We could fix that by adding a version number on the interface. The implementor can check whether the latest version matches what they coded against.\r\n\r\nFrom a practical viewpoint, we don't currently guarantee virtualization because the interface is not piped to all the places that do IO during evaluation. So we can just say we don't support virtualization, and hence providing default implementations for new interface members is fine. If we ever want to support virtualization and force implementors to implement newly added members, then we can add `MSBuildFileSystemBase2`.",
              "createdAt": "2021-05-26T23:42:19Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "> From a practical viewpoint, we don't currently guarantee virtualization because the interface is not piped to all the places that do IO during evaluation.\r\n\r\nAh, good to know, thank you. We should aim to make it complete at some point to get the most out of the feature.\r\n\r\nIt looks like we have a reasonable path forward. I have tweaked the changes as discussed above - made `MSBuildFileSystemBase` abstract again and made it use the default FS implementation (without caching).",
              "createdAt": "2021-05-27T11:02:58Z",
              "path": "src/Build/FileSystem/MSBuildFileSystemBase.cs",
              "diffHunk": "@@ -14,66 +15,95 @@ namespace Microsoft.Build.FileSystem\n     /// - must be thread safe\n     /// - may cache some or all the calls.\n     /// </summary>\n-    public abstract class MSBuildFileSystemBase\n+    public class MSBuildFileSystemBase : IFileSystem\n     {\n+        private IFileSystem _defaultFileSystem;\n+        private IFileSystem DefaultFileSystem\n+        {\n+            get\n+            {\n+                if (_defaultFileSystem == null)\n+                {\n+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}