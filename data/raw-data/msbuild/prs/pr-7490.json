{
  "number": 7490,
  "title": "Respect deps json",
  "body": "Fixes #4081 and #1887; progress towards #5037\r\n\r\n### Context\r\nMSBuild doesn't currently respect .deps.json files for plugins (tasks). This can lead to incorrect versions of assemblies being found as finding the AnyCPU version of an assembly instead of the windows-specific version.\r\n\r\n### Changes Made\r\nUse AssemblyDependencyResolver as a second pass (after looking for \"well-known assemblies\") to automatically use the deps.json file to find the right assembly.\r\n\r\n### Testing\r\nVerified that for a task assembly with a rid-specific dependency, it finds the rid-specific dependency as specified by the deps.json file. Also verified that it can find native assemblies and that the issue that inspired this (https://github.com/dotnet/sdk/issues/23498) no longer reproduces after giving nuget a .deps.json file specifying the correct version.",
  "state": "CLOSED",
  "createdAt": "2022-03-25T20:16:37Z",
  "updatedAt": "2022-04-05T16:36:22Z",
  "closedAt": "2022-04-05T16:36:22Z",
  "mergedAt": null,
  "additions": 58,
  "deletions": 16,
  "changedFiles": 3,
  "headRefName": "respect-deps-json",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "250801151928f138b3e9a31890b579881d26d38e",
          "message": "Add Change Wave 17.2\n\nCo-Authored-By: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-03-01T22:19:36Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb426a81fff78e0bf9e25ce033eaacdc1ba0fd41",
          "message": "Use AssemblyDependencyResolver in .NET",
          "committedDate": "2022-03-01T22:35:28Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1e4ed75bc14753c63fd6be54b340bc744aa6997",
          "message": "Improved diagnosability in TypeLoader_Tests",
          "committedDate": "2022-03-03T20:57:10Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "What I've found:\r\nThe failing test is LoadNonExistingAssembly]()\r\nUnsurprisingly, it fails on Core. When I ran tests locally, it only failed on net6.0. It surprised me for a moment that windows full would fail; apparently it also runs net6.0 tests. (I think we should change that.)\r\n\r\nWith my local debugging, it seems to be failing when it tries to create an AssemblyDependencyResolver, and the AssemblyPath doesn't exist:\r\n`System.InvalidOperationException: Dependency resolution failed for component` --> `Detailed error: Failed to locate managed application`\r\n\r\nI was able to make the test pass by only making or using the AssemblyDependencyResolver if assemblyPath exists.",
        "createdAt": "2022-04-04T23:33:37Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> It surprised me for a moment that windows full would fail; apparently it also runs net6.0 tests. (I think we should change that.)\r\n\r\nThat is the \"official build configuration\" and I think it should definitely run all tests. The only differences between windows/full and windows/core are whether we build with `dotnet build` or `msbuild.exe`, and I think that's a reasonable goal to preserve.",
        "createdAt": "2022-04-05T14:29:16Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}