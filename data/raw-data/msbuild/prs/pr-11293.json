{
  "number": 11293,
  "title": "Fix item update evaluation when path contains parenthesis and add test coverage",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/11237\r\n\r\n### Context\r\n\r\nCurrently we put **a non-normalized** path in the dictionary\r\n[msbuild/src/Build/Evaluation/LazyItemEvaluator.cs](https://github.com/dotnet/msbuild/blob/ec6b2a31a9388c298c4cab5be34ec2402372c5ce/src/Build/Evaluation/LazyItemEvaluator.cs#L387)\r\n\r\nand later attempt to pull from it a **normalized** version\r\n[msbuild/src/Build/Evaluation/LazyItemEvaluator.cs](https://github.com/dotnet/msbuild/blob/ec6b2a31a9388c298c4cab5be34ec2402372c5ce/src/Build/Evaluation/LazyItemEvaluator.cs#L443)\r\n\r\nIn runtime it looks like this when path contains parenthesis:\r\nwe **put** C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\core\\CheckSignApk%28\\Microsoft.NETCore.App\r\nwe **pull** C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\core\\CheckSignApk(\\Microsoft.NETCore.App\r\n\r\n### Changes Made\r\nadjust operation of adding to the dictionary and pulling values from it.\r\n\r\n### Testing\r\nUI + manual\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-16T17:03:30Z",
  "updatedAt": "2025-01-31T14:26:33Z",
  "closedAt": "2025-01-31T10:10:22Z",
  "mergedAt": "2025-01-31T10:10:22Z",
  "additions": 36,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "dev/ykovalova/fix_item_manipulations",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3db4fb17d2db5e1910ad94c8e9d5e98f1169beaf",
          "message": "fix item evaluation and add test coverage",
          "committedDate": "2025-01-16T16:59:19Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ca39400746f9e2234aa45a3baf7a768e30c3d25",
          "message": "remove extra try/catch",
          "committedDate": "2025-01-17T12:49:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6317da8f30615a15d2f929aa72f507de45535794",
          "message": "remove interpolation in the test",
          "committedDate": "2025-01-26T18:01:17Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind interesting, I am checking your example and it seems to be fine now:\r\n![{5444C4FE-D4B8-45E6-946E-8AC969356EED}](https://github.com/user-attachments/assets/1ba6856e-cb60-4a16-9939-8de1b03078ff)\r\nCould you please check on my screenshot if I miss anything?",
        "createdAt": "2025-01-17T08:39:46Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "This fix is only on preview2 right? ",
        "createdAt": "2025-01-31T14:09:05Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "> This fix is only on preview2 right?\r\n\r\nyes, it's correct.",
        "createdAt": "2025-01-31T14:26:32Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "why the try-catch block?",
              "createdAt": "2025-01-17T12:26:26Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -96,6 +96,48 @@ public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucc\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"(test\")]\n+        [InlineData(\"@@@test\")]\n+        [InlineData(@\")(!!test\")]\n+        public void VerifyItemsUpdateIsHandledForAnyProjectPath(string projectPathCandidate)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder projDirectory = env.CreateFolder(Path.Combine(env.CreateNewTempPath().TempPath, projectPathCandidate), createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(projDirectory, \"project.proj\", @$\"\n+<Project>\n+\n+  <ItemGroup>\n+    <ItemCheck Include=\"\"Test\"\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+     <ItemCheck Update=\"\"Test\"\"\n+             NewTestLabels=\"\"Dummy\"\" />\n+  </ItemGroup>\n+\n+\n+ <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"ItemCheck updated metadata value: @(ItemCheck->Metadata('NewTestLabels'))\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just curios - wouldn't raw string literal (`\"\"\"...`) be more readable here? Interpolated string is being used, but there doesn't seem to be any interpolation.",
              "createdAt": "2025-01-25T09:17:23Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -96,6 +96,41 @@ public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucc\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"(test\")]\n+        [InlineData(\"@@@test\")]\n+        [InlineData(@\")(!!test\")]\n+        public void VerifyItemsUpdateIsHandledForAnyProjectPath(string projectPathCandidate)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder projDirectory = env.CreateFolder(Path.Combine(env.CreateNewTempPath().TempPath, projectPathCandidate), createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(projDirectory, \"project.proj\", @$\"\n+<Project>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Strong stylistic agreement on \"use raw strings for XML in tests\". Saves you from the double-quoting.",
              "createdAt": "2025-01-30T19:22:53Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -96,6 +96,41 @@ public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucc\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"(test\")]\n+        [InlineData(\"@@@test\")]\n+        [InlineData(@\")(!!test\")]\n+        public void VerifyItemsUpdateIsHandledForAnyProjectPath(string projectPathCandidate)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder projDirectory = env.CreateFolder(Path.Combine(env.CreateNewTempPath().TempPath, projectPathCandidate), createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(projDirectory, \"project.proj\", @$\"\n+<Project>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it possible problem that we now add normalized path, but on line 404 we remove based on original value?\r\n\r\nI'm completely lost on what exactly is this trying to do, how often and with how much data can it be called - hence cannot access if there might be any concerns with flipping the line 404 to normalize everything as well before attempting to remove. If there might be perf concerns - than maybe we need double indexed lookup - by raw and normalized path?\r\n\r\nBut maybe I'm completely confused :-)",
              "createdAt": "2025-01-25T09:35:21Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.cs",
              "diffHunk": "@@ -384,7 +384,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI\n                                 break;\n                             }\n \n-                            string fullPath = FileUtilities.GetFullPath(frag.TextFragment, frag.ProjectDirectory);\n+                            string fullPath = FileUtilities.NormalizePathForComparisonNoThrow(frag.TextFragment, frag.ProjectDirectory);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I flipped to this method, because the missed lookup for the update was done by it:\r\nhttps://github.com/dotnet/msbuild/blob/3ca39400746f9e2234aa45a3baf7a768e30c3d25/src/Build/Evaluation/LazyItemEvaluator.cs#L443\r\n \r\nTo me it looks like a simple bug.\r\n\r\nFor the question - not sure how Removal works even without my changes, since TextFragment contains a file name only: \r\n![{03424A8C-1C88-47ED-8E7E-94E47D092BA1}](https://github.com/user-attachments/assets/d48e61d2-a471-40e2-acbd-d3475e6cb94e)\r\n\r\n@rainersigwald , do you know any story behind this?\r\n",
              "createdAt": "2025-01-26T17:58:56Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.cs",
              "diffHunk": "@@ -384,7 +384,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI\n                                 break;\n                             }\n \n-                            string fullPath = FileUtilities.GetFullPath(frag.TextFragment, frag.ProjectDirectory);\n+                            string fullPath = FileUtilities.NormalizePathForComparisonNoThrow(frag.TextFragment, frag.ProjectDirectory);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "I don't know exactly what's going on with this, no. The call is passing the project directory as well as the filename, though, so shouldn't that work?",
              "createdAt": "2025-01-30T19:41:59Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.cs",
              "diffHunk": "@@ -384,7 +384,7 @@ private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyI\n                                 break;\n                             }\n \n-                            string fullPath = FileUtilities.GetFullPath(frag.TextFragment, frag.ProjectDirectory);\n+                            string fullPath = FileUtilities.NormalizePathForComparisonNoThrow(frag.TextFragment, frag.ProjectDirectory);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}