{
  "number": 10457,
  "title": "Initial version of properties analyzer",
  "body": "Fixes #9883\r\nFixes #10427\r\n\r\n### Context\r\n\r\nThis is a proposal of multirule integrated internal build check that checks for:\r\n* Property being used without being initialized\r\n* Property being used before being initialized\r\n* Property being initialized but never used\r\n\r\n\r\n### Testing\r\n Targetted unittests\r\n\r\n### UX\r\n\r\nsample output from test for current proposal:\r\n\r\n```\r\nMSBUILD : warning : <path>\\myProj.proj (24,10): BC0202: Property: [MyPropT2] first declared/initialized at [<path>\\myProj.proj (26,1)] used before it was initialized.\r\nMSBUILD : warning : <path>\\myProj.proj (13,3): BC0203: Property: [MyProp13] was declared/initialized, but it was never used.\r\nMSBUILD : warning : <path>\\myProj.proj (13,3): BC0201: Property: [MyProp11] was accessed, but it was never initialized.\r\n\r\n```\r\n",
  "state": "MERGED",
  "createdAt": "2024-07-29T12:31:22Z",
  "updatedAt": "2024-08-11T10:55:37Z",
  "closedAt": "2024-08-09T15:39:07Z",
  "mergedAt": "2024-08-09T15:39:06Z",
  "additions": 586,
  "deletions": 96,
  "changedFiles": 25,
  "headRefName": "proto/props-buildcheck",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a2b19cade8d91f0e5427709311593917544f4aff",
          "message": "Initial version of properties analyzer",
          "committedDate": "2024-07-26T19:55:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2179ef5edd4a7bdc3ec52c4107cc9b133826710",
          "message": "Merge remote-tracking branch 'upstream/main' into proto/props-buildcheck",
          "committedDate": "2024-08-07T12:50:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1304c9552de8f01c731531e25bc41959202558bb",
          "message": "Improve the properties analyzers",
          "committedDate": "2024-08-08T10:36:52Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6abba50a57a0f6969a3c3fe4db8f5223df51b5f6",
          "message": "Fix the property analyzers",
          "committedDate": "2024-08-08T14:59:33Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b77fd775f7f8af3b7f9416ea88c767b055cc643d",
          "message": "Fix suppressions",
          "committedDate": "2024-08-08T16:21:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df9fd3ee43ae10cc93df6ed8b5e407bd8af77773",
          "message": "Merge branch 'main' into proto/props-buildcheck",
          "committedDate": "2024-08-09T09:09:47Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aee4c0dfed0ca522ff637bf4f91a2b101f5a9e32",
          "message": "Fix after merge",
          "committedDate": "2024-08-09T09:24:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "113d7879a8be84b52ddb06a1bf335fb1478f7935",
          "message": "Fix test",
          "committedDate": "2024-08-09T09:26:40Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99ee32ffe7ff41d1378276ca6ce471ed0fca9b53",
          "message": "Reflect PR comments",
          "committedDate": "2024-08-09T15:00:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Casing seems to be incorrect for a type exposed to public!?\r\n\r\n```suggestion\r\n    public interface IMSBuildElementLocation\r\n```",
              "createdAt": "2024-07-30T07:55:10Z",
              "path": "src/Shared/IElementLocation.cs",
              "diffHunk": "@@ -20,7 +20,7 @@ internal interface IElementLocation : IMsBuildElementLocation, ITranslatable { }\n     /// This is currently internal - but it is prepared to be made public once it will be needed by other public BuildCheck OM\n     /// (e.g. by property read/write OM)\n     /// </remarks>\n-    internal interface IMsBuildElementLocation\n+    public interface IMsBuildElementLocation",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Any review at any time is appreciated ;-)",
              "createdAt": "2024-08-11T10:55:37Z",
              "path": "src/Shared/IElementLocation.cs",
              "diffHunk": "@@ -20,7 +20,7 @@ internal interface IElementLocation : IMsBuildElementLocation, ITranslatable { }\n     /// This is currently internal - but it is prepared to be made public once it will be needed by other public BuildCheck OM\n     /// (e.g. by property read/write OM)\n     /// </remarks>\n-    internal interface IMsBuildElementLocation\n+    public interface IMsBuildElementLocation",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: acessed -> accessed",
              "createdAt": "2024-08-09T11:10:18Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -43,6 +45,48 @@ Relying on environment variables introduces variability and unpredictability, as\n \n This practice can result in inconsistent build outcomes and makes debugging difficult, since environment variables are external to project files and build scripts. To ensure consistent and reproducible builds, avoid using environment variables. Instead, explicitly pass properties using the /p option, which offers better control and traceability.\n \n+## <a name=\"BC0201\"></a>BC0201 - Usage of undefined property.\n+\n+\"A property that is accessed should be declared first.\"\n+\n+This check indicates that a property was acessed without being declared (the declaration might have happen later - see [BC0202](#BC0202) for such checking). Only accessing in the configured scope (by default it's the project file only) are checked.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: vie -> via",
              "createdAt": "2024-08-09T11:11:12Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -43,6 +45,48 @@ Relying on environment variables introduces variability and unpredictability, as\n \n This practice can result in inconsistent build outcomes and makes debugging difficult, since environment variables are external to project files and build scripts. To ensure consistent and reproducible builds, avoid using environment variables. Instead, explicitly pass properties using the /p option, which offers better control and traceability.\n \n+## <a name=\"BC0201\"></a>BC0201 - Usage of undefined property.\n+\n+\"A property that is accessed should be declared first.\"\n+\n+This check indicates that a property was acessed without being declared (the declaration might have happen later - see [BC0202](#BC0202) for such checking). Only accessing in the configured scope (by default it's the project file only) are checked.\n+\n+There are couple cases which are allowed by the check:\n+\n+* Selfreferencing declaration is allowed - e.g.:\n+  `<ChainProp>$(ChainProp)</ChainProp>`\n+\n+* Checking the property for emptyness - e.g.:\n+  `<PropertyGroup Condition=\"'$(PropertyThatMightNotBeDefined)' == ''\">`\n+\n+* Any usage of property in condition. This can be opted out vie the configuration `AllowUninitializedPropertiesInConditions` - e.g.:",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: acessed -> accessed",
              "createdAt": "2024-08-09T11:11:54Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -43,6 +45,48 @@ Relying on environment variables introduces variability and unpredictability, as\n \n This practice can result in inconsistent build outcomes and makes debugging difficult, since environment variables are external to project files and build scripts. To ensure consistent and reproducible builds, avoid using environment variables. Instead, explicitly pass properties using the /p option, which offers better control and traceability.\n \n+## <a name=\"BC0201\"></a>BC0201 - Usage of undefined property.\n+\n+\"A property that is accessed should be declared first.\"\n+\n+This check indicates that a property was acessed without being declared (the declaration might have happen later - see [BC0202](#BC0202) for such checking). Only accessing in the configured scope (by default it's the project file only) are checked.\n+\n+There are couple cases which are allowed by the check:\n+\n+* Selfreferencing declaration is allowed - e.g.:\n+  `<ChainProp>$(ChainProp)</ChainProp>`\n+\n+* Checking the property for emptyness - e.g.:\n+  `<PropertyGroup Condition=\"'$(PropertyThatMightNotBeDefined)' == ''\">`\n+\n+* Any usage of property in condition. This can be opted out vie the configuration `AllowUninitializedPropertiesInConditions` - e.g.:\n+  ```ini\n+  [*.csproj]\n+  build_check.BC0201.severity=error\n+  build_check.BC0201.AllowUninitializedPropertiesInConditions=false\n+  build_check.BC0202.AllowUninitializedPropertiesInConditions=false\n+  ```\n+\n+  BC0201 and BC0202 must have same value for the optional switch - as both operate on top of same data and same filtering.\n+\n+## <a name=\"BC0202\"></a>BC0202 - Property first declared after it was used.\n+\n+\"A property should be declared before it is first used.\"\n+\n+This check indicates that a property was acessed before it was declared. The default scope of this rule is the project file only. The scope captures the read and write operations as well. So this rule reports:",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this text hardcoded by design and we will not localize?",
              "createdAt": "2024-08-09T11:15:52Z",
              "path": "src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs",
              "diffHunk": "@@ -0,0 +1,242 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Linq;\n+using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal class PropertiesUsageCheck : InternalCheck\n+{\n+    private static readonly CheckRule _usedBeforeInitializedRule = new CheckRule(\"BC0201\", \"PropertyUsedBeforeDeclared\",\n+        \"A property that is accessed should be declared first.\",",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Yeah - localization of Checks is not part of NET9. We'll need to design and implement it with next version",
              "createdAt": "2024-08-09T11:31:15Z",
              "path": "src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs",
              "diffHunk": "@@ -0,0 +1,242 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.Linq;\n+using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal class PropertiesUsageCheck : InternalCheck\n+{\n+    private static readonly CheckRule _usedBeforeInitializedRule = new CheckRule(\"BC0201\", \"PropertyUsedBeforeDeclared\",\n+        \"A property that is accessed should be declared first.\",",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: rename the method LogProjectEvaluation -> StartProjectEvaluation. The name is misleading.",
              "createdAt": "2024-08-09T12:49:24Z",
              "path": "src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs",
              "diffHunk": "@@ -30,6 +31,8 @@ public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContex\n         public void LogProjectEvaluationStarted()",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Renamed to ProcessProjectEvaluationStarted (to be consistent with naming in BuildEngineDataRouter)",
              "createdAt": "2024-08-09T14:48:36Z",
              "path": "src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs",
              "diffHunk": "@@ -30,6 +31,8 @@ public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContex\n         public void LogProjectEvaluationStarted()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "suggestion: keeping with the renaming theme - remove \"build\" from the name IInternalCheckRegistrationContext. Fine with me if it stays as is, since it implements IBuildCheckRegistrationContext",
              "createdAt": "2024-08-09T12:52:23Z",
              "path": "src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs",
              "diffHunk": "@@ -0,0 +1,13 @@\n+\ufeffusing System;",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "summary is missing.",
              "createdAt": "2024-08-09T12:54:49Z",
              "path": "src/Build/BuildCheck/API/InternalCheck.cs",
              "diffHunk": "@@ -0,0 +1,27 @@\n+\ufeffusing System;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal abstract class InternalCheck : Check\n+{\n+    /// <summary>\n+    /// ",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the name of the file is not same as the name of the class",
              "createdAt": "2024-08-09T12:59:56Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs",
              "diffHunk": "@@ -2,10 +2,13 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+using System.Threading;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Checks;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n-internal sealed class BuildCheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IBuildCheckRegistrationContext\n+internal sealed class BuildCheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IInternalBuildCheckRegistrationContext",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: fullPath -> projectFullPath consistent with other methods",
              "createdAt": "2024-08-09T13:03:24Z",
              "path": "src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs",
              "diffHunk": "@@ -58,48 +58,35 @@ public void FinalizeProcessing(LoggingContext loggingContext)\n     {\n     }\n \n-    public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, ICheckContext checkContext, string fullPath)\n-    {\n-    }\n-\n-    public void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)\n+    public void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, ICheckContext checkContext,\n+        string projectFullPath)\n     {\n     }\n \n-    public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath)\n+    public void StartProjectEvaluation(ICheckContext checkContext, string fullPath)",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: renaming the properties to MyProp4, MyProp5 etc. or giving them names like PropNeverUsed, PropNeverInit, PropUsedBeforeInit",
              "createdAt": "2024-08-09T13:08:17Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -37,6 +38,62 @@ public EndToEndTests(ITestOutputHelper output)\n \n     public void Dispose() => _env.Dispose();\n \n+    [Fact]\n+    public void PropertiesUsageAnalyzerTest()\n+    {\n+        using TestEnvironment env = TestEnvironment.Create();\n+        string contents = \"\"\"\n+                              <Project DefaultTargets=\"PrintEnvVar\">\n+\n+                              <PropertyGroup>\n+                              <!--\n+                              <MyProp1>value-of-prop1</MyProp1>\n+                              <MyProp2>$(MyProp1)</MyProp2>\n+                              <MyProp3>blah</MyProp3>\n+                              -->\n+                              </PropertyGroup>\n+\n+\n+                              <PropertyGroup Condition=\"'$(MyProp12)' == ''\">\n+                                <MyProp13>$(MyProp11)</MyProp13>\n+                              </PropertyGroup>\n+\n+\n+                              <!--\n+                              <ItemGroup>\n+                                <a Include=\"$(nonexistent)\" />\n+                              </ItemGroup>\n+                              -->\n+\n+                              <Target Name=\"PrintEnvVar\">\n+                              <Message Text=\"MyPropT2 has value $(MyPropT2)\" Importance=\"High\" Condition=\"'$(MyPropT2)' == ''\" />\n+                              <PropertyGroup>\n+                              <MyPropT2>$(MyPropT2);xxx</MyPropT2>\n+                              </PropertyGroup>\n+                              </Target>\n+\n+                              </Project>\n+                              \"\"\";\n+        TransientTestFolder logFolder = env.CreateFolder(createFolder: true);\n+        TransientTestFile projectFile = env.CreateFile(logFolder, \"myProj.proj\", contents);\n+\n+        string output = RunnerUtilities.ExecBootstrapedMSBuild($\"{projectFile.Path} -check /v:detailed\", out bool success);\n+        _env.Output.WriteLine(output);\n+        _env.Output.WriteLine(\"=========================\");\n+        success.ShouldBeTrue(output);\n+\n+        output.ShouldMatch(@\"BC0201: .* Property: \\[MyProp11\\]\");",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}