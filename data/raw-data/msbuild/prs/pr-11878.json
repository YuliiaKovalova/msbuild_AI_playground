{
  "number": 11878,
  "title": "Tolerate duplication in p2p negotiation batches",
  "body": "The intent of batching over the condition\r\n```\r\n    '@(ProjectsWithNearestPlatform)' == '%(Identity)'\r\n```\r\nis to run the update for each item in the list (that meets the rest of\r\nthe condition).\r\n\r\nHowever, if there are two list entries with identical `%(Identity)`--in\r\nthis case duplicate ProjectReferences--they batch into the same bucket\r\nand then that condition is `false`.\r\n\r\nInstead, batch over unique identities to tolerate duplicates.\r\n\r\nFixes #2688.",
  "state": "OPEN",
  "createdAt": "2025-05-21T20:54:58Z",
  "updatedAt": "2025-06-02T14:51:37Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 5,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "allow-redundant-projrefs-in-negotiation",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "17984d56fabaec96a87645c8fc9fab7b1afb7e24",
          "message": "Tolerate duplication in p2p negotiation batches\n\nThe intent of batching over the condition\n    '@(ProjectsWithNearestPlatform)' == '%(Identity)'\nis to run the update for each item in the list (that meets the rest of\nthe condition).\n\nHowever, if there are two list entries with identical `%(Identity)`--in\nthis case duplicate ProjectReferences--they batch into the same bucket\nand then that condition is `false`.\n\nInstead, batch over unique identities to tolerate duplicates.\n\nFixes #2688.\n\nCo-Authored-By: Benjamin Witman <160950603+benwitmanmsft@users.noreply.github.com>",
          "committedDate": "2025-05-21T20:53:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The check `'%(ProjectsWithNearestPlatform.Identity)' != ''` is redundant because the `Identity` metadata is always populated. You can simplify the condition to only check `'%(ProjectsWithNearestPlatform.NearestPlatform)' != ''`.\n```suggestion\n      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">\n```",
              "createdAt": "2025-05-21T20:56:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1736,12 +1736,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n          that can't multiplatform.  -->\n     <ItemGroup Condition=\"'@(_ProjectsWithPlatformAssignment)' != ''\">\n       <ProjectsWithNearestPlatform Include=\"@(_ProjectsWithPlatformAssignment)\"/>\n-      <ProjectsWithNearestPlatform Condition=\"'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">\n+      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.Identity)' != '' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Since `Identity` is never empty, you can remove `'%(ProjectsWithNearestPlatform.Identity)' != ''` and only check `'%(ProjectsWithNearestPlatform.NearestPlatform)' == ''` for clarity.\n```suggestion\n      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.NearestPlatform)' == ''\">\n```",
              "createdAt": "2025-05-21T20:56:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1736,12 +1736,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n          that can't multiplatform.  -->\n     <ItemGroup Condition=\"'@(_ProjectsWithPlatformAssignment)' != ''\">\n       <ProjectsWithNearestPlatform Include=\"@(_ProjectsWithPlatformAssignment)\"/>\n-      <ProjectsWithNearestPlatform Condition=\"'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">\n+      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.Identity)' != '' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">\n         <SetPlatform>Platform=%(ProjectsWithNearestPlatform.NearestPlatform)</SetPlatform>\n       </ProjectsWithNearestPlatform>\n \n       <!-- When GetCompatiblePlatform fails to assign NearestPlatform (or determines it's identical to default for the referenced project), undefine Platform and let that project build \"on its own\" -->\n-      <ProjectsWithNearestPlatform Condition=\"'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' == ''\">\n+      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.Identity)' != '' and '%(ProjectsWithNearestPlatform.NearestPlatform)' == ''\">",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The `'%(AnnotatedProjects.Identity)' != ''` check is unnecessary because each item has an identity by definition. You can streamline this to focus on the framework metadata conditions.\n```suggestion\n      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n```",
              "createdAt": "2025-05-21T20:56:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1934,21 +1934,21 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       <UpdatedAnnotatedProjects Remove=\"@(UpdatedAnnotatedProjects)\" />\n \n       <!-- If the NearestTargetFramework property was set and the project multi-targets, SetTargetFramework must be set. -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Since `Identity` is always set, you can remove the identity check and leave the condition on `NearestTargetFramework` and `HasSingleTargetFramework` only.",
              "createdAt": "2025-05-21T20:56:26Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1934,21 +1934,21 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       <UpdatedAnnotatedProjects Remove=\"@(UpdatedAnnotatedProjects)\" />\n \n       <!-- If the NearestTargetFramework property was set and the project multi-targets, SetTargetFramework must be set. -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n         <SetTargetFramework>TargetFramework=%(AnnotatedProjects.NearestTargetFramework)</SetTargetFramework>\n       </AnnotatedProjects>\n \n       <!--\n          If the NearestTargetFramework property was not set or the project has a single TargetFramework, we need to Undefine\n          TargetFramework to avoid another project evaluation.\n       -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and ('%(AnnotatedProjects.NearestTargetFramework)' == '' or '%(AnnotatedProjects.HasSingleTargetFramework)' == 'true')\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and ('%(AnnotatedProjects.NearestTargetFramework)' == '' or '%(AnnotatedProjects.HasSingleTargetFramework)' == 'true')\">\n         <UndefineProperties>%(AnnotatedProjects.UndefineProperties);TargetFramework</UndefineProperties>\n       </AnnotatedProjects>\n \n       <!-- Add RuntimeIdentifier and SelfContained to the list of global properties that should not flow to the referenced project,\n            unless the project is expecting those properties to flow. -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.IsRidAgnostic)' != 'false'\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and '%(AnnotatedProjects.IsRidAgnostic)' != 'false'\">",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The `'%(AnnotatedProjects.Identity)' != ''` portion is redundant; the condition can be simplified to only check `'%(AnnotatedProjects.IsRidAgnostic)' != 'false'`.\n```suggestion\n      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.IsRidAgnostic)' != 'false'\">\n```",
              "createdAt": "2025-05-21T20:56:26Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1934,21 +1934,21 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       <UpdatedAnnotatedProjects Remove=\"@(UpdatedAnnotatedProjects)\" />\n \n       <!-- If the NearestTargetFramework property was set and the project multi-targets, SetTargetFramework must be set. -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'\">\n         <SetTargetFramework>TargetFramework=%(AnnotatedProjects.NearestTargetFramework)</SetTargetFramework>\n       </AnnotatedProjects>\n \n       <!--\n          If the NearestTargetFramework property was not set or the project has a single TargetFramework, we need to Undefine\n          TargetFramework to avoid another project evaluation.\n       -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and ('%(AnnotatedProjects.NearestTargetFramework)' == '' or '%(AnnotatedProjects.HasSingleTargetFramework)' == 'true')\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and ('%(AnnotatedProjects.NearestTargetFramework)' == '' or '%(AnnotatedProjects.HasSingleTargetFramework)' == 'true')\">\n         <UndefineProperties>%(AnnotatedProjects.UndefineProperties);TargetFramework</UndefineProperties>\n       </AnnotatedProjects>\n \n       <!-- Add RuntimeIdentifier and SelfContained to the list of global properties that should not flow to the referenced project,\n            unless the project is expecting those properties to flow. -->\n-      <AnnotatedProjects Condition=\"'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.IsRidAgnostic)' != 'false'\">\n+      <AnnotatedProjects Condition=\"'%(AnnotatedProjects.Identity)' != '' and '%(AnnotatedProjects.IsRidAgnostic)' != 'false'\">",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For this one and others that have only a single metadatum in the rest of the condition, batching over `%(Identity)` is not required. However the batching behavior in the \"`NearestTargetFramework` is set and `HasSingleTargetFramework` is not `true`\" conditions is pretty baffling so it's needed there and I'm keeping it in all of these cases for consistency.",
              "createdAt": "2025-05-21T20:59:36Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1736,12 +1736,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n          that can't multiplatform.  -->\n     <ItemGroup Condition=\"'@(_ProjectsWithPlatformAssignment)' != ''\">\n       <ProjectsWithNearestPlatform Include=\"@(_ProjectsWithPlatformAssignment)\"/>\n-      <ProjectsWithNearestPlatform Condition=\"'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">\n+      <ProjectsWithNearestPlatform Condition=\"'%(ProjectsWithNearestPlatform.Identity)' != '' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}