{
  "number": 9699,
  "title": "Proper support for multiline messages",
  "body": "Fixes #9666\r\n\r\n### Context\r\nAdding proper support for multiline messages (with indentation). \r\nRemoved project name from message line.\r\n\r\n### Changes Made\r\nTerminal logger uses different parsing and rendering.\r\n\r\n### Testing\r\nUnit tests were updated + manual testing (Windows)\r\n\r\n### Notes\r\nNew output:\r\n```console\r\nMSBuild version 17.10.0-dev-24101-01+36ab632fa for .NET Framework\r\n  XUnitTestProject succeeded with warnings (0,2s)\r\n    C:\\TestProjects\\XUnitTestProject\\XUnitTestProject\\XUnitTestProject.csproj(26,0): warning : \r\n      A\r\n      Multi\r\n      Line\r\n      Warning.\r\n```",
  "state": "MERGED",
  "createdAt": "2024-02-01T14:56:10Z",
  "updatedAt": "2024-03-21T16:21:50Z",
  "closedAt": "2024-03-21T16:21:49Z",
  "mergedAt": "2024-03-21T16:21:49Z",
  "additions": 137,
  "deletions": 17,
  "changedFiles": 7,
  "headRefName": "dev/mipavlik/terminallogger-multiline-messages",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8494aeb4c3ece4214fc191171c0e5037785d9abe",
          "message": "Adding proper support for multiline messages (with indentation). Removed project name from message line.",
          "committedDate": "2024-03-21T14:25:31Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f857e4d691e935233ae8200cd18208ff979e367f",
          "message": "Thread culture reset",
          "committedDate": "2024-03-21T14:25:42Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de2d3db128780a5c5b25c6ccdaf71b1b77bc81c5",
          "message": "Better formatting of multi-line messages",
          "committedDate": "2024-03-21T14:25:50Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e0e772a896e92d564223357558486610e8ce06a1",
          "message": "Added custom word wrapping for long lines",
          "committedDate": "2024-03-21T14:25:56Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "36f3155a9433db3cde544c5514072a9607f32b47",
          "message": "Fixed formatting",
          "committedDate": "2024-03-21T14:26:01Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adf8171f1fd1773828a525ffd28f152d6b5e86c6",
          "message": "Resolving conflicts",
          "committedDate": "2024-03-21T14:26:08Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa06f25e98d74458bfec2f7cd396c4d0183c3986",
          "message": "Updated OSX test",
          "committedDate": "2024-03-21T14:26:14Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e7ab56b627d88bbd6beb79ed099dd7c5fdeffba",
          "message": "The most significant change is in the `TerminalLogger` class, where the logic for appending a string to a `StringBuilder` object has been modified. The change corrects a potential issue where `endColumnNumber` was being used instead of `columnNumber` when `endLineNumber` is 0.\n\nChanges:\n1. In the `TerminalLogger` class, the logic for appending a string to a `StringBuilder` object has been updated. Previously, if `endLineNumber` was 0, a string formatted with `lineNumber` and `endColumnNumber` would be appended. Now, a string formatted with `lineNumber` and `columnNumber` is appended instead. This change corrects a potential issue where `endColumnNumber` was being used instead of `columnNumber` when `endLineNumber` is 0.",
          "committedDate": "2024-03-21T14:26:24Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "92678b332aa85b80156371c205b3ea164dfd8768",
          "message": "Update src/MSBuild/TerminalLogger/TerminalLogger.cs\n\nCo-authored-by: Ladi Prosek <laprosek@microsoft.com>",
          "committedDate": "2024-03-21T14:26:30Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e9f8f4e19786990db2578273331a1de4f8b03ee",
          "message": "Adding proper support for multiline messages (with indentation). Removed project name from message line.",
          "committedDate": "2024-03-21T14:28:01Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7990ec5f96d07b5e1527d06e69c61c538b63d353",
          "message": "Thread culture reset",
          "committedDate": "2024-03-21T14:35:16Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75abae051285198a8bed4daf40aa41baf2348082",
          "message": "Better formatting of multi-line messages",
          "committedDate": "2024-03-21T14:35:40Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa081a44674aeea30eb36090012a783f2cfc4add",
          "message": "Added custom word wrapping for long lines",
          "committedDate": "2024-03-21T14:36:14Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e51f567f22703906588fbdb07b4a27b6d12e051e",
          "message": "Fixed formatting",
          "committedDate": "2024-03-21T14:37:13Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8454b2ce2b3c2fa641206a4b93c901b8bac8fe4a",
          "message": "Resolving conflicts",
          "committedDate": "2024-03-21T14:37:21Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31fe46005b444ba7e6628cb5aeca1ce4ec3dc132",
          "message": "Resolving conflict",
          "committedDate": "2024-03-21T14:37:30Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d52e04e27356fda692cb2a2e4b56dc2953ff3950",
          "message": "The most significant change is in the `TerminalLogger` class, where the logic for appending a string to a `StringBuilder` object has been modified. The change corrects a potential issue where `endColumnNumber` was being used instead of `columnNumber` when `endLineNumber` is 0.\n\nChanges:\n1. In the `TerminalLogger` class, the logic for appending a string to a `StringBuilder` object has been updated. Previously, if `endLineNumber` was 0, a string formatted with `lineNumber` and `endColumnNumber` would be appended. Now, a string formatted with `lineNumber` and `columnNumber` is appended instead. This change corrects a potential issue where `endColumnNumber` was being used instead of `columnNumber` when `endLineNumber` is 0.",
          "committedDate": "2024-03-21T14:38:00Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75584c0185e03fbff09cf4b1a8aca4c05cc26f23",
          "message": "Update src/MSBuild/TerminalLogger/TerminalLogger.cs\n\nCo-authored-by: Ladi Prosek <laprosek@microsoft.com>",
          "committedDate": "2024-03-21T14:43:27Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b6e5ae23fdc1decf101ac041231eb3f7730ee5f",
          "message": "The most significant change is the addition of a new feature to the `_featureStatusMap` dictionary in the `Features` class. This feature, named `\"TerminalLogger_MultiLineHandler\"`, is set to `FeatureStatus.Available`, indicating that the TerminalLogger now has improved support for handling multi-line messages.\n\nList of Changes:\n1. A new feature `\"TerminalLogger_MultiLineHandler\"` was added to the `_featureStatusMap` dictionary in the `Features` class within the `Microsoft.Build.Framework` namespace. This feature is set to `FeatureStatus.Available`, suggesting enhanced support for multi-line messages in TerminalLogger.\n\nReference to Code Changes:\n- Addition of `\"TerminalLogger_MultiLineHandler\"` feature to `_featureStatusMap` dictionary in `Features` class.",
          "committedDate": "2024-03-21T14:44:04Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de9bacd54f32bdfa42c3d350bbd84c34d4f87ecd",
          "message": "Adding back removed code",
          "committedDate": "2024-03-21T15:05:02Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c5abcfbf08440346a6835c49d374d1aa8dbd882",
          "message": "Adding back removed code 2",
          "committedDate": "2024-03-21T15:13:46Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eba58e6817032a7000a6f06779899c9e8de6748a",
          "message": "Adding back removed code 3",
          "committedDate": "2024-03-21T15:16:32Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "600b8f22e6310eb9c5af86c7e8fa2df8bb62db33",
          "message": "Resolving issues",
          "committedDate": "2024-03-21T15:18:09Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87548f98ed28acabf590114cbac3262432644eab",
          "message": "Resolving issues",
          "committedDate": "2024-03-21T15:21:04Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e42cea0da364a825192acb3debf0b1c83b7071b7",
          "message": "Resolving issues",
          "committedDate": "2024-03-21T15:25:18Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a97190c8d363d2f9e744ba69d2656785b1246f5",
          "message": "Resolving issues",
          "committedDate": "2024-03-21T15:26:53Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Oh, just had a thought about moving the first line: @baronfel that would break the VS Code problem matcher, wouldn't it?",
        "createdAt": "2024-02-02T16:00:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oof, you're right. We'd need to check and update those",
        "createdAt": "2024-02-02T16:01:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I checked the matcher regex and it doesn't (for example) support all combinations we have for line/column info. For example case when `lineNumber != 0 && columnNumber == 0 && endLineNumber != 0`.",
        "createdAt": "2024-02-05T13:37:39Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-03-18T12:45:31Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-03-18T12:45:40Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "As discussed offline, we will not wait for VSCode update.",
        "createdAt": "2024-03-18T14:35:59Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@MichalPavlik the diff is now showing 277 modified files. Something didn't go well with rebase/merge.",
        "createdAt": "2024-03-21T13:38:22Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I had to rebase to register this feature. I'm not sure what happened, but these additional changes should reflect current main.",
        "createdAt": "2024-03-21T13:47:48Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I reconstructed commit stream on top of main, but it looks like I'm removing Jakub's changes for some reason....",
        "createdAt": "2024-03-21T14:54:50Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "One thing that concerns me here with multi-line messages is the difference in indentation between the first line of the message and the subsequent lines. I'm not sure if we should change the formatting for multiline messages to something more like:\r\n\r\n```terminal\r\ndirectory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: \r\n       A \r\n       Multi \r\n       Line \r\n       Warning!\r\n```\r\n\r\nPart of me thinks that we should consider this, because multiline messages are more likely to have some kind of 'internally consistent' formatting",
              "createdAt": "2024-02-01T15:56:12Z",
              "path": "src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt",
              "diffHunk": "@@ -1,5 +1,8 @@\n \ufeff\u001b]9;4;3;\u001b\\  project \u001b[33;1msucceeded with warnings\u001b[m (0.2s)\n-    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: Warning!\n+    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: A \n+       Multi \n+       Line \n+       Warning!",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Another thing to check - how does word wrapping interact with the multi-lines? e.g. if one of the middle lines is too long for the allowable space how does the message layout?",
              "createdAt": "2024-02-01T16:09:29Z",
              "path": "src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt",
              "diffHunk": "@@ -1,5 +1,8 @@\n \ufeff\u001b]9;4;3;\u001b\\  project \u001b[33;1msucceeded with warnings\u001b[m (0.2s)\n-    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: Warning!\n+    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: A \n+       Multi \n+       Line \n+       Warning!",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I agree with both parts of this (even though it makes the implementation harder, sorry!).",
              "createdAt": "2024-02-01T16:14:30Z",
              "path": "src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt",
              "diffHunk": "@@ -1,5 +1,8 @@\n \ufeff\u001b]9;4;3;\u001b\\  project \u001b[33;1msucceeded with warnings\u001b[m (0.2s)\n-    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: Warning!\n+    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: A \n+       Multi \n+       Line \n+       Warning!",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The first part should be easy. The second one is more difficult, but let see what I can do :)",
              "createdAt": "2024-02-02T09:47:58Z",
              "path": "src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt",
              "diffHunk": "@@ -1,5 +1,8 @@\n \ufeff\u001b]9;4;3;\u001b\\  project \u001b[33;1msucceeded with warnings\u001b[m (0.2s)\n-    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: Warning!\n+    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: A \n+       Multi \n+       Line \n+       Warning!",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "![image](https://github.com/dotnet/msbuild/assets/12775388/89478f79-d335-4e3c-806f-a85270f10ad8)",
              "createdAt": "2024-02-05T13:44:25Z",
              "path": "src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt",
              "diffHunk": "@@ -1,5 +1,8 @@\n \ufeff\u001b]9;4;3;\u001b\\  project \u001b[33;1msucceeded with warnings\u001b[m (0.2s)\n-    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: Warning!\n+    directory/\u001b[1mfile\u001b[m(1,2,3,4): \u001b[33;1mwarning\u001b[m \u001b[33;1mAA0000\u001b[m: A \n+       Multi \n+       Line \n+       Warning!",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you reset this when done with this test class? I don't want it to leak to other tests.",
              "createdAt": "2024-02-01T16:16:06Z",
              "path": "src/MSBuild.UnitTests/TerminalLogger_Tests.cs",
              "diffHunk": "@@ -52,6 +52,9 @@ public TerminalLogger_Tests()\n             _terminallogger.CreateStopwatch = () => new MockStopwatch();\n \n             UseProjectRelativeDirectory(\"Snapshots\");\n+\n+            // Avoids issues with different cultures on different machines\n+            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we update this prefix/formatting to be more modern?",
              "createdAt": "2024-02-01T16:18:37Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -808,5 +822,67 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    internal static string FormatEventMessage(\n+            string category,\n+            string subcategory,\n+            string? message,\n+            string code,\n+            string? file,\n+            int lineNumber,\n+            int endLineNumber,\n+            int columnNumber,\n+            int endColumnNumber)\n+    {\n+        using SpanBasedStringBuilder builder = new(128);\n+\n+        if (string.IsNullOrEmpty(file))\n+        {\n+            builder.Append(\"MSBUILD : \");    // Should not be localized.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agree with this comment, but I'm not sure what I would put here instead. Also, as @rainersigwald mentioned in another comment, if we change this prefix we may invalidate existing problem matchers, right?",
              "createdAt": "2024-02-02T16:07:22Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -808,5 +822,67 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    internal static string FormatEventMessage(\n+            string category,\n+            string subcategory,\n+            string? message,\n+            string code,\n+            string? file,\n+            int lineNumber,\n+            int endLineNumber,\n+            int columnNumber,\n+            int endColumnNumber)\n+    {\n+        using SpanBasedStringBuilder builder = new(128);\n+\n+        if (string.IsNullOrEmpty(file))\n+        {\n+            builder.Append(\"MSBUILD : \");    // Should not be localized.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "For reference, the existing VSCode problem matcher is here: https://github.com/microsoft/vscode/blob/main/src/vs/workbench/contrib/tasks/common/problemMatcher.ts#L1286-L1294",
              "createdAt": "2024-02-02T16:09:44Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -808,5 +822,67 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    internal static string FormatEventMessage(\n+            string category,\n+            string subcategory,\n+            string? message,\n+            string code,\n+            string? file,\n+            int lineNumber,\n+            int endLineNumber,\n+            int columnNumber,\n+            int endColumnNumber)\n+    {\n+        using SpanBasedStringBuilder builder = new(128);\n+\n+        if (string.IsNullOrEmpty(file))\n+        {\n+            builder.Append(\"MSBUILD : \");    // Should not be localized.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I don't know of anything that currently matches the fallback `MSBUILD : ` prefix, but yeah looking at that we probably have to put _some_ prefix there where the path would go.",
              "createdAt": "2024-02-02T16:46:31Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -808,5 +822,67 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    internal static string FormatEventMessage(\n+            string category,\n+            string subcategory,\n+            string? message,\n+            string code,\n+            string? file,\n+            int lineNumber,\n+            int endLineNumber,\n+            int columnNumber,\n+            int endColumnNumber)\n+    {\n+        using SpanBasedStringBuilder builder = new(128);\n+\n+        if (string.IsNullOrEmpty(file))\n+        {\n+            builder.Append(\"MSBUILD : \");    // Should not be localized.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            sb.Append(text.AsSpan().Slice(start, length));\r\n```\r\n\r\nto avoid creating string objects.",
              "createdAt": "2024-03-20T09:25:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -808,5 +808,107 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    private string FormatEventMessage(\n+            string category,\n+            string subcategory,\n+            string? message,\n+            string code,\n+            string? file,\n+            int lineNumber,\n+            int endLineNumber,\n+            int columnNumber,\n+            int endColumnNumber)\n+    {\n+        message ??= string.Empty;\n+        StringBuilder builder = new(128);\n+\n+        if (string.IsNullOrEmpty(file))\n+        {\n+            builder.Append(\"MSBUILD : \");    // Should not be localized.\n+        }\n+        else\n+        {\n+            builder.Append(file);\n+\n+            if (lineNumber == 0)\n+            {\n+                builder.Append(\" : \");\n+            }\n+            else\n+            {\n+                if (columnNumber == 0)\n+                {\n+                    builder.Append(endLineNumber == 0 ?\n+                        $\"({lineNumber}): \" :\n+                        $\"({lineNumber}-{endLineNumber}): \");\n+                }\n+                else\n+                {\n+                    if (endLineNumber == 0)\n+                    {\n+                        builder.Append(endColumnNumber == 0 ?\n+                            $\"({lineNumber},{columnNumber}): \" :\n+                            $\"({lineNumber},{columnNumber}-{endColumnNumber}): \");\n+                    }\n+                    else\n+                    {\n+                        builder.Append(endColumnNumber == 0 ?\n+                            $\"({lineNumber}-{endLineNumber},{columnNumber}): \" :\n+                            $\"({lineNumber},{columnNumber},{endLineNumber},{endColumnNumber}): \");\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!string.IsNullOrEmpty(subcategory))\n+        {\n+            builder.Append(subcategory);\n+            builder.Append(' ');\n+        }\n+\n+        builder.Append($\"{category} {code}: \");\n+\n+        // render multi-line message in a special way\n+        if (message.IndexOf('\\n') >= 0)\n+        {\n+            const string indent = $\"{Indentation}{Indentation}{Indentation}\";\n+            string[] lines = message.Split(newLineStrings, StringSplitOptions.None);\n+\n+            foreach (string line in lines)\n+            {\n+                if (indent.Length + line.Length > Terminal.Width) // custom wrapping with indentation\n+                {\n+                    WrapText(builder, line, Terminal.Width, indent);\n+                }\n+                else\n+                {\n+                    builder.AppendLine();\n+                    builder.Append(indent);\n+                    builder.Append(line);\n+                }\n+            }\n+        }\n+        else\n+        {\n+            builder.Append(message);\n+        }\n+\n+        return builder.ToString();\n+    }\n+\n+    private static void WrapText(StringBuilder sb, string text, int maxLength, string indent)\n+    {\n+        int start = 0;\n+        while (start < text.Length)\n+        {\n+            int length = Math.Min(maxLength - indent.Length, text.Length - start);\n+            sb.AppendLine();\n+            sb.Append(indent);\n+            sb.Append(text.Substring(start, length));",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}