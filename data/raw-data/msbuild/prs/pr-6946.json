{
  "number": 6946,
  "title": "Fix files kept in use in XslTransformation",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6962\r\n\r\nWork item (Internal use): https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1417029\r\n\r\n### Summary\r\nThe XslTransformation now holds a lock on its input xml file.\r\n\r\n### Customer Impact\r\nCustomers that expect to modify/use the input files to the `XslTransformation` task are unable to due to a lock on the file.\r\n\r\n### Regression?\r\nYes, in VS 17.0 P5+\r\n\r\n### Testing\r\nAdded regression test & customer verified the fix.\r\n\r\n### Risk\r\nLow: makes use of a parameter that was previously passed null. This parameter now tells the xmlreader to drop its lock on the file as soon as it's done.\r\n\r\n### Original Post\r\nFollowing #6863, the created `XmlReader` is no longer responsible for its\r\nunderlying stream. This can cause the build process to hold on to the\r\nprocessed file, preventing its removal. This can especially be a problem\r\nwhen the transformation is in fact aimed at the input file itself, where\r\nwe want to create the transformed file, then move it to the original.\r\n",
  "state": "MERGED",
  "createdAt": "2021-10-13T13:41:34Z",
  "updatedAt": "2022-12-25T04:35:46Z",
  "closedAt": "2021-10-15T19:07:48Z",
  "mergedAt": "2021-10-15T19:07:48Z",
  "additions": 41,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "fix-locked-xml-file",
  "isDraft": false,
  "author": {
    "login": "lanfeust69"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-consider"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8cd6f36e43e65acf0da108481486a13274991f38",
          "message": "Fix files kept in use in XslTransformation\n\nFollowing #6863, the created XmlReader is no longer responsible for its\nunderlying stream. This can cause the build process to hold on to the\nprocessed file, preventing its removal. This can especially be a problem\nwhen the transformation is in fact aimed at the input file itself, where\nwe want to create the transformed file, then move it to the original.",
          "committedDate": "2021-10-14T20:55:18Z",
          "author": {
            "name": "Jean-Jacques Lafay",
            "email": "jeanjacques.lafay@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6946) <br/>All CLA requirements met.",
        "createdAt": "2021-10-13T13:41:48Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6946) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6946) before we can accept your contribution.<br/><br/>:x: lanfeust69 [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6946)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=6946) it.</sub>",
        "createdAt": "2021-10-13T13:41:49Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "This fixes a potential regression that made it to 17.0, but I'm not sure how realistic it is someone could run into this. @lanfeust69 how did you discover this bug? \r\n\r\ncc @rainersigwald ",
        "createdAt": "2021-10-14T20:35:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> This fixes a potential regression that made it to 17.0, but I'm not sure how realistic it is someone could run into this. @lanfeust69 how did you discover this bug?\r\n> \r\n> cc @rainersigwald\r\n\r\nBecause it broke our build, of course \ud83d\ude04 !\r\n\r\nOur specific use-case is post-processing `App.config` files after they have been completed with binding redirects, to handle multi-targeting net48 and netcore, with \"well-known\" sections such as `system.data`.",
        "createdAt": "2021-10-14T20:45:07Z",
        "author": {
          "login": "lanfeust69"
        }
      },
      {
        "body": "> This should probably point to main instead of vs17.1\r\n\r\nThe PR that caused this regression made it to 17.0 so I pointed to vs17.0. We should get this approved, merge it, and let it propagate up.\r\n\r\ncc @dotnet/kitten",
        "createdAt": "2021-10-14T20:58:05Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks for the contribution @lanfeust69!",
        "createdAt": "2021-10-15T19:08:05Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure what the change is here?",
              "createdAt": "2021-10-14T18:35:44Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -386,7 +393,7 @@ public void OutputTest()\n         /// Setting correct \"Parameter\" parameters for Xsl.\n         /// </summary>\n         [Fact]\n-        public void XsltParamatersCorrect()",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "There's a typo in \"parameters\"",
              "createdAt": "2021-10-14T18:55:12Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -386,7 +393,7 @@ public void OutputTest()\n         /// Setting correct \"Parameter\" parameters for Xsl.\n         /// </summary>\n         [Fact]\n-        public void XsltParamatersCorrect()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, sorry about that, I'm on the verge of OCD for these kind of things, and when I spotted that while skimming through the tests, I couldn't resist...",
              "createdAt": "2021-10-14T19:26:19Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -386,7 +393,7 @@ public void OutputTest()\n         /// Setting correct \"Parameter\" parameters for Xsl.\n         /// </summary>\n         [Fact]\n-        public void XsltParamatersCorrect()",
              "author": {
                "login": "lanfeust69"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    File.Delete(xmlInputPath);\r\n                    File.Exists(xmlInputPath).ShouldBeFalse();\r\n```",
              "createdAt": "2021-10-14T18:38:17Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -146,6 +146,13 @@ public void XmlXslParameters()\n \n                     Assert.True(t.Execute()); // \"The test should have passed at the both params correct test\"\n                 }\n+\n+                // we should now be able to delete the xml input file (not kept open)\n+                if (xmlInputs[xmi].Key == XslTransformation.XmlInput.XmlModes.XmlFile)\n+                {\n+                    string xmlInputPath = ((TaskItem[])xmlInputs[xmi].Value)[0].ItemSpec;\n+                    File.Delete(xmlInputPath);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Ideally this would be a separate test so we explicitly know xsltransform shouldn't be holding on to a file. Can we move this to its own test?",
              "createdAt": "2021-10-14T18:40:55Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -146,6 +146,13 @@ public void XmlXslParameters()\n \n                     Assert.True(t.Execute()); // \"The test should have passed at the both params correct test\"\n                 }\n+\n+                // we should now be able to delete the xml input file (not kept open)\n+                if (xmlInputs[xmi].Key == XslTransformation.XmlInput.XmlModes.XmlFile)\n+                {\n+                    string xmlInputPath = ((TaskItem[])xmlInputs[xmi].Value)[0].ItemSpec;\n+                    File.Delete(xmlInputPath);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Sure, will push shortly",
              "createdAt": "2021-10-14T19:26:55Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -146,6 +146,13 @@ public void XmlXslParameters()\n \n                     Assert.True(t.Execute()); // \"The test should have passed at the both params correct test\"\n                 }\n+\n+                // we should now be able to delete the xml input file (not kept open)\n+                if (xmlInputs[xmi].Key == XslTransformation.XmlInput.XmlModes.XmlFile)\n+                {\n+                    string xmlInputPath = ((TaskItem[])xmlInputs[xmi].Value)[0].ItemSpec;\n+                    File.Delete(xmlInputPath);",
              "author": {
                "login": "lanfeust69"
              }
            },
            {
              "body": "Done, this showed that the xsl was also kept locked (I'm pretty sure this was the case before, sure it should rarely be an issue in real life, but still...)",
              "createdAt": "2021-10-14T20:09:57Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -146,6 +146,13 @@ public void XmlXslParameters()\n \n                     Assert.True(t.Execute()); // \"The test should have passed at the both params correct test\"\n                 }\n+\n+                // we should now be able to delete the xml input file (not kept open)\n+                if (xmlInputs[xmi].Key == XslTransformation.XmlInput.XmlModes.XmlFile)\n+                {\n+                    string xmlInputPath = ((TaskItem[])xmlInputs[xmi].Value)[0].ItemSpec;\n+                    File.Delete(xmlInputPath);",
              "author": {
                "login": "lanfeust69"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                File.Exists(xmlInputPath).ShouldBeFalse();\r\n```\r\nNit: Using shouldly gives us better logging when tests fail",
              "createdAt": "2021-10-14T20:28:10Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()\n+        {\n+            string dir;\n+            TaskItem[] xmlPaths;\n+            TaskItem xslPath;\n+            TaskItem[] outputPaths;\n+            MockEngine engine;\n+            Prepare(out dir, out xmlPaths, out xslPath, out _, out outputPaths, out _, out _, out engine);\n+\n+            // Test with files\n+            {\n+                XslTransformation t = new XslTransformation();\n+                t.BuildEngine = engine;\n+                t.XmlInputPaths = xmlPaths;\n+                t.XslInputPath = xslPath;\n+                t.OutputPaths = outputPaths;\n+\n+                Assert.True(t.Execute());\n+                string xmlInputPath = xmlPaths[0].ItemSpec;\n+                File.Delete(xmlInputPath); // this should succeed (file not locked by task)\n+                Assert.False(File.Exists(xmlInputPath));",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "But it's less consistent with the rest of the file (I found no use of \"should\" outside comments)...\r\nHappy to change that as there seems there is a not obvious benefit in reporting.",
              "createdAt": "2021-10-14T20:38:13Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()\n+        {\n+            string dir;\n+            TaskItem[] xmlPaths;\n+            TaskItem xslPath;\n+            TaskItem[] outputPaths;\n+            MockEngine engine;\n+            Prepare(out dir, out xmlPaths, out xslPath, out _, out outputPaths, out _, out _, out engine);\n+\n+            // Test with files\n+            {\n+                XslTransformation t = new XslTransformation();\n+                t.BuildEngine = engine;\n+                t.XmlInputPaths = xmlPaths;\n+                t.XslInputPath = xslPath;\n+                t.OutputPaths = outputPaths;\n+\n+                Assert.True(t.Execute());\n+                string xmlInputPath = xmlPaths[0].ItemSpec;\n+                File.Delete(xmlInputPath); // this should succeed (file not locked by task)\n+                Assert.False(File.Exists(xmlInputPath));",
              "author": {
                "login": "lanfeust69"
              }
            },
            {
              "body": "In general we try to update to shouldly \"when we're in the area\". I wouldn't suggest changing every single `Assert.True/false` in this file, just areas you've touched.",
              "createdAt": "2021-10-14T20:40:23Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()\n+        {\n+            string dir;\n+            TaskItem[] xmlPaths;\n+            TaskItem xslPath;\n+            TaskItem[] outputPaths;\n+            MockEngine engine;\n+            Prepare(out dir, out xmlPaths, out xslPath, out _, out outputPaths, out _, out _, out engine);\n+\n+            // Test with files\n+            {\n+                XslTransformation t = new XslTransformation();\n+                t.BuildEngine = engine;\n+                t.XmlInputPaths = xmlPaths;\n+                t.XslInputPath = xslPath;\n+                t.OutputPaths = outputPaths;\n+\n+                Assert.True(t.Execute());\n+                string xmlInputPath = xmlPaths[0].ItemSpec;\n+                File.Delete(xmlInputPath); // this should succeed (file not locked by task)\n+                Assert.False(File.Exists(xmlInputPath));",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public void InputFilesDontLock()\r\n```\r\nNit for clarity",
              "createdAt": "2021-10-14T20:30:34Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I kinda like CanBeDeleted better. We could fail to delete it for a reason other than that it's locked (though that's the most likely reason), and that could cause confusion if it's named DontLock. The comment indicates the most likely reason.",
              "createdAt": "2021-10-14T20:36:29Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, better",
              "createdAt": "2021-10-14T20:38:42Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()",
              "author": {
                "login": "lanfeust69"
              }
            },
            {
              "body": "Locked is more \"catch all\", the comment makes up for it though",
              "createdAt": "2021-10-14T20:46:05Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +780,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesCanBeDeleted()",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\n```suggestion\r\n                File.Exists(xmlInputPath).ShouldBeFalse();\r\n```\r\nhere and below. Also an Assert.True above.",
              "createdAt": "2021-10-14T20:52:52Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +781,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesDontLock()\n+        {\n+            string dir;\n+            TaskItem[] xmlPaths;\n+            TaskItem xslPath;\n+            TaskItem[] outputPaths;\n+            MockEngine engine;\n+            Prepare(out dir, out xmlPaths, out xslPath, out _, out outputPaths, out _, out _, out engine);\n+\n+            // Test with files\n+            {\n+                XslTransformation t = new XslTransformation();\n+                t.BuildEngine = engine;\n+                t.XmlInputPaths = xmlPaths;\n+                t.XslInputPath = xslPath;\n+                t.OutputPaths = outputPaths;\n+\n+                Assert.True(t.Execute());\n+                string xmlInputPath = xmlPaths[0].ItemSpec;\n+                File.Delete(xmlInputPath); // this should succeed (file not locked by task)\n+                File.Exists(xmlInputPath).ShouldBeFalse(); ;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Oupsie, getting late here...",
              "createdAt": "2021-10-14T20:56:32Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -780,6 +781,39 @@ public void OutputFileCannotBeWritten()\n             CleanUp(dir);\n         }\n \n+        /// <summary>\n+        /// The files are not kept locked by the task\n+        /// </summary>\n+        [Fact]\n+        public void InputFilesDontLock()\n+        {\n+            string dir;\n+            TaskItem[] xmlPaths;\n+            TaskItem xslPath;\n+            TaskItem[] outputPaths;\n+            MockEngine engine;\n+            Prepare(out dir, out xmlPaths, out xslPath, out _, out outputPaths, out _, out _, out engine);\n+\n+            // Test with files\n+            {\n+                XslTransformation t = new XslTransformation();\n+                t.BuildEngine = engine;\n+                t.XmlInputPaths = xmlPaths;\n+                t.XslInputPath = xslPath;\n+                t.OutputPaths = outputPaths;\n+\n+                Assert.True(t.Execute());\n+                string xmlInputPath = xmlPaths[0].ItemSpec;\n+                File.Delete(xmlInputPath); // this should succeed (file not locked by task)\n+                File.Exists(xmlInputPath).ShouldBeFalse(); ;",
              "author": {
                "login": "lanfeust69"
              }
            }
          ]
        }
      }
    ]
  }
}