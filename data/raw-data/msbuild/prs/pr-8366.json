{
  "number": 8366,
  "title": "Add ability to create temp mapped drive for integration tests",
  "body": "Fixes #7330\r\n(plus one subtask of #8329)\r\n\r\nTests only change (no production code affected)\r\n\r\n### Context\r\nDrive enumeration integration tests need to simulate attempt to enumerate whole drive.\r\nTo prevent security and test runtime considerations - a dummy folder is created and mapped to a free letter to be offered to test as a drive for enumeration.\r\n\r\n### Changes Made\r\nAdded utility for mapping drives and mounted to affected unit tests.\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-30T14:22:44Z",
  "updatedAt": "2023-02-08T09:46:51Z",
  "closedAt": "2023-02-08T09:46:51Z",
  "mergedAt": "2023-02-08T09:46:51Z",
  "additions": 223,
  "deletions": 14,
  "changedFiles": 4,
  "headRefName": "proto/path-enumeration-tests",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9d62041d675f35f3188052bcd26b4074aa12c761",
          "message": "Add ability to create temp mapped drive for integration tests",
          "committedDate": "2023-01-30T14:18:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e498cc2a3ffa91a5318821171cd49da5c01ee7be",
          "message": "Fix analyzer findings",
          "committedDate": "2023-01-30T15:24:33Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "908b6745140db8d78a7abba7917c359e52dd642a",
          "message": "Remove the unix warning",
          "committedDate": "2023-01-31T09:08:22Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f782273fea15ccc2d12b3b806542ac48da2c4b75",
          "message": "Guard platform specific calls",
          "committedDate": "2023-01-31T09:34:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6f1998a432cfc420fd417ae33c60ac6fff6677e",
          "message": "Failing unix testcase",
          "committedDate": "2023-01-31T09:50:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52f1ef38fb5844207694cfae5e137f3cf2899581",
          "message": "Style checks",
          "committedDate": "2023-01-31T10:00:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "334dece0201870a14ff0bb2aaeeb5633f85f53ad",
          "message": "Merge branch 'main' into proto/path-enumeration-tests",
          "committedDate": "2023-01-31T11:55:33Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "krivanek.j@hotmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bc7179b7109d5ae92e7d4b94d95dd95fe29e7784",
          "message": "Fix review comments",
          "committedDate": "2023-01-31T14:01:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0fbd8de18350720cdb3cd6983266a3baefe89f13",
          "message": "Use drive placeholder",
          "committedDate": "2023-02-01T13:20:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "We should also fix the Unix version of these tests. `ProjectGetterResultsInUnixDriveEnumerationWarning` accounts for almost a minute of test run-time \ud83d\ude22 \r\n\r\n![image](https://user-images.githubusercontent.com/12206368/215762148-9bc8ae7d-1984-4f7e-aa4f-5d679f06b45f.png)",
        "createdAt": "2023-01-31T12:41:25Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Added for unix long run and skipping for now: https://github.com/dotnet/msbuild/issues/8373",
        "createdAt": "2023-01-31T13:57:57Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`SupportedPlatform` attribute may be helpful",
              "createdAt": "2023-01-30T20:49:21Z",
              "path": "src/UnitTests.Shared/DriveMapping.cs",
              "diffHunk": "@@ -0,0 +1,77 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Runtime.InteropServices;\n+using System.Text;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+internal static class DriveMapping\n+{\n+    private const int ERROR_FILE_NOT_FOUND = 2;\n+    // private const int ERROR_INSUFFICIENT_BUFFER = 122;\n+    private const int DDD_REMOVE_DEFINITION = 2;\n+    private const int DDD_NO_FLAG = 0;\n+    // extra space for '\\??\\'. Not counting for long paths support in tests.\n+    private const int MAX_PATH = 259;\n+\n+    /// <summary>\n+    /// Windows specific. Maps path to a requested drive.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter</param>\n+    /// <param name=\"path\">Path to be mapped</param>\n+    public static void MapDrive(char letter, string path)",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: just wondering if we can request the specific drive instead, imo this makes it a bit more readable\r\n\r\n```\r\nusing DummyMappedDrive mappedDrive = DriveMapping.GetDrive(\"z\");\r\n\r\n// test content\r\n\r\n\r\n```",
              "createdAt": "2023-01-30T21:00:39Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -806,6 +808,9 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn\n         [InlineData(@\"z:\\**\\*.cs\")]\n         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, _mappedDrive.MappedDriveLetter);",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "The drive to request is unknown upfront - it needs to be untaken on the system.\r\nSo the `_mappedDrive` takes care about determining one that is free and using it.\r\nAdded `DriveMapping` is utility class that can be used for that purpose.\r\n\r\ntl;dr;: Explicit assigning is intentionally hidden in this wrapper. ",
              "createdAt": "2023-01-31T09:38:52Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -806,6 +808,9 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn\n         [InlineData(@\"z:\\**\\*.cs\")]\n         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, _mappedDrive.MappedDriveLetter);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "in this case, using placeholder in test data might be more readable, and then it is replaced by `DriveMapping`.\r\ne.g: `\"%DRIVE%:\\**\\*.cs\"`\r\n\r\nimo, for test purposes picking up 'z' or other letter at the end of abc should work.",
              "createdAt": "2023-01-31T17:26:07Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -806,6 +808,9 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn\n         [InlineData(@\"z:\\**\\*.cs\")]\n         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, _mappedDrive.MappedDriveLetter);",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "I like the `%DRIVE%:` suggestion! - updated.\r\n\r\nI wouldn't use any fixed drive letter though (ppl tend to map shares to various  drive letters). The dynamic drive letter allocation logic isn't complicated - so 'd keep it.",
              "createdAt": "2023-02-01T13:22:04Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -806,6 +808,9 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn\n         [InlineData(@\"z:\\**\\*.cs\")]\n         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, _mappedDrive.MappedDriveLetter);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If path is empty, should we return \"\" or driveLetter + \":\"? I'm curious if this could artificially make the drive enumeration tests pass.",
              "createdAt": "2023-01-30T23:14:10Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -901,10 +905,23 @@ public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent\n             @\"z:\\$(Microsoft_WindowsAzure_EngSys)**\")]\n         public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            placeHolder = UpdatePathToMappedDrive(placeHolder, _mappedDrive.MappedDriveLetter);\n+            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, _mappedDrive.MappedDriveLetter);\n             content = string.Format(content, placeHolder, excludePlaceHolder);\n             CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);\n         }\n \n+        private static string UpdatePathToMappedDrive(string path, char driveLetter)\n+        {\n+            if (!string.IsNullOrEmpty(path) && path.StartsWith(driveLetter + \":\", StringComparison.OrdinalIgnoreCase))\n+            {\n+                path = driveLetter + path.Substring(1);\n+            }\n+            return path;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Empty paths are valid test case scenarios (e.g. unspecified exclude pattern). So it intentionaly leaves unspecified or unrooted paths unaffected",
              "createdAt": "2023-01-31T09:39:50Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -901,10 +905,23 @@ public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent\n             @\"z:\\$(Microsoft_WindowsAzure_EngSys)**\")]\n         public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)\n         {\n+            // let's create the mapped drive only once it's needed by any test, then let's reuse;\n+            _mappedDrive ??= new DummyMappedDrive();\n+            placeHolder = UpdatePathToMappedDrive(placeHolder, _mappedDrive.MappedDriveLetter);\n+            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, _mappedDrive.MappedDriveLetter);\n             content = string.Format(content, placeHolder, excludePlaceHolder);\n             CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);\n         }\n \n+        private static string UpdatePathToMappedDrive(string path, char driveLetter)\n+        {\n+            if (!string.IsNullOrEmpty(path) && path.StartsWith(driveLetter + \":\", StringComparison.OrdinalIgnoreCase))\n+            {\n+                path = driveLetter + path.Substring(1);\n+            }\n+            return path;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Wouldn't this always fail on non-Windows? The constructor sets `_mappedPath` but doesn't create anything. I understand the class is supposed to be used only on Windows but it contains explicit OS checks so it would be better if it had reasonable behavior everywhere.",
              "createdAt": "2023-01-31T12:00:38Z",
              "path": "src/UnitTests.Shared/DummyMappedDrive.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Runtime.Versioning;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+/// <summary>\n+/// Windows specific. Class managing system resource - temporary local path mapped to available drive letter.\n+/// </summary>\n+public class DummyMappedDrive : IDisposable\n+{\n+    public char MappedDriveLetter { get; init; } = 'z';\n+    private readonly string _mappedPath;\n+    private readonly bool _mapped;\n+\n+    public DummyMappedDrive()\n+    {\n+        _mappedPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n+\n+        if (!NativeMethodsShared.IsWindows)\n+        {\n+            return;\n+        }\n+\n+        Directory.CreateDirectory(_mappedPath);\n+        File.Create(Path.Combine(_mappedPath, \"x\")).Dispose();\n+\n+        for (char driveLetter = 'z'; driveLetter >= 'a'; driveLetter--)\n+        {\n+            if (DriveMapping.GetDriveMapping(driveLetter) == string.Empty)\n+            {\n+                DriveMapping.MapDrive(driveLetter, _mappedPath);\n+                MappedDriveLetter = driveLetter;\n+                _mapped = true;\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void ReleaseUnmanagedResources(bool disposing)\n+    {\n+        Exception? e = null;\n+        if (Directory.Exists(_mappedPath))\n+        {\n+            try\n+            {\n+                Directory.Delete(_mappedPath, true);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It's wrapped in existence check - does that feel sufficient?",
              "createdAt": "2023-01-31T13:56:29Z",
              "path": "src/UnitTests.Shared/DummyMappedDrive.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Runtime.Versioning;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+/// <summary>\n+/// Windows specific. Class managing system resource - temporary local path mapped to available drive letter.\n+/// </summary>\n+public class DummyMappedDrive : IDisposable\n+{\n+    public char MappedDriveLetter { get; init; } = 'z';\n+    private readonly string _mappedPath;\n+    private readonly bool _mapped;\n+\n+    public DummyMappedDrive()\n+    {\n+        _mappedPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n+\n+        if (!NativeMethodsShared.IsWindows)\n+        {\n+            return;\n+        }\n+\n+        Directory.CreateDirectory(_mappedPath);\n+        File.Create(Path.Combine(_mappedPath, \"x\")).Dispose();\n+\n+        for (char driveLetter = 'z'; driveLetter >= 'a'; driveLetter--)\n+        {\n+            if (DriveMapping.GetDriveMapping(driveLetter) == string.Empty)\n+            {\n+                DriveMapping.MapDrive(driveLetter, _mappedPath);\n+                MappedDriveLetter = driveLetter;\n+                _mapped = true;\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void ReleaseUnmanagedResources(bool disposing)\n+    {\n+        Exception? e = null;\n+        if (Directory.Exists(_mappedPath))\n+        {\n+            try\n+            {\n+                Directory.Delete(_mappedPath, true);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It does! I must have missed the check, apologies.",
              "createdAt": "2023-01-31T13:58:51Z",
              "path": "src/UnitTests.Shared/DummyMappedDrive.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Runtime.Versioning;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+/// <summary>\n+/// Windows specific. Class managing system resource - temporary local path mapped to available drive letter.\n+/// </summary>\n+public class DummyMappedDrive : IDisposable\n+{\n+    public char MappedDriveLetter { get; init; } = 'z';\n+    private readonly string _mappedPath;\n+    private readonly bool _mapped;\n+\n+    public DummyMappedDrive()\n+    {\n+        _mappedPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());\n+\n+        if (!NativeMethodsShared.IsWindows)\n+        {\n+            return;\n+        }\n+\n+        Directory.CreateDirectory(_mappedPath);\n+        File.Create(Path.Combine(_mappedPath, \"x\")).Dispose();\n+\n+        for (char driveLetter = 'z'; driveLetter >= 'a'; driveLetter--)\n+        {\n+            if (DriveMapping.GetDriveMapping(driveLetter) == string.Empty)\n+            {\n+                DriveMapping.MapDrive(driveLetter, _mappedPath);\n+                MappedDriveLetter = driveLetter;\n+                _mapped = true;\n+                return;\n+            }\n+        }\n+    }\n+\n+    private void ReleaseUnmanagedResources(bool disposing)\n+    {\n+        Exception? e = null;\n+        if (Directory.Exists(_mappedPath))\n+        {\n+            try\n+            {\n+                Directory.Delete(_mappedPath, true);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wait, so if I have a drive mapped to a long path, unit tests will fail on my computer? I would vote for this to be more robust. Should be easy because we don't need the path, we just need to know if the mapping exists.",
              "createdAt": "2023-01-31T12:11:55Z",
              "path": "src/UnitTests.Shared/DriveMapping.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Runtime.InteropServices;\n+using System.Runtime.Versioning;\n+using System.Text;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+internal static class DriveMapping\n+{\n+    private const int ERROR_FILE_NOT_FOUND = 2;\n+    // private const int ERROR_INSUFFICIENT_BUFFER = 122;\n+    private const int DDD_REMOVE_DEFINITION = 2;\n+    private const int DDD_NO_FLAG = 0;\n+    // extra space for '\\??\\'. Not counting for long paths support in tests.\n+    private const int MAX_PATH = 259;\n+\n+    /// <summary>\n+    /// Windows specific. Maps path to a requested drive.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter</param>\n+    /// <param name=\"path\">Path to be mapped</param>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static void MapDrive(char letter, string path)\n+    {\n+        if (!DefineDosDevice(DDD_NO_FLAG, ToDeviceName(letter), path))\n+        {\n+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Windows specific. Unmaps drive mapping.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter.</param>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static void UnmapDrive(char letter)\n+    {\n+        if (!DefineDosDevice(DDD_REMOVE_DEFINITION, ToDeviceName(letter), null))\n+        {\n+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Windows specific. Fetches path mapped under specific drive letter.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter.</param>\n+    /// <returns>Path mapped under specified letter. Empty string if mapping not found.</returns>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static string GetDriveMapping(char letter)\n+    {\n+        // since this is just for test purposes - let's not overcomplicate with long paths support",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n        return $\"{char.ToUpper(letter)}:\";\r\n```",
              "createdAt": "2023-01-31T12:12:45Z",
              "path": "src/UnitTests.Shared/DriveMapping.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+using System;\n+using System.Runtime.InteropServices;\n+using System.Runtime.Versioning;\n+using System.Text;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+internal static class DriveMapping\n+{\n+    private const int ERROR_FILE_NOT_FOUND = 2;\n+    // private const int ERROR_INSUFFICIENT_BUFFER = 122;\n+    private const int DDD_REMOVE_DEFINITION = 2;\n+    private const int DDD_NO_FLAG = 0;\n+    // extra space for '\\??\\'. Not counting for long paths support in tests.\n+    private const int MAX_PATH = 259;\n+\n+    /// <summary>\n+    /// Windows specific. Maps path to a requested drive.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter</param>\n+    /// <param name=\"path\">Path to be mapped</param>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static void MapDrive(char letter, string path)\n+    {\n+        if (!DefineDosDevice(DDD_NO_FLAG, ToDeviceName(letter), path))\n+        {\n+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Windows specific. Unmaps drive mapping.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter.</param>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static void UnmapDrive(char letter)\n+    {\n+        if (!DefineDosDevice(DDD_REMOVE_DEFINITION, ToDeviceName(letter), null))\n+        {\n+            NativeMethodsShared.ThrowExceptionForErrorCode(Marshal.GetLastWin32Error());\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Windows specific. Fetches path mapped under specific drive letter.\n+    /// </summary>\n+    /// <param name=\"letter\">Drive letter.</param>\n+    /// <returns>Path mapped under specified letter. Empty string if mapping not found.</returns>\n+    [SupportedOSPlatform(\"windows\")]\n+    public static string GetDriveMapping(char letter)\n+    {\n+        // since this is just for test purposes - let's not overcomplicate with long paths support\n+        char[] buffer = new char[MAX_PATH];\n+        if (QueryDosDevice(ToDeviceName(letter), buffer, buffer.Length) == 0)\n+        {\n+            // Return empty string if the drive is not mapped\n+            int err = Marshal.GetLastWin32Error();\n+            if (err == ERROR_FILE_NOT_FOUND)\n+            {\n+                return string.Empty;\n+            }\n+            NativeMethodsShared.ThrowExceptionForErrorCode(err);\n+        }\n+        // Translate from the native path semantic - starting with '\\??\\'\n+        return new string(buffer, 4, buffer.Length - 4);\n+    }\n+\n+    private static string ToDeviceName(char letter)\n+    {\n+        return new string(char.ToUpper(letter), 1) + \":\";",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}