{
  "number": 6912,
  "title": "Properly report HasLoggedErrors when converting errors into warnings",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6275\r\n\r\n### Context\r\nWhen a task logs an error, its logging helper properly realizes that it logged an error. The overall build, however, converts that error into a warning. This leads to very confusing scenarios where a task can return \"I logged an error\" that the TaskBuilder recognizes, but doesn't see that an error was logged because it was turned into a warning.\r\n\r\n### Changes Made\r\nWhen a taskhost logs an error, even if it was converted into a warning, it understands that an error was logged but _does not fail the build_.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-10-05T20:34:32Z",
  "updatedAt": "2021-10-27T07:52:06Z",
  "closedAt": "2021-10-27T07:52:05Z",
  "mergedAt": "2021-10-27T07:52:05Z",
  "additions": 30,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "error-logging-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0a5c7c6c22707f990867e4799ee3d2cc0d50c28b",
          "message": "Only report MSB4181 when not on warnandcontinue. Always set hasloggederrors when logging an error",
          "committedDate": "2021-10-05T20:29:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5eac868524d8ed326aa7977f600b8cf2301c220b",
          "message": "Modify tests for new behavior",
          "committedDate": "2021-10-06T17:49:41Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8232e48409fd2207af57eab2ff9cb3ea044c3bc6",
          "message": "Update src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-10-07T23:13:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fabbb79c1a6f61c9ebb4c68ec9c393f2c1e58184",
          "message": "Continue logging MSB4181 when warnandcontinue is set",
          "committedDate": "2021-10-11T16:25:25Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "90a17ae993b35e7d0acd718eb45e0e6b19971b72",
          "message": "Merge",
          "committedDate": "2021-10-11T16:28:12Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a05519164a319daac86f28875d55f2b1ff68449b",
          "message": "Add regression tests",
          "committedDate": "2021-10-18T17:08:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c903c9c0f6ba4bd6faf872ce8670ad517c56e43b",
          "message": "Satisfy the extra line haters",
          "committedDate": "2021-10-25T15:37:50Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Fixed. Added the deleted test back and a new test to ensure:\r\n1. Task returns false and logs error does NOT also log msb4181\r\n2. Task returns false and logs nothing DOES log msb4181\r\nboth under the ContinueOnError case.",
        "createdAt": "2021-10-18T17:10:03Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not log a warning here? The idea was to convert the error into a warning, not to ignore it completely.",
              "createdAt": "2021-10-07T16:56:38Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The message is redundant in the case that the error was turned into the warning. Though it's worth noting that this hides a real issue where a task sets WarnAndContinue but truly doesn't log an error and returns false. Need to think about this some more.",
              "createdAt": "2021-10-07T23:13:34Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "In practice, this says that if ContinueOnError is set, we don't log MSB4181, period, no matter what they did. HasLoggedErrors can (and should) be set if they tried to log an error but converted it into a warning; a lot of tasks return !HasLoggedErrors anyway. I don't feel at all bad about logging two warnings for a poorly-constructed task, but it is bad to not log anything when a task returns false.",
              "createdAt": "2021-10-07T23:30:21Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Reading this = \ud83d\udca1\r\n\r\nIs the fix here really just...making sure RemoveDir returns !HasLoggedErrors? It straight up returns whether it actually deleted the file \ud83e\udd26\u200d\u2642\ufe0f\r\n\r\nIn the implementation of RemoveDir, it returns true or false based on whether or not it actually deleted the directory. However we want our typical task to return true as long as it successfully did something, otherwise it logs an error and reports whether it did. The issue with RemoveDir is it doesn't follow that structure. I think we need to change the logic of how RemoveDir works and add an Output parameter similar to copy's \"DidActuallyWriteAFile\".\r\n\r\nRemoveDir for reference: https://github.com/dotnet/msbuild/blob/main/src/Tasks/RemoveDir.cs",
              "createdAt": "2021-10-07T23:36:12Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It is probably a good idea to change RemoveDir to use the `!Log.HasLoggedErrors` pattern that we recommend. But I'm not sure it's wrong to just never log this malformed-task error in the presence of ContinueOnErrors. It is definitely wrong to report it when the task _tried_ to log an error but was prevented.\r\n\r\nI agree that the other change in this PR is the critical one. IIRC when we were talking about this I wanted to do this as well but I can't remember exactly why.\r\n\r\nLet's do this: please add a new test task (or find a configuration that does this): `ReturnFailureAfterLoggingErrorTask`, and add a test for it (doesn't log the supplemental error when logging an error that gets converted). That should fail against `main` and pass with the TaskHost change alone. And maybe that's sufficient?",
              "createdAt": "2021-10-08T11:09:17Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If we don't already have it, I think it would also be nice to have a separate task that does not attempt to log an error but returns false, then verify that with ContinueOnError.WarnAndContinue, MSB4181 is still displayed, just as a warning.",
              "createdAt": "2021-10-11T14:52:48Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,16 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n-                    if (_continueOnError == ContinueOnError.WarnAndContinue)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this fail the build? If someone want to \"WarnAndContinue,\" we probably shouldn't, but this does seem like the change that would prevent 4181.",
              "createdAt": "2021-10-07T16:57:34Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -455,8 +455,8 @@ public void LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs e)\n                 {\n                     e.BuildEventContext = _taskLoggingContext.BuildEventContext;\n                     _taskLoggingContext.LoggingService.LogBuildEvent(e);\n-                    _taskLoggingContext.HasLoggedErrors = true;\n                 }\n+                    _taskLoggingContext.HasLoggedErrors = true;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Nit: spacing.",
              "createdAt": "2021-10-18T15:22:25Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -455,8 +455,8 @@ public void LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs e)\n                 {\n                     e.BuildEventContext = _taskLoggingContext.BuildEventContext;\n                     _taskLoggingContext.LoggingService.LogBuildEvent(e);\n-                    _taskLoggingContext.HasLoggedErrors = true;\n                 }\n+                    _taskLoggingContext.HasLoggedErrors = true;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // When ContinueOnError is true, we no longer log MSB4181 (your task returned false but didn't log an error)\r\n```",
              "createdAt": "2021-10-07T16:57:50Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -455,7 +433,8 @@ public void TaskReturnsFailureButDoesNotLogError_ContinueOnError_True()\n \n                 MockLogger logger = proj.BuildProjectExpectSuccess();\n \n-                logger.AssertLogContains(\"MSB4181\");\n+                // When ContinueOnError is true, we no longer log MSB4141 (your task returned false but didn't log an error)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Tiny nit:\r\n```suggestion\r\n```",
              "createdAt": "2021-10-11T19:02:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -940,6 +940,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                 IBuildEngine be = host.TaskInstance.BuildEngine;\n                 if (taskReturned && !taskResult && !taskLoggingContext.HasLoggedErrors && (be is TaskHost th ? th.BuildRequestsSucceeded : false) && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true))\n                 {\n+",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}