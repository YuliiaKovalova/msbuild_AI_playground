{
  "number": 6705,
  "title": "Using ArrayPool for buffers in InterningBinaryReader",
  "body": "Fixes #6624 \r\n\r\n### Context\r\nWhenever is deserialized string bigger than 20 000 chars, new char[stringSize] is allocated as temporary buffer.\r\nIt mostly happened for huge solutions (measured at 900 projects solution Solution_006_0936.sln) by global property SolutionConfiguration.\r\n\r\n### Changes Made\r\nUsing ArrayPool<char>.Shared for buffer renting.\r\n\r\n### Testing\r\n- Build orchard core and msbuild.\r\n- Measured and compared\r\n  - allocates 700MB less\r\n  - LOH size dropped to ~2.5 GB from 4GB\r\n\r\n### Notes\r\nSystem.Buffers is supported by both .NET framework and .NET, although it has different internal implementation for each of those.\r\n",
  "state": "MERGED",
  "createdAt": "2021-07-23T12:42:11Z",
  "updatedAt": "2021-07-26T20:40:12Z",
  "closedAt": "2021-07-26T20:28:33Z",
  "mergedAt": "2021-07-26T20:28:32Z",
  "additions": 25,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "rokonec/6624-InterningBinaryReader.ReadString-LOH",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5aa79b8aa98bd2b67f6065db142cc14bc318ed0d",
          "message": "Using ArrayPool for buffers in InterningBinaryReader",
          "committedDate": "2021-07-23T12:17:48Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "104f624301adad8a031af62c2c96d0e6b5cafe8a",
          "message": "Review notes Forging#1 - Proper English in comments\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-07-26T08:38:32Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c52b01f662acc57300e77e6f9d88a6c23bc860a",
          "message": "Using #if !CLR2COMPATIBILITY instead",
          "committedDate": "2021-07-26T16:02:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f56e496da2648968c9576c395b7b8399f071c3af",
          "message": "Using  CLR2COMPATIBILITY instead ot NET35",
          "committedDate": "2021-07-26T16:10:23Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bcab2492c2720e39255eaacb02ad1c52f80662a5",
          "message": "Return buffer in finally.",
          "committedDate": "2021-07-26T16:29:41Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> LOH size dropped to ~2.5 GB from 4GB\r\n\r\nThat is still a lot - you don't happen to have traces left over?\r\n",
        "createdAt": "2021-07-26T20:40:12Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm guessing that if some other process is already renting this, it allocates another one? Maybe another interesting case in which parallelism reduces efficiency.",
              "createdAt": "2021-07-23T23:18:53Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,25 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That is correct. However, degree of parallelism in this particular test case is small. Only two buffers has been allocated in devenv and 1 per each msbuild node. Measured by `*System.Buffers.ArrayPoolEventSource` ETW.",
              "createdAt": "2021-07-26T08:37:15Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,25 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Note that it's note per _process_; it'd have to be threads. The ArrayPool is process-local. I'm curious what caused the second one to be allocated here since I thought the IPC stuff was almost entirely single-threaded.",
              "createdAt": "2021-07-26T14:57:19Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,25 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    // Since NET35 is only used in rare TaskHost processes, we decided to leave it as-is.\r\n```",
              "createdAt": "2021-07-23T23:20:45Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,25 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.\n+#else\n+                    // Since .NET35 is used only in rare cases of .NET 3.5 TaskHost process we decided left it as is",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // resultBuffer is never null, so we can simply return it to the Pool\r\n```",
              "createdAt": "2021-07-23T23:21:55Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,25 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.\n+#else\n+                    // Since .NET35 is used only in rare cases of .NET 3.5 TaskHost process we decided left it as is\n                     resultBuffer ??= new char[stringLength]; // Actual string length in chars may be smaller.\n+#endif\n                     charsRead += _decoder.GetChars(rawBuffer, rawPosition, n, resultBuffer, charsRead);\n \n                     currPos += n;\n                 }\n                 while (currPos < stringLength);\n \n-                return Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+                var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+#if !NET35\n+                // It is required that resultBuffer is always not null\n+                // and rented by ArrayPool so we can simply return it to back to the Pool",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Would it be safer to do this inside a `finally`?",
              "createdAt": "2021-07-26T09:13:37Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,24 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.\n+#else\n+                    // Since NET35 is only used in rare TaskHost processes, we decided to leave it as-is.\n                     resultBuffer ??= new char[stringLength]; // Actual string length in chars may be smaller.\n+#endif\n                     charsRead += _decoder.GetChars(rawBuffer, rawPosition, n, resultBuffer, charsRead);\n \n                     currPos += n;\n                 }\n                 while (currPos < stringLength);\n \n-                return Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+                var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+#if !NET35\n+                // resultBuffer is never null, so we can simply return it to the Pool\n+                ArrayPool<char>.Shared.Return(resultBuffer);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I have thought about it, but decided to prioritize code simplicity and readability here. The consequence of exceptions being thrown and buffer not being release are small. ArrayPool is not holding reference to Rented buffers. If buffer is not Returned it will be collected by GC results to equivalent of `new T[]`. So in worst case it will regress to previous behavior i.e. buffer allocation per call.",
              "createdAt": "2021-07-26T15:03:53Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,24 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.\n+#else\n+                    // Since NET35 is only used in rare TaskHost processes, we decided to leave it as-is.\n                     resultBuffer ??= new char[stringLength]; // Actual string length in chars may be smaller.\n+#endif\n                     charsRead += _decoder.GetChars(rawBuffer, rawPosition, n, resultBuffer, charsRead);\n \n                     currPos += n;\n                 }\n                 while (currPos < stringLength);\n \n-                return Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+                var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+#if !NET35\n+                // resultBuffer is never null, so we can simply return it to the Pool\n+                ArrayPool<char>.Shared.Return(resultBuffer);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "On the other hand. `finally` version seems to be safer for code maintenance...\r\n\r\nChanged",
              "createdAt": "2021-07-26T16:25:08Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -146,15 +150,24 @@ override public String ReadString()\n                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);\n                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));\n                     }\n-\n+#if !NET35\n+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.\n+#else\n+                    // Since NET35 is only used in rare TaskHost processes, we decided to leave it as-is.\n                     resultBuffer ??= new char[stringLength]; // Actual string length in chars may be smaller.\n+#endif\n                     charsRead += _decoder.GetChars(rawBuffer, rawPosition, n, resultBuffer, charsRead);\n \n                     currPos += n;\n                 }\n                 while (currPos < stringLength);\n \n-                return Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+                var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));\n+#if !NET35\n+                // resultBuffer is never null, so we can simply return it to the Pool\n+                ArrayPool<char>.Shared.Return(resultBuffer);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is more standard across the codebase\r\n\r\n```suggestion\r\n#if !CLR2COMPATIBILITY\r\n```",
              "createdAt": "2021-07-26T14:54:51Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -7,6 +7,10 @@\n using System.Diagnostics;\n using System.Threading;\n \n+#if !NET35",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}