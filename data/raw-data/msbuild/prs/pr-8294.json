{
  "number": 8294,
  "title": "Add Retries, RetryDelayMilliseconds parameters to Delete task",
  "body": "Fixes [#199](https://github.com/dotnet/msbuild/issues/199)\r\n\r\n### Changes Made\r\nAdd Retries which default value is 0 and RetryDelayMilliseconds default value is 1000ms properties. Initialize local value  retries, add while condition to reach the maximum Retries.\r\n\r\n### Testing\r\nUnit test DeleteWithRetries()\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-10T09:11:21Z",
  "updatedAt": "2023-01-20T05:22:10Z",
  "closedAt": "2023-01-20T05:22:08Z",
  "mergedAt": "2023-01-20T05:22:08Z",
  "additions": 323,
  "deletions": 12,
  "changedFiles": 16,
  "headRefName": "jennybai/issue199",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "63a88f224657354da3605acebec83d0cf1e81428",
          "message": "Support retries for delete task",
          "committedDate": "2023-01-10T08:46:26Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00f29098e5d12e8b19f643ab52340ddd5bf8049b",
          "message": "Update test case and move deletedFilesList out of while",
          "committedDate": "2023-01-11T04:26:24Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7bdd2ed49ab3e0c1f1e7904fdc1eee6d3dea6317",
          "message": "Specify the test on windows",
          "committedDate": "2023-01-11T05:50:51Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55e41b855959d42b5bd4d8c4710c9888df5ce423",
          "message": "Move deletedFilesList inside of loop",
          "committedDate": "2023-01-12T07:58:07Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a555c381895841f82886bf21756e879184f2109b",
          "message": "Update comment ,delete resource and file compare since linux  case-sensitive",
          "committedDate": "2023-01-16T06:19:57Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb9a2f7be699487b9ed81419b59dd0af38e849f5",
          "message": "Refactor the code",
          "committedDate": "2023-01-18T06:10:40Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "AttributeForwarding is the hanging test, by the way. It might be because of the bug I mentioned above.",
        "createdAt": "2023-01-10T23:47:42Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this should be outside the while loop.",
              "createdAt": "2023-01-10T23:41:44Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,46 +93,60 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n+                int retries = 0;\n+                while (!_canceling)\n                 {\n-                    return false;\n-                }\n-\n-                try\n-                {\n-                    // For speed, eliminate duplicates caused by poor targets authoring\n-                    if (!deletedFilesSet.Contains(file.ItemSpec))\n+                    try\n                     {\n-                        if (FileSystems.Default.FileExists(file.ItemSpec))\n+                        // For speed, eliminate duplicates caused by poor targets authoring\n+                        if (!deletedFilesSet.Contains(file.ItemSpec))\n                         {\n-                            // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n-                            Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);\n+                            if (FileSystems.Default.FileExists(file.ItemSpec))\n+                            {\n+                                // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n+                                Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);\n+\n+                                File.Delete(file.ItemSpec);\n+                            }\n+                            else\n+                            {\n+                                Log.LogMessageFromResources(MessageImportance.Low, \"Delete.SkippingNonexistentFile\", file.ItemSpec);\n+                            }\n+\n+                            // keep a running list of the files that were actually deleted\n+                            // note that we include in this list files that did not exist\n+                            ITaskItem deletedFile = new TaskItem(file);\n+                            deletedFilesList.Add(deletedFile);\n+                        }\n+                    }\n+                    catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))\n+                    {\n+                        if (retries < Retries)\n+                        {\n+                            retries++;\n+                            Log.LogWarningWithCodeFromResources(\"Delete.Retrying\", file.ToString(), retries, RetryDelayMilliseconds, e.Message);\n \n-                            File.Delete(file.ItemSpec);\n+                            Thread.Sleep(RetryDelayMilliseconds);\n+                            continue;\n                         }\n                         else\n                         {\n-                            Log.LogMessageFromResources(MessageImportance.Low, \"Delete.SkippingNonexistentFile\", file.ItemSpec);\n+                            LogError(file, e);\n+                            break;\n                         }\n-\n-                        // keep a running list of the files that were actually deleted\n-                        // note that we include in this list files that did not exist\n-                        ITaskItem deletedFile = new TaskItem(file);\n-                        deletedFilesList.Add(deletedFile);\n                     }\n+                    // Add even on failure to avoid reattempting\n+                    deletedFilesSet.Add(file.ItemSpec);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, should move this out. Thank you",
              "createdAt": "2023-01-11T04:27:36Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,46 +93,60 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n+                int retries = 0;\n+                while (!_canceling)\n                 {\n-                    return false;\n-                }\n-\n-                try\n-                {\n-                    // For speed, eliminate duplicates caused by poor targets authoring\n-                    if (!deletedFilesSet.Contains(file.ItemSpec))\n+                    try\n                     {\n-                        if (FileSystems.Default.FileExists(file.ItemSpec))\n+                        // For speed, eliminate duplicates caused by poor targets authoring\n+                        if (!deletedFilesSet.Contains(file.ItemSpec))\n                         {\n-                            // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n-                            Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);\n+                            if (FileSystems.Default.FileExists(file.ItemSpec))\n+                            {\n+                                // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n+                                Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);\n+\n+                                File.Delete(file.ItemSpec);\n+                            }\n+                            else\n+                            {\n+                                Log.LogMessageFromResources(MessageImportance.Low, \"Delete.SkippingNonexistentFile\", file.ItemSpec);\n+                            }\n+\n+                            // keep a running list of the files that were actually deleted\n+                            // note that we include in this list files that did not exist\n+                            ITaskItem deletedFile = new TaskItem(file);\n+                            deletedFilesList.Add(deletedFile);\n+                        }\n+                    }\n+                    catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))\n+                    {\n+                        if (retries < Retries)\n+                        {\n+                            retries++;\n+                            Log.LogWarningWithCodeFromResources(\"Delete.Retrying\", file.ToString(), retries, RetryDelayMilliseconds, e.Message);\n \n-                            File.Delete(file.ItemSpec);\n+                            Thread.Sleep(RetryDelayMilliseconds);\n+                            continue;\n                         }\n                         else\n                         {\n-                            Log.LogMessageFromResources(MessageImportance.Low, \"Delete.SkippingNonexistentFile\", file.ItemSpec);\n+                            LogError(file, e);\n+                            break;\n                         }\n-\n-                        // keep a running list of the files that were actually deleted\n-                        // note that we include in this list files that did not exist\n-                        ITaskItem deletedFile = new TaskItem(file);\n-                        deletedFilesList.Add(deletedFile);\n                     }\n+                    // Add even on failure to avoid reattempting\n+                    deletedFilesSet.Add(file.ItemSpec);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If you want to be really fancy, you could have something that waits a second after making the file readonly, then makes it not readonly, and verify that it initially fails but eventually succeeds. I don't think that's necessary here, though \ud83d\ude42",
              "createdAt": "2023-01-10T23:44:49Z",
              "path": "src/Tasks.UnitTests/Delete_Tests.cs",
              "diffHunk": "@@ -34,5 +37,45 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyFiles.nonexistent\", t.DeletedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Retry Delete\n+        /// </summary>\n+        [Fact]\n+        public void DeleteWithRetries()\n+        {\n+            string source = FileUtilities.GetTemporaryFile();\n+            try\n+            {\n+                using (StreamWriter sw = FileUtilities.OpenWrite(source, true))\n+                {\n+                    sw.Write(\"This is a source file.\");\n+                }\n+\n+                File.SetAttributes(source, FileAttributes.ReadOnly);\n+\n+                ITaskItem sourceItem = new TaskItem(source);\n+                ITaskItem[] sourceFiles = { sourceItem };\n+\n+                var t = new Delete\n+                {\n+                    RetryDelayMilliseconds = 1,  // speed up tests!\n+                    BuildEngine = new MockEngine(),\n+                    Files = sourceFiles,\n+                    Retries = 1,\n+                };\n+\n+                // Should fail since file is readonly",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks for pointing it out. I also want to do it ealier, but also think it's not necessary. But now I have updated the test case as what you said.",
              "createdAt": "2023-01-11T06:14:31Z",
              "path": "src/Tasks.UnitTests/Delete_Tests.cs",
              "diffHunk": "@@ -34,5 +37,45 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyFiles.nonexistent\", t.DeletedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Retry Delete\n+        /// </summary>\n+        [Fact]\n+        public void DeleteWithRetries()\n+        {\n+            string source = FileUtilities.GetTemporaryFile();\n+            try\n+            {\n+                using (StreamWriter sw = FileUtilities.OpenWrite(source, true))\n+                {\n+                    sw.Write(\"This is a source file.\");\n+                }\n+\n+                File.SetAttributes(source, FileAttributes.ReadOnly);\n+\n+                ITaskItem sourceItem = new TaskItem(source);\n+                ITaskItem[] sourceFiles = { sourceItem };\n+\n+                var t = new Delete\n+                {\n+                    RetryDelayMilliseconds = 1,  // speed up tests!\n+                    BuildEngine = new MockEngine(),\n+                    Files = sourceFiles,\n+                    Retries = 1,\n+                };\n+\n+                // Should fail since file is readonly",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It does not feel very good to me to use in Delete task the strings created for the Copy task, seeing that that are grouped by the task name in the resources and each task has its own interval for errors.  I think we need to copy this message.",
              "createdAt": "2023-01-12T16:32:03Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -43,8 +44,40 @@ public ITaskItem[] Files\n         [Output]\n         public ITaskItem[] DeletedFiles { get; set; }\n \n+\n+        /// <summary>\n+        /// Gets or sets the delay, in milliseconds, between any necessary retries.\n+        /// </summary>\n+        public int RetryDelayMilliseconds { get; set; } = 1000;\n+\n+        /// <summary>\n+        /// Gets or sets the number of times to attempt to copy, if all previous attempts failed.\n+        /// </summary>\n+        public int Retries { get; set; } = 0;\n+\n         #endregion\n \n+        /// <summary>\n+        /// Verify that the inputs are correct.\n+        /// </summary>\n+        /// <returns>False on an error, implying that the overall delete operation should be aborted.</returns>\n+        private bool ValidateInputs()\n+        {\n+            if (Retries < 0)\n+            {\n+                Log.LogErrorWithCodeFromResources(\"Copy.InvalidRetryCount\", Retries);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Have created a new resourse string named  with Delete.InvalidRetryCount which message is same with copy",
              "createdAt": "2023-01-16T08:46:23Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -43,8 +44,40 @@ public ITaskItem[] Files\n         [Output]\n         public ITaskItem[] DeletedFiles { get; set; }\n \n+\n+        /// <summary>\n+        /// Gets or sets the delay, in milliseconds, between any necessary retries.\n+        /// </summary>\n+        public int RetryDelayMilliseconds { get; set; } = 1000;\n+\n+        /// <summary>\n+        /// Gets or sets the number of times to attempt to copy, if all previous attempts failed.\n+        /// </summary>\n+        public int Retries { get; set; } = 0;\n+\n         #endregion\n \n+        /// <summary>\n+        /// Verify that the inputs are correct.\n+        /// </summary>\n+        /// <returns>False on an error, implying that the overall delete operation should be aborted.</returns>\n+        private bool ValidateInputs()\n+        {\n+            if (Retries < 0)\n+            {\n+                Log.LogErrorWithCodeFromResources(\"Copy.InvalidRetryCount\", Retries);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wonder if this works correctly in Linux, since the file system there is case-sensitive.",
              "createdAt": "2023-01-13T15:38:44Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "We have a weird mix of things that are case-insensitive always and things that care whether your file system is case sensitive. It might be better to use FileUtilities.PathComparer.",
              "createdAt": "2023-01-14T00:08:16Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I have some reservations about this cycle. \r\nThe main one is that in case of cancellation we do not return from this function as before but have to run the foreach cycle till its end. \r\nThe minor one, we have two more conditions when we want out of the cycle - when we success or when we exceed the number of retries. For better code understanding I would wish to read those conditions here instead of searching below where we break out of the infinite cycle (unless there is a good reason not to, of course).",
              "createdAt": "2023-01-13T16:04:27Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "I'm a little confused by your first reservation. If they cancel before we get into the loop, we'd skip over it as before. If not, we'd stop right after the attempt when they cancel; that should be equivalent to what it was before when we'd go to the end of the task execution if they cancel after it started.",
              "createdAt": "2023-01-14T00:15:20Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> For better code understanding I would wish to read those conditions here instead of searching below where we break out of the infinite cycle (unless there is a good reason not to, of course).\r\n\r\nAdd comment",
              "createdAt": "2023-01-16T08:40:26Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "> I'm a little confused by your first reservation. If they cancel before we get into the loop, we'd skip over it as before. If not, we'd stop right after the attempt when they cancel; that should be equivalent to what it was before when we'd go to the end of the task execution if they cancel after it started.\r\n\r\nThere was one (foreach) cycle before, from which we return in case of cancellation. Now we have two (foreach and while) cycles, and we skip only internal one in case of cancellation.",
              "createdAt": "2023-01-16T15:55:08Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "> > For better code understanding I would wish to read those conditions here instead of searching below where we break out of the infinite cycle (unless there is a good reason not to, of course).\r\n> \r\n> Add comment\r\n\r\nI would rather have code self-explanatory here. The breaks are in the end of the cycle, which makes me think that cycle could be written without them. But as I said, it is a minor thing. ",
              "createdAt": "2023-01-16T16:49:09Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "> > I'm a little confused by your first reservation. If they cancel before we get into the loop, we'd skip over it as before. If not, we'd stop right after the attempt when they cancel; that should be equivalent to what it was before when we'd go to the end of the task execution if they cancel after it started.\r\n> \r\n> There was one (foreach) cycle before, from which we return in case of cancellation. Now we have two (foreach and while) cycles, and we skip only internal one in case of cancellation.\r\n\r\nYeah, it's a little different from before. But I think it's reasonable. If cancel the delete operation, it will return false directly before. But now it will output the deletedfiles we have done before cancel and return !Log.HasLoggedErrors. I think that is more friendly for users.",
              "createdAt": "2023-01-17T05:15:23Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Well, the cancellation I think should cancel the operation as soon as possible, which is not in this new code. Imagine that somebody by mistake put millions of files there. And wants to cancel. It could be very long wait. And it is still possible to return the already deleted files when cancelled, nothing prevents that.",
              "createdAt": "2023-01-17T14:31:23Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thanks @AR-May.  Updated and please help review again.",
              "createdAt": "2023-01-18T06:11:25Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "We can also move the cancellation inside the \"while\" cycle, and it will work a bit better in case of cancellation but it is worse for other cases, so I am not sure about that.  I think current version is fine. ",
              "createdAt": "2023-01-19T15:47:00Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Put cancellation inside the while cycle\uff0cit's better when Retries is large. But put cancellation outside the while cycle\uff0cit's better when a lot of dupulicate files input",
              "createdAt": "2023-01-20T05:21:23Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -60,43 +93,58 @@ public void Cancel()\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!ValidateInputs())\n+            {\n+                return false;\n+            }\n             var deletedFilesList = new List<ITaskItem>();\n             var deletedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n \n             foreach (ITaskItem file in Files)\n             {\n-                if (_canceling)\n-                {\n-                    return false;\n-                }\n-\n-                try\n+                int retries = 0;\n+                while (!_canceling)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}