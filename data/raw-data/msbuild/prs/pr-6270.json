{
  "number": 6270,
  "title": "Throw BadImageFormatException when missing PE metadata",
  "body": "Fixes #6200 \r\n\r\n### Context\r\n`InvalidOperationException` was being thrown by `AssemblyInformation.CorePopulateMetadata`, causing the ResolveAssemblyReference task to fail rather than disregarding the file.\r\n\r\n### Changes Made\r\nI copied the code from AssemblyNameExtension to ensure there is metadata present before getting a metadata reader: https://github.com/dotnet/msbuild/blob/6819f7ab06c3f43e83ff4059d417395e0af06c01/src/Shared/AssemblyNameExtension.cs#L214-L231\r\n\r\n### Testing\r\nI looked for unit tests for AssemblyInformation, but could not find any, so I didn't add a unit test for this case. However, I successfully built the project that was reproducing the error in #6200, indicating that the change did indeed fix the issue.",
  "state": "MERGED",
  "createdAt": "2021-03-16T19:23:43Z",
  "updatedAt": "2021-03-31T12:31:55Z",
  "closedAt": "2021-03-31T06:49:40Z",
  "mergedAt": "2021-03-31T06:49:40Z",
  "additions": 20,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "finitereality/issue-6200",
  "isDraft": false,
  "author": {
    "login": "FiniteReality"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b4d43cfec32285f6046b9ef64ab9106dbbc59d58",
          "message": "Throw BadImageFormatException for missing metadata",
          "committedDate": "2021-03-16T19:06:31Z",
          "author": {
            "name": "FiniteReality",
            "email": "digpoealternate@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "987aa427ba8d1b57ee47aa71dd4715bd74f55974",
          "message": "Carry over HasMetadata check comment",
          "committedDate": "2021-03-16T20:00:08Z",
          "author": {
            "name": "FiniteReality",
            "email": "digpoealternate@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> we should add the same check in MetadataReader.cs.\r\n\r\nIt seems MetadataReader already has a try/catch surrounding the HasMetadata check, which closes the reader, meaning `MetadataReader.Create()` returns `null` as `_reader` is set to `null`.",
        "createdAt": "2021-03-16T19:59:09Z",
        "author": {
          "login": "FiniteReality"
        }
      },
      {
        "body": "This looks good although I wonder if pulling the code into a helper and calling it from both AssemblyNameExtension and AssemblyInformation wouldn't be slightly more elegant.",
        "createdAt": "2021-03-19T13:30:03Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> This looks good although I wonder if pulling the code into a helper and calling it from both AssemblyNameExtension and AssemblyInformation wouldn't be slightly more elegant.\r\n\r\nSo maybe an extension method `PEReader.ThrowIfMissingMetadata()`?",
        "createdAt": "2021-03-19T18:20:30Z",
        "author": {
          "login": "FiniteReality"
        }
      },
      {
        "body": "How does RAR behave if you pass a non-PE file?",
        "createdAt": "2021-03-21T12:47:44Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> How does RAR behave if you pass a non-PE file?\r\n\r\nGenerally, a BadImageFormatException is thrown, which RAR catches and aborts with \"File does not contain managed metadata\". For example:\r\n```\r\n         Primary reference \"HelloWorldLibraryC\".\r\n             Could not find dependent files. Assembly file '/home/dev/Development/Finite.Cpp.Sdk/artifacts/bin/samples/HelloWorldLibraryC/Debug/HelloWorldLibraryC.so' could not be opened -- PE image doesn't contain managed metadata.\r\n             Could not find dependent files. Image is too small.\r\n             Resolved file path is \"/home/dev/Development/Finite.Cpp.Sdk/artifacts/bin/samples/HelloWorldLibraryC/Debug/HelloWorldLibraryC.so\".\r\n             Reference found at search path location \"\".\r\n             The ImageRuntimeVersion for this reference is \"\".\r\n```",
        "createdAt": "2021-03-21T21:04:33Z",
        "author": {
          "login": "FiniteReality"
        }
      },
      {
        "body": "Not sure if relevant, but Microsoft.Build.Tasks.Core.dll has an `IsManagedAssembly()` method:\r\nhttps://source.dot.net/#Microsoft.Build.Tasks.Core/ManifestUtil/PathUtil.cs,ef4ea3875d69614b\r\n\r\nAlso here's a way to find out if an assembly is managed without throwing:\r\nhttps://github.com/KirillOsenkov/MetadataTools/blob/main/src/PEFile/IsManagedAssembly.cs\r\n",
        "createdAt": "2021-03-22T22:36:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@cdmihai the project reference stuff is certainly valid, but I'm questioning whether that should be done as a separate PR? This feels nicely self-contained and relatively isolated and it does fix the issue at hand?",
        "createdAt": "2021-03-22T22:41:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thanks @FiniteReality!",
        "createdAt": "2021-03-31T06:49:53Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: carry the comment over that explains why we do this. ",
              "createdAt": "2021-03-16T19:31:39Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -361,6 +361,21 @@ private void CorePopulateMetadata()\n                 using (var stream = File.OpenRead(_sourceFile))\n                 using (var peFile = new PEReader(stream))\n                 {\n+                    bool hasMetadata = false;\n+                    try\n+                    {\n+                        hasMetadata = peFile.HasMetadata;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I've copied over both comments.",
              "createdAt": "2021-03-16T20:13:33Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -361,6 +361,21 @@ private void CorePopulateMetadata()\n                 using (var stream = File.OpenRead(_sourceFile))\n                 using (var peFile = new PEReader(stream))\n                 {\n+                    bool hasMetadata = false;\n+                    try\n+                    {\n+                        hasMetadata = peFile.HasMetadata;",
              "author": {
                "login": "FiniteReality"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure what is the behavior of throwing an exception from a finally block when we're in the process of throwing a different exception, should we put an empty catch block before it to suppress the other exception?",
              "createdAt": "2021-03-22T22:40:18Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -361,6 +361,25 @@ private void CorePopulateMetadata()\n                 using (var stream = File.OpenRead(_sourceFile))\n                 using (var peFile = new PEReader(stream))\n                 {\n+                    bool hasMetadata = false;\n+                    try\n+                    {\n+                        // This can throw if the stream is too small, which means\n+                        // the assembly doesn't have metadata.\n+                        hasMetadata = peFile.HasMetadata;\n+                    }\n+                    finally\n+                    {\n+                        // If the file does not contain PE metadata, throw BadImageFormatException to preserve\n+                        // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.\n+                        if (!hasMetadata)\n+                        {\n+                            throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "This is fine, it's well-defined to start handling the new exception while skipping the rest of the finally block.",
              "createdAt": "2021-03-23T14:53:48Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -361,6 +361,25 @@ private void CorePopulateMetadata()\n                 using (var stream = File.OpenRead(_sourceFile))\n                 using (var peFile = new PEReader(stream))\n                 {\n+                    bool hasMetadata = false;\n+                    try\n+                    {\n+                        // This can throw if the stream is too small, which means\n+                        // the assembly doesn't have metadata.\n+                        hasMetadata = peFile.HasMetadata;\n+                    }\n+                    finally\n+                    {\n+                        // If the file does not contain PE metadata, throw BadImageFormatException to preserve\n+                        // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.\n+                        if (!hasMetadata)\n+                        {\n+                            throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}