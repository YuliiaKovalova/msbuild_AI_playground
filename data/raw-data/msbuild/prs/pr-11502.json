{
  "number": 11502,
  "title": "Memory mapped files proof-of-concept",
  "body": "Part of  #11160 \r\n\r\n### Context\r\nOne of our bottlenecks for MSBuild parallelization is IPC, e.g. node-to-node communication.\r\nOne of the pain points is serialization/deserialization - which isn't addressed here, but it could be a step in this direction.\r\nThe other point is that the IPC workflow is as follows:\r\n - Node serializes packet into buffer,\r\n - Then adds five control bytes (node type + packet length) at the beginning of the message\r\n - Then writes the buffer into a pipe\r\n - The receiving end reads the data from the pipe into a buffer\r\n - then handles it as needed.\r\nEven if we look away from the serialization, there are several more data moves then necessary. This is an attempt to eliminate them and potentially lay groundwork for further improvements:\r\n - I open a sufficiently large memory mapped file for every node in every direction \r\n   - this has some memory overhead, discussion about size of the file is welcome\r\n   - for now there is no file overflow protection if the produces pushes data too fast, catching up with the not-yet-read part (hence the size of the files), some sort of push-back mechanism might be needed, especially if we decide we need to shrink the MMFs. currently I'm using 10MB file for every direction, e.g. 360MB overhead for 20 node build. Though I'm not sure when exactly is the memory used, it might be less since I'm using smaller view accessors.\r\n\r\nThe workflow now looks like this:\r\n - node serializes packet directly into the memory mapped file.\r\n - it then pushes 9 bytes into the pipe, with a new packet type that signalizes \"this one goes through the MMF, special handling needed\"\r\n - the receiving end then deserializes the data directly from the memory mapped file.\r\nThis saves two full moves of the data and also lessens the pressure on the IPC since the data is passed directly through the RAM.\r\n\r\nInitial performance profiling suggests improvement from average of 39.38 to 38.13 e.g. some ~3% of wallclock time(so I would say 2-4%, since there is large variance)\r\nNote that this could be less due to having to implement some further checking mechanisms or more, since this is just a first crude implementation and some cleanup/optimization could help.\r\n\r\n### Changes Made\r\nIntroduced memory mapped file for both directions of the node-to-node communication on .net472 framework. (should be reasonably extensible to net9, but there was some issue with importing that I will look at later, if we decide to move forward with this one)\r\n\r\n### Testing\r\nManual testing on OrchardCore. The build succeeds, data flows normally.\r\n\r\n### Notes\r\nCaveat:\r\nTaskHost doesn't support Memory mapped files so keeping the old implementation is unfortunately necessary, unless we figure out a better way to split the code. Maybe It's time to force TaskHost into isolation at the cost of some code duplication? (this isn't the first time I've run into an issue with refactoring due to the TaskHost)\r\n\r\nProfiling on OrchardCore, with binlogs enabled:\r\n| my change: | main (current one, old profiling was against a different branch but it should be close enough): |\r\n|--------------| -------------|\r\n| 47.6336016 | 53.8131099 |\r\n| 49.8221584 | 54.8453553  |\r\n| 49.9176297 | 53.0443207 |\r\n| 49.3054388 | 55.7054659 |\r\n| 49.5569108 | 52.5317888 |\r\n| 78.3659469 | 51.8770221 |\r\n| 52.6296225 | 53.0219047 |\r\n| 52.2793575 | 54.2732421 |\r\n| 52.5254928 | 52.656414 |\r\n| 51.5814135 | 52.374719 |\r\n| 50.187404 | 55.6009437 |\r\n| 49.388237 | 53.7160303 |\r\n| 51.041493 | 51.4574196 |\r\n| 51.5348809 | |\r\n| 50.2932251 | |\r\n| 49.8235173 | |\r\n| 51.3037764 | |\r\n| Average | |\r\n| 52.1 | 53.6 |  \r\n| Median: | |\r\n| 50.2 |  53.38 |\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2025-02-26T08:47:45Z",
  "updatedAt": "2025-05-12T15:20:42Z",
  "closedAt": "2025-05-12T15:20:42Z",
  "mergedAt": null,
  "additions": 371,
  "deletions": 134,
  "changedFiles": 10,
  "headRefName": "MMF-poc",
  "isDraft": true,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e66da7504fbc1f25e5268cd4e5c7c9d4c89b8ee0",
          "message": "trying out channels and setting up a slightly different drain method.",
          "committedDate": "2025-04-28T10:50:02Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "dd0311d8dd77b22ed3a552cb54e316347970fb69",
          "message": "one direction is working, now enabling the other one",
          "committedDate": "2025-04-28T10:54:31Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "5154f87c3cab98314e5f16d38bfe4a1d56d2f6a3",
          "message": "side channel both ways, unoptimized",
          "committedDate": "2025-04-28T10:55:51Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "dfab6fd60abc6becbf83a2411a94c6dc346bf699",
          "message": "wip",
          "committedDate": "2025-04-28T10:55:53Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The profiling I did was Eric's PR #11275 with some of my changes e.g. commit bcd24d815e77793c0125196c63cc904970632722 from this PR, vs the last commit of this PR when I managed to get both directions working.\r\n\r\nI don't expect this one to be merged, I created it as a discussion opener & so that it is profile-able on a machine other than mine.\r\n",
        "createdAt": "2025-02-26T08:51:37Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}