{
  "number": 7008,
  "title": "Permit individually settable search paths",
  "body": "Fixes #3784\r\n\r\n### Context\r\nAssemblySearchPaths are currently set using a property (not an item because order often matters) in which either the user sets all of them or the user accepts the default. This allows the user to accept some or most of the default without accepting all of it.\r\n\r\nIt may also be reasonable to add:\r\n\r\n```XML\r\n<AssemblySearchPaths Condition=\"'$(CustomAssemblySearchPaths)' != ''\">$(AssemblySearchPaths);$(CustomAssemblySearchPaths)</AssemblySearchPaths>\r\n```\r\n\r\nthough that would only allow users to add custom paths at the predefined spot, so it may not be too helpful. I'm also unsure if it would be most likely to be used if it's first, last, or just before OutDir.",
  "state": "MERGED",
  "createdAt": "2021-11-01T18:49:45Z",
  "updatedAt": "2021-12-21T08:16:24Z",
  "closedAt": "2021-11-23T20:08:38Z",
  "mergedAt": "2021-11-23T20:08:37Z",
  "additions": 70,
  "deletions": 27,
  "changedFiles": 3,
  "headRefName": "individual-AssemblySearchPaths",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f3343e4118f782ac12b16a966c10afd0d815a89c",
          "message": "Permit individually settable search paths\n\nFixes #3784",
          "committedDate": "2021-11-01T18:45:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d7426825050fa6c4e86fc5939866f3d67d14dfc",
          "message": "Update src/Tasks/Microsoft.Common.CurrentVersion.targets",
          "committedDate": "2021-11-22T17:35:19Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85f22d5c392c300b236fdbd7c39a45a59a7b5218",
          "message": "Document opt-outs",
          "committedDate": "2021-11-22T19:07:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c90d6e0452be045437b21766201eb4b3d596436",
          "message": "Add ASP and opt-outs to xsd",
          "committedDate": "2021-11-23T17:50:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> LGTM. Friendly reminder that we need these properties inserted in our public facing docs (if i recall correctly, that was the location we agreed on?)\r\n\r\nTo both \"known MSBuild properties\" and our repo-level docs, but we also decided I should put that off until rainersigwald has had a chance to review it, and it's been merged.",
        "createdAt": "2021-11-10T19:34:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Can you follow this up with an equivalent change in the .NET SDK, which overrides our defaults? https://github.com/dotnet/sdk/blob/5899560935260ff35a9ca601c91c75afbaed1f1d/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L91\r\n\r\nIt looks cleaner as-is than if I were to change it to use the new properties in this PR to me. If I did, I'd have to set several properties instead of just one. Also, it currently sets DesignTimeAssemblySearchPaths (if it's nonempty) to $(AssemblySearchPaths), and that wouldn't work anymore; I'd have to have modify this PR to also set DesignTimeAssemblySearchPaths to $(AssemblySearchPaths) like [here](https://github.com/dotnet/msbuild/pull/7008/files#diff-5407d46dd30ce4031e530c35cc2e0a62a6c96e54cb1def14fb316f351ef92de9R636) if it's nonempty, but that would be changing where that happened and making it happen in non-SDK style projects where it hadn't before.",
        "createdAt": "2021-11-17T21:46:29Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> It looks cleaner as-is than if I were to change it to use the new properties in this PR to me. If I did, I'd have to set several properties instead of just one.\r\n\r\nWhat I'm asking for is to respect these new properties in the .NET SDK as well. Otherwise we'll be in a position where we say \"you can set `AssemblySearchPathUseCandidateAssemblyFiles=false` to avoid using CandidateAssemblyFiles, but that only works if you're not using the .NET SDK\".\r\n\r\n> I'd have to have modify this PR to also set DesignTimeAssemblySearchPaths to $(AssemblySearchPaths) like [here](https://github.com/dotnet/msbuild/pull/7008/files#diff-5407d46dd30ce4031e530c35cc2e0a62a6c96e54cb1def14fb316f351ef92de9R636) if it's nonempty\r\n\r\nDivergence of DesignTimeAssemblySearchPaths from AssemblySearchPaths worries me.",
        "createdAt": "2021-11-17T22:01:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > It looks cleaner as-is than if I were to change it to use the new properties in this PR to me. If I did, I'd have to set several properties instead of just one.\r\n> \r\n> What I'm asking for is to respect these new properties in the .NET SDK as well. Otherwise we'll be in a position where we say \"you can set `AssemblySearchPathUseCandidateAssemblyFiles=false` to avoid using CandidateAssemblyFiles, but that only works if you're not using the .NET SDK\".\r\n\r\nOh, makes sense.\r\n \r\n> > I'd have to have modify this PR to also set DesignTimeAssemblySearchPaths to $(AssemblySearchPaths) like [here](https://github.com/dotnet/msbuild/pull/7008/files#diff-5407d46dd30ce4031e530c35cc2e0a62a6c96e54cb1def14fb316f351ef92de9R636) if it's nonempty\r\n> \r\n> Divergence of DesignTimeAssemblySearchPaths from AssemblySearchPaths worries me.\r\n\r\nDo you think setting DesignTimeAssemblySearchPaths where I pointed to is too much of a breaking change? It feels pretty small to me, but I really don't know. The only way I can think of to fully avoid any change in behavior is if the SDK checks for all the new properties and sets AssemblySearchPaths then DesignTimeAssemblySearchPaths appropriately, but that's a bit messy.",
        "createdAt": "2021-11-17T22:11:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Related: #772",
        "createdAt": "2021-12-20T20:55:43Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Related: #772\r\n\r\nDidn't this resolve #772? Am I missing something?",
        "createdAt": "2021-12-20T23:25:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "It does but I linked the issue here via the comment above.",
        "createdAt": "2021-12-21T08:16:23Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            (5) Assembly folders from AssemblyFolders.config file (provided by Visual Studio Dev15+).\r\n            (6) Registered assembly folders, indicated by {Registry:*,*,*}\r\n```",
              "createdAt": "2021-11-22T17:35:15Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -634,6 +607,34 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <FullReferenceAssemblyNames Condition=\"'$(FullReferenceAssemblyNames)' == ''\">Full</FullReferenceAssemblyNames>\n   </PropertyGroup>\n \n+  <PropertyGroup Condition=\"$(AssemblySearchPaths) == ''\">\n+    <!--\n+        The SearchPaths property is set to find assemblies in the following order:\n+\n+            (1) Files from current project - indicated by {CandidateAssemblyFiles}\n+            (2) $(ReferencePath) - the reference path property, which comes from the .USER file.\n+            (3) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.\n+            (4) The directory of MSBuild's \"target\" runtime from GetFrameworkPath.\n+                The \"target\" runtime folder is the folder of the runtime that MSBuild is a part of.\n+            (5) Registered assembly folders, indicated by {Registry:*,*,*}\n+            (6) Assembly folders from AssemblyFolders.config file (provided by Visual Studio Dev15+).",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you please also add these to the XSD?",
              "createdAt": "2021-11-23T15:43:53Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -634,6 +607,34 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <FullReferenceAssemblyNames Condition=\"'$(FullReferenceAssemblyNames)' == ''\">Full</FullReferenceAssemblyNames>\n   </PropertyGroup>\n \n+  <PropertyGroup Condition=\"$(AssemblySearchPaths) == ''\">\n+    <!--\n+        The SearchPaths property is set to find assemblies in the following order:\n+\n+            (1) Files from current project - indicated by {CandidateAssemblyFiles}\n+            (2) $(ReferencePath) - the reference path property, which comes from the .USER file.\n+            (3) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.\n+            (4) The directory of MSBuild's \"target\" runtime from GetFrameworkPath.\n+                The \"target\" runtime folder is the folder of the runtime that MSBuild is a part of.\n+            (5) Assembly folders from AssemblyFolders.config file (provided by Visual Studio Dev15+).\n+            (6) Registered assembly folders, indicated by {Registry:*,*,*}\n+            (7) Legacy registered assembly folders, indicated by {AssemblyFolders}\n+            (8) Resolve to the GAC.\n+            (9) Treat the reference's Include as if it were a real file name.\n+            (10) Look in the application's output folder (like bin\\debug)\n+        -->\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseCandidateAssemblyFiles) != 'false'\">{CandidateAssemblyFiles}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseReferencePath) != 'false'\">$(AssemblySearchPaths);$(ReferencePath)</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseHintPathFromItem) != 'false'\">$(AssemblySearchPaths);{HintPathFromItem}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseTargetFrameworkDirectory) != 'false'\">$(AssemblySearchPaths);{TargetFrameworkDirectory}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseAssemblyFoldersConfigFileSearchPath) != 'false'\">$(AssemblySearchPaths);$(AssemblyFoldersConfigFileSearchPath)</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseRegistry) != 'false'\">$(AssemblySearchPaths);{Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseAssemblyFolders) != 'false'\">$(AssemblySearchPaths);{AssemblyFolders}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseGAC) != 'false'\">$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseRawFileName) != 'false'\">$(AssemblySearchPaths);{RawFileName}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseOutDir) != 'false'\">$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sorry for the late review but...\r\n\r\n```suggestion\r\n    <AssemblySearchPaths Condition=\"'$(AssemblySearchPath_UseOutDir)' != 'false'\">$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>\r\n```\r\n\r\n**CHANGES**\r\n\r\n- Use quotes to avoid erroring out with a malformed value (_with space and illegal symbols_) entering the condition.\r\n- Wouldn't it better to use `BaseProperty_SubOption` with an `_` acting as a separator to make these properties clearer?\r\n\r\nSee that we already use this pattern of naming here...\r\n\r\nhttps://github.com/dotnet/msbuild/blob/14313d17e407e24ad80e113bd475d1dd7c698656/src/Tasks/Microsoft.Common.props#L181",
              "createdAt": "2021-12-20T21:03:41Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -634,6 +607,34 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <FullReferenceAssemblyNames Condition=\"'$(FullReferenceAssemblyNames)' == ''\">Full</FullReferenceAssemblyNames>\n   </PropertyGroup>\n \n+  <PropertyGroup Condition=\"$(AssemblySearchPaths) == ''\">\n+    <!--\n+        The SearchPaths property is set to find assemblies in the following order:\n+\n+            (1) Files from current project - indicated by {CandidateAssemblyFiles}\n+            (2) $(ReferencePath) - the reference path property, which comes from the .USER file.\n+            (3) The hintpath from the referenced item itself, indicated by {HintPathFromItem}.\n+            (4) The directory of MSBuild's \"target\" runtime from GetFrameworkPath.\n+                The \"target\" runtime folder is the folder of the runtime that MSBuild is a part of.\n+            (5) Assembly folders from AssemblyFolders.config file (provided by Visual Studio Dev15+).\n+            (6) Registered assembly folders, indicated by {Registry:*,*,*}\n+            (7) Legacy registered assembly folders, indicated by {AssemblyFolders}\n+            (8) Resolve to the GAC.\n+            (9) Treat the reference's Include as if it were a real file name.\n+            (10) Look in the application's output folder (like bin\\debug)\n+        -->\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseCandidateAssemblyFiles) != 'false'\">{CandidateAssemblyFiles}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseReferencePath) != 'false'\">$(AssemblySearchPaths);$(ReferencePath)</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseHintPathFromItem) != 'false'\">$(AssemblySearchPaths);{HintPathFromItem}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseTargetFrameworkDirectory) != 'false'\">$(AssemblySearchPaths);{TargetFrameworkDirectory}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseAssemblyFoldersConfigFileSearchPath) != 'false'\">$(AssemblySearchPaths);$(AssemblyFoldersConfigFileSearchPath)</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseRegistry) != 'false'\">$(AssemblySearchPaths);{Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseAssemblyFolders) != 'false'\">$(AssemblySearchPaths);{AssemblyFolders}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseGAC) != 'false'\">$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseRawFileName) != 'false'\">$(AssemblySearchPaths);{RawFileName}</AssemblySearchPaths>\n+    <AssemblySearchPaths Condition=\"$(AssemblySearchPathUseOutDir) != 'false'\">$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}