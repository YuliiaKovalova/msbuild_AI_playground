{
  "number": 10175,
  "title": "Work around a JIT failure when running net472 MSBuild on .NET 8",
  "body": "Fixes #9869\r\n\r\n### Context\r\n\r\nRunning .NET Framework MSBuild in a .NET process is unsupported. Apparently, though, until #9446 it was working.\r\n\r\n### Changes Made\r\n\r\nWorked around the regression by calling .NET Framework-only API in a separate non-inlinable method.\r\n\r\n### Testing\r\n\r\nThe test project provided by @MarkKharitonov.\r\n\r\n### Notes\r\n\r\nNB: The scenario is still unsupported and there are no guarantees that it will be working in the future.",
  "state": "CLOSED",
  "createdAt": "2024-05-27T07:50:44Z",
  "updatedAt": "2024-08-27T15:46:15Z",
  "closedAt": "2024-08-27T15:27:58Z",
  "mergedAt": null,
  "additions": 17,
  "deletions": 6,
  "changedFiles": 1,
  "headRefName": "net8-dont-fail-to-jit",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "do-not-merge"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "54d3684108b3b949969844f7f232392ee1000584",
          "message": "Work around a JIT failure when running net472 MSBuild on .NET 8",
          "committedDate": "2024-05-27T07:45:55Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98e21482a671cc9949c94dbe76cb23b523f636fb",
          "message": "Update src/Build/Utilities/NuGetFrameworkWrapper.cs\n\nCo-authored-by: AR-May <67507805+AR-May@users.noreply.github.com>",
          "committedDate": "2024-05-28T07:44:55Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@MarkKharitonov, please give this a try.",
        "createdAt": "2024-05-27T07:51:58Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "It works.\r\n\r\nCould you please explain the essence of the fix for my education? I have looked at the PR change and saw the note about inlining, but I did not understand it.\r\n\r\nThank you very much.",
        "createdAt": "2024-05-27T13:08:01Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "The problematic code is behind an `if` and while in your scenario it does not run, the call still fails to be resolved at JIT time. The fix moves the call to another method to make sure that it's seen by JIT only when actually called.",
        "createdAt": "2024-05-27T13:16:01Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Ah, of course. Similar to the `MSBuildLocator` pattern where we must locate the msbuild and invoke msbuild in different functions, so that JIT does not attempt to compile msbuild usage before we locate it. I get it.\r\n\r\nMakes total sense now.\r\n\r\nHopefully your change is merged and deployed soon.",
        "createdAt": "2024-05-27T13:19:22Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I would lean slightly towards keeping this working and adding a hard break post-17. But if you feel strongly about it, I have no issue with closing this.",
        "createdAt": "2024-05-28T14:20:00Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Would you be able to submit a Pull Request for my test case repository at https://github.com/MarkKharitonov/test_load_msbuild_project that exemplifies the correct approach?\r\n",
        "createdAt": "2024-05-28T15:01:14Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Guys, would it be possible to modify my test case at https://github.com/MarkKharitonov/test_load_msbuild_project to demonstrate how a single app can manipulate both SDK and legacy projects? Our enterprise application still uses .NET Framework and even though almost all the projects are SDK style, there are a few (typically using WCF) which are legacy.\r\n\r\nWe have important tooling processing all of the projects and this move from 17.9 to 17.10 breaks it. I do not mind changing our code to process it correctly, but a working example would make it much easier for us.\r\n\r\nNow I realize everyone is busy and therefore as a compromise, maybe this PR should be merged after all? This will release the pressure and you will be able to provide a working correct example at ease.",
        "createdAt": "2024-05-29T21:56:45Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov apologies for the delay, busy times indeed. I'll leave it up to the team to decide if they want to take this fix. But even if it is taken, it will only appear in .NET 9 / VS 17.11.\r\n\r\nAs for the right approach, I believe the guidance is straightforward: When you want to manipulate legacy projects, you should use the MSBuild that comes with VS, not the one in .NET SDK. And because VS MSBuild is designed to run on .NET Framework, it must be hosted in a .NET Framework app.",
        "createdAt": "2024-05-30T14:37:36Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Could you provide some more concrete example?\r\n\r\nIn my test case, I process 3 kinds of projects:\r\n\r\n1. Legacy (non SDK style) - **works fine.**\r\n2. SDK style targeting .NET Framework - **fails.**\r\n3. SDK style targeting .NET 8 - **fails.**\r\n\r\nAnd the processor itself:\r\n\r\n1. targets .NET 8.\r\n2. Uses msbuild libraries from the VS installation (by guiding the `MSBuildLocator` to the VS directory).\r\n\r\nIn reality I do not need to support all the 3 kinds of projects - only legacy and SDK style targeting the .NET Framework is required.\r\nI would really like to develop the processor utilizing the full power of the modern .NET, i.e. target the latest .NET. It just does not make sense to develop unicorn processor tools for enterprise source code using the same outdated tech as the enterprise code itself. Modernizing the enterprise code takes time, a lot of time. This processor tool is part of the modernization effort to automate certain chores.\r\n\r\nGiven this context, what are my options? What is the correct approach to develop that processor?",
        "createdAt": "2024-05-30T15:02:08Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> I would really like to develop the processor utilizing the full power of the modern .NET, i.e. target the latest .NET.\r\n\r\nThis is not possible.\r\n\r\n> It just does not make sense to develop unicorn processor tools for enterprise source code using the same outdated tech as the enterprise code itself.\r\n\r\nSorry, this is what is required today.",
        "createdAt": "2024-05-30T15:24:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It was working so far. And the change in this PR has zero cost from all the perspectives - maintenance, performance, code quality, etc...\r\nThis change alone is enough to let my code parse C# project files using MSBuild API while enjoying all the latest .NET goodies. Maybe more sophisticated usages of the MSBuild API are forbidden in my circumstances, but I do not need them. Maybe you guys have further serious changes in stock that will break it, but for now this `AppDomain` business is the only obstacle.\r\n\r\nIt would be very helpful if this change is merged.",
        "createdAt": "2024-05-30T18:34:36Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "If the tooling targets .NET Framework, then how can such a tool be packed as a dotnet tool?\r\nI played with it a little bit and get the following error running `dotnet pack`:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\8.0.206\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.PackTool.targets(117,5): error NETSDK1054: only supports .NET Core. [C:\\xyz\\CSTool\\CSTool\\CSTool.csproj]\r\n```\r\nThis seems to be mentioned [here](https://github.com/dotnet/sdk/issues/9394) - dotnet tools must target .NET Core.\r\nAm I missing anything? Does it mean that if we are forced to target the .NET Framework in the tooling, then we can no longer distribute it as a dotnet tool?\r\n",
        "createdAt": "2024-05-31T03:58:47Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> Does it mean that if we are forced to target the .NET Framework in the tooling, then we can no longer distribute it as a dotnet tool?\r\n\r\nYou could probably play some tricks like having a dotnet tool that only invokes the .NET Framework app it carries as Content, if you really wanted to distribute as a tool.",
        "createdAt": "2024-06-05T14:59:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "PM take on this: we should not encourage in any way unsupported use of the MSBuild tool. This just increases the support matrix/load on the team and encourages users to use the tool in ways that may subtly break at any time. I am fully in support of @rainersigwald's desires to break more explicitly when this torn state is detected.",
        "createdAt": "2024-08-27T15:09:20Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "There is ton of legacy .NET Framework code. What you are doing by declaring this scenario as unsupported is doom all the tools that manipulate it and which employ the MSBuild API to be written in .NET Framework as well. \r\nPretty harsh constraint.",
        "createdAt": "2024-08-27T15:32:38Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov it's one we have to live with, too. I wish we didn't! But this is what we have.",
        "createdAt": "2024-08-27T15:46:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n        /// </remarks>\r\n```",
              "createdAt": "2024-05-28T07:38:06Z",
              "path": "src/Build/Utilities/NuGetFrameworkWrapper.cs",
              "diffHunk": "@@ -195,6 +196,21 @@ private static AppDomainSetup CreateAppDomainSetup(AssemblyName assemblyName, st\n             appDomainSetup.SetConfigurationBytes(Encoding.UTF8.GetBytes(configuration));\n             return appDomainSetup;\n         }\n+\n+        /// <summary>\n+        /// Creates an instance of <see cref=\"NuGetFrameworkWrapper\"/> in a new secondary AppDomain.\n+        /// </summary>\n+        /// <remarks>\n+        /// Pulled into a separate non-inlinable method to avoid failing to JIT on platforms without AppDomain support.\n+        /// /// </remarks>",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thank you!",
              "createdAt": "2024-05-28T07:44:52Z",
              "path": "src/Build/Utilities/NuGetFrameworkWrapper.cs",
              "diffHunk": "@@ -195,6 +196,21 @@ private static AppDomainSetup CreateAppDomainSetup(AssemblyName assemblyName, st\n             appDomainSetup.SetConfigurationBytes(Encoding.UTF8.GetBytes(configuration));\n             return appDomainSetup;\n         }\n+\n+        /// <summary>\n+        /// Creates an instance of <see cref=\"NuGetFrameworkWrapper\"/> in a new secondary AppDomain.\n+        /// </summary>\n+        /// <remarks>\n+        /// Pulled into a separate non-inlinable method to avoid failing to JIT on platforms without AppDomain support.\n+        /// /// </remarks>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}