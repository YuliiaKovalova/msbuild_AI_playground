{
  "number": 10218,
  "title": "Move LockCheck to Utilities",
  "body": "Fixes #10001 \r\n\r\n### Context\r\nGetting message about a file being locked can be useful for non-internal task authors.\r\n\r\n### Changes Made\r\nMoved the class, set to public, edited resources.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nI moved it into non-shared Utilities folder next to Task.cs with which LockCheck is expected to be used.",
  "state": "MERGED",
  "createdAt": "2024-06-10T14:14:48Z",
  "updatedAt": "2024-06-14T07:47:36Z",
  "closedAt": "2024-06-14T07:47:36Z",
  "mergedAt": "2024-06-14T07:47:36Z",
  "additions": 436,
  "deletions": 426,
  "changedFiles": 40,
  "headRefName": "dev/janpro-expose-LockCheck-to-task-authors",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fa1b7b2abb4bd15d2450dee7bd17e4b22d9f6360",
          "message": "move LockCheck to Utilities and make it public\nupdate resources",
          "committedDate": "2024-06-10T13:31:41Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c42b2d9ddd366d7766827464ed908f4a13bb4a75",
          "message": "move LockCheck to non-Shared utils, update resources",
          "committedDate": "2024-06-10T14:05:14Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cad8a807da3948b8a4ecb0c2febc6c0838d39603",
          "message": "add doc comments",
          "committedDate": "2024-06-10T15:56:02Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95c9d546580c8b602ede39e65c9880479b9853c9",
          "message": "refactor windows condition inside LockCheck",
          "committedDate": "2024-06-11T09:22:23Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2992a88fc6e78e4867de88dfb2401e848d67b33b",
          "message": "use LockCheck in other Tasks which delete/modify files",
          "committedDate": "2024-06-12T08:55:18Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce5deff616d2e34ce4d310d1a06b9e4f39ddc6a9",
          "message": "improve method summary\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-12T10:49:20Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janpro@janpro.dev"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Since it is public now, all of the public classes, fields, properties, and members need XML doc comments describing why and how to use them. Can you add those?",
              "createdAt": "2024-06-10T14:23:42Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -12,10 +12,10 @@\n \n #nullable disable\n \n-namespace Microsoft.Build.Tasks\n+namespace Microsoft.Build.Utilities\n {\n     [SupportedOSPlatform(\"windows\")]\n-    internal class LockCheck\n+    public class LockCheck",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Having the whole class only supported on Windows pushes the responsibility onto callers to have a calling pattern like:\r\n\r\n1. [do some file operation that fails]\r\n2. Check if on Windows and if so call `LockCheck`\r\n3. Accumulate the returned string into an error\r\n4. if not on windows return a generic error\r\n\r\nCould/should we make that easier for the user? Or is that the right level of abstraction to require?",
              "createdAt": "2024-06-10T16:04:11Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -14,8 +14,13 @@\n \n namespace Microsoft.Build.Utilities\n {\n+    /// <summary>\n+    /// This class implements checking what processes are locking a file on Windows.\n+    /// It uses the Restart Manager API to do this.\n+    /// Use the method <see cref=\"GetLockedFileMessage\"/> to get a message to inform the user which processes have a lock on a given file.\n+    /// </summary>\n     [SupportedOSPlatform(\"windows\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The windows check makes more sense in the LockCheck class imo, so I refactored that. \r\nI would characterize it like this now:\r\n1. [file op fails]\r\n2. try getting a part of message `m` by calling LockCheck to get what is locking the file if applicable (it can be nothing or not supported or not windows -> string.Empty)\r\n3. accumulate `m` to error\r\n(this is the same functionality as before) lmk if it's better/enough or whether I should think harder about refactoring",
              "createdAt": "2024-06-11T09:24:12Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -14,8 +14,13 @@\n \n namespace Microsoft.Build.Utilities\n {\n+    /// <summary>\n+    /// This class implements checking what processes are locking a file on Windows.\n+    /// It uses the Restart Manager API to do this.\n+    /// Use the method <see cref=\"GetLockedFileMessage\"/> to get a message to inform the user which processes have a lock on a given file.\n+    /// </summary>\n     [SupportedOSPlatform(\"windows\")]",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "can't this logic be a part of GetLockedFileMessage? ",
              "createdAt": "2024-06-11T12:32:56Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -247,19 +251,31 @@ internal static string GetProcessesLockingFile(string filePath)\n         }\n \n         /// <summary>\n-        /// Try to get a message to inform the user which processes have a lock on a given file.\n+        /// Try to get a message to inform the user which processes have a lock on a given file. On Windows it uses the Restart Manager API.\n         /// </summary>\n-        internal static string GetLockedFileMessage(string file)\n+        /// <param name=\"filePath\">The path of the file to check.</param>\n+        /// <returns>A message to inform the user which processes have a lock on the file on Window if available, string.Empty on other platforms.</returns>\n+        public static string GetLockedFileMessage(string filePath)\n+        {\n+            if (NativeMethodsShared.IsWindows)\n+            {\n+                return GetLockedFileMessageWindows(filePath);\n+            }\n+            return string.Empty;\n+        }\n+\n+        [SupportedOSPlatform(\"windows\")]\n+        private static string GetLockedFileMessageWindows(string filePath)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "> can't this logic be a part of GetLockedFileMessage?\r\n\r\nI split it so that there can be the [SupportedOSPlatform(\"windows\")] annotation for `GetLockedFileMessageWindows` and the public `GetLockedFileMessage` which checks for windows first is extensible in case we wanted to support other platforms. \r\nother motivation for splitting was moving the `if` from the callers to `LockCheck` class but don't make it super-nested.",
              "createdAt": "2024-06-11T15:13:23Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -247,19 +251,31 @@ internal static string GetProcessesLockingFile(string filePath)\n         }\n \n         /// <summary>\n-        /// Try to get a message to inform the user which processes have a lock on a given file.\n+        /// Try to get a message to inform the user which processes have a lock on a given file. On Windows it uses the Restart Manager API.\n         /// </summary>\n-        internal static string GetLockedFileMessage(string file)\n+        /// <param name=\"filePath\">The path of the file to check.</param>\n+        /// <returns>A message to inform the user which processes have a lock on the file on Window if available, string.Empty on other platforms.</returns>\n+        public static string GetLockedFileMessage(string filePath)\n+        {\n+            if (NativeMethodsShared.IsWindows)\n+            {\n+                return GetLockedFileMessageWindows(filePath);\n+            }\n+            return string.Empty;\n+        }\n+\n+        [SupportedOSPlatform(\"windows\")]\n+        private static string GetLockedFileMessageWindows(string filePath)",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I am thinking that this construction might be useful in other existing Tasks.\r\nJan, could you please spend up to 30 mins checking the tasks where we attempt to write something to files and add it to the catch statement/wrap it with it?",
              "createdAt": "2024-06-11T12:38:11Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -619,11 +619,7 @@ private bool WriteManifest()\n             }\n             catch (Exception ex)\n             {\n-                string lockedFileMessage = string.Empty;\n-                if (NativeMethodsShared.IsWindows)\n-                {\n-                    lockedFileMessage = LockCheck.GetLockedFileMessage(OutputManifest.ItemSpec);\n-                }\n+                string lockedFileMessage = LockCheck.GetLockedFileMessage(OutputManifest.ItemSpec);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "\ud83d\udc4dadded a commit for that, someone should review, that was a nontrivial change to the PR",
              "createdAt": "2024-06-12T08:59:45Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -619,11 +619,7 @@ private bool WriteManifest()\n             }\n             catch (Exception ex)\n             {\n-                string lockedFileMessage = string.Empty;\n-                if (NativeMethodsShared.IsWindows)\n-                {\n-                    lockedFileMessage = LockCheck.GetLockedFileMessage(OutputManifest.ItemSpec);\n-                }\n+                string lockedFileMessage = LockCheck.GetLockedFileMessage(OutputManifest.ItemSpec);",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <returns>A message to inform the user which processes have a lock on the file if known, <see cref=\"string.Empty\"/> otherwise. Always returns <see cref=\"string.Empty\"/> on operating systems other than Windows.</returns>\r\n```",
              "createdAt": "2024-06-11T16:18:09Z",
              "path": "src/Utilities/LockCheck.cs",
              "diffHunk": "@@ -247,19 +251,31 @@ internal static string GetProcessesLockingFile(string filePath)\n         }\n \n         /// <summary>\n-        /// Try to get a message to inform the user which processes have a lock on a given file.\n+        /// Try to get a message to inform the user which processes have a lock on a given file. On Windows it uses the Restart Manager API.\n         /// </summary>\n-        internal static string GetLockedFileMessage(string file)\n+        /// <param name=\"filePath\">The path of the file to check.</param>\n+        /// <returns>A message to inform the user which processes have a lock on the file on Window if available, string.Empty on other platforms.</returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}