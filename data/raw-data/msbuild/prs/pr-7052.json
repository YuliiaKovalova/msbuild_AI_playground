{
  "number": 7052,
  "title": "Remove closure allocation in CompositeGlob.IsMatch",
  "body": "### Context\r\n\r\n@Therzok provided some additional feedback on PR #7040 after it was merged. This PR addresses that feedback.\r\n\r\n### Changes Made\r\n\r\n- Avoid allocating a closure object for each call to `CompositeGlob.IsMatch` by adding an overload of `Any` that allows passing state on the stack.\r\n- Other API substitutions for better run time, though these code paths are not used in product code (they would be removed if not public).\r\n\r\n### Testing\r\n\r\nUnit tests.",
  "state": "MERGED",
  "createdAt": "2021-11-19T03:49:40Z",
  "updatedAt": "2021-11-23T00:06:55Z",
  "closedAt": "2021-11-22T22:32:37Z",
  "mergedAt": "2021-11-22T22:32:37Z",
  "additions": 45,
  "deletions": 3,
  "changedFiles": 3,
  "headRefName": "dev/drnoakes/globbing-perf-2",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e320d2615956a428de4c68830292e9b2366e4bc3",
          "message": "Remove redundant type check\n\nThe ToImmutableArray method already performs this check.",
          "committedDate": "2021-11-19T03:41:54Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df55d8cadee0e5106507ac378b281e12257991e3",
          "message": "Replace ToImmutableArray with ImmutableArray.Create\n\nWhen the type is statically known to be an array, using ImmutableArray.Create avoids the type checking performed in the ToImmutableArray extension method.",
          "committedDate": "2021-11-19T03:46:02Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b623b1e8b601bfd1b196fcb0610c1f702139d5df",
          "message": "Avoid lambda allocation on each call\n\nThis commit introduces an overload of the Any extension method that allows passing additional state (an argument) on the stack. This means the lambda can be static, meaning no captured state, and no closure object allocation on every call.",
          "committedDate": "2021-11-19T03:47:23Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Woooo, perfect, thanks!",
        "createdAt": "2021-11-19T12:49:36Z",
        "author": {
          "login": "Therzok"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}