{
  "number": 6220,
  "title": "Toolset configuration net5.0",
  "body": "### Context\r\nThis change will give NET5.0 MSBuild the option to read toolset information from the configuration file ONLY if ToolsetDefinitionLocation is set to 'ConfigurationFile'. Otherwise everything should work the exact same way as before.\r\n\r\nThis change is beneficial as it allows net5.0 MSBuild to evaluate projects that only net framework MsBuild could before. Since ConfigurationFile wasn't an option in net5.0 before (Due to System.Configuration being only net472), toolsets available to net5.0 MsBuild was minimal, but with this change a net5.0 MsBuild user could specify ConfigurationFile as the ToolsetDefinitionLocation when creating a ProjectCollection and more toolsets would be available depending on the MsBuild.exe provided. \r\n\r\n### Changes Made\r\nUpdated all the System.Configuration references to [System.Configuration.ConfigurationManager](https://www.nuget.org/packages/System.Configuration.ConfigurationManager/) (Which supports netstandard2.0). This change allows net5.0 to read toolset information from configuration file, but the default remains the same.\r\n\r\n### Testing\r\nTested locally to make sure the toolset information remains the same for cases other than when ToolsetDefinitionLocation is set to ConfigurationFile. CI should be good enough to ensure everything else still works as before.\r\n\r\nExisting unit tests should be good enough to verify that this change does not affect net472 at all. Freed up a lot of unit tests under FEATURE_SYSTEM_CONFIGURATION which can be used to validate that net5.0 behavior without configuration setting works the same as before. Also added in a couple more tests to ensure setting ToolsetDefinitionLocation to ConfigurationFile actually grabs more configurations comparing to default.",
  "state": "MERGED",
  "createdAt": "2021-03-03T21:24:33Z",
  "updatedAt": "2022-11-12T04:46:59Z",
  "closedAt": "2021-03-11T23:56:00Z",
  "mergedAt": "2021-03-11T23:56:00Z",
  "additions": 177,
  "deletions": 94,
  "changedFiles": 18,
  "headRefName": "toolsetConfigurationNet5",
  "isDraft": false,
  "author": {
    "login": "minglunli"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d3e85167d3197b4b91679521ecbeb87fdaa280f4",
          "message": "ToolsetConfigurationReader compilable with net5.0",
          "committedDate": "2021-02-05T20:57:11Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d9a316d735ffcf8814821614a6653f9c550b2775",
          "message": "Allow some unit tests to run in net5.0",
          "committedDate": "2021-02-05T21:53:12Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "046e0a6dc00cb45f61ceab2011058d83d256ae51",
          "message": "Remove System.Configuration Reference completed",
          "committedDate": "2021-02-08T23:56:45Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a541e4f353529db0425ebd40d149fd4e6870b7a",
          "message": "Allow IntrinsicFunctions to run in all conditions",
          "committedDate": "2021-02-09T21:02:04Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0d0e7e08220ca3c41c8742e4ea53ab5db6c7539",
          "message": "Open up Registry as well",
          "committedDate": "2021-02-17T21:11:19Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f3d2d228341fd3ff64c0e1fab507863083f35a0e",
          "message": "Removing all FEATURE_SYSTEM_CONFIGURATION that aren't needed",
          "committedDate": "2021-03-02T22:17:26Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82a23fcd2beca928e4b80b3acde8ad0cbeb24492",
          "message": "Adding unit tests",
          "committedDate": "2021-03-03T20:46:39Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7570c02963ccdda85c537c19638b60360f92fa6d",
          "message": "ToolsetConfigurationReader compilable with net5.0",
          "committedDate": "2021-03-03T21:00:14Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab9d9ed43e705f8f049319765298937f544c4170",
          "message": "Allow some unit tests to run in net5.0",
          "committedDate": "2021-03-03T21:02:28Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ec091ffcecf5af1e5856f71e02e2c167940dfc9",
          "message": "Remove System.Configuration Reference completed",
          "committedDate": "2021-03-03T21:02:30Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b9d7dbafa85ee4cb378ae74978417e836bcd7f72",
          "message": "Allow IntrinsicFunctions to run in all conditions",
          "committedDate": "2021-03-03T21:02:30Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2e10bd759ecdb3887914d70ad95a75b213a494d",
          "message": "Open up Registry as well",
          "committedDate": "2021-03-03T21:02:30Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b1343b8b3c992652a3d36ad3d31d02ec7769962",
          "message": "Removing all FEATURE_SYSTEM_CONFIGURATION that aren't needed",
          "committedDate": "2021-03-03T21:02:30Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1616a368b4b6bbac6c4795405860be70205828f6",
          "message": "Adding unit tests",
          "committedDate": "2021-03-03T21:02:30Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd7a68f87ee6cdb2fafeebd1817ad0ac139261b2",
          "message": "Merge branch 'toolsetConfigurationNet5' of github.com:minglunli/msbuild into toolsetConfigurationNet5",
          "committedDate": "2021-03-03T21:03:53Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da88865f5b1dc7d949150a4957dfeabafa7df609",
          "message": "Fixing whitespaces",
          "committedDate": "2021-03-03T21:15:37Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dbc1236d01b99a438b511606bcb9a98b51bd5133",
          "message": "Fixing comment and more whitespace",
          "committedDate": "2021-03-03T21:17:39Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e4ab7240ee26720dd79bfe3525d7483e3f30cc7",
          "message": "Unit test + package version update",
          "committedDate": "2021-03-04T00:49:45Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5d1939880c8137d62b74cc2389e6e8a37bea8d3",
          "message": "Addressing PR comments",
          "committedDate": "2021-03-08T18:18:51Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6989bc1649778912860f13cd58be46323689efbe",
          "message": "Fix BOM change",
          "committedDate": "2021-03-09T00:06:08Z",
          "author": {
            "name": "Will Li",
            "email": "mingl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=6220) <br/>All CLA requirements met.",
        "createdAt": "2021-03-03T21:24:55Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Should this test class get added all the time now? https://github.com/dotnet/msbuild/blob/41441946c883903cef0334ce872e9ce10918e2bf/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj#L57",
        "createdAt": "2021-03-04T02:39:48Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Should this test class get added all the time now?\r\n> \r\n> https://github.com/dotnet/msbuild/blob/41441946c883903cef0334ce872e9ce10918e2bf/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj#L57\r\n\r\nYes I think it's fine to add it all the time now. I removed the FEATURE_CONFIGURATION_FILE flags for ToolsetConfigurationReader_Tests and ImportFromExtensionPath_Tests and they both require this file and they both seemed to pass. I believe those are the only 2 occurrences when the file is being used. ",
        "createdAt": "2021-03-04T18:12:43Z",
        "author": {
          "login": "minglunli"
        }
      },
      {
        "body": "> Should this test class get added all the time now?\r\n> \r\n> https://github.com/dotnet/msbuild/blob/41441946c883903cef0334ce872e9ce10918e2bf/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj#L57\r\n\r\nAlso just a heads up, I think you might have looked at the wrong PR \ud83d\ude04 The line you quoted is from another change",
        "createdAt": "2021-03-04T19:01:24Z",
        "author": {
          "login": "minglunli"
        }
      },
      {
        "body": "Note that a DDRIT test failed in the VS PR, but it doesn't explicitly look like us\r\n```\r\nTest method Microsoft.VisualStudio.Web.DDRIT.CSharpWapTest.CSharpWebApplicationTests threw exception:\r\nMicrosoft.Test.Apex.VisualStudio.Debugger.DebuggerException: Unable to stop debugging as the debugger is in 'Design' mode.\r\nAssert.Fail failed. (3:34.844) [Visual Studio Host (7200):BreakPointVerifier] Verification failed: Breakpoint in file 'file:///C:/Test/Results/TestResults/Deploy_TestUser 2021-03-07 19_20_23/Out/TestSolutions/CSharpWAPWebForms/CSharpWAPWebForms/WebForm.aspx.cs', line 13 was hit successfully within 00:02:00 seconds.\r\n\r\n\r\nStack trace\r\n \r\nServer stack trace: \r\n   at Microsoft.Test.Apex.VisualStudio.Debugger.DebuggerService.Stop(TimeSpan timeout) in Q:\\cmd\\n\\src\\omni\\Apex\\HostIntegration\\VisualStudio.OM\\Debugger\\DebuggerService.cs:line 853\r\n   at Microsoft.Test.Apex.VisualStudio.Debugger.DebuggerService.Stop() in Q:\\cmd\\n\\src\\omni\\Apex\\HostIntegration\\VisualStudio.OM\\Debugger\\DebuggerService.cs:line 840\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(IntPtr md, Object[] args, Object server, Object[]& outArgs)\r\n   at System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(IMessage msg)\r\nException rethrown at [0]: \r\n   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)\r\n   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)\r\n   at Microsoft.Test.Apex.VisualStudio.Debugger.DebuggerService.Stop()\r\n   at Microsoft.VisualStudio.Web.DDRIT.CSharpWapTest.CSharpWebApplicationTests() in Q:\\cmd\\w\\src\\Tests\\Microsoft.VisualStudio.Web.DDRIT\\CSharpWapTest.cs:line 163\r\n\r\nTestCleanup Stack Trace\r\n   at Microsoft.Test.Apex.DelayedAssertionVerifierSink.RerouteAssertion(String message) in Q:\\cmd\\y\\src\\omni\\Apex\\Framework\\Verifier\\DelayedAssertionVerifierSink.cs:line 423\r\n   at Microsoft.Test.Apex.DelayedAssertionVerifierSink.DoFinalAssertion() in Q:\\cmd\\y\\src\\omni\\Apex\\Framework\\Verifier\\DelayedAssertionVerifierSink.cs:line 240\r\n   at Microsoft.Test.Apex.ApexTest.TestCleanup() in Q:\\cmd\\4\\src\\omni\\Apex\\MsTestIntegration\\ApexTest.cs:line 551\r\n   at Microsoft.Test.Apex.ExternalProcessHostTest`2.TestCleanup() in Q:\\cmd\\4\\src\\omni\\Apex\\MsTestIntegration\\ExternalProcessHostTest.cs:line 136\r\n   at Microsoft.Test.Apex.VisualStudio.VisualStudioHostTest.TestCleanup() in Q:\\cmd\\4\\src\\omni\\Apex\\MsTestIntegration\\VisualStudioHostTest.cs:line 232\r\n```",
        "createdAt": "2021-03-08T16:18:52Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we own this? Also thinking we should try running this through RPS.",
              "createdAt": "2021-03-05T20:04:35Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <PackageReference Update=\"SourceLink.Create.CommandLine\" Version=\"2.1.2\" />\n     <PackageReference Update=\"System.CodeDom\" Version=\"4.4.0\" />\n     <PackageReference Update=\"System.Collections.Immutable\" Version=\"5.0.0\" />\n+    <PackageReference Update=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry this is my first time making a PR in MSBuild so I'm not familiar with the process. Mihai created an exp/* branch for me [here](https://github.com/dotnet/msbuild/tree/exp/minglunli/toolsetConfigurationNet5) and it triggered an VS insertion and that [passed](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=973302). Is that RPS or do we need to run something else for it?\r\n\r\nAnd I do think we own the package as shown [here](https://www.nuget.org/packages/System.Configuration.ConfigurationManager/4.7.0). The package is owned by Microsoft and dotnetframework.",
              "createdAt": "2021-03-05T20:22:40Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <PackageReference Update=\"SourceLink.Create.CommandLine\" Version=\"2.1.2\" />\n     <PackageReference Update=\"System.CodeDom\" Version=\"4.4.0\" />\n     <PackageReference Update=\"System.Collections.Immutable\" Version=\"5.0.0\" />\n+    <PackageReference Update=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />",
              "author": {
                "login": "minglunli"
              }
            },
            {
              "body": "Great! That is what I was thinking of with RPS. It failed symbol check, but I'm assuming that was innocuous.\r\n\r\nI should have clarified that I was wondering if MSBuild owns S.C.CM. I hit a problem at one point when MSBuild updated a package that Roslyn owned, and we had mismatching versions with them. I think that sort of problem would have been caught by RPS, so I think this is good? But I don't feel very confident about that.",
              "createdAt": "2021-03-05T20:28:22Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <PackageReference Update=\"SourceLink.Create.CommandLine\" Version=\"2.1.2\" />\n     <PackageReference Update=\"System.CodeDom\" Version=\"4.4.0\" />\n     <PackageReference Update=\"System.Collections.Immutable\" Version=\"5.0.0\" />\n+    <PackageReference Update=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Following up to our convo this morning: I talked to @cdmihai and he's not sure about who owns this package exactly either, but believes it should be fine since it is not referenced in VS's config.corext.",
              "createdAt": "2021-03-08T18:51:57Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <PackageReference Update=\"SourceLink.Create.CommandLine\" Version=\"2.1.2\" />\n     <PackageReference Update=\"System.CodeDom\" Version=\"4.4.0\" />\n     <PackageReference Update=\"System.Collections.Immutable\" Version=\"5.0.0\" />\n+    <PackageReference Update=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />",
              "author": {
                "login": "minglunli"
              }
            },
            {
              "body": "I found AssemblyVersions.tt, and it isn't referenced there either.",
              "createdAt": "2021-03-08T19:28:16Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <PackageReference Update=\"SourceLink.Create.CommandLine\" Version=\"2.1.2\" />\n     <PackageReference Update=\"System.CodeDom\" Version=\"4.4.0\" />\n     <PackageReference Update=\"System.Collections.Immutable\" Version=\"5.0.0\" />\n+    <PackageReference Update=\"System.Configuration.ConfigurationManager\" Version=\"4.7.0\" />",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be possible to extract this to a new method `GetProjectCollection()` to avoid repeating this code in multiple places?",
              "createdAt": "2021-03-06T21:05:39Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -52,7 +47,11 @@ public void ImportFromExtensionsPathNotFound()\n                 extnDir1 = GetNewExtensionsPathAndCreateFile(\"extensions1\", Path.Combine(\"foo\", \"extn.proj\"), GetExtensionTargetsFileContent1());\n                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory(\"main.proj\", GetMainTargetFileContent());\n \n+#if FEATURE_SYSTEM_CONFIGURATION\n                 var projColln = new ProjectCollection();\n+#else\n+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);\n+#endif",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Oops forgot to reply to this one but this is a good call I made this change as well \ud83d\ude03 ",
              "createdAt": "2021-03-09T00:10:42Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -52,7 +47,11 @@ public void ImportFromExtensionsPathNotFound()\n                 extnDir1 = GetNewExtensionsPathAndCreateFile(\"extensions1\", Path.Combine(\"foo\", \"extn.proj\"), GetExtensionTargetsFileContent1());\n                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory(\"main.proj\", GetMainTargetFileContent());\n \n+#if FEATURE_SYSTEM_CONFIGURATION\n                 var projColln = new ProjectCollection();\n+#else\n+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);\n+#endif",
              "author": {
                "login": "minglunli"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should add the argument name before `null` so we know what parameter it is.",
              "createdAt": "2021-03-06T21:06:19Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -690,7 +710,11 @@ public void FallbackImportWithIndirectReference()\n                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);\n                 var reader = GetStandardConfigurationReader();\n \n+#if FEATURE_SYSTEM_CONFIGURATION\n                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { [\"FallbackExpandDir1\"] = extnDir1 });\n+#else\n+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { [\"FallbackExpandDir1\"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "That's true, I added the argument name in the GetProjectCollection function",
              "createdAt": "2021-03-08T18:20:51Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -690,7 +710,11 @@ public void FallbackImportWithIndirectReference()\n                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);\n                 var reader = GetStandardConfigurationReader();\n \n+#if FEATURE_SYSTEM_CONFIGURATION\n                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { [\"FallbackExpandDir1\"] = extnDir1 });\n+#else\n+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { [\"FallbackExpandDir1\"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);",
              "author": {
                "login": "minglunli"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Have you looked into using Shouldly? Some other tests use Shouldly, if you just search for it for examples. It's better than the standard asserts.",
              "createdAt": "2021-03-06T21:07:24Z",
              "path": "src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+#if !FEATURE_SYSTEM_CONFIGURATION\n+/*  This test is designed especially to test Configuration parsing in net5.0\n+ *  which means it WON'T work in net472 and thus we don't run it in net472 */\n+\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Execution;\n+\n+using Xunit;\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.UnitTests.Evaluation\n+{\n+    /// <summary>\n+    /// Unit tests for MSBuild Net5.0 Configuration Parsing\n+    /// </summary>\n+    public class ToolsetConfigurationNet5Test\n+    {\n+        [Fact]\n+        // The default ToolsetDefintionLocations is None, which results in only the local which results in only the several included\n+        // paths such as SDK path and RoslynTargetPath and nothing else. This behavior is expected and the exact same as before.\n+        public void ToolsetDefinitionLocationsIsDefault()\n+        {\n+            var projectCollection = new ProjectCollection();\n+            IDictionary<string, string> toolsetProperties\n+                = new Dictionary<string, string>();\n+\n+            foreach (Toolset toolset in projectCollection.Toolsets)\n+            {\n+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)\n+                {\n+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;\n+                }\n+            }\n+\n+            Assert.True(toolsetProperties.ContainsKey(\"MSBuildSDKsPath\"));\n+            Assert.True(toolsetProperties.ContainsKey(\"RoslynTargetsPath\"));\n+            Assert.NotEqual(string.Empty, toolsetProperties[\"MSBuildSDKsPath\"]);\n+            Assert.NotEqual(string.Empty, toolsetProperties[\"RoslynTargetsPath\"]);\n+\n+            Assert.False(toolsetProperties.ContainsKey(\"VCTargetsPath\"));\n+            Assert.False(toolsetProperties.ContainsKey(\"MSBuildToolsRoot\"));\n+            Assert.False(toolsetProperties.ContainsKey(\"MSBuildExtensionsPath\"));\n+        }\n+\n+        [Fact]\n+        // With ToolsetDefintionLocations set to ConfigurationFile (Which would only happen in net5.0 if the user decides to set it). \n+        // Most toolsets are available and the MsBuildTools and SDK paths are all in the net5.0 runtime.\n+        public void ToolsetDefinitionLocationsIsConfiguration()\n+        {\n+            var projectCollection = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);\n+            IDictionary<string, string> toolsetProperties\n+                = new Dictionary<string, string>();\n+\n+            foreach (Toolset toolset in projectCollection.Toolsets)\n+            {\n+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)\n+                {\n+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;\n+                }\n+            }\n+\n+            Assert.True(toolsetProperties.ContainsKey(\"MSBuildSDKsPath\"));",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Updated to Shouldly",
              "createdAt": "2021-03-08T18:21:22Z",
              "path": "src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+#if !FEATURE_SYSTEM_CONFIGURATION\n+/*  This test is designed especially to test Configuration parsing in net5.0\n+ *  which means it WON'T work in net472 and thus we don't run it in net472 */\n+\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Execution;\n+\n+using Xunit;\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.UnitTests.Evaluation\n+{\n+    /// <summary>\n+    /// Unit tests for MSBuild Net5.0 Configuration Parsing\n+    /// </summary>\n+    public class ToolsetConfigurationNet5Test\n+    {\n+        [Fact]\n+        // The default ToolsetDefintionLocations is None, which results in only the local which results in only the several included\n+        // paths such as SDK path and RoslynTargetPath and nothing else. This behavior is expected and the exact same as before.\n+        public void ToolsetDefinitionLocationsIsDefault()\n+        {\n+            var projectCollection = new ProjectCollection();\n+            IDictionary<string, string> toolsetProperties\n+                = new Dictionary<string, string>();\n+\n+            foreach (Toolset toolset in projectCollection.Toolsets)\n+            {\n+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)\n+                {\n+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;\n+                }\n+            }\n+\n+            Assert.True(toolsetProperties.ContainsKey(\"MSBuildSDKsPath\"));\n+            Assert.True(toolsetProperties.ContainsKey(\"RoslynTargetsPath\"));\n+            Assert.NotEqual(string.Empty, toolsetProperties[\"MSBuildSDKsPath\"]);\n+            Assert.NotEqual(string.Empty, toolsetProperties[\"RoslynTargetsPath\"]);\n+\n+            Assert.False(toolsetProperties.ContainsKey(\"VCTargetsPath\"));\n+            Assert.False(toolsetProperties.ContainsKey(\"MSBuildToolsRoot\"));\n+            Assert.False(toolsetProperties.ContainsKey(\"MSBuildExtensionsPath\"));\n+        }\n+\n+        [Fact]\n+        // With ToolsetDefintionLocations set to ConfigurationFile (Which would only happen in net5.0 if the user decides to set it). \n+        // Most toolsets are available and the MsBuildTools and SDK paths are all in the net5.0 runtime.\n+        public void ToolsetDefinitionLocationsIsConfiguration()\n+        {\n+            var projectCollection = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);\n+            IDictionary<string, string> toolsetProperties\n+                = new Dictionary<string, string>();\n+\n+            foreach (Toolset toolset in projectCollection.Toolsets)\n+            {\n+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)\n+                {\n+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;\n+                }\n+            }\n+\n+            Assert.True(toolsetProperties.ContainsKey(\"MSBuildSDKsPath\"));",
              "author": {
                "login": "minglunli"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hyper-Nit: Is this a BOM change from a text editor?",
              "createdAt": "2021-03-08T22:22:01Z",
              "path": "src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj",
              "diffHunk": "@@ -1,4 +1,4 @@\n-<Project Sdk=\"Microsoft.NET.Sdk\">\n+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yep seems like it... Though I thought I only opened it in VS so it's odd but it should be fixed now \ud83d\udc4d ",
              "createdAt": "2021-03-09T00:09:49Z",
              "path": "src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj",
              "diffHunk": "@@ -1,4 +1,4 @@\n-<Project Sdk=\"Microsoft.NET.Sdk\">\n+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
              "author": {
                "login": "minglunli"
              }
            }
          ]
        }
      }
    ]
  }
}