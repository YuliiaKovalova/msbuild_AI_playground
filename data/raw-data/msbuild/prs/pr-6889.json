{
  "number": 6889,
  "title": "SetPlatform: Use Platform Instead Of PlatformTarget",
  "body": "Fixes #6887\r\nDiscussion: https://github.com/dotnet/msbuild/discussions/6871\r\n\r\n### Context\r\n`PlatformTarget `was initially passed to managed projects because `PlatformTarget` is passed directly to the compiler, while Platform is passed to the cpp compiler. After a deeper investigation, it turns out we can pass `Platform` and `PlatformTarget` will be defined either in the project file or by the SDK _based on Platform_.\r\n\r\n### Changes Made\r\nPass and undefine Platform instead of PlatformTarget.\r\n\r\nUsage of PlatformTarget has been removed altogether, in favor of Platform.\r\n\r\n### Testing\r\nTested on all projects here: https://github.com/BenVillalobos/setplatform-repro\r\nAlso confirmed by jhennessey that this solves the issue.\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-09-24T22:17:52Z",
  "updatedAt": "2021-09-27T22:28:02Z",
  "closedAt": "2021-09-27T22:28:00Z",
  "mergedAt": "2021-09-27T22:28:00Z",
  "additions": 4,
  "deletions": 15,
  "changedFiles": 1,
  "headRefName": "setplatform-passplatform",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "701f0fc300eadd978ccec02e895e2425d1e620eb",
          "message": "Pass and undefine Platform property\n\nInstead of a mix between PlatformTarget and Platforms.\nThis fixes an issue with legacy projects that define values\nfor OutputPath and PlatformTarget based on the Platform|Configuration.\nIt also fixes an issue where a user can start a command line build by\npassing /p:Platform=foo, and that global property would carry to ALL\np2p hops. This can lead to weird issues such as the Platform being x86\nwhen a p2p hop might pass PlatformTarget=AnyCPU",
          "committedDate": "2021-09-24T19:02:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f353e23548e71ae14164df2bad7dcd2e1254b6a",
          "message": "Remove usage of PlatformTarget altogether",
          "committedDate": "2021-09-24T21:19:03Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@jhennessey We're trying to get this merged in ASAP. Any way you could try this diff soon and see if this still builds your big ol' project? ",
        "createdAt": "2021-09-27T15:44:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "[Docs on how to deploy locally](https://github.com/dotnet/msbuild/blob/main/documentation/Deploy-MSBuild.md) if you need it",
        "createdAt": "2021-09-27T16:20:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> We're trying to get this merged in ASAP. Any way you could try this diff soon and see if this still builds your big ol' project?\r\n\r\n@BenVillalobos  - It works! :).\r\n\r\nI'll mention that I've been working on a fix locally which I think should be addressed with P2P builds. The issue is that the following combination will fail (assume `Platform=x64` was passed on the command line):\r\n\r\nLibraryA [x64] -> LibraryB [AnyCPU] -> LibraryC [x64]\r\n\r\nIn this case, you'll end up getting the \"...BaseOutputPath/OutputPath property is not set...\" error for LibraryC. Should I file a separate bug for this?",
        "createdAt": "2021-09-27T20:59:17Z",
        "author": {
          "login": "jhennessey"
        }
      },
      {
        "body": "> It works! :).\r\n\r\n\ud83e\udd73\r\n\r\n> LibraryA [x64] -> LibraryB [AnyCPU] -> LibraryC [x64]\r\nIn this case, you'll end up getting the \"...BaseOutputPath/OutputPath property is not set...\" error for LibraryC. Should I file a separate bug for this?\r\n\r\nYes please! To be clear, the issue you're running into is that B doesn't know what came before it, so it logs a warning and undefines Platform for C, then tells C to build on its own, when ideally B should \"just know\" and tell C to build as x64? I don't know what your project file looks like, but most legacy projects define a default value for Platform when it's not defined, and that value is AnyCPU. Would changing that value for your C project work? (might be best to file the issue and continue the discussion there). The expected workaround for now is to add `SetPlatform` metadata on your project reference. If you assign SetPlatform metadata, the logic to \"figure it out\" is skipped over. \r\n\r\n It's currently a known issue, and one that's difficult to fix without implementing some sort of \"walk\" through every P2P to figure this out ahead of time. It was discussed and put to the side until setplatform version 1 could be merged. \r\n\r\n",
        "createdAt": "2021-09-27T21:17:01Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> LibraryA [x64] -> LibraryB [AnyCPU] -> LibraryC [x64]\r\n\r\nI would argue that the LibraryB -> LibraryC P2P should not exist. LibraryB cannot be an AnyCPU library when it depends on an x64 binary. In some cases msbuild or csc will emit warnings about a reference like this. When you _really_ want to do it anyway, as @BenVillalobos says, I would expect you to add `SetPlatform` metadata on the `ProjectReference` item directly to make msbuild allow you to do this (without a warning).",
        "createdAt": "2021-09-27T22:12:14Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}