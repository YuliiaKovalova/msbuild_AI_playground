{
  "number": 10491,
  "title": "Rename Analyzer -> Check",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/10318\r\n\r\nOn places where we had `BuildAnalyzer` it was changed to `Check` to not confuse with infrastructure classes `BuildCheck`.\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-06T20:31:21Z",
  "updatedAt": "2024-10-22T12:07:14Z",
  "closedAt": "2024-08-08T16:21:41Z",
  "mergedAt": "2024-08-08T16:21:41Z",
  "additions": 2005,
  "deletions": 1747,
  "changedFiles": 132,
  "headRefName": "10318",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dad004b318070e7113548bca378bcd7c458cc155",
          "message": "Acquisition module rename",
          "committedDate": "2024-08-05T13:07:37Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae93f8978c8d28d57857c47bcea4df6ab69a7d12",
          "message": "API rename",
          "committedDate": "2024-08-05T13:24:50Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e3d2f8222f7c6e648e241402c576f43143f129b",
          "message": "OM rename",
          "committedDate": "2024-08-05T13:30:23Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ef7bc6cb0a23725acf0d2780d94a945fba512870",
          "message": "Infrastructure renaming",
          "committedDate": "2024-08-05T14:49:45Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "048ab55e7aef9b7493dd1501a622fa6bb9703eb7",
          "message": "Main code missed renames",
          "committedDate": "2024-08-05T14:59:13Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82754fb446c6fd173d3db18472ca7815b4c3df0e",
          "message": "Testing rename",
          "committedDate": "2024-08-05T15:28:26Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6fa73a77c56701bbef3aa63bb86d1ddef95c80b3",
          "message": "Test check rename",
          "committedDate": "2024-08-06T09:52:36Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d82517d38bf03e0b78c724aead079cbff795a638",
          "message": "Comments and readMe's rename",
          "committedDate": "2024-08-06T13:01:39Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ba4ef1956414935e762775ec2ae0f6ed8bac05c3",
          "message": "Rename tests and make sure they work",
          "committedDate": "2024-08-06T16:34:01Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bdb079c0bb4bdaa7fe0d531a45e0da3a20a8f41",
          "message": "template package rename + comments rename",
          "committedDate": "2024-08-06T20:18:52Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "34b62f797a4b1cecaa8c64403e87240f3de8f81d",
          "message": "Merge main",
          "committedDate": "2024-08-06T20:40:12Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fead38af977975b0ecc32c54a1dba04a78375932",
          "message": "Fix merge renames",
          "committedDate": "2024-08-06T21:12:12Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fdc241a3ff5d03dd032c6c824ae409306e9e6586",
          "message": "Fixed test",
          "committedDate": "2024-08-07T08:46:13Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "940bab73bd0f6800158b8065e3774ac2dd15ad53",
          "message": "Resolve merge conflicts",
          "committedDate": "2024-08-07T09:33:25Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33a26b7c08b444fdea2a212dd4c367fdde5ee157",
          "message": "Fix build after merge",
          "committedDate": "2024-08-07T10:04:06Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a503bc3ee3d1c97638f5f17daac2388323b56c4",
          "message": "Fix merge conflicts",
          "committedDate": "2024-08-08T07:58:58Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c4317673e95073e4c148f677c6144a05d6ccb66d",
          "message": "Fixed naming from leftover from merge",
          "committedDate": "2024-08-08T08:22:31Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fddf8ccc08065290bcf4d274b9e071c34266418",
          "message": "Rename BuildExecutionCheck to Check",
          "committedDate": "2024-08-08T08:31:10Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2e80bd58cf8618cfa869f3602ba14d20b2df4d37",
          "message": "Rename BuildExperimentalCheck -> Check",
          "committedDate": "2024-08-08T12:56:54Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "477255b01ad55aa0e82a840eed5ae1020dba9424",
          "message": "Merge branch 'main' into 10318",
          "committedDate": "2024-08-08T13:19:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf03bdd62781698b0b0a64dc315e2b0c6c643c0d",
          "message": "fix issue after merge",
          "committedDate": "2024-08-08T13:34:50Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6776163a82b7143a793ab664e1ab07683eb3f026",
          "message": "Solve issues",
          "committedDate": "2024-08-08T14:04:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62e373bd57f0a1fe144d7588a832cc4938474613",
          "message": "Changed the last of the ExecutionCheck variables",
          "committedDate": "2024-08-08T15:00:42Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3ccf0b6b802fe5ab5cb134402aa44e9273922ed",
          "message": "Fix white spaces",
          "committedDate": "2024-08-08T15:04:29Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "600c4a6e3f16cb3446bd33c27d6fcce6dba70141",
          "message": "Fix suppressions",
          "committedDate": "2024-08-08T15:46:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[celebrate]     Yuliia Kovalova reacted to your message:\r\n________________________________\r\nFrom: Mariana Dematte ***@***.***>\r\nSent: Thursday, August 8, 2024 4:22:03 PM\r\nTo: dotnet/msbuild ***@***.***>\r\nCc: Yuliia Kovalova ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [dotnet/msbuild] Rename Analyzer -> Check (PR #10491)\r\n\r\n\r\nMerged #10491<https://github.com/dotnet/msbuild/pull/10491> into main.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/msbuild/pull/10491#event-13809467459>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AWYM53XXCEKGIEZCI4UTBFLZQOLKXAVCNFSM6AAAAABMDBYY2SVHI2DSMVQWIX3LMV45UABCJFZXG5LFIV3GK3TUJZXXI2LGNFRWC5DJN5XDWMJTHAYDSNBWG42DKOI>.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n",
        "createdAt": "2024-08-08T16:23:13Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n* Checks factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\r\n```",
              "createdAt": "2024-08-07T12:56:18Z",
              "path": "documentation/specs/BuildCheck/BuildCheck-Architecture.md",
              "diffHunk": "@@ -89,72 +89,72 @@ flowchart TD\n \n ## Handling the Distributed Model\n \n-We want to get some benefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achieve all goals from just scheduler node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+We want to get some benefits (mostly inbox checks agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achieve all goals from just scheduler node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n \n How we'll internally handle the distributed model:\n * Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild dependency injection container - `IBuildComponentHost`). This applies to a scheduler node with inproc worker node as well.\n * Scheduler node will have an MSBuild `ILogger` registered that will enable communicating information from worker nodes BuildCheck module to the scheduler node BuildCheck module - namely:\n-    * Acquisition module from worker node will be able to communicated to the scheduler node that it encountered `PackageReference` for particular analyzer and that it should be loaded and instantiated in the main node.\n+    * Acquisition module from worker node will be able to communicated to the scheduler node that it encountered `PackageReference` for particular check and that it should be loaded and instantiated in the main node.\n     * Tracing module will be able to send perf stats from current worker node and aggregate all of those together in the main node.\n-    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in scheduler node). The way to do that can be via being present in all worker nodes, sending a specific type of 'in progress result' BuildEventArgs and aggreggating those intermediary results in the single instance running in the main node.\n-* Apart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n-* The custom analyzers will be hosted only in the main node - and hence the distributed model will be fully hidden from them. This might be a subject for revision in future versions.\n+    * Theoretical execution-data-only sourcing inbox check will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for check that needs presence only in scheduler node). The way to do that can be via being present in all worker nodes, sending a specific type of 'in progress result' BuildEventArgs and aggreggating those intermediary results in the single instance running in the main node.\n+* Apart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox checks that should live in nodes; send the checks reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular checks).\n+* The custom checks will be hosted only in the main node - and hence the distributed model will be fully hidden from them. This might be a subject for revision in future versions.\n * Communication from main to worker node between BuildCheck infra modules is not planned (this might be revisited - even for the V1).\n \n-## Analyzers Lifecycle\n+## Check Lifecycle\n \n Planned model:\n-* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n-    * For inbox analyzers - this happens on startup.\n-    * For custom analyzers - this happens on connecting `ILogger` instance in scheduler node receives acquistion event (`BuildCheckAcquisitionEventArgs`). This event is being sent by worker node as soon as it hits a special marker (a magic property function call) during early evaluation. Loading is not processed by worker node as currently we want custom analyzers only in the main node (as they will be only given data proxied from BuildEventArgs).\n-    The `BuildCheckAcquisitionEventArgs` should be sent prior `ProjectEvaluationStartedEventArgs` (buffering will need to take place), or main node will need to replay some initial data after custom analyzer is registered.\n+* Check factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n* configuring BuildCheck levels when checking from binlog - beyond the collected editorconfigs.\r\n```\r\n\r\nAnalysis - maps better to BuildCheck\r\nIndividual analyzers are the 'checks'",
              "createdAt": "2024-08-07T13:04:42Z",
              "path": "documentation/specs/BuildCheck/BuildCheck.md",
              "diffHunk": "@@ -148,16 +148,16 @@ For the `.editorconfig` file configuration, following will apply:\n * `.editorconfig` files packaged within nuget packages within local nuget cache won\u2019t be considered.\n \n ### Non-Goals (but might be considered):\n-* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* bulk configuration of multiple rules - based on checks/rules prefixes or/and categories.\n * attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n-* configuring analysis levels when analyzing from binlog - beyond the collected editorconfigs.\n-* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+* configuring check levels when checking from binlog - beyond the collected editorconfigs.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Alternatively 'checking'",
              "createdAt": "2024-08-07T13:07:10Z",
              "path": "documentation/specs/BuildCheck/BuildCheck.md",
              "diffHunk": "@@ -148,16 +148,16 @@ For the `.editorconfig` file configuration, following will apply:\n * `.editorconfig` files packaged within nuget packages within local nuget cache won\u2019t be considered.\n \n ### Non-Goals (but might be considered):\n-* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* bulk configuration of multiple rules - based on checks/rules prefixes or/and categories.\n * attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n-* configuring analysis levels when analyzing from binlog - beyond the collected editorconfigs.\n-* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+* configuring check levels when checking from binlog - beyond the collected editorconfigs.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "BuildCheck(ing)",
              "createdAt": "2024-08-07T13:07:34Z",
              "path": "documentation/specs/BuildCheck/BuildCheck.md",
              "diffHunk": "@@ -148,16 +148,16 @@ For the `.editorconfig` file configuration, following will apply:\n * `.editorconfig` files packaged within nuget packages within local nuget cache won\u2019t be considered.\n \n ### Non-Goals (but might be considered):\n-* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* bulk configuration of multiple rules - based on checks/rules prefixes or/and categories.\n * attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n-* configuring analysis levels when analyzing from binlog - beyond the collected editorconfigs.\n-* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+* configuring check levels when checking from binlog - beyond the collected editorconfigs.\n+* Aliasing the checks/rules, allowing to create multiple instances with different custom configuration (e.g. single check checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n \n ### Out of scope for configuration:\n-* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* opt-out of check on code-level (analogy to C# pragmas, but within msbuild xml files).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: those are analyzers",
              "createdAt": "2024-08-07T13:12:09Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -156,7 +156,7 @@ csharp_space_between_method_declaration_parameter_list_parentheses = false\n csharp_space_between_parentheses = false\n csharp_space_between_square_brackets = false\n \n-# Analyzers\n+# Checks",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we want to change the msbuild parameter to `-check` instead of `-analyze`?",
              "createdAt": "2024-08-07T13:15:23Z",
              "path": "documentation/specs/BuildCheck/BuildCheck-Architecture.md",
              "diffHunk": "@@ -47,29 +47,29 @@ In both cases the sink for the data is actualy a `LoggingContext` - this is to e\n \n #### Sample in-node data case - evaluated project\n \n-One example of rich data that might be helpful for internal analyses is [`Project`](https://github.com/dotnet/msbuild/blob/28f488a74ed75bf5f21ca93ac2463a8cb1586d79/src/Build/Definition/Project.cs#L49). This OM is not currently being used during the standard build execution (`ProjectInstance` is used instead) - but we can conditionaly create and expose `Project` and satisfy the current internal consumers of `ProjectInstance` - spike of that is available [in experimental branch](https://github.com/dotnet/msbuild/compare/main...JanKrivanek:msbuild:research/analyzers-evaluation-hooking#diff-08a12a2fa138c3bfcabc7639bb75dda8534f3b662db4aca4f2b5595dbf9ba197).\n+One example of rich data that might be helpful for internal checks is [`Project`](https://github.com/dotnet/msbuild/blob/28f488a74ed75bf5f21ca93ac2463a8cb1586d79/src/Build/Definition/Project.cs#L49). This OM is not currently being used during the standard build execution (`ProjectInstance` is used instead) - but we can conditionaly create and expose `Project` and satisfy the current internal consumers of `ProjectInstance` - spike of that is available [in experimental branch](https://github.com/dotnet/msbuild/compare/main...JanKrivanek:msbuild:research/analyzers-evaluation-hooking#diff-08a12a2fa138c3bfcabc7639bb75dda8534f3b662db4aca4f2b5595dbf9ba197).\n \n ## Execution Modes\n \n-**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by MSBuild from NET 9.0 / VS 17.12 or newer. The older versions won't be supported.\n+**Replay Mode** - so that users can choose to perform checks post build, without impacting the performance of the build. And so that some level of checking can be run on artifacts from builds produced by MSBuild from NET 9.0 / VS 17.12 or newer. The older versions won't be supported.\n \n-**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+**Live mode** - this is what users are used to from compilation checks. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n \n ## Live Mode Hosting\n \n Prerequisites: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n \n The BuildCheck infrastructure will be prepared to be available concurrently within the `scheduler node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n-* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n-* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data proven to be useful should over time be exposed to `BuildEventArgs`)\n+* BuildCheck will need to recognize custom check packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox checks to agile leverage data not available within `BuildEventArgs` (while data proven to be useful should over time be exposed to `BuildEventArgs`)\n \n ## Replay Mode\n \n Prerequisites: [MSBuild Replaying a Binary Log](../../wiki/Binary-Log.md#replaying-a-binary-log)\n \n-When replaying a binary log, we can apply BuildCheck with help of `-analyze` switch:\n+When replaying a binary log, we can apply BuildCheck with help of `-check` switch:\n ```\n-> msbuild.exe msbuild.binlog -analyze\n+> msbuild.exe msbuild.binlog -check",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "The decision offline was to rename the MSBuild parameter to `-check`",
              "createdAt": "2024-08-08T07:38:15Z",
              "path": "documentation/specs/BuildCheck/BuildCheck-Architecture.md",
              "diffHunk": "@@ -47,29 +47,29 @@ In both cases the sink for the data is actualy a `LoggingContext` - this is to e\n \n #### Sample in-node data case - evaluated project\n \n-One example of rich data that might be helpful for internal analyses is [`Project`](https://github.com/dotnet/msbuild/blob/28f488a74ed75bf5f21ca93ac2463a8cb1586d79/src/Build/Definition/Project.cs#L49). This OM is not currently being used during the standard build execution (`ProjectInstance` is used instead) - but we can conditionaly create and expose `Project` and satisfy the current internal consumers of `ProjectInstance` - spike of that is available [in experimental branch](https://github.com/dotnet/msbuild/compare/main...JanKrivanek:msbuild:research/analyzers-evaluation-hooking#diff-08a12a2fa138c3bfcabc7639bb75dda8534f3b662db4aca4f2b5595dbf9ba197).\n+One example of rich data that might be helpful for internal checks is [`Project`](https://github.com/dotnet/msbuild/blob/28f488a74ed75bf5f21ca93ac2463a8cb1586d79/src/Build/Definition/Project.cs#L49). This OM is not currently being used during the standard build execution (`ProjectInstance` is used instead) - but we can conditionaly create and expose `Project` and satisfy the current internal consumers of `ProjectInstance` - spike of that is available [in experimental branch](https://github.com/dotnet/msbuild/compare/main...JanKrivanek:msbuild:research/analyzers-evaluation-hooking#diff-08a12a2fa138c3bfcabc7639bb75dda8534f3b662db4aca4f2b5595dbf9ba197).\n \n ## Execution Modes\n \n-**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by MSBuild from NET 9.0 / VS 17.12 or newer. The older versions won't be supported.\n+**Replay Mode** - so that users can choose to perform checks post build, without impacting the performance of the build. And so that some level of checking can be run on artifacts from builds produced by MSBuild from NET 9.0 / VS 17.12 or newer. The older versions won't be supported.\n \n-**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+**Live mode** - this is what users are used to from compilation checks. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n \n ## Live Mode Hosting\n \n Prerequisites: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n \n The BuildCheck infrastructure will be prepared to be available concurrently within the `scheduler node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n-* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n-* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data proven to be useful should over time be exposed to `BuildEventArgs`)\n+* BuildCheck will need to recognize custom check packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox checks to agile leverage data not available within `BuildEventArgs` (while data proven to be useful should over time be exposed to `BuildEventArgs`)\n \n ## Replay Mode\n \n Prerequisites: [MSBuild Replaying a Binary Log](../../wiki/Binary-Log.md#replaying-a-binary-log)\n \n-When replaying a binary log, we can apply BuildCheck with help of `-analyze` switch:\n+When replaying a binary log, we can apply BuildCheck with help of `-check` switch:\n ```\n-> msbuild.exe msbuild.binlog -analyze\n+> msbuild.exe msbuild.binlog -check",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            BuildCheckResultSeverity.Suggestion => new BuildCheckResultMessage(this),\r\n```\r\n\r\nLet's keep the public API naming as simple as possible",
              "createdAt": "2024-08-07T13:16:27Z",
              "path": "src/Build/BuildCheck/API/BuildCheckResult.cs",
              "diffHunk": "@@ -9,35 +9,35 @@\n namespace Microsoft.Build.Experimental.BuildCheck;\n \n /// <summary>\n-/// Representation of a single report of a single finding from a BuildAnalyzer\n+/// Representation of a single report of a single finding from a BuildCheck\n /// Each rule has upfront known message format - so only the concrete arguments are added\n /// Optionally a location is attached - in the near future we might need to support multiple locations\n ///  (for 2 cases - a) grouped result for multiple occurrences; b) a single report for a finding resulting from combination of multiple locations)\n /// </summary>\n public sealed class BuildCheckResult : IBuildCheckResult\n {\n-    public static BuildCheckResult Create(BuildAnalyzerRule rule, ElementLocation location, params string[] messageArgs)\n+    public static BuildCheckResult Create(BuildExecutionCheckRule rule, ElementLocation location, params string[] messageArgs)\n     {\n         return new BuildCheckResult(rule, location, messageArgs);\n     }\n \n-    public BuildCheckResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation location, string[] messageArgs)\n+    public BuildCheckResult(BuildExecutionCheckRule buildExecutionCheckRule, ElementLocation location, string[] messageArgs)\n     {\n-        BuildAnalyzerRule = buildAnalyzerRule;\n+        BuildExecutionCheckRule = buildExecutionCheckRule;\n         Location = location;\n         MessageArgs = messageArgs;\n     }\n \n-    internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)\n+    internal BuildEventArgs ToEventArgs(BuildExecutionCheckResultSeverity severity)\n         => severity switch\n         {\n-            BuildAnalyzerResultSeverity.Suggestion => new BuildCheckResultMessage(this),\n-            BuildAnalyzerResultSeverity.Warning => new BuildCheckResultWarning(this, BuildAnalyzerRule.Id),\n-            BuildAnalyzerResultSeverity.Error => new BuildCheckResultError(this, BuildAnalyzerRule.Id),\n+            BuildExecutionCheckResultSeverity.Suggestion => new BuildCheckResultMessage(this),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Lets keep BuildCheck.\r\n\r\nTo prevent conflicts with namespace - we can rename the namespace - e.g. to `Microsoft.Build.Experimental.BuildChecking`",
              "createdAt": "2024-08-07T13:29:50Z",
              "path": "src/Build/BuildCheck/API/BuildExecutionCheck.cs",
              "diffHunk": "@@ -9,29 +9,29 @@\n namespace Microsoft.Build.Experimental.BuildCheck;\n \n /// <summary>\n-/// Base class for build analyzers.\n-/// Same base will be used for custom and built-in analyzers.\n-/// <see cref=\"BuildAnalyzer\"/> is a unit of build analysis execution, but it can contain multiple rules - each representing a distinct violation.\n+/// Base class for build checks.\n+/// Same base will be used for custom and built-in checks.\n+/// <see cref=\"BuildExecutionCheck\"/> is a unit of build checks execution, but it can contain multiple rules - each representing a distinct violation.\n /// </summary>\n-public abstract class BuildAnalyzer : IDisposable\n+public abstract class BuildExecutionCheck : IDisposable",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I agree with keeping it  BuildCheck",
              "createdAt": "2024-08-07T14:57:00Z",
              "path": "src/Build/BuildCheck/API/BuildExecutionCheck.cs",
              "diffHunk": "@@ -9,29 +9,29 @@\n namespace Microsoft.Build.Experimental.BuildCheck;\n \n /// <summary>\n-/// Base class for build analyzers.\n-/// Same base will be used for custom and built-in analyzers.\n-/// <see cref=\"BuildAnalyzer\"/> is a unit of build analysis execution, but it can contain multiple rules - each representing a distinct violation.\n+/// Base class for build checks.\n+/// Same base will be used for custom and built-in checks.\n+/// <see cref=\"BuildExecutionCheck\"/> is a unit of build checks execution, but it can contain multiple rules - each representing a distinct violation.\n /// </summary>\n-public abstract class BuildAnalyzer : IDisposable\n+public abstract class BuildExecutionCheck : IDisposable",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "As discussed on the meeting yesterday, we are changing it to just `Check` to not confuse with our infrastructure.",
              "createdAt": "2024-08-08T12:26:24Z",
              "path": "src/Build/BuildCheck/API/BuildExecutionCheck.cs",
              "diffHunk": "@@ -9,29 +9,29 @@\n namespace Microsoft.Build.Experimental.BuildCheck;\n \n /// <summary>\n-/// Base class for build analyzers.\n-/// Same base will be used for custom and built-in analyzers.\n-/// <see cref=\"BuildAnalyzer\"/> is a unit of build analysis execution, but it can contain multiple rules - each representing a distinct violation.\n+/// Base class for build checks.\n+/// Same base will be used for custom and built-in checks.\n+/// <see cref=\"BuildExecutionCheck\"/> is a unit of build checks execution, but it can contain multiple rules - each representing a distinct violation.\n /// </summary>\n-public abstract class BuildAnalyzer : IDisposable\n+public abstract class BuildExecutionCheck : IDisposable",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should not be renamed - this is for Roslyn Analyzers",
              "createdAt": "2024-08-07T13:30:45Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -156,7 +156,7 @@ csharp_space_between_method_declaration_parameter_list_parentheses = false\n csharp_space_between_parentheses = false\n csharp_space_between_square_brackets = false\n \n-# Analyzers\n+# Checks",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we should rename the switch to \"buildCheck\".  \"check\" is a little bit abstract. For comparison:\r\n```\r\nmsbuild -buildCheck\r\n```\r\n```\r\nmsbuild -check\r\n```\r\nI think naming infrastructure classes and other things \"Check\" is fine because the namespace is \"BuildCheck\" but not for the switch. However, I don't feel very strongly about this. @JanKrivanek, what do you think?",
              "createdAt": "2024-08-08T10:04:27Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -277,7 +277,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false,   \"HelpMessage_40_WarnNotAsErrorSwitch\"),\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false,   \"HelpMessage_29_WarnAsMessageSwitch\"),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false,   \"HelpMessage_30_BinaryLoggerSwitch\"),\n-            new ParameterizedSwitchInfo(  new string[] { \"analyze\", },                          ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false,   null),\n+            new ParameterizedSwitchInfo(  new string[] { \"check\", },                            ParameterizedSwitch.Check,                      null,                           false,          null,                                  true,   false,   null),",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "I do not have strong opinion.\r\nThere was no strong opposition against just `-check` yesterday - so I'm fine leaving as is.",
              "createdAt": "2024-08-08T13:37:44Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -277,7 +277,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false,   \"HelpMessage_40_WarnNotAsErrorSwitch\"),\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false,   \"HelpMessage_29_WarnAsMessageSwitch\"),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false,   \"HelpMessage_30_BinaryLoggerSwitch\"),\n-            new ParameterizedSwitchInfo(  new string[] { \"analyze\", },                          ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false,   null),\n+            new ParameterizedSwitchInfo(  new string[] { \"check\", },                            ParameterizedSwitch.Check,                      null,                           false,          null,                                  true,   false,   null),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra whitespaces after comas here.",
              "createdAt": "2024-08-08T13:39:23Z",
              "path": "src/Build/BuildCheck/API/CheckRule.cs",
              "diffHunk": "@@ -4,18 +4,18 @@\n namespace Microsoft.Build.Experimental.BuildCheck;\n \n /// <summary>\n-/// Represents a rule that is a unit of build analysis.\n-/// <see cref=\"BuildAnalyzer\"/> is a unit of executing the analysis, but it can be discovering multiple distinct violation types,\n-///  for this reason a single <see cref=\"BuildAnalyzer\"/> can expose multiple <see cref=\"BuildAnalyzerRule\"/>s.\n+/// Represents a rule that is a unit of a build check.\n+/// <see cref=\"Check\"/> is a unit of executing the check, but it can be discovering multiple distinct violation types,\n+///  for this reason a single <see cref=\"Check\"/> can expose multiple <see cref=\"CheckRule\"/>s.\n /// </summary>\n-public class BuildAnalyzerRule\n+public class CheckRule\n {\n-    public BuildAnalyzerRule(\n-        string id,\n-        string title,\n-        string description,\n+    public CheckRule(\n+        string id, \n+        string title, \n+        string description, ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        CheckConfig = buildCheckConfig;\r\n```",
              "createdAt": "2024-08-08T14:36:59Z",
              "path": "src/Build/BuildCheck/API/ConfigurationContext.cs",
              "diffHunk": "@@ -13,15 +13,15 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public class ConfigurationContext\n {\n-    private ConfigurationContext(CustomConfigurationData[] customConfigurationData, BuildAnalyzerConfigurationEffective[] buildAnalyzerConfig)\n+    private ConfigurationContext(CustomConfigurationData[] customConfigurationData, CheckConfigurationEffective[] buildExecutionCheckConfig)\n     {\n         CustomConfigurationData = customConfigurationData;\n-        BuildAnalyzerConfig = buildAnalyzerConfig;\n+        CheckConfig = buildExecutionCheckConfig;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}