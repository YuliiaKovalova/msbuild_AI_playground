{
  "number": 9965,
  "title": "Attribute custom task OOM (and other critical exceptions) to the task",
  "body": "Fixes #9928\r\n\r\n### Context\r\nOOM in custom tasks is rethrown to RequestBuilder, where it is logged as an MSBuild bug.\r\nWe might try - on best effort basis - to log an error for the task little more up the stack and then continue in unrolling as before. If we succeed - we get better logging experience for the case; if we fail - we get the same experience as before.\r\n\r\n\r\n### Changes Made\r\n* The exception is attempted to be logged in `TaskBuilder`\r\n* `RequestThreadProc` and `BuildAndReport` methods merged into single one - so that writing the 'error dump' file (MSBuild***.failure.txt) is deterministically written before reporting the result back\r\n* Exposing an internal option to re-initialize `DebugUtils.DebugPath` - as this was set before any unit test was given chance to start, so injecting altering env var was not possible.\r\n\r\n### Testing\r\nAdded test with dummy OOM (not a real CLR OOM - in order to have deterministic test outputs)\r\n\r\n### Notes\r\nDiscussed the OOM handling with @janvorli (for a perspective from the Runtime PoV) - we should not make no expectations that anything can succeed after OOM catching (though this migh get more successful in single threaded processing - which MSBuild currently is), but if we are fine with the handler possibly failing (which basically leads to pre-existing behavior) - than there should not be any security nor corectness concerns.\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-02T17:06:56Z",
  "updatedAt": "2024-04-05T16:04:29Z",
  "closedAt": "2024-04-05T16:04:25Z",
  "mergedAt": "2024-04-05T16:04:25Z",
  "additions": 159,
  "deletions": 41,
  "changedFiles": 8,
  "headRefName": "proto/handle-oom",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d4ee4280d5cf08bb58f55545a43357251d8abace",
          "message": "Log task critical exceptions",
          "committedDate": "2024-04-02T16:44:07Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "365e7ffa00e612a348fa1175e82af53cc7538fdb",
          "message": "Fix styling",
          "committedDate": "2024-04-02T18:36:33Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4daa479e70ca6bb18ecdbe49862c215fb318086c",
          "message": "Fix exc serialization test",
          "committedDate": "2024-04-03T09:28:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6396f26101a6eca86f223e4c6fadd5f7c79506bb",
          "message": "Merge branch 'main' into proto/handle-oom",
          "committedDate": "2024-04-03T09:30:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "408b6218a1bb7128b3d06265645ff73dead32992",
          "message": "Fix test of task with exception",
          "committedDate": "2024-04-03T10:13:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27458b22356f5caf7cbf93c6a8d470eede5ec26e",
          "message": "Fix nondeterminism of the TaskExceptionHandlingTest",
          "committedDate": "2024-04-03T18:49:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "800f93850ad38a9e48cae7b1cbccb7483b7d0455",
          "message": "add xml comment",
          "committedDate": "2024-04-03T19:18:25Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "759dd3b2bb49eef26fddc4ebd6acfcc4c7714cf4",
          "message": "Clarify comment",
          "committedDate": "2024-04-04T12:29:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Doc comment please",
              "createdAt": "2024-04-03T15:10:22Z",
              "path": "src/Framework/CriticalTaskException.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework.BuildException;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    internal sealed class CriticalTaskException : BuildExceptionBase",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`TestEnvironment` cleans up so you don't have to.",
              "createdAt": "2024-04-03T15:35:02Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1050,6 +1050,46 @@ public void TestTaskDictionaryOutputItems()\n             ml.AssertLogContains(\"a=b\");\n         }\n \n+        [Theory]\n+        [InlineData(typeof(OutOfMemoryException), true)]\n+        [InlineData(typeof(ArgumentException), false)]\n+        public void TaskExceptionHandlingTest(Type exceptionType, bool isCritical)\n+        {\n+            string testExceptionMessage = \"Test Message\";\n+            string customTaskPath = Assembly.GetExecutingAssembly().Location;\n+            MockLogger ml = new MockLogger() { AllowTaskCrashes = true };\n+\n+            using TestEnvironment env = TestEnvironment.Create();\n+            var debugFolder = env.CreateFolder(true);\n+            // inject the location for failure logs - not to interact with other tests\n+            env.SetEnvironmentVariable(\"MSBUILDDEBUGPATH\", debugFolder.Path);\n+\n+            ObjectModelHelpers.BuildProjectExpectFailure($\"\"\"\n+                     <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                         <UsingTask TaskName=`TaskThatThrows` AssemblyFile=`{customTaskPath}`/>\n+                         <Target Name=`Build`>\n+                            <TaskThatThrows ExceptionType=\"{exceptionType.ToString()}\" ExceptionMessage=\"{testExceptionMessage}\">\n+                             </TaskThatThrows>\n+                         </Target>\n+                     </Project>\n+                  \"\"\",\n+                ml);\n+            // 'This is an unhandled exception from a task'\n+            ml.AssertLogContains(\"MSB4018\");\n+            // 'An internal failure occurred while running MSBuild'\n+            ml.AssertLogDoesntContain(\"MSB1025\");\n+            // 'This is an unhandled error in MSBuild'\n+            ml.AssertLogDoesntContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"UnhandledMSBuildError\", string.Empty));\n+            ml.AssertLogContains(testExceptionMessage);\n+\n+            File.Exists(ExceptionHandling.DumpFilePath).ShouldBe(isCritical,\n+                $\"{ExceptionHandling.DumpFilePath} expected to exist: {isCritical}\");\n+            if (isCritical)\n+            {\n+                FileUtilities.DeleteNoThrow(ExceptionHandling.DumpFilePath);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There are couple `TestEnvironment` instances injected automatically (mainly via `MSBuildTestEnvironmentFixture`), that do not allow setting `AllowTaskCrashes` to `true` and those would fail the test during cleanup phase",
              "createdAt": "2024-04-03T18:56:54Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1050,6 +1050,46 @@ public void TestTaskDictionaryOutputItems()\n             ml.AssertLogContains(\"a=b\");\n         }\n \n+        [Theory]\n+        [InlineData(typeof(OutOfMemoryException), true)]\n+        [InlineData(typeof(ArgumentException), false)]\n+        public void TaskExceptionHandlingTest(Type exceptionType, bool isCritical)\n+        {\n+            string testExceptionMessage = \"Test Message\";\n+            string customTaskPath = Assembly.GetExecutingAssembly().Location;\n+            MockLogger ml = new MockLogger() { AllowTaskCrashes = true };\n+\n+            using TestEnvironment env = TestEnvironment.Create();\n+            var debugFolder = env.CreateFolder(true);\n+            // inject the location for failure logs - not to interact with other tests\n+            env.SetEnvironmentVariable(\"MSBUILDDEBUGPATH\", debugFolder.Path);\n+\n+            ObjectModelHelpers.BuildProjectExpectFailure($\"\"\"\n+                     <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                         <UsingTask TaskName=`TaskThatThrows` AssemblyFile=`{customTaskPath}`/>\n+                         <Target Name=`Build`>\n+                            <TaskThatThrows ExceptionType=\"{exceptionType.ToString()}\" ExceptionMessage=\"{testExceptionMessage}\">\n+                             </TaskThatThrows>\n+                         </Target>\n+                     </Project>\n+                  \"\"\",\n+                ml);\n+            // 'This is an unhandled exception from a task'\n+            ml.AssertLogContains(\"MSB4018\");\n+            // 'An internal failure occurred while running MSBuild'\n+            ml.AssertLogDoesntContain(\"MSB1025\");\n+            // 'This is an unhandled error in MSBuild'\n+            ml.AssertLogDoesntContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"UnhandledMSBuildError\", string.Empty));\n+            ml.AssertLogContains(testExceptionMessage);\n+\n+            File.Exists(ExceptionHandling.DumpFilePath).ShouldBe(isCritical,\n+                $\"{ExceptionHandling.DumpFilePath} expected to exist: {isCritical}\");\n+            if (isCritical)\n+            {\n+                FileUtilities.DeleteNoThrow(ExceptionHandling.DumpFilePath);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Ah, sure--comment please then :)",
              "createdAt": "2024-04-03T19:30:12Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1050,6 +1050,46 @@ public void TestTaskDictionaryOutputItems()\n             ml.AssertLogContains(\"a=b\");\n         }\n \n+        [Theory]\n+        [InlineData(typeof(OutOfMemoryException), true)]\n+        [InlineData(typeof(ArgumentException), false)]\n+        public void TaskExceptionHandlingTest(Type exceptionType, bool isCritical)\n+        {\n+            string testExceptionMessage = \"Test Message\";\n+            string customTaskPath = Assembly.GetExecutingAssembly().Location;\n+            MockLogger ml = new MockLogger() { AllowTaskCrashes = true };\n+\n+            using TestEnvironment env = TestEnvironment.Create();\n+            var debugFolder = env.CreateFolder(true);\n+            // inject the location for failure logs - not to interact with other tests\n+            env.SetEnvironmentVariable(\"MSBUILDDEBUGPATH\", debugFolder.Path);\n+\n+            ObjectModelHelpers.BuildProjectExpectFailure($\"\"\"\n+                     <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                         <UsingTask TaskName=`TaskThatThrows` AssemblyFile=`{customTaskPath}`/>\n+                         <Target Name=`Build`>\n+                            <TaskThatThrows ExceptionType=\"{exceptionType.ToString()}\" ExceptionMessage=\"{testExceptionMessage}\">\n+                             </TaskThatThrows>\n+                         </Target>\n+                     </Project>\n+                  \"\"\",\n+                ml);\n+            // 'This is an unhandled exception from a task'\n+            ml.AssertLogContains(\"MSB4018\");\n+            // 'An internal failure occurred while running MSBuild'\n+            ml.AssertLogDoesntContain(\"MSB1025\");\n+            // 'This is an unhandled error in MSBuild'\n+            ml.AssertLogDoesntContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"UnhandledMSBuildError\", string.Empty));\n+            ml.AssertLogContains(testExceptionMessage);\n+\n+            File.Exists(ExceptionHandling.DumpFilePath).ShouldBe(isCritical,\n+                $\"{ExceptionHandling.DumpFilePath} expected to exist: {isCritical}\");\n+            if (isCritical)\n+            {\n+                FileUtilities.DeleteNoThrow(ExceptionHandling.DumpFilePath);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there not a potential problem allocating this on the OOM path?",
              "createdAt": "2024-04-03T15:40:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -814,8 +814,18 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                         }\n                     }\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") != \"1\")\n+                catch (Exception ex)\n                 {\n+                    if (ExceptionHandling.IsCriticalException(ex) || Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") == \"1\")\n+                    {\n+                        taskLoggingContext.LogFatalTaskError(\n+                            ex,\n+                            new BuildEventFileInfo(_targetChildInstance.Location),\n+                            _taskNode.Name);\n+\n+                        throw new CriticalTaskException(ex);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes - it can lead to crash with uncatchable OOM.\r\nBut that is same to the situation where we logged this exception in `RequestBuilder` - as the logging itself here is more costly (needs to fetch the resource string and format the error message). So technically we are not changing the odds of that eventuality much. \r\n\r\nIn optimistic (and hopefully typical) scenario the OOM in a custom task is caused by allocations within that task - either by bigger blocks allocations (where the last block will lead to OOM, but will leave smaller chunks still available) or by smaller chunks allocations that will became unrooted after the stack unrolling, GC will free up that memory. So those two allocations (logging and wrapping exceptions) should be accomodable.\r\nWe do not have other greedy threads running - so the available memory should not get depleted asynchronously.\r\n\r\ncc @janvorli for runtime perspective - in case I'm wrong in my takeaways from our offline discussion\r\n",
              "createdAt": "2024-04-03T19:15:38Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -814,8 +814,18 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                         }\n                     }\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") != \"1\")\n+                catch (Exception ex)\n                 {\n+                    if (ExceptionHandling.IsCriticalException(ex) || Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") == \"1\")\n+                    {\n+                        taskLoggingContext.LogFatalTaskError(\n+                            ex,\n+                            new BuildEventFileInfo(_targetChildInstance.Location),\n+                            _taskNode.Name);\n+\n+                        throw new CriticalTaskException(ex);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "To make the odds a bit better, you could preallocate the `BuildEventFileInfo` and `CriticalTaskException` instances. But there are possibilities of other allocations occurring in the runtime under the hoods, possibly even for jitting the code. So in general, after the OOM exception is thrown, all you do is just a best effort.",
              "createdAt": "2024-04-03T19:27:48Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -814,8 +814,18 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                         }\n                     }\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex) && Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") != \"1\")\n+                catch (Exception ex)\n                 {\n+                    if (ExceptionHandling.IsCriticalException(ex) || Environment.GetEnvironmentVariable(\"MSBUILDDONOTCATCHTASKEXCEPTIONS\") == \"1\")\n+                    {\n+                        taskLoggingContext.LogFatalTaskError(\n+                            ex,\n+                            new BuildEventFileInfo(_targetChildInstance.Location),\n+                            _taskNode.Name);\n+\n+                        throw new CriticalTaskException(ex);",
              "author": {
                "login": "janvorli"
              }
            }
          ]
        }
      }
    ]
  }
}