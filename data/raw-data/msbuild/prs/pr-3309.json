{
  "number": 3309,
  "title": "Don't race on multitargeted project -> skipped compat check",
  "body": "A multitargeted project referencing a non-SDK project had a race\r\ncondition. The inner builds each had `TargetFramework` set as a global\r\nproperty, and each passed that global property along when building\r\nreferenced non-SDK projects. Since those projects aren't aware of TF,\r\nthey raced each other.\r\n\r\nFixes #2366 for vcxproj references by ensuring that referenced projects\r\nwhich skipped TF checks also don't inherit TF/RID.",
  "state": "CLOSED",
  "createdAt": "2018-05-14T20:14:18Z",
  "updatedAt": "2021-01-15T18:16:49Z",
  "closedAt": "2021-01-15T18:16:49Z",
  "mergedAt": null,
  "additions": 14,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "multitargeting-references-legacy-race",
  "isDraft": true,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "MSBuild 16.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8cceb949732ec3fc9239d6b09ce354f238d23eb6",
          "message": "Don't race on multitargeted project -> legacy\n\nA multitargeted project referencing a non-SDK project had a race\ncondition. The inner builds each had `TargetFramework` set as a global\nproperty, and each passed that global property along when building\nreferenced non-SDK projects. Since those projects aren't aware of TF,\nthey raced each other.\n\nFixes #2366 for vcxproj references by ensuring that referenced projects\nwhich skipped TF checks also don't inherit TF/RID.",
          "committedDate": "2018-05-11T22:59:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2a61816497d860015a5e310092fde3ccf4e0cef",
          "message": "Allow SetTargetFramework on skipped refs",
          "committedDate": "2018-05-15T15:56:00Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @nguerrera ",
        "createdAt": "2018-05-14T20:14:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this due to age.",
        "createdAt": "2021-01-15T18:16:49Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@nguerrera Do you think we should clear RID when traversing to a project that had `SkipGetTargetFrameworkProperties=true`? We weren't before. Maybe I should just leave it out here too?",
              "createdAt": "2018-05-15T16:10:22Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier</UndefineProperties>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We need to run this through the SDK tests as we did for the original double eval fix. I forget all of the subtleties of RID cases that @TheRealPiotrP worked through.",
              "createdAt": "2018-05-15T18:19:36Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier</UndefineProperties>",
              "author": {
                "login": "nguerrera"
              }
            },
            {
              "body": "cc @dsplaisted His recent work might make running those tests against an arbitrary msbuild  (or at least CLI) easier.",
              "createdAt": "2018-05-15T20:29:59Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier</UndefineProperties>",
              "author": {
                "login": "nguerrera"
              }
            },
            {
              "body": "That'd be exciting! It would be nice to see if we could get an optional Jenkins test to run SDK tests on new MSBuild bits (long term . . .)",
              "createdAt": "2018-05-15T20:31:41Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier</UndefineProperties>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald Here's how to install the SDK tests as a global tool and run them:\r\n\r\n```\r\ndotnet tool install -g testSdkBuild --version 1.0.0-preview-62916-01 --add-source https://dotnet.myget.org/F/dotnet-cli/api/v3/index.json\r\ntestSdkBuild -help\r\n\r\ntestSdkBuild -fullMSBuildPath C:\\git\\msbuild\\path\\to\\bootstrap\\msbuild.exe -xml results.xml\r\n```\r\n\r\nThat will let you run against a bootstrapped full framework version of MSBuild.  I can't remember how the bootstrapped .NET Core MSBuild works, but you can point the tests to a custom dotnet.exe with the `-dotnetPath` argument.\r\n\r\nWe've got 8 different test projects in dotnet/sdk, so we've got 8 different packages with tests that you can install and run.  The Build tests are the most important for you, but here is the full list of package names:\r\n\r\n- testSdkBuild\r\n- testSdkClean\r\n- testSdkPack\r\n- testSdkPerf\r\n- testSdkPublish\r\n- testSdkRebuild\r\n- testSdkRestore\r\n- testSdkToolPack\r\n",
              "createdAt": "2018-05-16T00:24:03Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier</UndefineProperties>",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we add a comment to this item as well?",
              "createdAt": "2019-07-09T20:25:34Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1688,9 +1688,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n       <!--\n          Remove the items we've touched from _MSBuildProjectReferenceExistent. This will leave all projects where\n-         SkipGetTargetFrameworkProperties was set. Then add all AnnotatedProjects back.\n+         SkipGetTargetFrameworkProperties was set.\n       -->\n       <_MSBuildProjectReferenceExistent Remove=\"@(_MSBuildProjectReferenceExistent)\" Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\" />\n+\n+      <!-- If we skipped querying the other project, ensure we don't pollute it with the TargetFramework/RuntimeIdentifier\n+           that may be set for this project as a global property (if we're in an inner build).\n+\n+           But allow setting TF explicitly. -->\n+      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' == ''\">\n+          <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>\n+      </_MSBuildProjectReferenceExistent>\n+      <_MSBuildProjectReferenceExistent>",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      }
    ]
  }
}