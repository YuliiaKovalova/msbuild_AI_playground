{
  "number": 11626,
  "title": "Remove unnecessary CA2022 suppressions",
  "body": "Related to https://github.com/dotnet/source-build/issues/4322\r\n\r\nRemove all the unnecessary CA2022 suppressions\r\n\r\nVMR: https://dev.azure.com/dnceng/internal/_build/results?buildId=2673846&view=results (internal Microsoft link)",
  "state": "MERGED",
  "createdAt": "2025-03-26T08:51:03Z",
  "updatedAt": "2025-04-16T00:37:54Z",
  "closedAt": "2025-04-15T13:53:37Z",
  "mergedAt": "2025-04-15T13:53:37Z",
  "additions": 35,
  "deletions": 24,
  "changedFiles": 5,
  "headRefName": "CA2022",
  "isDraft": false,
  "author": {
    "login": "Winniexu01"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e7a4aa78bc3f0da8cdca5420c6245036a799cfed",
          "message": "Remove unnecessary CA2022 suppressions",
          "committedDate": "2025-03-26T08:41:48Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4afd17cf170bc2719505741fa05fa5ff8e0a697",
          "message": "Remove unnecessary CA2022 suppressions",
          "committedDate": "2025-03-27T08:31:56Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae350000e8ca30498bac456f417c9e2657779fa4",
          "message": "Fix field name and char type",
          "committedDate": "2025-03-28T08:30:11Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c72c1a9e17470465cc0d1c7ee2d66102db0bc963",
          "message": "Format extension method",
          "committedDate": "2025-03-31T07:14:48Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2fc718c98d6293f566556cb943edb4c70e83af9",
          "message": "Merge branch 'main' into CA2022",
          "committedDate": "2025-03-31T09:08:21Z",
          "author": {
            "name": "Wenwen",
            "email": "53243232+Winniexu01@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3b255da885de384fce2bdb6ce9d665902dac21c",
          "message": "Add a new extension method for .NET FX version",
          "committedDate": "2025-04-02T05:58:19Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29ff0ea1c36554d1192ac8b92a54548f7a0c335e",
          "message": "Fix formatting",
          "committedDate": "2025-04-02T06:01:09Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "525e2c55256008716f32b80aa0118c824bb09a09",
          "message": "Add braces to 'if' statement",
          "committedDate": "2025-04-02T07:00:41Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50e620320a1c6af0cc6b85b6c8d42bb801f59848",
          "message": "Merge branch 'main' into CA2022",
          "committedDate": "2025-04-03T00:59:12Z",
          "author": {
            "name": "Wenwen",
            "email": "53243232+Winniexu01@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8efe63fdc2c38a04d1fb1be7fc99d807453b664",
          "message": "Fix CP0001",
          "committedDate": "2025-04-03T06:07:19Z",
          "author": {
            "name": "Wenwen",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a7e84839dde751f123c4d94e9749a6ce20d70cc",
          "message": "Update",
          "committedDate": "2025-04-08T11:20:55Z",
          "author": {
            "name": "Winniexu01",
            "email": "v-wexu@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "71ef78f4607c11ee4408dfa2c812e34e057b3bea",
          "message": "Merge branch 'main' into CA2022",
          "committedDate": "2025-04-08T12:26:24Z",
          "author": {
            "name": "Wenwen",
            "email": "53243232+Winniexu01@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a04a6f99582de2f8cd31375e22ac9162c6954b77",
          "message": "Merge branch 'main' into CA2022",
          "committedDate": "2025-04-11T01:30:15Z",
          "author": {
            "name": "Wenwen",
            "email": "53243232+Winniexu01@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "169c5544e3c9b4849a1509fe0c86f8c9049a197c",
          "message": "Merge branch 'main' into CA2022",
          "committedDate": "2025-04-15T00:56:28Z",
          "author": {
            "name": "Wenwen",
            "email": "53243232+Winniexu01@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Add @MichaelSimons, @NikolaMilosavljevic , @mthalman, @mmitche , @ViktorHofer as reviewers.",
        "createdAt": "2025-03-31T09:09:12Z",
        "author": {
          "login": "Winniexu01"
        }
      },
      {
        "body": "Hi @jaredpar, @NikolaMilosavljevic , could you please do a code review?",
        "createdAt": "2025-04-03T09:32:02Z",
        "author": {
          "login": "Winniexu01"
        }
      },
      {
        "body": "@dotnet/kitten please review",
        "createdAt": "2025-04-15T13:45:47Z",
        "author": {
          "login": "akoeplinger"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not just make this an extension method on `Stream` that is `if !NET` gated? That way you can just use `stream.ReadExactly` in the code base and get the correct behavior. ",
              "createdAt": "2025-03-31T16:19:52Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -250,6 +246,27 @@ private static Manifest Deserialize(Stream s)\n                 return m;\n             }\n         }\n+\n+#if NET\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)\n+        {\n+            stream.ReadExactly(buffer, offset, count);\n+        }\n+#else\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "You're absolutely right! This is a clean and elegant solution. I'll add a new extension method to `Stream` for .NET FX version.",
              "createdAt": "2025-04-01T06:02:33Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -250,6 +246,27 @@ private static Manifest Deserialize(Stream s)\n                 return m;\n             }\n         }\n+\n+#if NET\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)\n+        {\n+            stream.ReadExactly(buffer, offset, count);\n+        }\n+#else\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)",
              "author": {
                "login": "Winniexu01"
              }
            },
            {
              "body": "Updated: https://github.com/dotnet/msbuild/blob/d8efe63fdc2c38a04d1fb1be7fc99d807453b664/src/Tasks/ManifestUtil/ManifestReader.cs#L269-L302",
              "createdAt": "2025-04-03T07:13:07Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -250,6 +246,27 @@ private static Manifest Deserialize(Stream s)\n                 return m;\n             }\n         }\n+\n+#if NET\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)\n+        {\n+            stream.ReadExactly(buffer, offset, count);\n+        }\n+#else\n+        private static void ReadExactly(Stream stream, byte[] buffer, int offset, int count)",
              "author": {
                "login": "Winniexu01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I'd wrap the whole class/namespace instead. On a quick read I thought this would cause an empty method to be called on NET, but this works because the compiler prefers the method on the class over the extension method in that case. Would be nice to make this more explicit.",
              "createdAt": "2025-04-03T15:38:17Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "Hi @akoeplinger , I tried to wrap the whole class/namespace but failed. The code runs successfully on all other platforms, but fails on \"Windows Full Release (no bootstrap)\" with CP0001 error. During local testing, I observed that although the extension method wasn't being wrapped, the class implementation takes precedence in the compilation. Since \"Windows Full Release (no bootstrap)\" passed all tests successfully, I proceeded with the code modifications shown above.\r\n",
              "createdAt": "2025-04-07T01:57:29Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "Winniexu01"
              }
            },
            {
              "body": "ah that's actually a good finding. CP0001 means\r\n> CP0001 | A type, enum, record, or struct visible outside the assembly is missing in the compared assembly when required to be present.\r\n\r\nthat's because `StreamExtensions` is public but it shouldn't be.",
              "createdAt": "2025-04-07T11:17:57Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "I considered changing this public class/method to internal, however, doing so would prevent files in other namespaces from accessing it:\r\nhttps://github.com/dotnet/msbuild/blob/d8efe63fdc2c38a04d1fb1be7fc99d807453b664/src/Utilities.UnitTests/TrackedDependencies/FileTrackerTests.cs#L1738\r\n\r\nI'm wondering if it's better to keep the method public or proceed with making it internal and provide another extension method for other files?",
              "createdAt": "2025-04-08T09:17:52Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "Winniexu01"
              }
            },
            {
              "body": "you can make it internal and move this to a Util.cs somewhere that gets included in projects that need the method",
              "createdAt": "2025-04-08T09:24:41Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "Update: https://github.com/dotnet/msbuild/pull/11626/commits/1a7e84839dde751f123c4d94e9749a6ce20d70cc",
              "createdAt": "2025-04-08T13:14:17Z",
              "path": "src/Tasks/ManifestUtil/ManifestReader.cs",
              "diffHunk": "@@ -269,3 +265,38 @@ public ComInfo(string manifestFileName, string componentFileName, string clsid,\n         public string TlbId { get; }\n     }\n }\n+\n+namespace System.IO\n+{\n+    public static class StreamExtensions\n+    {\n+        public static void ReadExactly(this Stream stream, byte[] buffer, int offset, int count)\n+        {\n+#if !NET",
              "author": {
                "login": "Winniexu01"
              }
            }
          ]
        }
      }
    ]
  }
}