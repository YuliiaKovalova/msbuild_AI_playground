{
  "number": 6683,
  "title": "Identify 64-bit MSBuildToolsPath from 64-bit API consumer",
  "body": "Fixes #6681.\r\n\r\n### Context\r\n\r\nThe change to make Visual Studio 64-bit means that projects loaded in Visual Studio get the 64-bit MSBuild, and other tools are more likely to be loading our API in a 64-bit process as well. That found this difference between the way projects are evaluated in `devenv.exe` and in `vcxprojReader.exe`.\r\n\r\n### Changes Made\r\n\r\nFind the VS root from the current assembly and then reconstruct the path to the appropriate MSBuild.exe based on that + the current process's bitness, ensuring that API consumers and MSBuild.exe/devenv.exe see the same MSBuildToolsPath.\r\n\r\n### Testing\r\n\r\nManual overlay with a trivial API consumer.",
  "state": "MERGED",
  "createdAt": "2021-07-16T20:33:48Z",
  "updatedAt": "2021-07-28T13:52:10Z",
  "closedAt": "2021-07-28T13:52:10Z",
  "mergedAt": "2021-07-28T13:52:09Z",
  "additions": 12,
  "deletions": 51,
  "changedFiles": 2,
  "headRefName": "64-bit-environment",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f4645e6597ee84685a6c3606e611e0952dcb60e6",
          "message": "Avoid regex in GetVsRootFromMSBuildAssembly\n\nAlso eliminates the unspecified need to only pass in MSBuild.exe as the\nassembly.",
          "committedDate": "2021-07-27T21:48:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8711a30a1f2737545243be66b0655e149f4e9d30",
          "message": "Identify 64-bit MSBuildToolsPath from 64-bit app\n\nFixes #6681 by finding the VS root from the current assembly and then\nreconstructing the path to the appropriate MSBuild.exe based on that +\nthe current process's bitness, ensuring that API consumers and\nMSBuild.exe/devenv.exe see the same MSBuildToolsPath.",
          "committedDate": "2021-07-27T21:48:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e020ff1202e9f11b1a39de19a27047675f063476",
          "message": "Treat unit tests as 32-bit\n\nThe new process to find MSBuild cares only about the real runtime architecture\nof the running process, not the path passed in, so these tests no longer\nsuccessfully simulate the 64-bit case. Dropping them instead.",
          "committedDate": "2021-07-27T21:48:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9070345c08624e5eb315bfbabc20a6dc65447f4a",
          "message": "Remove FindOlderVisualStudioEnvironmentByEnvironmentVariable()\n\nI can't think of a reason to want to attempt to load (part of) an MSBuild 15.0 toolset with MSBuild 17.0+.",
          "committedDate": "2021-07-27T21:48:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "255b4d02bbbf9cfdbea69cca411d30c527a1cb79",
          "message": "Avoid recomputing path to MSBuild.exe under VS",
          "committedDate": "2021-07-27T21:48:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hmm. The failure in `FindOlderVisualStudioEnvironmentByEnvironmentVariable` is interesting. Do we care about supporting environment variables with paths that are sufficiently old that they still have a version number in them? That's two major versions behind, and I think \"no\". We've been telling people to use MSBuildLocator for roughly all of the 15 and 16 timeframe and \"load the MSBuild that comes with the environment you want to build in for all of those cycles. I'm going to just delete the test but this is up for debate if someone wants to argue.",
        "createdAt": "2021-07-16T22:03:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Hmm. The failure in `FindOlderVisualStudioEnvironmentByEnvironmentVariable` is interesting. Do we care about supporting environment variables with paths that are sufficiently old that they still have a version number in them? That's two major versions behind, and I think \"no\". We've been telling people to use MSBuildLocator for roughly all of the 15 and 16 timeframe and \"load the MSBuild that comes with the environment you want to build in for all of those cycles. I'm going to just delete the test but this is up for debate if someone wants to argue.\r\n\r\nMaybe a new PR that removes the concept from MSBuild altogether?",
        "createdAt": "2021-07-16T23:07:57Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "In the latest version of the PR, how are you making sure that the `IntPtr.Size == 8` check runs in the non-VS hosted scenario? Apologies if this is a stupid question, I am just not seeing it with my tired eyes \ud83d\ude2b ",
        "createdAt": "2021-07-27T21:26:18Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Apologies if this is a stupid question, I am just not seeing it with my tired eyes\r\n\r\nYour tired eyes are better than my midafternoon eyes, it seems. Reverting that change.",
        "createdAt": "2021-07-27T21:47:05Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: `OrdinalIgnoreCase` is a better choice for paths.",
              "createdAt": "2021-07-19T11:06:06Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -320,7 +317,8 @@ private static BuildEnvironment TryFromStandaloneMSBuildExe(string msBuildExePat\n         private static string GetVsRootFromMSBuildAssembly(string msBuildAssembly)\n         {\n             return FileUtilities.GetFolderAbove(msBuildAssembly,\n-                Regex.IsMatch(msBuildAssembly, $@\"\\\\Bin\\\\Amd64\\\\MSBuild\\.exe\", RegexOptions.IgnoreCase)\n+                Path.GetDirectoryName(msBuildAssembly)\n+                  .EndsWith(@\"\\amd64\", StringComparison.InvariantCultureIgnoreCase)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we're calculating MSBuild.exe's path anyway, why pass through this assembly over that one? As far as I can tell, it just means we need to do a little more avoidable work later when it comes to calling GetMSBuildExeFromVsRoot.",
              "createdAt": "2021-07-19T14:02:02Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -183,7 +183,7 @@ private static BuildEnvironment TryFromMSBuildAssembly()\n             var msBuildDll = Path.Combine(FileUtilities.GetFolderAbove(buildAssembly), \"MSBuild.dll\");\n \n             // First check if we're in a VS installation\n-            var environment = TryFromMSBuildAssemblyUnderVisualStudio(buildAssembly, msBuildExe);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, looked like both callers could use just the path so switched to that (and renamed for clarity).",
              "createdAt": "2021-07-27T19:49:38Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -183,7 +183,7 @@ private static BuildEnvironment TryFromMSBuildAssembly()\n             var msBuildDll = Path.Combine(FileUtilities.GetFolderAbove(buildAssembly), \"MSBuild.dll\");\n \n             // First check if we're in a VS installation\n-            var environment = TryFromMSBuildAssemblyUnderVisualStudio(buildAssembly, msBuildExe);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "As @ladipro pointed out this was wrong. We compute _a_ path to MSBuild but the right MSBuild.exe path may be elsewhere (in the amd64 folder), so we have to recompute it anyway.",
              "createdAt": "2021-07-27T21:49:16Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -183,7 +183,7 @@ private static BuildEnvironment TryFromMSBuildAssembly()\n             var msBuildDll = Path.Combine(FileUtilities.GetFolderAbove(buildAssembly), \"MSBuild.dll\");\n \n             // First check if we're in a VS installation\n-            var environment = TryFromMSBuildAssemblyUnderVisualStudio(buildAssembly, msBuildExe);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}