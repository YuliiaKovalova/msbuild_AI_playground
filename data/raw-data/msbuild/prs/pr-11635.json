{
  "number": 11635,
  "title": "Optimize TaskItem cloning between Engine and Tasks",
  "body": "### Context\r\n\r\nCurrently the engine and task implementations of `ITaskItem` will always do a full rebuild of their backing `ImmutableDictionary<string, T>`. This is due to having different backing types (string vs `ProjectMetadataInstance`), plus `CopyOnWriteDictionary<T>` type living under `Shared`, preventing type guards from working even if it *did* expose the bakcing dictionary.\r\n\r\nThis affects both Tasks copying metadata within a task, as well as the engine whenever any task completes execution, as `Utilities.TaskItem` must always be converted back into `ProjectItemInstance.TaskItem`. See `GatherTaskItemOutputs` in a profiler to see how expensive this is, with most of the impact coming from RAR.\r\n\r\n### Changes Made\r\n\r\nThis PR is largely two parts:\r\n- Moving types around and modifying the backing collections which use `ImmutableDictionary` to allow reference equality checks.\r\n- Giving `TaskITem` implementations the ability to clone from other implementations when given a `CopyOnWriteDictionary` instance.\r\n\r\nAlso adds a simple optimization in RAR to cache any `ProjectItemInstance.TaskItem` instances which came from a source file into temporary `Utilities.TaskItem`, avoiding the expensive enumeration. These are reused across references within each RAR invocation, and the shared `ImmutableDictionary` types allow us to do this for free. (Could probably split that off into its own PR to wait till this is merged, but it's a couple lines and net negative perf without this so...)\r\n\r\n### Testing\r\n\r\nExample of spending 1718ms in `GatherTaskItemOutputs` alone:\r\n![image](https://github.com/user-attachments/assets/2dc632c8-2057-48d1-95b5-a3fdfa99f451)\r\n\r\n374 ms with this change. Note that the `TaskItem` copying doesn't even show up in the profile here since it's just a no-op clone, so it's effectively free and the rest is unrelated overhead.\r\n![image](https://github.com/user-attachments/assets/53bc2aba-8b15-4b30-ab69-efcf9f81f3a5)\r\n\r\nNeed to test on more repos, and other hotspots are hard to track since these get passed around everywhere - but there's a pretty clear difference just running ad-hoc builds back-to-back:\r\n\r\nThis PR:\r\n```\r\n     2371 ms  MSBuild                                  1053 calls\r\n     8232 ms  ResolveAssemblyReference                 142 calls\r\n...\r\nTime Elapsed 00:00:38.69\r\n```\r\nMainline:\r\n```\r\n     2537 ms  MSBuild                                  1053 calls\r\n     9117 ms  ResolveAssemblyReference                 142 calls\r\n...\r\nTime Elapsed 00:00:40.73\r\n```\r\n\r\n\r\n### Notes\r\nPretty confident on the overall design, but still need to UT and see if there are places consolidate code since there's a fair amount of type casting and duplication in the TaskItem CopyTo() / ImportMetadata() methods that I think can be cleaned up still. May be able split this into A. Moves / modyfing the types + B. Optimized cloning",
  "state": "OPEN",
  "createdAt": "2025-03-27T12:22:18Z",
  "updatedAt": "2025-04-01T02:49:12Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 725,
  "deletions": 310,
  "changedFiles": 23,
  "headRefName": "dev/chcasta/prop-perf-1",
  "isDraft": true,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6ef96cb1dc2dd3f173352c0479a5f59099fccb9c",
          "message": "Optimize TaskItem cloning between Engine and Tasks",
          "committedDate": "2025-03-27T11:38:08Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "440527cc54483b0437fbd1cb90ea68090c38ae03",
          "message": "Merge branch 'main' into dev/chcasta/prop-perf-1",
          "committedDate": "2025-03-27T20:31:00Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ea4f1c6d3b90ecda3637f9bd1b054bf54711c89",
          "message": "Fix false positive UT errors due to Shoudly reference equality",
          "committedDate": "2025-03-28T11:09:51Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ac150f97edd9e8f43ebf7d40a5bcb52bb9a0efa",
          "message": "Fix metadata precedence on returned ProjectItemInstance.TaskItem",
          "committedDate": "2025-03-28T11:28:19Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d94e433bc000c0d19f9347434ae2113ee39c4de",
          "message": "Add fast path for single item definitions in MetadataCollection",
          "committedDate": "2025-03-28T11:29:04Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b38d6178e9d93bca1ce105b707e119943899cd96",
          "message": "Merge branch 'main' into dev/chcasta/prop-perf-1",
          "committedDate": "2025-03-28T12:03:04Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "32187633+ccastanedaucf@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2088a6be953f3d0dca3acc200ead635cab15d62a",
          "message": "Use correct equals",
          "committedDate": "2025-03-28T23:45:31Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "702c879bf5db175edc2c526b8afada74f0d0a515",
          "message": "fix forreals",
          "committedDate": "2025-03-28T23:50:47Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6508721e62b00d516e43ad85c66b12e4c54e52a5",
          "message": "make very much way more faster",
          "committedDate": "2025-03-31T17:35:30Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2d8731ebc42ac8cbff8a36f063c145ba57577757",
          "message": "Merge branch 'main' into dev/chcasta/prop-perf-1",
          "committedDate": "2025-03-31T19:18:36Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "32187633+ccastanedaucf@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbe9cf0859c12c8364c2c5a650c5327302f5ab54",
          "message": "fix broken build after merge",
          "committedDate": "2025-03-31T20:28:29Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13e14458d6ae7e8a29821b940fbb340c8edea4c7",
          "message": "fix compile (agian)",
          "committedDate": "2025-03-31T22:03:10Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a5df2c9d486f2479d039bd1fdd48ec38eb940a2",
          "message": "UTs",
          "committedDate": "2025-04-01T00:27:42Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b940fe6741582abae1d8a9828e5ff5ab52c6421f",
          "message": "Remove unused",
          "committedDate": "2025-04-01T01:59:11Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The failing tests all fail when I checked out upstream, so not sure what's going on there. Otherwise I've had great numbers building on other repos.\r\n\r\nI just tested a few runs on Orchard Core and it's around 37% cut from RAR alone, plus seems like every task is consistently faster.\r\n\r\nMulti-proc:\r\n`...\\artifacts\\bin\\bootstrap\\core\\dotnet.exe build -tl:off -restore:false /clp:PerformanceSummary /m`\r\n\r\nBefore:\r\n```\r\n      891 ms  Hash                                     1064 calls\r\n      974 ms  Microsoft.Build.Tasks.Git.GetUntrackedFiles 420 calls\r\n     1116 ms  AssignProjectConfiguration               436 calls\r\n     1243 ms  ResolvePackageAssets                     436 calls\r\n     1414 ms  ResolveTargetingPackAssets               436 calls\r\n     3039 ms  Copy                                     7037 calls\r\n     5140 ms  ResolvePackageFileConflicts              436 calls\r\n    19162 ms  ResolveAssemblyReference                 436 calls\r\n    132508 ms  CallTarget                               872 calls\r\n    3940843 ms  MSBuild                                  2388 calls\r\n\r\nTime Elapsed 00:00:26.55\r\n```\r\n\r\nAfter:\r\n```\r\n      696 ms  Hash                                     1064 calls\r\n      776 ms  ResolvePackageAssets                     436 calls\r\n      814 ms  Microsoft.Build.Tasks.Git.GetUntrackedFiles 420 calls\r\n      869 ms  ProcessFrameworkReferences               436 calls\r\n      890 ms  AssignProjectConfiguration               436 calls\r\n     2636 ms  Copy                                     7037 calls\r\n     4720 ms  ResolvePackageFileConflicts              436 calls\r\n    12221 ms  ResolveAssemblyReference                 436 calls\r\n    82668 ms  CallTarget                               872 calls\r\n    4317227 ms  MSBuild                                  2388 calls\r\n\r\nTime Elapsed 00:00:24.46\r\n```\r\n\r\nSingle proc (still important for quickbuild):\r\n`...\\artifacts\\bin\\bootstrap\\core\\dotnet.exe build -tl:off -restore:false /clp:PerformanceSummary /m:1`\r\n\r\nBefore\r\n```\r\n      385 ms  Hash                                     1064 calls\r\n      457 ms  ProcessFrameworkReferences               436 calls\r\n      530 ms  AssignProjectConfiguration               436 calls\r\n      531 ms  Microsoft.Build.Tasks.Git.GetUntrackedFiles 420 calls\r\n      770 ms  ResolvePackageAssets                     436 calls\r\n      781 ms  ResolveTargetingPackAssets               436 calls\r\n     1165 ms  CallTarget                               872 calls\r\n     2122 ms  Copy                                     7037 calls\r\n     2993 ms  ResolvePackageFileConflicts              436 calls\r\n    10429 ms  ResolveAssemblyReference                 436 calls\r\n    321574 ms  MSBuild                                  2388 calls\r\n\r\nTime Elapsed 00:01:12.34\r\n```\r\nAfter\r\n```\r\n      362 ms  Hash                                     1064 calls\r\n      405 ms  ProcessFrameworkReferences               436 calls\r\n      436 ms  AssignProjectConfiguration               436 calls\r\n      504 ms  Microsoft.Build.Tasks.Git.GetUntrackedFiles 420 calls\r\n      651 ms  ResolvePackageAssets                     436 calls\r\n      751 ms  WriteLinesToFile                         1492 calls\r\n     1016 ms  CallTarget                               872 calls\r\n     1887 ms  Copy                                     7037 calls\r\n     2874 ms  ResolvePackageFileConflicts              436 calls\r\n     6522 ms  ResolveAssemblyReference                 436 calls\r\n    286337 ms  MSBuild                                  2388 calls\r\n\r\nTime Elapsed 00:01:04.97\r\n```",
        "createdAt": "2025-03-28T13:52:10Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "kk going to leave this drafted for reference and get a parent item up tomorrow. I have detailed perf analysis that all looks great, but a couple parts look riskier than others so I do want to split it up so it's an easy revert in the worst case. I think those risky bits are:\r\n- `_directMetadata` -> `_itemDefinitions` ordering requirements. This was the trickiest part to get right since there are 3 different \"views\" you could have on the metadata in `ProjectItemInstance.TaskItem` depending on which methods you access. Aka enumerating metadata may shadow item definitions that would appear if you called `GetMetadataValueEscaped()`. And then depending on which type of item you import and which direction, you either shadow the current item definitions or offset the list. I would expect the enumerated collection to match what is returned by `GetMetadataValueEscaped()`, but any change to this is breaking behavior. Fun.\r\n- AppDomain stuff. Tbh not super familiar with how important that path is for perf and `CopyOnWriteDictionary<string>` is serializable, but I imagine that kills no-op cloning so it would probably just be better to pass an array or the likes in those cases. I haven't tested that at all though.\r\n\r\nAllocation wise looks much improved as well, despite creating a new `ProjectMetadataInstance` on every `CopyOnWritePropertyDictionary` lookup. Getting a diff from 17,910 MB -> 15,943 MB on a clean run of Orchard Core (-11%).",
        "createdAt": "2025-04-01T02:49:11Z",
        "author": {
          "login": "ccastanedaucf"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This appears to introduce a loop:\r\n\r\n```\r\n>\tMicrosoft.Build.dll!Microsoft.Build.Execution.ProjectMetadataInstance.Equals(object other) Line 192\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.Execution.ProjectMetadataInstance.Equals(object other) Line 192\tC#\r\n \t[The 1 frame(s) above this were repeated 12137 times]\t\r\n \tShouldly.dll!Shouldly.EqualityComparer<object>.Equals(object x, object y) Line 80\tC#\r\n \tShouldly.dll!Shouldly.EqualityComparerAdapter.Equals(object x, object y) Line 20\tC#\r\n \tShouldly.dll!Shouldly.EqualityComparer<Microsoft.Build.Collections.CopyOnWritePropertyDictionary>.Equals(Microsoft.Build.Collections.CopyOnWritePropertyDictionary x, Microsoft.Build.Collections.CopyOnWritePropertyDictionary y) Line 53\tC#\r\n \tShouldly.dll!Shouldly.Is.Equal<Microsoft.Build.Collections.CopyOnWritePropertyDictionary>(Microsoft.Build.Collections.CopyOnWritePropertyDictionary expected, Microsoft.Build.Collections.CopyOnWritePropertyDictionary actual, System.Collections.Generic.IEqualityComparer<Microsoft.Build.Collections.CopyOnWritePropertyDictionary> comparer) Line 33\tC#\r\n \tShouldly.dll!Shouldly.Is.Equal<Microsoft.Build.Collections.CopyOnWritePropertyDictionary>(Microsoft.Build.Collections.CopyOnWritePropertyDictionary expected, Microsoft.Build.Collections.CopyOnWritePropertyDictionary actual) Line 28\tC#\r\n \tShouldly.dll!Shouldly.ShouldBeTestExtensions.ShouldBe.AnonymousMethod__1(Microsoft.Build.Collections.CopyOnWritePropertyDictionary v) Line 21\tC#\r\n \tShouldly.dll!Shouldly.ShouldlyCoreExtensions.AssertAwesomely<Microsoft.Build.Collections.CopyOnWritePropertyDictionary>(Microsoft.Build.Collections.CopyOnWritePropertyDictionary actual, System.Func<Microsoft.Build.Collections.CopyOnWritePropertyDictionary, bool> specifiedConstraint, object originalActual, object originalExpected, string customMessage, string shouldlyMethod) Line 39\tC#\r\n \tShouldly.dll!Shouldly.ShouldBeTestExtensions.ShouldBe<Microsoft.Build.Collections.CopyOnWritePropertyDictionary>(Microsoft.Build.Collections.CopyOnWritePropertyDictionary actual, Microsoft.Build.Collections.CopyOnWritePropertyDictionary expected, string customMessage) Line 21\tC#\r\n \tMicrosoft.Build.Engine.UnitTests.dll!Microsoft.Build.UnitTests.OM.Collections.CopyOnWritePropertyDictionary_Tests.Equal.__Test|5_0(Microsoft.Build.Collections.CopyOnWritePropertyDictionary a, Microsoft.Build.Collections.CopyOnWritePropertyDictionary b, bool expected) Line 141\tC#\r\n \tMicrosoft.Build.Engine.UnitTests.dll!Microsoft.Build.UnitTests.OM.Collections.CopyOnWritePropertyDictionary_Tests.Equal() Line 130\tC#\r\n```",
              "createdAt": "2025-03-28T16:41:45Z",
              "path": "src/Build/Instance/ProjectMetadataInstance.cs",
              "diffHunk": "@@ -185,6 +189,10 @@ void ITranslatable.Translate(ITranslator translator)\n \n         #endregion\n \n+        public override bool Equals(object other) => other is ProjectMetadataInstance projectMetadataInstance && Equals(projectMetadataInstance);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "```suggestion\r\n        public override bool Equals(object other) => other is ProjectMetadataInstance projectMetadataInstance &&\r\n            _name == projectMetadataInstance._name &&\r\n            _escapedValue == projectMetadataInstance._escapedValue;\r\n```\r\n\r\n?",
              "createdAt": "2025-03-28T16:46:53Z",
              "path": "src/Build/Instance/ProjectMetadataInstance.cs",
              "diffHunk": "@@ -185,6 +189,10 @@ void ITranslatable.Translate(ITranslator translator)\n \n         #endregion\n \n+        public override bool Equals(object other) => other is ProjectMetadataInstance projectMetadataInstance && Equals(projectMetadataInstance);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's because the typed `Equals()` is behind an explicit `IEquatable<ProjectMetadataInstance>` so it never gets hit. Probably undid it while shuffling things around lol. This only gets hit in shouldly UTs tho since everything in engine uses the typed comparer or compares via `ReferenceEquals()`",
              "createdAt": "2025-03-28T23:54:30Z",
              "path": "src/Build/Instance/ProjectMetadataInstance.cs",
              "diffHunk": "@@ -185,6 +189,10 @@ void ITranslatable.Translate(ITranslator translator)\n \n         #endregion\n \n+        public override bool Equals(object other) => other is ProjectMetadataInstance projectMetadataInstance && Equals(projectMetadataInstance);",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      }
    ]
  }
}