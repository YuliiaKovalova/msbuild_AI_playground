{
  "number": 8688,
  "title": "[RAR] Don't do I/O on SDK-provided references",
  "body": "Fixes #8634\r\n\r\n### Context\r\n\r\nFor SDK/workload references, the SDK is currently already passing relevant metadata such as `AssemblyVersion` and `PublicKeyToken`, so there is no need for RAR to open these files and parse their .NET metadata tables to get this information. Also, barring corrupted installs, these files are guaranteed to exist on disk so there is no need for RAR to do any I/O on them (file-exists, get-time-stamp, ..)\r\n\r\n### Changes Made\r\n\r\nTweaked RAR to trust the item metadata passed by the SDK. The feature is gated on the presence of the `FrameworkReferenceName` metadatum which is not documented and is used only by the relevant SDK tasks, to my best knowledge.\r\n\r\nSDK does not specify the `Culture` component of assembly names so it's assumed to be `neutral`. This has passed all relevant validation so far. If non-neutral assemblies are ever used as references, we'll need to define a metadatum for SDK to set.\r\n\r\n### Testing\r\n\r\n- Existing and new unit tests.\r\n- Experimental insertion with an assert that assembly names calculated from item metadata are equivalent to those extracted from assembly files (verifies that the `Culture=neutral` assumption is correct).\r\n- Checked all assemblies specified in all `FrameworkList.xml` files shipped in the SDK (+ workloads) and verified that all of them are culture neutral.\r\n\r\n### Perf results\r\n\r\nRAR micro-benchmark where the task is invoked with parameters corresponding to building a simple AspNetCore app:\r\n- 13.13 ms -> 3.27 ms per invocation without StateFile cache.\r\n- 15.03 ms -> 5.13 ms per invocation with StateFile cache.\r\n\r\nRAR task duration as reported with `/clp:PerformanceSummary` when building a simple AspNetCore app with MSBuild server enabled:\r\n- 20 ms -> 10 ms.\r\n\r\n### Notes\r\n\r\n- The change is behind a 17.8 changewave.\r\n- No changes have been made to per-project caching (via the `StateFile` parameter) to reduce scope. Changes to the per-project cache file will be done in another PR.\r\n",
  "state": "MERGED",
  "createdAt": "2023-04-21T08:25:25Z",
  "updatedAt": "2023-05-10T07:10:45Z",
  "closedAt": "2023-05-05T21:48:32Z",
  "mergedAt": "2023-05-05T21:48:32Z",
  "additions": 206,
  "deletions": 148,
  "changedFiles": 19,
  "headRefName": "rar-no-sdk-io",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "24a177bb81557ec6556abc5724c106c656b69e45",
          "message": "Don't do I/O on SDK-provided references",
          "committedDate": "2023-04-21T08:23:58Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d003a9baf1b73a4d7288993bdb2e7325366c963",
          "message": "Use changewave 17.8, delete changewave 17.2",
          "committedDate": "2023-05-02T16:06:35Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de1a6593efdc54a14eafcf206ef55bc4c12c8ce5",
          "message": "PR feedback: Use GetMetadata(FileName)",
          "committedDate": "2023-05-03T06:55:27Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5e5903844cd0643872d4ae13c5202049be4f33f3",
          "message": "Use AssemblyName metadata if available",
          "committedDate": "2023-05-03T08:29:06Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be583ab9eeb5ffc0d6779d3d9f44ca0337a765e5",
          "message": "Remove extraneous SetGetLastWriteTime call",
          "committedDate": "2023-05-03T08:30:34Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16238858ed7a8ea3f8aac419bb4f6719b1e32851",
          "message": "Update SDKReferencesAreResolvedWithoutIO to test assembly name",
          "committedDate": "2023-05-03T09:05:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aee51133e33f1664f50d1faca032f45b1065e128",
          "message": "Intercept GetAssemblyRuntimeVersion per @rokonec's feedback",
          "committedDate": "2023-05-04T10:42:11Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "There were concern about this changes and Runtime build\r\nI have tried to build Runtime repo on Linux with no issues. I have tested just development inner loop build. \r\nBuilding and testing on CI might still surface some issues, after insertion of these changes and its propagation to Installer, we shall do experimental insertion into Runtime CI.",
        "createdAt": "2023-04-27T09:11:40Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I have addressed feedback and run another experimental insertion. It flagged several major improvements in, quite surprisingly, the add-new-project scenario (-30% reference set, for example).\r\n\r\n@rokonec noticed that we still open SDK assemblies to read their metadata version (\"runtime version\"), which doesn't look necessary. I made `GetAssemblyRuntimeVersion` return the hardcoded `v4.0.30319` to remove this I/O, with the following justification:\r\n- None of the assemblies currently distributed with the SDK/workloads appear to have anything else than this canonical version.\r\n- Daniel is not aware of an issue with this assumption.\r\n- The metadata parsing code has a bug that prevents it from detecting WinRT/winmd files, which would have been the only thing potentially broken by the change (#8731). I.e. _it doesn't work anyways_.\r\n\r\n@Forgind @rainersigwald, please review. Merging this PR will unblock further RAR perf work.",
        "createdAt": "2023-05-04T21:59:55Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We typically do every other version, so 17.8",
              "createdAt": "2023-04-24T15:57:04Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thank you, I've updated it to 17.8.",
              "createdAt": "2023-05-03T06:56:10Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also, add to changewaves doc?",
              "createdAt": "2023-04-24T15:57:43Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);\n+        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6, Wave17_7 };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We should also retire 17.2 if I'm recalling the docs correctly.",
              "createdAt": "2023-04-28T15:42:15Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);\n+        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6, Wave17_7 };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agreed (but in a separate PR)",
              "createdAt": "2023-04-28T22:01:22Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);\n+        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6, Wave17_7 };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "There are no changes gated on 17.2 so I've removed it from the list in this PR.",
              "createdAt": "2023-05-03T06:57:14Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -27,7 +27,8 @@ internal class ChangeWaves\n         internal static readonly Version Wave17_2 = new Version(17, 2);\n         internal static readonly Version Wave17_4 = new Version(17, 4);\n         internal static readonly Version Wave17_6 = new Version(17, 6);\n-        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6 };\n+        internal static readonly Version Wave17_7 = new Version(17, 7);\n+        internal static readonly Version[] AllWaves = { Wave17_2, Wave17_4, Wave17_6, Wave17_7 };",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We're currently saying this is only for immutable framework references, but do you think we might extend that later? If so, maybe we should use a somewhat more generic name?",
              "createdAt": "2023-04-27T23:01:23Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyResolution.cs",
              "diffHunk": "@@ -48,6 +49,7 @@ internal static class AssemblyResolution\n             string sdkName,\n             string rawFileNameCandidate,\n             bool isPrimaryProjectReference,\n+            bool isImmutableFrameworkReference,",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'd say what's interesting is not the immutability, but that we can assume its dependency closure is provided by the framework so don't need to explore it--right?",
              "createdAt": "2023-04-28T15:44:13Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyResolution.cs",
              "diffHunk": "@@ -48,6 +49,7 @@ internal static class AssemblyResolution\n             string sdkName,\n             string rawFileNameCandidate,\n             bool isPrimaryProjectReference,\n+            bool isImmutableFrameworkReference,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Fair...fullyUnderstoodReferences? Better name with that intent?",
              "createdAt": "2023-04-28T22:03:41Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyResolution.cs",
              "diffHunk": "@@ -48,6 +49,7 @@ internal static class AssemblyResolution\n             string sdkName,\n             string rawFileNameCandidate,\n             bool isPrimaryProjectReference,\n+            bool isImmutableFrameworkReference,",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> I'd say what's interesting is not the immutability, but that we can assume its dependency closure is provided by the framework so don't need to explore it--right?\r\n\r\nNot quite right.  The property of \"dependency closure is provided\" is signaled with the `ExternallyResolved` metadatum. It is a pre-existing behavior that for such assemblies we skip the dependency walk. It is happening here:\r\nhttps://github.com/dotnet/msbuild/blob/768cad16718650f120dd42acfcc9cf5c4dec555f/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1692-L1699\r\n\r\nThis new flag means \"the file is guaranteed to exist and never change\" and in the `Resolver` hierarchy it's used only in `RawFilenameResolver` to skip the file existence check.\r\n\r\nAs for the name, I was on the fence between \"immutable\" and \"framework\"  so I used both \ud83d\ude00",
              "createdAt": "2023-05-03T08:46:11Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyResolution.cs",
              "diffHunk": "@@ -48,6 +49,7 @@ internal static class AssemblyResolution\n             string sdkName,\n             string rawFileNameCandidate,\n             bool isPrimaryProjectReference,\n+            bool isImmutableFrameworkReference,",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Think we should have a check for if ItemSpec is empty? (Can ItemSpec be empty?)",
              "createdAt": "2023-04-27T23:05:04Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The code has been updated to obtain the name from metadata.",
              "createdAt": "2023-05-03T08:32:42Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why does it have to be Primary? Why does assemblyName have to be null?",
              "createdAt": "2023-04-27T23:06:30Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1225,6 +1253,17 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             string rawFileNameCandidate,\n             Reference reference)\n         {\n+            bool isImmutableFrameworkReference = false;\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_7))\n+            {\n+                // For a path to be an immutable reference, it must be externally resolved and has a FrameworkReferenceName defined.\n+                if (assemblyName == null && !string.IsNullOrEmpty(rawFileNameCandidate) && reference.IsPrimary && reference.ExternallyResolved)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We're basically saying: If we are given a file path and not assembly name (`assemblyName` is not set, `rawFileNameCandidate` is set), and it is a primary (as in passed to RAR in a parameter, not discovered in dependency walk) and externally resolved (doesn't require dependency walk) dependency, we can consider it to be immutable.\r\n\r\nI believe `ExternallyResolved` implies `IsPrimary` so it could be removed but I think this way it captures the concept better. In fact, we could remove this condition altogether if we trust nobody but the SDK task sets `FrameworkReferenceName`. It's more like defense-in-depth so the new logic kicks in only in scenarios where we tested it.\r\n",
              "createdAt": "2023-05-03T08:55:14Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1225,6 +1253,17 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             string rawFileNameCandidate,\n             Reference reference)\n         {\n+            bool isImmutableFrameworkReference = false;\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_7))\n+            {\n+                // For a path to be an immutable reference, it must be externally resolved and has a FrameworkReferenceName defined.\n+                if (assemblyName == null && !string.IsNullOrEmpty(rawFileNameCandidate) && reference.IsPrimary && reference.ExternallyResolved)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> passed to RAR in a parameter, not discovered in dependency walk\r\n\r\nThis is the part I find most confusing. Why should it matter how a reference got to RAR? Either it's immutable or it isn't, but having RAR specifically reference it shouldn't affect whether it's the sort of reference that changes. I can imagine a design in which the SDK passes all of its references to RAR (and since this change was quite impactful, I'd assume that's true, or we at least pretend it's true), but I could also imagine a design in which the SDK passes a few entrypoint references to RAR, and the rest comes indirectly even though they're all immutable and even in fixed positions relative to each other. Why do we care about which design is used?",
              "createdAt": "2023-05-05T17:26:34Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1225,6 +1253,17 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             string rawFileNameCandidate,\n             Reference reference)\n         {\n+            bool isImmutableFrameworkReference = false;\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_7))\n+            {\n+                // For a path to be an immutable reference, it must be externally resolved and has a FrameworkReferenceName defined.\n+                if (assemblyName == null && !string.IsNullOrEmpty(rawFileNameCandidate) && reference.IsPrimary && reference.ExternallyResolved)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I think the design with SDK passing all SDK assembly references is something that's unlikely to change. It's an important optimization and we would take several steps back perf-wise if we had to crack open SDK assemblies to find the closure.\r\n\r\nConceptually I agree that we're artificially limiting the scenario to the specifics of how the system works today. I see it more like defense-in-depth to avoid accidentally exposing something that we would later regret supporting.",
              "createdAt": "2023-05-10T07:10:44Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1225,6 +1253,17 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             string rawFileNameCandidate,\n             Reference reference)\n         {\n+            bool isImmutableFrameworkReference = false;\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_7))\n+            {\n+                // For a path to be an immutable reference, it must be externally resolved and has a FrameworkReferenceName defined.\n+                if (assemblyName == null && !string.IsNullOrEmpty(rawFileNameCandidate) && reference.IsPrimary && reference.ExternallyResolved)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nAny reason to not remove _cache.SetGetLastWriteTime above?",
              "createdAt": "2023-04-27T23:17:57Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2295,13 +2295,34 @@ private List<DependentAssembly> GetAssemblyRemappingsFromAppConfig()\n                     _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n \n                     // Cache delegates.\n-                    getAssemblyName = _cache.CacheDelegate(getAssemblyName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Nice catch! Done.",
              "createdAt": "2023-05-03T08:30:59Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2295,13 +2295,34 @@ private List<DependentAssembly> GetAssemblyRemappingsFromAppConfig()\n                     _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);\n \n                     // Cache delegates.\n-                    getAssemblyName = _cache.CacheDelegate(getAssemblyName);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it safe to assume that all ExternallyResolved assemblies have filename that matches assembly name? I know that's not true in general.",
              "createdAt": "2023-04-28T16:19:18Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);\n+\n+            AssemblyName assemblyName = new AssemblyName($\"{name}, Version={version}, Culture=neutral, PublicKeyToken={publicKeyToken}\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, they are constructed that way in\r\n\r\nhttps://github.com/dotnet/sdk/blob/4e27ad22e1513ce8920f7059daf004235cd516fc/src/Tasks/Microsoft.NET.Build.Tasks/ResolveTargetingPackAssets.cs#L436",
              "createdAt": "2023-05-03T07:00:24Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);\n+\n+            AssemblyName assemblyName = new AssemblyName($\"{name}, Version={version}, Culture=neutral, PublicKeyToken={publicKeyToken}\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Although there is a code path where the `Path` attribute is used and assembly name may be different.\r\n\r\nOk, I don't see any existing framework assembly for which filename wouldn't match assembly name but let's future proof this and add an explicit `AssemblyName` to the SDK task: https://github.com/dotnet/sdk/pull/32213",
              "createdAt": "2023-05-03T08:21:20Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);\n+\n+            AssemblyName assemblyName = new AssemblyName($\"{name}, Version={version}, Culture=neutral, PublicKeyToken={publicKeyToken}\");",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you simplify to `item.GetMetadata(\"FileName\")` to delegate to the default implementation?",
              "createdAt": "2023-04-28T16:20:15Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done.",
              "createdAt": "2023-05-03T06:58:11Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -823,6 +828,29 @@ private static void TryGetAssemblyNameComponent(string fusionName, string compon\n             }\n         }\n \n+        /// <summary>\n+        /// Tries to create an <see cref=\"AssemblyNameExtension\"/> out of a primary reference metadata.\n+        /// </summary>\n+        private static AssemblyNameExtension GetAssemblyNameFromItemMetadata(ITaskItem item)\n+        {\n+            string version = item.GetMetadata(ItemMetadataNames.assemblyVersion);\n+            if (string.IsNullOrEmpty(version))\n+            {\n+                return null;\n+            }\n+\n+            string publicKeyToken = item.GetMetadata(ItemMetadataNames.publicKeyToken);\n+            if (string.IsNullOrEmpty(publicKeyToken))\n+            {\n+                return null;\n+            }\n+\n+            string name = Path.GetFileNameWithoutExtension(item.ItemSpec);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a bit surprised by this since the implementation elsewhere assumes that the filename is the assembly name--having a test case where that's not true doesn't break anything?",
              "createdAt": "2023-04-28T17:09:27Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -8564,5 +8566,56 @@ private static void GenerateRedistAndProfileXmlLocations(string fullRedistConten\n \n             File.WriteAllText(profileRedistList, profileListContents);\n         }\n+\n+        [Fact]\n+        public void SDKReferencesAreResolvedWithoutIO()\n+        {\n+            InitializeRARwithMockEngine(_output, out MockEngine mockEngine, out ResolveAssemblyReference rar);\n+\n+            string refPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I have updated the test to use the explicit `AssemblyName` metadatum. Not completely sure I understand the concern. If MSBuild is given the right metadata to activate the \"no I/O path\", it just trusts what we pass it. In the first version of the PR the assembly name was inferred from file name but, as you pointed out, because it's fragile, I have added a check for `AssemblyName` and made the SDK task pass it to us.",
              "createdAt": "2023-05-03T09:10:47Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -8564,5 +8566,56 @@ private static void GenerateRedistAndProfileXmlLocations(string fullRedistConten\n \n             File.WriteAllText(profileRedistList, profileListContents);\n         }\n+\n+        [Fact]\n+        public void SDKReferencesAreResolvedWithoutIO()\n+        {\n+            InitializeRARwithMockEngine(_output, out MockEngine mockEngine, out ResolveAssemblyReference rar);\n+\n+            string refPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}