{
  "number": 3609,
  "title": "Update build documentation",
  "body": "",
  "state": "MERGED",
  "createdAt": "2018-08-15T00:55:38Z",
  "updatedAt": "2020-12-30T22:53:07Z",
  "closedAt": "2018-08-20T23:42:33Z",
  "mergedAt": "2018-08-20T23:42:33Z",
  "additions": 53,
  "deletions": 72,
  "changedFiles": 2,
  "headRefName": "documentation",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ae68848bd026e72cd214463178f011e7133ee7bc",
          "message": "update build documentation",
          "committedDate": "2018-08-15T00:53:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b7b53d93f0aab3e51c6644cb4f85238895133deb",
          "message": "Markdown nits",
          "committedDate": "2018-08-15T18:14:43Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9e2cf26c7c0dd7bb91aab19213df898499a7e39",
          "message": "Use .NET Core SDK in docs",
          "committedDate": "2018-08-15T18:19:13Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c2d10da1caa9b81265b33a6d83e9c8eea3cec0a",
          "message": "Full framework doc tweaks",
          "committedDate": "2018-08-15T18:38:39Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be598ec4bed1c935c397232111d7303e556da501",
          "message": "Update Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md",
          "committedDate": "2018-08-15T19:31:22Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5010ff139552fa69928bf983db583b1da5356eb",
          "message": "Change core sdk url",
          "committedDate": "2018-08-20T17:50:30Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1945d3a792ec706d3956f5b9dedf9f6e2475d2b1",
          "message": "Update correct link",
          "committedDate": "2018-08-20T17:51:47Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc336d3474c3bc6e18fd87cc127113e73a3067b9",
          "message": "Update Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md",
          "committedDate": "2018-08-20T18:04:21Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Cut last sentence?",
              "createdAt": "2018-08-15T18:39:05Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md",
              "diffHunk": "@@ -1,60 +1,39 @@\n **These instructions refer to working with the Master branch.**\n \n ## Required Software\n-**Microsoft Visual Studio 2015 **\n+** Latest Microsoft Visual Studio 2017 **\n \n-This version of MSBuild closely aligns to the version that ships with Visual Studio 2015. You may be able to build and debug with Visual Studio 2013, but using Visual Studio 2015 is recommended. You can download the community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).\n+You can download the Visual Studio community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).\n \n-> MSBuild requires that you have the Windows SDK plugin installed with Visual Studio 2015. Make sure you have the plugin selected when installing Visual Studio. You can also modify your existing VS installation by running the installer again. ![](https://cloud.githubusercontent.com/assets/3347530/10229970/69396342-6840-11e5-8ef6-1f4434c4b36f.png)\n-\n-> Please note this is intending as a standalone build engine, not integrated with Visual Studio. We may add support/documentation for that scenario if we see community interest for it.\n+All command line usage must be done from a Visual Studio developer command prompt.\n \n ## Getting the code\n \n 1. Clone the repo: `git clone https://github.com/Microsoft/msbuild.git`\n-2. Build on the command line: `cibuild.cmd --target Full --scope Compile --bootstrap-only`\n-3. Open the solution file in Visual Studio 2015 (`src/MSBuild.sln`).\n+2. Build on the command line: `build.cmd`\n+3. Open the solution file in Visual Studio (`MSBuild.dev.sln`).\n \n # Running Unit Tests\n To run the unit tests from Visual Studio:\n \n-1. Open the MSBuild solution file (`src/MSBuild.sln`) in Visual Studio 2015.\n+1. Open the MSBuild solution file (`MSBuild.dev.sln`) in Visual Studio.\n 2. Open the Test menu -> Windows -> Test Explorer.\n 3. Click Run All.\n \n-To build MSBuild and run all unit tests, use `RebuildWithLocalMSBuild.cmd` as described in \"Build and verify MSBuild\" below. That is usually the best way to ensure that a change is ready to go.\n+To build MSBuild and run all unit tests from the command line, use `build.cmd -test`.\n+To mimic our CI job use `build\\cibuild.cmd`. Be aware that this command deletes your nuget cache. You can edit the script to prevent it from deleting the cache.\n+The CI does two builds. In the second build, it uses the binaries from the first build to build the repository again.\n \n # Contributing\n Please see [Contributing Code](https://github.com/Microsoft/msbuild/wiki/Contributing-Code) for details on contributing changes back to the code. Please read this carefully and engage with us early to ensure work is not wasted.\n \n # Walkthroughs\n-## Build and verify MSBuild\n-The first scenario you might want to try is building our source tree and then using that output to build it again. To do this, you will need to have Visual Studio 2015 installed on your machine. First, open a 'Developer Command Prompt for VS2015':\n-```\n-git clone https://github.com/Microsoft/msbuild.git\n-cd .\\msbuild\n-.\\build.cmd\n-.\\RebuildWithLocalMSBuild.cmd\n-```\n \n ## Debugging MSBuild \n - Breaking into the main method of MSBuild.exe: set the environment variable `MSBUILDDEBUGONSTART` to 1 or 2: https://github.com/Microsoft/msbuild/blob/master/src/MSBuild/XMake.cs#L488-L501\n - Dumping scheduler state: set `MSBUILDDEBUGSCHEDULER` to 1; set `MSBUILDDEBUGPATH` to where to dump the scheduling state\n-- Example of manually running a single unit test:\n-```\n-packages\\xunit.runner.console\\2.1.0\\tools\\xunit.console.x86.exe bin\\Debug\\x86\\Windows_NT\\Windows_NT_Deployment_Test\\Microsoft.Build.Engine.UnitTests.dll -noshadow -method Microsoft.Build.UnitTests.Evaluation.ItemEvaluation_Tests.ImmutableListBuilderBug\n-```\n-\n-## Build a Console App\n-To build a console app, you first need a drop of MSBuild (built on your machine) with all the required dependencies. To do this, open a 'Developer Command Prompt for VS2015' and run the following command from your msbuild folder:\n-```\n-BuildAndCopy.cmd bin\\MSBuild\n-``` \n-Now, just point `bin\\MSBuild\\MSBuild.exe` at a project file. Here's a quick sample project that will build an application that runs on the .NET Core framework:\n-```\n-cd ..\\\n-git clone https://github.com/dotnet/corefxlab\n-.\\msbuild\\bin\\MSBuild\\MSBuild.exe .\\corefxlab\\demos\\CoreClrConsoleApplications\\HelloWorld\\HelloWorld.csproj\n-.\\corefxlab\\demos\\CoreClrConsoleApplications\\HelloWorld\\bin\\Debug\\HelloWorld.exe\n-```\n->Paths here assumes corefxlab and msbuild repos are in the same parent folder.\n+\n+## Using the repository binaries to perform builds\n+To build projects using the msbuild binaries from the repository, you first need to do a build (command: `build.cmd`) which produces a bootstrap directory mimicing a Visual Studio installation.\n+\n+Now, just point `artifacts\\Debug\\bootstrap\\net472\\MSBuild\\15.0\\Bin\\MSBuild.exe` at a project file. Here's a quick sample project that will build an application that runs on the .NET Core framework:",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, oops :)",
              "createdAt": "2018-08-15T19:31:08Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md",
              "diffHunk": "@@ -1,60 +1,39 @@\n **These instructions refer to working with the Master branch.**\n \n ## Required Software\n-**Microsoft Visual Studio 2015 **\n+** Latest Microsoft Visual Studio 2017 **\n \n-This version of MSBuild closely aligns to the version that ships with Visual Studio 2015. You may be able to build and debug with Visual Studio 2013, but using Visual Studio 2015 is recommended. You can download the community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).\n+You can download the Visual Studio community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).\n \n-> MSBuild requires that you have the Windows SDK plugin installed with Visual Studio 2015. Make sure you have the plugin selected when installing Visual Studio. You can also modify your existing VS installation by running the installer again. ![](https://cloud.githubusercontent.com/assets/3347530/10229970/69396342-6840-11e5-8ef6-1f4434c4b36f.png)\n-\n-> Please note this is intending as a standalone build engine, not integrated with Visual Studio. We may add support/documentation for that scenario if we see community interest for it.\n+All command line usage must be done from a Visual Studio developer command prompt.\n \n ## Getting the code\n \n 1. Clone the repo: `git clone https://github.com/Microsoft/msbuild.git`\n-2. Build on the command line: `cibuild.cmd --target Full --scope Compile --bootstrap-only`\n-3. Open the solution file in Visual Studio 2015 (`src/MSBuild.sln`).\n+2. Build on the command line: `build.cmd`\n+3. Open the solution file in Visual Studio (`MSBuild.dev.sln`).\n \n # Running Unit Tests\n To run the unit tests from Visual Studio:\n \n-1. Open the MSBuild solution file (`src/MSBuild.sln`) in Visual Studio 2015.\n+1. Open the MSBuild solution file (`MSBuild.dev.sln`) in Visual Studio.\n 2. Open the Test menu -> Windows -> Test Explorer.\n 3. Click Run All.\n \n-To build MSBuild and run all unit tests, use `RebuildWithLocalMSBuild.cmd` as described in \"Build and verify MSBuild\" below. That is usually the best way to ensure that a change is ready to go.\n+To build MSBuild and run all unit tests from the command line, use `build.cmd -test`.\n+To mimic our CI job use `build\\cibuild.cmd`. Be aware that this command deletes your nuget cache. You can edit the script to prevent it from deleting the cache.\n+The CI does two builds. In the second build, it uses the binaries from the first build to build the repository again.\n \n # Contributing\n Please see [Contributing Code](https://github.com/Microsoft/msbuild/wiki/Contributing-Code) for details on contributing changes back to the code. Please read this carefully and engage with us early to ensure work is not wasted.\n \n # Walkthroughs\n-## Build and verify MSBuild\n-The first scenario you might want to try is building our source tree and then using that output to build it again. To do this, you will need to have Visual Studio 2015 installed on your machine. First, open a 'Developer Command Prompt for VS2015':\n-```\n-git clone https://github.com/Microsoft/msbuild.git\n-cd .\\msbuild\n-.\\build.cmd\n-.\\RebuildWithLocalMSBuild.cmd\n-```\n \n ## Debugging MSBuild \n - Breaking into the main method of MSBuild.exe: set the environment variable `MSBUILDDEBUGONSTART` to 1 or 2: https://github.com/Microsoft/msbuild/blob/master/src/MSBuild/XMake.cs#L488-L501\n - Dumping scheduler state: set `MSBUILDDEBUGSCHEDULER` to 1; set `MSBUILDDEBUGPATH` to where to dump the scheduling state\n-- Example of manually running a single unit test:\n-```\n-packages\\xunit.runner.console\\2.1.0\\tools\\xunit.console.x86.exe bin\\Debug\\x86\\Windows_NT\\Windows_NT_Deployment_Test\\Microsoft.Build.Engine.UnitTests.dll -noshadow -method Microsoft.Build.UnitTests.Evaluation.ItemEvaluation_Tests.ImmutableListBuilderBug\n-```\n-\n-## Build a Console App\n-To build a console app, you first need a drop of MSBuild (built on your machine) with all the required dependencies. To do this, open a 'Developer Command Prompt for VS2015' and run the following command from your msbuild folder:\n-```\n-BuildAndCopy.cmd bin\\MSBuild\n-``` \n-Now, just point `bin\\MSBuild\\MSBuild.exe` at a project file. Here's a quick sample project that will build an application that runs on the .NET Core framework:\n-```\n-cd ..\\\n-git clone https://github.com/dotnet/corefxlab\n-.\\msbuild\\bin\\MSBuild\\MSBuild.exe .\\corefxlab\\demos\\CoreClrConsoleApplications\\HelloWorld\\HelloWorld.csproj\n-.\\corefxlab\\demos\\CoreClrConsoleApplications\\HelloWorld\\bin\\Debug\\HelloWorld.exe\n-```\n->Paths here assumes corefxlab and msbuild repos are in the same parent folder.\n+\n+## Using the repository binaries to perform builds\n+To build projects using the msbuild binaries from the repository, you first need to do a build (command: `build.cmd`) which produces a bootstrap directory mimicing a Visual Studio installation.\n+\n+Now, just point `artifacts\\Debug\\bootstrap\\net472\\MSBuild\\15.0\\Bin\\MSBuild.exe` at a project file. Here's a quick sample project that will build an application that runs on the .NET Core framework:",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A better link is https://github.com/dotnet/core-sdk as hte download links are there",
              "createdAt": "2018-08-19T00:22:35Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md",
              "diffHunk": "@@ -1,50 +1,37 @@\n-MSBuild can be successfully built on Windows, OS X 10.11, Ubuntu 14.04, and Ubuntu 16.04. Newer versions of Ubuntu may work, but .NET Core development is currently aimed at 14.04.\n+MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubuntu 16.04.\n \n-# Windows #\n-## Build process\n+# Windows\n \n-`cibuild.cmd --target CoreCLR`\n+## Build\n \n-# Unix #\n+`build.cmd -hosttype core`\n \n-**Required packages for OSX & Ubuntu**\n+# Unix\n \n-MSBuild currently builds with a prerelease version of .NET Core 1.0. It requires the [.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md), which you can acquire manually or easily get by [installing the .NET Core SDK](https://dot.net/core).\n+## The easy way\n \n-* *OpenSSL*: MSBuild uses the .Net CLI to download Nuget packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n+Install the latest .NET Core SDK from http://dot.net/core. That will ensure all prerequisites for our build are met.\n \n-* [Mono](http://www.mono-project.com/download/#download-lin) when doing a Mono-hosted version of MSBuild\n+## Manually installing required packages for OSX & Ubuntu\n \n-**Required packages for Ubuntu**\n-* [libunwind](http://www.nongnu.org/libunwind/index.html) is required by .NET Core. Install it using `sudo apt-get install libunwind8`\n+[.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md).\n \n-##Build process##\n+* *OpenSSL*: MSBuild uses the .Net CLI during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n \n-Targeting .Net Core: `./cibuild.sh --target CoreCLR`\n+## Build\n \n-Targeting Mono: `./cibuild.sh --target Mono`\n+`./build.sh -skipTests`\n \n-Using a .NET core MSBuild host: `./cibuild.sh --host CoreCLR`\n+## Tests\n \n-Using a Mono MSBuild host: `./cibuild --host Mono`\n+`./build.sh`\n \n-##Tests##\n+## Getting .Net Core MSBuild binaries without building the code\n \n-Tests are currently disabled on platforms other than Windows. If you'd like to run them, explicitly opt in with\n-```sh\n-./cibuild.sh --scope Test\n-```\n-\n-## Getting .Net Core MSBuild binaries without building the code ##\n-The best way to get .NET Core MSBuild is through the [dotnet CLI](https://github.com/dotnet/cli/), which redistributes us. It's not always the very very latest but they take regular drops. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.\n+The best way to get .NET Core MSBuild is by installing the [.NET Core SDK](http://dot.net/core), which redistributes us. This will get you the latest released version of MSBuild for .NET Core. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Also, what I did to test my modifications to microsoft.build.dll:\r\n\r\n1. unzip the 64 bit Windows zip into a convenient folder like `c:\\dotnet` \r\n1. create a test project by creating a folder `c:\\dotnet\\test` and cd to that and `..\\dotnet create console` in it and `..\\dotnet build` to get warmed up\r\n1. build msbuild tree once from the root with `C:\\git\\MSBuild\\build.cmd`\r\n1. make code changes\r\n1. overwrite `C:\\dotnet\\sdk\\3.0.100-alpha1-009428\\microsoft.build.dll` (and `microsoft.build.framework.dll`) with the copies from `C:\\git\\MSBuild\\artifacts\\Debug\\bin\\Microsoft.Build\\netcoreapp2.1`. Of course, the version number will vary, and you need to `kill dotnet.exe` potentially\r\n1. build my test project. (I found it easiest to do `..\\dotnet exec C:\\dotnet\\sdk\\3.0.100-alpha1-009428\\MSBuild.dll test.csproj /t:rebuild`)\r\n1. subsequent code changes can be built more quickly with just `msbuild C:\\git\\MSBuild\\src\\Build\\Microsoft.Build.csproj`\r\n\r\nPerhaps this kind of sequence is worth including as an option for some.",
              "createdAt": "2018-08-19T00:27:34Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md",
              "diffHunk": "@@ -1,50 +1,37 @@\n-MSBuild can be successfully built on Windows, OS X 10.11, Ubuntu 14.04, and Ubuntu 16.04. Newer versions of Ubuntu may work, but .NET Core development is currently aimed at 14.04.\n+MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubuntu 16.04.\n \n-# Windows #\n-## Build process\n+# Windows\n \n-`cibuild.cmd --target CoreCLR`\n+## Build\n \n-# Unix #\n+`build.cmd -hosttype core`\n \n-**Required packages for OSX & Ubuntu**\n+# Unix\n \n-MSBuild currently builds with a prerelease version of .NET Core 1.0. It requires the [.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md), which you can acquire manually or easily get by [installing the .NET Core SDK](https://dot.net/core).\n+## The easy way\n \n-* *OpenSSL*: MSBuild uses the .Net CLI to download Nuget packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n+Install the latest .NET Core SDK from http://dot.net/core. That will ensure all prerequisites for our build are met.\n \n-* [Mono](http://www.mono-project.com/download/#download-lin) when doing a Mono-hosted version of MSBuild\n+## Manually installing required packages for OSX & Ubuntu\n \n-**Required packages for Ubuntu**\n-* [libunwind](http://www.nongnu.org/libunwind/index.html) is required by .NET Core. Install it using `sudo apt-get install libunwind8`\n+[.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md).\n \n-##Build process##\n+* *OpenSSL*: MSBuild uses the .Net CLI during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n \n-Targeting .Net Core: `./cibuild.sh --target CoreCLR`\n+## Build\n \n-Targeting Mono: `./cibuild.sh --target Mono`\n+`./build.sh -skipTests`\n \n-Using a .NET core MSBuild host: `./cibuild.sh --host CoreCLR`\n+## Tests\n \n-Using a Mono MSBuild host: `./cibuild --host Mono`\n+`./build.sh`\n \n-##Tests##\n+## Getting .Net Core MSBuild binaries without building the code\n \n-Tests are currently disabled on platforms other than Windows. If you'd like to run them, explicitly opt in with\n-```sh\n-./cibuild.sh --scope Test\n-```\n-\n-## Getting .Net Core MSBuild binaries without building the code ##\n-The best way to get .NET Core MSBuild is through the [dotnet CLI](https://github.com/dotnet/cli/), which redistributes us. It's not always the very very latest but they take regular drops. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.\n+The best way to get .NET Core MSBuild is by installing the [.NET Core SDK](http://dot.net/core), which redistributes us. This will get you the latest released version of MSBuild for .NET Core. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Yeah, I wind up doing unzip-and-overlay to test things a lot too. We should totally document that.",
              "createdAt": "2018-08-20T14:22:28Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md",
              "diffHunk": "@@ -1,50 +1,37 @@\n-MSBuild can be successfully built on Windows, OS X 10.11, Ubuntu 14.04, and Ubuntu 16.04. Newer versions of Ubuntu may work, but .NET Core development is currently aimed at 14.04.\n+MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubuntu 16.04.\n \n-# Windows #\n-## Build process\n+# Windows\n \n-`cibuild.cmd --target CoreCLR`\n+## Build\n \n-# Unix #\n+`build.cmd -hosttype core`\n \n-**Required packages for OSX & Ubuntu**\n+# Unix\n \n-MSBuild currently builds with a prerelease version of .NET Core 1.0. It requires the [.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md), which you can acquire manually or easily get by [installing the .NET Core SDK](https://dot.net/core).\n+## The easy way\n \n-* *OpenSSL*: MSBuild uses the .Net CLI to download Nuget packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n+Install the latest .NET Core SDK from http://dot.net/core. That will ensure all prerequisites for our build are met.\n \n-* [Mono](http://www.mono-project.com/download/#download-lin) when doing a Mono-hosted version of MSBuild\n+## Manually installing required packages for OSX & Ubuntu\n \n-**Required packages for Ubuntu**\n-* [libunwind](http://www.nongnu.org/libunwind/index.html) is required by .NET Core. Install it using `sudo apt-get install libunwind8`\n+[.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md).\n \n-##Build process##\n+* *OpenSSL*: MSBuild uses the .Net CLI during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n \n-Targeting .Net Core: `./cibuild.sh --target CoreCLR`\n+## Build\n \n-Targeting Mono: `./cibuild.sh --target Mono`\n+`./build.sh -skipTests`\n \n-Using a .NET core MSBuild host: `./cibuild.sh --host CoreCLR`\n+## Tests\n \n-Using a Mono MSBuild host: `./cibuild --host Mono`\n+`./build.sh`\n \n-##Tests##\n+## Getting .Net Core MSBuild binaries without building the code\n \n-Tests are currently disabled on platforms other than Windows. If you'd like to run them, explicitly opt in with\n-```sh\n-./cibuild.sh --scope Test\n-```\n-\n-## Getting .Net Core MSBuild binaries without building the code ##\n-The best way to get .NET Core MSBuild is through the [dotnet CLI](https://github.com/dotnet/cli/), which redistributes us. It's not always the very very latest but they take regular drops. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.\n+The best way to get .NET Core MSBuild is by installing the [.NET Core SDK](http://dot.net/core), which redistributes us. This will get you the latest released version of MSBuild for .NET Core. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Added.",
              "createdAt": "2018-08-20T18:04:44Z",
              "path": "documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md",
              "diffHunk": "@@ -1,50 +1,37 @@\n-MSBuild can be successfully built on Windows, OS X 10.11, Ubuntu 14.04, and Ubuntu 16.04. Newer versions of Ubuntu may work, but .NET Core development is currently aimed at 14.04.\n+MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubuntu 16.04.\n \n-# Windows #\n-## Build process\n+# Windows\n \n-`cibuild.cmd --target CoreCLR`\n+## Build\n \n-# Unix #\n+`build.cmd -hosttype core`\n \n-**Required packages for OSX & Ubuntu**\n+# Unix\n \n-MSBuild currently builds with a prerelease version of .NET Core 1.0. It requires the [.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md), which you can acquire manually or easily get by [installing the .NET Core SDK](https://dot.net/core).\n+## The easy way\n \n-* *OpenSSL*: MSBuild uses the .Net CLI to download Nuget packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n+Install the latest .NET Core SDK from http://dot.net/core. That will ensure all prerequisites for our build are met.\n \n-* [Mono](http://www.mono-project.com/download/#download-lin) when doing a Mono-hosted version of MSBuild\n+## Manually installing required packages for OSX & Ubuntu\n \n-**Required packages for Ubuntu**\n-* [libunwind](http://www.nongnu.org/libunwind/index.html) is required by .NET Core. Install it using `sudo apt-get install libunwind8`\n+[.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md).\n \n-##Build process##\n+* *OpenSSL*: MSBuild uses the .Net CLI during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.\n \n-Targeting .Net Core: `./cibuild.sh --target CoreCLR`\n+## Build\n \n-Targeting Mono: `./cibuild.sh --target Mono`\n+`./build.sh -skipTests`\n \n-Using a .NET core MSBuild host: `./cibuild.sh --host CoreCLR`\n+## Tests\n \n-Using a Mono MSBuild host: `./cibuild --host Mono`\n+`./build.sh`\n \n-##Tests##\n+## Getting .Net Core MSBuild binaries without building the code\n \n-Tests are currently disabled on platforms other than Windows. If you'd like to run them, explicitly opt in with\n-```sh\n-./cibuild.sh --scope Test\n-```\n-\n-## Getting .Net Core MSBuild binaries without building the code ##\n-The best way to get .NET Core MSBuild is through the [dotnet CLI](https://github.com/dotnet/cli/), which redistributes us. It's not always the very very latest but they take regular drops. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.\n+The best way to get .NET Core MSBuild is by installing the [.NET Core SDK](http://dot.net/core), which redistributes us. This will get you the latest released version of MSBuild for .NET Core. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}