{
  "number": 11024,
  "title": "refactor expander.cs TryExecuteWellKnownFunction and friends [DO NOT MERGE]",
  "body": "Fixes #9975\r\n\r\n### Context\r\nThe TryExecuteWellKnownFunction originated as a hotfix and it evolved into a huge list of functions that has expanded beyond a reasonable size.\r\nThis aims to improve readability of the expander.cs by doing at least some basic cleanup. I most likely won't be able to remove the involved functions branching for performance reasons. However I can clean up the code somewhat.\r\n  \r\n### Changes Made\r\n  - moving TryGetArgs functions to a separate file.\r\n  - unifying the TryGetArgs functions by leveraging generics\r\n  - moving TryExecuteWellKnownFunction to a separate file\r\n  - TODO polish the TryExecuteWellKnownFunction somewhat\r\n  - \r\n\r\n### Testing\r\n - The expander is covered by tests quite well. \r\n - TODO: check the affected functions and if some of the changes seem risky, I will add tests\r\n - For now I've checked the performance of this initial commit (TryGetArgs refactor, moving stuff around) and the affected pieces of code don't appear to have negative impact as far as I could tell. \r\n - TODO: run these through perfstar if/when available.\r\n\r\n### Notes\r\n-  Code generators in the future? (moving to a separate file is a first step to theoretically enable this)\r\n-  Make a separate PR for further changes?\r\n-  TODO: remove the profiling tests, those should be local only. \r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2024-11-22T18:12:47Z",
  "updatedAt": "2024-12-09T12:42:42Z",
  "closedAt": "2024-12-09T12:42:42Z",
  "mergedAt": null,
  "additions": 1340,
  "deletions": 1315,
  "changedFiles": 6,
  "headRefName": "refactor_expander",
  "isDraft": true,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f024d593b5db7d2c432ddc4e4ef2dcabd63e0a50",
          "message": "initial function extraction into separate files. ArgumentParsing refactor to leverage generics.",
          "committedDate": "2024-11-22T18:01:04Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "0b54b9e0672a37230244f308a46d4ac90e305eb1",
          "message": "wip",
          "committedDate": "2024-11-25T08:31:35Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Our tab isn't 4 spaces?\r\nI will fix this. In my text editor it looked aligned.",
              "createdAt": "2024-11-22T18:31:05Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -472,6 +472,8 @@\n     <Compile Include=\"Evaluation\\Conditionals\\StringExpressionNode.cs\" />\n     <Compile Include=\"Evaluation\\Conditionals\\Token.cs\" />\n     <Compile Include=\"Evaluation\\EvaluatorMetadataTable.cs\" />\n+\t<Compile Include=\"Evaluation\\WellKnownFunctions\\ArgumentParsing.cs\" />",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "finish the comment",
              "createdAt": "2024-11-22T18:31:35Z",
              "path": "src/Build/Evaluation/WellKnownFunctions/ArgumentParsing.cs",
              "diffHunk": "@@ -0,0 +1,323 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.CodeDom;\n+using System.Collections.Generic;\n+using System.Data.SqlTypes;\n+using System.Globalization;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.Evaluation.WellKnownFunctions\n+{\n+    internal class ArgumentParsing\n+    {\n+\n+        private static Func<int, int> s_castInt = i => i;\n+        private static Func<double, double> s_castDouble = d => d;\n+        private static Func<long, long> s_castLong = l => l;\n+        private static Func<string, string> s_castString = s => s;\n+        private static Func<Version, Version> s_castVersion = s => s;\n+        private static Type s_type = typeof(string);\n+        private static Type v_type = typeof(Version);\n+\n+        // We cast delegates to avoid boxing/unboxing of the values.\n+        internal static bool TryGetArgument<T>(object arg, out T arg0)\n+        {\n+            arg0 = default;\n+            switch (arg0)\n+            {              \n+                case int:\n+                    var result = TryConvertToInt(arg, out int i);\n+                    arg0 = ((Func<int, T>)(object)(s_castInt))(i);\n+                    return result;\n+                case long:\n+                    var result1 = TryConvertToLong(arg, out long l);\n+                    arg0 = ((Func<long, T>)(object)s_castLong)(l);\n+                    return result1;\n+                case double:\n+                    var result2 = TryConvertToDouble(arg, out double d);\n+                    arg0 = ((Func<double, T>)(object)s_castDouble)(d);\n+                    return result2;\n+\n+                // This appears to be necessary due to the fact that default string is null and thus skips the case string: jump that I wanted to take.\n+                // Same goes for the Version.\n+                default:\n+                    if (typeof(T) == s_type)\n+                    {\n+                        // Note: one of the functions was doing char -> string conversion which I ignored here because it should be redundant.\n+                        // This is due to MSBuild loading even one char strings as a string instead of as a char.\n+                        string s = arg as string;\n+                        if (s != null)\n+                        {\n+                            arg0 = ((Func<string, T>)(object)s_castString)(s);\n+                        }\n+                        return arg0 != null;\n+                    }\n+                    else if (typeof(T) == v_type)\n+                    {\n+                        var result3 = TryConvertToVersion(arg, out Version v);\n+                        ((Func<Version, T>)(object)s_castVersion)(v);\n+                        return result3;\n+                    }\n+                    return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArg<T1>(object[] args, out T1 arg0)\n+        {\n+            if (args.Length != 1)\n+            {\n+                arg0 = default;\n+                return false;\n+            }\n+            return TryGetArgument(args[0], out arg0);\n+        }\n+\n+        internal static bool TryGetArgs<T1, T2>(object[] args, out T1 arg0, out T2 arg1, bool enforceLength = true)\n+        {\n+\n+            if ((enforceLength && args.Length != 2) || args.Length < 2)\n+            {\n+                arg0 = default;\n+                arg1 = default;\n+                return false;\n+            }\n+\n+            if (TryGetArgument(args[0], out arg0) &&\n+                TryGetArgument(args[1], out arg1))\n+            {\n+                return true;\n+            }\n+            else\n+            {\n+                // this has to happen here, otherwise we could set \n+                arg0 = default;\n+                arg1 = default;\n+                return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArgs<T1, T2, T3>(object[] args, out T1 arg0, out T2 arg1, out T3 arg2)\n+        {\n+            if (args.Length != 3)\n+            {\n+                arg0 = default;\n+                arg1 = default;\n+                arg2 = default;\n+                return false;\n+            }\n+            if (TryGetArgument(args[0], out arg0) &&\n+                TryGetArgument(args[1], out arg1) &&\n+                TryGetArgument(args[2], out arg2))\n+            {\n+                return true;\n+            }\n+            else\n+            {\n+                // this has to happen here, otherwise we could set ",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the one weird case I wasn't able to get rid of via generics.",
              "createdAt": "2024-11-22T18:33:55Z",
              "path": "src/Build/Evaluation/WellKnownFunctions/ArgumentParsing.cs",
              "diffHunk": "@@ -0,0 +1,323 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.CodeDom;\n+using System.Collections.Generic;\n+using System.Data.SqlTypes;\n+using System.Globalization;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.Evaluation.WellKnownFunctions\n+{\n+    internal class ArgumentParsing\n+    {\n+\n+        private static Func<int, int> s_castInt = i => i;\n+        private static Func<double, double> s_castDouble = d => d;\n+        private static Func<long, long> s_castLong = l => l;\n+        private static Func<string, string> s_castString = s => s;\n+        private static Func<Version, Version> s_castVersion = s => s;\n+        private static Type s_type = typeof(string);\n+        private static Type v_type = typeof(Version);\n+\n+        // We cast delegates to avoid boxing/unboxing of the values.\n+        internal static bool TryGetArgument<T>(object arg, out T arg0)\n+        {\n+            arg0 = default;\n+            switch (arg0)\n+            {              \n+                case int:\n+                    var result = TryConvertToInt(arg, out int i);\n+                    arg0 = ((Func<int, T>)(object)(s_castInt))(i);\n+                    return result;\n+                case long:\n+                    var result1 = TryConvertToLong(arg, out long l);\n+                    arg0 = ((Func<long, T>)(object)s_castLong)(l);\n+                    return result1;\n+                case double:\n+                    var result2 = TryConvertToDouble(arg, out double d);\n+                    arg0 = ((Func<double, T>)(object)s_castDouble)(d);\n+                    return result2;\n+\n+                // This appears to be necessary due to the fact that default string is null and thus skips the case string: jump that I wanted to take.\n+                // Same goes for the Version.\n+                default:\n+                    if (typeof(T) == s_type)\n+                    {\n+                        // Note: one of the functions was doing char -> string conversion which I ignored here because it should be redundant.\n+                        // This is due to MSBuild loading even one char strings as a string instead of as a char.\n+                        string s = arg as string;\n+                        if (s != null)\n+                        {\n+                            arg0 = ((Func<string, T>)(object)s_castString)(s);\n+                        }\n+                        return arg0 != null;\n+                    }\n+                    else if (typeof(T) == v_type)\n+                    {\n+                        var result3 = TryConvertToVersion(arg, out Version v);\n+                        ((Func<Version, T>)(object)s_castVersion)(v);\n+                        return result3;\n+                    }\n+                    return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArg<T1>(object[] args, out T1 arg0)\n+        {\n+            if (args.Length != 1)\n+            {\n+                arg0 = default;\n+                return false;\n+            }\n+            return TryGetArgument(args[0], out arg0);\n+        }\n+\n+        internal static bool TryGetArgs<T1, T2>(object[] args, out T1 arg0, out T2 arg1, bool enforceLength = true)\n+        {\n+\n+            if ((enforceLength && args.Length != 2) || args.Length < 2)\n+            {\n+                arg0 = default;\n+                arg1 = default;\n+                return false;\n+            }\n+\n+            if (TryGetArgument(args[0], out arg0) &&\n+                TryGetArgument(args[1], out arg1))\n+            {\n+                return true;\n+            }\n+            else\n+            {\n+                // this has to happen here, otherwise we could set \n+                arg0 = default;\n+                arg1 = default;\n+                return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArgs<T1, T2, T3>(object[] args, out T1 arg0, out T2 arg1, out T3 arg2)\n+        {\n+            if (args.Length != 3)\n+            {\n+                arg0 = default;\n+                arg1 = default;\n+                arg2 = default;\n+                return false;\n+            }\n+            if (TryGetArgument(args[0], out arg0) &&\n+                TryGetArgument(args[1], out arg1) &&\n+                TryGetArgument(args[2], out arg2))\n+            {\n+                return true;\n+            }\n+            else\n+            {\n+                // this has to happen here, otherwise we could set \n+                arg0 = default;\n+                arg1 = default;\n+                arg2 = default;\n+                return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArgs<T1, T2, T3, T4>(object[] args, out T1 arg0, out T2 arg1, out T3 arg2, out T4 arg3)\n+        {\n+            if (args.Length != 4)\n+            {\n+                arg0 = default;\n+                arg1 = default;\n+                arg2 = default;\n+                arg3 = default;\n+                return false;\n+            }\n+            if (TryGetArgument(args[0], out arg0) &&\n+                TryGetArgument(args[1], out arg1) &&\n+                TryGetArgument(args[2], out arg2) &&\n+                TryGetArgument(args[3], out arg3))\n+            {\n+                return true;\n+            }\n+            else\n+            {\n+                // this has to happen here, otherwise we could set \n+                arg0 = default;\n+                arg1 = default;\n+                arg2 = default;\n+                arg3 = default;\n+                return false;\n+            }\n+        }\n+\n+        internal static bool TryConvertToVersion(object value, out Version arg0)\n+        {\n+            string val = value as string;\n+\n+            if (string.IsNullOrEmpty(val) || !Version.TryParse(val, out arg0))\n+            {\n+                arg0 = default;\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+\n+        /// <summary>\n+        /// Try to convert value to int.\n+        /// </summary>\n+        internal static bool TryConvertToInt(object value, out int arg)\n+        {\n+            switch (value)\n+            {\n+                case double d:\n+                    if (d >= int.MinValue && d <= int.MaxValue)\n+                    {\n+                        arg = Convert.ToInt32(d);\n+                        if (Math.Abs(arg - d) == 0)\n+                        {\n+                            return true;\n+                        }\n+                    }\n+\n+                    break;\n+                case long l:\n+                    if (l >= int.MinValue && l <= int.MaxValue)\n+                    {\n+                        arg = Convert.ToInt32(l);\n+                        return true;\n+                    }\n+\n+                    break;\n+                case int i:\n+                    arg = i;\n+                    return true;\n+                case string s when int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out arg):\n+                    return true;\n+            }\n+\n+            arg = 0;\n+            return false;\n+        }\n+\n+        /// <summary>\n+        /// Try to convert value to long.\n+        /// </summary>\n+        internal static bool TryConvertToLong(object value, out long arg)\n+        {\n+            switch (value)\n+            {\n+                case double d:\n+                    if (d >= long.MinValue && d <= long.MaxValue)\n+                    {\n+                        arg = (long)d;\n+                        if (Math.Abs(arg - d) == 0)\n+                        {\n+                            return true;\n+                        }\n+                    }\n+\n+                    break;\n+                case long l:\n+                    arg = l;\n+                    return true;\n+                case int i:\n+                    arg = i;\n+                    return true;\n+                case string s when long.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture.NumberFormat, out arg):\n+                    return true;\n+            }\n+\n+            arg = 0;\n+            return false;\n+        }\n+\n+        /// <summary>\n+        /// Try to convert value to double.\n+        /// </summary>\n+        internal static bool TryConvertToDouble(object value, out double arg)\n+        {\n+            switch (value)\n+            {\n+                case double unboxed:\n+                    arg = unboxed;\n+                    return true;\n+                case long l:\n+                    arg = l;\n+                    return true;\n+                case int i:\n+                    arg = i;\n+                    return true;\n+                case string str when double.TryParse(str, NumberStyles.Number | NumberStyles.Float, CultureInfo.InvariantCulture.NumberFormat, out arg):\n+                    return true;\n+                default:\n+                    arg = 0;\n+                    return false;\n+            }\n+        }\n+\n+        internal static bool TryGetArgs(object[] args, out string arg0, out StringComparison arg1)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}