{
  "number": 6522,
  "title": "Ignore the order of the items when computing the hash inside the _GenerateCompileDependencyCache target.",
  "body": "Fixes #6401 \r\n",
  "state": "CLOSED",
  "createdAt": "2021-06-04T19:12:30Z",
  "updatedAt": "2021-06-15T16:19:57Z",
  "closedAt": "2021-06-15T16:19:56Z",
  "mergedAt": null,
  "additions": 132,
  "deletions": 6,
  "changedFiles": 5,
  "headRefName": "6401_HashTaskIgnoreOrder",
  "isDraft": false,
  "author": {
    "login": "MarkKharitonov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b8473ad82bbf5aa103dad67def51f9ac17e73135",
          "message": "Ignore the order of the items when computing the hash inside the _GenerateCompileDependencyCache target.",
          "committedDate": "2021-06-11T23:01:11Z",
          "author": {
            "name": "Kharitonov, Mark",
            "email": "mark.kharitonov@ceridian.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Guys, I do not know why there are 2 msbuild-pr failures. Is it something I did wrong?",
        "createdAt": "2021-06-05T14:57:01Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> ##[error] After building, there are changed files.  Please build locally and include these changes in your pull request.\r\n\r\nLooks like you need to run `build.cmd` and push up any changes. I wonder why that would only fail in one test leg?",
        "createdAt": "2021-06-07T16:26:46Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> > ##[error] After building, there are changed files.  Please build locally and include these changes in your pull request.\r\n> \r\n> Looks like you need to run `build.cmd` and push up any changes. I wonder why that would only fail in one test leg?\r\n\r\nIt only ever fails in no boostrap builds.",
        "createdAt": "2021-06-07T16:49:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I was not sure I had to push these files. They did generate, but I did not know what to do about them. I ran build.cmd, amended, rebased and pushed.",
        "createdAt": "2021-06-07T22:25:30Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I am unfamiliar with the github PR process. Is there anything else I am missing that prevents merging of this PR?",
        "createdAt": "2021-06-11T17:46:24Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> I am unfamiliar with the github PR process. Is there anything else I am missing that prevents merging of this PR?\r\n\r\nWe've been handling a lot of internal code flow recently, I'll apply the `merge-when-branch-open` label for when things are stable",
        "createdAt": "2021-06-11T17:52:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'd still like to get a compiler person to double-check this: there's no order dependency in compiler inputs that would make this invalid, right? @jaredpar",
        "createdAt": "2021-06-11T17:53:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I'd still like to get a compiler person to double-check this: there's no order dependency in compiler inputs that would make this invalid, right\r\n\r\nMy reading of this PR is that we'd essentially skip targets if the item collection input was the same (independent of the order of items in the collection). If so that presents a problem for compilers. The order of items, particularly source files, is very important to the output of the compiler. Or more concretely \r\n\r\n```\r\n> csc file1.cs file2.cs\r\n> csc file2.cs file1.cs \r\n```\r\n\r\nThese are meaningfully different command lines. \r\n\r\n@chsienki, @cston, @RikkiGibson ",
        "createdAt": "2021-06-11T18:01:00Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Really?  So, if a developer tomorrow changes the order of the <Compile ... /> entries in the csproj file the result of the compilation can be different? I mean in a way that developers must be aware of it?",
        "createdAt": "2021-06-11T19:41:38Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Removing `merge-on-branch-open` while discussion is going on",
        "createdAt": "2021-06-11T20:50:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> So, if a developer tomorrow changes the order of the <Compile ... /> entries in the csproj file the result of the compilation can be different?\r\n\r\nYes that is correct. The word \"can\" above is actually not strong enough. The compilation **will** be different. \r\n\r\nThe order of files compiled is very visible when you look at compilation from a deterministic stand point. The order files are listed in the PDB is the same as the order in which they appear on the command line. Hence any change to the order will observably change the PDB and DLL / EXE (as the PDB ID is based on content and is embedded in the DLL / EXE).\r\n\r\nThis is increasingly important as we begin to rely on deterministic builds as a part of other efforts like Terrapin.\r\n\r\n> I mean in a way that developers must be aware of it?\r\n\r\nYes this also has effects that are visible to the execution of the program. Consider the following:\r\n\r\n```cs\r\n// file1.cs \r\npartial class C1\r\n{\r\n    public static string Field1 = Field2 ?? \"Field1 wins\";\r\n}\r\n\r\n// file2.cs\r\npartial class C1\r\n{\r\n    public static string Field2 = Field1 ?? \"Field2 wins\";\r\n}\r\n\r\n// program.cs\r\nusing System;\r\nConsole.WriteLine(C1.Field1);\r\nConsole.WriteLine(C1.Field2);\r\n```\r\n\r\nThe order in which you compile this code changes the output of the program \r\n\r\n```\r\n> csc file1.cs file2.cs program.cs \r\n> .\\program.exe\r\nField1 wins\r\nField1 wins\r\n> csc file2.cs file1.cs program.cs \r\n> .\\program.exe\r\nField2 wins\r\nField2 wins\r\n```\r\n\r\nThere are several other cases in C# where the order can result in visible output changes. This is just the easiest to demonstrate. \r\n\r\nThis is not just limited to C# though. Order is also important to languages like F# where the order of files is **critical** to the output and or success of the program compilation.\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2021-06-11T21:08:08Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Guys, I understand your examples. The order is important from the formal point of view. Mathematically, so to speak. \r\n\r\n**But**, for all intents and purposes 99.9999% of developers do not care about the order of any of the items in the csproj file that go into computing the hash. And maybe only `<Compile>` items matter, but again, not to the vast majority of the developers. This is less pronounced in the SDK style projects, but in non SDK style - no one ever thinks about this, because it is not feasible for large teams.\r\n\r\nMoreover. IgnoreOrder = true does produce stable result, because it would be the same result regardless of the order of the elements in the csproj file. Which is why I believe it should be the default. Exactly for the reasons you specify. And those 0.00001% who wish to control the order precisely would specify CoreCompileCacheIgnoreOrder = false explicitly.\r\n\r\nHowever, I realize that we fear of the regression. Though I am truly and really curious what is that population of developers that is sensitive to this kind of detail. Anyway, I have just pushed a change that flips the default to false. This way we do not change any behavior, unless the CoreCompileCacheIgnoreOrder is explicitly set to true. I know I am going to set it in Directory.Build.props.\r\n\r\n",
        "createdAt": "2021-06-11T23:03:59Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> The order is important from the formal point of view. Mathematically, so to speak.\r\n\r\nThe order is important from a correctness point of view. If you cache ignoring order then you will observably break the behavior of programs.\r\n\r\n> . And maybe only <Compile> items matter, but again, not to the vast majority of the developers. \r\n\r\nSorry but this is not correct. The order of source files meaningfully impacts program behavior. The C#, F# and build team take great pains to ensure order stays stable for this very reason. A small perf gain here is not worth building incorrect programs.\r\n\r\n\r\n",
        "createdAt": "2021-06-11T23:07:46Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Could you please clarify the scenario where build perf is improved? Is it when the order of inputs to the compile task changed but not the content of the inputs?",
        "createdAt": "2021-06-11T23:08:39Z",
        "author": {
          "login": "RikkiGibson"
        }
      },
      {
        "body": "@RikkiGibson - please, have a look at the description of the issue. It is all there. \r\n\r\n@jaredpar - This is all very nice, but we use msbuild and Visual Studio and non SDK style csproj files. And I have never heard anyone caring about the order of the `<Compile>` elements in that file. I suppose there are some developers in the world who do and write code that would break if the order is changed. I think this is an awfully fragile way of writing code and is an absolute antipattern. I do not even imagine how this code can be maintained. All the more reasons to sort the items, so that the output is the same regardless of the order.\r\n\r\nAnyway, I have reverted the default. The order is respected by default as before. Is there any reason not to approve? Those who wish to shield themselves from the potential differences in the order of the items would set `CoreCompileCacheIgnoreOrder  = true` and forget about this order business.\r\n\r\n",
        "createdAt": "2021-06-12T03:01:09Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov \r\n\r\n> And I have never heard anyone caring about the order of the <Compile> elements in that file. \r\n\r\nYou never hearing of it does not change that it is a real scenario that the teams design for and customers depend on. \r\n\r\n>  I suppose there are some developers in the world who do and write code that would break if the order is changed. I think this is an awfully fragile way of writing code and is an absolute antipattern.\r\n\r\nThe build ecosystem explicitly support both default deterministic ordering of files as well as the ability to specifically order them to their liking. The various languages all have behaviors that are defined by the order in which the compiler processes them. Customers taking dependencies on this is not an antipattern, it's leveraging scenarios and behaviors that we explicitly support.\r\n\r\n> All the more reasons to sort the items, so that the output is the same regardless of the order.\r\n\r\nAs mentioned before this observably changes program behavior in ways that is undesirable. For F# customers it goes specifically against the design of the language and likely overall breaks the ability for them to compile at all.\r\n\r\n> Is there any reason not to approve?\r\n\r\nThis switch makes it very easy for customers to opt into behavior that will result in very hard to diagnose behaviors that show up at both runtime and build time. Using it is largely asking for performance at the expense of correctness.\r\n\r\n\r\n\r\n",
        "createdAt": "2021-06-14T15:46:22Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Team triage: we don't think we should make it easy to make your build flakier, so we don't want to take this even defaulting to off. Thanks for the contribution, @MarkKharitonov!",
        "createdAt": "2021-06-14T15:47:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm kind of on the fence, but I think there might be value in taking this PR minus the `Microsoft.Common.CurrentVersion.targets` part. I think we should consider it.\r\n\r\n@MarkKharitonov I propose you take out the change to the common targets and let's just try and see if we can land the Hash IgnoreOrder piece. I think there's general value in letting Hash users ignore the order.\r\n\r\nI certainly agree with Jared that we can't make the common targets changes even just because of F#. The order there is absolutely critical.\r\n\r\nI'm guessing that people who really care about avoiding unnecessary incremental rebuilds (like me!) can use other workarounds to ensure that the order of `Compile` and `ReferencePath` is the same, perhaps sorting these items before the `_GenerateCompileDependencyCache` target. Sorting in the Hash seems a bit wrong in this case because it creates a dissynchronization between what is in the items and what got hashed.\r\n\r\nSo I know I'm kind of contradicting myself saying we can sort items in a separate target before invoking the Hash, and at the same time saying let's add sorting to the Hash itself for some nebulous future use in other scenarios. I'm curious what people think here. A couple arguments in favor of adding IgnoreOrder to the Hash task:\r\n\r\n * it's a purely additive change if the default is false, and it adds functionality that can make someone's life easier\r\n * I don't think we even have a built-in way to sort items, so users wanting to sort items are doomed for a world of pain and misery, because custom tasks in MSBuild are so full of friction and drama. Removing friction is the driving force behind everything I do here. We do have the `RemoveDuplicates` task, wondering if we should add a `SortItems` task which would be generally useful. Maybe if we add `SortItems` then we don't need the `IgnoreOrder` on the `Hash` task.\r\n\r\nCurious what others think. Let me know in the comments and don't forget to smash that subscribe button and ding the notification bell!",
        "createdAt": "2021-06-15T01:21:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Reopening to discuss landing this without the common targets change.",
        "createdAt": "2021-06-15T01:55:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "We have discussed this internally and the consensus is that having a separate general way to sort items is preferable, such as an OrderBy item function.\r\n\r\nThanks again for your contribution.",
        "createdAt": "2021-06-15T16:19:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "IgnoreOrder is somewhat confusing here, seeing as it does an explicit sort. A name that suggests \"a sorted hash\" would be more intuitive.",
              "createdAt": "2021-06-04T19:24:31Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -31,6 +33,14 @@ public class Hash : TaskExtension\n         /// </summary>\n         public bool IgnoreCase { get; set; }\n \n+        /// <summary>\n+        /// When true, will generate a hash that does not depend on the order of the items.\n+        /// </summary>\n+        /// <remarks>\n+        /// When true, the items are sorted first using their Identity\n+        /// </remarks>\n+        public bool IgnoreOrder { get; set; }",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It is much similar to IgnoreCase. In order to ignore the case the code does explicit ToUpper. That is how we ignore it - we normalize it.\r\nThe same is with IgnoreOrder. \r\nTo the users of the task it will be natural and obvious, they do not care about the implementation details.",
              "createdAt": "2021-06-04T20:30:57Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -31,6 +33,14 @@ public class Hash : TaskExtension\n         /// </summary>\n         public bool IgnoreCase { get; set; }\n \n+        /// <summary>\n+        /// When true, will generate a hash that does not depend on the order of the items.\n+        /// </summary>\n+        /// <remarks>\n+        /// When true, the items are sorted first using their Identity\n+        /// </remarks>\n+        public bool IgnoreOrder { get; set; }",
              "author": {
                "login": "MarkKharitonov"
              }
            },
            {
              "body": "I'm convinced!",
              "createdAt": "2021-06-04T22:36:44Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -31,6 +33,14 @@ public class Hash : TaskExtension\n         /// </summary>\n         public bool IgnoreCase { get; set; }\n \n+        /// <summary>\n+        /// When true, will generate a hash that does not depend on the order of the items.\n+        /// </summary>\n+        /// <remarks>\n+        /// When true, the items are sorted first using their Identity\n+        /// </remarks>\n+        public bool IgnoreOrder { get; set; }",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: can we add parameter names like the previous tests?",
              "createdAt": "2021-06-04T22:41:56Z",
              "path": "src/Tasks.UnitTests/Hash_Tests.cs",
              "diffHunk": "@@ -43,6 +43,110 @@ public void HashTaskEmptyInputTest()\n             Assert.Null(zeroLengthItemsHash);\n         }\n \n+        [Fact]\n+        public void HashTaskIgnoreOrderTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item3\")\n+                    },\n+                    ignoreOrder: true);\n+            var variant2 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\")\n+                    },\n+                    ignoreOrder: true);\n+            var variant3 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\"),\n+                        new TaskItem(\"item2\")\n+                    },\n+                    ignoreOrder: true);\n+            Assert.Equal(variant1, variant3);\n+            Assert.Equal(variant1, variant2);\n+            Assert.Equal(variant2, variant3);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreOrderNegativeTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item3\")\n+                    });\n+            var variant2 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\")\n+                    });\n+            Assert.NotEqual(variant1, variant2);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreCaseNegativeTest()\n+        {\n+            var uppercaseHash =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"ITEM1\"),\n+                        new TaskItem(\"ITEM2\"),\n+                        new TaskItem(\"ITEM3\")\n+                    });\n+            var mixedcaseHash =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"Item1\"),\n+                        new TaskItem(\"iTEm2\"),\n+                        new TaskItem(\"iteM3\")\n+                    });\n+            Assert.NotEqual(uppercaseHash, mixedcaseHash);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreOrderIgnoreCaseTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"ITEM1\"),\n+                        new TaskItem(\"ITEM2\"),\n+                        new TaskItem(\"ITEM3\")\n+                    },\n+                    true, true);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Done.",
              "createdAt": "2021-06-05T00:46:34Z",
              "path": "src/Tasks.UnitTests/Hash_Tests.cs",
              "diffHunk": "@@ -43,6 +43,110 @@ public void HashTaskEmptyInputTest()\n             Assert.Null(zeroLengthItemsHash);\n         }\n \n+        [Fact]\n+        public void HashTaskIgnoreOrderTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item3\")\n+                    },\n+                    ignoreOrder: true);\n+            var variant2 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\")\n+                    },\n+                    ignoreOrder: true);\n+            var variant3 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\"),\n+                        new TaskItem(\"item2\")\n+                    },\n+                    ignoreOrder: true);\n+            Assert.Equal(variant1, variant3);\n+            Assert.Equal(variant1, variant2);\n+            Assert.Equal(variant2, variant3);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreOrderNegativeTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item3\")\n+                    });\n+            var variant2 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"item2\"),\n+                        new TaskItem(\"item1\"),\n+                        new TaskItem(\"item3\")\n+                    });\n+            Assert.NotEqual(variant1, variant2);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreCaseNegativeTest()\n+        {\n+            var uppercaseHash =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"ITEM1\"),\n+                        new TaskItem(\"ITEM2\"),\n+                        new TaskItem(\"ITEM3\")\n+                    });\n+            var mixedcaseHash =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"Item1\"),\n+                        new TaskItem(\"iTEm2\"),\n+                        new TaskItem(\"iteM3\")\n+                    });\n+            Assert.NotEqual(uppercaseHash, mixedcaseHash);\n+        }\n+\n+        [Fact]\n+        public void HashTaskIgnoreOrderIgnoreCaseTest()\n+        {\n+            var variant1 =\n+                ExecuteHashTask(new ITaskItem[]\n+                    {\n+                        new TaskItem(\"ITEM1\"),\n+                        new TaskItem(\"ITEM2\"),\n+                        new TaskItem(\"ITEM3\")\n+                    },\n+                    true, true);",
              "author": {
                "login": "MarkKharitonov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                        }\r\n\r\n                        foreach (var item in items)\r\n```",
              "createdAt": "2021-06-07T15:25:17Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -52,7 +62,12 @@ public override bool Execute()\n \n                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))\n                     {\n-                        foreach (var item in ItemsToHash)\n+                        IEnumerable<ITaskItem> items = ItemsToHash;\n+                        if (IgnoreOrder)\n+                        {\n+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);\n+                        }\n+                        foreach (var item in items)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we use .Sort here instead of .OrderBy?",
              "createdAt": "2021-06-07T15:35:02Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -52,7 +62,12 @@ public override bool Execute()\n \n                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))\n                     {\n-                        foreach (var item in ItemsToHash)\n+                        IEnumerable<ITaskItem> items = ItemsToHash;\n+                        if (IgnoreOrder)\n+                        {\n+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "While I'm not sure there'd be an observable difference sorting the input `ITaskItem[]` in place, the explicit new enuerable created by `OrderBy` feels like a better approach to me.",
              "createdAt": "2021-06-07T16:16:00Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -52,7 +62,12 @@ public override bool Execute()\n \n                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))\n                     {\n-                        foreach (var item in ItemsToHash)\n+                        IEnumerable<ITaskItem> items = ItemsToHash;\n+                        if (IgnoreOrder)\n+                        {\n+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "nit: No need to use `IgnoreCase` here, it's only making the sorting operation slower. The result will be correct even if items are always sorted case sensitive.",
              "createdAt": "2021-06-08T09:24:52Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -52,7 +62,12 @@ public override bool Execute()\n \n                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))\n                     {\n-                        foreach (var item in ItemsToHash)\n+                        IEnumerable<ITaskItem> items = ItemsToHash;\n+                        if (IgnoreOrder)\n+                        {\n+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I actually think that in place sort should be better here than Linq. Hash does show up in profiles, and we should really care about allocations. From my reading of binlogs Hash is used quite a lot to hash large arrays. And OrderBy is just insanely wasteful:\r\nhttps://github.com/KirillOsenkov/Benchmarks/blob/516b5bde9bd7bdc59a9fdd5b6436b26480d7d795/src/Tests/SortDictionary.cs#L10-L17",
              "createdAt": "2021-06-15T01:00:53Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -52,7 +62,12 @@ public override bool Execute()\n \n                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))\n                     {\n-                        foreach (var item in ItemsToHash)\n+                        IEnumerable<ITaskItem> items = ItemsToHash;\n+                        if (IgnoreOrder)\n+                        {\n+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}