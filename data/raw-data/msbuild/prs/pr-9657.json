{
  "number": 9657,
  "title": "Optimize SDK resolution in dotnet build",
  "body": "Fixes #9506\r\n\r\n### Context\r\n\r\nIn `dotnet build`, resolving in-box Sdk's has suboptimal performance. Resolver assemblies are loaded into the process even in cases where the project asks for Sdk's like `Microsoft.NET.Sdk`, which can be looked up trivially. And in fact, they are looked up trivially but only after resolver assemblies have been loaded and invoked.\r\n\r\nThe inefficiency is shown by the recently added logging:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/bc3fb867-df4a-46cd-81b4-07e33b2992a2)\r\n\r\nThere is also a subtle and confusing functional difference between `MSBuild.exe` and `dotnet build` where a NuGet package may take precedence over an in-box Sdk in `dotnet build`, but the same is not possible in `MSBuild.exe`.\r\n\r\n### Changes Made\r\n\r\nMade the default resolver handle the Sdk resolution first, before external resolvers are consulted. This is better perf-wise and aligns with `MSBuild.exe`, please see the large code comment for details.\r\n\r\nThis eliminates all but the last log event: `The SDK \"Microsoft.NET.Sdk\" was successfully resolved by the \"DefaultSdkResolver\" resolver to location \"C:\\Program Files\\dotnet\\sdk\\9.0.100-alpha.1.24067.2\\Sdks\\Microsoft.NET.Sdk\\Sdk\" and version \"\".`\r\n\r\n### Testing\r\n\r\nExisting and new unit tests, manual testing of various builds.\r\n\r\nPerf testing: `dotnet build` that builds a project depending on in-box Sdks is ~10 ms faster and loads 5 fewer assemblies, as long as it's built with `MSBuildEnableWorkloadResolver=false` (see below).\r\n\r\n### Notes\r\n\r\nWhile we don't have to ask the `MSBuildWorkloadSdkResolver` and `NuGetSdkResolver` to resolve in-box Sdk's anymore, this change is unfortunately not avoiding these resolvers in most builds. They are still loaded to resolve the special `Microsoft.NET.SDK.WorkloadAutoImportPropsLocator` Sdk, unless workloads are disabled.",
  "state": "MERGED",
  "createdAt": "2024-01-17T22:01:27Z",
  "updatedAt": "2024-02-12T10:29:50Z",
  "closedAt": "2024-02-12T10:29:49Z",
  "mergedAt": "2024-02-12T10:29:49Z",
  "additions": 137,
  "deletions": 15,
  "changedFiles": 5,
  "headRefName": "core-sdk-resolution",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f85ee43904d40d59a270ae03675a471cc50e96ef",
          "message": "[Core-only] Check DefaultSdkResolver first",
          "committedDate": "2024-01-17T12:31:58Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b56c91bc1c38d53849f6633473fe6d33d6561509",
          "message": "Remove unused field",
          "committedDate": "2024-01-17T12:32:30Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b78f5fca674d2ee1e441a82b9af28b080f8ec585",
          "message": "Add test",
          "committedDate": "2024-01-17T14:21:23Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "379221ceea7f4524c1849867a498fde91266224f",
          "message": "Fix resolver name in comment",
          "committedDate": "2024-01-17T22:11:51Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> While we don't have to ask the MSBuildWorkloadSdkResolver and NuGetSdkResolver to resolve in-box Sdk's anymore, this change is unfortunately not avoiding these resolvers in most builds. They are still loaded to resolve the special Microsoft.NET.SDK.WorkloadAutoImportPropsLocator Sdk, unless workloads are disabled.\r\n\r\n@dsplaisted, do you think we can avoid resolving `Microsoft.NET.SDK.WorkloadAutoImportPropsLocator` when evaluating projects that don't use workloads? It would save 5 assembly loads + running some code, in hot scenarios measured at ~10 ms of overhead.",
        "createdAt": "2024-01-17T22:06:39Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > While we don't have to ask the MSBuildWorkloadSdkResolver and NuGetSdkResolver to resolve in-box Sdk's anymore, this change is unfortunately not avoiding these resolvers in most builds. They are still loaded to resolve the special Microsoft.NET.SDK.WorkloadAutoImportPropsLocator Sdk, unless workloads are disabled.\r\n> \r\n> @dsplaisted, do you think we can avoid resolving `Microsoft.NET.SDK.WorkloadAutoImportPropsLocator` when evaluating projects that don't use workloads? It would save 5 assembly loads + running some code, in hot scenarios measured at ~10 ms of overhead.\r\n\r\nThere's not an easy way to do this, because that SDK is imported before we know whether workloads are going to be used.  Even if we got rid of that import, we would still then import `Microsoft.NET.SDK.WorkloadManifestTargetsLocator`, which we need to import to determine if a workload is used, and probably would have the same perf characteristics as the PropsLocator (both of them need to figure out what workload manifests to load, so right now the PropsLocator is the one that takes that hit, but TargetsLocator would have to do basically the same thing if PropsLocator hadn't done it).\r\n\r\nI think to speed this up we would need to speed up the resolver itself, or find a way to cache its data better.",
        "createdAt": "2024-01-18T17:12:34Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> > @dsplaisted, do you think we can avoid resolving `Microsoft.NET.SDK.WorkloadAutoImportPropsLocator` when evaluating projects that don't use workloads? It would save 5 assembly loads + running some code, in hot scenarios measured at ~10 ms of overhead.\r\n> \r\n> There's not an easy way to do this, because that SDK is imported before we know whether workloads are going to be used. Even if we got rid of that import, we would still then import `Microsoft.NET.SDK.WorkloadManifestTargetsLocator`, which we need to import to determine if a workload is used, and probably would have the same perf characteristics as the PropsLocator (both of them need to figure out what workload manifests to load, so right now the PropsLocator is the one that takes that hit, but TargetsLocator would have to do basically the same thing if PropsLocator hadn't done it).\r\n> \r\n> I think to speed this up we would need to speed up the resolver itself, or find a way to cache its data better.\r\n\r\nThank you. Can we realistically defer these imports until `WorkloadMSBuildSdkResolver` is invoked to resolve a \"real\" Sdk? I may not be understanding the full complexity but it looks as though if all (user-specified) Sdk's are resolved by simply finding the matching directory under `Sdks`, then we know for sure no workload is used. Only if we end up actually calling `WorkloadMSBuildSdkResolver`, there is a possibility it is a workload (or it can be a NuGet-delivered Sdk - we have to bite the bullet either way).\r\n",
        "createdAt": "2024-01-19T07:42:42Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Thank you. Can we realistically defer these imports until `WorkloadMSBuildSdkResolver` is invoked to resolve a \"real\" Sdk? I may not be understanding the full complexity but it looks as though if all (user-specified) Sdk's are resolved by simply finding the matching directory under `Sdks`, then we know for sure no workload is used. Only if we end up actually calling `WorkloadMSBuildSdkResolver`, there is a possibility it is a workload (or it can be a NuGet-delivered Sdk - we have to bite the bullet either way).\r\n\r\n@ladipro A project doesn't explicitly specify an MSBuild SDK import to depend on a workload.  Workloads can be enabled by any MSBuild property, and that mapping is defined in the WorkloadManifest.targets file of each workload manifest.  For example, if the target platform is Android, then the Android workload will be required, and the `RunAOTCompilation` property enables the wasm-tools workload for Blazor projects.  How this works is covered in this design doc: https://github.com/dotnet/designs/blob/main/accepted/2020/workloads/workload-resolvers.md.\r\n\r\nBasically we can't know whether a project uses a workload or not without first running the workloads resolver and processing the .targets files that come from the workload manifests.",
        "createdAt": "2024-01-19T14:38:15Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> @ladipro A project doesn't explicitly specify an MSBuild SDK import to depend on a workload. Workloads can be enabled by any MSBuild property, and that mapping is defined in the WorkloadManifest.targets file of each workload manifest. For example, if the target platform is Android, then the Android workload will be required, and the `RunAOTCompilation` property enables the wasm-tools workload for Blazor projects. How this works is covered in this design doc: https://github.com/dotnet/designs/blob/main/accepted/2020/workloads/workload-resolvers.md.\r\n> \r\n> Basically we can't know whether a project uses a workload or not without first running the workloads resolver and processing the .targets files that come from the workload manifests.\r\n\r\nAh, I was completely off base then. Ok, so the next best thing we can do is have resolvers statically declare their priority so at least the NuGet resolver is pay-for-play - loaded and called only when actually needed. That should be mostly MSBuild work. Anyway, thank you!",
        "createdAt": "2024-01-19T15:15:12Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Removing an unused field here.",
              "createdAt": "2024-01-17T22:12:44Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -316,11 +316,6 @@ public bool LogTaskInputs\n         /// </summary>\n         public readonly bool DisableSdkResolutionCache = Environment.GetEnvironmentVariable(\"MSBUILDDISABLESDKCACHE\") == \"1\";\n \n-        /// <summary>\n-        /// Disable the NuGet-based SDK resolver.\n-        /// </summary>\n-        public readonly bool DisableNuGetSdkResolver = Environment.GetEnvironmentVariable(\"MSBUILDDISABLENUGETSDKRESOLVER\") == \"1\";\n-",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Should we just remove it, or should we make it do something? I imagine someone wanted it at some point, so I'm curious why making it not do anything is ok.",
              "createdAt": "2024-01-18T18:30:02Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -316,11 +316,6 @@ public bool LogTaskInputs\n         /// </summary>\n         public readonly bool DisableSdkResolutionCache = Environment.GetEnvironmentVariable(\"MSBUILDDISABLESDKCACHE\") == \"1\";\n \n-        /// <summary>\n-        /// Disable the NuGet-based SDK resolver.\n-        /// </summary>\n-        public readonly bool DisableNuGetSdkResolver = Environment.GetEnvironmentVariable(\"MSBUILDDISABLENUGETSDKRESOLVER\") == \"1\";\n-",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is likely a leftover from when the NuGet resolver was part of this repo. The environment variable is read in the resolver and presumably doing what it was doing here:\r\nhttps://github.com/NuGet/NuGet.Client/blob/566e2853b8537e8b484844fad32b3f6073ba3167/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkResolver.cs#L34",
              "createdAt": "2024-01-19T08:19:23Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -316,11 +316,6 @@ public bool LogTaskInputs\n         /// </summary>\n         public readonly bool DisableSdkResolutionCache = Environment.GetEnvironmentVariable(\"MSBUILDDISABLESDKCACHE\") == \"1\";\n \n-        /// <summary>\n-        /// Disable the NuGet-based SDK resolver.\n-        /// </summary>\n-        public readonly bool DisableNuGetSdkResolver = Environment.GetEnvironmentVariable(\"MSBUILDDISABLENUGETSDKRESOLVER\") == \"1\";\n-",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I may not understand how all this works properly, but I think we load SdkResolvers from manifests, right? Could we tweak the manifest instead of changing MSBuild here?",
              "createdAt": "2024-01-18T18:48:11Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -118,6 +118,53 @@ public virtual void ClearCaches()\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool failOnUnresolvedSdk)\n         {\n+            // If we are running in .NET core, we ask the built-in default resolver first.\n+            // - It is a perf optimization (no need to discover and load any of the plug-in assemblies to resolve an \"in-box\" Sdk).\n+            // - It brings `dotnet build` to parity with `MSBuild.exe` functionally, as the Framework build of Microsoft.DotNet.MSBuildSdkResolver\n+            //   contains the same logic and it is the first resolver in priority order.\n+            //\n+            // In an attempt to avoid confusion, this text uses \"SDK\" to refer to the installation unit, e.g. \"C:\\Program Files\\dotnet\\sdk\\8.0.100\",\n+            // and \"Sdk\" to refer to the set of imports for targeting a specific project type, e.g. \"Microsoft.NET.Sdk.Web\".\n+            //\n+            // Here's the flow on Framework (`MSBuild.exe`):\n+            // 1. Microsoft.DotNet.MSBuildSdkResolver is loaded and asked to resolve the Sdk required by the project.\n+            //    1.1. It resolves the SDK (as in installation directory) using machine-wide state and global.json.\n+            //    1.2. It checks the Sdks subdirectory of the SDK installation directory for a matching in-box Sdk.\n+            //    1.3. If no match, checks installed workloads.\n+            // 2. If no match so far, Microsoft.Build.NuGetSdkResolver is loaded and asked to resolve the Sdk.\n+            // 3. If no match still, DefaultSdkResolver checks the Sdks subdirectory of the Visual Studio\\MSBuild directory.\n+            //\n+            // Here's the flow on Core (`dotnet build`):\n+            // 1. DefaultSdkResolver checks the Sdks subdirectory of our SDK installation. Note that the work of resolving the\n+            //    SDK version using machine-wide state and global.json (step 1.1. in `MSBuild.exe` above) has already been done\n+            //    by the `dotnet` muxer. We know which SDK (capital letters) we are in, so the in-box Sdk lookup is trivial.\n+            // 2. If no match, Microsoft.NET.Sdk.WorkloadMSBuildSdkResolver is loaded and asked to resolve the Sdk required by the project.\n+            //    2.1. It checks installed workloads.\n+            // 3. If no match still, Microsoft.Build.NuGetSdkResolver is loaded and asked to resolve the Sdk.\n+            //\n+            // Overall, while Sdk resolvers look like a general plug-in system, there are good reasons why some of the logic is hard-coded.\n+            // It's not really meant to be modified outside of very special/internal scenarios.\n+#if NETCOREAPP",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Tweaking the manifests is something we should look into as well. One important thing currently missing is the resolver priority. To know the order, in which resolvers should be called, we have to load and instantiate all of them and read their `Priority` property. I think it would be reasonable to require the priority to be specified declaratively in the manifest - which would let us skip loading the NuGet resolver when the Sdk is resolved by the MSBuildSdk/Workloads resolver, for the common example. With this in place, the Default resolver could have its priority conditionally set depending on if we're compiling Core or Framework MSBuild.",
              "createdAt": "2024-01-19T07:21:55Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -118,6 +118,53 @@ public virtual void ClearCaches()\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool failOnUnresolvedSdk)\n         {\n+            // If we are running in .NET core, we ask the built-in default resolver first.\n+            // - It is a perf optimization (no need to discover and load any of the plug-in assemblies to resolve an \"in-box\" Sdk).\n+            // - It brings `dotnet build` to parity with `MSBuild.exe` functionally, as the Framework build of Microsoft.DotNet.MSBuildSdkResolver\n+            //   contains the same logic and it is the first resolver in priority order.\n+            //\n+            // In an attempt to avoid confusion, this text uses \"SDK\" to refer to the installation unit, e.g. \"C:\\Program Files\\dotnet\\sdk\\8.0.100\",\n+            // and \"Sdk\" to refer to the set of imports for targeting a specific project type, e.g. \"Microsoft.NET.Sdk.Web\".\n+            //\n+            // Here's the flow on Framework (`MSBuild.exe`):\n+            // 1. Microsoft.DotNet.MSBuildSdkResolver is loaded and asked to resolve the Sdk required by the project.\n+            //    1.1. It resolves the SDK (as in installation directory) using machine-wide state and global.json.\n+            //    1.2. It checks the Sdks subdirectory of the SDK installation directory for a matching in-box Sdk.\n+            //    1.3. If no match, checks installed workloads.\n+            // 2. If no match so far, Microsoft.Build.NuGetSdkResolver is loaded and asked to resolve the Sdk.\n+            // 3. If no match still, DefaultSdkResolver checks the Sdks subdirectory of the Visual Studio\\MSBuild directory.\n+            //\n+            // Here's the flow on Core (`dotnet build`):\n+            // 1. DefaultSdkResolver checks the Sdks subdirectory of our SDK installation. Note that the work of resolving the\n+            //    SDK version using machine-wide state and global.json (step 1.1. in `MSBuild.exe` above) has already been done\n+            //    by the `dotnet` muxer. We know which SDK (capital letters) we are in, so the in-box Sdk lookup is trivial.\n+            // 2. If no match, Microsoft.NET.Sdk.WorkloadMSBuildSdkResolver is loaded and asked to resolve the Sdk required by the project.\n+            //    2.1. It checks installed workloads.\n+            // 3. If no match still, Microsoft.Build.NuGetSdkResolver is loaded and asked to resolve the Sdk.\n+            //\n+            // Overall, while Sdk resolvers look like a general plug-in system, there are good reasons why some of the logic is hard-coded.\n+            // It's not really meant to be modified outside of very special/internal scenarios.\n+#if NETCOREAPP",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}