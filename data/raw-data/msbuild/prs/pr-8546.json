{
  "number": 8546,
  "title": "Use ToolTask.TaskProcessTerminationTimeout correctly",
  "body": "Use `ToolTask.TaskProcessTerminationTimeout` as termination time-out to kill external tool when it was cancelled or timed out.\r\n\r\nFixes #8545 \r\n\r\n### Context\r\n\r\nThe protected property `ToolTask.TaskProcessTerminationTimeout` has been initialized but never used. Looks like it should be used as `timeout` on the following line when killing external tool on time-out or cancellation:\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs#L940\r\n\r\n### Changes Made\r\n\r\nUse `ToolTask.TaskProcessTerminationTimeout` as termination time-out to kill external tool when it was cancelled or timed out.\r\n\r\n### Testing\r\n\r\nAll `ToolTask` unit test passed.\r\n\r\n### Notes\r\n\r\nNo new unit test created.",
  "state": "MERGED",
  "createdAt": "2023-03-08T07:42:54Z",
  "updatedAt": "2023-08-28T06:49:08Z",
  "closedAt": "2023-08-28T06:49:07Z",
  "mergedAt": "2023-08-28T06:49:07Z",
  "additions": 152,
  "deletions": 2,
  "changedFiles": 16,
  "headRefName": "issue8545",
  "isDraft": false,
  "author": {
    "login": "gpwen"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e6132a236613859a3ce50da11832434e8ac3203c",
          "message": "Use ToolTask.TaskProcessTerminationTimeout correctly\n\nUse ToolTask.TaskProcessTerminationTimeout as termination time-out\nto kill external tool when it was cancelled or timed out.",
          "committedDate": "2023-08-23T15:10:22Z",
          "author": {
            "name": "Guopeng Wen",
            "email": "guo-peng_wen@keysight.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad5ce4a53f9ab3d72babbf0d06e320750b8916cd",
          "message": "Validate ToolTask.TaskProcessTerminationTimeout",
          "committedDate": "2023-08-23T15:12:49Z",
          "author": {
            "name": "Guopeng Wen",
            "email": "guo-peng_wen@keysight.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0947cbb549c8e1896128526fee1f6031c13607bd",
          "message": "Move validation to ValidateParameters",
          "committedDate": "2023-08-23T15:47:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42f8ccff809cbe83cf4a2b0fc502a43887b752dc",
          "message": "Remove dead code",
          "committedDate": "2023-08-23T15:49:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Thank you for the contribution! Looks good!\r\n> \r\n> It would be nice to have this more defensive and explicitly error out on disallowed values (negative, other then -1 - https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.waitforexit?view=net-7.0#system-diagnostics-process-waitforexit(system-int32)). Either in the `TaskProcessTerminationTimeout` setter or in `KillToolProcessOnTimeout`\r\n\r\nI vote setter \ud83d\ude42 If KillToolProcessOnTimeout fails, I'd assume I'd called that wrong\u2014perhaps the process had already exited, or I didn't have access to it\u2014rather than that the timeout was improperly set.",
        "createdAt": "2023-03-09T19:31:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "What is the difference between this and `public virtual int Timeout` ? \r\n\r\nWould it be possible to add a unit test?",
        "createdAt": "2023-03-09T20:30:17Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> It would be nice to have this more defensive and explicitly error out on disallowed values (negative, other then -1)\r\n\r\nHi @JanKrivanek, you're absolutely right. There must be some checking since that's meant to be used by derived class. However, I'm not sure how to report error. It feels like the correct way is checking that in ValidateParameters() and log build errors. But that would confuse end user (they didn't set anything).\r\n\r\nHow about exception? Or silently reject invalid setting in setter? Like what's been done with the \"MSBUILDTOOLTASKCANCELPROCESSWAITTIMEOUT\" environment string. Or silent clipping? What's the official way to do such derived class setting validation in MSBuild tasks?",
        "createdAt": "2023-03-13T06:20:58Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "> What is the difference between this and `public virtual int Timeout` ?\r\n\r\n`Timeout` is the time-out for external tool execution; `TaskProcessTerminationTimeout` is the time-out for killing the tool process when it needs to be terminated.\r\n\r\n> Would it be possible to add a unit test?\r\n\r\nI've considered that, but it's well in the process manipulation territory. I'm not even sure if I can create an effective one to verify the effect of that parameter. It would look like some unit tests for `Process.KillTree()`.",
        "createdAt": "2023-03-13T06:28:09Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "More thoughts about `ToolTask.TaskProcessTerminationTimeout` validation: Looks like \"silent rejection\" in setter is the most backward-compatible way, considering the property was originally ignored. That way, derived classes that currently set the parameter to invalid value won't be suddenly broken.\r\n\r\nBesides, we have the prior art of the `MSBUILDTOOLTASKCANCELPROCESSWAITTIMEOUT` environment setting handling.",
        "createdAt": "2023-03-13T07:40:13Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "> More thoughts about `ToolTask.TaskProcessTerminationTimeout` validation: Looks like \"silent rejection\" in setter is the most backward-compatible way, considering the property was originally ignored. That way, derived classes that currently set the parameter to invalid value won't be suddenly broken.\r\n> \r\n> Besides, we have the prior art of the `MSBUILDTOOLTASKCANCELPROCESSWAITTIMEOUT` environment setting handling.\r\n\r\nThis sounds reasonable, but I do like the idea of an explicit error as JanKrivanek suggested. If we want a compromise, perhaps we could have a user-visible error behind a change wave if they set it to an invalid value? Then we could gather data as to how many people are actually setting it to something invalid; if it's common, we can switch to the silent rejection, and if no one complains, it'll eventually become the default. How does that sound?",
        "createdAt": "2023-03-13T18:35:40Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "In fact I like the idea of failing early and failing loudly, just a little bit concerned about breaking existing code.\r\n\r\nI pushed an update. The setter will now throw `ArgumentOutOfRangeException`, and unit tests have been added to test the validation logic. Please have a check.",
        "createdAt": "2023-03-14T05:09:50Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "@gpwen thank you for this contribution - do you plan to contribute the suggested changes (legacy timeout when opted-out via changewave, and validation within `ValidateParameters()`)?",
        "createdAt": "2023-05-15T17:35:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                if (value < -1 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6))\r\n```",
              "createdAt": "2023-03-16T22:34:40Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -134,10 +134,30 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)\n         /// </summary>\n         public bool EchoOff { get; set; }\n \n+        /// <summary>\n+        /// This is the backing field for property <see cref=\"TaskProcessTerminationTimeout\" />.\n+        /// </summary>\n+        private int _taskProcessTerminationTimeout;\n+\n         /// <summary>\n         /// A timeout to wait for a task to terminate before killing it.  In milliseconds.\n         /// </summary>\n-        protected int TaskProcessTerminationTimeout { get; set; }\n+        /// <exception cref=\"ArgumentOutOfRangeException\">Thrown if the property is set to a negative value other than -1.</exception>\n+        protected int TaskProcessTerminationTimeout\n+        {\n+            get => _taskProcessTerminationTimeout;\n+            set\n+            {\n+                if (value < -1)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Could also simplify a bit with VerifyThrow...\r\n\r\nBut that should be equivalent from the user's perspective.",
              "createdAt": "2023-03-16T22:35:20Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -134,10 +134,30 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)\n         /// </summary>\n         public bool EchoOff { get; set; }\n \n+        /// <summary>\n+        /// This is the backing field for property <see cref=\"TaskProcessTerminationTimeout\" />.\n+        /// </summary>\n+        private int _taskProcessTerminationTimeout;\n+\n         /// <summary>\n         /// A timeout to wait for a task to terminate before killing it.  In milliseconds.\n         /// </summary>\n-        protected int TaskProcessTerminationTimeout { get; set; }\n+        /// <exception cref=\"ArgumentOutOfRangeException\">Thrown if the property is set to a negative value other than -1.</exception>\n+        protected int TaskProcessTerminationTimeout\n+        {\n+            get => _taskProcessTerminationTimeout;\n+            set\n+            {\n+                if (value < -1)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@gpwen sorry for not giving precise guidance and then missing this PR.\r\n`ValidateParameters()` is the best location for this validation - it'll ensure clean comunication of the issue to the user. Ideally error is logged there and `false` returned.\r\n\r\nFor simplicity - if change wave is not on (it is on by default - opting-out means somebody willingly wants legacy behavior) - I'd just set the value to the legacy one (`5000`) - regardless of validity of the value.\r\n\r\nOther than that - it looks good.\r\n",
              "createdAt": "2023-04-03T15:53:46Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -134,10 +134,30 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)\n         /// </summary>\n         public bool EchoOff { get; set; }\n \n+        /// <summary>\n+        /// This is the backing field for property <see cref=\"TaskProcessTerminationTimeout\" />.\n+        /// </summary>\n+        private int _taskProcessTerminationTimeout;\n+\n         /// <summary>\n         /// A timeout to wait for a task to terminate before killing it.  In milliseconds.\n         /// </summary>\n-        protected int TaskProcessTerminationTimeout { get; set; }\n+        /// <exception cref=\"ArgumentOutOfRangeException\">Thrown if the property is set to a negative value other than -1.</exception>\n+        protected int TaskProcessTerminationTimeout\n+        {\n+            get => _taskProcessTerminationTimeout;\n+            set\n+            {\n+                if (value < -1)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Implemented",
              "createdAt": "2023-08-23T15:48:14Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -134,10 +134,30 @@ protected ToolTask(ResourceManager taskResources, string helpKeywordPrefix)\n         /// </summary>\n         public bool EchoOff { get; set; }\n \n+        /// <summary>\n+        /// This is the backing field for property <see cref=\"TaskProcessTerminationTimeout\" />.\n+        /// </summary>\n+        private int _taskProcessTerminationTimeout;\n+\n         /// <summary>\n         /// A timeout to wait for a task to terminate before killing it.  In milliseconds.\n         /// </summary>\n-        protected int TaskProcessTerminationTimeout { get; set; }\n+        /// <exception cref=\"ArgumentOutOfRangeException\">Thrown if the property is set to a negative value other than -1.</exception>\n+        protected int TaskProcessTerminationTimeout\n+        {\n+            get => _taskProcessTerminationTimeout;\n+            set\n+            {\n+                if (value < -1)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}