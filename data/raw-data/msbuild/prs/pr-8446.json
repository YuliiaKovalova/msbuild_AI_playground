{
  "number": 8446,
  "title": "Improve VS binlogs providing info",
  "body": "### Context\r\nAs discussed on triage - binlogs captured through VS project system extension tooling are less preferrable to logs captured via environment opt-in. Let's make it more explicit in our docs that we are often linking externally to our customers.\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-14T16:15:41Z",
  "updatedAt": "2023-02-20T10:16:42Z",
  "closedAt": "2023-02-20T10:16:42Z",
  "mergedAt": "2023-02-20T10:16:42Z",
  "additions": 29,
  "deletions": 8,
  "changedFiles": 2,
  "headRefName": "doc/providing-vs-binlogs",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "014b8dd1df7959f2c3a37bf9c21f6c4befc9818c",
          "message": "Improve VS binlogs providing info",
          "committedDate": "2023-02-14T16:07:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "625a9516e35e1386d649f56b2d0eefbfaf7e3663",
          "message": "Supplement the info",
          "committedDate": "2023-02-14T16:15:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58a872f8186638ea2521e03b473d324d3f8497f4",
          "message": "Improving the info",
          "committedDate": "2023-02-15T09:08:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "04f75d39d9c0b648a71600447c2b87e45c4a5f1d",
          "message": "Clarify the doc",
          "committedDate": "2023-02-16T08:46:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "krivanek.j@hotmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53d0be0871813878cdc44272d32b876d0c3d279c",
          "message": "Update documentation/wiki/Providing-Binary-Logs.md\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-02-20T09:36:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "krivanek.j@hotmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I do not find this reliable and generally prefer explicitly specifying `MSBUILDDEBUGPATH`.",
              "createdAt": "2023-02-14T16:22:54Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,23 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to `MSBuild_Logs` subfolder of a current folder.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "(If MSBUILDDEBUGPATH is unset, it tries the current folder then temp...it's more confusing.)",
              "createdAt": "2023-02-15T00:45:47Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,23 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to `MSBuild_Logs` subfolder of a current folder.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe also worth crosslinking to https://github.com/dotnet/project-system/blob/3742e229b41a086d738745a5e5a7a15f535deff7/docs/repo/debugging/design-time-builds.md#gathering-full-fidelity-binlogs",
              "createdAt": "2023-02-14T16:24:31Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,23 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to `MSBuild_Logs` subfolder of a current folder.\n+\n+\u26a0 NOTE: logs are being recorded for each MSBuild invocation (including design time builds) and kept in the folder without removing older ones - so the number of log files can grow quickly. It is recommended to set the opt-in environment variable only for the short duration of reproducing the issue to be investigated (though it is understandable that some nondeterministic issues might need multiple reproduction attempts)\n+\n+[More technical info](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#logs)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like this never resurfaced in Providing-Binary-Logs.md? Was that intentional? As far as I know, this still works; it's just harder.",
              "createdAt": "2023-02-16T07:12:15Z",
              "path": "documentation/wiki/Binary-Log.md",
              "diffHunk": "@@ -66,12 +66,7 @@ https://msbuildlog.com/\n \n # Collecting binary logs from Visual Studio builds\n \n-If you need to capture a binary log in Visual Studio, instead of the command line, you'll need a Visual Studio plugin:",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This was intentional. \r\n\r\nThe info is in the project system docs that the link eventualy leads to. So this way we do not need to make sure to update the info with each release of VS and mainly we switch the order of suggestions - promoting the `MSBUILDDEBUGENGINE` as preferable option.",
              "createdAt": "2023-02-16T08:32:58Z",
              "path": "documentation/wiki/Binary-Log.md",
              "diffHunk": "@@ -66,12 +66,7 @@ https://msbuildlog.com/\n \n # Collecting binary logs from Visual Studio builds\n \n-If you need to capture a binary log in Visual Studio, instead of the command line, you'll need a Visual Studio plugin:",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nI'd add \"and setting `MSBUILDDEBUGPATH` to a folder you can find\" to line 15 above, then noting the defaults if you don't set it here. The idea is that we'd rather they just set that path and not rely on the defaults...but if it's not set, the feature still works.",
              "createdAt": "2023-02-16T07:15:34Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to a location specified via `MSBUILDDEBUGPATH` environment variable (or defaults to `MSBuild_Logs` subfolder of a current folder or `%temp%`, based on access rights).",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure if this is obvious to senior developers, but I had absolutely no idea how to set environment variables that affected Visual Studio before I was told to set the environment variables in a command prompt then open VS from that command prompt. That probably bears mentioning here.",
              "createdAt": "2023-02-16T07:16:37Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Very good feedback - since we are linking this in external items (asking customers for more data) - it should be super clear - updating..",
              "createdAt": "2023-02-16T08:35:33Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "...and added a bug on the PS repo https://github.com/dotnet/project-system/issues/8857\r\n\r\n\ud83d\ude07",
              "createdAt": "2023-02-16T07:22:49Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to a location specified via `MSBUILDDEBUGPATH` environment variable (or defaults to `MSBuild_Logs` subfolder of a current folder or `%temp%`, based on access rights).\n+\n+\u26a0 NOTE: logs are being recorded for each MSBuild invocation (including design time builds) and kept in the folder without removing older ones - so the number of log files can grow quickly. It is recommended to set the opt-in environment variable only for the short duration of reproducing the issue to be investigated (though it is understandable that some nondeterministic issues might need multiple reproduction attempts)\n+\n+Further reading:\n+* [More technical info](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#logs)\n+* [Design time builds logs](https://github.com/dotnet/project-system/blob/main/docs/repo/debugging/design-time-builds.md#gathering-full-fidelity-binlogs)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Perfect!\r\n\r\nDo you want to shoot a quick PR to their docs to rectify it right away?",
              "createdAt": "2023-02-16T08:33:43Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to a location specified via `MSBUILDDEBUGPATH` environment variable (or defaults to `MSBuild_Logs` subfolder of a current folder or `%temp%`, based on access rights).\n+\n+\u26a0 NOTE: logs are being recorded for each MSBuild invocation (including design time builds) and kept in the folder without removing older ones - so the number of log files can grow quickly. It is recommended to set the opt-in environment variable only for the short duration of reproducing the issue to be investigated (though it is understandable that some nondeterministic issues might need multiple reproduction attempts)\n+\n+Further reading:\n+* [More technical info](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#logs)\n+* [Design time builds logs](https://github.com/dotnet/project-system/blob/main/docs/repo/debugging/design-time-builds.md#gathering-full-fidelity-binlogs)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "MiYanni said he didn't want it fixed, sadly.",
              "createdAt": "2023-02-16T23:29:44Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,25 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'`:\n+```\n+> SET MSBUILDDEBUGENGINE=1\n+> devenv.exe MySolution.sln\n+```\n+\n+MSBuild binary logs are then captured to a location specified via `MSBUILDDEBUGPATH` environment variable (or defaults to `MSBuild_Logs` subfolder of a current folder or `%temp%`, based on access rights).\n+\n+\u26a0 NOTE: logs are being recorded for each MSBuild invocation (including design time builds) and kept in the folder without removing older ones - so the number of log files can grow quickly. It is recommended to set the opt-in environment variable only for the short duration of reproducing the issue to be investigated (though it is understandable that some nondeterministic issues might need multiple reproduction attempts)\n+\n+Further reading:\n+* [More technical info](Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md#logs)\n+* [Design time builds logs](https://github.com/dotnet/project-system/blob/main/docs/repo/debugging/design-time-builds.md#gathering-full-fidelity-binlogs)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A short fragment feels fine to me, but this is getting a little unwieldy.\r\n\r\n```suggestion\r\nSet `MSBUILDDEBUGENGINE` environment variable to `'1'` and (optionally) set `MSBUILDDEBUGPATH` to an existing destination folder to store the captured logs. Then start Visual Studio from the same shell to inherit the environment:\r\n```",
              "createdAt": "2023-02-16T23:32:19Z",
              "path": "documentation/wiki/Providing-Binary-Logs.md",
              "diffHunk": "@@ -6,9 +6,35 @@ However, you should be aware what type of information is captured in the binary\n \n \u26a0 NOTE: some build environments make secrets available using environment variables. Before sharing a binary log, make sure it does not expose API tokens or other important secrets.\n \n-You can create a binary log by passing the `-bl` parameter to MSBuild. You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n+You can create a binary log by passing the `-bl` parameter to MSBuild (`MSBuild.exe` or `dotnet build`). You can explore the contents of the generated .binlog file using [MSBuild Structured Log Viewer](http://msbuildlog.com/) or in your browser using [Live Structured Log Viewer](https://live.msbuildlog.com). Note: We don't capture any data from binary logs viewed on your browser.\n \n [More details about binary logs](Binary-Log.md)\n \n ## Capturing Binary Logs Through Visual Studio\n-See [this guide](https://github.com/dotnet/project-system-tools) in the Project System Tools repo for capturing binlogs through Visual Studio.\n\\ No newline at end of file\n+### (Preferred way) Capturing logs for all MSBuild invocations\n+Via setting `MSBUILDDEBUGENGINE` environment variable to `'1'` and (optionaly) `MSBUILDDEBUGPATH` to an existing destination folder to store the captured logs and starting the Visual Studio from the same shell to inherit the environment:",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}