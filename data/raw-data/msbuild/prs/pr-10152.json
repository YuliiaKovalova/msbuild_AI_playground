{
  "number": 10152,
  "title": "Fix incorrect use of GetOrAdd",
  "body": "The method `GetOrAdd` has two overloads with two arguments:\r\n\r\n```csharp\r\nGetOrAdd(string key, object value);\r\nGetOrAdd(string key, Func<string, object> valueFactory);\r\n```\r\n\r\nThe lambda here does not take an argument hence it's not compatible with `Func<string, object>`. It is compatible with `object` though because a delegate can convert to `object`.\r\n\r\nThis is problematic because there is no guarantee the delegate here is unqiue. The compiler is free to cache instantiations of delegates, particularly ones like this which capture no state. That means different keys could very well be sharing the same value.\r\n\r\nFixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-05-17T20:30:03Z",
  "updatedAt": "2024-05-17T21:50:16Z",
  "closedAt": "2024-05-17T21:50:15Z",
  "mergedAt": "2024-05-17T21:50:15Z",
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "dev/jaredpar/race",
  "isDraft": false,
  "author": {
    "login": "jaredpar"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6704b4b84bd91c34ee6bfcbb167b8a35dcfc58c0",
          "message": "Fix incorrect use of GetOrAdd\n\nThe method `GetOrAdd` has two overloads with two arguments:\n\n```csharp\nGetOrAdd(string key, object value);\nGetOrAdd(string key, Func<string, object> valueFactory);\n```\n\nThe lambda here does not take an argument hence it's not compatible with\n`Func<string, object>`. It is compatible with `object` though because a\ndelegate can convert to `object`.\n\nThis is problematic because there is no guarantee the delegate here is\nunqiue. The compiler is free to cache instantiations of delegates,\nparticularly ones like this which capture no state. That means different\nkeys could very well be sharing the same value.",
          "committedDate": "2024-05-17T20:26:52Z",
          "author": {
            "name": "Jared Parsons",
            "email": "jared@paranoidcoding.org"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Is this a coincidence?\r\n> \r\n> [NuGet/NuGet.Client#5808](https://github.com/NuGet/NuGet.Client/pull/5808)\r\n\r\nNo :wink:",
        "createdAt": "2024-05-17T20:42:42Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "@rainersigwald, @baronfel i'm not authorized to merge this myself",
        "createdAt": "2024-05-17T21:31:11Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Alternatively, you could have changed the comment from \"Take a per-file lock\" to \"Take a global lock\" :smile:",
              "createdAt": "2024-05-17T20:42:13Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -273,7 +273,7 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n             try\n             {\n                 // We are about to load. Take a per-file lock to prevent multiple threads from duplicating the work multiple times.",
              "author": {
                "login": "stephentoub"
              }
            }
          ]
        }
      }
    ]
  }
}