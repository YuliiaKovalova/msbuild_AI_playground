{
  "number": 8565,
  "title": "Fix graph target list for multitargetting projects using BuildProjectReferences=false",
  "body": "This change fixes graph builds for multitargetting projects using BuildProjectReferences=false\r\n\r\nPreviously, when using BuildProjectReferences=false the graph would consider the outer build calling GetTargetPath on the inner builds. However, it actually calls Build when dispatching to the inner builds, and those call GetTargetPath on their dependencies. In effect this is causing graph builds to be non-graph builds since the target list is not accurately described.\r\n\r\nThis change ensures the correct behavior by separating the ProjectReferenceTargets logic for single and multi-targetting projects.\r\n\r\n## Before\r\n\r\nOnly the top-level project is in the graph, and the inner builds do not have \"Build\" as a predicted target:\r\n![image](https://user-images.githubusercontent.com/6445614/225098959-c886fa55-9995-422c-a4ca-f10b272671cb.png)\r\n\r\nDispatching to inner builds does not come from cache:\r\n![image](https://user-images.githubusercontent.com/6445614/225099046-dc048111-46d5-4df2-b3ae-ba33e67695d4.png)\r\n\r\nInner builds resolving dependencies does not come from cache:\r\n![image](https://user-images.githubusercontent.com/6445614/225099285-0351acce-7611-4b7f-a6e9-dfc45dfc74ac.png)\r\n\r\n## After\r\n\r\nEverything is in the graph properly:\r\n![image](https://user-images.githubusercontent.com/6445614/225099672-3fe1834d-5b67-4862-b93d-f7ee9728a338.png)\r\n\r\nDispatching to inner builds comes from cache:\r\n![image](https://user-images.githubusercontent.com/6445614/225099854-ca017281-000a-4047-9cfc-86a657b34ea1.png)\r\n\r\nInner builds resolving dependencies comes from cache:\r\n![image](https://user-images.githubusercontent.com/6445614/225099972-d07d0a5d-f43f-43d1-8a24-78ae3d2b4d94.png)\r\n\r\nCC @rainersigwald who was hitting this as well.\r\nCC @DmitriyShepelev who may be interested from an isolation standpoint.",
  "state": "MERGED",
  "createdAt": "2023-03-14T18:16:53Z",
  "updatedAt": "2023-04-05T19:36:01Z",
  "closedAt": "2023-04-05T19:33:59Z",
  "mergedAt": "2023-04-05T19:33:59Z",
  "additions": 80,
  "deletions": 12,
  "changedFiles": 2,
  "headRefName": "fix-multitargeting-graph-targetlist",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5db8c492ff7bae460f0c9bb2edf44427fb2ad978",
          "message": "Fix graph target list for multitargetting projects",
          "committedDate": "2023-03-14T18:10:22Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> The problem was that inner builds were being told to build \"what you should build if you're a project reference\" instead of what they should be by default, and it seems like the answer you're using here is changing what targets a project reference should build based on whether you're an inner or outer build rather than changing the referencing project's inner builds to use a separate set of targets that includes .default. Is that correct? If so, what makes that way superior to changing the set of targets the inner builds actually build?\r\n\r\nThat doesn't sound right.\r\n\r\nThe problem is that previously the p2p was describing that the outer build only called `GetTargetPath` when BPR=false. But that's not what happens. The outer build calls the default targets on the inner builds, and the inner builds are the ones which only call `GetTargetPath` when BPR=false. So the conditions here accommodate that.\r\n\r\n> My (probably wrong) concern is that this will make the inner builds of referenced projects build instead of just assuming they're up-to-date.\r\n\r\nBecause for inner builds we still have it saying it calls `GetTargetPath` on its references. And `GetTargetPath` isn't configured to \"flow\" to any references. Ie there is nothing like `<ProjectReferenceTargets Include=\"GetTargetPath\" Targets=\"Something\" />`",
        "createdAt": "2023-04-03T22:49:47Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok, I'll bite. Why is it? :)",
              "createdAt": "2023-03-14T18:24:40Z",
              "path": "src/Build.UnitTests/Graph/ProjectGraph_Tests.cs",
              "diffHunk": "@@ -2508,6 +2508,71 @@ public void MultipleProjectReferencesSameFileDifferentTargets()\n             targetLists[project2].ShouldBe(new[] { \"SomeDefaultTarget2\", \"SomeOtherTarget\" });\n         }\n \n+        [Fact]\n+        public void MultitargettingTargetsWithBuildProjectReferencesFalse()\n+        {\n+            // This test should emulate Microsoft.Managed.After.targets's handling of multitargetting projects.\n+            ProjectGraph graph = Helpers.CreateProjectGraph(\n+                env: _env,\n+                dependencyEdges: new Dictionary<int, int[]>()\n+                {\n+                    { 1, new[] { 2 } },\n+                },\n+                globalProperties: new Dictionary<string, string> { { \"BuildProjectReferences\", \"false\" } },\n+                extraContentForAllNodes: \"\"\"\n+                <PropertyGroup>\n+                  <TargetFrameworks>netcoreapp3.1;net6.0;net7.0</TargetFrameworks>\n+                </PropertyGroup>\n+\n+                <PropertyGroup Condition=\"'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''\">\n+                  <IsCrossTargetingBuild>true</IsCrossTargetingBuild>\n+                </PropertyGroup>\n+\n+                <PropertyGroup>\n+                  <InnerBuildProperty>TargetFramework</InnerBuildProperty>\n+                  <InnerBuildPropertyValues>TargetFrameworks</InnerBuildPropertyValues>\n+                </PropertyGroup>\n+\n+                <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' != 'true'\">\n+                  <_MainReferenceTargetForBuild Condition=\"'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'\">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>\n+                  <_MainReferenceTargetForBuild Condition=\"'$(_MainReferenceTargetForBuild)' == ''\">GetTargetPath</_MainReferenceTargetForBuild>\n+\n+                  <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+                </PropertyGroup>\n+                <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+                  <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+                </PropertyGroup>\n+\n+                <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n+\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n+                </ItemGroup>\n+\n+                <Target Name=\"Build\" />\n+                <Target Name=\"GetTargetPath\" />\n+                <Target Name=\"GetNativeManifest\" />\n+                <Target Name=\"GetTargetFrameworks\" />\n+                <Target Name=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\" />\n+                \"\"\");\n+\n+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(Array.Empty<string>());\n+\n+            targetLists[GetOuterBuild(graph, 1)].ShouldBe(new[] { \"Build\" });\n+            foreach (ProjectGraphNode inner in GetInnerBuilds(graph, 1))\n+            {\n+                targetLists[inner].ShouldBe(new[] { \"Build\" });\n+            }\n+\n+            targetLists[GetOuterBuild(graph, 2)].ShouldBe(new[] { \"GetTargetFrameworks\" });\n+            foreach (ProjectGraphNode inner in GetInnerBuilds(graph, 2))\n+            {\n+                // GetTargetFrameworks actually shouldn't be here...",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Because we need to rewrite how this all works :)\r\n\r\nBut specifically it's this line:\r\n\r\n```xml\r\n<ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\r\n```\r\n\r\nI couldn't think of a way to ensure that only applies from outer build to outer build and *not* the inner build.",
              "createdAt": "2023-03-14T18:31:37Z",
              "path": "src/Build.UnitTests/Graph/ProjectGraph_Tests.cs",
              "diffHunk": "@@ -2508,6 +2508,71 @@ public void MultipleProjectReferencesSameFileDifferentTargets()\n             targetLists[project2].ShouldBe(new[] { \"SomeDefaultTarget2\", \"SomeOtherTarget\" });\n         }\n \n+        [Fact]\n+        public void MultitargettingTargetsWithBuildProjectReferencesFalse()\n+        {\n+            // This test should emulate Microsoft.Managed.After.targets's handling of multitargetting projects.\n+            ProjectGraph graph = Helpers.CreateProjectGraph(\n+                env: _env,\n+                dependencyEdges: new Dictionary<int, int[]>()\n+                {\n+                    { 1, new[] { 2 } },\n+                },\n+                globalProperties: new Dictionary<string, string> { { \"BuildProjectReferences\", \"false\" } },\n+                extraContentForAllNodes: \"\"\"\n+                <PropertyGroup>\n+                  <TargetFrameworks>netcoreapp3.1;net6.0;net7.0</TargetFrameworks>\n+                </PropertyGroup>\n+\n+                <PropertyGroup Condition=\"'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''\">\n+                  <IsCrossTargetingBuild>true</IsCrossTargetingBuild>\n+                </PropertyGroup>\n+\n+                <PropertyGroup>\n+                  <InnerBuildProperty>TargetFramework</InnerBuildProperty>\n+                  <InnerBuildPropertyValues>TargetFrameworks</InnerBuildPropertyValues>\n+                </PropertyGroup>\n+\n+                <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' != 'true'\">\n+                  <_MainReferenceTargetForBuild Condition=\"'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'\">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>\n+                  <_MainReferenceTargetForBuild Condition=\"'$(_MainReferenceTargetForBuild)' == ''\">GetTargetPath</_MainReferenceTargetForBuild>\n+\n+                  <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+                </PropertyGroup>\n+                <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+                  <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+                </PropertyGroup>\n+\n+                <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n+\n+                  <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n+                </ItemGroup>\n+\n+                <Target Name=\"Build\" />\n+                <Target Name=\"GetTargetPath\" />\n+                <Target Name=\"GetNativeManifest\" />\n+                <Target Name=\"GetTargetFrameworks\" />\n+                <Target Name=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\" />\n+                \"\"\");\n+\n+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(Array.Empty<string>());\n+\n+            targetLists[GetOuterBuild(graph, 1)].ShouldBe(new[] { \"Build\" });\n+            foreach (ProjectGraphNode inner in GetInnerBuilds(graph, 1))\n+            {\n+                targetLists[inner].ShouldBe(new[] { \"Build\" });\n+            }\n+\n+            targetLists[GetOuterBuild(graph, 2)].ShouldBe(new[] { \"GetTargetFrameworks\" });\n+            foreach (ProjectGraphNode inner in GetInnerBuilds(graph, 2))\n+            {\n+                // GetTargetFrameworks actually shouldn't be here...",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know you just added the condition here and below, but why are we Include'ing Build and Clean multiple times with different Targets lists? I would read that as that we should execute each target multiple times, but that doesn't sound right.",
              "createdAt": "2023-04-03T21:57:12Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -58,23 +54,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n+  </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't follow the question. Can you clarify?",
              "createdAt": "2023-04-03T22:40:46Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -58,23 +54,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n+  </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Maybe it would help if you read it this way?\r\n\r\n```xml\r\n<ProjectReferenceTargets Include=\"X\" Targets=\"Y\" />\r\n```\r\n\r\nMeans \"If I'm called with and entry target X, I call Y on my ProjectRefernces\".",
              "createdAt": "2023-04-03T22:42:19Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -58,23 +54,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n+  </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Ah, so when you say:\r\n```XML\r\n<ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" />\r\n<ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\" />\r\n```\r\n\r\nwhat you're saying is \"If this project builds the Clean target as its entrypoint, build the other two.\" That makes more sense, thanks.",
              "createdAt": "2023-04-04T21:19:01Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -58,23 +54,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n+  </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yup, exactly!",
              "createdAt": "2023-04-04T21:28:16Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -58,23 +54,30 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true' and '$(IsCrossTargetingBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForBuild>.default;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+  </PropertyGroup>\n+  <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n+    <ProjectReferenceTargetsForClean>Clean;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n+    <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n+  </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" />\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"GetTargetFrameworks\" OuterBuild=\"true\" SkipNonexistentTargets=\"true\" Condition=\"'$(IsCrossTargetingBuild)' != 'true'\" />",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}