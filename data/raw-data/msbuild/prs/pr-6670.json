{
  "number": 6670,
  "title": "Add up-to-date ETW for WriteLinesToFile",
  "body": "I looked through a trace of which tasks ran even for the second identical build. Many didn't have a \"taskName,\" that is, _taskNode or _taskNode.Name was null, which surprised me. Of the rest, none in the MSBuild repo had up-to-date check behavior, as far as I could tell, except this one, so I added a check here. If I am correct, this finishes #6658 ",
  "state": "MERGED",
  "createdAt": "2021-07-13T22:53:21Z",
  "updatedAt": "2021-08-10T14:33:28Z",
  "closedAt": "2021-08-10T14:33:28Z",
  "mergedAt": "2021-08-10T14:33:28Z",
  "additions": 33,
  "deletions": 13,
  "changedFiles": 2,
  "headRefName": "writelinestofile-etw",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "376c92126121f01524eff84569a3c36684d298cb",
          "message": "Add up-to-date ETW for WriteLinesToFile",
          "committedDate": "2021-07-13T22:18:22Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4cd7d499974d971727b161d28f134a2b39008df8",
          "message": "Only fire trace if WriteOnlyWhenDifferent",
          "committedDate": "2021-07-14T21:30:31Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5eb5af2bb96e2edefe15f0e3960aa9c6b95aba48",
          "message": "Comment (make sure stop event fires)",
          "committedDate": "2021-07-15T13:53:14Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5f3622f73e5f47ba5c92848693f7cdb7e3f2110",
          "message": "Merge branch 'main' into writelinestofile-etw",
          "committedDate": "2021-08-09T14:36:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It makes me uncomfortable to emit this in (the standard) cases where `WriteOnlyWhenDifferent` is unset/false. Should we condition it?",
              "createdAt": "2021-07-14T14:08:57Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -87,6 +88,7 @@ public override bool Execute()\n                     {\n                         Directory.CreateDirectory(directoryPath);\n                         string contentsAsString = buffer.ToString();\n+                        MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's implicitly conditioned on events being enabled, so it won't be firing tons of traces into the void. Is it just that you want to be clear whether our check is super fast versus only checking WriteOnlyWhenDifferent?",
              "createdAt": "2021-07-14T14:57:29Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -87,6 +88,7 @@ public override bool Execute()\n                     {\n                         Directory.CreateDirectory(directoryPath);\n                         string contentsAsString = buffer.ToString();\n+                        MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, I'd like to be able to distinguish when we even tried to do the up-to-date check.",
              "createdAt": "2021-07-14T19:21:03Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -87,6 +88,7 @@ public override bool Execute()\n                     {\n                         Directory.CreateDirectory(directoryPath);\n                         string contentsAsString = buffer.ToString();\n+                        MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)\r\n```",
              "createdAt": "2021-07-15T11:42:25Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -423,6 +423,18 @@ public void PacketReadSize(int size)\n         {\n             WriteEvent(55, size);\n         }\n+\n+        [Event(60, Keywords = Keywords.All)]\n+        public void WriteLinesToFileUpToDateStart()\n+        {\n+            WriteEvent(60);\n+        }\n+\n+        [Event(61, Keywords = Keywords.All)]\n+        public void WriteLinesToFileUpToDateStop(string fileItemSpec)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);\r\n                                            return true;\r\n```",
              "createdAt": "2021-07-15T11:43:17Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -87,27 +88,32 @@ public override bool Execute()\n                     {\n                         Directory.CreateDirectory(directoryPath);\n                         string contentsAsString = buffer.ToString();\n-                        try\n+\n+                        // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.\n+                        if (WriteOnlyWhenDifferent)\n                         {\n-                            // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.\n-                            if (WriteOnlyWhenDifferent && FileUtilities.FileExistsNoThrow(File.ItemSpec))\n+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();\n+                            try\n                             {\n-                                string existingContents = System.IO.File.ReadAllText(File.ItemSpec);\n-                                if (existingContents.Length == buffer.Length)\n+                                if (FileUtilities.FileExistsNoThrow(File.ItemSpec))\n                                 {\n-                                    if (existingContents.Equals(contentsAsString))\n+                                    string existingContents = System.IO.File.ReadAllText(File.ItemSpec);\n+                                    if (existingContents.Length == buffer.Length)\n                                     {\n-                                        Log.LogMessageFromResources(MessageImportance.Low, \"WriteLinesToFile.SkippingUnchangedFile\", File.ItemSpec);\n-                                        return true;\n+                                        if (existingContents.Equals(contentsAsString))\n+                                        {\n+                                            Log.LogMessageFromResources(MessageImportance.Low, \"WriteLinesToFile.SkippingUnchangedFile\", File.ItemSpec);\n+                                            return true;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);\r\n```",
              "createdAt": "2021-07-15T11:43:28Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -87,27 +88,32 @@ public override bool Execute()\n                     {\n                         Directory.CreateDirectory(directoryPath);\n                         string contentsAsString = buffer.ToString();\n-                        try\n+\n+                        // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.\n+                        if (WriteOnlyWhenDifferent)\n                         {\n-                            // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.\n-                            if (WriteOnlyWhenDifferent && FileUtilities.FileExistsNoThrow(File.ItemSpec))\n+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();\n+                            try\n                             {\n-                                string existingContents = System.IO.File.ReadAllText(File.ItemSpec);\n-                                if (existingContents.Length == buffer.Length)\n+                                if (FileUtilities.FileExistsNoThrow(File.ItemSpec))\n                                 {\n-                                    if (existingContents.Equals(contentsAsString))\n+                                    string existingContents = System.IO.File.ReadAllText(File.ItemSpec);\n+                                    if (existingContents.Length == buffer.Length)\n                                     {\n-                                        Log.LogMessageFromResources(MessageImportance.Low, \"WriteLinesToFile.SkippingUnchangedFile\", File.ItemSpec);\n-                                        return true;\n+                                        if (existingContents.Equals(contentsAsString))\n+                                        {\n+                                            Log.LogMessageFromResources(MessageImportance.Low, \"WriteLinesToFile.SkippingUnchangedFile\", File.ItemSpec);\n+                                            return true;\n+                                        }\n                                     }\n                                 }\n                             }\n+                            catch (IOException)\n+                            {\n+                                Log.LogMessageFromResources(MessageImportance.Low, \"WriteLinesToFile.ErrorReadingFile\", File.ItemSpec);\n+                            }\n+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}