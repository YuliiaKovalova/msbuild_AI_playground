{
  "number": 9447,
  "title": "[ClickOnce] Handle multiple apphost.exe files that could be published with an EXE to EXE P2P reference",
  "body": "Fixes #\r\n[AB#1921068](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1921068)\r\n\r\n### Description\r\nPR [9299](https://github.com/dotnet/msbuild/pull/9299) added support for publishing content artifacts from P2P references. After this change, there is an installation failure that has been reported for a scenario where an EXE project has a P2P reference to another EXE project. For such a scenario, there are 2 apphost.exe's that are present in the list of artifacts to be published - one from the main project and the other from the referenced EXE project.\r\n\r\n### Customer Impact\r\nClickOnce does not expect 2 apphost.exe's to be published together and both of the apphost.exe's get published as the assembly name of the main project. This leads to a duplicate entry in the ClickOnce application manifest and the installation of the app fails due to this.\r\n\r\n### Regression: Yes, worked before 17.8.\r\n\r\n### Risk: Low\r\n\r\n### Changes Made\r\nClickOnce's ResolveManifestFiles and GenerateApplicationManifest task are being updated to handle the case where more than 1 apphost.exe files need to be published. Instead of publishing them with the name of the assembly of the main project, we use the TargetPath metadata of the file item to publish the file.\r\n\r\n### Testing\r\nCTI has done a full test pass for regression and the failing scenario.\r\nThe failing scenario has been added to the ClickOnce test suite.\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-22T20:40:56Z",
  "updatedAt": "2024-01-05T08:04:25Z",
  "closedAt": "2024-01-05T08:04:25Z",
  "mergedAt": "2024-01-05T08:04:25Z",
  "additions": 28,
  "deletions": 14,
  "changedFiles": 3,
  "headRefName": "user/sujitn/1921068",
  "isDraft": false,
  "author": {
    "login": "sujitnayak"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "49f307cf196d50f038578820cd5ec83c1a620b6e",
          "message": "[ClickOnce] Handle multiple apphost.exe files that could be published with an EXE to EXE P2P dependency",
          "committedDate": "2024-01-04T21:34:42Z",
          "author": {
            "name": "Sujit Nayak",
            "email": "sujitn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efbb65d8aec756cdf759e9efa71c08d723cac7f9",
          "message": "Bump version",
          "committedDate": "2024-01-04T21:35:10Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-11-22T20:41:04Z",
        "author": null
      },
      {
        "body": "@AR-May this is a vs17.8 PR. Can you please review, specifically check that it's compliant with our servicing requirements (need a version bump?)\r\n\r\n@sujitnayak can you please fill out and attach the M2/QB servicing template to the AzDO bug? We'll then take it through the servicing process. Thank you!",
        "createdAt": "2023-12-06T16:18:44Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> LGTM overall. Please bump the version like in this commit: [e145a24](https://github.com/dotnet/msbuild/commit/e145a244150d1155b8339c3de91b359a2f32bcc5)\r\n\r\nDone.",
        "createdAt": "2023-12-19T09:04:44Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> @sujitnayak can you please fill out and attach the M2/QB servicing template to the AzDO bug? We'll then take it through the servicing process. Thank you!\r\n\r\n@sujitnayak, friendly ping on this. The bug needs the servicing template.",
        "createdAt": "2024-01-03T20:50:05Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > @sujitnayak can you please fill out and attach the M2/QB servicing template to the AzDO bug? We'll then take it through the servicing process. Thank you!\r\n> \r\n> @sujitnayak, friendly ping on this. The bug needs the servicing template.\r\n\r\n@ladipro Thanks, I have filled out the bug template.",
        "createdAt": "2024-01-04T00:28:35Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2024-01-04T08:51:48Z",
        "author": null
      },
      {
        "body": "> Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.\r\n\r\n@ladipro does the version have to be bumped again?",
        "createdAt": "2024-01-04T19:09:03Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "> > Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.\r\n> \r\n> @ladipro does the version have to be bumped again?\r\n\r\nIndeed. It's odd that GitHub was not detecting the conflict. Thank you!",
        "createdAt": "2024-01-04T21:36:33Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: `string.IsNullOrEmpty` (lower-case s) is preferred. We still have other occurrences of `String` though, so not a blocking comment.",
              "createdAt": "2023-11-30T13:20:45Z",
              "path": "src/Tasks/ManifestUtil/Manifest.cs",
              "diffHunk": "@@ -506,17 +506,27 @@ private void UpdateFileReference(BaseReference f, string targetFrameworkVersion)\n             f.Size = size;\n \n             //\n-            // .NETCore Launcher.exe based Deployment: If the filereference is for apphost.exe, we need to change\n-            // the ResolvedPath and TargetPath to {assemblyname}.exe before we write the manifest, so that the\n-            // manifest does not have a file reference to apphost.exe\n+            // .NET >= 5 ClickOnce: If the file reference is for apphost.exe, we need to change the filename\n+            // in ResolvedPath to TargetPath so we don't end up publishing the file as apphost.exe.\n+            // If the TargetPath is not present, we will fallback to AssemblyName.\n             //\n             string fileName = Path.GetFileName(f.ResolvedPath);\n             if (LauncherBasedDeployment &&\n-                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) &&\n-                !String.IsNullOrEmpty(AssemblyName))\n+                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase))\n             {\n-                f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n-                f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                if (!String.IsNullOrEmpty(f.TargetPath))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I have fixed all occurences in the function being modified.",
              "createdAt": "2023-11-30T20:49:38Z",
              "path": "src/Tasks/ManifestUtil/Manifest.cs",
              "diffHunk": "@@ -506,17 +506,27 @@ private void UpdateFileReference(BaseReference f, string targetFrameworkVersion)\n             f.Size = size;\n \n             //\n-            // .NETCore Launcher.exe based Deployment: If the filereference is for apphost.exe, we need to change\n-            // the ResolvedPath and TargetPath to {assemblyname}.exe before we write the manifest, so that the\n-            // manifest does not have a file reference to apphost.exe\n+            // .NET >= 5 ClickOnce: If the file reference is for apphost.exe, we need to change the filename\n+            // in ResolvedPath to TargetPath so we don't end up publishing the file as apphost.exe.\n+            // If the TargetPath is not present, we will fallback to AssemblyName.\n             //\n             string fileName = Path.GetFileName(f.ResolvedPath);\n             if (LauncherBasedDeployment &&\n-                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) &&\n-                !String.IsNullOrEmpty(AssemblyName))\n+                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase))\n             {\n-                f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n-                f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                if (!String.IsNullOrEmpty(f.TargetPath))",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this really a debug assert, i.e. checking a code invariant, or can this be triggered by invoking the task in a wrong way? If the latter, how does it behave in release builds?",
              "createdAt": "2023-11-30T13:22:39Z",
              "path": "src/Tasks/ManifestUtil/Manifest.cs",
              "diffHunk": "@@ -506,17 +506,27 @@ private void UpdateFileReference(BaseReference f, string targetFrameworkVersion)\n             f.Size = size;\n \n             //\n-            // .NETCore Launcher.exe based Deployment: If the filereference is for apphost.exe, we need to change\n-            // the ResolvedPath and TargetPath to {assemblyname}.exe before we write the manifest, so that the\n-            // manifest does not have a file reference to apphost.exe\n+            // .NET >= 5 ClickOnce: If the file reference is for apphost.exe, we need to change the filename\n+            // in ResolvedPath to TargetPath so we don't end up publishing the file as apphost.exe.\n+            // If the TargetPath is not present, we will fallback to AssemblyName.\n             //\n             string fileName = Path.GetFileName(f.ResolvedPath);\n             if (LauncherBasedDeployment &&\n-                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) &&\n-                !String.IsNullOrEmpty(AssemblyName))\n+                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase))\n             {\n-                f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n-                f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                if (!String.IsNullOrEmpty(f.TargetPath))\n+                {\n+                    f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), f.TargetPath);\n+                }\n+                else if (!String.IsNullOrEmpty(AssemblyName))\n+                {\n+                    f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n+                    f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                }\n+                else\n+                {\n+                    Debug.Assert(false, \"TargetPath and AssemblyName are both empty\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "AssemblyName is an argument to the task. Within our targets file, it should never be empty. It is unlikely anyone 3P is calling this task. I made a change to also output a warning message should this happen.",
              "createdAt": "2023-11-30T21:22:15Z",
              "path": "src/Tasks/ManifestUtil/Manifest.cs",
              "diffHunk": "@@ -506,17 +506,27 @@ private void UpdateFileReference(BaseReference f, string targetFrameworkVersion)\n             f.Size = size;\n \n             //\n-            // .NETCore Launcher.exe based Deployment: If the filereference is for apphost.exe, we need to change\n-            // the ResolvedPath and TargetPath to {assemblyname}.exe before we write the manifest, so that the\n-            // manifest does not have a file reference to apphost.exe\n+            // .NET >= 5 ClickOnce: If the file reference is for apphost.exe, we need to change the filename\n+            // in ResolvedPath to TargetPath so we don't end up publishing the file as apphost.exe.\n+            // If the TargetPath is not present, we will fallback to AssemblyName.\n             //\n             string fileName = Path.GetFileName(f.ResolvedPath);\n             if (LauncherBasedDeployment &&\n-                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase) &&\n-                !String.IsNullOrEmpty(AssemblyName))\n+                fileName.Equals(Constants.AppHostExe, StringComparison.InvariantCultureIgnoreCase))\n             {\n-                f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n-                f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                if (!String.IsNullOrEmpty(f.TargetPath))\n+                {\n+                    f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), f.TargetPath);\n+                }\n+                else if (!String.IsNullOrEmpty(AssemblyName))\n+                {\n+                    f.ResolvedPath = Path.Combine(Path.GetDirectoryName(f.ResolvedPath), AssemblyName);\n+                    f.TargetPath = BaseReference.GetDefaultTargetPath(f.ResolvedPath);\n+                }\n+                else\n+                {\n+                    Debug.Assert(false, \"TargetPath and AssemblyName are both empty\");",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      }
    ]
  }
}