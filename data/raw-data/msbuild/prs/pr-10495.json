{
  "number": 10495,
  "title": "Add scoping for env vars check",
  "body": "Fixes #10448\r\n\r\n### Context\r\nAdded scoping implementation for the NoEnvVarsCheck\r\n\r\n### Testing\r\nTargetted test added - testing the scoping on imported file\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-07T12:47:16Z",
  "updatedAt": "2024-08-08T18:51:28Z",
  "closedAt": "2024-08-08T18:51:28Z",
  "mergedAt": "2024-08-08T18:51:28Z",
  "additions": 82,
  "deletions": 7,
  "changedFiles": 5,
  "headRefName": "proto/env-var-scoping",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ed4098538e7b76085a6413e7c71a4da16e8bee3b",
          "message": "Add scoping for env vars check",
          "committedDate": "2024-08-07T12:46:16Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9629cab629227acf9312f3b4b466bf57bc6afc0e",
          "message": "Merge branch 'main' into proto/env-var-scoping",
          "committedDate": "2024-08-08T16:39:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "005a298c102860f9848bc7fc75f4a60617b6d634",
          "message": "Fix after merge",
          "committedDate": "2024-08-08T16:43:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "by the way, should we propagate scoping capabilities to bin log too? ",
        "createdAt": "2024-08-08T08:44:14Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "can BuildAnalyzerConfig ever be null? ",
              "createdAt": "2024-08-07T15:04:48Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -26,13 +27,15 @@ internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n     private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();\n \n     private bool _isVerboseEnvVarOutput;\n+    private EvaluationAnalysisScope _scope;\n \n     public override string FriendlyName => \"MSBuild.NoEnvironmentVariablePropertyAnalyzer\";\n \n     public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n \n     public override void Initialize(ConfigurationContext configurationContext)\n     {\n+        _scope = configurationContext.BuildAnalyzerConfig[0].EvaluationAnalysisScope;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "No - that is the beauty of the nullability annotations :-)\r\n\r\nBut if you have asked if the array can be empty - then this cannot be enforced on the code analysis level, but still - our infra allways sets this to array of proper size (based on the rules count)",
              "createdAt": "2024-08-07T16:08:12Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -26,13 +27,15 @@ internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n     private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();\n \n     private bool _isVerboseEnvVarOutput;\n+    private EvaluationAnalysisScope _scope;\n \n     public override string FriendlyName => \"MSBuild.NoEnvironmentVariablePropertyAnalyzer\";\n \n     public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n \n     public override void Initialize(ConfigurationContext configurationContext)\n     {\n+        _scope = configurationContext.BuildAnalyzerConfig[0].EvaluationAnalysisScope;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Why to remove this timeout? Is some test running more that 2 minutes?",
              "createdAt": "2024-08-08T11:46:20Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -200,11 +201,51 @@ public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string\n             customConfigData);\n \n         string output = RunnerUtilities.ExecBootstrapedMSBuild(\n-            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success, false, _env.Output, timeoutMilliseconds: 120_000);\n+            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success, false, _env.Output);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "The timeout is unnecessarily long. The default is 30 seconds and recently a high custom timeout started to be copy-paste spreaded over the code",
              "createdAt": "2024-08-08T17:03:31Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -200,11 +201,51 @@ public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string\n             customConfigData);\n \n         string output = RunnerUtilities.ExecBootstrapedMSBuild(\n-            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success, false, _env.Output, timeoutMilliseconds: 120_000);\n+            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success, false, _env.Output);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}