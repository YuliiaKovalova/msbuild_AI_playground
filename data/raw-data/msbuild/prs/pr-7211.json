{
  "number": 7211,
  "title": "ItemDictionary<T>.Enumerator has an unnecessary finalizer",
  "body": "Fixes #7208",
  "state": "MERGED",
  "createdAt": "2022-01-04T00:42:01Z",
  "updatedAt": "2022-01-21T11:06:27Z",
  "closedAt": "2022-01-21T08:40:46Z",
  "mergedAt": "2022-01-21T08:40:45Z",
  "additions": 8,
  "deletions": 28,
  "changedFiles": 1,
  "headRefName": "itemdictionary-remove-finalizer",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2037f72b3561e387353a47543576464cd82104ef",
          "message": "ItemDictionary<T>.Enumerator has an unnecessary finalizer",
          "committedDate": "2022-01-04T00:41:21Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f568b6fffd8d0bea760343b3036c7b06d4c60ee4",
          "message": "Remove Dispose(bool)",
          "committedDate": "2022-01-04T00:43:16Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5ba0492c482b69c7c82afb9511a6300c86e3dda",
          "message": "remove IDisposable as IEnumerator<T> has it implicitly",
          "committedDate": "2022-01-07T08:49:39Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "07f8f4e1367780603eac2ec7bea3e02584c58f17",
          "message": "changes from review.",
          "committedDate": "2022-01-07T21:20:43Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "487bb1cae626159e4e02084f80aad844af43d203",
          "message": "Merge branch 'main' into itemdictionary-remove-finalizer",
          "committedDate": "2022-01-10T22:24:12Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea6519c53dced123e6bcbc334f5f3a2560820ad1",
          "message": "Changes from review",
          "committedDate": "2022-01-12T13:02:08Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e902310972e25e272b71f1d021963f61918ecbf",
          "message": "Merge branch 'itemdictionary-remove-finalizer' of github.com:elachlan/msbuild into itemdictionary-remove-finalizer",
          "committedDate": "2022-01-12T13:02:42Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This looks like the nested enumerator type could be replaced with an iterator method: nested `foreach` loops and `yield return`. I don't know how the performance would be, though.\n\nIterators do not support IEnumerator.Reset() but the current implementation of Reset is bogus anyway: it resets _itemEnumerator too, so if you had the hierarchy ((A B C) (D E F)) and the current item is E, then after the reset, it will enumerate (D E F A B C D E F) even though the right answer would be just (A B C D E F). Which perhaps indicates that nothing actually calls Reset.",
        "createdAt": "2022-01-12T22:35:52Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo that's indeed a bug, thank you. It looks like we should do\r\n\r\n```C#\r\n_itemEnumerator = GetNextItemEnumerator();\r\n```\r\n\r\ninstead of resetting whatever `_itemEnumerator` is currently pointing to. Out of scope of this PR but would be nice to fix for sure. Also +1 on trying to replace the class with an iterator.",
        "createdAt": "2022-01-13T10:11:31Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "In principle, Reset and MoveNext should also call `_itemEnumerator?.Dispose()` before assigning `_itemEnumerator = GetNextItemEnumerator()`. In practice, _itemEnumerator is always a LinkedList\\<T>.Enumerator whose Dispose() method would do nothing anyway. Although LinkedList\\<T> is not sealed, ItemDictionary\\<T> does not let its callers add instances of any derived types to _itemLists.",
        "createdAt": "2022-01-13T11:52:13Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Could one of you please write up an issue to spec out this suggestion? It sounds like a good idea.",
        "createdAt": "2022-01-13T12:02:47Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Filed <https://github.com/dotnet/msbuild/issues/7286>.",
        "createdAt": "2022-01-13T16:00:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Don't we still need to dispose these owned resources?",
              "createdAt": "2022-01-07T16:31:38Z",
              "path": "src/Build/Collections/ItemDictionary.cs",
              "diffHunk": "@@ -464,31 +456,9 @@ public void Reset()\n             /// </summary>\n             public void Dispose()\n             {\n-                Dispose(true);\n                 GC.SuppressFinalize(this);\n             }\n \n-            /// <summary>\n-            /// The real disposer.\n-            /// </summary>\n-            private void Dispose(bool disposing)\n-            {\n-                if (disposing)\n-                {\n-                    if (_listEnumerator != null)\n-                    {\n-                        if (_itemEnumerator != null)\n-                        {\n-                            _itemEnumerator.Dispose();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I wasn't sure, so I have added it back.",
              "createdAt": "2022-01-07T21:23:38Z",
              "path": "src/Build/Collections/ItemDictionary.cs",
              "diffHunk": "@@ -464,31 +456,9 @@ public void Reset()\n             /// </summary>\n             public void Dispose()\n             {\n-                Dispose(true);\n                 GC.SuppressFinalize(this);\n             }\n \n-            /// <summary>\n-            /// The real disposer.\n-            /// </summary>\n-            private void Dispose(bool disposing)\n-            {\n-                if (disposing)\n-                {\n-                    if (_listEnumerator != null)\n-                    {\n-                        if (_itemEnumerator != null)\n-                        {\n-                            _itemEnumerator.Dispose();",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This has no effect when the class doesn't have a finalizer, please remove.",
              "createdAt": "2022-01-12T12:40:33Z",
              "path": "src/Build/Collections/ItemDictionary.cs",
              "diffHunk": "@@ -466,29 +458,18 @@ public void Reset()\n             /// </summary>\n             public void Dispose()\n             {\n-                Dispose(true);\n-                GC.SuppressFinalize(this);\n-            }\n-\n-            /// <summary>\n-            /// The real disposer.\n-            /// </summary>\n-            private void Dispose(bool disposing)\n-            {\n-                if (disposing)\n+                if (_listEnumerator != null)\n                 {\n-                    if (_listEnumerator != null)\n+                    if (_itemEnumerator != null)\n                     {\n-                        if (_itemEnumerator != null)\n-                        {\n-                            _itemEnumerator.Dispose();\n-                            _itemEnumerator = null;\n-                        }\n-\n-                        _listEnumerator.Dispose();\n-                        _listEnumerator = null;\n+                        _itemEnumerator.Dispose();\n+                        _itemEnumerator = null;\n                     }\n+\n+                    _listEnumerator.Dispose();\n+                    _listEnumerator = null;\n                 }\n+                GC.SuppressFinalize(this);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}