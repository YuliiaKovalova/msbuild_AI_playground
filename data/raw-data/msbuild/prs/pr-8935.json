{
  "number": 8935,
  "title": "Expose static methods from System.OperatingSystem",
  "body": "Fixes #5982\r\n\r\n### Context\r\nExpose methods added in .Net 5.0. Create alternate stand-in for net471.\r\n\r\n### Changes Made\r\n- Add `Microsoft.Build.Framework.OperatingSystem` as stand-in substitute for net471. The class assumes that only Windows is supported.\r\n- Add unit tests for `Microsoft.Build.Framework.OperatingSystem`.\r\n- Modify Constants.cs to static methods either from `System.OperatingSystem` or from `Microsoft.Build.Framework.OperatingSystem`.\r\n- Add unit tests for `IsOSPlatform` property function\r\n\r\n### Testing\r\nTested on windows 11 and macOS 12. tested by running full suite of unit test.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-22T04:01:08Z",
  "updatedAt": "2023-07-06T12:45:17Z",
  "closedAt": "2023-07-06T07:35:30Z",
  "mergedAt": "2023-07-06T07:35:30Z",
  "additions": 414,
  "deletions": 0,
  "changedFiles": 4,
  "headRefName": "AvailableStaticMethodsSystemOperatingSystem",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4fcf002a69edce4933efc12d50d33e889283aebf",
          "message": "Expose OperatingSystem static methods",
          "committedDate": "2023-06-22T03:41:27Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f3e563e2a798b0de6ebe94dee0635625bd40f56a",
          "message": "Merge branch 'dotnet:main' into AvailableStaticMethodsSystemOperatingSystem",
          "committedDate": "2023-06-22T03:45:32Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "250df8e7460b8300863b01d1e177360f5aff3428",
          "message": "make class internal",
          "committedDate": "2023-06-22T13:39:05Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d00cb2e91c3d6142eaea62bf0137575a553d57a",
          "message": "Update comment in src/Build/Resources/Constants.cs\n\nCo-authored-by: Alexander K\u00f6plinger <alex.koeplinger@outlook.com>",
          "committedDate": "2023-06-22T13:40:37Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "210dca4927d7d533b2b30480e3d52f0e782bc286",
          "message": "Update comment in src/Framework/OperatingSystem.cs\n\nCo-authored-by: Alexander K\u00f6plinger <alex.koeplinger@outlook.com>",
          "committedDate": "2023-06-22T13:41:44Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "908aa4b460854d15a5e1eb4abb29343ebabc774b",
          "message": "Update comment in src/Framework/OperatingSystem.cs\n\nCo-authored-by: Alexander K\u00f6plinger <alex.koeplinger@outlook.com>",
          "committedDate": "2023-06-22T13:42:08Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "296094ba9ed6e5b39e731d3a1b8da823c82efeec",
          "message": "flip #if test",
          "committedDate": "2023-06-22T13:50:28Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc180fc21b55758a9d851ffbe30fdeb7c3ba4ce3",
          "message": "changes per review request; add missing unit test for IsOSPlatformVersionAtLeast",
          "committedDate": "2023-06-22T14:03:31Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4efcd4a4613fcb332f42361d281f89606d5a2c2",
          "message": "add test case",
          "committedDate": "2023-06-22T14:46:14Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "541c4ba306799808f801aac8010826d68ac08322",
          "message": "add IsOSPlatformVersionAtLeast* test methods",
          "committedDate": "2023-06-22T14:46:56Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b0b77867ba10680595d9915fff1385592aba1bb1",
          "message": "consolidate tests",
          "committedDate": "2023-06-22T16:43:08Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6accf375ef421d6d99c5e859c9f355f19e175efb",
          "message": "remove IsOSXLike()",
          "committedDate": "2023-06-23T02:45:10Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "387ef702d180b874d3da9591b31c76e0614ebf0c",
          "message": "unit tests",
          "committedDate": "2023-06-23T02:45:45Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "558e8a6f7bb77e3e57d6114b8dcad7af99809ad7",
          "message": "expose only selected methods of System.OperatingSystem",
          "committedDate": "2023-06-23T02:54:12Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "30dea8f128e8870a33a091833d9c54da5a709e00",
          "message": "per review request expose all static methods of System.OperatingSystem",
          "committedDate": "2023-06-27T02:23:41Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16baa32fbe8a10ef15edc021a92c89e232393b59",
          "message": "Merge branch 'dotnet:main' into AvailableStaticMethodsSystemOperatingSystem",
          "committedDate": "2023-06-27T23:17:07Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f8dbc4a18114d26bde5b04457d437dfc89bdd00c",
          "message": "Merge branch 'dotnet:main' into AvailableStaticMethodsSystemOperatingSystem",
          "committedDate": "2023-06-28T13:36:05Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6dde4c3ba7c438ff060ffe4bb4624da660d5f65a",
          "message": "Merge branch 'dotnet:main' into AvailableStaticMethodsSystemOperatingSystem",
          "committedDate": "2023-06-30T12:58:01Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "759ae6a3ac2500b573b09fbbd8d6d10cb11502c4",
          "message": "add comment to re-run build after unit test timeout",
          "committedDate": "2023-06-30T14:22:13Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ffeb0c3cae198e8f5e76d5efcbb763aa89cfe8d9",
          "message": "Revert \"add comment to re-run build after unit test timeout\"\n\nThis reverts commit 759ae6a3ac2500b573b09fbbd8d6d10cb11502c4.",
          "committedDate": "2023-07-01T00:31:47Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd flip the cases around so we don't need the negation.",
              "createdAt": "2023-06-22T08:21:13Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        // Add alternate type for System.OperatingSystem static methods which aren't available on .NET Framework.\r\n```",
              "createdAt": "2023-06-22T08:23:03Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "why do we need to register this type?",
              "createdAt": "2023-06-22T08:23:24Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.\n+                        var operatingSystemType = new Tuple<string, Type>(\"Microsoft.Build.Framework.OperatingSystem, Microsoft.Build.Framework, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"Microsoft.Build.Framework.OperatingSystem\", operatingSystemType);",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "Do you mean to ask why are there two entries? I may have missed something but when stepping through the code for processing a property function, there are two lookups performed against `s_availableStaticMethods`.\r\n\r\nThe first lookup gets the receiver type using `System.OperatingSystem` as the key, effectively mapping `System.OperatingSystem` to `Microsoft.Build.Framework.OperatingSystem`.\r\n\r\nThe second lookup uses the receiver type, i.e. `Microsoft.Build.Framework.OperatingSystem`, as the key.",
              "createdAt": "2023-06-22T13:38:39Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.\n+                        var operatingSystemType = new Tuple<string, Type>(\"Microsoft.Build.Framework.OperatingSystem, Microsoft.Build.Framework, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"Microsoft.Build.Framework.OperatingSystem\", operatingSystemType);",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Hmm shouldn't the first lookup be enough though?",
              "createdAt": "2023-06-22T14:11:48Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.\n+                        var operatingSystemType = new Tuple<string, Type>(\"Microsoft.Build.Framework.OperatingSystem, Microsoft.Build.Framework, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"Microsoft.Build.Framework.OperatingSystem\", operatingSystemType);",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "Apparently not. If I remove the second entry, the property function resolution fails with an error that `Microsoft.Build.Framework.OperatingSystem` is not available.",
              "createdAt": "2023-06-22T14:13:46Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.\n+                        var operatingSystemType = new Tuple<string, Type>(\"Microsoft.Build.Framework.OperatingSystem, Microsoft.Build.Framework, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"Microsoft.Build.Framework.OperatingSystem\", operatingSystemType);",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "ok, thanks for checking",
              "createdAt": "2023-06-22T14:29:12Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,14 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if !NET5_0_OR_GREATER\n+                        // Add alternate type for System.OperatingSystem static methods.\n+                        var operatingSystemType = new Tuple<string, Type>(\"Microsoft.Build.Framework.OperatingSystem, Microsoft.Build.Framework, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"Microsoft.Build.Framework.OperatingSystem\", operatingSystemType);",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it'd look cleaner to wrap all of the test cases in a single #if instead of wrapping each method body.",
              "createdAt": "2023-06-22T08:24:03Z",
              "path": "src/Framework.UnitTests/OperatingSystem_Tests.cs",
              "diffHunk": "@@ -0,0 +1,66 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Shouldly;\n+\n+using Xunit;\n+using Xunit.NetCore.Extensions;\n+\n+namespace Microsoft.Build.Framework.UnitTests\n+{\n+    public class OperatingSystem_Tests\n+    {\n+        [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Usage\", \"xUnit1026:Theory methods should use all of their parameters\", Justification = \"Don't complain when test body is empty\")]\n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"windows\", true)]\n+        [InlineData(\"linux\", false)]\n+        [InlineData(\"macOS\", false)]\n+        public void IsOSPlatform(string platform, bool expected)\n+        {\n+#if !NET5_0_OR_GREATER",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "can this be internal instead of public? The API analyzer is complaining about this new public type missing from the reference assembly.",
              "createdAt": "2023-06-22T08:25:13Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.\n+    /// This class create stand-in methods for net472 builds.\n+    /// Assumes only Windows is supported.\n+    /// </summary>\n+    public static class OperatingSystem",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "yes - fixed.",
              "createdAt": "2023-06-22T13:41:19Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.\n+    /// This class create stand-in methods for net472 builds.\n+    /// Assumes only Windows is supported.\n+    /// </summary>\n+    public static class OperatingSystem",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "we don't currently support running MSBuild on non-desktop platforms so I think there isn't a good reason to write checks for those in your projects, I'd keep just these methods:\r\n\r\n```csharp\r\npublic static bool IsFreeBSD();\r\npublic static bool IsFreeBSDVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0);\r\npublic static bool IsLinux();\r\npublic static bool IsMacOS();\r\npublic static bool IsMacOSVersionAtLeast(int major, int minor = 0, int build = 0);\r\npublic static bool IsOSPlatform(string platform);\r\npublic static bool IsOSPlatformVersionAtLeast(string platform, int major, int minor = 0, int build = 0, int revision = 0);\r\npublic static bool IsWindows();\r\npublic static bool IsWindowsVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0);\r\n```\r\n\r\nIt also makes it clearer that we don't need to support every new `Is<OS>` method that will be added to `OperatingSystem` unless it is for a platform where msbuild runs.",
              "createdAt": "2023-06-22T08:32:21Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.\n+    /// This class create stand-in methods for net472 builds.\n+    /// Assumes only Windows is supported.\n+    /// </summary>\n+    public static class OperatingSystem\n+    {\n+        public static bool IsOSPlatform(string platform)\n+        {\n+            return platform?.Equals(\"WINDOWS\", StringComparison.OrdinalIgnoreCase) ?? throw new ArgumentNullException(nameof(platform));\n+        }\n+\n+        public static bool IsOSPlatformVersionAtLeast(string platform, int major, int minor = 0, int build = 0, int revision = 0)\n+            => IsOSPlatform(platform) && IsOSVersionAtLeast(major, minor, build, revision);\n+\n+        public static bool IsBrowser() => false;\n+\n+        public static bool IsWasi() => false;\n+\n+        public static bool IsLinux() => false;\n+\n+        public static bool IsFreeBSD() => false;\n+\n+        public static bool IsFreeBSDVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0) => false;\n+\n+        public static bool IsAndroid() => false;",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "@rainersigwald expressed that there should be parity of functionality across the net472 and net7.0 builds.\r\n\r\nEither removing the other methods in the stand-in class should be undone or only selected methods of `System.OperatingSystem` should be exposed.\r\n\r\nChasing changes to the `OperatingSystem` class for platforms where MSBuild doesn't run is not helpful, so my take is that only selected methods of `OperatingSystem` should be exposed.\r\n\r\n~~In addition to your list, `IsOSXLike()` should probably be exposed because it overlaps with `IsMacOS()`. When `IsMacOS()` is true, `IsOSXLike()` will be true.~~ `IsOSXLike()` is not public.",
              "createdAt": "2023-06-22T16:00:11Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.\n+    /// This class create stand-in methods for net472 builds.\n+    /// Assumes only Windows is supported.\n+    /// </summary>\n+    public static class OperatingSystem\n+    {\n+        public static bool IsOSPlatform(string platform)\n+        {\n+            return platform?.Equals(\"WINDOWS\", StringComparison.OrdinalIgnoreCase) ?? throw new ArgumentNullException(nameof(platform));\n+        }\n+\n+        public static bool IsOSPlatformVersionAtLeast(string platform, int major, int minor = 0, int build = 0, int revision = 0)\n+            => IsOSPlatform(platform) && IsOSVersionAtLeast(major, minor, build, revision);\n+\n+        public static bool IsBrowser() => false;\n+\n+        public static bool IsWasi() => false;\n+\n+        public static bool IsLinux() => false;\n+\n+        public static bool IsFreeBSD() => false;\n+\n+        public static bool IsFreeBSDVersionAtLeast(int major, int minor = 0, int build = 0, int revision = 0) => false;\n+\n+        public static bool IsAndroid() => false;",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "please also add a test that uses `IsMacOS`, `IsWindows` etc methods.",
              "createdAt": "2023-06-22T08:35:11Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2806,6 +2806,38 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformFullFramework(string platform)\n+        {\n+            string propertyFunction = $\"$([System.OperatingSystem]::IsOSPlatform('{platform}'))\";\n+            string expected = platform.Equals(\"windows\", StringComparison.OrdinalIgnoreCase) ? \"True\" : \"False\";\n+            var pg = new PropertyDictionary<ProjectPropertyInstance>();\n+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);\n+        }\n+\n+        [DotNetOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformDotNet(string platform)",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// System.OperatingSystem static methods were added in net5.0.\r\n```",
              "createdAt": "2023-06-22T08:42:13Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// This class creates stand-in methods for net472 builds.\r\n```",
              "createdAt": "2023-06-22T08:42:23Z",
              "path": "src/Framework/OperatingSystem.cs",
              "diffHunk": "@@ -0,0 +1,90 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NET5_0_OR_GREATER\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// System.OperatingSystem static methods were added in .Net 5.0.\n+    /// This class create stand-in methods for net472 builds.",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd also wrap the whole test in the ifdef here.",
              "createdAt": "2023-06-22T14:14:46Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2806,6 +2806,38 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformFullFramework(string platform)\n+        {\n+            string propertyFunction = $\"$([System.OperatingSystem]::IsOSPlatform('{platform}'))\";\n+            string expected = platform.Equals(\"windows\", StringComparison.OrdinalIgnoreCase) ? \"True\" : \"False\";\n+            var pg = new PropertyDictionary<ProjectPropertyInstance>();\n+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);\n+        }\n+\n+        [DotNetOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformDotNet(string platform)\n+        {\n+            string propertyFunction = $\"$([System.OperatingSystem]::IsOSPlatform('{platform}'))\";\n+            bool result = false;\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "I'm going to collapse the `WindowsFullFrameworkOnly*` and `DotNetOnly*` variants into single tests.",
              "createdAt": "2023-06-22T16:02:11Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2806,6 +2806,38 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformFullFramework(string platform)\n+        {\n+            string propertyFunction = $\"$([System.OperatingSystem]::IsOSPlatform('{platform}'))\";\n+            string expected = platform.Equals(\"windows\", StringComparison.OrdinalIgnoreCase) ? \"True\" : \"False\";\n+            var pg = new PropertyDictionary<ProjectPropertyInstance>();\n+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);\n+        }\n+\n+        [DotNetOnlyTheory]\n+        [InlineData(\"windows\")]\n+        [InlineData(\"linux\")]\n+        [InlineData(\"macos\")]\n+        [InlineData(\"osx\")]\n+        public void IsOSPlatformDotNet(string platform)\n+        {\n+            string propertyFunction = $\"$([System.OperatingSystem]::IsOSPlatform('{platform}'))\";\n+            bool result = false;\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think we need to limit to specific methods here so we can't forget to update this list when new methods are added to  `OperatingSystem` (at least when running on .NET 5+, for .NET Framework we'd need to but that should hopefully be getting less common over time)",
              "createdAt": "2023-06-26T09:07:46Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,23 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if NET5_0_OR_GREATER\n+                        var operatingSystemType = new Tuple<string, Type>(null, typeof(OperatingSystem));\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatform\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatformVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsLinux\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSD\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSDVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOS\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOSVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindows\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindowsVersionAtLeast\", operatingSystemType);",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "@akoeplinger Which way do you want it?\r\n\r\n> I'd keep just these methods ...\r\n\r\nor\r\n\r\n> I don't think we need to limit to specific methods ...\r\n\r\nbecause the methods we expose from `System.OperatingSystem` need to be matched by methods on `Microsoft.Build.Framework.OperatingSystem`.",
              "createdAt": "2023-06-26T13:49:31Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,23 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if NET5_0_OR_GREATER\n+                        var operatingSystemType = new Tuple<string, Type>(null, typeof(OperatingSystem));\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatform\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatformVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsLinux\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSD\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSDVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOS\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOSVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindows\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindowsVersionAtLeast\", operatingSystemType);",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "they shouldn't need to be matched, we can have more methods available on .NET 5 than on .NET Framework.",
              "createdAt": "2023-06-26T15:51:04Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,23 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if NET5_0_OR_GREATER\n+                        var operatingSystemType = new Tuple<string, Type>(null, typeof(OperatingSystem));\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatform\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatformVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsLinux\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSD\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSDVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOS\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOSVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindows\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindowsVersionAtLeast\", operatingSystemType);",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "> they shouldn't need to be matched, we can have more methods available on .NET 5 than on .NET Framework.\r\n\r\nWorking on the change.",
              "createdAt": "2023-06-26T21:19:50Z",
              "path": "src/Build/Resources/Constants.cs",
              "diffHunk": "@@ -365,6 +365,23 @@ private static void InitializeAvailableMethods()\n                         availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\n                         availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\n+#if NET5_0_OR_GREATER\n+                        var operatingSystemType = new Tuple<string, Type>(null, typeof(OperatingSystem));\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatform\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsOSPlatformVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsLinux\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSD\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsFreeBSDVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOS\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsMacOSVersionAtLeast\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindows\", operatingSystemType);\n+                        availableStaticMethods.TryAdd(\"System.OperatingSystem::IsWindowsVersionAtLeast\", operatingSystemType);",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "?",
              "createdAt": "2023-06-30T18:10:20Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2369,6 +2369,7 @@ public void EndToEndWarnAsErrors(string switches, string errorCodes, string notE\n             success.ShouldBe(expectedSuccess);\n         }\n \n+        // Test failed due to timeout. Windows-on-Core Full Framework.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I merged from main and the build failed on a test timeout. I needed a change to run the build again.\n\nI can remove the comment",
              "createdAt": "2023-06-30T18:44:27Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2369,6 +2369,7 @@ public void EndToEndWarnAsErrors(string switches, string errorCodes, string notE\n             success.ShouldBe(expectedSuccess);\n         }\n \n+        // Test failed due to timeout. Windows-on-Core Full Framework.",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Got it. Please do :)",
              "createdAt": "2023-06-30T18:53:49Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2369,6 +2369,7 @@ public void EndToEndWarnAsErrors(string switches, string errorCodes, string notE\n             success.ShouldBe(expectedSuccess);\n         }\n \n+        // Test failed due to timeout. Windows-on-Core Full Framework.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done.",
              "createdAt": "2023-07-01T00:33:13Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2369,6 +2369,7 @@ public void EndToEndWarnAsErrors(string switches, string errorCodes, string notE\n             success.ShouldBe(expectedSuccess);\n         }\n \n+        // Test failed due to timeout. Windows-on-Core Full Framework.",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}