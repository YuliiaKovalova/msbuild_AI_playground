{
  "number": 9831,
  "title": "Do not print-out version info in terminal logger",
  "body": "Based on another @rainersigwald feedback to the msbuild talk\r\n\r\n### Context\r\nThe versioning info feels unnecessary in terminal logger mode (TL logs are not meant for post-hoc investigation).\r\n\r\n### Changes made\r\nFrontloaded the TL check, so that we can add the TL enablement status to the decision about version message need\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/dd9265f8-a77b-4495-85e3-b0c16d1a5bb1)\r\n\r\n\r\n### Shortcomings\r\nIn case of TL enabled by env or params, but disabled by response file, we'll still NOT disable the version message - as the message flushing happens before processing response files. This was chosen as it greatly simplifies the change (and it can be minimal risk change), as console logs are not anyways the main source of investigation data",
  "state": "MERGED",
  "createdAt": "2024-03-06T13:50:35Z",
  "updatedAt": "2024-03-13T14:06:20Z",
  "closedAt": "2024-03-13T14:06:20Z",
  "mergedAt": "2024-03-13T14:06:20Z",
  "additions": 61,
  "deletions": 18,
  "changedFiles": 2,
  "headRefName": "proto/tl-no-logo",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a0da428f0e2835d751fcb5096cb79497b8f5e8bf",
          "message": "Do not print-out version info in terminal logger",
          "committedDate": "2024-03-06T13:49:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f139605ad9c91ea65bd567506cf9d991793fef31",
          "message": "Frontload the tl check",
          "committedDate": "2024-03-06T17:51:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a6c9cd070bcf0f8c1b8d661a56001ba0c1a6389",
          "message": "Add clarifying comment, move logic",
          "committedDate": "2024-03-07T12:17:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d48554abd4b64f127e2725bf105eff8eff013bf5",
          "message": "Add comment and E2E unit tests",
          "committedDate": "2024-03-12T16:05:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c21f5d8416815a45683c6416838670280bcbbe6",
          "message": "Improve test",
          "committedDate": "2024-03-13T06:47:06Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bce7551d54da3262e450dba2287104dbb9762785",
          "message": "Ensure unrelated test cleanup",
          "committedDate": "2024-03-13T12:32:25Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The version is still printed when `-tl` is added via `msbuild.rsp`. Repro:\r\n1. echo \"-tl\" > msbuild.rsp\r\n2. msbuild\r\n\r\nAlso, do you think this could be covered with a test? The command line processing logic is quite complex so it would be nice to have something in place to prevent regressions.",
        "createdAt": "2024-03-12T08:17:35Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> The version is still printed when `-tl` is added via `msbuild.rsp`. Repro:\r\n> \r\n> 1. echo \"-tl\" > msbuild.rsp\r\n> 2. msbuild\r\n> \r\n> Also, do you think this could be covered with a test? The command line processing logic is quite complex so it would be nice to have something in place to prevent regressions.\r\n\r\nDisregarding the responce file was choosen to simplify the change (so that message flushing can be kept at place before processing the response file). I put this into PR description - but that might not have been enough - let me add an explicit info into the comment in the code.\r\nI wouldn't complicate the logic now without feedback. Unfortunately we do not have concrete data - but I'd expect interactive CLI interactions to prefere `dotnet build`, while `msbuild.exe` rather being used in noninteractive scenarios.\r\n\r\nOr would you prefer  the response file scenario to be fully respected as well?\r\n\r\n",
        "createdAt": "2024-03-12T08:47:51Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Sorry, I should have read the description \ud83e\udd26\u200d\u2642\ufe0f  I agree it's ok to not support it.",
        "createdAt": "2024-03-12T09:04:35Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "NP - comment in code is very much needed.\r\n\r\nAnd let me add the test as well (@f-alizada will be happy as I was resisting his request when he raised it previously here and I must admit it was and is a very reasonable ask)",
        "createdAt": "2024-03-12T09:22:12Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Comment and test cases added",
        "createdAt": "2024-03-12T16:06:49Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "super nit: This particular comment (Note) is helpful understanding the current state of functionality, is there a chance to leave it as it is or document somewhere? It is probably a very small thing however it seems important to keep this kind of comments left (helps a lot reading the code sometimes)",
              "createdAt": "2024-03-06T18:48:23Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "The comment was missleading (or even wrong) - so I decided that no comment is better than wrong one. But I agree that correct one can be even better - I'm putting updated one.",
              "createdAt": "2024-03-07T12:13:07Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is there a chance to extract the logic from the ProcessCommandLineSwitches into the helper method which could be covered by tests separately? ",
              "createdAt": "2024-03-06T18:52:19Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors\n-            if (!recursing && shouldShowLogo)\n+            if (!recursing)\n             {\n-                DisplayVersionMessage();\n-            }\n+                bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "nit: Were changes considered to be covered by tests (unit/e2e) ?",
              "createdAt": "2024-03-06T18:56:30Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors\n-            if (!recursing && shouldShowLogo)\n+            if (!recursing)\n             {\n-                DisplayVersionMessage();\n-            }\n+                bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I considered testing, but ended up with manual testing of affected scenarios (producing the screenshots) - as abstracting out current logic would be well beyond scope of this small change. E2E tests are too heavy for this small change.",
              "createdAt": "2024-03-07T12:17:14Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors\n-            if (!recursing && shouldShowLogo)\n+            if (!recursing)\n             {\n-                DisplayVersionMessage();\n-            }\n+                bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you! ",
              "createdAt": "2024-03-07T16:36:15Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2455,20 +2455,23 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon\n             }\n #endif\n \n-            bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Preprocess) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetProperty) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetItem) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.GetTargetResult) &&\n-                                  !commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.FeatureAvailability);\n+            bool useTerminalLogger = ProcessTerminalLoggerConfiguration(commandLineSwitches, out string aggregatedTerminalLoggerParameters);\n \n-            // show copyright message if nologo switch is not set\n-            // NOTE: we heed the nologo switch even if there are switch errors\n-            if (!recursing && shouldShowLogo)\n+            if (!recursing)\n             {\n-                DisplayVersionMessage();\n-            }\n+                bool shouldShowLogo = !commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.NoLogo] &&",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: It looks like other tests use the return value of `RunnerUtilities.ExecMSBuild` to capture the output. Pointing it out as the type cast here has \"caught my eye\" \ud83d\ude09 ",
              "createdAt": "2024-03-12T18:54:39Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2605,6 +2606,41 @@ public override bool Execute()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"\", true)]\n+        [InlineData(\"/tl:true\", false)]\n+        [InlineData(\"/nologo\", false)]\n+        [InlineData(\"/getProperty:p\", false)]\n+        public void EndToEndVersionMessage(string arguments, bool shouldContainVersionMessage)\n+        {\n+            using TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();\n+\n+            string projectContents = ObjectModelHelpers.CleanupFileContents(\"\"\"\n+                                                                            <Project>\n+                                                                                <Target Name=\"Hello\">\n+                                                                                </Target>\n+                                                                            </Project>\n+                                                                            \"\"\");\n+\n+            TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents);\n+\n+            RunnerUtilities.ExecMSBuild($\"{arguments} \\\"{testProject.ProjectFile}\\\"\", out bool success, _output);\n+            success.ShouldBeTrue();\n+\n+            string expectedVersionString =\n+                ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"MSBuildVersionMessage\",\n+                    ProjectCollection.DisplayVersion, NativeMethodsShared.FrameworkName);\n+\n+            if (shouldContainVersionMessage)\n+            {\n+                ((Xunit.Sdk.TestOutputHelper)_output).Output.ShouldContain(expectedVersionString);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh yeah - that looks better!\r\n\r\nI was too quick accepting copilot snippet :-)",
              "createdAt": "2024-03-13T06:48:25Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2605,6 +2606,41 @@ public override bool Execute()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"\", true)]\n+        [InlineData(\"/tl:true\", false)]\n+        [InlineData(\"/nologo\", false)]\n+        [InlineData(\"/getProperty:p\", false)]\n+        public void EndToEndVersionMessage(string arguments, bool shouldContainVersionMessage)\n+        {\n+            using TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();\n+\n+            string projectContents = ObjectModelHelpers.CleanupFileContents(\"\"\"\n+                                                                            <Project>\n+                                                                                <Target Name=\"Hello\">\n+                                                                                </Target>\n+                                                                            </Project>\n+                                                                            \"\"\");\n+\n+            TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents);\n+\n+            RunnerUtilities.ExecMSBuild($\"{arguments} \\\"{testProject.ProjectFile}\\\"\", out bool success, _output);\n+            success.ShouldBeTrue();\n+\n+            string expectedVersionString =\n+                ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"MSBuildVersionMessage\",\n+                    ProjectCollection.DisplayVersion, NativeMethodsShared.FrameworkName);\n+\n+            if (shouldContainVersionMessage)\n+            {\n+                ((Xunit.Sdk.TestOutputHelper)_output).Output.ShouldContain(expectedVersionString);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}