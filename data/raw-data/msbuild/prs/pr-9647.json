{
  "number": 9647,
  "title": "[Graph] Emit NoTargetSpecified when an entry point project doesn't have any targets",
  "body": "Fixes #9502\r\n\r\nThis change checks the entry point nodes in a graph to see if any targets are specified. This will error similarly to non-graph builds when the project has no targets.\r\n\r\nTested using a project with the content: `<Project />`.\r\n\r\nNon-graph behavior:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/6445614/1429a486-d199-47d4-92de-47667111b51b)\r\n\r\nCurrent graph behavior (incorrect):\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/6445614/b11b8033-0166-412b-82e2-d8f0402ce23e)\r\n\r\nNew graph behavior (corrected):\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/6445614/baf2406f-0293-45ef-9758-7dd299003e87)\r\n\r\nNote: Non-entry points without targets actually are not a problem. In the non-graph scenario, the (valid) referencing project will execute `_GetProjectReferenceTargetFrameworkProperties` which calls `GetTargetFrameworks` on the referenced project. If the target doesn't exist (or in this case, *no* targets exist), then the call no-ops (due to `SkipNonexistentTargets=\"true\"` being set) and the `ProjectReference` is essentially filtered out.",
  "state": "MERGED",
  "createdAt": "2024-01-16T18:12:07Z",
  "updatedAt": "2024-02-28T16:57:27Z",
  "closedAt": "2024-02-28T16:57:27Z",
  "mergedAt": "2024-02-28T16:57:27Z",
  "additions": 38,
  "deletions": 3,
  "changedFiles": 3,
  "headRefName": "graph-notargets-error",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f1b77b06982de95e56a203ac05a317e449efb33",
          "message": "[Graph] Emit NoTargetSpecified when an entry point project doesn't have any targets",
          "committedDate": "2024-02-28T16:06:41Z",
          "author": {
            "name": "dfederm",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e76feea801217e804d44ee648ced287dcc291f3",
          "message": "Fix UTs that I broke",
          "committedDate": "2024-02-28T16:06:41Z",
          "author": {
            "name": "dfederm",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Not related to this PR - just wondering why BuildRequestData and GraphBuildRequestData doesn't have a common ancestor (interface or abstract class) so that we do not have to have that much code duplication (The `Build` methods are otherwise identical, the calls to `Build` - as e.g. here seems identical as well). Do you know about any strong reasons why they are kept copletely separate? (I'm contemplating creating a refactoring item for that)",
              "createdAt": "2024-01-25T09:49:49Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4408,5 +4408,29 @@ public void TaskInputLoggingIsExposedToTasks(string taskFactory, bool taskInputL\n \n             Assert.Equal(BuildResultCode.Success, result.OverallResult);\n         }\n+\n+        [Fact]\n+        public void ProjectWithNoTargets()\n+        {\n+            string contents = @\"<Project />\";\n+\n+            BuildRequestData data = GetBuildRequestData(contents);\n+            BuildResult result = _buildManager.Build(_parameters, data);\n+            Assert.Equal(BuildResultCode.Failure, result.OverallResult);\n+\n+            _logger.AssertLogContains(\"MSB4040\");\n+        }\n+\n+        [Fact]\n+        public void ProjectWithNoTargetsGraph()\n+        {\n+            string contents = @\"<Project />\";\n+\n+            GraphBuildRequestData data = GetGraphBuildRequestData(contents);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "No particular reason. Might help reduce some of the code duplicate in fact.",
              "createdAt": "2024-02-28T16:26:21Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4408,5 +4408,29 @@ public void TaskInputLoggingIsExposedToTasks(string taskFactory, bool taskInputL\n \n             Assert.Equal(BuildResultCode.Success, result.OverallResult);\n         }\n+\n+        [Fact]\n+        public void ProjectWithNoTargets()\n+        {\n+            string contents = @\"<Project />\";\n+\n+            BuildRequestData data = GetBuildRequestData(contents);\n+            BuildResult result = _buildManager.Build(_parameters, data);\n+            Assert.Equal(BuildResultCode.Failure, result.OverallResult);\n+\n+            _logger.AssertLogContains(\"MSB4040\");\n+        }\n+\n+        [Fact]\n+        public void ProjectWithNoTargetsGraph()\n+        {\n+            string contents = @\"<Project />\";\n+\n+            GraphBuildRequestData data = GetGraphBuildRequestData(contents);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}