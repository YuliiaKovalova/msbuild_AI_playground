{
  "number": 7395,
  "title": "Project cache cancellation",
  "body": "Fixes #\r\n\r\n### Context\r\nThe current code throws an exception if the plugin's state is not what is expected. However, when prematurely shutting down the plugin via ctrl+c, a mismatch between the expected state and the current state can occur. Since a state mismatch is expected we should not throw an exception when cancelling.\r\n\r\n### Changes Made\r\nA check is done to see if the request has been cancelled, if so, we do not throw an exception when there is a mismatch between expected and current plugin state.\r\n\r\n### Testing\r\nManually verified that ctrl+c does not cause an exception to be thrown due to state mismatch\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2022-02-15T22:29:39Z",
  "updatedAt": "2023-01-17T02:19:40Z",
  "closedAt": "2022-04-21T18:13:02Z",
  "mergedAt": null,
  "additions": 27,
  "deletions": 12,
  "changedFiles": 1,
  "headRefName": "project_cache_cancellation",
  "isDraft": false,
  "author": {
    "login": "novacole"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "75faa7156c0754ece2be3b75c1a37f0d23f7386b",
          "message": "handle ctrl c gracefully",
          "committedDate": "2022-02-10T16:20:40Z",
          "author": {
            "name": "Cole Carter",
            "email": "colecarter@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e02afe9c16f2808bbe695426e2549b675e7d43f5",
          "message": "Merge branch 'dev/colecarter/projectcachectrlbreakfix' into HEAD",
          "committedDate": "2022-02-10T16:23:23Z",
          "author": {
            "name": "Cole Carter",
            "email": "colecarter@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7a063b62d25d9f4120718cd0e40cbc9749669d8",
          "message": "Handle ctrl+c within project cache plugin gracefully",
          "committedDate": "2022-02-15T21:51:31Z",
          "author": {
            "name": "Cole Carter",
            "email": "colecarter@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7395) <br/>All CLA requirements met.",
        "createdAt": "2022-02-15T22:29:52Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7395) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7395) before we can accept your contribution.<br/><br/>:x: novacole [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7395)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=7395) it.</sub>",
        "createdAt": "2022-02-15T22:29:52Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "/cc: @dfederm",
        "createdAt": "2022-02-16T01:50:00Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure this is right. If there are errors during shutdown, even because of cancellation, that seems like an error to me.",
              "createdAt": "2022-02-16T20:49:52Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -591,7 +597,10 @@ public async Task ShutDown()\n \n                 await _projectCachePlugin.EndBuildAsync(pluginLogger, _cancellationToken);\n \n-                if (pluginLogger.HasLoggedErrors)\n+                /* Mismatches between the current plugin state and expected state can occur when cancelled. Under normal circumstances we would want those mismatches to be\n+                 * logged as an error. However, in this case the mismatch is caused by the cancellation and should be ignored.\n+                */\n+                if (pluginLogger.HasLoggedErrors && !_cancellationToken.IsCancellationRequested)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Cancellation shouldn't impact the validity of state management",
              "createdAt": "2022-02-16T20:50:22Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -654,15 +663,21 @@ private void CheckInState(ProjectCacheServiceState expectedState)\n         {\n             lock (this)\n             {\n-                ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $\"Expected state {expectedState}, actual state {_serviceState}\");\n+                if (!_cancellationToken.IsCancellationRequested)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same",
              "createdAt": "2022-02-16T20:50:31Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -654,15 +663,21 @@ private void CheckInState(ProjectCacheServiceState expectedState)\n         {\n             lock (this)\n             {\n-                ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $\"Expected state {expectedState}, actual state {_serviceState}\");\n+                if (!_cancellationToken.IsCancellationRequested)\n+                {\n+                    ErrorUtilities.VerifyThrowInternalError(_serviceState == expectedState, $\"Expected state {expectedState}, actual state {_serviceState}\");\n+                }\n             }\n         }\n \n         private void CheckNotInState(ProjectCacheServiceState unexpectedState)\n         {\n             lock (this)\n             {\n-                ErrorUtilities.VerifyThrowInternalError(_serviceState != unexpectedState, $\"Unexpected state {_serviceState}\");\n+                if (!_cancellationToken.IsCancellationRequested)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}