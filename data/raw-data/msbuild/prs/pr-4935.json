{
  "number": 4935,
  "title": "Ensure directory entries in zips are not created",
  "body": "Ensure that directory entries in zip archives are not attempted to be created as files. Only file entries (and their parent directories) will be created.\r\n\r\nCurrently using the `<Unzip/>` task with an archive containing directories will fail trying to `File.Open` on a directory.\r\n\r\n```\r\nerror : Access to the path '/Users/USER/stuff/internalzipdir/' is denied.\r\n\r\nat Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\nat Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\nat System.IO.FileStream.OpenHandle(FileMode mode, FileShare share, FileOptions options)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\nat System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\nat System.IO.File.Open(String path, FileMode mode, FileAccess access, FileShare share)\r\nat Microsoft.Build.Tasks.Unzip.Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirectory)\r\nat Microsoft.Build.Tasks.Unzip.Execute()\r\n```\r\n\r\nFixes #3884",
  "state": "MERGED",
  "createdAt": "2019-11-19T16:44:58Z",
  "updatedAt": "2024-05-17T15:38:08Z",
  "closedAt": "2019-11-26T20:29:40Z",
  "mergedAt": "2019-11-26T20:29:40Z",
  "additions": 44,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "fixunzip",
  "isDraft": false,
  "author": {
    "login": "mjcheetham"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c1e64f181be6f7fe58f6a577c6a4ef0a665b5438",
          "message": "Ensure directories in zips are created correctly\n\nEnsure that directory entries in zip archives are created correctly.\nZip archives can contain explicit directory entries (not just files) so\nwe should be sure to differentiate between them and file entries, and\ncreate the correct file system objects.\n\nEmpty directories inside archives will now also be created/extracted\ncorrectly.",
          "committedDate": "2019-11-20T14:37:44Z",
          "author": {
            "name": "Matthew John Cheetham",
            "email": "mjcheetham@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "736d76ae3287a95ea15e1fe57c7839e44f280b93",
          "message": "Fix typo in Unzip task comment\r\n\r\nFix a comment in the Unzip task\n\nCo-Authored-By: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2019-11-21T10:26:42Z",
          "author": {
            "name": "Matthew John Cheetham",
            "email": "mjcheetham@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you please also add some tests in the [test class](https://github.com/cdmihai/msbuild/blob/0c507a29b6d59340ef5221f66df5d953c1049ba1/src/Tasks.UnitTests/Unzip_Tests.cs#L16)?",
        "createdAt": "2019-11-19T17:58:20Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Can you please also add some tests in the [test class](https://github.com/cdmihai/msbuild/blob/0c507a29b6d59340ef5221f66df5d953c1049ba1/src/Tasks.UnitTests/Unzip_Tests.cs#L16)?\r\n\r\nSure thing!",
        "createdAt": "2019-11-19T18:54:59Z",
        "author": {
          "login": "mjcheetham"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/microsoft/msbuild?pullRequest=4935) <br/>All CLA requirements met.",
        "createdAt": "2019-11-20T14:41:57Z",
        "author": {
          "login": "dnfclas"
        }
      },
      {
        "body": "> > Can you please also add some tests in the [test class](https://github.com/cdmihai/msbuild/blob/0c507a29b6d59340ef5221f66df5d953c1049ba1/src/Tasks.UnitTests/Unzip_Tests.cs#L16)?\r\n> \r\n> Sure thing!\r\n\r\n@cdmihai, I've added a unit test of extracting an archive with both empty and populated directories.",
        "createdAt": "2019-11-20T14:45:14Z",
        "author": {
          "login": "mjcheetham"
        }
      },
      {
        "body": "not sure why CI is being cranky. Retrying.",
        "createdAt": "2019-11-26T16:40:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2019-11-26T16:40:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2019-11-26T16:40:51Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "Checks are mysterious. Everything's passing but an old, stale failure is keeping it red. I'm going to bypass.\r\n\r\nThanks @mjcheetham!",
        "createdAt": "2019-11-26T20:29:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald  Would you consider backporting this fix to MSBuild 15? ",
        "createdAt": "2024-05-17T12:14:58Z",
        "author": {
          "login": "hickford"
        }
      },
      {
        "body": "@hickford there's a very high bar to clear there; I don't think we'd do that without some very strong motivation, sorry.",
        "createdAt": "2024-05-17T15:38:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a better way of checking whether the entry is a directory? In linux for example, you could have a file ending in backslash.",
              "createdAt": "2019-11-19T17:54:13Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,14 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly; we should skip these.\n+                // The parent directories of any file entries is created just before file creation.\n+                char lastChar = destinationPath.FullName[destinationPath.FullName.Length - 1];\n+                if (lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "This is what the .NET Framework does:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.ZipArchiveEntry.Extract.cs#L109\r\n\r\n```C#\r\nif (Path.GetFileName(fileDestinationPath).Length == 0)\r\n{\r\n    // If it is a directory:\r\n\r\n    if (source.Length != 0)\r\n        throw new IOException(SR.IO_DirectoryNameWithData);\r\n\r\n        Directory.CreateDirectory(fileDestinationPath);\r\n}\r\nelse\r\n{\r\n    // If it is a file:\r\n    // Create containing directory:\r\n    Directory.CreateDirectory(Path.GetDirectoryName(fileDestinationPath));\r\n    source.ExtractToFile(fileDestinationPath, overwrite: overwrite);\r\n}\r\n```",
              "createdAt": "2019-11-19T20:11:19Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,14 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly; we should skip these.\n+                // The parent directories of any file entries is created just before file creation.\n+                char lastChar = destinationPath.FullName[destinationPath.FullName.Length - 1];\n+                if (lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar)",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I've replaced the check for 'is directory' with this one `Path.GetFileName(destinationPath.FullName).Length == 0`.\r\n\r\nThe directory is also now explicitly created as this allows archives containing empty directories to also be extracted fully.",
              "createdAt": "2019-11-20T14:43:12Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,14 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly; we should skip these.\n+                // The parent directories of any file entries is created just before file creation.\n+                char lastChar = destinationPath.FullName[destinationPath.FullName.Length - 1];\n+                if (lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar)",
              "author": {
                "login": "mjcheetham"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "IIRC, on Linux and macOS, both `DirectorySeparatorChar` and `AltDirectorySeparatorChar` are `/`. If the zip format allows `\\`, we should probably explicitly check for both here.",
              "createdAt": "2019-11-19T19:25:13Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,14 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly; we should skip these.\n+                // The parent directories of any file entries is created just before file creation.\n+                char lastChar = destinationPath.FullName[destinationPath.FullName.Length - 1];\n+                if (lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Replaced check with `Path.GetFileName(destinationPath.FullName).Length == 0` to avoid having to reference directory separator characters directly.",
              "createdAt": "2019-11-20T14:42:19Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,14 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly; we should skip these.\n+                // The parent directories of any file entries is created just before file creation.\n+                char lastChar = destinationPath.FullName[destinationPath.FullName.Length - 1];\n+                if (lastChar == Path.DirectorySeparatorChar || lastChar == Path.AltDirectorySeparatorChar)",
              "author": {
                "login": "mjcheetham"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // If this entry is a directory we should create it and move to the next entry.\r\n```",
              "createdAt": "2019-11-20T16:19:08Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -131,6 +131,15 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n             {\n                 FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n \n+                // Zip archives can have directory entries listed explicitly.\n+                // If this entry is a directory we should create the it and move to the next entry.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}