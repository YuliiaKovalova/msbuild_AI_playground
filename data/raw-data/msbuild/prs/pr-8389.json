{
  "number": 8389,
  "title": "Enable CA1852: Seal internal types",
  "body": "### Context\r\n\r\nTypes that are not designed to be inherited from should be sealed. This is general defensive goodness, and also has perf implications because it enables some runtime/JIT optimizations. A new analyzer was recently added for this.\r\n\r\n### Changes Made\r\n\r\nEnabled the analyzer and fixed the code with `dotnet format`.\r\n\r\n### Testing\r\n\r\nManual review of the changes.\r\n\r\n### Notes\r\n\r\n`dotnet format` also rectified our namespace imports. I don't believe there's any controversy in that and the change is low risk so I left it in. For the actual sealing:\r\n- It missed one class because it was ifdefed out in Core. I fixed it manually.\r\n- It resulted in a handful of build errors where the compiler didn't like protected members in sealed types. I fixed those manually.\r\n- The analyzer doesn't understand `InternalsVisibleTo`, by design. This is not causing any issues for us now as we don't derive from internal types in other assemblies. Our `InternalsVisibleTo` all point to our own assemblies built in this repo so this is a non-breaking change (unless hacks, reflection, etc. but the bar is certainly not that high).\r\n- I am not including changes to files under `src/Deprecated` in this PR.",
  "state": "MERGED",
  "createdAt": "2023-02-02T11:41:33Z",
  "updatedAt": "2023-02-14T03:04:34Z",
  "closedAt": "2023-02-14T03:04:33Z",
  "mergedAt": "2023-02-14T03:04:33Z",
  "additions": 1111,
  "deletions": 1263,
  "changedFiles": 511,
  "headRefName": "enable-ca1852",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5739b8743ab3ff31aa458c52ec7df63a92503b89",
          "message": "Rectify namespace imports with dotnet format",
          "committedDate": "2023-02-13T13:44:26Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6951eecb2498b1d0cac74c46b537d7b84ca84554",
          "message": "Enable CA1852: Seal internal types",
          "committedDate": "2023-02-13T13:44:30Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I am not including changes to files under src/Deprecated in this PR.\r\n\r\nWe can possibly exclude the analyzers for those classes using globbing in `editorconfig`.\r\nSimilar to what we are doing in templating for external source code:\r\n\r\nhttps://github.com/dotnet/templating/blob/abf67821fa26adc56016612747ccd31eed23a592/.editorconfig#L645-L648",
        "createdAt": "2023-02-02T16:56:05Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "> I'd prefer two commits: one for `dotnet format` to do the usings, then add the `sealed` rule and rerun. But I won't block on it.\r\n\r\nThat's very reasonable and easy to do. I have force-pushed an update with 2 commits. The overall diff is _identical_ to the initial commit.",
        "createdAt": "2023-02-03T09:13:00Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > I am not including changes to files under src/Deprecated in this PR.\r\n> \r\n> We can possibly exclude the analyzers for those classes using globbing in `editorconfig`. Similar to what we are doing in templating for external source code:\r\n> \r\n> https://github.com/dotnet/templating/blob/abf67821fa26adc56016612747ccd31eed23a592/.editorconfig#L645-L648\r\n\r\nThis is already kind of working via the [ProjectIsDeprecated](https://github.com/dotnet/msbuild/blob/main/src/Deprecated/Directory.Build.props) prop. Without it build would be failing in the Deprecated directory unless we catch up with all the severity=warning rules there. It's just that `dotnet format` doesn't respect it and makes fixes there, which may be a bug. I also see other `dotnet format` issues such as not honoring `DOTNET_ROOT` and always running MSBuild from a globally installed SDK. I'm adding it to the list of things to follow up on later.",
        "createdAt": "2023-02-03T09:33:53Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > > I am not including changes to files under src/Deprecated in this PR.\n> \n> > \n> \n> > We can possibly exclude the analyzers for those classes using globbing in `editorconfig`. Similar to what we are doing in templating for external source code:\n> \n> > \n> \n> > https://github.com/dotnet/templating/blob/abf67821fa26adc56016612747ccd31eed23a592/.editorconfig#L645-L648\n> \n> \n> \n> This is already kind of working via the [ProjectIsDeprecated](https://github.com/dotnet/msbuild/blob/main/src/Deprecated/Directory.Build.props) prop. Without it build would be failing in the Deprecated directory unless we catch up with all the severity=warning rules there. It's just that `dotnet format` doesn't respect it and makes fixes there, which may be a bug. I also see other `dotnet format` issues such as not honoring `DOTNET_ROOT` and always running MSBuild from a globally installed SDK. I'm adding it to the list of things to follow up on later.\n\nVS auto-fixes are not respecting it either (but it's also easy to revert those changes).",
        "createdAt": "2023-02-03T09:40:06Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "> Out of scope and stupid question (given by lack of detailed knowledge of analyzers and `dotnet format`) - should running of `dotnet format` guarantee that ones changes are properly adhering to the preconfigured rules (`.editorconfig`)? Or at least those that can be automatically fixed?\r\n> \r\n> If that's the case should `dotnet format` be strongly suggested as a pre-commit step (alonmg with e.g. `build.cmd -test`)? Or is there any downside (e.g. any possibly unwanted automatic reformatting)?\r\n> \r\n> I'm just thinking whether we should add this step (and other specific steps - like the `build.cmd -test`) to our [contributing guide](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Contributing-Code.md)\r\n\r\nApologies for not responding earlier. My understanding is that we allow rules to be configured as \"suggestion\", meaning that we don't enforce them, we just slightly prefer them to be followed. If `dotnet format` attempts to fix everything, suggestions included, it would result in unnecessary and unwanted churn. We enforce only rules that generate warnings and those should be checked by regular build so they are already part of our contribution acceptance criteria.",
        "createdAt": "2023-02-13T13:51:30Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}