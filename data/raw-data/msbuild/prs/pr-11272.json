{
  "number": 11272,
  "title": "Update copy logic to use dedicated threads.",
  "body": "Also updated some checks to help avoid hitting the file system if possible.\r\n\r\nFixes #\r\n\r\n### Context\r\nThe existing implementation does synchronous file copying on threadpool threads which can lead to starvation. Switching to dedicated threads to do synchronous copying helps keep the threadpool threads available for other tasks.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-13T19:49:52Z",
  "updatedAt": "2025-03-10T13:50:56Z",
  "closedAt": "2025-03-10T13:50:55Z",
  "mergedAt": "2025-03-10T13:50:55Z",
  "additions": 149,
  "deletions": 102,
  "changedFiles": 3,
  "headRefName": "dev/erarndt/updateCopyParallelism",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "868969a9dce701ccdb2f46085607c130b2bdf1a2",
          "message": "Update copy logic to use dedicated threads.\n\nAlso updated some checks to help avoid hitting the file system if possible.",
          "committedDate": "2025-01-16T10:29:31Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "336556b6d985874f61adf6ae530ee34492c19d86",
          "message": "Address PR feedback",
          "committedDate": "2025-02-26T23:38:39Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Just kinda generally, I'm surprised to hear about threadpool starvation in our worker nodes which aren't threadpool heavy. Have you observed this in practice?",
        "createdAt": "2025-01-13T19:59:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Just kinda generally, I'm surprised to hear about threadpool starvation in our worker nodes which aren't threadpool heavy. Have you observed this in practice?\r\n\r\nThere is some sneaky utilization of the threadpool that ends up blocking enough to see the \"hill climbing\" algorithm start spinning up new threads. I've seen between 40 and 50 threadpool threads per MSBuild processes which is over 3x what I would expect. This change (https://github.com/dotnet/msbuild/pull/11275) has a larger impact than the copy code, but this contributes as well. There's also additional benefit to reducing the mix of I/O bound work and CPU bound work on the threadpool.",
        "createdAt": "2025-01-13T20:14:56Z",
        "author": {
          "login": "Erarndt"
        }
      },
      {
        "body": "Related to #11160",
        "createdAt": "2025-01-14T10:03:50Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Is there an option to use TaskCreationOptions.LongRunning flag?  This should avoid the thread starvation problem.",
        "createdAt": "2025-01-21T23:54:03Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Hi! Numbers:\r\nExecutableName | RepoName | Scenario | Mean | Median | Variance | Min | Max | EntriesNum\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\nMSBuildBaseline | OC | inc-cold | 33689.2 | 32643.3 | 11999119.992319642 | 29989.07 | 44322.37 | 20\r\nMSBuildCompare | OC | inc-cold | 32783.002440000004 | 31915.07 | 9742298.542851143 | 29628.52 | 40470.06 | 20\r\nMSBuildBaseline | OC | re-cold | 137929.7 | 136370.62884999998 | 47597265.67838404 | 126331.6 | 155266.6 | 20\r\nMSBuildCompare | OC | re-cold | 138762.7 | 137488.06410000002 | 157097140.4644246 | 125246.8 | 187710.1 | 20\r\n\r\nI believe the performance difference is below our ability to detect it.\r\n",
        "createdAt": "2025-03-10T13:39:32Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to break tests. Why is it beneficial?",
              "createdAt": "2025-01-20T14:00:43Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -288,6 +319,7 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n             }\n \n             if (!Traits.Instance.EscapeHatches.CopyWithoutDelete &&\n+                (UseHardlinksIfPossible || UseSymboliclinksIfPossible) &&",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "My intent was to try and minimize deletes when the copy would overwrite it anyway. Going to undo this change.",
              "createdAt": "2025-02-26T23:39:46Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -288,6 +319,7 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n             }\n \n             if (!Traits.Instance.EscapeHatches.CopyWithoutDelete &&\n+                (UseHardlinksIfPossible || UseSymboliclinksIfPossible) &&",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the PR lost the logic for `parallelism` variable values, this should be cleaned up to be transparent that it does nothing apart from deciding if execution is synchronous or parallel (with the default values).",
              "createdAt": "2025-01-20T14:11:31Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -559,77 +607,23 @@ private bool CopyParallel(\n \n             // Lockless flags updated from each thread - each needs to be a processor word for atomicity.\n             var successFlags = new IntPtr[DestinationFiles.Length];\n-            var actionBlockOptions = new ExecutionDataflowBlockOptions\n-            {\n-                MaxDegreeOfParallelism = parallelism,",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Should be updated now.",
              "createdAt": "2025-02-26T23:39:59Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -559,77 +607,23 @@ private bool CopyParallel(\n \n             // Lockless flags updated from each thread - each needs to be a processor word for atomicity.\n             var successFlags = new IntPtr[DestinationFiles.Length];\n-            var actionBlockOptions = new ExecutionDataflowBlockOptions\n-            {\n-                MaxDegreeOfParallelism = parallelism,",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider adding a cancellation or exit condition in the infinite loop in ParallelCopyTask to allow graceful shutdown of dedicated threads.\n```suggestion\n        private static void ParallelCopyTask(object state, CancellationToken cancellationToken)\n        {\n            AutoResetEvent autoResetEvent = (AutoResetEvent)state;\n            while (!cancellationToken.IsCancellationRequested)\n```",
              "createdAt": "2025-02-27T13:11:19Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -507,6 +538,22 @@ private bool CopySingleThreaded(\n             return success;\n         }\n \n+        private static void ParallelCopyTask(object state)\n+        {\n+            AutoResetEvent autoResetEvent = (AutoResetEvent)state;\n+            while (true)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "I don't think this is necessary, also you can't pass a token this way afaik.",
              "createdAt": "2025-02-27T13:22:27Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -507,6 +538,22 @@ private bool CopySingleThreaded(\n             return success;\n         }\n \n+        private static void ParallelCopyTask(object state)\n+        {\n+            AutoResetEvent autoResetEvent = (AutoResetEvent)state;\n+            while (true)",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      }
    ]
  }
}