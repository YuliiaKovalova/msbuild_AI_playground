{
  "number": 8234,
  "title": "Disable MotW check on core in GenerateResource",
  "body": "Fixes #7946\r\n\r\n### Context\r\nThe GenerateResource task previously would deserialize and reserialize resource files. It used BinaryFormatter, which is known to be unsafe; to mitigate that security risk, we added a check for the mark of the web on resource files; files with that mark are considered unsafe, and those without are considered safe to be deserialized. On core, we have a separate solution: don't deserialize and reserialize them.\r\n\r\nMore recently, in work to unify code paths, we effectively enabled the check on core. There remains a check that we're on windows, so it only affected windows computers, and most windows devices could accomplish that fine. Nanoservices, however, did not have the COM API that we called as part of the \"IsDangerous\" check. This led it to crash.\r\n\r\n### Customer Impact\r\nUsing a (windows nanoserver) container, customers cannot build projects that include certain resource files. They instead see a confusing error about a missing COM API.\r\n\r\n### Risk\r\nLow\r\n\r\n### Testing\r\nI verified that setting the registry key resolved the issue. Though that's a different change, it leads to the same code path.\r\n\r\n### Code Reviewers\r\nrainersigwald\r\n\r\n### Description of the fix\r\nI added an early return on core to get away from the error.\r\n\r\n### Notes\r\nThe Mark of the Web check was originally introduced as a security measure, but this code path did not initially have it and doesn't need it. This change passed a security review.\r\n\r\nThanks to @asalvo for finding the problematic change!",
  "state": "MERGED",
  "createdAt": "2022-12-09T19:53:49Z",
  "updatedAt": "2023-01-10T19:05:00Z",
  "closedAt": "2023-01-10T19:04:59Z",
  "mergedAt": "2023-01-10T19:04:59Z",
  "additions": 7,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "mow-not-on-core",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.5"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dba78c0103373e6862e7b0ed8473a1309fab0e42",
          "message": "Disable MotW check on core",
          "committedDate": "2022-12-09T19:39:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fb3c85256cfdac9d5c1429a9e01afd3442f15ac",
          "message": "Tweak ifdefs",
          "committedDate": "2022-12-09T19:53:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ba1120aaa94bc32c11e54236d704bba3d6058c44",
          "message": "Add comment",
          "committedDate": "2022-12-15T21:15:02Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a43c2c731b46f415157de47a36c83615276c575f",
          "message": "Use FEATURE_RESXREADER_LIVEDESERIALIZATION",
          "committedDate": "2022-12-17T01:06:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Add comment",
              "createdAt": "2022-12-12T16:10:57Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -905,24 +905,29 @@ public override bool Execute()\n             return !Log.HasLoggedErrors && outOfProcExecutionSucceeded;\n         }\n \n+#if FEATURE_APPDOMAIN",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "```suggestion\r\n#if FEATURE_RESXREADER_LIVEDESERIALIZATION\r\n```",
              "createdAt": "2022-12-16T15:55:49Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -905,24 +905,29 @@ public override bool Execute()\n             return !Log.HasLoggedErrors && outOfProcExecutionSucceeded;\n         }\n \n+#if FEATURE_APPDOMAIN",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n#if !FEATURE_RESXREADER_LIVEDESERIALIZATION\r\n```",
              "createdAt": "2022-12-16T15:56:36Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -905,24 +905,33 @@ public override bool Execute()\n             return !Log.HasLoggedErrors && outOfProcExecutionSucceeded;\n         }\n \n+#if FEATURE_APPDOMAIN\n         private static readonly bool AllowMOTW = !NativeMethodsShared.IsWindows || (Registry.GetValue(@\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\SDK\", \"AllowProcessOfUntrustedResourceFiles\", null) is string allowUntrustedFiles && allowUntrustedFiles.Equals(\"true\", StringComparison.OrdinalIgnoreCase));\n \n         private const string CLSID_InternetSecurityManager = \"7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4\";\n         private const uint ZoneInternet = 3;\n         private static IInternetSecurityManager internetSecurityManager = null;\n+#endif\n \n         // Resources can have arbitrarily serialized objects in them which can execute arbitrary code\n         // so check to see if we should trust them before analyzing them\n         private bool IsDangerous(String filename)\n         {\n+            // On Framework, we deserialize BinaryFormatter blobs in the main MSBuild process then serialize them again. On Core, we put them as-is into the .resources file,\n+            // which eliminates the deserialization attack surface from MSBuild's perspective.\n+            //\n+            // Even on Framework, we only need to (dangerously) deserialize the .resx file if we think we might need a separate AppDomain, so FEATURE_APPDOMAIN makes sense here.\n+#if !FEATURE_APPDOMAIN",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}