{
  "number": 6237,
  "title": "Allow Custom CopyToOutputDirectory Location With TargetPath",
  "body": "Fixes #2795\r\nand indirectly fixes https://developercommunity.visualstudio.com/t/copytooutputdirectorypreservenewest-ignored-inside/1332219?from=email&viewtype=all#T-ND1363347\r\n\r\n### Context\r\nThere's currently no way to include items in a project such that:\r\n1. Visual studio sees them in a specific folder (via `<Link>`).\r\n2. They are published to a user-defined path (currently controlled via `<Link>`)\r\n\r\n### Changes Made\r\nModify the `AssignTargetPath` task to return early if `TargetPath` metadata is already set on a particular item.\r\n\r\n### Testing\r\n- [x] Need to add one test covering this.\r\n- [x] Tested locally with bootstrapped MSBuild on command line\r\n- [x] Tested locally with a boostrapped msbuild on internal VS\r\n\r\nHere's the repro I'm using:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"Files\\**\">\r\n      <Link>Files\\%(Filename)%(Extension)</Link>\r\n      <TargetPath>%(Filename)%(Extension)</TargetPath>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n### Notes\r\nThe other way of solving this problem has to do with `Microsoft.Common.CurrentVersion.targets`. We modify it so that the `AssignTargetPath` task look something like this:\r\n```xml\r\n    <AssignTargetPath Files=\"@(Content)\" RootFolder=\"$(MSBuildProjectDirectory)\" Condition=\"'%(Content.TargetPath)'==''\">\r\n      <Output TaskParameter=\"AssignedFiles\" ItemName=\"ContentWithTargetPath\" />\r\n    </AssignTargetPath>\r\n    <ItemGroup>\r\n        <ContentWithTargetPath Include=\"@(Content)\" Condition=\"'%(Content.TargetPath)'!=''\"/>\r\n    </ItemGroup>\r\n```\r\nThis seems less efficient to me. AssignTargetPath is also called for all `None`, `Content`, and `EmbeddedResource` files. So if we go this batching route and want `None` or `EmbeddedResource` to have this feature, we'd need to batch those as well.",
  "state": "MERGED",
  "createdAt": "2021-03-10T01:54:23Z",
  "updatedAt": "2021-05-27T17:37:27Z",
  "closedAt": "2021-04-05T19:37:30Z",
  "mergedAt": "2021-04-05T19:37:30Z",
  "additions": 88,
  "deletions": 31,
  "changedFiles": 4,
  "headRefName": "allow-custom-outputpath",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "changewave16.10"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "aea6d38080c40b103a7d0153a9c12abd49a18569",
          "message": "Allow manually setting TargetPath on items",
          "committedDate": "2021-03-10T01:26:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "137343218241d2c4b22d47633ad09916716015bc",
          "message": "Add test ensuring TargetPath takes priority if already set as metadata",
          "committedDate": "2021-03-10T18:09:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "328f0294dfc21af9210705cc7018b8f8362825b7",
          "message": "Shouldy-fication",
          "committedDate": "2021-03-10T18:18:14Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b3f3eb8c882da43e8399cc62545e43291d4b21c",
          "message": "Rename to targetpathoverride",
          "committedDate": "2021-03-15T16:46:53Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d795b4e3a179cbfa17084834fde472e0f4d46a06",
          "message": "If targetpathoverride is not set fall back to link. Avoid duplicated code",
          "committedDate": "2021-03-15T22:10:15Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6c32457d1995a777d002a8b62655150769ec8bf",
          "message": "Add fully qualified path as test case",
          "committedDate": "2021-03-15T22:14:00Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8bc9c3b89cc994d16e84ccd192142839782be682",
          "message": "Use TargetPath instead of TargetPathOverride. Placed under a 16.10 changewave",
          "committedDate": "2021-03-31T16:36:22Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "266ca4d4d103175666669360f11b4ff98915b478",
          "message": "Add link to PR in change waves doc.",
          "committedDate": "2021-03-31T16:39:23Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4941a4cabd04685bb4aad5498f639dca3ec6c5aa",
          "message": "Reset change waves between tests",
          "committedDate": "2021-03-31T17:29:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12abb9624e6d9f835fb764100633ced983cd7848",
          "message": "Test: Reset state before and after tests",
          "committedDate": "2021-03-31T17:42:58Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c874990c9a95f4b0afbd370e06b36cc7aeddc5af",
          "message": "unix environment variables are case sensitive..",
          "committedDate": "2021-03-31T18:16:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "663295da7296116463ff6c459494b698b3dd2bd7",
          "message": "PR Feedback: Compare variable against what it should be, not the other way around",
          "committedDate": "2021-04-01T18:23:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@cdmihai No longer needed as discussed in the PR review. Users now set `TargetPathOverride` instead of `TargetPath`, which may have been previously set for various reasons. No change wave needed because this is explicitly opt-in now.",
        "createdAt": "2021-03-15T22:15:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@dsplaisted before we get this merged, could I have your take on this? /cc: @KathleenDollard \r\n\r\nTo quickly summarize what the goal is:\r\n1. Have an item show in VS under a specific folder\r\n2. Output that item to a folder that differs from how it shows in VS.\r\n3. Output the item whenever the item itself is updated.\r\n\r\nThis change simply allows a `TargetPathOverride` metadata to take priority over using `Link` in setting the `TargetPath`.",
        "createdAt": "2021-03-19T18:33:10Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos In addition to your goals, I would also add:\r\n- have a simple, clear way of specifying the output path for a single Content item.",
        "createdAt": "2021-03-19T20:47:56Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "friendly reminder. @dsplaisted ",
        "createdAt": "2021-03-22T19:46:02Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@dsplaisted I'm not sure how this change could impact the rest of the build. Do TargetPath and Link _need_ to stay in sync for any reason?",
        "createdAt": "2021-03-29T19:27:14Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'm pretty sure my worries about this were unfounded.  What I was thinking of is specifying `Link` metadata to something inside the project folder in order to display it in the Visual Studio Solution Explorer in a different place than the physical path.  There would be problems with doing that, I believe.  But just changing the folder where it's copied to in the output is fine, I believe.\r\n\r\n`TargetPath` is a way better name for this than `TargetPathOverride`, and I think `TargetPath` is already used in some places.  Did you go with `TargetPathOverride` because you think it's less likely to break builds?  Could we use `TargetPath` but put the new behavior behind a quirks / compatibility wave?",
        "createdAt": "2021-03-31T02:39:28Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> Did you go with TargetPathOverride because you think it's less likely to break builds?\r\n\r\n@dsplaisted That was exclusively the reason. We figured that changing what `TargetPath` does could impact customers who've expected it to work a certain way when they set `TargetPath` ahead of time (it will be overridden by link anyway). So the breaking scenario would be customers who have targetpath and link set, but expect the item to output to where Link specifies.\r\n\r\nNote that the change doesn't set `TargetPathOverride` for future use. It allows `TargetPathOverride` to override what `TargetPath` is set to.\r\n\r\nI'm open to placing this under a changewave if you think it's the better long term solution than having a separate metadata controlling this behavior.",
        "createdAt": "2021-03-31T16:20:45Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Pushed up changes that use `TargetPath` if it's already set (instead of TargetPathOverride), and placed it under the 16.10 change wave. Added it to the changewave doc as well.",
        "createdAt": "2021-03-31T16:39:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Isn't the point of the method to set the TargetPath property if it isn't already set? It doesn't seem helpful to set the TargetPath property if it isn't already set using the TargetPath property, since that's guaranteed to not be set...",
        "createdAt": "2021-03-31T16:53:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind There's no guarantee that TargetPath isn't set when this task runs (no conditions on the targer or tasks), so I think it's reasonable to skip over it if it's already set.",
        "createdAt": "2021-03-31T17:06:08Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> So the breaking scenario would be customers who have targetpath and link set, but expect the item to output to where Link specifies.\r\n\r\nDoes the `TargetPath` metadata do anything today?  If it doesn't do anything it's a lot less likely that people would be setting it, right?",
        "createdAt": "2021-04-01T02:48:39Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "As far as I can tell it only looks to be used when defining where files will be placed, which reinforces that we should be using TargetPath instead of TargetPathOverride.",
        "createdAt": "2021-04-01T18:24:41Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@dsplaisted ping for an approving review or feedback \ud83d\ude42",
        "createdAt": "2021-04-05T16:05:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hello @BenVillalobos.  Now that version 16.10 has been released, I am able to test.  Unfortunately, I think this change exchanged one problem for another.\r\n\r\n```xml\r\n<Content Include=\"Files\\**\">\r\n  <Link>Files\\%(Filename)%(Extension)</Link>\r\n  <TargetPath>%(Filename)%(Extension)</TargetPath>\r\n  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n</Content>\r\n```\r\n\r\nI have verified the correctness of the first two lines (i.e. the `Link` and `TargetPath` elements).  However, the last line with the `CopyToOutputDirectory` element is not working.  After completing the first build, if I tell Visual Studio to build again, then it builds the project instead of correctly saying that it is update to date.\r\n\r\nI tested by modifying [the MWE](https://www.dropbox.com/s/h9vk0mhgd3076tz/ClassLibrary1.zip?dl=0) I provided in [my original VSDC isssue](https://developercommunity.visualstudio.com/t/copytooutputdirectorypreservenewest-ignored-inside/1332219).",
        "createdAt": "2021-05-27T13:05:36Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "@TysonMN I created https://github.com/dotnet/msbuild/issues/6496 to track this ",
        "createdAt": "2021-05-27T17:37:27Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Instead of the continue and duplication you could let it fall through. First try TargetPath. If null or empty try Link. If null or empty run that if block. Then set the escaped value and return.",
              "createdAt": "2021-03-13T17:16:02Z",
              "path": "src/Tasks/AssignTargetPath.cs",
              "diffHunk": "@@ -71,13 +71,20 @@ public override bool Execute()\n \n                 for (int i = 0; i < Files.Length; ++i)\n                 {\n-                    string link = Files[i].GetMetadata(ItemMetadataNames.link);\n                     AssignedFiles[i] = new TaskItem(Files[i]);\n+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);\n \n-                    // If file has a link, use that.\n-                    string targetPath = link;\n+                    // If TargetPath is already set, copy it over.\n+                    // https://github.com/dotnet/msbuild/issues/2795\n+                    if (!string.IsNullOrEmpty(targetPath))\n+                    {\n+                        AssignedFiles[i].SetMetadata(ItemMetadataNames.targetPath, EscapingUtilities.Escape(targetPath));",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also add a fully qualified path to sanity ensure the task preserves those.",
              "createdAt": "2021-03-13T17:18:29Z",
              "path": "src/Tasks.UnitTests/AssignTargetPath_Tests.cs",
              "diffHunk": "@@ -84,14 +75,33 @@ public void InConeButAbsolute()\n                           };\n             t.RootFolder = NativeMethodsShared.IsWindows ? @\"c:\\f1\\f2\" : \"/f1/f2\";\n \n-            bool success = t.Execute();\n+            t.Execute().ShouldBeTrue();\n+            t.AssignedFiles.Length.ShouldBe(1);\n+            t.AssignedFiles[0].GetMetadata(\"TargetPath\").ShouldBe(NativeMethodsShared.IsWindows ? @\"f3\\f4\\file.txt\" : \"f3/f4/file.txt\");\n+        }\n \n-            Assert.True(success);\n+        [Theory]\n+        [InlineData(\"test/output/file.txt\")]",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sort System first?",
              "createdAt": "2021-03-14T02:43:39Z",
              "path": "src/Tasks.UnitTests/AssignTargetPath_Tests.cs",
              "diffHunk": "@@ -5,6 +5,8 @@\n using Microsoft.Build.Shared;\n using Microsoft.Build.Tasks;\n using Microsoft.Build.Utilities;\n+using Shouldly;\n+using System.Collections.Generic;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider using some new variable (\"targetPathOverride\"? \"targetPath2\"? Choose a good name) to allow users to provide a custom targetPath while maintaining that this task can be called twice without adverse consequences. (Escaping seems necessary as part of what TaskItem requires for all its metadata.)",
              "createdAt": "2021-03-15T15:35:42Z",
              "path": "src/Tasks/AssignTargetPath.cs",
              "diffHunk": "@@ -71,13 +71,20 @@ public override bool Execute()\n \n                 for (int i = 0; i < Files.Length; ++i)\n                 {\n-                    string link = Files[i].GetMetadata(ItemMetadataNames.link);\n                     AssignedFiles[i] = new TaskItem(Files[i]);\n+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);\n \n-                    // If file has a link, use that.\n-                    string targetPath = link;\n+                    // If TargetPath is already set, copy it over.\n+                    // https://github.com/dotnet/msbuild/issues/2795\n+                    if (!string.IsNullOrEmpty(targetPath))\n+                    {\n+                        AssignedFiles[i].SetMetadata(ItemMetadataNames.targetPath, EscapingUtilities.Escape(targetPath));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Going with `TargetPathOverride` for clarity.",
              "createdAt": "2021-03-15T21:58:08Z",
              "path": "src/Tasks/AssignTargetPath.cs",
              "diffHunk": "@@ -71,13 +71,20 @@ public override bool Execute()\n \n                 for (int i = 0; i < Files.Length; ++i)\n                 {\n-                    string link = Files[i].GetMetadata(ItemMetadataNames.link);\n                     AssignedFiles[i] = new TaskItem(Files[i]);\n+                    string targetPath = Files[i].GetMetadata(ItemMetadataNames.targetPath);\n \n-                    // If file has a link, use that.\n-                    string targetPath = link;\n+                    // If TargetPath is already set, copy it over.\n+                    // https://github.com/dotnet/msbuild/issues/2795\n+                    if (!string.IsNullOrEmpty(targetPath))\n+                    {\n+                        AssignedFiles[i].SetMetadata(ItemMetadataNames.targetPath, EscapingUtilities.Escape(targetPath));",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is backwards from the way this is normally expressed (functionally it's the same, though I think the failure messages will be more accurate with it switched).\r\n\r\n```suggestion\r\n            t.AssignedFiles[0].GetMetadata(\"TargetPath\").ShouldBe(targetPath);\r\n```",
              "createdAt": "2021-04-01T02:46:23Z",
              "path": "src/Tasks.UnitTests/AssignTargetPath_Tests.cs",
              "diffHunk": "@@ -84,14 +75,69 @@ public void InConeButAbsolute()\n                           };\n             t.RootFolder = NativeMethodsShared.IsWindows ? @\"c:\\f1\\f2\" : \"/f1/f2\";\n \n-            bool success = t.Execute();\n+            t.Execute().ShouldBeTrue();\n+            t.AssignedFiles.Length.ShouldBe(1);\n+            t.AssignedFiles[0].GetMetadata(\"TargetPath\").ShouldBe(NativeMethodsShared.IsWindows ? @\"f3\\f4\\file.txt\" : \"f3/f4/file.txt\");\n+        }\n+\n+        [Theory]\n+        [InlineData(\"c:/fully/qualified/path.txt\")]\n+        [InlineData(\"test/output/file.txt\")]\n+        [InlineData(@\"some\\dir\\to\\file.txt\")]\n+        [InlineData(\"file.txt\")]\n+        [InlineData(\"file\")]\n+        public void TargetPathAlreadySet(string targetPath)\n+        {\n+            AssignTargetPath t = new AssignTargetPath();\n+            t.BuildEngine = new MockEngine();\n+            Dictionary<string, string> metaData = new Dictionary<string, string>();\n+            metaData.Add(\"TargetPath\", targetPath);\n+            metaData.Add(\"Link\", \"c:/foo/bar\");\n+            t.Files = new ITaskItem[]\n+                          {\n+                              new TaskItem(\n+                                  itemSpec: NativeMethodsShared.IsWindows ? @\"c:\\f1\\f2\\file.txt\" : \"/f1/f2/file.txt\",\n+                                  itemMetadata: metaData)\n+                          };\n+            t.RootFolder = NativeMethodsShared.IsWindows ? @\"c:\\f1\\f2\" : \"/f1/f2\";\n+\n+            t.Execute().ShouldBeTrue();\n+            t.AssignedFiles.Length.ShouldBe(1);\n+            targetPath.ShouldBe(t.AssignedFiles[0].GetMetadata(\"TargetPath\"));",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      }
    ]
  }
}