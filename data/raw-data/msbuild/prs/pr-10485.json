{
  "number": 10485,
  "title": "Add initial scoping implementation",
  "body": "Contributes to #10469\r\n\r\n### Context\r\nThis is a V1 simplistic implementation of BuildChecks evaluation scoping.\r\nThe description of the idea was addedd to the the design PR: https://github.com/dotnet/msbuild/pull/10139/files#diff-c490522e63a226575c540f316cf74f081452a701f25f46093e1781aef22a17adR49-R57\r\n\r\n### Changes Made\r\n * FileClassifier recognizes nuget cache\r\n * FileClassifier is now responsible to know which properties conatin immutable locations (so that we can set them from EventArgs as well)\r\n * BuildCheck makes sure to initialize FileClassifier if SchedulerNode doesn have an implicit in-proc WorkerNode\r\n * FileClassifier is being leveraged to perform the classificaion\r\n\r\n\r\n### Testing\r\n\r\nExisting tests\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-06T10:41:19Z",
  "updatedAt": "2024-08-07T10:33:33Z",
  "closedAt": "2024-08-07T10:33:33Z",
  "mergedAt": "2024-08-07T10:33:33Z",
  "additions": 315,
  "deletions": 89,
  "changedFiles": 13,
  "headRefName": "proto/scoping",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c6b2fa2956f91ee4fedad58c63b075ebdaf9e957",
          "message": "Add initial scoping implementation",
          "committedDate": "2024-08-06T10:37:58Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "09ee9166e8a00d5df7d5a49f52b39248ed14b0bb",
          "message": "Fix test",
          "committedDate": "2024-08-07T09:05:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b94e69904c29851ce32acde2d3447b79dd11467c",
          "message": "Fix the configuration",
          "committedDate": "2024-08-07T09:09:42Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "196c04c0bae52a23b4b66674b714c793a62bc73e",
          "message": "Add suppressions for API changes",
          "committedDate": "2024-08-07T09:46:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why both options are supported and why don't we pick the uniform style for the parameter?  ",
              "createdAt": "2024-08-07T08:03:06Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -84,14 +84,13 @@ internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? co\n \n         switch (stringValue)\n         {\n-            case \"project\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n-            case \"current_imports\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n-            case \"without_sdks\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"projectfile\":\n+            case \"project_file\":",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "This is a good point.\r\n\r\nI thought both (\"Project file\" and \"Projectfile\") are correct in English. It turns out that likely just the first one. I'm adjusting the documentation - we should support only `\"project_file\"`.\r\nI'm keeping the `projectfile` in code to grace handle misstypes by ppl misslead similarly like me.\r\n\r\n\r\n",
              "createdAt": "2024-08-07T09:12:11Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -84,14 +84,13 @@ internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? co\n \n         switch (stringValue)\n         {\n-            case \"project\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n-            case \"current_imports\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n-            case \"without_sdks\":\n-                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"projectfile\":\n+            case \"project_file\":",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Good catch here!  \r\nNow, I am not sure how this will work with msbuild server node though? Will this run on msbuild server node that has no execution nodes (if this scenario is at all supported, because it is pointless, I do not remember this detail). ",
              "createdAt": "2024-08-07T08:15:33Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -337,8 +337,24 @@ private void SetupAnalyzersForNewProject(string projectFullPath, IAnalysisContex\n         public void ProcessEvaluationFinishedEventArgs(\n             IAnalysisContext analysisContext,\n             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)\n-            => _buildEventsProcessor\n-                .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);\n+        {\n+            Dictionary<string, string>? propertiesLookup = null;\n+            // The FileClassifier is normally initialized by executing build requests.\n+            // However, if we are running in a main node that has no execution nodes - we need to initialize it here (from events).",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "So up till now we needed FileClassifier only as part of the build execution - so on nodes that can execute requests. In case of MSBuild Server - if the main node (the 'server') had in-proc worker node - it already had the classifier instantiated, if it didn't have in-proc node - then classifier was not needed.\r\nSo luckily - no problem nor no impact for MSBuild Server. But good question indeed.",
              "createdAt": "2024-08-07T09:05:12Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -337,8 +337,24 @@ private void SetupAnalyzersForNewProject(string projectFullPath, IAnalysisContex\n         public void ProcessEvaluationFinishedEventArgs(\n             IAnalysisContext analysisContext,\n             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)\n-            => _buildEventsProcessor\n-                .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);\n+        {\n+            Dictionary<string, string>? propertiesLookup = null;\n+            // The FileClassifier is normally initialized by executing build requests.\n+            // However, if we are running in a main node that has no execution nodes - we need to initialize it here (from events).",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I am not worried whether msbuild server is covered with FileClassifier. I am worried about analyzers. FileClassifier is needed for main non-server node without in-proc for them. Should it be needed for server main node without in-proc and whether it is covered by this code? The scenario is weird - there is no reason to do that, but I am not sure it is prohibited. Also, there is a question of whether we tried analyzers with server feature and whether it works. ",
              "createdAt": "2024-08-07T09:42:24Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -337,8 +337,24 @@ private void SetupAnalyzersForNewProject(string projectFullPath, IAnalysisContex\n         public void ProcessEvaluationFinishedEventArgs(\n             IAnalysisContext analysisContext,\n             ProjectEvaluationFinishedEventArgs evaluationFinishedEventArgs)\n-            => _buildEventsProcessor\n-                .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);\n+        {\n+            Dictionary<string, string>? propertiesLookup = null;\n+            // The FileClassifier is normally initialized by executing build requests.\n+            // However, if we are running in a main node that has no execution nodes - we need to initialize it here (from events).",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}