{
  "number": 10361,
  "title": "Update configuration parsing logic",
  "body": "Closes #10232, Fixes: #10315\r\n\r\n### Context\r\nCurrent implementation of the configuration closely connected to the naming of the Enum and its values. \r\nFor instance, in order to configure the EvaluationAnalysisScope of the BuilcCheck with the behavior ProjectOnly the `.editorconfig` file will look like that:\r\n```ini\r\n[*.csproj]\r\nbuild_check.rule_id.EvaluationAnalysisScope = ProjectOnly \r\n```\r\n\r\nwhich makes it impossible to set the configuration name and values different from the classes names, hence complicates the configuration time from user perspective. \r\n\r\n### Changes Made\r\n\r\n- Decoupled the BuildCheck behaviour configuration values from the EditorConfig configuration options. Now it is possible to make `many to 1` mapping between the editorconfig and the value if needed:\r\n```mermaid\r\ngraph LR\r\nscope.editor_configuration_1 --> BuildCheckBehaviourValue\r\nscope.editor_configuration_2--> BuildCheckBehaviourValue\r\n```\r\n\r\n- Updated documentation with replacing the CamelCase configuration to snake_case ([documentation preview mode](https://github.com/f-alizada/msbuild/blob/dev/f-alizada/update-configuration/documentation/specs/proposed/BuildCheck.md#sample-configuration))\r\n- Updated the configuration values of EvaluationAnalysisScope\r\n\r\n### Testing\r\n- Manual sanity check 1 test \r\n- Current test coverage of the build check\r\n- Updated the configuration test to reflect the changes of the evaluation scope configuration name",
  "state": "MERGED",
  "createdAt": "2024-07-12T11:31:36Z",
  "updatedAt": "2024-07-24T10:47:44Z",
  "closedAt": "2024-07-24T10:47:44Z",
  "mergedAt": "2024-07-24T10:47:44Z",
  "additions": 127,
  "deletions": 52,
  "changedFiles": 6,
  "headRefName": "dev/f-alizada/update-configuration",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b322c45fd553b939e6eddd45dac7a6bac1fc6c03",
          "message": "Update configuration parsing logic",
          "committedDate": "2024-07-12T10:28:04Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "680e1c9b71bb4c19fded5aa1674a559886d57b95",
          "message": "Merge branch 'main' into dev/f-alizada/update-configuration",
          "committedDate": "2024-07-13T09:20:23Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2af16118a65579b63443db5ac60520a3c65d2ceb",
          "message": "Update the documentation with presented option values",
          "committedDate": "2024-07-13T09:56:57Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c67aaf2fdb6a809c267f5ae1797b0eaa86ed0e81",
          "message": "Word update",
          "committedDate": "2024-07-13T10:35:28Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "119984376d133bb5f96c1ec20338d03a2a067f30",
          "message": "Merge branch 'main' into dev/f-alizada/update-configuration",
          "committedDate": "2024-07-22T07:30:28Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2adbea1e7a0bceb1def0a1a65aa4f23eb09a1415",
          "message": "Merge branch 'main' into dev/f-alizada/update-configuration",
          "committedDate": "2024-07-22T09:13:12Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5de03c06e590d2ee253905f77769e2e71528c620",
          "message": "Merge branch 'main' into dev/f-alizada/update-configuration",
          "committedDate": "2024-07-23T07:03:46Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "104755925+f-alizada@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7900fdb6b5b263e1e182062183c662ba724c32a",
          "message": "Merge branch 'main' into dev/f-alizada/update-configuration",
          "committedDate": "2024-07-24T08:59:59Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "104755925+f-alizada@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is something that yet to be defined: the scope values and the configuration values could  change in the future. \r\n",
              "createdAt": "2024-07-12T11:36:04Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "@rainersigwald @baronfel Could you please review the update of the configuration of the evaluation scope? \r\n\r\nAnother option is: to leave the snake_case values of the evaluation scope `project_only` and update the configuration options once the scope will be changed (in case there will be any changes)  ",
              "createdAt": "2024-07-13T10:43:15Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "@rainersigwald one thing I mentioned to @f-alizada was perhaps a different way of modelling the scopes that's parallel to the NuGet Asset concept. Instead of bespoke scopes like `ProjectOnly`, `ProjectWithImportsFromCurrentWorkTree`, etc. we'd have something more like a `Flags`-style enum, with values like\r\n\r\n```cs\r\n[Flags]\r\nenum ImportScope \r\n{\r\n  Project,\r\n  WorkingDirectory\r\n  MSBuildSDKs\r\n  All = 1 <<<< a billion // catch-all for all flags or whatever\r\n}\r\n```\r\n\r\nthat could then be composed/declared by users in config via a comma-separated list: `project,working_dir`.\r\n\r\nThoughts on this?",
              "createdAt": "2024-07-19T14:06:38Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Thank you @baronfel, since the evaluation scope parameter and option is not finalized yet, this PR mostly focuses on changing the process of parsing, and decoupling the values defined in the code from the configure options. \r\nCurrently there is no effect how we configure the evaluation scope. \r\nOverall I do agree with Flags, and the change could be done here If agreed. ",
              "createdAt": "2024-07-19T15:05:38Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "gotcha - yes parsing could and should be decoupled from the actual values used in the code. if we don't do that then we lose the ability to rename without impacting end-user code!",
              "createdAt": "2024-07-19T15:07:21Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Per discssion. \r\nThe updates of the Scope values will be updated once the definition of scopes will be defined. \r\nResolving the comment, thank you for the input! ",
              "createdAt": "2024-07-23T07:02:29Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did we get rid of the `Enum.TryParse` here?\r\nIt feels as more conscise, expressive and less error prone.",
              "createdAt": "2024-07-19T10:18:03Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:\n+                ThrowIncorrectValueException(BuildCheckConstants.scopeConfigurationKey, stringValue);\n+                break;\n+        }\n+\n+        return null;\n     }\n \n-    private static bool TryExtractValue<T>(string key, Dictionary<string, string>? config, out T value) where T : struct, Enum\n+    private static BuildAnalyzerResultSeverity? TryExtractSeverity(Dictionary<string, string>? config)\n     {\n-        value = default;\n+        if (!TryExtractValue(BuildCheckConstants.severityConfigurationKey, config, out string? stringValue) || stringValue is null)\n+        {\n+            return null;\n+        }\n \n-        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)\n+        switch (stringValue)\n         {\n-            return false;\n+            case \"none\":\n+                return BuildAnalyzerResultSeverity.None;\n+            case \"default\":\n+                return BuildAnalyzerResultSeverity.Default;\n+            case \"suggestion\":\n+                return BuildAnalyzerResultSeverity.Suggestion;\n+            case \"warning\":\n+                return BuildAnalyzerResultSeverity.Warning;\n+            case \"error\":\n+                return BuildAnalyzerResultSeverity.Error;\n+            default:\n+                ThrowIncorrectValueException(BuildCheckConstants.severityConfigurationKey, stringValue);\n+                break;\n         }\n \n-        var isParsed = Enum.TryParse(stringValue, true, out value);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "My approach here was: \r\n- To keep the parsing logic consistent \r\n- More easy to ready the method\r\n\r\nAdditionally thanks to the comment review, I have checked the performance of two methods: \r\n\r\n| Method    | Mean      | Error     | StdDev    |\r\n|---------- |----------:|----------:|----------:|\r\n| GetValue2 |  5.072 ns | 0.2519 ns | 0.7427 ns |\r\n| GetValue  | 31.983 ns | 2.8579 ns | 8.4265 ns |\r\n\r\n\r\nWhere `GetValue2` used `switch` and `GetValue` - `TryParse`. \r\nhttps://gist.github.com/f-alizada/f5e03b76bcfd814746067661758fe93d",
              "createdAt": "2024-07-19T11:59:05Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -64,32 +65,78 @@ public class BuildAnalyzerConfiguration\n     /// </summary>\n     /// <param name=\"configDictionary\">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>\n     /// <returns>A new instance of <see cref=\"BuildAnalyzerConfiguration\"/> with the specified settings.</returns>\n-    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)\n+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary) => new()\n     {\n-        return new()\n+        EvaluationAnalysisScope = TryExtractEvaluationAnalysisScope(configDictionary),\n+        Severity = TryExtractSeverity(configDictionary),\n+    };\n+\n+\n+    private static EvaluationAnalysisScope? TryExtractEvaluationAnalysisScope(Dictionary<string, string>? config)\n+    {\n+\n+        if (!TryExtractValue(BuildCheckConstants.scopeConfigurationKey, config, out string? stringValue) || stringValue is null)\n         {\n-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,\n-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null\n-        };\n+            return null;\n+        }\n+\n+        switch (stringValue)\n+        {\n+            case \"project\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectOnly;\n+            case \"current_imports\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsFromCurrentWorkTree;\n+            case \"without_sdks\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithImportsWithoutSdks;\n+            case \"all\":\n+                return BuildCheck.EvaluationAnalysisScope.ProjectWithAllImports;\n+            default:\n+                ThrowIncorrectValueException(BuildCheckConstants.scopeConfigurationKey, stringValue);\n+                break;\n+        }\n+\n+        return null;\n     }\n \n-    private static bool TryExtractValue<T>(string key, Dictionary<string, string>? config, out T value) where T : struct, Enum\n+    private static BuildAnalyzerResultSeverity? TryExtractSeverity(Dictionary<string, string>? config)\n     {\n-        value = default;\n+        if (!TryExtractValue(BuildCheckConstants.severityConfigurationKey, config, out string? stringValue) || stringValue is null)\n+        {\n+            return null;\n+        }\n \n-        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)\n+        switch (stringValue)\n         {\n-            return false;\n+            case \"none\":\n+                return BuildAnalyzerResultSeverity.None;\n+            case \"default\":\n+                return BuildAnalyzerResultSeverity.Default;\n+            case \"suggestion\":\n+                return BuildAnalyzerResultSeverity.Suggestion;\n+            case \"warning\":\n+                return BuildAnalyzerResultSeverity.Warning;\n+            case \"error\":\n+                return BuildAnalyzerResultSeverity.Error;\n+            default:\n+                ThrowIncorrectValueException(BuildCheckConstants.severityConfigurationKey, stringValue);\n+                break;\n         }\n \n-        var isParsed = Enum.TryParse(stringValue, true, out value);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}