{
  "number": 9424,
  "title": "Fix missed errors appearance on restore",
  "body": "Fixes #9082\r\n\r\n### Context\r\nErrors can be missed from the output if these are not associated with the tracked projects.\r\nBut this category of messages must be reported to the customers in any case.\r\n\r\n### Changes Made\r\nDisplay non-associated errors.\r\n\r\n### Testing\r\nManual\r\n\r\n### Notes\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/6f94b1bd-5796-4c59-a4e0-e1d563569eee)\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-15T15:55:39Z",
  "updatedAt": "2023-11-28T10:46:08Z",
  "closedAt": "2023-11-28T10:46:07Z",
  "mergedAt": "2023-11-28T10:46:07Z",
  "additions": 73,
  "deletions": 16,
  "changedFiles": 8,
  "headRefName": "YuliiaKovalovadev/ykovalova/fix_errors_apperance_on_restore_",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "92bcbe7d5b22927fb89d70bbb8aa1a48beb5eea9",
          "message": "add dispaying error messages not assosiated with tracked projects",
          "committedDate": "2023-11-15T15:55:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75eb26971ac8b93fec1a8b0364ad6cc747fb65e2",
          "message": "add tests coverage + fix review comments",
          "committedDate": "2023-11-27T09:30:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5fc437e81365ac1fc002647d489515942e8033e9",
          "message": "fix test data",
          "committedDate": "2023-11-27T10:07:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4847e072a39384003a2e66826c78c21611f8e8ab",
          "message": "fix test output for macos",
          "committedDate": "2023-11-27T10:47:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb408e510cba99a4bc83ad609998de20201c440b",
          "message": "cleanup",
          "committedDate": "2023-11-28T09:11:58Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I've left a few comments inline. Additionally I'd like to ask if adding this logic to `ErrorRaised` but not to `WarningRaised` is intentional. Even if restore didn't produce any warnings, I feel like we should behave consistently between the two for future-proofing.\r\n\r\nI was discussing this implementation with @rainersigwald, but probably I didn't get him right.\r\nLet's wait for his input.",
        "createdAt": "2023-11-16T13:38:39Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Oh and please add a Verify test of a project that fails during Restore.",
        "createdAt": "2023-11-16T16:51:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Empty lines and comments between `}` and `else` hurt readability. Consider moving the comment inside the `else` block.",
              "createdAt": "2023-11-16T13:12:03Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);\n+        }\n+\n+        // It is necessary to display error messages reported by MSBuild, even if it's not tracked in _projects collection.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This statement makes us print something like `failed with errors` at the end of the build (end of restore). If we print the error as an immediate message, we lose this information and the final output doesn't mention errors. Is this acceptable?",
              "createdAt": "2023-11-16T13:22:54Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "the failed message is presented , because it happens during restore phase \r\n![image](https://github.com/dotnet/msbuild/assets/95473390/cce2a172-ad94-4025-a1b4-81a563c8f472)\r\n",
              "createdAt": "2023-11-16T13:37:12Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Correct, I am specifically interested in `failed` vs. `failed with errors`, as determined here: https://github.com/dotnet/msbuild/blob/85d842283030ac4f55511fe614fa5429f406c9d9/src/MSBuild/TerminalLogger/TerminalLogger.cs#L873-L878\r\n\r\nIf the build prints an error, I think the intended output would be `Restore failed with errors`.",
              "createdAt": "2023-11-16T14:14:54Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Looks like you could set `_buildHasErrors` in this block to fix this (and I think that's worth doing).",
              "createdAt": "2023-11-16T16:49:35Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should the message be printed in red color since we know it's an error?",
              "createdAt": "2023-11-16T13:24:05Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);\n+        }\n+\n+        // It is necessary to display error messages reported by MSBuild, even if it's not tracked in _projects collection.\n+        else\n+        {\n+            RenderImmediateMessage(message);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh I see the error code is colorized. All good!",
              "createdAt": "2023-11-16T13:30:41Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)\n+        {\n+            project!.AddBuildMessage(MessageSeverity.Error, message);\n+        }\n+\n+        // It is necessary to display error messages reported by MSBuild, even if it's not tracked in _projects collection.\n+        else\n+        {\n+            RenderImmediateMessage(message);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shouldn't it always have the project, if the error message itself does? Doesn't seem restricted to the tracked project entry points.",
              "createdAt": "2023-11-16T16:41:51Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -635,28 +635,38 @@ private bool IsImmediateMessage(string message)\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+\n+                // for the tracked projects the project file name is included in the final output result.\n+                projectFile: isTrackedProject ? null : e.ProjectFile ?? string.Empty,",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's with the changes here? Do we need them?",
              "createdAt": "2023-11-27T18:58:10Z",
              "path": "src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj",
              "diffHunk": "",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "IIRC this makes the verified files _nest_ under their parent file in VS, so it's a nice thing to do. But it's not required IMO.",
              "createdAt": "2023-11-27T19:06:23Z",
              "path": "src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj",
              "diffHunk": "",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "OMG, I haven't noticed these changes, removed",
              "createdAt": "2023-11-28T09:07:53Z",
              "path": "src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj",
              "diffHunk": "",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <None Update=\"Snapshots\\*.verified.txt\">\r\n```\r\n\r\nTo make it apply to all verified files with only one `<None Update` ?",
              "createdAt": "2023-11-28T06:54:20Z",
              "path": "src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj",
              "diffHunk": "@@ -75,4 +75,22 @@\n     <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />\n   </ItemGroup>\n \n+  <ItemGroup>\n+    <None Update=\"Snapshots\\TerminalLogger_Tests.PrintRestore_Failed.Linux.verified.txt\">",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n        if (project is not null)\r\n```\r\n\r\nis equivalent and eliminates the `!`. ",
              "createdAt": "2023-11-28T06:58:59Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -621,42 +630,48 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n     /// </summary>\n     /// <param name=\"message\">Raised event.</param>\n     /// <returns>true if marker is detected.</returns>\n-    private bool IsImmediateMessage(string message)\n-    {\n+    private bool IsImmediateMessage(string message) =>\n #if NET7_0_OR_GREATER\n-        return ImmediateMessageRegex().IsMatch(message);\n+        ImmediateMessageRegex().IsMatch(message);\n #else\n-        return _immediateMessageKeywords.Any(imk => message.IndexOf(imk, StringComparison.OrdinalIgnoreCase) >= 0);\n+        _immediateMessageKeywords.Any(imk => message.IndexOf(imk, StringComparison.OrdinalIgnoreCase) >= 0);\n #endif\n-    }\n \n     /// <summary>\n     /// The <see cref=\"IEventSource.ErrorRaised\"/> callback.\n     /// </summary>\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n-        var buildEventContext = e.BuildEventContext;\n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n-        {\n-            string message = EventArgsFormatting.FormatEventMessage(\n+        BuildEventContext? buildEventContext = e.BuildEventContext;\n+        Project? project = null;\n+        bool isTrackedProject = buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out project);\n+        string message = EventArgsFormatting.FormatEventMessage(\n                 category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n                 subcategory: e.Subcategory,\n                 message: e.Message,\n                 code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n                 file: HighlightFileName(e.File),\n-                projectFile: null,\n+                projectFile: e.ProjectFile ?? null,\n                 lineNumber: e.LineNumber,\n                 endLineNumber: e.EndLineNumber,\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber,\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+        if (isTrackedProject)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}