{
  "number": 5391,
  "title": "Adding condition for default TargetPlatform properties",
  "body": "Adding a condition for setting default TargetPlatform properties. `_EnableDefaultWindowsPlatform` will be set from the SDK in a separate PR",
  "state": "MERGED",
  "createdAt": "2020-06-02T17:23:59Z",
  "updatedAt": "2021-08-24T09:36:49Z",
  "closedAt": "2020-06-10T16:05:14Z",
  "mergedAt": "2020-06-10T16:05:14Z",
  "additions": 2,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "DefaultTargetPlatform",
  "isDraft": false,
  "author": {
    "login": "sfoslund"
  },
  "milestone": {
    "title": "MSBuild 16.7 Preview 4"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "244a220a9372f3b8c047283b3c93a5460eb15cbc",
          "message": "Adding condition for default TargetPlatform properties",
          "committedDate": "2020-06-02T16:31:54Z",
          "author": {
            "name": "Sarah Oslund",
            "email": "sfoslund@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I'd also be interested in hearing if @rainersigwald has a better suggestion for the name than `_EnableDefaultWindowsPlatform`.",
        "createdAt": "2020-06-02T20:26:14Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I think you could drop the underscore and make this \"public\", but I don't feel super strongly about it. My biggest concern is unintended consequences. Can you diff the evaluated properties with and without this set (and no other changes) and see if there are any interesting knock-on effects?",
        "createdAt": "2020-06-03T20:50:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald sure, here's the diff when building a console app:\r\n\r\n\r\n**With defaults:**\r\n```\r\nTargetPlatformDisplayName = Windows 7.0\r\nTargetPlatformIdentifier = Windows \r\nTargetPlatformMoniker = Windows,Version=7.0 \r\nTargetPlatformRegistryBase = Software\\Microsoft\\Microsoft SDKs\\Windows\r\nTargetPlatformVersion = 7.0\r\n```\r\n\r\n\r\n**Without defaults (`_EnableDefaultWindowsPlatform` set to false):**\r\n```\r\nTargetPlatformDisplayName =\r\nTargetPlatformMoniker = ,Version=\r\nTargetPlatformRegistryBase = Software\\Microsoft\\Microsoft SDKs\\\r\n```\r\n`ProjectCapability` item group does not contain `BuildWindowsDesktopTarget`",
        "createdAt": "2020-06-03T22:44:57Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "@dsplaisted do you have strong feelings on dropping or keeping the underscore?",
        "createdAt": "2020-06-04T16:25:35Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "> @dsplaisted do you have strong feelings on dropping or keeping the underscore?\r\n\r\nNo, I don't feel strongly.  Personally, I would keep it.",
        "createdAt": "2020-06-04T17:14:44Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@sfoslund @rainersigwald @zivkan\r\n\r\nThe `TargetPlatformMoniker` should not be set when Id or version is empty. The empty `,Version=` causes failure during build and/or restore in a heavily customised build.\r\n\r\nI have recently encountered both NuGet/Home#10423 and `invalid platform version`...\r\n\r\n```log\r\nD:\\Projects\\Work\\MSBuild\\BuildTasks\r\n> msbuild -v:m BuildTasks.sln\r\n  Determining projects to restore...\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(131,5): error : Invalid platform version '.0'. [D:\\Projects\\Work\\MSBuild\\BuildTasks\\BuildTasks.sln]\r\n```\r\n\r\nThe code paths that are affected by this empty moniker value are in NuGet's parsing logic...\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/8b3be1734d595aa591557ab710cad5c4ce661810/src/NuGet.Core/NuGet.Frameworks/NuGetFrameworkFactory.cs#L225-L231\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/8b3be1734d595aa591557ab710cad5c4ce661810/src/NuGet.Core/NuGet.Frameworks/NuGetFrameworkFactory.cs#L266-L272\r\n\r\n**Either we should fix the parsing logic to account for empty versions or we should make sure `TPV` and `TFV` shouldn't be empty.**\r\n\r\nI can do a PR but I need consensus from the MSBuild/NuGet/SDK teams.",
        "createdAt": "2021-08-05T13:19:10Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Sorry for replying to a one year old PR but what was the reasoning for adding a default TargetPlatformIdentifier i.e. to netstandard2.0?",
        "createdAt": "2021-08-24T09:36:49Z",
        "author": {
          "login": "ViktorHofer"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Will `GetPlatformSDKLocation` and `GetPlatformSDKDisplayName` (on line 100) handle empty parameters correctly?  Did you do a smoke test that you can still build .NET core projects with these changes and `_EnableDefaultWindowsPlatform` set to false?",
              "createdAt": "2020-06-02T20:22:19Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -86,8 +86,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </PropertyGroup>\n \n   <PropertyGroup>\n-    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == ''\">Windows</TargetPlatformIdentifier>\n-    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == ''\">7.0</TargetPlatformVersion>\n+    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">Windows</TargetPlatformIdentifier>\n+    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">7.0</TargetPlatformVersion>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformSdkRootOverride)' != ''\">$(TargetPlatformSdkRootOverride)\\</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformIdentifier)' == 'Windows' and '$(OS)' == 'Windows_NT' and '$(MSBuildRuntimeType)' != 'Core'\">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v$(TargetPlatformVersion)', InstallationFolder, null, RegistryView.Registry32, RegistryView.Default))</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "We may want/need to disable setting `UseOSWinMdReferences` on line 97.  We won't be using WinMDs at all on .NET Core.",
              "createdAt": "2020-06-02T20:24:28Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -86,8 +86,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </PropertyGroup>\n \n   <PropertyGroup>\n-    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == ''\">Windows</TargetPlatformIdentifier>\n-    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == ''\">7.0</TargetPlatformVersion>\n+    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">Windows</TargetPlatformIdentifier>\n+    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">7.0</TargetPlatformVersion>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformSdkRootOverride)' != ''\">$(TargetPlatformSdkRootOverride)\\</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformIdentifier)' == 'Windows' and '$(OS)' == 'Windows_NT' and '$(MSBuildRuntimeType)' != 'Core'\">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v$(TargetPlatformVersion)', InstallationFolder, null, RegistryView.Registry32, RegistryView.Default))</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "Yes, `TargetPlatformDisplayName` just defaults to an empty string and I'm able to build a .NET core console app. \r\n\r\nWould you suggest using the same property (`_EnableDefaultWindowsPlatform`) to disable `UseOSWinMdReferences`?",
              "createdAt": "2020-06-02T22:01:32Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -86,8 +86,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </PropertyGroup>\n \n   <PropertyGroup>\n-    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == ''\">Windows</TargetPlatformIdentifier>\n-    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == ''\">7.0</TargetPlatformVersion>\n+    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">Windows</TargetPlatformIdentifier>\n+    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">7.0</TargetPlatformVersion>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformSdkRootOverride)' != ''\">$(TargetPlatformSdkRootOverride)\\</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformIdentifier)' == 'Windows' and '$(OS)' == 'Windows_NT' and '$(MSBuildRuntimeType)' != 'Core'\">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v$(TargetPlatformVersion)', InstallationFolder, null, RegistryView.Registry32, RegistryView.Default))</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>",
              "author": {
                "login": "sfoslund"
              }
            },
            {
              "body": "Actually, I think we should probably just set `UseOSWinMdReferences` to false in the .NET SDK (possibly conditioned on .NET 5 or higher).",
              "createdAt": "2020-06-02T22:10:32Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -86,8 +86,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </PropertyGroup>\n \n   <PropertyGroup>\n-    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == ''\">Windows</TargetPlatformIdentifier>\n-    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == ''\">7.0</TargetPlatformVersion>\n+    <TargetPlatformIdentifier Condition=\"'$(TargetPlatformIdentifier)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">Windows</TargetPlatformIdentifier>\n+    <TargetPlatformVersion Condition=\"'$(TargetPlatformVersion)' == '' and '$(_EnableDefaultWindowsPlatform)' != 'false'\">7.0</TargetPlatformVersion>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformSdkRootOverride)' != ''\">$(TargetPlatformSdkRootOverride)\\</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == '' and '$(TargetPlatformIdentifier)' == 'Windows' and '$(OS)' == 'Windows_NT' and '$(MSBuildRuntimeType)' != 'Core'\">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Microsoft SDKs\\Windows\\v$(TargetPlatformVersion)', InstallationFolder, null, RegistryView.Registry32, RegistryView.Default))</TargetPlatformSdkPath>\n     <TargetPlatformSdkPath Condition=\"'$(TargetPlatformSdkPath)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      }
    ]
  }
}