{
  "number": 8340,
  "title": "Fix .NET 3.5 InternableString.GetHashCode to match the full implementation",
  "body": "Fixes part of 8329\r\n\r\n### Context\r\n\r\nThe 3.5 version of `InternableString` uses a simpler hash code calculation, the results of which were not matching the 4.72/Core version. This manifested as a failing unit test `RetainsLastStringWithGivenHashCode` in VS.\r\n\r\n### Changes Made\r\n\r\nMade the routine return the same numbers as the other implementation. It fixed the UT and also made the hash code \"better\" as previously we were shifting instead of rotating bits.\r\n\r\n### Testing\r\n\r\nExisting unit tests (previously failing).\r\n\r\n### Notes\r\n\r\nIt would be nice to figure out how to run 3.5 tests in CI.\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-23T15:48:22Z",
  "updatedAt": "2023-02-06T02:10:42Z",
  "closedAt": "2023-02-06T02:10:42Z",
  "mergedAt": "2023-02-06T02:10:42Z",
  "additions": 26,
  "deletions": 10,
  "changedFiles": 1,
  "headRefName": "fix-netfx32-hash",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5b681e9d098c518799055660ad4368bdd822c9b0",
          "message": "Fix .NET 3.5 InternableString.GetHashCode to match the full implementation",
          "committedDate": "2023-01-23T15:25:18Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97c7458bb5040f023ba7fe9bafe10d4068c13413",
          "message": "Delete bad comment",
          "committedDate": "2023-01-23T17:10:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f27a1f5c894606868bb974f736086587bc9bbf8e",
          "message": "Back out a test change (clown)",
          "committedDate": "2023-01-24T07:35:47Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this inlined? I'd imagine a method call for every character could add significant overhead ",
              "createdAt": "2023-01-23T16:28:58Z",
              "path": "src/StringTools/InternableString.Simple.cs",
              "diffHunk": "@@ -200,29 +200,47 @@ public override unsafe string ToString()\n         /// <returns>A stable hashcode of the string represented by this instance.</returns>\n         public override int GetHashCode()\n         {\n-            int hashCode = 5381;\n+            uint hash = (5381 << 16) + 5381;\n+            bool isOddIndex = false;\n \n             if (_firstString != null)\n             {\n                 foreach (char ch in _firstString)\n                 {\n-                    unchecked\n-                    {\n-                        hashCode = hashCode * 33 ^ ch;\n-                    }\n+                    hash = HashOneCharacter(hash, ch, isOddIndex);\n+                    isOddIndex = !isOddIndex;\n                 }\n             }\n             else if (_builder != null)\n             {\n                 for (int i = 0; i < _builder.Length; i++)\n                 {\n-                    unchecked\n-                    {\n-                        hashCode = hashCode * 33 ^ _builder[i];\n-                    }\n+                    hash = HashOneCharacter(hash, _builder[i], isOddIndex);\n+                    isOddIndex = !isOddIndex;\n                 }\n             }\n-            return hashCode;\n+            return (int)hash;\n+        }\n+\n+        /// <summary>\n+        /// A helper to hash one character.\n+        /// </summary>\n+        /// <param name=\"hash\">The running hash code.</param>\n+        /// <param name=\"ch\">The character to hash.</param>\n+        /// <param name=\"isOddIndex\">True if the index of the character in the string is odd.</param>\n+        /// <returns></returns>\n+        private static uint HashOneCharacter(uint hash, char ch, bool isOddIndex)",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Yes, I just checked, it's inlined by 3.5 JIT. It doesn't recognize the bit-rotate pattern, though, I'll delete the comment.\r\n\r\n```\r\n05010538 8bc6            mov     eax,esi\r\n0501053a c1e005          shl     eax,5\r\n0501053d 8bd6            mov     edx,esi\r\n0501053f c1ea1b          shr     edx,1Bh\r\n05010542 0bc2            or      eax,edx\r\n05010544 03c6            add     eax,esi\r\n05010546 33c1            xor     eax,ecx\r\n```",
              "createdAt": "2023-01-23T17:09:49Z",
              "path": "src/StringTools/InternableString.Simple.cs",
              "diffHunk": "@@ -200,29 +200,47 @@ public override unsafe string ToString()\n         /// <returns>A stable hashcode of the string represented by this instance.</returns>\n         public override int GetHashCode()\n         {\n-            int hashCode = 5381;\n+            uint hash = (5381 << 16) + 5381;\n+            bool isOddIndex = false;\n \n             if (_firstString != null)\n             {\n                 foreach (char ch in _firstString)\n                 {\n-                    unchecked\n-                    {\n-                        hashCode = hashCode * 33 ^ ch;\n-                    }\n+                    hash = HashOneCharacter(hash, ch, isOddIndex);\n+                    isOddIndex = !isOddIndex;\n                 }\n             }\n             else if (_builder != null)\n             {\n                 for (int i = 0; i < _builder.Length; i++)\n                 {\n-                    unchecked\n-                    {\n-                        hashCode = hashCode * 33 ^ _builder[i];\n-                    }\n+                    hash = HashOneCharacter(hash, _builder[i], isOddIndex);\n+                    isOddIndex = !isOddIndex;\n                 }\n             }\n-            return hashCode;\n+            return (int)hash;\n+        }\n+\n+        /// <summary>\n+        /// A helper to hash one character.\n+        /// </summary>\n+        /// <param name=\"hash\">The running hash code.</param>\n+        /// <param name=\"ch\">The character to hash.</param>\n+        /// <param name=\"isOddIndex\">True if the index of the character in the string is odd.</param>\n+        /// <returns></returns>\n+        private static uint HashOneCharacter(uint hash, char ch, bool isOddIndex)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}