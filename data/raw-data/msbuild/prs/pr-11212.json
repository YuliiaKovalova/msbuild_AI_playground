{
  "number": 11212,
  "title": " ConcurrentDictionary.Count bypass",
  "body": "profiler was repeatedly complaining about ConcurrentDictionary.Count taking locks too often.\r\nThis PR introduces an approximate counter to remedy that\r\n\r\n### Context\r\n![concurrentDictionary](https://github.com/user-attachments/assets/825fe314-4c65-443e-ba1c-0020347c6837)\r\nConcurrentDictionary.Count locks all its internal locks to have the count accurate and up to date.\r\nHowever we only use the count to check if there is a reason to clean up the cache - e.g. we should be fine with a variable that is almost-in-sync with the .Count, that we can update atomically and then read without locking. \r\nThe increment is atomic, the read is accurate enough and the \"flush cache\" section is already behind a lock.\r\n\r\n\r\n### Changes Made\r\nIntroduced  _count variable that lists the same value as ConcurrentDictionary.Count would.\r\n\r\n\r\n### Testing\r\nNow that I looked at this, we didn't have a test for the scavenge threshold. We only ever tested the .scavenge directly.\r\nDo we want to remedy that or are we fine as is?\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-03T12:25:39Z",
  "updatedAt": "2025-01-13T08:29:11Z",
  "closedAt": "2025-01-13T08:29:09Z",
  "mergedAt": "2025-01-13T08:29:09Z",
  "additions": 13,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "concurrentdictionary-count",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f55c03f36c07e1bcd578b936131f8119f688b36d",
          "message": "profiler was repeatedly complaining about ConcurrentDictionary.Count taking locks too often. This PR introduces an approximate counter to remedy that",
          "committedDate": "2025-01-08T12:33:06Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "e26e2b10768ff401299cd43992f988d6680d1361",
          "message": "Update src/StringTools/WeakStringCache.Concurrent.cs\n\nCo-authored-by: Jan Krivanek <jankrivanek@microsoft.com>",
          "committedDate": "2025-01-08T12:33:06Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "053a431538c2d3771a71b29a8fdffcbc7cde1f18",
          "message": "adding comment based on a review",
          "committedDate": "2025-01-08T12:33:06Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                Interlocked.Increment(ref _count);\r\n```",
              "createdAt": "2025-01-07T13:27:12Z",
              "path": "src/StringTools/WeakStringCache.Concurrent.cs",
              "diffHunk": "@@ -62,11 +63,15 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi\n \n             handle = new StringWeakHandle();\n             handle.SetString(result);\n-            _stringsByHashCode.TryAdd(hashCode, handle);\n+            if (_stringsByHashCode.TryAdd(hashCode, handle))\n+            {\n+                Interlocked.Add(ref _count, 1);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. it seems that it's allowed to concurrently call `GetOrCreateEntry` and `Scavenge` - so it meens it's possible that couple threads add items to the dictionary (line 66), but beefore they managed to increment the counter, the Scavenge call sets the counter to the current number of items in the dict, and only then the adding threads proceed incrementing the counter - so it's artificially higher than it should be.\r\n\r\nIt's probably not a big deal, because it's not a correctness issue, but rather extra work issue. But then it's at least worth comment that clarifis the code is ok with such eventuality.\r\n\r\nIf we would want to prevent such case, then we'd need to add some double checking/locking strategy",
              "createdAt": "2025-01-07T13:33:52Z",
              "path": "src/StringTools/WeakStringCache.Concurrent.cs",
              "diffHunk": "@@ -62,11 +63,15 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi\n \n             handle = new StringWeakHandle();\n             handle.SetString(result);\n-            _stringsByHashCode.TryAdd(hashCode, handle);\n+            if (_stringsByHashCode.TryAdd(hashCode, handle))\n+            {\n+                Interlocked.Add(ref _count, 1);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes, you are indeed correct, there is a possibility to double count while the scavenge is happening. Thank you for pointing that out.\r\nI would argue that in the grand scheme of things it should be negligible enough:\r\nit happens only when scavenge count change happens exactly between\r\n`_stringsByHashCode.TryAdd(hashCode, handle)`\r\nand \r\n`Interlocked.Add(ref _count, 1);`\r\nif I'm not mistaken.\r\nSo it should hopefully be just few hits in the worst case, which should be offset by the gain from not waiting for the lock.",
              "createdAt": "2025-01-07T14:58:55Z",
              "path": "src/StringTools/WeakStringCache.Concurrent.cs",
              "diffHunk": "@@ -62,11 +63,15 @@ public string GetOrCreateEntry(ref InternableString internable, out bool cacheHi\n \n             handle = new StringWeakHandle();\n             handle.SetString(result);\n-            _stringsByHashCode.TryAdd(hashCode, handle);\n+            if (_stringsByHashCode.TryAdd(hashCode, handle))\n+            {\n+                Interlocked.Add(ref _count, 1);",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}