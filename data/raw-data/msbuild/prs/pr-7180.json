{
  "number": 7180,
  "title": "CA1823 Avoid unused private fields",
  "body": "Relates to #7174",
  "state": "MERGED",
  "createdAt": "2021-12-30T02:04:14Z",
  "updatedAt": "2022-01-26T21:45:17Z",
  "closedAt": "2022-01-26T14:44:57Z",
  "mergedAt": "2022-01-26T14:44:57Z",
  "additions": 32,
  "deletions": 94,
  "changedFiles": 14,
  "headRefName": "CA1823",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c8cf0d7984164f8a8a327397d55beaaa472ce5e1",
          "message": "CA1823 Avoid unused private fields",
          "committedDate": "2021-12-30T02:03:33Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d78c96c374949784cf5ee24a2aeabde2076daa7",
          "message": "CA1823 Remove MSBuildExeName from PerfLogTests due to analyzer",
          "committedDate": "2021-12-30T21:32:08Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "024a6d755eecdac93437f2ad27332477a2031036",
          "message": "StackAllocThreshold is only used in the other #if NEVER blocks. So add it to its own block. This way we avoid the Analyzer error and keeps the code logically grouped.",
          "committedDate": "2021-12-30T22:51:15Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d29bf91d41ad8ff46ad37d413ce70e5802916b0",
          "message": "Revert CodeAnalysis.ruleset",
          "committedDate": "2022-01-08T00:28:32Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f945884c8ef8e413df5cb76ae5dc91c42486b4b1",
          "message": "merge master",
          "committedDate": "2022-01-08T00:28:45Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b42f675ac0d015dcdbb2ab9153b8be8bbe489cf",
          "message": "enable warning on CA1823",
          "committedDate": "2022-01-08T00:29:10Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "956e47c567e024259636da1c034c1c14972e40e2",
          "message": "Fix remaining occurrences of CA1823 violations",
          "committedDate": "2022-01-08T00:59:27Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d848f994f6c7830449a32d3d3d186cd4a9d406f",
          "message": "Fix remaining occurrences of CA1823 violations",
          "committedDate": "2022-01-08T04:13:52Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d1a1cd2aebda77472c40db03f668d137dc8b368",
          "message": "Change clrVersion ordering",
          "committedDate": "2022-01-18T23:09:49Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I am not sure on the test failure. It seems unrelated.\r\n\r\n**Stack trace**\r\n```\r\nShouldly.ShouldAssertException : _httpListenerThreadException\\n    should be null but was\\nSystem.Net.HttpListenerException (0x80004005): The process cannot access the file because it is being used by another process\\r\\n   at System.Net.HttpListener.AddAllPrefixes()\\r\\n   at System.Net.HttpListener.Start()\\r\\n   at Microsoft.Build.UnitTests.Evaluation.Evaluator_Tests.HttpServerThread() in D:\\a\\1\\s\\src\\Build.UnitTests\\Evaluation\\Evaluator_Tests.cs:line 4843\r\n   at Shouldly.ShouldBeNullExtensions.ShouldBeNull[T](T actual, Func`1 customMessage)\r\n   at Shouldly.ShouldBeNullExtensions.ShouldBeNull[T](T actual)\r\n   at Microsoft.Build.UnitTests.Evaluation.Evaluator_Tests.VerifyDTDProcessingIsDisabled2() in D:\\a\\1\\s\\src\\Build.UnitTests\\Evaluation\\Evaluator_Tests.cs:line 4288\r\n``````",
        "createdAt": "2021-12-30T02:44:40Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> I am not sure on the test failure. It seems unrelated.\r\n> \r\n> **Stack trace**\r\n> \r\n> ```\r\n> Shouldly.ShouldAssertException : _httpListenerThreadException\\n    should be null but was\\nSystem.Net.HttpListenerException (0x80004005): The process cannot access the file because it is being used by another process\\r\\n   at System.Net.HttpListener.AddAllPrefixes()\\r\\n   at System.Net.HttpListener.Start()\\r\\n   at Microsoft.Build.UnitTests.Evaluation.Evaluator_Tests.HttpServerThread() in D:\\a\\1\\s\\src\\Build.UnitTests\\Evaluation\\Evaluator_Tests.cs:line 4843\r\n>    at Shouldly.ShouldBeNullExtensions.ShouldBeNull[T](T actual, Func`1 customMessage)\r\n>    at Shouldly.ShouldBeNullExtensions.ShouldBeNull[T](T actual)\r\n>    at Microsoft.Build.UnitTests.Evaluation.Evaluator_Tests.VerifyDTDProcessingIsDisabled2() in D:\\a\\1\\s\\src\\Build.UnitTests\\Evaluation\\Evaluator_Tests.cs:line 4288\r\n> ```\r\n\r\nIt probably is\u2014if it'll rerun if we push any more changes, or I can rerun it manually if not.",
        "createdAt": "2021-12-30T15:10:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind happy with these changes? When the team comes back they can have a look at the `#if NEVER` blocks and remove them if they want.",
        "createdAt": "2021-12-30T23:55:53Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> @Forgind happy with these changes? When the team comes back they can have a look at the `#if NEVER` blocks and remove them if they want.\r\n\r\nI'll be happy if we delete all the #if NEVER blocks \ud83d\ude42 but if there's a good reason for them to exist, I'll accept it. Otherwise \ud83d\udc4d",
        "createdAt": "2021-12-31T01:04:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "So should I remove the #if NEVER blocks?",
        "createdAt": "2022-01-10T22:28:54Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> So should I remove the #if NEVER blocks?\r\n\r\nSorry I got distracted\u2014answer seems to be that we should avoid touching that file\u2014and that was the point of the #if NEVER blocks. They aren't used, but if we need to merge in more changes from the original version of that file at some point, we want it as similar as possible without adding extra gunk to MSBuild assemblies. Adding #if NEVER means nothing unnecessary is added but also doesn't change the file very much. I'd suggest avoiding any changes to the file at all, sadly.",
        "createdAt": "2022-01-10T23:50:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > So should I remove the #if NEVER blocks?\r\n> \r\n> Sorry I got distracted\u2014answer seems to be that we should avoid touching that file\u2014and that was the point of the #if NEVER blocks. They aren't used, but if we need to merge in more changes from the original version of that file at some point, we want it as similar as possible without adding extra gunk to MSBuild assemblies. Adding #if NEVER means nothing unnecessary is added but also doesn't change the file very much. I'd suggest avoiding any changes to the file at all, sadly.\r\n\r\nNot a problem. I have left it alone. Should we be okay for merge?",
        "createdAt": "2022-01-10T23:54:02Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Not on the team, but I created those blocks/copied HashSet originally: I don't think they are worth keeping. They reflect the sources in .NET Framework, sources which no longer change. There have indeed been improvements to HashSet, but in .NET Core, where the code is changed enough there that diffing would not work well and changes would need to be ported by hand anyway.",
        "createdAt": "2022-01-26T15:21:09Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@Forgind I opened https://github.com/dotnet/msbuild/issues/7340 for that suggestion.",
        "createdAt": "2022-01-26T17:00:13Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I am really unsure why this was in there, I tracked it back to the initial commit to msbuild from vs2015. It looks like its 'NEVER' called?",
              "createdAt": "2021-12-30T02:05:57Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "This sort of thing makes me nervous. I'll try to find my notes on how to see history from before vs2015.",
              "createdAt": "2021-12-30T15:09:10Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good news and bad news. I found the commit. It seems to have come in September 2012, and I have a commit hash. Unfortunately, the entire message was basically \"Dev11 RTM\" plus a link to where they got it. I can find the file, but it's outside git, and I don't know how to get the blame equivalent for that.",
              "createdAt": "2021-12-30T21:02:15Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That is back to vs2012 Release to Manufacturing. Times flies. \r\n\r\nDoes `#if NEVER` actually never get compiled? If not, then this code won't ever be run. MOST of it is private. with the \"equals\" being internal. As far as I could tell it wasn't referenced anywhere.",
              "createdAt": "2021-12-30T21:36:53Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "If I saw this, I would normally feel pretty confident that we can delete it all, but weird things happen in MSBuild sometimes, and it's theoretically possible that NEVER is a variable that means \"only in my special debug mode\" or something like that. This just feels too obviously like dead code \ud83d\ude09\r\n\r\nSome people are coming back next week, so I should (hopefully) be able to get an answer then. I'll also hopefully be able to start merging things then...lots of PRs out that I think are ready to go in.",
              "createdAt": "2021-12-30T21:50:39Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I reverted the change and now the 'unused' constant is wrapped in an `#if NEVER`. Logically grouping them.",
              "createdAt": "2021-12-30T23:41:21Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "From @ladipro:\r\nLooks like it was used for commenting out debug-only or old code. I'm all for deleting these, unless they were added recently and someone is planning to resurrect the code which I don't think is the case.\r\n\r\nI think we're good for deleting it (\ud83e\udd73)",
              "createdAt": "2022-01-04T16:58:17Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Actually, hold on for a bit.",
              "createdAt": "2022-01-04T17:28:13Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry I got distracted\u2014answer seems to be that we should avoid touching that file\u2014and that was the point of the #if NEVER blocks. They aren't used, but if we need to merge in more changes from the original version of that file at some point, we want it as similar as possible without adding extra gunk to MSBuild assemblies. Adding #if NEVER means nothing unnecessary is added but also doesn't change the file very much. I'd suggest avoiding any changes to the file at all, sadly.",
              "createdAt": "2022-01-10T23:45:50Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -1290,338 +1288,6 @@ internal bool EntriesAreReferenceEquals(RetrievableEntryHashSet<T> other)\n             return true;\n         }\n \n-#if NEVER",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think you can just delete this? It looks legitimately unused.",
              "createdAt": "2021-12-30T15:04:57Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I thought that too, but I think the constructor calls to create a new singleton. Which then resets some things. Its very strangely structured.",
              "createdAt": "2021-12-30T21:11:19Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "I tried deleting it and running tests, and it passed tests. Evidence that it isn't used but not definitive.\r\n\r\nThe constructor refers to SingletonField and by reflection to s_singletonInstance on BuildManager, but I didn't see a reference to _resetBuildManager.",
              "createdAt": "2021-12-30T22:55:24Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I actually have no idea. I felt it erred on the side of caution and used a suppression instead of deleting all the code.\r\n\r\nSo what I think is happening, is that the TestEnvironment class is used in different tests. When it is instantiated, it makes a call to the DefaultBuildManager to clean-up the environment.\r\n\r\nThis seems strange, because I would have thought this would have been done on dispose for the TestEnvironment since it is utilised in a using pattern.\r\n\r\nThe comment explains it best:\r\n`// reset the default build manager and the state it might have accumulated from other tests`",
              "createdAt": "2021-12-30T23:50:23Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "I get it. I guess the idea was that if the environment was corrupted (i.e., not used in a using pattern, there are bugs, etc.), someone might go down a rabbit hole trying to figure out why. Worse, it would only happen if the tests were run in a particular order. I might claim that this then hides potential serious problems, but I guess it's fine to leave it in.",
              "createdAt": "2021-12-31T01:02:16Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It should be safe to put\r\n\r\n```C#\r\n_ = new ResetDefaultBuildManager();\r\n```\r\n\r\nin the constructor and delete the field.",
              "createdAt": "2022-01-19T11:06:14Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "@ladipro \r\nThe constructor is here:\r\nhttps://github.com/dotnet/msbuild/blob/597d77e17ea6b12e34c63f99daf3aafec76137e5/src/Shared/UnitTests/TestEnvironment.cs#L58-L63\r\n\r\nBut if I add it here, it cannot find the class when in the `Microsoft.Build.Framework.UnitTests` project. I am not sure how to get around this. Maybe a `#if` but if its used somewhere else it would have to be updated. So its not an elegant solution.\r\n\r\nI don't suppose EngineTestEnvironment wasn't included in `Microsoft.Build.Framework.UnitTests` by accident?",
              "createdAt": "2022-01-26T00:41:30Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "Ah, I see, let's leave as is then. Maybe the better way to structure the code would be to make the Engine `TestEnvironment` derive from the base `TestEnvironment` instead of using partial classes but definitely out of scope here. Apologies for the randomization.",
              "createdAt": "2022-01-26T09:33:03Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,7 +20,9 @@ namespace Microsoft.Build.UnitTests\n     public partial class TestEnvironment\n     {\n         // reset the default build manager and the state it might have accumulated from other tests\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This also looks unused, so can probably delete.",
              "createdAt": "2021-12-30T15:06:04Z",
              "path": "src/MSBuild.UnitTests/PerfLog_Tests.cs",
              "diffHunk": "@@ -24,11 +24,14 @@ namespace Microsoft.Build.UnitTests\n {\n     public class PerfLogTests\n     {\n+#pragma warning disable CA1823 // Avoid unused private fields",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nMaybe \r\nprivate static readonly int[] s_clrVersion =\r\n#if NETFRAMEWORK\r\n{ 2, 0, 50727, 0 };\r\n#else\r\n{ 4, 0, 30319, 0 };\r\n#endif\r\n\r\n?\r\nHaving the older version first makes more sense to me; I'm less sure about combining them because it makes it cleaner but also prevents us from using quite as clear names.",
              "createdAt": "2022-01-18T23:03:32Z",
              "path": "src/Tasks/ManifestUtil/Util.cs",
              "diffHunk": "@@ -29,11 +29,12 @@ internal static class Util\n         internal static readonly string logPath = GetLogPath();\n         private static readonly char[] s_fileNameInvalidChars = { '\\\\', '/', ':', '*', '?', '\"', '<', '>', '|' };\n         private static StreamWriter s_logFileWriter;\n-        // Major, Minor, Build and Revision of CLR v2.0\n-        private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };\n #if RUNTIME_TYPE_NETCORE\n         // Major, Minor, Build and Revision of CLR v4.0\n         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };\n+#else",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorted. Merging might make sense at some point. but I think it should probably be apart of a refactor of the whole class.",
              "createdAt": "2022-01-18T23:11:00Z",
              "path": "src/Tasks/ManifestUtil/Util.cs",
              "diffHunk": "@@ -29,11 +29,12 @@ internal static class Util\n         internal static readonly string logPath = GetLogPath();\n         private static readonly char[] s_fileNameInvalidChars = { '\\\\', '/', ':', '*', '?', '\"', '<', '>', '|' };\n         private static StreamWriter s_logFileWriter;\n-        // Major, Minor, Build and Revision of CLR v2.0\n-        private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };\n #if RUNTIME_TYPE_NETCORE\n         // Major, Minor, Build and Revision of CLR v4.0\n         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };\n+#else",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "Sounds good",
              "createdAt": "2022-01-18T23:26:21Z",
              "path": "src/Tasks/ManifestUtil/Util.cs",
              "diffHunk": "@@ -29,11 +29,12 @@ internal static class Util\n         internal static readonly string logPath = GetLogPath();\n         private static readonly char[] s_fileNameInvalidChars = { '\\\\', '/', ':', '*', '?', '\"', '<', '>', '|' };\n         private static StreamWriter s_logFileWriter;\n-        // Major, Minor, Build and Revision of CLR v2.0\n-        private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };\n #if RUNTIME_TYPE_NETCORE\n         // Major, Minor, Build and Revision of CLR v4.0\n         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };\n+#else",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}