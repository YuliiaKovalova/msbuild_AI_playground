{
  "number": 11546,
  "title": "Consolidate common IPC / named pipe code",
  "body": "### Motivation\r\n\r\nThe various node components contain a lot of duplicated code related to reading and writing packets, sequencing pipe operations, managing reusable buffers, handling broken connections, etc. along with differing implementations of performance optimizations and buffer reuse.\r\n\r\nThis PR aims to encapsulate all common logic into a simple API for reading and writing packets in a single call, along with extracting out the pipe connection and handshake logic for use outside of build nodes.\r\n\r\nThe primary motivation is to allow the RAR-out-of-proc client and server to share the same IPC code with MSBuild, as that must partially live in the Tasks assembly and cannot depend on much of the node provider/endpoint framework. Given that existing IPC logic already has test coverage and continued optimizations, it makes more sense to reuse as much as possible instead of adding (yet another) implementation of pipe communication, unit tests, ect.\r\n\r\n### Notes\r\nAlthough I've kept behavior as close as possible, there's a few additional changes here to be noted:\r\n- Many `ifdefs` were removed or combined. There is a lot of dead code which appears to be a holdover from Mono or unsupported targets, and can now be reduced to: (Framework, .NET Core, or TaskHost).\r\n- TaskHost implementation calls now async-over-sync code. This should be safe because the TaskHost is not competing with build engine and VS thread resources as it executes in a separate process, and such should not be starved by a single blocking IO thread for reads. Writing a proper APM-compatible `Begin/End` API and custom `IAsyncResult` implementation adds a lot of complexity and more compile flags.\r\n- `BufferedReadStream` was removed. as it performs the same function as the `MemoryStream` buffering. Likely more inefficiently as well due to the small buffer size (meaning more IO ops on the named pipe). I did not test against the most recent perf optimization here, but I would still expect this to be the case.\r\n- `INodePacketFactory.DeserializeAndRoutePacket()` was split into two methods (which accounts for most of the file changes here). Motivation is so `NodePipeBase` can directly return an `INodePacket` instance but still allow the caller to decide whether to route it. This is not publicly exposed so it shouldn't be a breaking change.\r\n- Exception handling boils down to: \"If the pipe is broken but we expected it and aren't in the middle of a packet read, gracefully stop; otherwise, error.\" No need to condition on the number of read bytes on every single operation, which will can be logged from the exception anyways.\r\n- Removed `PipeOptions.WriteThrough`. This flag has no effect on local IPC, which will always use kernel buffers.\r\n- In the future, it may be worth doing a new perf analysis on buffer sizes and write limits per-operation. A named pipe shares a \"quota\" across all requests in a single direction, which defines the maximum number of bytes that can be pending for reads. This corresponds to the in/out buffer sizes set on server creation, which actually defines multiple kernel-level buffers. Exceeding this number will cause any additional writes to block (postpone if async) until the OS decides to allocate more *or* buffers are cleared. Out of the scope for this PR, but as a safe choice I've picked the implementation from node provider which already limits max write sizes per write operation.\r\n\r\n### \r\n\r\nLet me know if there's anything I need to split off to make this more digestible (e.g. INodePacketFactory plumbing, BufferedReadStream removal, some of the flag consolidation would be very quick), but this gives the full context.",
  "state": "MERGED",
  "createdAt": "2025-03-06T05:16:51Z",
  "updatedAt": "2025-03-31T19:47:59Z",
  "closedAt": "2025-03-24T17:36:59Z",
  "mergedAt": "2025-03-24T17:36:59Z",
  "additions": 775,
  "deletions": 1217,
  "changedFiles": 24,
  "headRefName": "dev/chcasta/refactor-common-pipe-code",
  "isDraft": false,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "602710927ec31cea19b1ad2c1b73a674e5d28643",
          "message": "Encapsulate common IPC/pipe logic",
          "committedDate": "2025-03-06T04:47:31Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "120b8e3228aeb17b44e6ad2ae49a82b78571ccd0",
          "message": "Simplify handshake timeout ifdefs",
          "committedDate": "2025-03-06T04:48:15Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3364ec3096002a1fb1e2a968477d13e2743833bc",
          "message": "Update node impls to use common i'PC/pipe code",
          "committedDate": "2025-03-06T04:49:05Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1672033ee9d7ffb1f7497b1a000bc4a7c6fa022f",
          "message": "Delete BufferedReadStream",
          "committedDate": "2025-03-06T04:49:19Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5d90684634f9797757244c1d8c219ae63477ed5",
          "message": "Split DeserializeAndRoutePacket (plumbing)",
          "committedDate": "2025-03-06T04:50:17Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "698a77e5dbf67dd31233add1bc73baad978688e6",
          "message": "proj file changes",
          "committedDate": "2025-03-06T04:50:25Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "afa09918c16e5869938c4f15cbb4f0ad66dae85c",
          "message": "Merge branch 'main' into dev/chcasta/refactor-common-pipe-code",
          "committedDate": "2025-03-18T21:57:43Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "32187633+ccastanedaucf@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27313087c91c03bdb00ba53335153e7eadfa550e",
          "message": "Port ValueTask and NET flag changes from merge",
          "committedDate": "2025-03-18T22:05:48Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Just ported the relevant changes over from #11448 (`changing #if NETCOREAPP` -> `#if NET`, returning `ValueTask` from inner pipe read loop)\r\n\r\nOtherwise this is good to go \ud83d\udc4d",
        "createdAt": "2025-03-18T22:10:15Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "@SimaTian , could you have a final look please?",
        "createdAt": "2025-03-19T11:28:56Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@ccastanedaucf sorry, we have to revert this PR due to regression caused. See https://github.com/dotnet/msbuild/pull/11648 for more details.",
        "createdAt": "2025-03-31T13:52:59Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Shoot, I'll break it off into chunks then. Aka get shared code in to unblock RAR stuff -> incrementally remove dead code / flip references over in the nodes with some more testing.",
        "createdAt": "2025-03-31T19:47:58Z",
        "author": {
          "login": "ccastanedaucf"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider adding explicit exception handling around GetAwaiter().GetResult() to ensure that any asynchronous faults are properly managed, as synchronous blocking may result in unwrapped exceptions.",
              "createdAt": "2025-03-13T15:25:28Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientPacketPump.cs",
              "diffHunk": "@@ -224,80 +198,27 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu\n                             break;\n \n                         case 1:\n+                            INodePacket packet = readTask.GetAwaiter().GetResult();",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}