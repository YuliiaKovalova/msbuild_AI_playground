{
  "number": 7413,
  "title": "Fix low priority issues",
  "body": "Thanks @svetkereMS for bringing this up, driving, and testing.\r\n\r\nThis fixes two interconnected issues.\r\nFirst, if a process starts at normal priority then changes to low priority, it stays at normal priority. That's good for Visual Studio, which should stay at normal priority, but we relied on passing priority from a parent process to children, which is no longer valid. This ensures that we set the priority of a process early enough that we get the desired priority in worker nodes as well.\r\n\r\nSecond, if we were already connected to normal priority worker nodes, we could keep using them. This \"shuts down\" (disconnects\u2014they may keep running if nodeReuse is true) worker nodes when the priority changes between build submissions.\r\n\r\nOne non-issue (therefore not fixed) is connecting to task hosts that are low priority. Tasks host nodes currently do not store their priority or node reuse. Node reuse makes sense because it's automatically off always for task hosts, at least currently. Not storing low priority sounds problematic, but it's actually fine because we make a task host\u2014the right priority for this build, since we just made it\u2014and connect to it. If we make a new build with different priority, we disconnect from all nodes, including task hosts. Since nodeReuse is always false, the task host dies, and we cannot reconnect to it even though if it didn't immediately die, we could, erroneously.\r\n\r\nOn the other hand, we went a little further and didn't even specify that task hosts should take the priority assigned to them as a command line argument. That has been changed.\r\n\r\nsvetkereMS had a chance to test some of this. He raised a couple potential issues:\r\n1) conhost.exe launches as normal priority. Maybe some custom task dlls or other (Mef?) extensions will do something between MSBuild start time and when its priority is adjusted.\r\n2) Some vulnerability if MSBuild init code improperly accounts for timing\r\n\r\nFor (1), how is conhost.exe related to MSBuild? It sounds like a command prompt thing. I don't know what Mef is.\r\nFor (2), what vulnerability? Too many processes starting and connecting to task hosts with different priorities simultaneously? I could imagine that being a problem but don't think it's worth worrying about unless someone complains.\r\n\r\nHe also mentioned a potential optimization if the main node stays at normal priority. Rather than making a new set of nodes, the main node could change the priority of all its nodes to the desired priority. Then it can skip the handshake, and if it's still at normal priority, it may be able to both raise and lower the priority of its children. Since there would never be more than 2x the \"right\" number of nodes anyway, and I don't think people will be switching rapidly back and forth, I think maybe we should file that as an issue in the backlog and get to it if we have time but not worry about it right now.\r\n\r\nEdit:\r\nI changed \"shuts down...worker nodes when the priority changes\" to just changing their priority. This does _not_ work on linux or mac. However, Visual Studio does not run on linux or mac, and VS is the only currently known customer that runs in normal priority but may change between using worker nodes at normal priority or low priority. This approach is substantially more efficient than starting new nodes for every switch, disconnecting and reconnecting, or even maintaining two separate pools for different builds.",
  "state": "MERGED",
  "createdAt": "2022-02-24T02:16:59Z",
  "updatedAt": "2022-04-20T15:54:13Z",
  "closedAt": "2022-04-20T15:54:12Z",
  "mergedAt": "2022-04-20T15:54:12Z",
  "additions": 187,
  "deletions": 29,
  "changedFiles": 14,
  "headRefName": "low-pri-fix",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f7dd9e1d6a7d69249a84085ebf6017c58f62dd14",
          "message": "Ensure taskhosts are low priority\n\nTaskHost nodes should also start at low priority",
          "committedDate": "2022-02-24T01:52:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c11297dfa8009db9307db8f208922a5f8aaef5d5",
          "message": "Shut down connected nodes on low pri change",
          "committedDate": "2022-02-25T21:10:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f14ce8a85c63d456df0f1993648b7205305590d",
          "message": "Start nodes at low priority",
          "committedDate": "2022-03-01T01:10:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aebc1cd948edcb94159b376e68465db1c3e9f422",
          "message": "Ignore case",
          "committedDate": "2022-03-01T01:29:41Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be0c0115f8bdbfb665cfc327010c18a9c872bf41",
          "message": "Refactoring",
          "committedDate": "2022-03-01T18:10:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "067a26692a2113389498d9136aa823f4f1243a3f",
          "message": "Partial PR comments",
          "committedDate": "2022-03-02T17:55:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43a4bc9231db7900915d324e99e94816cd3ef1ce",
          "message": "Change priority of processes\n\nRather than disconnecting from any processes, change their priority",
          "committedDate": "2022-03-04T01:26:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66a4c5e89a8176a94f1a8ff9e43c0fdce4a8b702",
          "message": "Only set the priority down on linux/mac\n\nLinux/mac throw an exception when raising the priority of a process. This disconnects from processes instead.\n\n(This code path should not be hit except in adversarial cases, currently.)",
          "committedDate": "2022-03-05T01:27:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f126e22be495c782849ab84efcf82cc54fb08148",
          "message": "Ensure nodes exit use if unusable\n\nEnsure nodes adjust to the correct priority if still usable",
          "committedDate": "2022-03-07T21:50:57Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3f990eb7670eb5a20e3bc76d24f9b3b2ccff17c",
          "message": "Add docs",
          "committedDate": "2022-03-21T16:11:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> This seems inefficient especially in what I expect to be a fairly standard case where design-time builds run at normal priority but the user has configured \"real\" builds to run at low pri. Would it be possible to keep the connection alive and filter the known-connections list by priority when finding a worker node?\r\n\r\nIt would be even nicer if we could implement svetkereMS's suggestion to have the main node raise and lower the priority of its worker nodes based on the build parameters. I spent a little time trying to figure out how to do that and had trouble because MSBuild keeps track of its nodes by a nodeId unrelated to its processId, and I didn't see an easy way to go from nodeId to Process object. Is there one I missed?",
        "createdAt": "2022-03-02T18:06:47Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@svetkereMS,\r\n\r\nI found a way to get all the worker nodes we're connected to. (I skipped the in-proc node, since it's the current process, so we could just change that...but probably shouldn't for VS scenarios.)\r\n\r\nI also added a test. It works locally on windows, so if it passes on the mac leg, I'd say your hunch about mac being ok with a process increasing the priority of another process to its level is right.\r\n\r\n(Note that we should revert \"Temporarily make test fallible\" before merging.)",
        "createdAt": "2022-03-04T01:28:57Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "What issue is this solving? Won't this cause VS to trip into low-priority mode if it triggers a build in low-pri?",
              "createdAt": "2022-02-24T14:37:12Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -788,7 +792,25 @@ public string OutputResultsCacheFile\n         /// <summary>\n         /// Gets or sets a value indicating whether the build process should run as low priority.\n         /// </summary>\n-        public bool LowPriority { get; set; }\n+        public bool LowPriority",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You're right. Maybe the right thing here is to disconnect from child processes when switching into low-pri, forcing VS to find new nodes to connect to or make more?",
              "createdAt": "2022-02-24T22:43:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -788,7 +792,25 @@ public string OutputResultsCacheFile\n         /// <summary>\n         /// Gets or sets a value indicating whether the build process should run as low priority.\n         /// </summary>\n-        public bool LowPriority { get; set; }\n+        public bool LowPriority",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I thought you weren't doing this for taskhosts?",
              "createdAt": "2022-03-02T15:47:54Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -509,7 +509,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor\n \n             // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we\n             // want to start up an MSBuild task host node.\n-            string commandLineArgs = $\" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} \";\n+            string commandLineArgs = $\" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} \";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, little confusing from my comment. I meant that we launch TaskHosts as low priority, but after that, we have no idea if they're low priority or not and just connect to them as a generic task host. This line enables us to do the launch at low priority. We were already ignoring whether they're low priority or not.",
              "createdAt": "2022-03-02T17:22:54Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -509,7 +509,7 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor\n \n             // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we\n             // want to start up an MSBuild task host node.\n-            string commandLineArgs = $\" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} \";\n+            string commandLineArgs = $\" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} \";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I find this comment confusing since this is in `xmake.cs` which is not involved in Visual Studio scenarios.",
              "createdAt": "2022-03-02T15:51:50Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2078,14 +2064,36 @@ string commandLine\n                 DisplayCopyrightMessage();\n             }\n \n+\n+            // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit\n+            // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.\n+            // This switch is processed early because if the main node sets this switch after initialization, it\n+            // remains normal priority (as intended for Visual Studio). This ensures that child processes still",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "As I understand it, the \"main node\" is different, but this is the path taken whenever you start a new node with /nodemode:x, so VS still cares about it (hence the main point of this PR).",
              "createdAt": "2022-03-02T17:28:25Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2078,14 +2064,36 @@ string commandLine\n                 DisplayCopyrightMessage();\n             }\n \n+\n+            // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit\n+            // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.\n+            // This switch is processed early because if the main node sets this switch after initialization, it\n+            // remains normal priority (as intended for Visual Studio). This ensures that child processes still",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Oh, misread my own comment. You're right; the \"main node\" in VS never goes through here. I'll clarify that.",
              "createdAt": "2022-03-02T17:31:30Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2078,14 +2064,36 @@ string commandLine\n                 DisplayCopyrightMessage();\n             }\n \n+\n+            // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit\n+            // that priority. Idle priority would prevent the build from proceeding as the user does normal actions.\n+            // This switch is processed early because if the main node sets this switch after initialization, it\n+            // remains normal priority (as intended for Visual Studio). This ensures that child processes still",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd go so far as to say this is wrong. This is only relevant for the current process, and all child processes will get priority assigned.",
              "createdAt": "2022-03-02T15:52:42Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2078,14 +2064,36 @@ string commandLine\n                 DisplayCopyrightMessage();\n             }\n \n+\n+            // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I just copied this from where it previously was. Still _technically_ true, but letting child processes inherit this process's priority doesn't matter so much when we reset it anyway. I'll change it.",
              "createdAt": "2022-03-02T17:29:49Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2078,14 +2064,36 @@ string commandLine\n                 DisplayCopyrightMessage();\n             }\n \n+\n+            // Honor the low priority flag, we place our selves below normal priority and let sub processes inherit",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "> Node reuse is always off\r\n\r\nI suspect this won't be the case forever; how deeply baked is this assumption?",
              "createdAt": "2022-03-02T15:53:41Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2595,22 +2598,22 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)\n             {\n                 Exception nodeException = null;\n                 NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;\n+\n                 // normal OOP node case\n                 if (nodeModeNumber == 1)\n                 {\n-                    OutOfProcNode node = new OutOfProcNode();\n-\n                     // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False\n                     bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);\n-                    string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];\n-                    bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals(\"true\");\n-\n+                    OutOfProcNode node = new OutOfProcNode();\n                     shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);\n \n                     FileUtilities.ClearCacheDirectory();\n                 }\n                 else if (nodeModeNumber == 2)\n                 {\n+                    // TaskHost nodes don't need to worry about node reuse or low priority. Node reuse is always off, and TaskHosts",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's kinda deeply baked in. To do this right\u2122, we'd need to change a number of places that gather parameters for the node handshake. Currently, most assume the only relevant ones are architecture and runtime. Ideally, we'd also tweak our public API a little; I'm thinking of an intrinsic function that tells you whether there's a TaskHost currently running that fits your parameters but only allows runtime and architecture.\r\n\r\nWhere I got a bit bogged down was in OutOfProcTaskHost.cs. LowPriority actually shouldn't be too hard because I can just ask the current process what its priority is, but it doesn't know about whether node reuse is enabled or not, and I had a little trouble passing it information. Note that for this case, it isn't enough to have a node that knows tell it whether it should be shutting down or waiting around for another connection because we'd need to match on the nodeReuse bit.\r\n\r\nHonestly, several aspects of this felt like they were working by accident \ud83d\ude25",
              "createdAt": "2022-03-02T17:20:24Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2595,22 +2598,22 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)\n             {\n                 Exception nodeException = null;\n                 NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;\n+\n                 // normal OOP node case\n                 if (nodeModeNumber == 1)\n                 {\n-                    OutOfProcNode node = new OutOfProcNode();\n-\n                     // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False\n                     bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);\n-                    string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];\n-                    bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals(\"true\");\n-\n+                    OutOfProcNode node = new OutOfProcNode();\n                     shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);\n \n                     FileUtilities.ClearCacheDirectory();\n                 }\n                 else if (nodeModeNumber == 2)\n                 {\n+                    // TaskHost nodes don't need to worry about node reuse or low priority. Node reuse is always off, and TaskHosts",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why keep the whole `BuildParameters` rooted when you only need the priority bit?",
              "createdAt": "2022-03-02T16:09:50Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -176,6 +176,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable\n         /// </summary>\n         private int _nextBuildSubmissionId;\n \n+        /// <summary>\n+        /// The last BuildParameters used for building.\n+        /// </summary>\n+        private BuildParameters _previousBuildParameters = null;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I was going to do something a bit more complicated but retracted a lot of it when I backed out the more invasive task host changes. Will switch to a bit.",
              "createdAt": "2022-03-02T17:10:21Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -176,6 +176,11 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable\n         /// </summary>\n         private int _nextBuildSubmissionId;\n \n+        /// <summary>\n+        /// The last BuildParameters used for building.\n+        /// </summary>\n+        private BuildParameters _previousBuildParameters = null;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Need to reset priority just before disconnecting. If crashes...problem?\r\nWrite spec.",
              "createdAt": "2022-03-07T16:12:51Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -404,13 +410,57 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess\n             _deferredBuildMessages = null;\n         }\n \n+        private void UpdatePriority(Process p, ProcessPriorityClass priority)\n+        {\n+            try\n+            {\n+                p.PriorityClass = priority;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Put in node reuse logic: if should be normal priority && is low priority && not windows then nodeReuse is false (even if true); otherwise, adjust priority.",
              "createdAt": "2022-03-07T16:15:33Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -404,13 +410,57 @@ public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMess\n             _deferredBuildMessages = null;\n         }\n \n+        private void UpdatePriority(Process p, ProcessPriorityClass priority)\n+        {\n+            try\n+            {\n+                p.PriorityClass = priority;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}