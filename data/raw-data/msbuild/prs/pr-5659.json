{
  "number": 5659,
  "title": "convert ifs to visitor in BuildEventArgsWriter, BuildEventArgsDispatcher",
  "body": "had a shot at converting the ifs mentioned in issue #5019 to visitor pattern\r\n\r\n- does not close the issue because issue aims for a more general scope (\"There are probably other similar examples.\")\r\n- did not use dynamic dispatch, so it's less pretty than it would be possible with dynamic (but no runtime cost)\r\n- made it better or worse? not sure if really worth the change\r\n",
  "state": "CLOSED",
  "createdAt": "2020-08-16T12:45:08Z",
  "updatedAt": "2020-10-23T17:11:18Z",
  "closedAt": "2020-10-23T17:11:18Z",
  "mergedAt": null,
  "author": {
    "login": "szaliszali"
  },
  "labels": [],
  "additions": 255,
  "deletions": 258,
  "changedFiles": 28,
  "headRefName": "5019-convert-if-to-visitor",
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9d3c1b0d8ca8e2f84449a54683ff04d90370ae57",
          "message": "minor formatting (whitespace)",
          "committedDate": "2020-08-16T11:56:02Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "34a73bdb66237a4b4e42ecceffe2096c7d230581",
          "message": "replace if with visitor",
          "committedDate": "2020-08-16T12:36:11Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb5559a332965aefc0ef270a79efab00580bd9e4",
          "message": "update regenerated reference assembles",
          "committedDate": "2020-08-16T12:36:33Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c4714298d51b62313338f9a2a7be6875f2e08bd",
          "message": "fix AnyEventRaised not invoked",
          "committedDate": "2020-08-16T14:34:39Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a7a280dd6ab3240f9d4b8bc07f206239764ee29",
          "message": "pubic to internal",
          "committedDate": "2020-08-17T20:56:24Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c579f43a30c21e79b627543f045973476b34d65",
          "message": "update regenerated reference assembles",
          "committedDate": "2020-08-17T20:56:37Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62cadad01a8a7a2982c052efa07b8c01dd773ede",
          "message": "pubic to internal",
          "committedDate": "2020-08-17T21:02:06Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2e93df2a21ebf8206869e31f8d50e96ad46baae9",
          "message": "update regenerated reference assembles",
          "committedDate": "2020-08-17T21:03:04Z",
          "author": {
            "name": "Szali Szali",
            "email": "szalicil@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hi, first off thanks for the contribution!\r\n\r\nHonestly I have to confess that I'm not sure this is a big improvement worth introducing. It does make some things cleaner but it also adds complexity. The current approach might seem uglier and more primitive, but a lot of ifs in a single method is a kind of complexity that's easy to contain and it doesn't add coupling or new API. The downside of the current approach is that you need to remember to update the method when new event args types are added. But you still have the same problem with visitors.\r\n\r\nSo one of my concerns is adding unjustified complexity into the core of MSBuild. Currently the binlog-related stuff is \"on the side\", so the core doesn't know anything about it. Adding two new interfaces there honestly doesn't feel justified. I notice that you could probably collapse them into a single interface and make it a bit more generic, like IBuildEventArgsVisitor, so you would only need to add a single override on each class, and not two. This would also enable adding more visitors in the future in case we need them. But even then honestly I feel like it wouldn't be worth the effort.\r\n\r\nAnother important concern is performance. We can't merge this change without thorough performance regression testing. This area is very performance sensitive and would be bad to inadvertently make things slower. It may make things faster though, but we won't know until we measure.\r\n\r\nI'll let other team mates chime in and see what they think, but my recommendation would be to not merge this PR, even though I feel terrible about declining your work (sorry about that!). Besides just very questionable benefits which are hard to quantify, there's also the \"bigger fish to fry\" aspect - we have so many other issues to worry about that spending a lot of time on this would mean that real improvements that make life dramatically better for everyone wouldn't get attention.\r\n\r\nThanks again!",
        "createdAt": "2020-08-18T22:29:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "As a relevant data point, this seems to have essentially no effect on performance. My test took 49.4 seconds before the changes and 49.5 seconds after it.",
        "createdAt": "2020-08-20T21:28:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Trying to respond to @KirillOsenkov's comment (inline)\r\n\r\n> Honestly I have to confess that I'm not sure this is a big improvement worth introducing. [...]\r\n\r\nI can agree with this. Does not really make future changes significantly easier. As I wrote above, I was not totally sure either, for the same reasons. So, if the team wants it then fine, if not, it's also fine, I won't be sad if it's not merged in the end.\r\n\r\n> Another important concern is performance. We can't merge this change without thorough performance regression testing. This area is very performance sensitive and would be bad to inadvertently make things slower. It may make things faster though, but we won't know until we measure.\r\n\r\nAs far as I understand, these binary log events occur a few thousand/maybe a million times per msbuild run, and the cost of a virtual method call is somewhere around 10 ns (IIRC), so the performance impact may be a few milliseconds for a large solution build at most, if the ifs were ordered optimally (most frequent events first), this seems to be more or less aligned with @Forgind's measurement.\r\n\r\n> I'll let other team mates chime in and see what they think, but my recommendation would be to not merge this PR, even though I feel terrible about declining your work (sorry about that!).\r\n\r\nDon't feel sorry at all if you believe it's damaging the project in the long run. Your goal is to keep the project running.\r\n\r\n> [...] there's also the \"bigger fish to fry\" aspect [...]\r\n\r\nEven though I won't be sad if the code is not merged, I'll be very sad if there is no learning in the end, so please allow me a short detour here.\r\n\r\nIf \"bigger fish to fry\" is a serious issue for the team then it must be solved. Contributors are not (or not only) paid team members, but also a random bunch of individuals who have a lot of various reasons to come here, maybe only stay for a few issues then move on, maybe some stick around for longer, so it's hard to manage the development like it was a team located in an office and you can know that they the same people will come to work tomorrow and the day after tomorrow as well. You can have plans and milestones, but if it seems hard to contribute to planned tasks then people either leave or find something else. From a casual contributor perspective this was an ideal issue:\r\n- was open for a long time (almost 8 months)\r\n- was opened by a developer, and was not discussed or challenged by any other developers, although an experienced developer could have predicted the outcome with a high probability (so I assumed there has been an agreement that it should be done eventually)\r\n- could be done without any specific domain knowledge, no learning, just jump right in, push the code, and done\r\n- the implementation is basically already defined in the issue, visitor pattern is well-known and the conversion is straightforward\r\n- it might be useful or maybe not, but even if not, there can be some discussion to learn from, so I would be more than happy to see it happen\r\n- it was not tagged up-for-grabs, but \u00af\\\\\\_(\u30c4)\\_/\u00af, the general quality of up-for-grabs tags on github is questionable, so I assume that projects put their issues online because they want them resolved\r\n\r\nSo, to avoid having to say sorry, I recommend\r\n- make bigger fishes more obvious to find, and lower the contribution bar for them as much as possible, maintain milestones and tags to communicate clearly where help is needed and where not\r\n- review new issues and challenge them as soon as they appear on the issue board\r\n- regularly review and close issues instead of keeping them open for months/years (the project has 1050+ open issues right now and this number is constantly growing)\r\n    - stale issues\r\n    - requirements changed / world changed\r\n    - questionable business value\r\n    - maintenance or review cost not justified by the benefits\r\n    - way too much effort (alternatively, plan ahead and split to reasonable tasks)\r\n    - no repro/not enough info from reporter/reporter ghosted after posting the issue\r\n- but, you still have to do proactive tech debt management, a project is not only one task after another, and if complexity reaches a certain level, contributions will come to a halt, good example is the `Expander` where I just take a quick look at the size of the scrollbar, and close the window in the same moment, and you will be happy because random people don't just come and break anything there but at the same time some people will try to fix bug there and they won't be able to, because of the complexity accumulated over the years",
        "createdAt": "2020-08-21T10:18:17Z",
        "author": {
          "login": "szaliszali"
        }
      },
      {
        "body": "Hey @szaliszali fantastic comments, much appreciated!\r\n\r\nI'll confess I remember when @Forgind filed the issue I made a mental note to myself (\"nothing wrong with those ifs from my experience\"), but I haven't followed up. \r\n\r\nWe would love to make the repo more welcoming for external contributors, so your suggestions towards that are very welcome. Historically the team is very busy and overloaded (who isn't nowadays), so the technical debt is known and acknowledged. I myself worked on MSBuild briefly a few years ago, and now I'm working on Visual Studio for Mac, but MSBuild is still near and dear to my heart and I try to fix a bug or two whenever I can. I also maintain https://msbuildlog.com and I wrote the original binlog support.\r\n\r\nI just went through issues that I opened (https://github.com/dotnet/msbuild/issues/created_by/KirillOsenkov) and unfortunately each of them either requires some knowledge about the code or is a corner case that we don't care much about at this point. Otherwise I would have marked some of them with good-first-issue or up-for-grabs. Let's hope the team members are regularly marking easy issues properly.",
        "createdAt": "2020-08-21T19:00:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "You make some excellent points! I should note that although I am a developer, I had only worked on MSBuild for a few months when I filed that issue, and I didn't discuss it with anyone beforehand. When I triaged it with a more senior dev, we agreed it might be something we should do eventually but that it wasn't at all urgent, so he put it on the backlog.\r\n\r\nI fully agree that it would be good to make it easier to find important issues. If an issue is not marked up-for-grabs, it's fully possible that we just haven't looked at it (or haven't looked at it seriously), and we really should close it. The safest answer in my view is to ask whether an issue is relevant before you make a PR, perhaps @ mentioning me or someone on the team, to find out if we're open to a contribution on it. It would be better if that step were unnecessary, but although we triage issues every week, typically focusing on the newest issues, there is still an enormous number of untriaged issues.\r\n\r\nI can try to push for more issues to be marked up-for-grabs. I know we aren't there yet, but I hope that we can eventually meet and even exceed your expectations for ease of contribution.",
        "createdAt": "2020-08-21T23:15:36Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Closing based on the discussion above.",
        "createdAt": "2020-10-23T17:11:18Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}