{
  "number": 11940,
  "title": "Replace obsolete UCOMITypeInfo with recommended System.Runtime.InteropServices.ComTypes.ITypeInfo",
  "body": "Fixes #\r\nAB#2495104\r\n\r\n### Context\r\nClickOnce users report an intermittent build failure in Forms projects where the ClickOnce manifest creation task is running.\r\nI was able to reproduce the issue on one of my machines intermittently where the call to System.Runtime.InteropServices.UCOMITypeInfo.ReleaseTypeAttr(...) throws a ComException with random unknown hr values.\r\n\r\nFrom the documenation this type has been deprecated and replaced by System.Runtime.InteropServices.ComTypes.ITypeInfo since .NET 2.0.\r\n\r\nReplacing the obsolete type with the recommended type fixes the issue of the random failure while calling ReleaseTypeAttr.\r\n\r\n### Changes Made\r\n- Replace the obsolete type UCOMITypeInfo with the recommended type ITypeInfo.\r\n- Ignore ComExceptions from ReleaseTypeAttr call.\r\n- Fix memory leak where TypeLib COM object was not being released.\r\n\r\n### Testing\r\nValidated with private Tasks DLL that the ReleaseTypeAttr call does not fail anymore.\r\nCTI team is also running some tests with a private tasks DLL.\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-06-02T20:34:38Z",
  "updatedAt": "2025-06-03T08:07:54Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 69,
  "deletions": 49,
  "changedFiles": 1,
  "headRefName": "user/sujitn/2495104",
  "isDraft": false,
  "author": {
    "login": "sujitnayak"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      },
      {
        "login": "John-Hart"
      },
      {
        "login": "merriemcgaw"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "98a89199120b91fafd7f4ae4d213c0b6e648be8e",
          "message": "Replace obsolete since .NET 2.0 System.Runtime.InteropServices.UCOMITypeInfo with recommended System.Runtime.InteropServices.ComTypes.ITypeInfo",
          "committedDate": "2025-06-02T20:08:39Z",
          "author": {
            "name": "Sujit Nayak",
            "email": "sujitn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Adding @JeremyKuhne to offer thoughts, but this seems reasonable based on our discussion earlier.",
        "createdAt": "2025-06-03T00:45:15Z",
        "author": {
          "login": "merriemcgaw"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider refactoring the COM object release logic into a helper method to reduce repeated code and improve clarity.\n```suggestion\n                                ReleaseComObject(tinfo, tinfoAttrPtr, tinfo.ReleaseTypeAttr);\n```",
              "createdAt": "2025-06-02T20:35:04Z",
              "path": "src/Tasks/ManifestUtil/ComImporter.cs",
              "diffHunk": "@@ -55,64 +53,86 @@ public ComImporter(string path, OutputMessageCollection outputMessages, string o\n             catch (COMException) { }\n \n #pragma warning disable 618\n-#if RUNTIME_TYPE_NETCORE\n-            ITypeLib tlib = (ITypeLib)obj;\n-#else\n-            UCOMITypeLib tlib = (UCOMITypeLib)obj;\n-#endif\n+            ComTypes.ITypeLib tlib = (ComTypes.ITypeLib)obj;\n             if (tlib != null)\n             {\n                 IntPtr typeLibAttrPtr = IntPtr.Zero;\n-                tlib.GetLibAttr(out typeLibAttrPtr);\n-                var typeLibAttr = (TYPELIBATTR)Marshal.PtrToStructure(typeLibAttrPtr, typeof(TYPELIBATTR));\n-                tlib.ReleaseTLibAttr(typeLibAttrPtr);\n-                Guid tlbid = typeLibAttr.guid;\n-\n-                tlib.GetDocumentation(-1, out _, out string docString, out _, out string helpFile);\n-                string helpdir = Util.FilterNonprintableChars(helpFile); // Path.GetDirectoryName(helpFile);\n-\n-                TypeLib = new TypeLib(tlbid, new Version(typeLibAttr.wMajorVerNum, typeLibAttr.wMinorVerNum), helpdir, typeLibAttr.lcid, Convert.ToInt32(typeLibAttr.wLibFlags, CultureInfo.InvariantCulture));\n-\n-                var comClassList = new List<ComClass>();\n-                int count = tlib.GetTypeInfoCount();\n-                for (int i = 0; i < count; ++i)\n+                try\n                 {\n-                    tlib.GetTypeInfoType(i, out TYPEKIND tkind);\n-                    if (tkind == TYPEKIND.TKIND_COCLASS)\n-                    {\n-#if RUNTIME_TYPE_NETCORE\n-                        tlib.GetTypeInfo(i, out ITypeInfo tinfo);\n-#else\n-                        tlib.GetTypeInfo(i, out UCOMITypeInfo tinfo);\n-#endif\n+                    tlib.GetLibAttr(out typeLibAttrPtr);\n+                    var typeLibAttr = (ComTypes.TYPELIBATTR)Marshal.PtrToStructure(typeLibAttrPtr, typeof(ComTypes.TYPELIBATTR));\n+                    Guid tlbid = typeLibAttr.guid;\n \n-                        IntPtr tinfoAttrPtr = IntPtr.Zero;\n-                        tinfo.GetTypeAttr(out tinfoAttrPtr);\n-                        TYPEATTR tinfoAttr = (TYPEATTR)Marshal.PtrToStructure(tinfoAttrPtr, typeof(TYPEATTR));\n-                        tinfo.ReleaseTypeAttr(tinfoAttrPtr);\n-                        Guid clsid = tinfoAttr.guid;\n+                    tlib.GetDocumentation(-1, out _, out string docString, out _, out string helpFile);\n+                    string helpdir = Util.FilterNonprintableChars(helpFile); // Path.GetDirectoryName(helpFile);\n \n-                        tlib.GetDocumentation(i, out _, out docString, out _, out helpFile);\n-                        string description = Util.FilterNonprintableChars(docString);\n+                    TypeLib = new TypeLib(tlbid, new Version(typeLibAttr.wMajorVerNum, typeLibAttr.wMinorVerNum), helpdir, typeLibAttr.lcid, Convert.ToInt32(typeLibAttr.wLibFlags, CultureInfo.InvariantCulture));\n \n-                        ClassInfo info = GetRegisteredClassInfo(clsid);\n-                        if (info == null)\n+                    var comClassList = new List<ComClass>();\n+                    int count = tlib.GetTypeInfoCount();\n+                    for (int i = 0; i < count; ++i)\n+                    {\n+                        tlib.GetTypeInfoType(i, out ComTypes.TYPEKIND tkind);\n+                        if (tkind == ComTypes.TYPEKIND.TKIND_COCLASS)\n                         {\n-                            continue;\n+                            IntPtr tinfoAttrPtr = IntPtr.Zero;\n+                            tlib.GetTypeInfo(i, out ComTypes.ITypeInfo tinfo);\n+                            try\n+                            {\n+                                tinfo.GetTypeAttr(out tinfoAttrPtr);\n+                                ComTypes.TYPEATTR tinfoAttr = (ComTypes.TYPEATTR)Marshal.PtrToStructure(tinfoAttrPtr, typeof(ComTypes.TYPEATTR));\n+                                Guid clsid = tinfoAttr.guid;\n+\n+                                tlib.GetDocumentation(i, out _, out docString, out _, out helpFile);\n+                                string description = Util.FilterNonprintableChars(docString);\n+\n+                                ClassInfo info = GetRegisteredClassInfo(clsid);\n+                                if (info == null)\n+                                {\n+                                    continue;\n+                                }\n+                                comClassList.Add(new ComClass(tlbid, clsid, info.Progid, info.ThreadingModel, description));\n+                            }\n+                            finally\n+                            {\n+                                try\n+                                {\n+                                    if (tinfoAttrPtr != IntPtr.Zero)\n+                                    {\n+                                        tinfo.ReleaseTypeAttr(tinfoAttrPtr);\n+                                    }\n+                                    Marshal.ReleaseComObject(tinfo);\n+                                    tinfo = null;\n+                                }\n+                                // Ignore COM exceptions when releasing type attributes.\n+                                catch (COMException) {}",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider adding a comment explaining why COMExceptions are safely ignored during COM resource cleanup to aid future maintainers.",
              "createdAt": "2025-06-02T20:35:05Z",
              "path": "src/Tasks/ManifestUtil/ComImporter.cs",
              "diffHunk": "@@ -55,64 +53,86 @@ public ComImporter(string path, OutputMessageCollection outputMessages, string o\n             catch (COMException) { }\n \n #pragma warning disable 618\n-#if RUNTIME_TYPE_NETCORE\n-            ITypeLib tlib = (ITypeLib)obj;\n-#else\n-            UCOMITypeLib tlib = (UCOMITypeLib)obj;\n-#endif\n+            ComTypes.ITypeLib tlib = (ComTypes.ITypeLib)obj;\n             if (tlib != null)\n             {\n                 IntPtr typeLibAttrPtr = IntPtr.Zero;\n-                tlib.GetLibAttr(out typeLibAttrPtr);\n-                var typeLibAttr = (TYPELIBATTR)Marshal.PtrToStructure(typeLibAttrPtr, typeof(TYPELIBATTR));\n-                tlib.ReleaseTLibAttr(typeLibAttrPtr);\n-                Guid tlbid = typeLibAttr.guid;\n-\n-                tlib.GetDocumentation(-1, out _, out string docString, out _, out string helpFile);\n-                string helpdir = Util.FilterNonprintableChars(helpFile); // Path.GetDirectoryName(helpFile);\n-\n-                TypeLib = new TypeLib(tlbid, new Version(typeLibAttr.wMajorVerNum, typeLibAttr.wMinorVerNum), helpdir, typeLibAttr.lcid, Convert.ToInt32(typeLibAttr.wLibFlags, CultureInfo.InvariantCulture));\n-\n-                var comClassList = new List<ComClass>();\n-                int count = tlib.GetTypeInfoCount();\n-                for (int i = 0; i < count; ++i)\n+                try\n                 {\n-                    tlib.GetTypeInfoType(i, out TYPEKIND tkind);\n-                    if (tkind == TYPEKIND.TKIND_COCLASS)\n-                    {\n-#if RUNTIME_TYPE_NETCORE\n-                        tlib.GetTypeInfo(i, out ITypeInfo tinfo);\n-#else\n-                        tlib.GetTypeInfo(i, out UCOMITypeInfo tinfo);\n-#endif\n+                    tlib.GetLibAttr(out typeLibAttrPtr);\n+                    var typeLibAttr = (ComTypes.TYPELIBATTR)Marshal.PtrToStructure(typeLibAttrPtr, typeof(ComTypes.TYPELIBATTR));\n+                    Guid tlbid = typeLibAttr.guid;\n \n-                        IntPtr tinfoAttrPtr = IntPtr.Zero;\n-                        tinfo.GetTypeAttr(out tinfoAttrPtr);\n-                        TYPEATTR tinfoAttr = (TYPEATTR)Marshal.PtrToStructure(tinfoAttrPtr, typeof(TYPEATTR));\n-                        tinfo.ReleaseTypeAttr(tinfoAttrPtr);\n-                        Guid clsid = tinfoAttr.guid;\n+                    tlib.GetDocumentation(-1, out _, out string docString, out _, out string helpFile);\n+                    string helpdir = Util.FilterNonprintableChars(helpFile); // Path.GetDirectoryName(helpFile);\n \n-                        tlib.GetDocumentation(i, out _, out docString, out _, out helpFile);\n-                        string description = Util.FilterNonprintableChars(docString);\n+                    TypeLib = new TypeLib(tlbid, new Version(typeLibAttr.wMajorVerNum, typeLibAttr.wMinorVerNum), helpdir, typeLibAttr.lcid, Convert.ToInt32(typeLibAttr.wLibFlags, CultureInfo.InvariantCulture));\n \n-                        ClassInfo info = GetRegisteredClassInfo(clsid);\n-                        if (info == null)\n+                    var comClassList = new List<ComClass>();\n+                    int count = tlib.GetTypeInfoCount();\n+                    for (int i = 0; i < count; ++i)\n+                    {\n+                        tlib.GetTypeInfoType(i, out ComTypes.TYPEKIND tkind);\n+                        if (tkind == ComTypes.TYPEKIND.TKIND_COCLASS)\n                         {\n-                            continue;\n+                            IntPtr tinfoAttrPtr = IntPtr.Zero;\n+                            tlib.GetTypeInfo(i, out ComTypes.ITypeInfo tinfo);\n+                            try\n+                            {\n+                                tinfo.GetTypeAttr(out tinfoAttrPtr);\n+                                ComTypes.TYPEATTR tinfoAttr = (ComTypes.TYPEATTR)Marshal.PtrToStructure(tinfoAttrPtr, typeof(ComTypes.TYPEATTR));\n+                                Guid clsid = tinfoAttr.guid;\n+\n+                                tlib.GetDocumentation(i, out _, out docString, out _, out helpFile);\n+                                string description = Util.FilterNonprintableChars(docString);\n+\n+                                ClassInfo info = GetRegisteredClassInfo(clsid);\n+                                if (info == null)\n+                                {\n+                                    continue;\n+                                }\n+                                comClassList.Add(new ComClass(tlbid, clsid, info.Progid, info.ThreadingModel, description));\n+                            }\n+                            finally\n+                            {\n+                                try\n+                                {\n+                                    if (tinfoAttrPtr != IntPtr.Zero)\n+                                    {\n+                                        tinfo.ReleaseTypeAttr(tinfoAttrPtr);\n+                                    }\n+                                    Marshal.ReleaseComObject(tinfo);\n+                                    tinfo = null;\n+                                }\n+                                // Ignore COM exceptions when releasing type attributes.\n+                                catch (COMException) {}",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}