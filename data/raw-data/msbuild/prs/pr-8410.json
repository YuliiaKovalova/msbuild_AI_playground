{
  "number": 8410,
  "title": "Added support for logging interpolated strings in tasks.",
  "body": "Fixes #7875\r\n\r\n### Context\r\nEnables to log interpolated strings from tasks.\r\n\r\n### Changes Made\r\nAdded new interpolated string handler with overloads in ```TaskLoggingHelper```.\r\n\r\n### Testing\r\nNew unit tests added.\r\n\r\n### Notes\r\nI tried to use ```FormattableString```, but old overload had precedence.\r\nHandler is mutable value type, but mutating methods should be invoked by compiler generated code. If you are not comfortable with it, we can change it to reference type with heap allocation.",
  "state": "CLOSED",
  "createdAt": "2023-02-07T12:49:13Z",
  "updatedAt": "2023-02-08T14:02:29Z",
  "closedAt": "2023-02-08T13:44:17Z",
  "mergedAt": null,
  "additions": 1934,
  "deletions": 113,
  "changedFiles": 328,
  "headRefName": "dev/mipavlik/task-logger-improvements",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "14052b10101e61a1561349587797be77e16395df",
          "message": "[vs16.11] Update dependencies from dotnet/arcade (#7332)\n\n* Update dependencies from https://github.com/dotnet/arcade build 20220105.3\r\n\r\nMicrosoft.DotNet.Arcade.Sdk\r\n From Version 5.0.0-beta.21505.11 -> To Version 5.0.0-beta.22055.3\r\n\r\n* Update dependencies from https://github.com/dotnet/arcade build 20220204.7\r\n\r\nMicrosoft.DotNet.Arcade.Sdk\r\n From Version 5.0.0-beta.21505.11 -> To Version 5.0.0-beta.22104.7\r\n\r\n* Update dependencies from https://github.com/dotnet/arcade build 20220222.5\r\n\r\nMicrosoft.DotNet.Arcade.Sdk\r\n From Version 5.0.0-beta.21505.11 -> To Version 5.0.0-beta.22122.5\r\n\r\n* Update dependencies from https://github.com/dotnet/arcade build 20220223.4\r\n\r\nMicrosoft.DotNet.Arcade.Sdk\r\n From Version 5.0.0-beta.21505.11 -> To Version 5.0.0-beta.22123.4\r\n\r\n* update mac version\r\n\r\nCo-authored-by: dotnet-maestro[bot] <dotnet-maestro[bot]@users.noreply.github.com>\r\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-03-03T13:44:59Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd34b35347a9cf15b8875c199399ea96d2d78cc2",
          "message": "Update dependencies from https://github.com/dotnet/arcade build 20220309.5\n\nMicrosoft.DotNet.Arcade.Sdk\n From Version 5.0.0-beta.22123.4 -> To Version 5.0.0-beta.22159.5",
          "committedDate": "2022-03-10T13:24:35Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e7498c064121704581d9e8af9dd00c3c5a2d52ac",
          "message": "Update dependencies from https://github.com/dotnet/arcade build 20220526.2\n\nMicrosoft.DotNet.Arcade.Sdk\n From Version 5.0.0-beta.22123.4 -> To Version 5.0.0-beta.22276.2",
          "committedDate": "2022-05-27T12:43:24Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d4295a1c62bcd675458b1a5033b1b04061c72f2",
          "message": "Bump CLI version to match global.json",
          "committedDate": "2022-06-01T17:04:09Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d8881d0ad5851f31d2f55f5e805a0f7db81682d",
          "message": "Bump NuGet version to match",
          "committedDate": "2022-06-01T17:32:22Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "026c2fe9245cc28ac1db8591296bea3a5fc58a0d",
          "message": "Avoid AssemblyName.KeyPair on .NET (#7660)\n\n* Avoid AssemblyName.KeyPair on .NET\r\n\r\nIt throws on .NET 6 and wasn't helpful before anyway:\r\n\r\n(from https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyname.keypair?view=net-5.0#remarks):\r\n\r\n> When the runtime loads an assembly, it does not set the KeyPair property. The getter for the property is only useful if the user set the property before using the AssemblyName object to create a dynamic assembly, and subsequently wants to retrieve the key pair.\r\n\r\nAlso disable some parts of the official build that are currently broken, but don't affect building the bits that go into the .NET SDK.\r\n\r\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-01T18:05:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "420c4f7cf809265baae3c465d8c0605669ee9422",
          "message": "Merge remote-tracking branch 'upstream/vs16.9' into backport-keypair-elision-16.11",
          "committedDate": "2022-06-01T18:14:12Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d7fe36cf16d04304415e847f64411f52a3b9d8b",
          "message": "Merge pull request #7663 from rainersigwald/backport-keypair-elision-16.11\n\nFixes dotnet/sdk#25698 for 16.11, merging forward (+ infrastructure updates).",
          "committedDate": "2022-06-01T19:02:20Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9cb5d94cce6584c4a3b498741049856fe7235f92",
          "message": " Configure OptProf v2 pipeline 16.11 (#8189)\n\n* Update the runsettings configuration creation for opt-prof v2 pipeline.\r\n\r\n* Add opt-prof v2 pipeline configuration yml.",
          "committedDate": "2022-11-28T16:20:08Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25bfc0867f0efaebcc9ba0cfe0c1f03e0ea54852",
          "message": "Updating 'Microsoft.DotNet.Arcade.Sdk': '5.0.0-beta.22276.2' => '5.0.0-beta.22526.12'",
          "committedDate": "2022-12-01T20:17:42Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a3a06f6542a37031f8691bd7b24d4c2c244c610",
          "message": "Move BAR publish to windows-latest\n\nThe win2016 images aren't live any more.",
          "committedDate": "2022-12-01T20:17:42Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "744e12e8dd3951e68652783a91b66e37b9226b1e",
          "message": "Merge pull request #8210 from rainersigwald/exp/16.11-build\n\nBuild updates for 16.11",
          "committedDate": "2022-12-02T19:38:00Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a3c3ba40219169d71023016fefd1207bd50df78",
          "message": "Merge remote-tracking branch 'upstream/vs16.11' into exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2",
          "committedDate": "2022-12-14T17:02:43Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d9f4185d317a6a44337c695eb9ed507fe65af301",
          "message": "Merge pull request #8260 from dotnet/exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2\n\nBackport opt-prof v2 vs17.0 \r\n\r\n- [vs16.11] Update dependencies from dotnet/arcade (https://github.com/dotnet/msbuild/pull/7332)\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220309.5\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220526.2\r\n- Bump CLI version to match global.json\r\n- Bump NuGet version to match\r\n- Avoid AssemblyName.KeyPair on .NET (https://github.com/dotnet/msbuild/pull/7660)\r\n- Merge remote-tracking branch 'upstream/vs16.9' into backport-keypair-elision-16.11\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/7663 from rainersigwald/backport-keypair-elision-16.11\r\n- Configure OptProf v2 pipeline 16.11 (https://github.com/dotnet/msbuild/pull/8189)\r\n- Updating 'Microsoft.DotNet.Arcade.Sdk': '5.0.0-beta.22276.2' => '5.0.0-beta.22526.12'\r\n- Move BAR publish to windows-latest\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8210 from rainersigwald/exp/16.11-build\r\n\r\n### Testing\r\nCI, Opt-prof CI",
          "committedDate": "2022-12-21T11:02:47Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b9fc9e357425ad86392533e54dd4a93c4b3cde6",
          "message": "Merge remote-tracking branch 'upstream/vs17.0' into exp/AR-May/opt-prof-fix-vs17.0-to-vs17.2",
          "committedDate": "2022-12-22T15:24:16Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94fcedff92af1ebdb1f1f4b74c38ef2498a57ce8",
          "message": "Merge pull request #8264 from AR-May/exp/AR-May/opt-prof-fix-vs17.0-to-vs17.2\n\nBackport opt-prof v2 vs17.2\r\n\r\nBrings the following changes from the 17.0 branch into 17.2:\r\n- [vs16.11] Update dependencies from dotnet/arcade (https://github.com/dotnet/msbuild/pull/7332)\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220309.5\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220526.2\r\n- Bump CLI version to match global.json\r\n- Bump NuGet version to match\r\n- Avoid AssemblyName.KeyPair on .NET (https://github.com/dotnet/msbuild/pull/7660)\r\n- Merge remote-tracking branch 'upstream/vs16.9' into backport-keypair-elision-16.11\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/7663 from rainersigwald/backport-keypair-elision-16.11\r\n- Configure OptProf v2 pipeline 16.11 (https://github.com/dotnet/msbuild/pull/8189)\r\n- Updating 'Microsoft.DotNet.Arcade.Sdk': '5.0.0-beta.22276.2' => '5.0.0-beta.22526.12'\r\n- Move BAR publish to windows-latest\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8210 from rainersigwald/exp/16.11-build\r\n- Merge remote-tracking branch 'upstream/vs16.11' into exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8260 from dotnet/exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2\r\n\r\n### Testing\r\nCI",
          "committedDate": "2023-01-10T07:54:28Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bee335cbc8109c9f80898fcaa2d58295435df3ab",
          "message": "Merge remote-tracking branch 'upstream/vs17.2' into dev/AR-May/opt-prof-fix-vs17.2-to-vs17.4",
          "committedDate": "2023-01-12T10:25:12Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fedecea9d0d923d3520309dcf69e1dd4a485ef75",
          "message": "Merge pull request #8304 from dotnet/dev/AR-May/opt-prof-fix-vs17.2-to-vs17.4\n\nBackport opt-prof v2 vs17.4\r\n\r\nBrings the following changes from the 17.2 branch into 17.4:\r\n- [vs16.11] Update dependencies from dotnet/arcade (https://github.com/dotnet/msbuild/pull/7332)\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220309.5\r\n- Update dependencies from https://github.com/dotnet/arcade build 20220526.2\r\n- Bump CLI version to match global.json\r\n- Bump NuGet version to match\r\n- Avoid AssemblyName.KeyPair on .NET (https://github.com/dotnet/msbuild/pull/7660)\r\n- Merge remote-tracking branch 'upstream/vs16.9' into backport-keypair-elision-16.11\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/7663 from rainersigwald/backport-keypair-elision-16.11\r\n- Configure OptProf v2 pipeline 16.11 (https://github.com/dotnet/msbuild/pull/8189)\r\n- Updating 'Microsoft.DotNet.Arcade.Sdk': '5.0.0-beta.22276.2' => '5.0.0-beta.22526.12'\r\n- Move BAR publish to windows-latest\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8210 from rainersigwald/exp/16.11-build\r\n- Merge remote-tracking branch 'upstream/vs16.11' into exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8260 from dotnet/exp/AR-May/opt-prof-fix-vs16.11-to-vs17.0-2\r\n- Merge remote-tracking branch 'upstream/vs17.0' into exp/AR-May/opt-prof-fix-vs17.0-to-vs17.2\r\n- Merge pull request https://github.com/dotnet/msbuild/pull/8264 from AR-May/exp/AR-May/opt-prof-fix-vs17.0-to-vs17.2\r\n\r\n### Testing\r\nCI",
          "committedDate": "2023-01-19T22:38:57Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e845a470933630f3690f5f74d98dbc2509cd0f7b",
          "message": "Added support for logging interpolated strings in tasks.",
          "committedDate": "2023-02-07T12:41:35Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3541c6a284e10eacd615e2f9568c9f484a0b417",
          "message": "dotnet/msbuild#6521 `ObjectModelHelpers` refactoring (#8327)\n\nFixes #6521\r\n\r\nContext\r\nDid suggested refactoring in the issue.\r\nNullMetadataOnLegacyOutputItems_InlineTask won't be fixed as it tests Deprecated code, and change is needed there.\r\n\r\nChanges Made\r\nloggers are now passed to evaluation\r\nability to set logger verbosity to MockLogger and when using BuildProjectExpectSuccess and BuildProjectExpectFailure\r\nsame loggers are reused during build when using BuildProjectExpectSuccess and BuildProjectExpectFailure\r\nregistering logging is now done before the project is evaluated\r\nimproved doc and formatting in changed files\r\ndisposing of ProjectCollection in BuildProjectExpectSuccess and BuildProjectExpectFailure\r\nTesting\r\nTesting only changes\r\n\r\nNotes\r\nThere are other calls to ObjectModelHelpers.CreateInMemoryProject which do not dispose ProjectCollection. Those needs to be fixed separately.",
          "committedDate": "2023-02-08T02:07:11Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a57cc6d3d371806f402aa1e87486b2d9a97dacdf",
          "message": "Add nodes orchestration doc (#8383)\n\nEnriched transcript of a talk with @rainersigwald about MSBuild nodes orchestration and scheduling.\r\n\r\nI added some extra interpretations and links that were not voiced in the talk - so I'll be happy for review for corectness of the doc.",
          "committedDate": "2023-02-08T08:37:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8afdfd02f002bcf66b001caee884c7fef42b70f2",
          "message": "Add a comment to all sources under src/Deprecated (#8380)\n\nContext\r\nI regularly find myself making changes to files without realizing they are in the deprecated part of the tree. Having a clear \"you're not supposed to be here\" indicator would save me time.\r\n\r\nChanges Made\r\nAdded a comment to all C# files under src/Deprecated. This should help in cases when the developer opens the file by name (e.g. using a GoToFile IDE functionality).\r\n\r\nTesting\r\ngit diff --stat to make sure all files got exactly +4 lines.\r\n\r\nNotes\r\nThe change was made with a script that preserves the BOM in the files.\r\nThe comment is a minor rewording of src/Deprecated/README.md.\r\nI sometimes get to these files using FindInFiles IDE functionality which immediately scrolls the file to the hit line so this comment won't help.",
          "committedDate": "2023-02-08T08:44:40Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d5ca47912d6b272a348fc8a0c8c85ed938f4559",
          "message": "Enable temporary comm logging for CanShutdownServerProcess test (#8378)\n\nContext\r\nCanShutdownServerProcess seems to be flaky. We need more logs to find out why...\r\n\r\nChanges Made\r\n\r\nAdd support for enabling DebugEngine in integration tests\r\nUse it in CanShutdownServerProcess and other flaky test",
          "committedDate": "2023-02-08T08:57:35Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "70ac2f28819cd0d3e1c8f294255cd680ae39ca20",
          "message": "Add .DS_Store to .gitignore (#8377)\n\nContext\r\nDS_Store files are automatically created by MacOS Finder on any directory to include metadata about it. This information however, is useless to the repo. Hence should not be included in commits.\r\n\r\nChanges Made\r\nUpdated .gitignore to include .DS_Store in all subdirectories.",
          "committedDate": "2023-02-08T09:10:19Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1085e2153e63ac7cb39b796eb7f46359d2bd6e62",
          "message": "Merge pull request #8323 from dotnet-maestro-bot/merge/vs17.4-to-main\n\n[automated] Merge branch 'vs17.4' => 'main'",
          "committedDate": "2023-02-08T09:16:00Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "03dae90561212229fc1142afe4c5b4a393f95082",
          "message": "Introduce backport GHA (#8368)\n\nContext\r\nIntroduces backport GitHub action for automation-aided propagation of changes between branches.\r\n\r\nusage:\r\ncomment\r\n/backport to <target bracnh>\r\non PR that needs to be backported (ideally after merging). New PR will be created backporting to the requested branch.",
          "committedDate": "2023-02-08T09:35:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c2ea7ba8d169a55500b80a413ee633358d4cbe1",
          "message": "[main] Update dependencies from dotnet/roslyn (#8338)\n\nFrom https://github.com/dotnet/roslyn\r\nSubscription: 848bf81b-14ec-482f-6736-08da008bd46a\r\nBuild: 20230201.20\r\nDate Produced: February 2, 2023 5:54:27 AM UTC\r\nCommit: 6dad5961f644841633aad59a70ea01fb580a7b12\r\nBranch: refs/heads/release/dev17.5-vs-deps\r\nUpdates:\r\nMicrosoft.Net.Compilers.Toolset: from 4.5.0-3.23062.15 to 4.5.0-6.23101.20",
          "committedDate": "2023-02-08T09:38:46Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f0f9c506b5daec42aa7ebce4ba9e905393d243a5",
          "message": "Bump Microsoft.CodeAnalysis.BannedApiAnalyzers in /eng/dependabot (#8335)\n\nBumps Microsoft.CodeAnalysis.BannedApiAnalyzers from 3.3.3 to 3.3.4.\r\n\r\nRelease notes\r\nSourced from Microsoft.CodeAnalysis.BannedApiAnalyzers's releases.\r\n\r\nv3.3.4\r\nRelease build of Roslyn-analyzers based on Microsoft.CodeAnalysis 3.3.1 NuGet packages. Works with VS 2019 16.9 or later.\r\n\r\nContains important functionality and performance bug fixes on top of v3.3.3 release\r\nCommits\r\n22ea642 Merge pull request #6436 from ViktorHofer/patch-1\r\n9018071 Fix buildtransitive vs buildTransitive difference\r\nafa5665 [main] Update dependencies from dotnet/arcade (#6423)\r\nafee469 Merge pull request #6427 from mavasani/CodeAnalysisTreatWarningsAsErrors_Glob...\r\nb858999 Merge pull request #6430 from dotnet/locfiles/be3abf9f-1f22-469b-b26d-7648587...\r\n0cbc3c5 Localized file check-in by OneLocBuild Task: Build definition ID 830: Build I...\r\n113dadc Merge pull request #6429 from dotnet/revert-6364-net7-tests\r\n356147f Revert \"Move tests to target .NET 7\"\r\n1d7244a Update documentation for CodeAnalysisTreatWarningsAsErrors implementation\r\n6c028d3 Re-implement CodeAnalysisTreatWarningsAsErrors with globalconfig files\r\nAdditional commits viewable in compare view",
          "committedDate": "2023-02-08T09:41:55Z",
          "author": {
            "name": "dependabot[bot]",
            "email": "49699333+dependabot[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51df47643a8ee2715ac67fab8d652b25be070cd2",
          "message": "Add ability to create temp mapped drive for integration tests (#8366)\n\nFixes #7330\r\n(plus one subtask of #8329)\r\n\r\nTests only change (no production code affected)\r\n\r\nContext\r\nDrive enumeration integration tests need to simulate attempt to enumerate whole drive.\r\nTo prevent security and test runtime considerations - a dummy folder is created and mapped to a free letter to be offered to test as a drive for enumeration.\r\n\r\nChanges Made\r\nAdded utility for mapping drives and mounted to affected unit tests.",
          "committedDate": "2023-02-08T09:46:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e9da82a811c59ccce70288396c39b4b9a35cadb",
          "message": "Added support for logging interpolated strings in tasks.",
          "committedDate": "2023-02-08T12:55:11Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eee84dddc63b38f5749af6f04c7d818dbcbd00ce",
          "message": "Merge branch 'dev/mipavlik/task-logger-improvements' of https://github.com/dotnet/msbuild into dev/mipavlik/task-logger-improvements",
          "committedDate": "2023-02-08T12:55:21Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4fdf2f417a8b7292716c46ba060c5f5c63f1039c",
          "message": "Added support for logging interpolated strings in tasks.",
          "committedDate": "2023-02-08T13:38:18Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd35a864a0558886a9bb51e8118501f4adf7e3a8",
          "message": "Resolving conflicts",
          "committedDate": "2023-02-08T13:40:20Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Oh, this is a really cool enhancement - I've been feeling the pain for logging with interpolated vs format strings, and this targets that pain very nicely.\r\n\r\nHow does localization/resource strings interact with interpolated strings? It seems like it wouldn't at first glance?\r\n\r\nAlso - does this same interpolated handler mechanism work with the overloads of LogMessage/LogWarning/LogError that let the author provide a code, help link, line location, etc? For completeness it seems like anywhere we have the `string format, params obj formatArgs` pattern we could/should be using this.",
        "createdAt": "2023-02-07T14:15:07Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I think localization is not in scope of this issue, but it's interesting problem. \r\nAnd yes, it looks like I can provide more overloads :)",
        "createdAt": "2023-02-07T15:39:55Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "Something really wrong happened when resolving conflicts :( I will create new one.\r\n\r\nNew PR: #8424",
        "createdAt": "2023-02-08T13:45:02Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> Something really wrong happened when resolving conflicts :( I will create new one.\r\n\r\nhttps://xkcd.com/1597/ :-)",
        "createdAt": "2023-02-08T13:53:21Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this problematic if you want something like $\"my{0}literal{0}string{0}\"?",
              "createdAt": "2023-02-07T22:03:02Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "rather this:\r\n```\r\nvar longString = \"loooooooooooooooooooooooooooooooooooooooooooooooooong\";\r\nLog.LogMessage($\"msg: {longString}\");\r\n```\r\n\r\nI believe we cannot avaoid reallocations. How is this handled in the default interpolation handler in runtime?",
              "createdAt": "2023-02-08T08:19:46Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Oh I see now - we are actually translating interpolated string into formatted string - interresting. Than I take it back - all good.\r\n\r\n> Is this problematic if you want something like $\"my{0}literal{0}string{0}\"?\r\nAFAIK each eargument in interpolated string is a separate argument - your example likely translates to `Arguments` having 3 items (all being literal `0`).\r\nStill a fair question and worth explicit unit test. ",
              "createdAt": "2023-02-08T08:25:21Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I believe it's not a problem. ```literalLength``` is a length of literal parts of the string. I added more space (4 times parameter count) to reserve characters for {x} and {xx} tokens as I have to create string format for the event.",
              "createdAt": "2023-02-08T12:04:41Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this be:\r\n```suggestion\r\n            position += indexString.Length + 2; // + 2 for { and }\r\n```\r\n\r\n?",
              "createdAt": "2023-02-07T22:04:32Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];\n+\n+            if (formattedCount > 0)\n+            {\n+                Arguments = new object[formattedCount];\n+            }\n+        }\n+\n+        public void AppendLiteral(string s)\n+        {\n+            s.AsSpan().CopyTo(buffer.AsSpan().Slice(position));\n+            position += s.Length;\n+        }\n+\n+        public void AppendFormatted<T>(T t)\n+        {\n+            string indexString = argPosition.ToString();\n+            buffer[position++] = '{';\n+            indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));\n+            position += indexString.Length;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Instead of incrementing on line 46 and 49 for better readability? I have to increment on line 46, because I need current ```position``` value on the next line.\r\n\r\nOr I can use ```.Slice(position + 1)```, but I don't think code will be more readable (it's based on what I usually see in other code bases) :)",
              "createdAt": "2023-02-08T12:10:43Z",
              "path": "src/Framework/LogInterpolatedStringHandler.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+#if NET6_0_OR_GREATER\n+\n+using System;\n+using System.Runtime.CompilerServices;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    [InterpolatedStringHandler]\n+    public ref struct LogInterpolatedStringHandler\n+    {\n+        private char[] buffer;\n+        private int position = 0;\n+        private int argPosition = 0;\n+\n+        public object[] Arguments { get; } = Array.Empty<object>();\n+\n+        public LogInterpolatedStringHandler(int literalLength, int formattedCount)\n+        {\n+            if (formattedCount > 99)\n+            {\n+                throw new ArgumentOutOfRangeException(\"Number of formatted arguments must be less than 100.\");\n+            }\n+\n+            // Length is computed with reserved space for \"{x}\" and \"{xx}\" placeholders \n+            buffer = new char[literalLength + (4 * formattedCount)];\n+\n+            if (formattedCount > 0)\n+            {\n+                Arguments = new object[formattedCount];\n+            }\n+        }\n+\n+        public void AppendLiteral(string s)\n+        {\n+            s.AsSpan().CopyTo(buffer.AsSpan().Slice(position));\n+            position += s.Length;\n+        }\n+\n+        public void AppendFormatted<T>(T t)\n+        {\n+            string indexString = argPosition.ToString();\n+            buffer[position++] = '{';\n+            indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));\n+            position += indexString.Length;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}