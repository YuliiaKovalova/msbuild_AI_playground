{
  "number": 7302,
  "title": "Refactoring: use C# pattern matching for type checking & type casting.",
  "body": "### Context\r\nThere are places in code ([example](https://github.com/dotnet/msbuild/blob/764b54b73225a14353e2a1a10e72ae8febb779e0/src/Build/BackEnd/Components/Logging/LoggingService.cs#L1478-L1481)) where an obsolete and suboptimal way of type checking + type casting is used.\r\n\r\n### Changes Made\r\nClean up obsolete type checking + type casting, using C# pattern matching instead.\r\n\r\n### Testing\r\nUnit tests.",
  "state": "MERGED",
  "createdAt": "2022-01-18T13:10:42Z",
  "updatedAt": "2022-01-26T08:22:02Z",
  "closedAt": "2022-01-26T08:22:02Z",
  "mergedAt": "2022-01-26T08:22:02Z",
  "additions": 126,
  "deletions": 144,
  "changedFiles": 38,
  "headRefName": "code-modernization-type-checks",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "83d3f1ddc77fa195942b3558ef288f3521450709",
          "message": "Clean up obsolete type checking + type casting.",
          "committedDate": "2022-01-17T18:13:04Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c07698111942a0f7fcf44d7179c0629fd62f4d7e",
          "message": "Address pr review comments.",
          "committedDate": "2022-01-24T17:20:24Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9582cd0dc6a686e85a6491b0c7cf18f5de853e5",
          "message": "Add a space after if keywords.",
          "committedDate": "2022-01-24T17:20:24Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63493d3e3cde046ccc660790c04d2806e52ddea3",
          "message": "Fix one more place.",
          "committedDate": "2022-01-24T17:20:24Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nreturn obj is ProfiledLocation location &&\r\n           InclusiveTime.Equals(location.InclusiveTime) &&\r\n...\r\n?",
              "createdAt": "2022-01-18T23:07:17Z",
              "path": "src/Framework/Profiler/ProfilerResult.cs",
              "diffHunk": "@@ -73,15 +73,14 @@ public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numb\n         /// <inheritdoc />\n         public override bool Equals(object obj)\n         {\n-            if (!(obj is ProfiledLocation))\n+            if (obj is ProfiledLocation location)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this structure? I would've preferred more \"obj is type name.\"",
              "createdAt": "2022-01-18T23:08:12Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -284,11 +284,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)\n                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);\n                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();\n \n-                if (nonGenericEscapedMetadata is Dictionary<string, string>)\n-                {\n-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;\n-                }\n-                else\n+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It is because we need here to have a bigger visibility scope for `escapedMetadata` variable than `is` pattern allows and I did not want to create a new variable given that `as` pattern works well.",
              "createdAt": "2022-01-21T14:29:54Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -284,11 +284,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)\n                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);\n                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();\n \n-                if (nonGenericEscapedMetadata is Dictionary<string, string>)\n-                {\n-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;\n-                }\n-                else\n+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                        AssemblyFoldersEx assemblyFoldersEx = assemblyFoldersExResolver.AssemblyFoldersExLocations;\r\n```",
              "createdAt": "2022-01-18T23:08:36Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1257,9 +1256,9 @@ List<Exception> generalResolutionExceptions\n             {\n                 foreach (Resolver r in dependencyTable.Resolvers)\n                 {\n-                    if (r is AssemblyFoldersExResolver)\n+                    if (r is AssemblyFoldersExResolver assemblyFoldersExResolver)\n                     {\n-                        AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;\n+                        AssemblyFoldersEx assemblyFoldersEx = (assemblyFoldersExResolver).AssemblyFoldersExLocations;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                    allowMOTW = allowUntrustedFilesString.Equals(\"true\", StringComparison.OrdinalIgnoreCase);\r\n```",
              "createdAt": "2022-01-18T23:08:57Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -552,9 +552,9 @@ static GenerateResource()\n             try\n             {\n                 object allowUntrustedFiles = Registry.GetValue(@\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\SDK\", \"AllowProcessOfUntrustedResourceFiles\", null);\n-                if (allowUntrustedFiles is String)\n+                if (allowUntrustedFiles is String allowUntrustedFilesString)\n                 {\n-                    allowMOTW = ((string)allowUntrustedFiles).Equals(\"true\", StringComparison.OrdinalIgnoreCase);\n+                    allowMOTW = (allowUntrustedFilesString).Equals(\"true\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                if (allowUntrustedFiles is string allowUntrustedFilesString)\r\n```",
              "createdAt": "2022-01-18T23:09:11Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -552,9 +552,9 @@ static GenerateResource()\n             try\n             {\n                 object allowUntrustedFiles = Registry.GetValue(@\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\SDK\", \"AllowProcessOfUntrustedResourceFiles\", null);\n-                if (allowUntrustedFiles is String)\n+                if (allowUntrustedFiles is String allowUntrustedFilesString)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can do the same trick as below:\r\nreturn obj is ProfilerResult result &&\r\nProfiledLocations == result.ProfiledLocations...",
              "createdAt": "2022-01-24T17:25:59Z",
              "path": "src/Framework/Profiler/ProfilerResult.cs",
              "diffHunk": "@@ -28,13 +28,11 @@ public ProfilerResult(IDictionary<EvaluationLocation, ProfiledLocation> profiled\n         /// <inheritdoc />\n         public override bool Equals(object obj)\n         {\n-            if (!(obj is ProfilerResult))\n+            if (!(obj is ProfilerResult result))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, I could, but I do not like the logic expression that I get in this case. It starts to have too complicated logic structure and for me it is more readable this way.",
              "createdAt": "2022-01-24T17:42:01Z",
              "path": "src/Framework/Profiler/ProfilerResult.cs",
              "diffHunk": "@@ -28,13 +28,11 @@ public ProfilerResult(IDictionary<EvaluationLocation, ProfiledLocation> profiled\n         /// <inheritdoc />\n         public override bool Equals(object obj)\n         {\n-            if (!(obj is ProfilerResult))\n+            if (!(obj is ProfilerResult result))",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}