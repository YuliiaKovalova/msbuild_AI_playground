{
  "number": 8576,
  "title": "Remove unnecessary remove from ProjectRootElementCache",
  "body": "It's fairly straightforward to demonstrate that if we reach this block, then it isn't in the _strongCache anyway, so this is entirely unnecessary work.\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-17T19:33:30Z",
  "updatedAt": "2023-05-04T18:16:48Z",
  "closedAt": "2023-05-04T18:16:47Z",
  "mergedAt": "2023-05-04T18:16:46Z",
  "additions": 32,
  "deletions": 12,
  "changedFiles": 2,
  "headRefName": "delete-extra-remove",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "eaa2dd1f483209ec90e6857744f9d1610025e1ee",
          "message": "Remove unnecessary remove\n\nIt's fairly straightforward to demonstrate that if we reach this block, then it isn't in the _strongCache anyway, so this is entirely unnecessary work.",
          "committedDate": "2023-03-17T19:33:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "742ad7a0abddac91658bd7c4fbb0a63d756ee9a5",
          "message": "PR comment",
          "committedDate": "2023-03-21T22:22:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b8d3b8355ca8a70b030371734cde8e43979a335",
          "message": "Include nulls",
          "committedDate": "2023-03-23T19:16:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9bd1b660d3d60a853a9e3fb388f6e994ea47b176",
          "message": "Avoid NREs",
          "committedDate": "2023-03-23T19:17:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> > The iteration pattern foreach (string projectPath in oldWeakCache.Keys) is pretty inefficient.\r\n> \r\n> When I was working on the simpler loops PR, this one stuck out to me as one I wanted to optimize but was having trouble finding a way to make it better because I can't iterate over kvps in a weak cache. What do you suggest?\r\n\r\nI was thinking about having `WeakValueDictionary<K, V>` implement `IEnumerable<KeyValuePair<K, V>>` like so:\r\n\r\n```C#\r\n        public IEnumerator<KeyValuePair<K, V>> GetEnumerator()\r\n        {\r\n            foreach (KeyValuePair<K, WeakReference<V>> kvp in _dictionary)\r\n            {\r\n                if (kvp.Value == null)\r\n                {\r\n                    yield return new KeyValuePair<K, V>(kvp.Key, null);\r\n                }\r\n                else if (kvp.Value.TryGetTarget(out V target))\r\n                {\r\n                    yield return new KeyValuePair<K, V>(kvp.Key, target);\r\n                }\r\n            }\r\n        }\r\n```",
        "createdAt": "2023-03-20T17:10:40Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > > The iteration pattern foreach (string projectPath in oldWeakCache.Keys) is pretty inefficient.\r\n> > \r\n> > \r\n> > When I was working on the simpler loops PR, this one stuck out to me as one I wanted to optimize but was having trouble finding a way to make it better because I can't iterate over kvps in a weak cache. What do you suggest?\r\n> \r\n> I was thinking about having `WeakValueDictionary<K, V>` implement `IEnumerable<KeyValuePair<K, V>>` like so:\r\n> \r\n> ```cs\r\n>         public IEnumerator<KeyValuePair<K, V>> GetEnumerator()\r\n>         {\r\n>             foreach (KeyValuePair<K, WeakReference<V>> kvp in _dictionary)\r\n>             {\r\n>                 if (kvp.Value == null)\r\n>                 {\r\n>                     yield return new KeyValuePair<K, V>(kvp.Key, null);\r\n>                 }\r\n>                 if (kvp.Value.TryGetTarget(out V target))\r\n>                 {\r\n>                     yield return new KeyValuePair<K, V>(kvp.Key, target);\r\n>                 }\r\n>             }\r\n>         }\r\n> ```\r\n\r\nI totally missed that WeakValueDictionary was something we owned! I'd be happy to implement that as part of this PR or as something separate!",
        "createdAt": "2023-03-20T17:28:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I implemented IEnumerable<K, V>. I'm unclear on the merit of returning (key, null) if the V was collected already, so I left that part out, but if there's a good reason for it, I'm happy to add it back. (In the use case in this PR, it just leads to extra checks on the other end.)",
        "createdAt": "2023-03-21T22:25:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I implemented IEnumerable<K, V>. I'm unclear on the merit of returning (key, null) if the V was collected already, so I left that part out, but if there's a good reason for it, I'm happy to add it back. (In the use case in this PR, it just leads to extra checks on the other end.)\r\n\r\n(key, null) would be returned if the value stored in the dictionary was actually null (different from a originally non-null but now collected value - that should not be returned). Your implementation works for the use case of enumerating non-null values but it is not consistent with the rest of its API. It should enumerate all keys, for which `TryGetValue` returns true.",
        "createdAt": "2023-03-22T06:39:26Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nit / pre-existing issue] What guarantees that this PRE was in the old strong cache and is actually being removed? It looks like we also get here if it was a regular weak-only not-explicitly-loaded entry.",
              "createdAt": "2023-03-20T13:51:57Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -460,7 +460,6 @@ internal override void DiscardImplicitReferences()\n                         }\n                         else\n                         {\n-                            _strongCache.Remove(rootElement);\n                             RaiseProjectRootElementRemovedFromStrongCache(rootElement);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good point. There are multiple ways we could go down this path and erroneously call the remove event. I wanted to make this an unambiguous no-op, so I stopped short of removing the next call, which might be legitimate. If I were to rework it to be more correct, I think this is best:\r\n\r\n```C#\r\nif (rootElement.IsExplicitlyLoaded)\r\n{\r\n    if (oldStrongCache.Contains(rootElement))\r\n    {\r\n        _strongCache.AddFirst(rootElement);\r\n    }\r\n    else\r\n    {\r\n        // Has already been removed. We can consider adding it to the strong cache here...but it probably isn't worth it\r\n    }\r\n}\r\nelse\r\n{\r\n    if (oldStrongCache.Contains(rootElement))\r\n    {\r\n        RaiseProjectRootElementRemovedFromStrongCache(rootElement);\r\n    }\r\n    else\r\n    {\r\n        // Element was not in the strong cache and should not be added to it --> no op\r\n    }\r\n}\r\n```\r\n\r\nor more simply\r\n\r\n```C#\r\nif (oldStrongCache.Contains(rootElement))\r\n{\r\n    if (rootElement.IsExplicitlyLoaded)\r\n    {\r\n        _strongCache.AddFirst(rootElement);\r\n    }\r\n    else\r\n    {\r\n        RaiseProjectRootElementRemovedFromStrongCache(rootElement);\r\n    }\r\n}\r\n```\r\n\r\nI think either is better from a correctness perspective, but it means we'd always be calling Contains, which is a bit slow.",
              "createdAt": "2023-03-20T14:50:03Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -460,7 +460,6 @@ internal override void DiscardImplicitReferences()\n                         }\n                         else\n                         {\n-                            _strongCache.Remove(rootElement);\n                             RaiseProjectRootElementRemovedFromStrongCache(rootElement);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "What if we make it iterate over the strong cache? Should be doable in one pass. And as a bonus, it would preserve the order, which the current implementation does not.",
              "createdAt": "2023-03-21T06:50:57Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -460,7 +460,6 @@ internal override void DiscardImplicitReferences()\n                         }\n                         else\n                         {\n-                            _strongCache.Remove(rootElement);\n                             RaiseProjectRootElementRemovedFromStrongCache(rootElement);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The only issue I see with that is that we're also discarding implicit references in the weak cache in this pass, and since there can be ProjectRootElements in the weak cache but not the strong cache, we'd be deleting those from the weak cache whether they're explicitly loaded and not GC'd or not.",
              "createdAt": "2023-03-21T22:13:27Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -460,7 +460,6 @@ internal override void DiscardImplicitReferences()\n                         }\n                         else\n                         {\n-                            _strongCache.Remove(rootElement);\n                             RaiseProjectRootElementRemovedFromStrongCache(rootElement);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}