{
  "number": 8225,
  "title": "Include Microsoft.Extensions.* nuget dependencies in Bootstrap",
  "body": "This fixes an exception when trying to use a locally built and bootstrapped msbuild, specifically in the NuGet SDK resolver:\r\n```\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Extensions.FileProviders.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'Microsoft.Extensions.FileProviders.Abstractions, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n   at NuGet.Commands.ContentFileUtils.GetContentFileGroup(NuspecReader nuspec, List`1 contentFileGroups)\r\n   at NuGet.Commands.LockFileUtils.AddContentFiles(ManagedCodeConventions managedCodeConventions, LockFileTargetLibrary lockFileLib, NuGetFramework framework, ContentItemCollection contentItems, NuspecReader nuspec)\r\n   at NuGet.Commands.LockFileUtils.AddAssets(String aliases, LockFileLibrary library, LocalPackageInfo package, ManagedCodeConventions managedCodeConventions, LibraryIncludeFlags dependencyType, LockFileTargetLibrary lockFileLib, NuGetFramework framework, String runtimeIdentifier, ContentItemCollection contentItems, NuspecReader nuspec, IReadOnlyList`1 orderedCriteria)\r\n   at NuGet.Commands.LockFileUtils.<>c__DisplayClass2_0.<CreateLockFileTargetLibrary>b__0()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at NuGet.Commands.LockFileBuilder.CreateLockFile(LockFile previousLockFile, PackageSpec project, IEnumerable`1 targetGraphs, IReadOnlyList`1 localRepositories, RemoteWalkContext context, LockFileBuilderCache lockFileBuilderCache)\r\n   at NuGet.Commands.RestoreCommand.BuildAssetsFile(LockFile existingLockFile, PackageSpec project, IEnumerable`1 graphs, IReadOnlyList`1 localRepositories, RemoteWalkContext contextForProject)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__45.MoveNext()\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__10.MoveNext()\r\n   at NuGet.Commands.RestoreRunner.<RunWithoutCommit>d__3.MoveNext()\r\n```\r\n\r\nFrom @jeffkl :\r\n> We used to compile the source code of these three assemblies into our assembly from a git submodule, now we're just shipping them as binaries, but they're named stuff like Microsoft..Extensions.FIleProviders.Abstractions\r\n\r\nSo this updates the bootstrap logic to include those additional assemblies for NuGet.",
  "state": "MERGED",
  "createdAt": "2022-12-06T18:57:40Z",
  "updatedAt": "2022-12-08T00:21:00Z",
  "closedAt": "2022-12-07T03:09:10Z",
  "mergedAt": "2022-12-07T03:09:10Z",
  "additions": 2,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "fix-bootstrap",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "106f03e6300aa8c560bf3f11fffa38dd8eba4490",
          "message": "Include Microsoft.Extensions.* nuget dependencies in Bootstrap",
          "committedDate": "2022-12-06T18:54:15Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": []
  }
}