{
  "number": 7838,
  "title": "Disable server for nodereuse:false",
  "body": "### Context\r\nWhen user requires nodereuse:false msbuild shall respect the intent of not to use any msbuild persistent processes including msbuild server.\r\n\r\n### Changes Made\r\nArguments have to be preparsed, including auto response files, and msbuild server is not called when nodereuse:false and couple other cases like /help.\r\n\r\n### Testing\r\nAdded unit test.\r\nRunning unit tests.\r\nLocal testing.\r\n",
  "state": "MERGED",
  "createdAt": "2022-07-19T22:27:36Z",
  "updatedAt": "2022-07-20T18:11:07Z",
  "closedAt": "2022-07-20T18:11:07Z",
  "mergedAt": "2022-07-20T18:11:07Z",
  "additions": 168,
  "deletions": 73,
  "changedFiles": 2,
  "headRefName": "rokonec/dissable-server-for-nodereuse-false",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4b0fe4ef9311ec9bea36437612dc0f92d42495ae",
          "message": "Do not use msbuild server when argumets imply nto to do so",
          "committedDate": "2022-07-19T16:58:52Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bab21391dd929acd995e0ed99071f61780ffba78",
          "message": "Fix some unit test",
          "committedDate": "2022-07-19T22:15:32Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b3fac425f5c4834cb469a520face34c082d8ab49",
          "message": "Add unit test for server not running when nr:false",
          "committedDate": "2022-07-19T22:27:15Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "585d948fb8486f8ad277fc70b3500fb3504bbbc5",
          "message": "Attempt to fix unit tests.",
          "committedDate": "2022-07-19T23:12:19Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bbec34ceab08e9b97bfcd1f5cf044c90e55dc983",
          "message": "Fix english in Trace message\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-07-20T12:03:03Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ff1c1aa091abc796aab7ce9f640e09b5822f443",
          "message": "Revert changes in PerformanceLogEventListener.cs",
          "committedDate": "2022-07-20T12:15:40Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you have to reset this at the end of the build?",
              "createdAt": "2022-07-20T00:24:52Z",
              "path": "src/MSBuild/PerformanceLogEventListener.cs",
              "diffHunk": "@@ -55,10 +55,16 @@ internal static PerformanceLogEventListener Create()\n                 // Check to see if we should enable the event listener.\n                 string logDirectory = Environment.GetEnvironmentVariable(PerfLogDirEnvVar);\n \n-                if (!string.IsNullOrEmpty(logDirectory) && Directory.CreateDirectory(logDirectory).Exists)\n+                if (!string.IsNullOrEmpty(logDirectory))\n                 {\n-                    eventListener = new PerformanceLogEventListener();\n-                    eventListener.Initialize(logDirectory);\n+                    if (Directory.CreateDirectory(logDirectory).Exists)\n+                    {\n+                        eventListener = new PerformanceLogEventListener();\n+                        eventListener.Initialize(logDirectory);\n+                    }\n+\n+                    // Delete env var so new starting processes will not duplicate Event listening\n+                    Environment.SetEnvironmentVariable(PerfLogDirEnvVar, null);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "On second, morning, thought I have reverted that change. I though that it was cross process event listener but it is actually in-process event listener which needs to run for every process involved.\r\nTLDR: It was good as it was.",
              "createdAt": "2022-07-20T12:39:34Z",
              "path": "src/MSBuild/PerformanceLogEventListener.cs",
              "diffHunk": "@@ -55,10 +55,16 @@ internal static PerformanceLogEventListener Create()\n                 // Check to see if we should enable the event listener.\n                 string logDirectory = Environment.GetEnvironmentVariable(PerfLogDirEnvVar);\n \n-                if (!string.IsNullOrEmpty(logDirectory) && Directory.CreateDirectory(logDirectory).Exists)\n+                if (!string.IsNullOrEmpty(logDirectory))\n                 {\n-                    eventListener = new PerformanceLogEventListener();\n-                    eventListener.Initialize(logDirectory);\n+                    if (Directory.CreateDirectory(logDirectory).Exists)\n+                    {\n+                        eventListener = new PerformanceLogEventListener();\n+                        eventListener.Initialize(logDirectory);\n+                    }\n+\n+                    // Delete env var so new starting processes will not duplicate Event listening\n+                    Environment.SetEnvironmentVariable(PerfLogDirEnvVar, null);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CommunicationsUtilities.Trace(\"Unexpected exception during command line parsing. Can not determine if it is allowed to use Server. Fall back to old behavior. Exception: {0}\", ex);\r\n```",
              "createdAt": "2022-07-20T00:27:02Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -266,6 +274,57 @@ string[] args\n             return exitCode;\n         }\n \n+\n+        /// <summary>\n+        /// Returns true if arguments allows or make sense to leverage msbuild server.\n+        /// </summary>\n+        /// <remarks>\n+        /// Will not throw. If arguments processing fails, we will not run it on server - no reason as it will not run any build anyway.\n+        /// </remarks>\n+        private static bool CanRunServerBasedOnCommandLineSwitches(\n+#if FEATURE_GET_COMMANDLINE\n+            string commandLine\n+#else\n+            string[] commandLine\n+#endif\n+            )\n+        {\n+            bool canRunServer = true;\n+            try\n+            {\n+                GatherAllSwitches(commandLine, out var switchesFromAutoResponseFile, out var switchesNotFromAutoResponseFile, out string fullCommandLine);\n+                CommandLineSwitches commandLineSwitches = CombineSwitchesRespectingPriority(switchesFromAutoResponseFile, switchesNotFromAutoResponseFile, fullCommandLine);\n+                if (CheckAndGatherProjectAutoResponseFile(switchesFromAutoResponseFile, commandLineSwitches, false, fullCommandLine, out string projectFile))\n+                {\n+                    commandLineSwitches = CombineSwitchesRespectingPriority(switchesFromAutoResponseFile, switchesNotFromAutoResponseFile, fullCommandLine);\n+                }\n+\n+                if (commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.Help] ||\n+                    commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.NodeMode) ||\n+                    commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.Version] ||\n+                    FileUtilities.IsBinaryLogFilename(projectFile) ||\n+                    ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]) == false)\n+                {\n+                    canRunServer = false;\n+                    if (KnownTelemetry.BuildTelemetry != null)\n+                    {\n+                        KnownTelemetry.BuildTelemetry.ServerFallbackReason = \"Arguments\";\n+                    }\n+                }\n+            }\n+            catch (Exception ex)\n+            {\n+                CommunicationsUtilities.Trace(\"Unexpected exception during command line parsing. Can not determine if it is allowed to use Server. Fallback to old. Exception: {0}\", ex);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this shouldn't have much perf impact because we only would do this once at the start of the build, but I'm wondering about small builds where even a little extra perf can matter. Can we reuse what we parsed here?",
              "createdAt": "2022-07-20T00:37:16Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -266,6 +274,57 @@ string[] args\n             return exitCode;\n         }\n \n+\n+        /// <summary>\n+        /// Returns true if arguments allows or make sense to leverage msbuild server.\n+        /// </summary>\n+        /// <remarks>\n+        /// Will not throw. If arguments processing fails, we will not run it on server - no reason as it will not run any build anyway.\n+        /// </remarks>\n+        private static bool CanRunServerBasedOnCommandLineSwitches(\n+#if FEATURE_GET_COMMANDLINE\n+            string commandLine\n+#else\n+            string[] commandLine\n+#endif\n+            )\n+        {\n+            bool canRunServer = true;\n+            try\n+            {\n+                GatherAllSwitches(commandLine, out var switchesFromAutoResponseFile, out var switchesNotFromAutoResponseFile, out string fullCommandLine);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I measured it and it is under 1ms. \r\nBut that being said, whole argument parsing would benefit refactoring - for clarity. I would strongly suggest to split argument parsing from interpreting for example. \r\nBut that shall be addressed in different PR.",
              "createdAt": "2022-07-20T13:13:52Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -266,6 +274,57 @@ string[] args\n             return exitCode;\n         }\n \n+\n+        /// <summary>\n+        /// Returns true if arguments allows or make sense to leverage msbuild server.\n+        /// </summary>\n+        /// <remarks>\n+        /// Will not throw. If arguments processing fails, we will not run it on server - no reason as it will not run any build anyway.\n+        /// </remarks>\n+        private static bool CanRunServerBasedOnCommandLineSwitches(\n+#if FEATURE_GET_COMMANDLINE\n+            string commandLine\n+#else\n+            string[] commandLine\n+#endif\n+            )\n+        {\n+            bool canRunServer = true;\n+            try\n+            {\n+                GatherAllSwitches(commandLine, out var switchesFromAutoResponseFile, out var switchesNotFromAutoResponseFile, out string fullCommandLine);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}