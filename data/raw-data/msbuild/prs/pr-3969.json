{
  "number": 3969,
  "title": "Don't allocate RegEx Match objects in some cases",
  "body": "Prior code acquired a `Match` and checked the `Length` to assert the full string matched.\r\n\r\nThis change uses patterns that match end of string `$` in order to draw the same conclusion, allowing the non-allocating `IsMatch` method to be used.\r\n\r\n---\r\n\r\nLooking at an RPS trace for d16.0 on loading a large solution, this `FileUtilities.GetFullPath`'s usage of `Regex.Match` accounted for 1.5% of total allocations.\r\n\r\nWe are looking at ways to avoid these calls (dotnet/project-system#3548), but this is a win for MSBuild regardless.\r\n\r\n![image](https://user-images.githubusercontent.com/350947/49254235-a211b380-f420-11e8-80cf-afdf663169a3.png)\r\n",
  "state": "MERGED",
  "createdAt": "2018-11-29T21:52:23Z",
  "updatedAt": "2021-11-24T10:43:22Z",
  "closedAt": "2018-12-02T22:49:30Z",
  "mergedAt": "2018-12-02T22:49:30Z",
  "additions": 34,
  "deletions": 23,
  "changedFiles": 4,
  "headRefName": "reduce-regex-allocations",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b418f780091b9ae9f1fce062fc12302a45f66cfb",
          "message": "Don't allocate in some regex usages\n\nPrior code acquired a Match and checked the length to assert\nthe full string matched.\n\nThis change uses patterns that match end of string in order to\ndraw the same conclusion, but allowing the non-allocating\nIsMatch method to be used.",
          "committedDate": "2018-11-29T21:44:20Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e566fa50ada7747820afa0455d78e38ab3bd5277",
          "message": "Fix broken logic",
          "committedDate": "2018-11-30T18:07:30Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "```\r\n 0>D:\\a\\1\\s\\Directory.Build.targets(14,3): error : Failed to resolve SDK 'Microsoft.Build.CentralPackageVersions'. Package restore was successful but a package with the ID of \"Microsoft.Build.CentralPackageVersions\" was not installed.\r\n\r\n      0>D:\\a\\1\\s\\Directory.Build.targets(14,3): error : D:\\a\\1\\s\\artifacts\\.dotnet\\2.1.401\\sdk\\2.1.401\\Sdks\\Microsoft.Build.CentralPackageVersions\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified in global.json.\r\n\r\n   6:15>D:\\a\\1\\s\\artifacts\\Debug\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(4479,88): error MSB4023: Cannot evaluate the item metadata \"%(FullPath)\". The item metadata \"%(FullPath)\" cannot be applied to the path \"D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\PortableTask\\netstandard1.3\\%2a.%2a\". The given path's format is not supported. [D:\\a\\1\\s\\src\\Build.UnitTests\\Microsoft.Build.Engine.UnitTests.csproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(9,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.Common.props [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(10,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.VisualStudioVersion.v15.Common.props [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(14,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\Microsoft.Build.Conversion\\net472\\Microsoft.Build.Conversion.Core.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(15,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.Build.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(16,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\Microsoft.Build.Conversion\\net472\\Microsoft.Build.Engine.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(17,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.Build.Framework.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(18,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.Build.Tasks.Core.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n     30>D:\\a\\1\\s\\src\\Package\\MSBuild.VSSetup\\files.swr(19,2): error SWIX0000: System.NotSupportedException when resolving file: D:\\D:\\a\\1\\s\\artifacts\\2\\Debug\\bin\\MSBuild\\net472\\Microsoft.Build.Utilities.Core.dll [C:\\Users\\VssAdministrator\\.nuget\\packages\\roslyntools.repotoolset\\1.0.0-beta2-62901-01\\tools\\VisualStudio.SetupPackage.swixproj]\r\n\r\n```",
        "createdAt": "2018-11-29T23:03:39Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I'm hoping that failure's unrelated to the changes.\r\n\r\nOne point to note here is that `IsMatch` for compiled regexes doesn't allocate.",
        "createdAt": "2018-11-29T23:06:37Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "cc @ccastanedaucf ",
        "createdAt": "2018-11-29T23:09:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Feel free to squash merge. I don't have write access to this repo.",
        "createdAt": "2018-12-02T19:58:04Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "I squashed it and merged it.",
        "createdAt": "2018-12-02T22:49:47Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@rainersigwald @livarcocc When will this land in the product? I'm still seeing large allocations here in Version 16.0.0 Preview 2.0 [28420.135.d16.0stg].\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/50336466-602ce680-0562-11e9-9744-04ce9c1abfc8.png)\r\n",
        "createdAt": "2018-12-21T09:53:05Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We have a pending insertion into dev16, however, RPS has been failing for us and with folks out for the holiday, we haven't had a change to investigate why.",
        "createdAt": "2018-12-21T22:51:21Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is pattern hasn't changed, right?",
              "createdAt": "2018-11-29T22:48:25Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,21 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);\n+\n+        private static readonly string s_baseUncPattern = string.Format(\n+            CultureInfo.InvariantCulture,\n+            @\"^[\\{0}\\{1}][\\{0}\\{1}][^\\{0}\\{1}]+[\\{0}\\{1}][^\\{0}\\{1}]+\",",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "UNC paths were sometimes checked in 'prefix' mode, sometimes in 'exact' mode.\r\n\r\nThis base pattern is the same. I create two Regex objects from it, and one has a `$` appended, for exact match.",
              "createdAt": "2018-11-29T22:51:09Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,21 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);\n+\n+        private static readonly string s_baseUncPattern = string.Format(\n+            CultureInfo.InvariantCulture,\n+            @\"^[\\{0}\\{1}][\\{0}\\{1}][^\\{0}\\{1}]+[\\{0}\\{1}][^\\{0}\\{1}]+\",",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What happens with \"C:[space]\" have we already trimed this?",
              "createdAt": "2018-11-29T22:50:10Z",
              "path": "src/Shared/Modifiers.cs",
              "diffHunk": "@@ -471,19 +471,26 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS\n \n                         if (NativeMethodsShared.IsWindows)\n                         {\n-                            Match root = FileUtilitiesRegex.DrivePattern.Match(modifiedItemSpec);\n-\n-                            if (!root.Success)\n+                            int length = -1;\n+                            if (FileUtilitiesRegex.DrivePattern.IsMatch(modifiedItemSpec))\n+                            {\n+                                length = 2;\n+                            }\n+                            else\n                             {\n-                                root = FileUtilitiesRegex.UNCPattern.Match(modifiedItemSpec);\n+                                var match = FileUtilitiesRegex.StartsWithUncPattern.Match(modifiedItemSpec);\n+                                if (match.Success)\n+                                {\n+                                    length = match.Length;\n+                                }\n                             }\n \n-                            if (root.Success)\n+                            if (length != -1)\n                             {\n-                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > root.Length) && IsSlash(modifiedItemSpec[root.Length]),\n+                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > length) && IsSlash(modifiedItemSpec[length]),",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "Say `modifiedItemSpec == \"c: \"` (with space after colon), then previously the regex would match two characters, so the length check would fail (2 != 3).",
              "createdAt": "2018-11-29T22:53:23Z",
              "path": "src/Shared/Modifiers.cs",
              "diffHunk": "@@ -471,19 +471,26 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS\n \n                         if (NativeMethodsShared.IsWindows)\n                         {\n-                            Match root = FileUtilitiesRegex.DrivePattern.Match(modifiedItemSpec);\n-\n-                            if (!root.Success)\n+                            int length = -1;\n+                            if (FileUtilitiesRegex.DrivePattern.IsMatch(modifiedItemSpec))\n+                            {\n+                                length = 2;\n+                            }\n+                            else\n                             {\n-                                root = FileUtilitiesRegex.UNCPattern.Match(modifiedItemSpec);\n+                                var match = FileUtilitiesRegex.StartsWithUncPattern.Match(modifiedItemSpec);\n+                                if (match.Success)\n+                                {\n+                                    length = match.Length;\n+                                }\n                             }\n \n-                            if (root.Success)\n+                            if (length != -1)\n                             {\n-                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > root.Length) && IsSlash(modifiedItemSpec[root.Length]),\n+                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > length) && IsSlash(modifiedItemSpec[length]),",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Okay, so you haven't changed behavior here?",
              "createdAt": "2018-11-29T23:02:18Z",
              "path": "src/Shared/Modifiers.cs",
              "diffHunk": "@@ -471,19 +471,26 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS\n \n                         if (NativeMethodsShared.IsWindows)\n                         {\n-                            Match root = FileUtilitiesRegex.DrivePattern.Match(modifiedItemSpec);\n-\n-                            if (!root.Success)\n+                            int length = -1;\n+                            if (FileUtilitiesRegex.DrivePattern.IsMatch(modifiedItemSpec))\n+                            {\n+                                length = 2;\n+                            }\n+                            else\n                             {\n-                                root = FileUtilitiesRegex.UNCPattern.Match(modifiedItemSpec);\n+                                var match = FileUtilitiesRegex.StartsWithUncPattern.Match(modifiedItemSpec);\n+                                if (match.Success)\n+                                {\n+                                    length = match.Length;\n+                                }\n                             }\n \n-                            if (root.Success)\n+                            if (length != -1)\n                             {\n-                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > root.Length) && IsSlash(modifiedItemSpec[root.Length]),\n+                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > length) && IsSlash(modifiedItemSpec[length]),",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "If this PR changes behaviour it is a bug.",
              "createdAt": "2018-11-29T23:04:08Z",
              "path": "src/Shared/Modifiers.cs",
              "diffHunk": "@@ -471,19 +471,26 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS\n \n                         if (NativeMethodsShared.IsWindows)\n                         {\n-                            Match root = FileUtilitiesRegex.DrivePattern.Match(modifiedItemSpec);\n-\n-                            if (!root.Success)\n+                            int length = -1;\n+                            if (FileUtilitiesRegex.DrivePattern.IsMatch(modifiedItemSpec))\n+                            {\n+                                length = 2;\n+                            }\n+                            else\n                             {\n-                                root = FileUtilitiesRegex.UNCPattern.Match(modifiedItemSpec);\n+                                var match = FileUtilitiesRegex.StartsWithUncPattern.Match(modifiedItemSpec);\n+                                if (match.Success)\n+                                {\n+                                    length = match.Length;\n+                                }\n                             }\n \n-                            if (root.Success)\n+                            if (length != -1)\n                             {\n-                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > root.Length) && IsSlash(modifiedItemSpec[root.Length]),\n+                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > length) && IsSlash(modifiedItemSpec[length]),",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is matching both the beginning and end of the string, wouldn't ```DrivePattern.IsMatch()``` now always return false for any string that isn't exactly ```[drive letter]:``` such as ```C:\\foo```? That's very different from the original behavior which only checks the prefix for a match.",
              "createdAt": "2018-11-30T00:14:06Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,21 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);",
              "author": {
                "login": "ccastanedaucf"
              }
            },
            {
              "body": "The change was intentional&mdash;the usage in `FileUtilities` needed an exact match.\r\n\r\nI made a mistake wrt the other usage in `Modifiers.GetItemSpecModifier`. That usage _does_ need starts-with logic. I've pushed a fix.",
              "createdAt": "2018-11-30T00:22:21Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,21 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you mean to use ```^[A-Za-z]:```?",
              "createdAt": "2018-11-30T17:06:49Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,24 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);\n+\n+        // regular expression used to match file-specs beginning with \"<drive letter>:\"\n+        internal static readonly Regex StartWithDrivePattern = new Regex(@\"^[A-Za-z]$\", RegexOptions.Compiled);",
              "author": {
                "login": "ccastanedaucf"
              }
            },
            {
              "body": "Yes, thank you.",
              "createdAt": "2018-11-30T18:08:48Z",
              "path": "src/Shared/FileUtilitiesRegex.cs",
              "diffHunk": "@@ -19,13 +15,24 @@ namespace Microsoft.Build.Shared\n     /// </summary>\n     internal static class FileUtilitiesRegex\n     {\n-        // regular expression used to match file-specs beginning with \"<drive letter>:\" \n-        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:\", RegexOptions.Compiled);\n+        // regular expression used to match file-specs comprising exactly \"<drive letter>:\" (with no trailing characters)\n+        internal static readonly Regex DrivePattern = new Regex(@\"^[A-Za-z]:$\", RegexOptions.Compiled);\n+\n+        // regular expression used to match file-specs beginning with \"<drive letter>:\"\n+        internal static readonly Regex StartWithDrivePattern = new Regex(@\"^[A-Za-z]$\", RegexOptions.Compiled);",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}