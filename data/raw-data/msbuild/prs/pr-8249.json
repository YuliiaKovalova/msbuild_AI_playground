{
  "number": 8249,
  "title": "Support laxer isolation mode `-isolate:Message`",
  "body": "# Context\r\nSupport a laxer isolation mode `-isolate:MessageUponIsolationViolation` (or its short form `-isolate:Message`) for builds unable to adhere to the restrictive isolation mode `-isolate:True`, piggybacking on the existing `skipStaticGraphIsolationConstraints` flag. Isolation violations are logged as messages.\r\n\r\n# Changes\r\n* Allow a new value for the `-isolate` switch: `MessageUponIsolationViolation` (short form `Message`).\r\n* In this new mode, only the `TargetResult`s for top-level targets are serialized into the output cache. This is to mitigate the chances of isolation-violating dependency targets relying on state potentially mutated by cached dependency targets. (E.g., the definition of a property.) As such, it is still possible for a dependent project to have a config entry C in its override caches and still need to obtain `BuildResult`s from C in isolation violation, requiring placing them in the override result cache instead of the current cache to maintain the invariant of no overlap configs across the override and current caches.\r\n* Preserve the `IsolateProjects` getter/setter for API backwards compat.",
  "state": "MERGED",
  "createdAt": "2022-12-15T21:34:16Z",
  "updatedAt": "2023-02-13T22:56:35Z",
  "closedAt": "2023-02-06T01:43:00Z",
  "mergedAt": "2023-02-06T01:43:00Z",
  "additions": 928,
  "deletions": 390,
  "changedFiles": 34,
  "headRefName": "isolate-with-messaging",
  "isDraft": false,
  "author": {
    "login": "DmitriyShepelev"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9a139fb42f31053bfc7114a0d99781e70527b3ef",
          "message": "Support laxer isolation mode via CLI",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66054b9c9166b102173b7e369db66e6e5790d579",
          "message": "Limit message description to <= 80 characters",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "972f87c324b6be77509f95e0cc84a2d847fcb30e",
          "message": "Move `IsolateProjects` into more appropriate directory",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf948cfc6319ea8bc2f4e16deda912419dae0fa2",
          "message": "Skipped results should cause cache misses only if `IsolateProjects.True`",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b3455d93bc3eba923ee735c6baa0132851f7bbc9",
          "message": "Prevent isolation-exempted targets from being stored in dependency projects' result caches",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db8eb77fc1acb7d56dfb047830c3a216d8302b83",
          "message": "Combine static graph and non-static graph isolation constraint skipping state",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73f4cc037f84e850322363724b4916dd6fac4900",
          "message": "Revert \"Combine static graph and non-static graph isolation constraint skipping state\"\n\nThis reverts commit 1124cc96b972d3bf402d13461cb5d3e5ed71edee.",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbc04e29cb51f2e43619f9d6abb0e9440c245fd1",
          "message": "Place all isolation-violating build results into the override cache",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "679c708c1a6deb03950f4f6e19814300d8349f2f",
          "message": "Revert \"Prevent isolation-exempted targets from being stored in dependency projects' result caches\"\n\nThis reverts commit 3962d48abe7397ada59017385b908d2b411d07ea.",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86e602676a9eb176ab181885b20dae6b5ad7243c",
          "message": "Error incompatible projects with isolation-violating target referencing cached target containing referenced properties",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5fb00b5b47c27190dc05540d6c78e04dbaf0f0b",
          "message": "Eliminate any dependency project cache results from current cache",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cdbb0fb021a6ad967440194cc92d93bc39d1f813",
          "message": "Test MSB4047",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "67590179a51a2cc4e12507da4f32fdc8941b9e19",
          "message": "Test cache serialization",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b66f1d07688ba06407f2e66f71cfa9f619d87d37",
          "message": "Fix `TaskExecutionHost_Tests`",
          "committedDate": "2023-01-24T17:03:07Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f87659ab57c317746de92101333ccc254d5f3548",
          "message": "Add test for not placing build results into current cache if their config id is in the override cache",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea52a3decfa39d7bba4e088efb65f9932f915ce4",
          "message": "Fix documentation",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01203a290db886d4d97ad122bc3ceab947ed1413",
          "message": "Improve test name",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "003d864793ef589ca9f3904f513384427b4b0c36",
          "message": "Address nits",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af09626c357fb1d77988e547bf55500086eea394",
          "message": "Move isolation-violating cache result bug fix to separate PR",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "893d5d12025fcfb21624aba112bc30dbb46647da",
          "message": "Improve naming & preserve IsolateProjects API functionality",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b18e55bb2dac645259d2c9e626bebad9a362f16",
          "message": "Only serialize specified targets in `MessageUponIsolationViolation` mode",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "64df918a5782c70e79869be9ce3cbc3736a67ee6",
          "message": "Clean up documentation",
          "committedDate": "2023-01-24T17:03:08Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd8d23dd30ee7afae537ce07613c0a6ace18e21a",
          "message": "Lowercase the 'i' in '-isolateProjects'",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dec0cf445c5399667897f26866f5b32af22b03c6",
          "message": "Fix nit",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08dba8bfd7343410b5c4c27ed0b1d75ad2a1e9cb",
          "message": "Keep results for default targets if no targets were explicitly specified to build",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c6cb4136da64c4402a11a5432339d70252df8018",
          "message": "Remove old `BuildParameters` setters",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de48e6ce62b74c7a7aa079c6f8675ac8f0930688",
          "message": "Revert MockHost BuildParameters setter",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a97d044c855fd2838f5f540c71bef289eeb9b912",
          "message": "Obtain targets to serialize from `BuildRequestConfiguration.TargetNames`",
          "committedDate": "2023-01-24T17:03:09Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7fb580d556b5a5f98453e291356c03f50d1a977d",
          "message": "Add comments and test",
          "committedDate": "2023-01-24T18:15:53Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae763da586e06d248c2f741be966c38eb0407a65",
          "message": "Improve `MessageUponIsolationViolation` documentation",
          "committedDate": "2023-01-24T23:57:18Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8fb016d7c2f6a5d0fe371028d690af8f8ea843ff",
          "message": "Merge branch 'main' into isolate-with-messaging",
          "committedDate": "2023-01-26T15:13:01Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a3571c8bc0cbd9c942788e9c8ec957c691e2ea2",
          "message": "Add file header",
          "committedDate": "2023-01-26T15:48:49Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6788c168fbe4563f7a3c87ff3c395fdf673e55db",
          "message": "Merge branch 'main' into isolate-with-messaging",
          "committedDate": "2023-01-26T15:56:27Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d85073de30d0bd1c9a5db5064d57055db5d2227",
          "message": "Merge branch 'main' into isolate-with-messaging",
          "committedDate": "2023-01-26T16:58:24Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Discussed offline with @Forgind and @dfederm:\r\n1. Avert making breaking change to the `BuildParameters.IsolateProjects.get` API by wrapping existing `isolateProjects` `bool`ean with the created `ProjectIsolationMode` `enum`.\r\n~~2. When dependent project P1 needs to obtain the cache results for targets t1, t2, ..., tm from a dependency project P2 for which P1 already has cache results for targets tm+1, tm+2, ..., tn such that m > 0 and m < n, the cache results for tm+1, tm+2, ..., tn are invalidated and all targets in P2 are built as if `-isolate` was set to `False`. This is to prevent incorrect behavior, such as that covered by the no-longer-necessary `MSB4047`. Note that this change means that the other bug fix regarding not placing any isolation-violating target results into the current cache if the corresponding project's configuration already exists in the override cache is no longer necessary.~~\r\n3. Placing the bug fix for excluding the cache results for dependency projects built in violation of isolation mode from the output cache file into a separate PR.",
        "createdAt": "2022-12-19T17:45:52Z",
        "author": {
          "login": "DmitriyShepelev"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: `ProjectIsolationMode`?",
              "createdAt": "2022-12-15T23:38:15Z",
              "path": "src/Build/BackEnd/BuildManager/IsolateProjects.cs",
              "diffHunk": "@@ -0,0 +1,26 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+namespace Microsoft.Build.Execution\n+{\n+    /// <summary>\n+    /// The isolation mode to use.\n+    /// </summary>\n+    public enum IsolateProjects",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Style not: remove extra newline",
              "createdAt": "2022-12-19T15:43:22Z",
              "path": "src/Build.UnitTests/BackEnd/MockHost.cs",
              "diffHunk": "@@ -66,24 +67,48 @@ internal class MockHost : MockLoggingService, IBuildComponentHost, IBuildCompone\n         #endregion;\n \n         /// <summary>\n-        /// Constructor\n+        /// Initializes a new instance of the <see cref=\"MockHost\"/> class.\n         /// </summary>\n-        public MockHost()\n-            : this(new BuildParameters())\n+        /// <param name=\"overrideConfigCache\">The override config cache.</param>\n+        /// <param name=\"overrideResultsCache\">The override results cache.</param>\n+        public MockHost(ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)\n+            : this(new BuildParameters(), overrideConfigCache, overrideResultsCache)\n         {\n         }\n \n         /// <summary>\n-        /// Constructor\n+        /// Initializes a new instance of the <see cref=\"MockHost\"/> class.\n         /// </summary>\n-        public MockHost(BuildParameters buildParameters)\n+        /// <param name=\"buildParameters\">The mock host's build parameters.</param>\n+        /// <param name=\"overrideConfigCache\">The override config cache.</param>\n+        /// <param name=\"overrideResultsCache\">The override results cache.</param>\n+        public MockHost(BuildParameters buildParameters, ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)\n         {\n             _buildParameters = buildParameters;\n \n             _buildParameters.ProjectRootElementCache = new ProjectRootElementCache(false);\n \n-            _configCache = new ConfigCache();\n-            ((IBuildComponent)_configCache).InitializeComponent(this);\n+            if (overrideConfigCache != null && overrideResultsCache != null)\n+            {\n+                _configCache = new ConfigCacheWithOverride(overrideConfigCache);\n+                _resultsCache = new ResultsCacheWithOverride(overrideResultsCache);\n+            }\n+            else if (overrideConfigCache == null && overrideResultsCache == null)\n+            {\n+                _configCache = new ConfigCache();\n+                _resultsCache = new ResultsCache();\n+            }\n+            else if (overrideConfigCache == null)\n+            {\n+",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Weird that this is creeping into your PR. Seems like it should have been added in #8024",
              "createdAt": "2022-12-19T15:46:29Z",
              "path": "src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt",
              "diffHunk": "@@ -14,6 +14,7 @@ Microsoft.Build.Experimental.MSBuildClientExitType.ServerBusy = 1 -> Microsoft.B\n Microsoft.Build.Experimental.MSBuildClientExitType.Success = 0 -> Microsoft.Build.Experimental.MSBuildClientExitType\n Microsoft.Build.Experimental.MSBuildClientExitType.UnableToConnect = 2 -> Microsoft.Build.Experimental.MSBuildClientExitType\n Microsoft.Build.Experimental.MSBuildClientExitType.Unexpected = 4 -> Microsoft.Build.Experimental.MSBuildClientExitType\n+Microsoft.Build.Experimental.MSBuildClientExitType.UnknownServerState = 5 -> Microsoft.Build.Experimental.MSBuildClientExitType",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Yeah, this wasn't intentional. Will let the people involved in #8024 fix it.",
              "createdAt": "2022-12-19T19:31:18Z",
              "path": "src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt",
              "diffHunk": "@@ -14,6 +14,7 @@ Microsoft.Build.Experimental.MSBuildClientExitType.ServerBusy = 1 -> Microsoft.B\n Microsoft.Build.Experimental.MSBuildClientExitType.Success = 0 -> Microsoft.Build.Experimental.MSBuildClientExitType\n Microsoft.Build.Experimental.MSBuildClientExitType.UnableToConnect = 2 -> Microsoft.Build.Experimental.MSBuildClientExitType\n Microsoft.Build.Experimental.MSBuildClientExitType.Unexpected = 4 -> Microsoft.Build.Experimental.MSBuildClientExitType\n+Microsoft.Build.Experimental.MSBuildClientExitType.UnknownServerState = 5 -> Microsoft.Build.Experimental.MSBuildClientExitType",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this the right error code and message?",
              "createdAt": "2022-12-19T15:52:21Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -931,6 +931,18 @@\n     <value>MSB4125: The project file name \"{0}\" is invalid. {1}</value>\n     <comment>{StrBegin=\"MSB4125: \"}UE: The solution filename is provided separately to loggers.</comment>\n   </data>\n+  <data name=\"RequiredPropertyNotSetErrorMessagingIsolationMode\" xml:space=\"preserve\">\n+    <value>\n+      MSB4047: The \"{0}\" task was not given a value for the required parameter \"{1}\".",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Addressed [here](https://github.com/dotnet/msbuild/pull/8249#issuecomment-1358019754).",
              "createdAt": "2022-12-19T18:41:47Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -931,6 +931,18 @@\n     <value>MSB4125: The project file name \"{0}\" is invalid. {1}</value>\n     <comment>{StrBegin=\"MSB4125: \"}UE: The solution filename is provided separately to loggers.</comment>\n   </data>\n+  <data name=\"RequiredPropertyNotSetErrorMessagingIsolationMode\" xml:space=\"preserve\">\n+    <value>\n+      MSB4047: The \"{0}\" task was not given a value for the required parameter \"{1}\".",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This part (`bool` to `IsolateProjects` enum) is a breaking change, so might not be allowed for compatibility.",
              "createdAt": "2022-12-19T15:53:59Z",
              "path": "src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt",
              "diffHunk": "@@ -991,8 +991,12 @@ Microsoft.Build.Execution.BuildParameters.InputResultsCacheFiles.get -> string[]\n Microsoft.Build.Execution.BuildParameters.InputResultsCacheFiles.set -> void\n Microsoft.Build.Execution.BuildParameters.Interactive.get -> bool\n Microsoft.Build.Execution.BuildParameters.Interactive.set -> void\n-Microsoft.Build.Execution.BuildParameters.IsolateProjects.get -> bool\n Microsoft.Build.Execution.BuildParameters.IsolateProjects.set -> void\n+Microsoft.Build.Execution.BuildParameters.IsolateProjects.get -> Microsoft.Build.Execution.IsolateProjects",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Addressed [here](https://github.com/dotnet/msbuild/pull/8249#issuecomment-1358019754).",
              "createdAt": "2022-12-19T18:42:03Z",
              "path": "src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt",
              "diffHunk": "@@ -991,8 +991,12 @@ Microsoft.Build.Execution.BuildParameters.InputResultsCacheFiles.get -> string[]\n Microsoft.Build.Execution.BuildParameters.InputResultsCacheFiles.set -> void\n Microsoft.Build.Execution.BuildParameters.Interactive.get -> bool\n Microsoft.Build.Execution.BuildParameters.Interactive.set -> void\n-Microsoft.Build.Execution.BuildParameters.IsolateProjects.get -> bool\n Microsoft.Build.Execution.BuildParameters.IsolateProjects.set -> void\n+Microsoft.Build.Execution.BuildParameters.IsolateProjects.get -> Microsoft.Build.Execution.IsolateProjects",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: This test uses Shouldly, so this like probably \"should\" (pun intended) be `_buildParametersPrototype.IsolateProjects.ShouldBe(IsolateProjects.True);`",
              "createdAt": "2022-12-19T15:58:58Z",
              "path": "src/Build.UnitTests/Graph/IsolateProjects_Tests.cs",
              "diffHunk": "@@ -474,7 +495,7 @@ public void SkippedTargetsShouldNotTriggerCacheMissEnforcement()\n </Project>\n \".Cleanup()).Path;\n \n-            _buildParametersPrototype.IsolateProjects.ShouldBeTrue();\n+            Assert.Equal(IsolateProjects.True, _buildParametersPrototype.IsolateProjects);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This change doesn't seem necessary?",
              "createdAt": "2022-12-19T16:00:27Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -1238,14 +1238,11 @@ public string Name\n             }\n \n             /// <summary>\n-            /// Returns the build parameters.\n+            /// Gets or sets the build parameters.\n             /// </summary>\n             public BuildParameters BuildParameters\n             {\n-                get\n-                {\n-                    return _buildParameters;\n-                }\n+                get => _buildParameters; set => throw new NotSupportedException();",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "`MockHost` implements `IBuildComponentHost`, which requires a setter.",
              "createdAt": "2022-12-19T19:41:17Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -1238,14 +1238,11 @@ public string Name\n             }\n \n             /// <summary>\n-            /// Returns the build parameters.\n+            /// Gets or sets the build parameters.\n             /// </summary>\n             public BuildParameters BuildParameters\n             {\n-                get\n-                {\n-                    return _buildParameters;\n-                }\n+                get => _buildParameters; set => throw new NotSupportedException();",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to stipulate in `MessageUponIsolationViolation` mode that _no_ targets are serialized if no targets are provided in the `-t` switch? I was thinking that, if no targets are provided in `-t`, then maybe just serialize the default targets. The added benefit with the `-t` stipulation is that it adds more clarity to what `TargetResult`s will be serialized.",
              "createdAt": "2023-01-12T16:13:39Z",
              "path": "src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+namespace Microsoft.Build.Execution\n+{\n+    /// <summary>\n+    /// The isolation mode to use.\n+    /// </summary>\n+    public enum ProjectIsolationMode\n+    {\n+        /// <summary>\n+        /// Do not enable isolation.\n+        /// </summary>\n+        False,\n+\n+        /// <summary>\n+        /// Enable isolation and log isolation violations as messages.\n+        /// </summary>\n+        /// <remarks>\n+        /// Under this mode, only the results from specific (usually",
              "author": {
                "login": "DmitriyShepelev"
              }
            },
            {
              "body": "I think \"no targets\" == \"default targets\" is a must, since IIRC the normal `ProjectReference` behavior actually is to use the default targets and not \"Build\" explicitly.\r\n\r\nI also think that's implied so probably doesn't need to be called out in docs, but does need to behave that way.",
              "createdAt": "2023-01-12T17:19:12Z",
              "path": "src/Build/BackEnd/BuildManager/ProjectIsolationMode.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+namespace Microsoft.Build.Execution\n+{\n+    /// <summary>\n+    /// The isolation mode to use.\n+    /// </summary>\n+    public enum ProjectIsolationMode\n+    {\n+        /// <summary>\n+        /// Do not enable isolation.\n+        /// </summary>\n+        False,\n+\n+        /// <summary>\n+        /// Enable isolation and log isolation violations as messages.\n+        /// </summary>\n+        /// <remarks>\n+        /// Under this mode, only the results from specific (usually",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "(Unsure) as you're enumerating the keys in this loop, doesn't this throw when you continue to enumerate a mutated collection?",
              "createdAt": "2023-01-12T17:25:26Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -480,6 +480,21 @@ public void AddResultsForTarget(string target, TargetResult result)\n             _resultsByTarget[target] = result;\n         }\n \n+        /// <summary>\n+        /// Keep the results for specific targets only.\n+        /// </summary>\n+        /// <param name=\"targets\">The targets whose results should be kept.</param>\n+        public void KeepResultsForSpecificTargets(HashSet<string> targets)\n+        {\n+            foreach (string target in _resultsByTarget.Keys)\n+            {\n+                if (!targets.Contains(target))\n+                {\n+                    _ = _resultsByTarget.TryRemove(target, out _);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "It's a safe operation. `_resultsByTarget.Keys` returns a snapshot of the keys in the `ConcurrentDictionary`:\r\nhttps://github.com/microsoft/referencesource/blob/master/mscorlib/system/collections/Concurrent/ConcurrentDictionary.cs#L2027-L2058\r\n\r\nAlso confirmed in this MSDN forum:\r\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/64f0c314-e3eb-457a-9dad-14d13cf06d68/updating-values-in-a-concurrentdictionary?forum=parallelextensions\r\n\r\nMy test `OnlySerializeResultsForSpecifiedTargets` in `CacheSerialization_Tests.cs` goes through this code and didn't raise an exception.",
              "createdAt": "2023-01-12T17:49:30Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -480,6 +480,21 @@ public void AddResultsForTarget(string target, TargetResult result)\n             _resultsByTarget[target] = result;\n         }\n \n+        /// <summary>\n+        /// Keep the results for specific targets only.\n+        /// </summary>\n+        /// <param name=\"targets\">The targets whose results should be kept.</param>\n+        public void KeepResultsForSpecificTargets(HashSet<string> targets)\n+        {\n+            foreach (string target in _resultsByTarget.Keys)\n+            {\n+                if (!targets.Contains(target))\n+                {\n+                    _ = _resultsByTarget.TryRemove(target, out _);",
              "author": {
                "login": "DmitriyShepelev"
              }
            },
            {
              "body": "Is this more or less efficient than something like:\r\n_resultsByTarget = _resultsByTarget.Where(kvp => targetsToKeep.Contains(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);\r\n?",
              "createdAt": "2023-01-24T22:45:17Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -480,6 +480,21 @@ public void AddResultsForTarget(string target, TargetResult result)\n             _resultsByTarget[target] = result;\n         }\n \n+        /// <summary>\n+        /// Keep the results for specific targets only.\n+        /// </summary>\n+        /// <param name=\"targets\">The targets whose results should be kept.</param>\n+        public void KeepResultsForSpecificTargets(HashSet<string> targets)\n+        {\n+            foreach (string target in _resultsByTarget.Keys)\n+            {\n+                if (!targets.Contains(target))\n+                {\n+                    _ = _resultsByTarget.TryRemove(target, out _);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Seems to be more efficient. Running `OnlySerializeResultsForSpecifiedTargets` (which goes through this code path) three times with `_resultsByTarget` having 1000 targets yielded an average test run time of 43ms whereas your proposal yielded an average test run time of 50ms.",
              "createdAt": "2023-01-24T23:30:33Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -480,6 +480,21 @@ public void AddResultsForTarget(string target, TargetResult result)\n             _resultsByTarget[target] = result;\n         }\n \n+        /// <summary>\n+        /// Keep the results for specific targets only.\n+        /// </summary>\n+        /// <param name=\"targets\">The targets whose results should be kept.</param>\n+        public void KeepResultsForSpecificTargets(HashSet<string> targets)\n+        {\n+            foreach (string target in _resultsByTarget.Keys)\n+            {\n+                if (!targets.Contains(target))\n+                {\n+                    _ = _resultsByTarget.TryRemove(target, out _);",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should probably be `internal` to avoid exposing additional public surface area",
              "createdAt": "2023-01-12T17:27:20Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -480,6 +480,21 @@ public void AddResultsForTarget(string target, TargetResult result)\n             _resultsByTarget[target] = result;\n         }\n \n+        /// <summary>\n+        /// Keep the results for specific targets only.\n+        /// </summary>\n+        /// <param name=\"targets\">The targets whose results should be kept.</param>\n+        public void KeepResultsForSpecificTargets(HashSet<string> targets)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This change is a little suspicious. I'm not convinced this should be settable directly",
              "createdAt": "2023-01-12T23:37:48Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -378,10 +378,12 @@ public static BuildManager DefaultBuildManager\n         string IBuildComponentHost.Name => _hostName;\n \n         /// <summary>\n-        /// Retrieves the build parameters associated with this build.\n+        /// Gets or sets the build parameters associated with this build.\n         /// </summary>\n-        /// <returns>The build parameters.</returns>\n-        BuildParameters IBuildComponentHost.BuildParameters => _buildParameters;\n+        BuildParameters IBuildComponentHost.BuildParameters\n+        {\n+            get => _buildParameters; set => _buildParameters = value;",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Setting them was required when I was testing for missing required properties [here](https://github.com/dotnet/msbuild/pull/8249/commits/5e94b8267897c9547adeb8a9c4cc1ad6d89e8033#diff-b77232ac80795a4839128486d8221283fe6ee537902fbbb0561e8f779e81b7aaR160-R162), which is no longer necessary. Will remove.",
              "createdAt": "2023-01-13T15:43:29Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -378,10 +378,12 @@ public static BuildManager DefaultBuildManager\n         string IBuildComponentHost.Name => _hostName;\n \n         /// <summary>\n-        /// Retrieves the build parameters associated with this build.\n+        /// Gets or sets the build parameters associated with this build.\n         /// </summary>\n-        /// <returns>The build parameters.</returns>\n-        BuildParameters IBuildComponentHost.BuildParameters => _buildParameters;\n+        BuildParameters IBuildComponentHost.BuildParameters\n+        {\n+            get => _buildParameters; set => _buildParameters = value;",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is adding to the public API and I'm not sure it's entirely clear how this is supposed to interact with the set of Targets provided when building.",
              "createdAt": "2023-01-12T23:46:03Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -780,14 +792,24 @@ public string[] InputResultsCacheFiles\n \n         /// <summary>\n         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.\n-        /// Setting this also turns on isolated builds.\n+        /// If the isolation mode is set to <see cref=\"ProjectIsolationMode.False\"/>,\n+        /// this sets the isolation mode to <see cref=\"ProjectIsolationMode.True\"/>.\n         /// </summary>\n         public string OutputResultsCacheFile\n         {\n             get => _outputResultsCacheFile;\n             set => _outputResultsCacheFile = value;\n         }\n \n+        /// <summary>\n+        /// The set of specified targets to build.\n+        /// </summary>\n+        public HashSet<string> Targets",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "In particular I'm referring to the targets provided on `BuildRequestData`. The general flow is to call `BuildManager.BeginBuild(BuildParameters)` and then call `BuildManager.BuildRequest(BuildRequestData)` one or more times and then finally `BuildManager.EndBuild`. So the targets being part of the `BuildParameters` doesn't really make sense.",
              "createdAt": "2023-01-12T23:50:22Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -780,14 +792,24 @@ public string[] InputResultsCacheFiles\n \n         /// <summary>\n         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.\n-        /// Setting this also turns on isolated builds.\n+        /// If the isolation mode is set to <see cref=\"ProjectIsolationMode.False\"/>,\n+        /// this sets the isolation mode to <see cref=\"ProjectIsolationMode.True\"/>.\n         /// </summary>\n         public string OutputResultsCacheFile\n         {\n             get => _outputResultsCacheFile;\n             set => _outputResultsCacheFile = value;\n         }\n \n+        /// <summary>\n+        /// The set of specified targets to build.\n+        /// </summary>\n+        public HashSet<string> Targets",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "They're not supposed to interact with the targets in `BuildRequestData`. I placed them into `BuildParameters` because I considered them a build parameter used with the `ProjectIsolationMode` and `OutputResultsCacheFile` build parameters. I don't think it should be added to the public API though... I can't make it `internal` since I need to access it from `XMake.cs`\u2014is there an attribute I can use to ensure it's not included in it? Otherwise, I'll just have to pass it as an argument to `EndBuild` from `XMake.cs`.",
              "createdAt": "2023-01-13T17:13:11Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -780,14 +792,24 @@ public string[] InputResultsCacheFiles\n \n         /// <summary>\n         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.\n-        /// Setting this also turns on isolated builds.\n+        /// If the isolation mode is set to <see cref=\"ProjectIsolationMode.False\"/>,\n+        /// this sets the isolation mode to <see cref=\"ProjectIsolationMode.True\"/>.\n         /// </summary>\n         public string OutputResultsCacheFile\n         {\n             get => _outputResultsCacheFile;\n             set => _outputResultsCacheFile = value;\n         }\n \n+        /// <summary>\n+        /// The set of specified targets to build.\n+        /// </summary>\n+        public HashSet<string> Targets",
              "author": {
                "login": "DmitriyShepelev"
              }
            },
            {
              "body": "I definitely agree that this feels wrong. I'm also not sure I understand the goal of passing this in here. Is the list of targets to put into the cache file the list of targets passed to the entry-point (what you'd see in xmake.cs) or the list computed by the graph for a given node? I expected the latter.",
              "createdAt": "2023-01-18T22:45:20Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -780,14 +792,24 @@ public string[] InputResultsCacheFiles\n \n         /// <summary>\n         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.\n-        /// Setting this also turns on isolated builds.\n+        /// If the isolation mode is set to <see cref=\"ProjectIsolationMode.False\"/>,\n+        /// this sets the isolation mode to <see cref=\"ProjectIsolationMode.True\"/>.\n         /// </summary>\n         public string OutputResultsCacheFile\n         {\n             get => _outputResultsCacheFile;\n             set => _outputResultsCacheFile = value;\n         }\n \n+        /// <summary>\n+        /// The set of specified targets to build.\n+        /// </summary>\n+        public HashSet<string> Targets",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It should be the latter. I've fixed it by obtaining the targets from the configuration's `BuildRequestConfiguration.TargetNames`, which are set through `BuildRequestData`.",
              "createdAt": "2023-01-19T17:15:05Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -780,14 +792,24 @@ public string[] InputResultsCacheFiles\n \n         /// <summary>\n         /// Output cache file where MSBuild will write the contents of its build result caches during EndBuild.\n-        /// Setting this also turns on isolated builds.\n+        /// If the isolation mode is set to <see cref=\"ProjectIsolationMode.False\"/>,\n+        /// this sets the isolation mode to <see cref=\"ProjectIsolationMode.True\"/>.\n         /// </summary>\n         public string OutputResultsCacheFile\n         {\n             get => _outputResultsCacheFile;\n             set => _outputResultsCacheFile = value;\n         }\n \n+        /// <summary>\n+        /// The set of specified targets to build.\n+        /// </summary>\n+        public HashSet<string> Targets",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can be reverted now too",
              "createdAt": "2023-01-17T17:12:10Z",
              "path": "src/Build.UnitTests/BackEnd/MockHost.cs",
              "diffHunk": "@@ -127,15 +149,11 @@ public string Name\n         }\n \n         /// <summary>\n-        /// Retrieve the build parameters.\n+        /// Gets or sets the build parameters.\n         /// </summary>\n-        /// <returns></returns>\n         public BuildParameters BuildParameters\n         {\n-            get\n-            {\n-                return _buildParameters;\n-            }\n+            get => _buildParameters; set => throw new NotImplementedException();",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I'd rather see two `if` clauses than this allocation.\r\n```suggestion\r\n                string trimmedParameter = parameter.Trim();\r\n                \r\n                if (trimmedParameter.Equals(nameof(ProjectIsolationMode.MessageUponIsolationViolation), StringComparison.OrdinalIgnoreCase) ||\r\n                    trimmedParameter.Equals(\"Message\", StringComparison.OrdinalIgnoreCase))\r\n                {\r\n```",
              "createdAt": "2023-01-18T22:18:31Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2545,6 +2546,42 @@ private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLin\n             return indexOfColon < 0 || indexOfColon == val.Length - 1;\n         }\n \n+        internal static ProjectIsolationMode ProcessIsolateProjectsSwitch(string[] parameters)\n+        {\n+\n+            // Before /isolate had parameters, it was treated as a boolean switch.\n+            // Preserve that in case anyone is using /isolate:{false|true}\n+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out bool boolValue))\n+            {\n+                return boolValue ? ProjectIsolationMode.True : ProjectIsolationMode.False;\n+            }\n+\n+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True;\n+            foreach (string parameter in parameters)\n+            {\n+                if (string.IsNullOrWhiteSpace(parameter))\n+                {\n+                    continue;\n+                }\n+\n+                var messageUponIsolationViolationParams = new HashSet<string>(StringComparer.OrdinalIgnoreCase)\n+                {\n+                    ProjectIsolationMode.MessageUponIsolationViolation.ToString(),\n+                    \"Message\",\n+                };\n+                if (messageUponIsolationViolationParams.Contains(parameter.Trim()))\n+                {",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: this can be simplified\r\n\r\n```suggestion\r\n            if (_configCache is not ConfigCacheWithOverride cacheWithOverride\r\n                || !cacheWithOverride.HasConfigurationInOverrideCache(result.ConfigurationId))\r\n```",
              "createdAt": "2023-01-23T15:36:18Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2047,6 +2046,23 @@ string ConcatenateGlobalProperties(BuildRequestConfiguration configuration)\n             }\n         }\n \n+        /// <summary>\n+        /// Records the result to the current cache if its config isn't in the override cache.\n+        /// </summary>\n+        /// <param name=\"result\">The result to potentially record in the current cache.</param>\n+        internal void RecordResultToCurrentCacheIfConfigNotInOverrideCache(BuildResult result)\n+        {\n+            // Record these results to the current cache only if their config isn't in the\n+            // override cache, which can happen if we are building in the project isolation mode\n+            // ProjectIsolationMode.MessageUponIsolationViolation, and the received result was built by an\n+            // isolation-violating dependency project.\n+            if (_configCache is not ConfigCacheWithOverride\n+                || !((ConfigCacheWithOverride)_configCache).HasConfigurationInOverrideCache(result.ConfigurationId))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would appreciate an explanatory comment here.",
              "createdAt": "2023-01-23T15:39:13Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -525,9 +525,9 @@ public void BeginBuild(BuildParameters parameters)\n                 // Initialize additional build parameters.\n                 _buildParameters.BuildId = GetNextBuildId();\n \n-                if (_buildParameters.UsesCachedResults())\n+                if (_buildParameters.UsesCachedResults() && parameters.ProjectIsolationMode == ProjectIsolationMode.False)\n                 {\n-                    _buildParameters.IsolateProjects = true;\n+                    _buildParameters.ProjectIsolationMode = ProjectIsolationMode.True;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would like to see another new test in this file with the end-to-end scenario: an undeclared reference that alters the return value of the declared reference's target but that doesn't propagate to the caller because of the caching.",
              "createdAt": "2023-01-23T15:44:23Z",
              "path": "src/Build.UnitTests/Graph/IsolateProjects_Tests.cs",
              "diffHunk": "@@ -239,7 +239,28 @@ public void IsolationRelatedMessagesShouldNotBePresentInNonIsolatedBuilds()\n                     logger.AssertLogDoesntContain(\"MSB4260\");\n                 },\n                 excludeReferencesFromConstraints: true,\n-                isolateProjects: false);\n+                isolateProjects: ProjectIsolationMode.False);\n+        }\n+\n+        [Fact]\n+        public void IsolationRelatedMessageShouldBePresentInIsolatedBuildsWithMessaging()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this flow correct?\r\n\r\n1. line 27 says \"this project will build with `target1;target2`\r\n2. line 44 issues a request for `target1;target2;target3`\r\n3. line 62 adds results for `target3`\r\n4. Because of 1, the serialization ignores 3\r\n\r\nso we get cached results for `1;2`.\r\n\r\nThat makes sense but I sure would appreciate some comments describing the setup.",
              "createdAt": "2023-01-23T15:49:12Z",
              "path": "src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs",
              "diffHunk": "@@ -75,5 +112,32 @@ public void OnlySerializeCacheEntryWithSmallestConfigId(object configCache, obje\n                 File.Delete(cacheFile);\n             }\n         }\n+\n+        [Theory]\n+        [MemberData(nameof(CacheData))]\n+        public void OnlySerializeResultsForSpecifiedTargets(object configCache, object resultsCache)\n+        {\n+            string cacheFile = null;\n+            try\n+            {\n+                cacheFile = FileUtilities.GetTemporaryFile(\"MSBuildResultsCache\");\n+                Assert.Null(CacheSerialization.SerializeCaches(\n+                    (ConfigCache)configCache,\n+                    (ResultsCache)resultsCache,\n+                    cacheFile,\n+                    ProjectIsolationMode.MessageUponIsolationViolation));\n+\n+                var result = CacheSerialization.DeserializeCaches(cacheFile);\n+                Assert.True(result.ConfigCache.HasConfiguration(1));\n+                BuildResult buildResult = result.ResultsCache.GetResultsForConfiguration(1);\n+                Assert.True(buildResult.HasResultsForTarget(\"target1\"));\n+                Assert.True(buildResult.HasResultsForTarget(\"target2\"));\n+                Assert.False(buildResult.HasResultsForTarget(\"target3\"));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yep that's correct.",
              "createdAt": "2023-01-23T16:14:36Z",
              "path": "src/Build.UnitTests/BackEnd/CacheSerialization_Tests.cs",
              "diffHunk": "@@ -75,5 +112,32 @@ public void OnlySerializeCacheEntryWithSmallestConfigId(object configCache, obje\n                 File.Delete(cacheFile);\n             }\n         }\n+\n+        [Theory]\n+        [MemberData(nameof(CacheData))]\n+        public void OnlySerializeResultsForSpecifiedTargets(object configCache, object resultsCache)\n+        {\n+            string cacheFile = null;\n+            try\n+            {\n+                cacheFile = FileUtilities.GetTemporaryFile(\"MSBuildResultsCache\");\n+                Assert.Null(CacheSerialization.SerializeCaches(\n+                    (ConfigCache)configCache,\n+                    (ResultsCache)resultsCache,\n+                    cacheFile,\n+                    ProjectIsolationMode.MessageUponIsolationViolation));\n+\n+                var result = CacheSerialization.DeserializeCaches(cacheFile);\n+                Assert.True(result.ConfigCache.HasConfiguration(1));\n+                BuildResult buildResult = result.ResultsCache.GetResultsForConfiguration(1);\n+                Assert.True(buildResult.HasResultsForTarget(\"target1\"));\n+                Assert.True(buildResult.HasResultsForTarget(\"target2\"));\n+                Assert.False(buildResult.HasResultsForTarget(\"target3\"));",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <param name=\"configCache\">The config cache in which to place to configuration. If <see langword=\"null\" />, use the host's config cache.</param>\r\n```",
              "createdAt": "2023-01-23T15:51:05Z",
              "path": "src/Build.UnitTests/BackEnd/Scheduler_Tests.cs",
              "diffHunk": "@@ -706,26 +722,46 @@ public void TestDetailedSummary()\n         }\n \n         /// <summary>\n-        /// Creates a configuration and stores it in the cache.\n+        /// Creates a configuration to store in the <see cref=\"ConfigCache\"/>.\n         /// </summary>\n-        private void CreateConfiguration(int configId, string file)\n+        /// <param name=\"configId\">The configuration id.</param>\n+        /// <param name=\"projectFullPath\">The project's full path.</param>\n+        /// <param name=\"configCache\">The config cache in which to place to configuration.</param>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <param name=\"resultsCache\">The results cache to contain the <see cref=\"BuildResult\"/>. If <see langword=\"null\" />, use the host's results cache.</param>\r\n```",
              "createdAt": "2023-01-23T15:51:41Z",
              "path": "src/Build.UnitTests/BackEnd/Scheduler_Tests.cs",
              "diffHunk": "@@ -706,26 +722,46 @@ public void TestDetailedSummary()\n         }\n \n         /// <summary>\n-        /// Creates a configuration and stores it in the cache.\n+        /// Creates a configuration to store in the <see cref=\"ConfigCache\"/>.\n         /// </summary>\n-        private void CreateConfiguration(int configId, string file)\n+        /// <param name=\"configId\">The configuration id.</param>\n+        /// <param name=\"projectFullPath\">The project's full path.</param>\n+        /// <param name=\"configCache\">The config cache in which to place to configuration.</param>\n+        private void CreateConfiguration(int configId, string projectFullPath, ConfigCache configCache = null)\n         {\n-            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), \"4.0\", Array.Empty<string>(), null);\n-            BuildRequestConfiguration config = new BuildRequestConfiguration(configId, data, \"4.0\");\n-            config.ProjectInitialTargets = new List<string>();\n-            config.ProjectDefaultTargets = new List<string>();\n-\n-            (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);\n+            BuildRequestData data = new(projectFullPath, new Dictionary<string, string>(), \"4.0\", Array.Empty<string>(), null);\n+            BuildRequestConfiguration config = new(configId, data, \"4.0\") { ProjectInitialTargets = new List<string>(), ProjectDefaultTargets = new List<string>() };\n+            if (configCache == null)\n+            {\n+                (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);\n+            }\n+            else\n+            {\n+                configCache.AddConfiguration(config);\n+            }\n         }\n \n         /// <summary>\n-        /// Creates and caches a built result.\n+        /// Creates and caches a <see cref=\"BuildResult\"/> in the <see cref=\"ResultsCache\"/>.\n         /// </summary>\n-        private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)\n+        /// <param name=\"request\">The build request corresponding to the <see cref=\"BuildResult\"/> to be\n+        /// created and cached.</param>\n+        /// <param name=\"target\">The target for which there will be a result.</param>\n+        /// <param name=\"workUnitResult\">The result of executing the specified target.</param>\n+        /// <param name=\"resultsCache\">The results cache to contain the <see cref=\"BuildResult\"/>.</param>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Needed to include the default targets here since `BuildResult.KeepSpecificTargetResults` relies on the targets passed into `BuildRequestData`.",
              "createdAt": "2023-01-24T17:08:44Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1394,7 +1398,7 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,\n                     projectFile,\n                     new Dictionary<string, string>(),\n                     MSBuildConstants.CurrentToolsVersion,\n-                    Array.Empty<string>(),\n+                    defaultTargets.ToArray() ?? Array.Empty<string>(),",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels a little weird to me. Why should MessageUponIsolationViolation be treated differently than True here?",
              "createdAt": "2023-01-24T22:39:20Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -362,12 +362,14 @@ public async Task<BuildResult[]> BuildProjects(string[] projectFiles, PropertyDi\n                 BuildRequestData data = new BuildRequestData(projectFiles[i], properties[i].ToDictionary(), explicitToolsVersion, targets, null);\n \n                 BuildRequestConfiguration config = new BuildRequestConfiguration(data, _componentHost.BuildParameters.DefaultToolsVersion);\n-\n+                ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;\n+                bool skipStaticGraphIsolationConstraints = (isolateProjects != ProjectIsolationMode.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))\n+                    || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "With `ProjectIsolationMode.True`, the only way for `skipStaticGraphIsolationConstraints` to be `true` is if the reference is exempt via the `GraphIsolationExemptReference` item: https://github.com/dotnet/msbuild/blob/a59d7a533c9154e8aa99b823625e7eff199ddf1a/documentation/specs/static-graph-implementation-details.md#how-isolation-exemption-complicates-everything\r\n\r\nWith `ProjectIsolationMode.MessageUponIsolationViolation`, the `GraphIsolationExemptReference` item doesn't need to exist since exemptions are allowed as needed, and `skipStaticGraphIsolationConstraints` is set to `true` accordingly.",
              "createdAt": "2023-01-24T23:04:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -362,12 +362,14 @@ public async Task<BuildResult[]> BuildProjects(string[] projectFiles, PropertyDi\n                 BuildRequestData data = new BuildRequestData(projectFiles[i], properties[i].ToDictionary(), explicitToolsVersion, targets, null);\n \n                 BuildRequestConfiguration config = new BuildRequestConfiguration(data, _componentHost.BuildParameters.DefaultToolsVersion);\n-\n+                ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;\n+                bool skipStaticGraphIsolationConstraints = (isolateProjects != ProjectIsolationMode.False && _requestEntry.RequestConfiguration.ShouldSkipIsolationConstraintsForReference(config.ProjectFullPath))\n+                    || isolateProjects == ProjectIsolationMode.MessageUponIsolationViolation;",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same here; why isn't just if (isolateProjects == ProjectIsolationMode.False)?",
              "createdAt": "2023-01-24T22:40:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -1034,7 +1034,8 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n \n         private List<string> GetUndeclaredProjects(MSBuild msbuildTask)\n         {\n-            if (!_componentHost.BuildParameters.IsolateProjects)\n+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`GetUndeclaredProjects` is used to ensure that the `MSBuild` task doesn't execute on referenced projects that are undeclared when the isolation mode is set to `True`, as this would violate isolation constraints. If the isolation mode is either `Message` or `False`, then we're OK with such an execution because isolation violations are permitted.",
              "createdAt": "2023-01-24T23:10:43Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -1034,7 +1034,8 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n \n         private List<string> GetUndeclaredProjects(MSBuild msbuildTask)\n         {\n-            if (!_componentHost.BuildParameters.IsolateProjects)\n+            ProjectIsolationMode isolateProjects = _componentHost.BuildParameters.ProjectIsolationMode;",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                     When set to \"MessageUponIsolationViolation\" (or its short\r\n                     form \"Message\"), only the results from top-level targets\r\n```",
              "createdAt": "2023-01-24T22:46:10Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -756,9 +755,18 @@\n     </comment>\n   </data>\n   <data name=\"HelpMessage_35_IsolateProjectsSwitch\" UESanitized=\"false\" Visibility=\"Public\">\n-    <value>  -isolateProjects[:True|False]\n+    <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]\n                      Causes MSBuild to build each project in isolation.\n \n+                     When set to MessageUponIsolationViolation (or its short\n+                     form Message), only the results from top-level targets",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is orc? Also, can you split this sentence into 2-3 sentences?",
              "createdAt": "2023-01-24T22:47:15Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -756,9 +755,18 @@\n     </comment>\n   </data>\n   <data name=\"HelpMessage_35_IsolateProjectsSwitch\" UESanitized=\"false\" Visibility=\"Public\">\n-    <value>  -isolateProjects[:True|False]\n+    <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]\n                      Causes MSBuild to build each project in isolation.\n \n+                     When set to MessageUponIsolationViolation (or its short\n+                     form Message), only the results from top-level targets\n+                     are serialized if the -orc switch is supplied to mitigate",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`-orc` is short for `-outputResultsCache`. I'll use the full name for clarity.",
              "createdAt": "2023-01-24T23:38:59Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -756,9 +755,18 @@\n     </comment>\n   </data>\n   <data name=\"HelpMessage_35_IsolateProjectsSwitch\" UESanitized=\"false\" Visibility=\"Public\">\n-    <value>  -isolateProjects[:True|False]\n+    <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]\n                      Causes MSBuild to build each project in isolation.\n \n+                     When set to MessageUponIsolationViolation (or its short\n+                     form Message), only the results from top-level targets\n+                     are serialized if the -orc switch is supplied to mitigate",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                     be taken into account. (That is, the definition of a\r\n```\r\n\r\nOfficial style guidelines recommend against using Latin.",
              "createdAt": "2023-01-24T22:49:20Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -756,9 +755,18 @@\n     </comment>\n   </data>\n   <data name=\"HelpMessage_35_IsolateProjectsSwitch\" UESanitized=\"false\" Visibility=\"Public\">\n-    <value>  -isolateProjects[:True|False]\n+    <value>  -isolateProjects[:True|MessageUponIsolationViolation|False]\n                      Causes MSBuild to build each project in isolation.\n \n+                     When set to MessageUponIsolationViolation (or its short\n+                     form Message), only the results from top-level targets\n+                     are serialized if the -orc switch is supplied to mitigate\n+                     the chances of an isolation-violating target on a\n+                     dependency project using incorrect state due to its\n+                     dependency on a cached target whose side effects would not\n+                     be taken into account. (E.g., the definition of a",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ProcessBooleanSwitch only looks at the last thing in the array. Why are you looping through it here? I don't know how to construct this in practice, but I'm imagining if this were \"[foo, true]\", then you'd be ok before but fail now.",
              "createdAt": "2023-01-24T22:54:41Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2545,6 +2545,39 @@ private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLin\n             return indexOfColon < 0 || indexOfColon == val.Length - 1;\n         }\n \n+        internal static ProjectIsolationMode ProcessIsolateProjectsSwitch(string[] parameters)\n+        {\n+\n+            // Before /isolate had parameters, it was treated as a boolean switch.\n+            // Preserve that in case anyone is using /isolate:{false|true}\n+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out bool boolValue))\n+            {\n+                return boolValue ? ProjectIsolationMode.True : ProjectIsolationMode.False;\n+            }\n+\n+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True;\n+            foreach (string parameter in parameters)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah that's the idea. It's to ensure we error if `/isolate:foo /isolate:true` or `/isolate:true /isolate:foo` are specified in the command line. Without my change, it would not fail on `/isolate:foo /isolate:true`.",
              "createdAt": "2023-01-24T23:54:15Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2545,6 +2545,39 @@ private static bool WarningsAsErrorsSwitchIsEmpty(CommandLineSwitches commandLin\n             return indexOfColon < 0 || indexOfColon == val.Length - 1;\n         }\n \n+        internal static ProjectIsolationMode ProcessIsolateProjectsSwitch(string[] parameters)\n+        {\n+\n+            // Before /isolate had parameters, it was treated as a boolean switch.\n+            // Preserve that in case anyone is using /isolate:{false|true}\n+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out bool boolValue))\n+            {\n+                return boolValue ? ProjectIsolationMode.True : ProjectIsolationMode.False;\n+            }\n+\n+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.True;\n+            foreach (string parameter in parameters)",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      }
    ]
  }
}