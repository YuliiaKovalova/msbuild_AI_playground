{
  "number": 6411,
  "title": "Official Builds With Custom OptProf 'Just Work'",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6085\r\n\r\n### Context\r\nFixes two issues:\r\n- If an official build is kicked off that had stale optprof, no optprof, or is a branch that never would have optptrof (think `exp/`), it would fail. We'd then have to re-run using a specific optprofdropname\r\n- When overriding the optprofdropname, we need to delete the IbcSourceBranchName. This is one less thing for the kitten (or any other dev launching pipeline builds of specific branches) to worry about!\r\n\r\n### Changes Made\r\nOur official builds now take OptProfDropName as a pipeline parameter. We should leave the default value (which is `default`) if we don't plan to use a custom drop. When we do, paste your optprofdrop there and the script should do the rest.\r\n\r\nNo more manually clearing the `IbcSourceBranch` pipeline variable!\r\n\r\n### Testing\r\nSee https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=4724888&view=results\r\nI launched a pipeline from branch `bevillal/ci/quality-of-life`.\r\n- I did not clear the IbcSourceBranchName pipeline variable, but did set the OptProfDrop pipeline parameter and it properly cleared `SourceBranch`. This fixes the issue with setting OptProfDrop and needing to clear that field manually.\r\n\r\nNow see https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=4724898&view=results\r\nI launched a build from the same branch and did NOT set optprofdrop. The build correctly pulls optprof data from `main`.\r\n\r\n### Notes\r\nThis one was very annoying to figure out.",
  "state": "MERGED",
  "createdAt": "2021-05-04T22:18:15Z",
  "updatedAt": "2021-05-29T04:56:00Z",
  "closedAt": "2021-05-29T04:56:00Z",
  "mergedAt": "2021-05-29T04:56:00Z",
  "additions": 18,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "bevillal/ci/quality-of-life",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a7cd569e898289eceaa0e34227676d787e196810",
          "message": "Ideal scenario",
          "committedDate": "2021-05-04T21:18:04Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eafdd445060bd74fc60a73e00cb8c1ef8175a5a9",
          "message": "Use optprofdrop var when building.",
          "committedDate": "2021-05-04T23:03:05Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ffeee71c55a5bbb4a6f496e13032483f452b141",
          "message": "Pass OptProfDropName as a pipeline parameter to use at compile-time. Set OptProfDrop and SourceBranch accordingly",
          "committedDate": "2021-05-05T00:24:31Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I know pretty much nothing about yml. Curious, why this can't be done with `OptProfDropName` alone, i.e. without introducing `OptProfDrop`. Assuming that `''` is the default value of the parameter, can we do the following and omit the rest of the changes except for the `refs/heads/exp/` -> !`refs/heads/vs` tweak?\r\n\r\n```suggestion\r\n  - ${{ if ne(parameters.OptProfDropName, '') }}:\r\n    - name: SourceBranch\r\n      value: ''\r\n```\r\n",
              "createdAt": "2021-05-05T10:49:55Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false\n \n+parameters:\n+- name: OptProfDropName\n+  displayName: Optional OptProfDrop Override\n+  type: string\n+  default: 'default'\n+\n variables:\n+  # if OptProfDrop is not set, string '$(OptProfDrop)' will be passed to the build script.\n+  - name: OptProfDrop\n+    value: ''\n   - name: SourceBranch\n     value: $(IbcSourceBranchName)\n-  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/exp/') }}:\n+  # If we're not on a vs* branch, use main as our optprof collection branch\n+  - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:\n     - name: SourceBranch\n       value: main\n+  # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch\n+  - ${{ if ne(parameters.OptProfDropName, 'default') }}:\n+    - name: OptProfDrop\n+      value: ${{parameters.OptProfDropName}}\n+    - name: SourceBranch\n+      value: ''",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The main thing to solve with `OptProfDropName` is making sure that further in the script `p:VisualStudioIbcDrop` is passed an empty string if we don't care to override it. Because `OptProfDropName` is a pipeline parameter now, it **can't** have an empty value \ud83d\ude1e (maybe it can be set to empty during the script compile time?). \r\n\r\nSo I have that `OptProfDrop` variable because:\r\n1. I know how to work with `OptProfDrop`as a variable at this point (ie. I know I can set it equal to an empty string)\r\n2. It took ~28 commits to get to this point and I _really_ don't want to keep testing to get a cleaner yml for minimal benefit\r\n",
              "createdAt": "2021-05-05T16:52:33Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false\n \n+parameters:\n+- name: OptProfDropName\n+  displayName: Optional OptProfDrop Override\n+  type: string\n+  default: 'default'\n+\n variables:\n+  # if OptProfDrop is not set, string '$(OptProfDrop)' will be passed to the build script.\n+  - name: OptProfDrop\n+    value: ''\n   - name: SourceBranch\n     value: $(IbcSourceBranchName)\n-  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/exp/') }}:\n+  # If we're not on a vs* branch, use main as our optprof collection branch\n+  - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:\n     - name: SourceBranch\n       value: main\n+  # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch\n+  - ${{ if ne(parameters.OptProfDropName, 'default') }}:\n+    - name: OptProfDrop\n+      value: ${{parameters.OptProfDropName}}\n+    - name: SourceBranch\n+      value: ''",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Makes perfect sense, thank you!",
              "createdAt": "2021-05-05T19:51:45Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false\n \n+parameters:\n+- name: OptProfDropName\n+  displayName: Optional OptProfDrop Override\n+  type: string\n+  default: 'default'\n+\n variables:\n+  # if OptProfDrop is not set, string '$(OptProfDrop)' will be passed to the build script.\n+  - name: OptProfDrop\n+    value: ''\n   - name: SourceBranch\n     value: $(IbcSourceBranchName)\n-  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/exp/') }}:\n+  # If we're not on a vs* branch, use main as our optprof collection branch\n+  - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:\n     - name: SourceBranch\n       value: main\n+  # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch\n+  - ${{ if ne(parameters.OptProfDropName, 'default') }}:\n+    - name: OptProfDrop\n+      value: ${{parameters.OptProfDropName}}\n+    - name: SourceBranch\n+      value: ''",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Note that this isn't so much about \"YAML\" as about \"Azure DevOps Pipelines YAML\" which is similar to \"GitHub Actions YAML\" but (maybe?) not exactly the same.\r\n\r\nHaving been in Ben's position I completely empathize with\r\n\r\n> It took ~28 commits to get to this point and I _really_ don't want to keep testing to get a cleaner yml for minimal benefit\r\n\r\n!",
              "createdAt": "2021-05-05T20:01:18Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false\n \n+parameters:\n+- name: OptProfDropName\n+  displayName: Optional OptProfDrop Override\n+  type: string\n+  default: 'default'\n+\n variables:\n+  # if OptProfDrop is not set, string '$(OptProfDrop)' will be passed to the build script.\n+  - name: OptProfDrop\n+    value: ''\n   - name: SourceBranch\n     value: $(IbcSourceBranchName)\n-  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/exp/') }}:\n+  # If we're not on a vs* branch, use main as our optprof collection branch\n+  - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:\n     - name: SourceBranch\n       value: main\n+  # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch\n+  - ${{ if ne(parameters.OptProfDropName, 'default') }}:\n+    - name: OptProfDrop\n+      value: ${{parameters.OptProfDropName}}\n+    - name: SourceBranch\n+      value: ''",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\ude4c\ud83c\udffb we can promote these now too! I'll send the PR after this one goes in.",
              "createdAt": "2021-05-05T19:58:53Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I considered promoting the other vars but realized I only ever changed the value of `SkipApplyOptimizationData` once ever \ud83e\udd37\u200d\u2642\ufe0f",
              "createdAt": "2021-05-05T20:45:16Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It doesn't appear to have worked so looks like you were totally right. https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=4728100&view=logs&j=bb592630-4b9d-53ad-3960-d954a70a95cf&t=bb592630-4b9d-53ad-3960-d954a70a95cf\r\n\r\n\ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f \r\n\r\nThat one is helpful to bootstrap from nothing to get a build from which you can collect updated optprof data. But in no other circumstance. And SignType is basically never helpful. So I'm going to stop bothering.",
              "createdAt": "2021-05-05T20:56:06Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "For whoever decides to do this in the future:\r\n\r\nI think it's because the call to CIBuild.cmd needs to be updated to take the pipeline parameter directly. Or some script variable needs be created to take in that value?",
              "createdAt": "2021-05-05T21:03:15Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "the call already takes the pipeline parameter, right? My untested pet theory was that it was because it was defined twice, once in the YAML and once in the AzDO metadata.",
              "createdAt": "2021-05-05T21:04:34Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I want to say that's runtime variable syntax and that syntax doesn't work with compile time variables and blarg \ud83d\ude43",
              "createdAt": "2021-05-05T21:10:50Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Bingo bango! #6415",
              "createdAt": "2021-05-05T21:38:43Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -10,12 +10,28 @@ trigger:\n #   SignType: real\n #   SkipApplyOptimizationData: false",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}