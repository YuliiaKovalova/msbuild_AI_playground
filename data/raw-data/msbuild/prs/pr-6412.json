{
  "number": 6412,
  "title": "Lock writes to _overallBuildSuccess",
  "body": "Hopefully fixes https://teams.microsoft.com/l/message/19:3212bf033f4c4b5198643a04fa1048fa@thread.skype/1620160142660?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=4ba7372f-2799-4677-89f0-7a1aaea3706c&parentMessageId=1620160142660&teamName=.NET%20Developer%20Experience&channelName=MSBuild&createdTime=1620160142660\r\n\r\n### Changes Made\r\nProtected writes to _overallBuildSuccess with _syncLock",
  "state": "MERGED",
  "createdAt": "2021-05-04T22:34:35Z",
  "updatedAt": "2021-05-24T15:20:45Z",
  "closedAt": "2021-05-24T15:20:45Z",
  "mergedAt": "2021-05-24T15:20:45Z",
  "additions": 91,
  "deletions": 36,
  "changedFiles": 2,
  "headRefName": "addLock",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "52d8a4c1d73a4034211d78c522dd7a78049463c1",
          "message": "Lock writes to _overallBuildSuccess",
          "committedDate": "2021-05-17T23:08:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55687ee7e15209858c95acb1738ec582810a0eb1",
          "message": "Log when mock cache is about to throw an exception",
          "committedDate": "2021-05-17T23:08:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab28a0f2ca20dcd97fa0d59a6c15fef20d770126",
          "message": "More locking",
          "committedDate": "2021-05-17T23:08:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14fb892af5a7c3f125bd21f943f9b05fa3357a4e",
          "message": "Debug assert that lock is held",
          "committedDate": "2021-05-17T23:08:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "There's a similar write at:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/b02f8de7e24d541df1d8c7d71cf8036d0ce91213/src/Build/BackEnd/BuildManager/BuildManager.cs#L1608\r\n\r\nWhy is it not protected by the lock as well?",
              "createdAt": "2021-05-05T10:36:58Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "On line 857, 2403, and 2417 as well. Though when they're called they might have been locked already.\r\n\r\n",
              "createdAt": "2021-05-05T17:13:56Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I tried to add the minimal number of locks (though I had missed the one @ladipro mentioned). If a write is not under a lock it means the method is called from other methods that do lock (or I missed them).  Do you prefer if I just lock every single write regardless if it's locked in a calling method?",
              "createdAt": "2021-05-05T18:23:19Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "> Do you prefer if I just lock every single write regardless if it's locked in a calling method?\r\n\r\ndefinitely not \ud83d\ude42 I did a quick crtl+f and commented while realizing some may have already been locked",
              "createdAt": "2021-05-05T18:46:55Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "As a general practice, you might consider adding `Debug.Assert(Monitor.IsEntered(lockobj))` at the top of all methods that need to be called within a lock, so it's not necessary to mentally infer it.",
              "createdAt": "2021-05-07T00:33:47Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "I've done this in other projects and it's been very handy to protect against future maintenance errors",
              "createdAt": "2021-05-07T00:34:11Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Well that's a cool trick to keep around! I added checks to non-locking but state mutating methods in the BuildManager and found a few that weren't protected.",
              "createdAt": "2021-05-07T01:43:04Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1628,12 +1628,16 @@ private void HandleExecuteSubmissionException(GraphBuildSubmission submission, E\n                 ? ae.InnerExceptions.First()\n                 : ex;\n \n-            if (submission.IsStarted)\n+            lock (_syncLock)\n             {\n-                submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                if (submission.IsStarted)\n+                {\n+                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));\n+                }\n+\n+                _overallBuildSuccess = false;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}