{
  "number": 9494,
  "title": "\u0421hange ProperyReassignment logged message type",
  "body": "Fixes #9385\r\n\r\n### Context\r\nDuring the Evaluation phase, property reassignment was logged as a plain message.\r\n\r\n### Changes Made\r\nconvert plain message to -> PropertyReassignmentEventArgs\r\n\r\n### Testing\r\nUT is added\r\n",
  "state": "MERGED",
  "createdAt": "2023-12-05T10:41:23Z",
  "updatedAt": "2023-12-11T10:23:38Z",
  "closedAt": "2023-12-11T10:23:38Z",
  "mergedAt": "2023-12-11T10:23:38Z",
  "additions": 82,
  "deletions": 14,
  "changedFiles": 2,
  "headRefName": "dev/ykovalova_fix_PropertyReassignment_message",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d7a35bf7c994e37a3f898fb92714eff6f98da4bc",
          "message": "change properyreassignment log message type",
          "committedDate": "2023-12-05T10:38:10Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb2af2cde994655c101166c8660e2b421637e720",
          "message": "update tests after changing logger message",
          "committedDate": "2023-12-05T11:11:00Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f05a1f9fda55062bee7c4d675398fc298fae8cf",
          "message": "fix comments to property reassignment test",
          "committedDate": "2023-12-07T13:09:01Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be5c97465aca8448882afc36632baf724c828c3d",
          "message": "fix review comments (add changewave 17.10)",
          "committedDate": "2023-12-08T12:02:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4983c764daafcb7cd4fc9d84213cb94410c82ce",
          "message": "update test assertions",
          "committedDate": "2023-12-08T15:31:28Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Please retarget this PR to vs17.9 branch, since this is a bug fix.",
        "createdAt": "2023-12-06T12:33:33Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: using `\"\"\"` literals allows you to use quotations as is without need to escape",
              "createdAt": "2023-12-06T15:33:47Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -4919,6 +4909,57 @@ private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<Mo\n             }\n         }\n \n+        /// <summary>\n+        /// Log when a property is being assigned a new value.\n+        /// </summary>\n+        [Fact]\n+        public void VerifyLogPropertyReassignment()\n+        {\n+            string testtargets = ObjectModelHelpers.CleanupFileContents(@\"",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you use the `TestEnvironment` and Transient- Folder/File for those?\r\nThat case you don't have to care about cleanup",
              "createdAt": "2023-12-06T15:35:39Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -4919,6 +4909,57 @@ private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<Mo\n             }\n         }\n \n+        /// <summary>\n+        /// Log when a property is being assigned a new value.\n+        /// </summary>\n+        [Fact]\n+        public void VerifyLogPropertyReassignment()\n+        {\n+            string testtargets = ObjectModelHelpers.CleanupFileContents(@\"\n+                                <Project xmlns='msbuildnamespace'>\n+                                     <PropertyGroup>\n+                                         <Prop>OldValue</Prop>\n+                                         <Prop>NewValue</Prop>\n+                                     </PropertyGroup>\n+                                  <Target Name=\"\"Test\"\"/>\n+                                </Project>\");\n+\n+            string tempPath = Path.GetTempPath();\n+            string targetDirectory = Path.Combine(tempPath, \"LogPropertyAssignments\");\n+            string testTargetPath = Path.Combine(targetDirectory, \"test.proj\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will fail when testing on other locales. You should be able to use `ResourceUtilities` to pull a proper string",
              "createdAt": "2023-12-06T15:37:47Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -4919,6 +4909,57 @@ private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<Mo\n             }\n         }\n \n+        /// <summary>\n+        /// Log when a property is being assigned a new value.\n+        /// </summary>\n+        [Fact]\n+        public void VerifyLogPropertyReassignment()\n+        {\n+            string testtargets = ObjectModelHelpers.CleanupFileContents(@\"\n+                                <Project xmlns='msbuildnamespace'>\n+                                     <PropertyGroup>\n+                                         <Prop>OldValue</Prop>\n+                                         <Prop>NewValue</Prop>\n+                                     </PropertyGroup>\n+                                  <Target Name=\"\"Test\"\"/>\n+                                </Project>\");\n+\n+            string tempPath = Path.GetTempPath();\n+            string targetDirectory = Path.Combine(tempPath, \"LogPropertyAssignments\");\n+            string testTargetPath = Path.Combine(targetDirectory, \"test.proj\");\n+\n+            try\n+            {\n+                Directory.CreateDirectory(targetDirectory);\n+                File.WriteAllText(testTargetPath, testtargets);\n+\n+                MockLogger logger = new()\n+                {\n+                    Verbosity = LoggerVerbosity.Diagnostic,\n+                };\n+                ProjectCollection pc = new();\n+                pc.RegisterLogger(logger);\n+                Project project = pc.LoadProject(testTargetPath);\n+\n+                bool result = project.Build();\n+                result.ShouldBeTrue();\n+                logger.BuildMessageEvents\n+                      .OfType<PropertyReassignmentEventArgs>()\n+                      .ShouldContain(r => r.PropertyName == \"Prop\"\n+                      && r.PreviousValue == \"OldValue\"\n+                      && r.NewValue == \"NewValue\"\n+                      && r.Message.StartsWith(\"Property reassignment: $(Prop)=\\\"NewValue\\\" (previous value: \\\"OldValue\\\")\"));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please put this new better behavior under changewave 17.10.",
              "createdAt": "2023-12-07T14:52:18Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1348,13 +1348,17 @@ private void LogPropertyReassignment(P predecessor, P property, string location)\n \n             if (newValue != oldValue)\n             {\n-                _evaluationLoggingContext.LogComment(\n-                    MessageImportance.Low,\n-                    \"PropertyReassignment\",\n+                var args = new PropertyReassignmentEventArgs(\n                     property.Name,\n-                    newValue,\n                     oldValue,\n-                    location);\n+                    newValue,\n+                    location,\n+                    message: null)\n+                {\n+                    BuildEventContext = _evaluationLoggingContext.BuildEventContext,\n+                };\n+\n+                _evaluationLoggingContext.LogBuildEvent(args);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Instead of removing this could you validate that it has the correct single value, like the env var block above?",
              "createdAt": "2023-12-07T14:54:16Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -4675,11 +4670,6 @@ public void VerifyPropertyTrackingLoggingNone()\n                         .EnvironmentVariableName\n                         .ShouldBe(\"DEFINED_ENVIRONMENT_VARIABLE2\");\n \n-                    logger\n-                        .AllBuildEvents\n-                        .OfType<PropertyReassignmentEventArgs>()\n-                        .ShouldBeEmpty();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "OMG if I'm reading this right, I think the newValue and the oldValue were swapped in the old code! And it's probably my fault! How did we not notice this all these years!",
              "createdAt": "2023-12-09T21:35:43Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1348,13 +1348,30 @@ private void LogPropertyReassignment(P predecessor, P property, string location)\n \n             if (newValue != oldValue)\n             {\n-                _evaluationLoggingContext.LogComment(\n-                    MessageImportance.Low,\n-                    \"PropertyReassignment\",\n-                    property.Name,\n-                    newValue,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "![image](https://github.com/dotnet/msbuild/assets/679326/d705ce59-c0f1-4fc0-8670-4225d691ff0a)\r\n\r\nGood news is that the new code fixes this, old on the right, new on the left.",
              "createdAt": "2023-12-09T21:38:35Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1348,13 +1348,30 @@ private void LogPropertyReassignment(P predecessor, P property, string location)\n \n             if (newValue != oldValue)\n             {\n-                _evaluationLoggingContext.LogComment(\n-                    MessageImportance.Low,\n-                    \"PropertyReassignment\",\n-                    property.Name,\n-                    newValue,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "ah, no, the old code is correct, the new value comes before the previous value. It's a recent regression in the viewer:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/commit/89065d2e2a8159a478afab788a5a0ead6f94e91d\r\n\r\nIt is still my fault, however fortunately this only broke a few weeks back. Everything in MSBuild is correct!",
              "createdAt": "2023-12-09T21:43:56Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1348,13 +1348,30 @@ private void LogPropertyReassignment(P predecessor, P property, string location)\n \n             if (newValue != oldValue)\n             {\n-                _evaluationLoggingContext.LogComment(\n-                    MessageImportance.Low,\n-                    \"PropertyReassignment\",\n-                    property.Name,\n-                    newValue,",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}