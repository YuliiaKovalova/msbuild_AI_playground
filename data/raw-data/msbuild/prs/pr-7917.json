{
  "number": 7917,
  "title": "Log error when build is aborted",
  "body": "Fixes #7287\r\n\r\n### Context\r\nCancelling a build can lead to a failed build with 0 warnings and 0 errors.\r\n\r\n### Changes Made\r\nEnsured that we log an error when the build fails. From code inspection, this was at least one place where, if the build was cancelled, we might not log the error, though the build could still fail.\r\n\r\n### Testing\r\nWe don't have a repro for #7287, so I could not test this properly.\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2022-08-25T23:30:25Z",
  "updatedAt": "2022-10-06T14:16:59Z",
  "closedAt": "2022-10-06T14:16:58Z",
  "mergedAt": null,
  "additions": 13,
  "deletions": 10,
  "changedFiles": 4,
  "headRefName": "log-error",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9a7d515f0240d7da17f60fbc8d2b914d311cd56d",
          "message": "Log when build is aborted",
          "committedDate": "2022-08-25T23:28:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37b40c4a2af29c14dccdd569e4186956db77b1fb",
          "message": "account for new error",
          "committedDate": "2022-09-19T22:30:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc889e7832596dd746034841bdc006775830c29d",
          "message": "Assert we fail if we log errors",
          "committedDate": "2022-09-20T18:22:05Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c17c18fa10941a646f1bab582ac89ed3ef208c9b",
          "message": "Don't assert for tests",
          "committedDate": "2022-09-20T20:51:57Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "90a06a7f7c667fc7dc7db8bd610166d3121a7dd3",
          "message": "Update src/Build/BackEnd/BuildManager/BuildManager.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-09-20T22:14:49Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b588c9d015c595624c56a96fc1b94b92fadd7aa1",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into log-error",
          "committedDate": "2022-09-21T19:32:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ee8b433a59b6c9f54f914fbf7e5f2a1f52b04109",
          "message": "Fix RoslynCodeTaskFactory tests\n\nThey logged errors instead of warnings but still succeeded",
          "committedDate": "2022-09-22T18:33:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f6565c16a9f7613ebea67a12b3b2a7961972e69",
          "message": "Merge branch 'log-error' of https://github.com/Forgind/msbuild into log-error",
          "committedDate": "2022-09-23T17:20:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13ae8c420d5db3dc8090cec37739c77fa26298d8",
          "message": "Revert assert changes",
          "committedDate": "2022-09-23T17:23:42Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4df694e8dba64a79ff7f22ca290b2d2cfa052243",
          "message": "Comments",
          "committedDate": "2022-09-26T21:35:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "376c7a56b1b0fff8466c851feb8113a1ec16802f",
          "message": "Revert change to BuildAbortedException",
          "committedDate": "2022-10-06T02:33:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Before:\r\n```\r\nBuild started 9/19/2022 4:33:23 PM.\r\nAttempting to cancel the build...\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nAfter:\r\n```\r\nBuild started 9/19/2022 4:34:19 PM.\r\nAttempting to cancel the build...\r\nMSBUILD : error MSB4188: Build was canceled.\r\n\r\nBuild FAILED.\r\n\r\n  MSBUILD : error MSB4188: Build was canceled.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```",
        "createdAt": "2022-09-19T23:34:38Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The failing tests made me concerned about having an assert here, and I am wondering whether I should really revert that part of this. Specifically, if you have a misauthored task that returns true but logs an error, and you're using a debug build of MSBuild, it will assert. That's bad, and they should fix it. If they're using a debug version of MSBuild on CI (does anyone do that?), the assert will look like a hang, and I imagine it would be very hard to track down. Together, those seem like a pretty unlikely scenario, but I think it would be extremely frustrating if someone did encounter that. What do you think? Revert or keep?",
        "createdAt": "2022-09-22T18:55:08Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> if you have a misauthored task that returns true but logs an error, and you're using a debug build of MSBuild, it will assert\r\n\r\nI think that's likely common enough that we should not have the assert.",
        "createdAt": "2022-09-23T17:18:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It looks like you reverted the BuildAbortedException error-code-scraping stuff. I prefer the revert there but I was asking you to change the BuildSubmission stuff back, since you said you didn't think it was critical to the change and it was nontrivial to understand the difference.",
        "createdAt": "2022-10-06T13:26:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be worth also adding an assert (maybe when shutting down logging service?) that effectively: buildSuccess == (errors.Count == 0)\n\nMight help flag some other remaining similar bug in future.",
              "createdAt": "2022-09-20T02:17:06Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -151,7 +151,7 @@ public void CanceledTasksDoNotLogMSB4181()\n                 manager.EndBuild();\n \n                 // No errors from cancelling a build.\n-                logger.ErrorCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Seems reasonable. Pushed a change. I put it at the end of EndBuild, though, right before we print BuildSucceeded or BuildFailed and only have it running for debug bits.",
              "createdAt": "2022-09-20T18:22:44Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -151,7 +151,7 @@ public void CanceledTasksDoNotLogMSB4181()\n                 manager.EndBuild();\n \n                 // No errors from cancelling a build.\n-                logger.ErrorCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "i assume in release the JIT does not bother emitting these conditions. ie., you don't need #if DEBUG.",
              "createdAt": "2022-09-20T20:38:41Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -971,6 +974,18 @@ public void EndBuild()\n                             _overallBuildSuccess = false;\n                         }\n \n+                        if (loggingService is LoggingService logService)",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "I am not confident, but I would guess so? I don't think it's a huge deal in this case if we're wrong, since the Debug.Asserts shouldn't fire.",
              "createdAt": "2022-09-20T22:14:20Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -971,6 +974,18 @@ public void EndBuild()\n                             _overallBuildSuccess = false;\n                         }\n \n+                        if (loggingService is LoggingService logService)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it'd be clearer to expand this out:\r\n\r\n```suggestion\r\n                            if (_overallBuildSuccess)\r\n                            {\r\n                                Debug.Assert(logService.HasLoggedErrors() == false, \"Build succeeded but logged errors.\");\r\n                            }\r\n                            else\r\n                            {\r\n                                Debug.Assert(logService.HasLoggedErrors() == true, \"Build failed but did not log errors.\");\r\n                            }\r\n```",
              "createdAt": "2022-09-20T22:11:27Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -974,6 +974,18 @@ public void EndBuild()\n                             _overallBuildSuccess = false;\n                         }\n \n+                        if (loggingService is LoggingService logService && !BuildEnvironmentState.s_runningTests)\n+                        {\n+                            if (_overallBuildSuccess)\n+                            {\n+                                Debug.Assert(logService.HasLoggedErrors() != _overallBuildSuccess, \"Build succeeded but logged errors.\");\n+                            }\n+                            else\n+                            {\n+                                Debug.Assert(logService.HasLoggedErrors() != _overallBuildSuccess, \"Build failed but did not log errors.\");\n+                            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this, can you explain please?",
              "createdAt": "2022-09-26T14:00:33Z",
              "path": "src/Build/BackEnd/BuildManager/BuildSubmission.cs",
              "diffHunk": "@@ -156,7 +156,7 @@ internal void CompleteResults(BuildResult result)\n             // this one.)\n             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, \"BuildResult doesn't match BuildRequest configuration\");\n \n-            if (BuildResult == null)\n+            if (BuildResult is null || (BuildResult.OverallResult == BuildResultCode.Success && result is not null))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I looked at this again more closely, and I think my change may have been a bit too simplistic. Tell me if this makes sense.\r\n\r\nWhen we were completing a particular result, we set BuildResult to be that result if BuildResult was null (i.e., this is the first result) but did not change after that. When we then checked for completion, we used BuildResult. That means that after the first BuildResult, we didn't care about future BuildResults. I think this worked well enough because it was unusual for users to submit several builds for a single configuration by themselves and more unusual to have some (but not the first) fail.\r\n\r\nThe new version I have here goes back to setting BuildResult based on the first result, but when checking for completion, it passes in each result as it comes along, ensuring each result has an opportunity to set, for example, BuildResult.OverallResult.\r\n\r\nI think that is more understandable and doesn't need a comment, but feel free to disagree, and I can add one.",
              "createdAt": "2022-09-26T21:39:53Z",
              "path": "src/Build/BackEnd/BuildManager/BuildSubmission.cs",
              "diffHunk": "@@ -156,7 +156,7 @@ internal void CompleteResults(BuildResult result)\n             // this one.)\n             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, \"BuildResult doesn't match BuildRequest configuration\");\n \n-            if (BuildResult == null)\n+            if (BuildResult is null || (BuildResult.OverallResult == BuildResultCode.Success && result is not null))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            ErrorCode = \"MSB4188\"; // Must match the shared resource \"BuildAborted\"\r\n```",
              "createdAt": "2022-09-26T14:00:59Z",
              "path": "src/Build/BackEnd/Shared/BuildAbortedException.cs",
              "diffHunk": "@@ -31,7 +31,7 @@ public BuildAbortedException()\n         {\n             ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, \"BuildAborted\");\n \n-            ErrorCode = errorCode;\n+            ErrorCode = \"MSB4188\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Update comment",
              "createdAt": "2022-09-26T15:21:04Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -151,7 +151,7 @@ public void CanceledTasksDoNotLogMSB4181()\n                 manager.EndBuild();\n \n                 // No errors from cancelling a build.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Oh, I didn't even notice that you were changing this from dynamic code extraction to hard-coded; I thought you were adding a new case.\r\n\r\nThis is faster (on a build-aborted error path) but the old way maintained this invariant automatically. Think it's worth the change?",
              "createdAt": "2022-09-27T14:26:18Z",
              "path": "src/Build/BackEnd/Shared/BuildAbortedException.cs",
              "diffHunk": "@@ -40,9 +38,7 @@ public BuildAbortedException()\n         public BuildAbortedException(string message)\n             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"BuildAbortedWithMessage\", message))\n         {\n-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, \"BuildAbortedWithMessage\", message);\n-\n-            ErrorCode = errorCode;\n+            ErrorCode = \"MSB4197\"; // Must match the shared resource \"BuildAbortedWithMessage\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think so. I don't see any advantage to trying to figure it out after the fact, and I would be very suspicious of any code path that isn't on the build aborted error path doing anything here, since it's in BuildAbortedException.cs. Slightly faster and (in my opinion) clearer.",
              "createdAt": "2022-09-28T15:22:40Z",
              "path": "src/Build/BackEnd/Shared/BuildAbortedException.cs",
              "diffHunk": "@@ -40,9 +38,7 @@ public BuildAbortedException()\n         public BuildAbortedException(string message)\n             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"BuildAbortedWithMessage\", message))\n         {\n-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, \"BuildAbortedWithMessage\", message);\n-\n-            ErrorCode = errorCode;\n+            ErrorCode = \"MSB4197\"; // Must match the shared resource \"BuildAbortedWithMessage\"",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The advantage is \"if the message or code needs to change, there's exactly one place to do that\". This makes it so that there are two.",
              "createdAt": "2022-09-28T15:26:27Z",
              "path": "src/Build/BackEnd/Shared/BuildAbortedException.cs",
              "diffHunk": "@@ -40,9 +38,7 @@ public BuildAbortedException()\n         public BuildAbortedException(string message)\n             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"BuildAbortedWithMessage\", message))\n         {\n-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, \"BuildAbortedWithMessage\", message);\n-\n-            ErrorCode = errorCode;\n+            ErrorCode = \"MSB4197\"; // Must match the shared resource \"BuildAbortedWithMessage\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'll add that just because we create a BuildAbortedException doesn't necessarily mean it gets thrown or, if it does, that it makes it to the user. I tried to figure out if we ever make it without the build actually having been cancelled, and I think we do in completing the build, but I am not at all confident.",
              "createdAt": "2022-10-05T20:40:47Z",
              "path": "src/Build/BackEnd/Shared/BuildAbortedException.cs",
              "diffHunk": "@@ -40,9 +38,7 @@ public BuildAbortedException()\n         public BuildAbortedException(string message)\n             : base(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"BuildAbortedWithMessage\", message))\n         {\n-            ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out string errorCode, out _, \"BuildAbortedWithMessage\", message);\n-\n-            ErrorCode = errorCode;\n+            ErrorCode = \"MSB4197\"; // Must match the shared resource \"BuildAbortedWithMessage\"",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's still not clear to me why this needs to change. What's the case where \r\n\r\n1. `CompleteResults` is called with a passing result, and then\r\n2. `CompleteResults` is called with a failing errored-out result\r\n\r\n? I get the \"there may be multiple requests for one configuration\" but not \"they have different results\".",
              "createdAt": "2022-09-27T14:32:36Z",
              "path": "src/Build/BackEnd/BuildManager/BuildSubmission.cs",
              "diffHunk": "@@ -156,12 +156,12 @@ internal void CompleteResults(BuildResult result)\n             // this one.)\n             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, \"BuildResult doesn't match BuildRequest configuration\");\n \n-            if (BuildResult == null)\n+            if (BuildResult is null)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's possible it doesn't. I noticed this bit from just looking at the code, noticing there can be multiple requests for one configuration, and assuming they might disagree. Then I looked at it in a debugger and tweaked variables. I don't actually know for sure if there's a way a user could get into that state, but I saw this as a \"I don't think it would hurt, but there's probably some way it will help for some weird edge case\" case. If you feel that's too risky or there is no way for that to happen, I can revert it. I was testing with one request, for what it's worth.",
              "createdAt": "2022-09-28T15:26:58Z",
              "path": "src/Build/BackEnd/BuildManager/BuildSubmission.cs",
              "diffHunk": "@@ -156,12 +156,12 @@ internal void CompleteResults(BuildResult result)\n             // this one.)\n             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, \"BuildResult doesn't match BuildRequest configuration\");\n \n-            if (BuildResult == null)\n+            if (BuildResult is null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Since neither of us understands it deeply I'd prefer to revert.",
              "createdAt": "2022-10-05T21:19:42Z",
              "path": "src/Build/BackEnd/BuildManager/BuildSubmission.cs",
              "diffHunk": "@@ -156,12 +156,12 @@ internal void CompleteResults(BuildResult result)\n             // this one.)\n             ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, \"BuildResult doesn't match BuildRequest configuration\");\n \n-            if (BuildResult == null)\n+            if (BuildResult is null)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}