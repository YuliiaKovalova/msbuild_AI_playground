{
  "number": 7837,
  "title": "[Graph] Fix target list when there are multiple ProjectReferences with different Targets metadata",
  "body": "Fixes #7694\r\n\r\nToday the first project reference wins and the targets from additional project references are ignored. There is a comment saying that behavior is \"in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\", but that doesn't seem to be the case.\r\n\r\nThis change changes the `TryAdd` to an `AddOrUpdate` so that multiple sets of targets are considered from multiple project references.\r\n\r\n## Simple repro:\r\n\r\nReferenced\\Referenced.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <UnusualOutput>Configuration\\Unusual.txt</UnusualOutput>\r\n  </PropertyGroup>\r\n  <Target Name=\"UnusualThing\" Returns=\"$(UnusualOutput)\" />\r\n</Project>\r\n```\r\n\r\nReferencing\\Referencing.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Referenced\\Referenced.csproj\" Targets=\"UnusualThing\" ReferenceOutputAssembly=\"false\" />\r\n    <ProjectReference Include=\"..\\Referenced\\Referenced.csproj\"  />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nRun: `msbuild Referencing\\Referencing.csproj -graph -isolate`\r\n\r\nNote that the repro uses `-isolate` to point out the issue more strongly, but the issue exists with any graph build.",
  "state": "MERGED",
  "createdAt": "2022-07-18T20:01:40Z",
  "updatedAt": "2022-07-29T18:16:26Z",
  "closedAt": "2022-07-26T11:47:05Z",
  "mergedAt": "2022-07-26T11:47:05Z",
  "additions": 122,
  "deletions": 10,
  "changedFiles": 5,
  "headRefName": "fix-graph-multiple-targets",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "11962f9d09204824fc1feb7672ea2abe1376a4e2",
          "message": "[Graph] Fix target list when there are multiple ProjectReferences with different Targets metadata",
          "committedDate": "2022-07-18T19:57:25Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a39d32166f25a645b336534c1df9e5ca8151c13",
          "message": "Update src/Build/Graph/GraphBuilder.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-07-18T21:20:05Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "112170600f78ba02ddfc519213c5e90c1bb4e95d",
          "message": "Update src/Build/Graph/GraphBuilder.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-07-18T21:30:27Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "caad78d0e894c8b6d66b66bce827fa24a39e9460",
          "message": "Fix",
          "committedDate": "2022-07-18T21:38:09Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "02e3650b28a551ce188194847472ac7e58f8134a",
          "message": "Fix default targets",
          "committedDate": "2022-07-25T17:27:38Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\n```suggestion\r\n                        // Bail out if the targets are the same.\r\n```",
              "createdAt": "2022-07-18T21:08:10Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm curious if there's a way to have different casing for this but have them still the same.",
              "createdAt": "2022-07-18T21:11:24Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Are they still the same if they have different other metadata? I'm thinking something like:\r\n```\r\n<ProjectReference Target=\"Foo\" Targets=\"Bar\" />\r\n<ProjectReference Target=\"Foo\" Targets=\"Biz\" />\r\n```\r\n\r\nYour merge part below presumably would account for that, but it wouldn't even get there with this check...",
              "createdAt": "2022-07-18T21:12:15Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Looks like MSBuild isn't case sensitive for Target names. Here's what it looks like for a non-graph build:\r\n\r\n<img width=\"562\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6445614/179619983-b41cd3ab-ae40-4b46-b845-43860160716b.png\">\r\n\r\nSo I think using `StringComparison.OrdinalIgnoreCase` is fine here.\r\n\r\nAlso duplicate targets in the list should be handled just fine anyway; this was more of an optimization to avoid allocating when merging things which clearly are equivalent.",
              "createdAt": "2022-07-18T21:25:33Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need to retain a copy of it?",
              "createdAt": "2022-07-18T21:13:39Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "In some (but not all :( ) cases, this is one of the objects returned from a `ProjectInstance.GetItems(...)` call, so I'm wanting to avoid mutating the value.\r\n\r\nIt's kinda weird to hold onto the `ProjectItemInstance` in the first place when we need very little from it, but I suppose it's a perf optimization to avoid allocating yet another object to hold a mutable subset of the `ProjectItemInstance`.",
              "createdAt": "2022-07-18T21:29:24Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                        mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, $\"{existingTargetsMetadata};{newTargetsMetadata});\r\n```",
              "createdAt": "2022-07-18T21:14:20Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();\n+                        mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, existingTargetsMetadata + \";\" + newTargetsMetadata);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The only reason I didn't do that is because I am not sure net472 has the string interpolation optimizations that net6.0 does, but this is such an edge-case it probably doesn't even matter.",
              "createdAt": "2022-07-18T21:30:24Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out of the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();\n+                        mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, existingTargetsMetadata + \";\" + newTargetsMetadata);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need to worry about default targets here? Or is that handled automatically somewhere. I ask because default targets can be returned from `GetEffectiveTargets`.\r\n\r\nMy main concern is if default targets aren't returned from `GetEffectiveTargets`, and aren't set here.",
              "createdAt": "2022-07-22T23:18:33Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out if the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();\n+                        mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, $\"{existingTargetsMetadata};{newTargetsMetadata}\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "`GetEffectiveTargets` does return the default targets if the `Targets` metadata is unspecified.\r\n\r\nHOWEVER you bring up a great point since I'm accidentally using the current project's default targets, not the referenced project's.\r\n\r\nI'll add a UT and fix...",
              "createdAt": "2022-07-25T17:10:50Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -621,9 +621,42 @@ internal class GraphEdges\n                     ErrorUtilities.VerifyThrow(ReferenceItems.TryGetValue(key, out ProjectItemInstance referenceItem), \"All requested keys should exist\");\n                     return referenceItem;\n                 }\n+            }\n+\n+            public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance edge)\n+            {\n+                ReferenceItems.AddOrUpdate(\n+                    key,\n+                    addValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance referenceItem) => referenceItem,\n+                    updateValueFactory: static ((ProjectGraphNode node, ProjectGraphNode reference) key, ProjectItemInstance existingItem, ProjectItemInstance newItem) =>\n+                    {\n+                        string existingTargetsMetadata = existingItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+                        string newTargetsMetadata = newItem.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);\n+\n+                        // Bail out if the targets are the same.\n+                        if (existingTargetsMetadata.Equals(newTargetsMetadata, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            return existingItem;\n+                        }\n \n-                // First edge wins, in accordance with vanilla msbuild behaviour when multiple msbuild tasks call into the same logical project\n-                set => ReferenceItems.TryAdd(key, value);\n+                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);\n+                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);\n+\n+                        ProjectItemInstance mergedItem = existingItem.DeepClone();\n+                        mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, $\"{existingTargetsMetadata};{newTargetsMetadata}\");",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not entirely sure how this is related, why was this needed?",
              "createdAt": "2022-07-22T23:19:55Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -191,8 +191,6 @@ public void ReparentInnerBuilds(Dictionary<ConfigurationMetadata, ParsedProject>\n \n                             if (outerBuildReferencingProject.ProjectReferences.Contains(innerBuild))\n                             {\n-                                graphBuilder.Edges.TryGetEdge((outerBuildReferencingProject, innerBuild), out var existingEdge);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It's unused :). The line below just calls `graphBuilder.Edges[]` directly so `existingEdge` isn't used at all.",
              "createdAt": "2022-07-25T17:27:19Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -191,8 +191,6 @@ public void ReparentInnerBuilds(Dictionary<ConfigurationMetadata, ParsedProject>\n \n                             if (outerBuildReferencingProject.ProjectReferences.Contains(innerBuild))\n                             {\n-                                graphBuilder.Edges.TryGetEdge((outerBuildReferencingProject, innerBuild), out var existingEdge);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}