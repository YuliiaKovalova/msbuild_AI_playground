{
  "number": 8251,
  "title": "Create proper relative symbolic links",
  "body": "Fixes #3730\r\n\r\n### Context\r\n\r\nSymbolic link in the `bin` folder to `obj/Assembly.dll` were created just like that.\r\n\r\n### Changes Made\r\n\r\nConverted relative paths to be relative to the target directory resulting in: `../obj/Assembly.dll`\r\nModified `NativeMethods.MakeSymbolicLink`\r\n\r\n### Testing\r\n\r\nUpdated one unit test to test both absolute and relative paths. This failed before my changes, succeeds now.\r\nAs `Path.GetRelativePath` is not supported on `netstandard2.0` and `net472`, I added a local version with appropriate unit tests.\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2022-12-18T02:59:35Z",
  "updatedAt": "2025-04-02T17:21:00Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 319,
  "deletions": 17,
  "changedFiles": 5,
  "headRefName": "3730-relativeSymbolicLinks",
  "isDraft": false,
  "author": {
    "login": "manfred-brands"
  },
  "milestone": {
    "title": "VS 17.13"
  },
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "78c1e28ff325bc0c7e54c128ba54d51e02fd44d3",
          "message": "Added RequiresSymbolicLinksTheoryAttribute",
          "committedDate": "2023-03-13T06:43:43Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e64fbfa76ce612245db63f8338b6c7cdc74e633",
          "message": "Create proper relative symbolic links",
          "committedDate": "2023-03-13T06:47:35Z",
          "author": {
            "name": "Manfred Brands",
            "email": "manfred-brands@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0bb006c666474180bb28348dacfab82f63fbcb4b",
          "message": "Merge branch 'main' into 3730-relativeSymbolicLinks",
          "committedDate": "2025-04-02T17:19:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The azure pipeline doesn't give a proper line number for the failing MacOS test and I don't see any artefacts I can look at.\r\nAs I don't have access to a Mac I cannot run those test my self. Any suggestions on how to resolve this?",
        "createdAt": "2022-12-19T01:20:59Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "```\r\nMicrosoft.Build.UnitTests.CopySymbolicLink_Tests.CopyToDestinationFolderWithSymbolicLinkCheck(useRelative: True)\r\nSystem.IO.FileNotFoundException : Could not find file '/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/uiack5y3.3xu/2A333ED756AF4dc392E728D0F864A398/tmp5e9beda9b70849c6a8b53561d26ccb64.tmp'.\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirError)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, UnixFileMode openPermissions, Int64& fileLength, UnixFileMode& filePermissions, Func`4 createOpenException)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\r\n   at System.IO.StreamReader.ValidateArgsAndOpenPath(String path, Encoding encoding, Int32 bufferSize)\r\n   at System.IO.File.ReadAllText(String path, Encoding encoding)\r\n   at Microsoft.Build.UnitTests.CopySymbolicLink_Tests.CopyToDestinationFolderWithSymbolicLinkCheck(Boolean useRelative) in /Users/runner/work/1/s/src/Tasks.UnitTests/Copy_Tests.cs:line 2441\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\\\r\n```\r\n",
        "createdAt": "2022-12-21T00:44:26Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@ladipro this PR will need `RequiresSymbolicLinksTheory` - can you please add it (reusing the `RequiresSymbolicLinksFact`)",
        "createdAt": "2023-02-20T14:36:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> @ladipro this PR will need `RequiresSymbolicLinksTheory` - can you please add it (reusing the `RequiresSymbolicLinksFact`)\r\n\r\nDone.",
        "createdAt": "2023-03-13T06:27:44Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "> > @ladipro this PR will need `RequiresSymbolicLinksTheory` - can you please add it (reusing the `RequiresSymbolicLinksFact`)\r\n> \r\n> Done.\r\n\r\nThank you for taking care of it! We may want to move the code from the constructor to a helper method so it's not duplicated in `RequiresSymbolicLinksTheory` and `RequiresSymbolicLinksFact` but that's not a blocking issue.",
        "createdAt": "2023-03-13T07:42:43Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "And apologies for missing Jan's mention.",
        "createdAt": "2023-03-13T07:52:41Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Friendly ping, we've been waiting for the fix for 6 years for https://github.com/dotnet/msbuild/issues/3730",
        "createdAt": "2025-04-02T16:37:01Z",
        "author": {
          "login": "vaboca"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you write this method yourself? It looks correct to me, as far as I can tell, but it's substantially longer than an answer using URIs:\r\nhttps://stackoverflow.com/questions/275689/how-to-get-relative-path-from-absolute-path\r\n\r\nMight that work? My primary concern is that it'd be pretty easy to get this slightly wrong in an important way and have it fail. That is, I think it's right, but I'm not confident.",
              "createdAt": "2023-01-04T20:18:10Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1148,26 +1152,131 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n                 flags |= SymbolicLink.AllowUnprivilegedCreate;\n             }\n \n-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);\n+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);\n             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;\n         }\n         else\n         {\n-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;\n+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;\n             errorMessage = symbolicLinkCreated ? null : \"The link() library call failed with the following error code: \" + Marshal.GetLastWin32Error();\n         }\n \n         return symbolicLinkCreated;\n     }\n \n+    internal static string GetRelativePath(string relativeTo, string path)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "As the comment in the method says, it is based upon [.NET 7 Path.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/IO/Path.cs#L843)\r\nThe unit test cases also come from .NET7.\r\n\r\nI updated the code to using the `Uri.MakeRelativeUri` method as used in the article, but many of the unit test cases failed. Even after adding a trailing slash, still many tests failed. Seeing all the comments on the article, I'm not the only one. Uri also have a far more restricted character set than files. \r\n\r\nI therefore think the original code is appropriate.\r\n\r\nWhy does msbuild need a build target for net472 and netstandard20? Do you update msbuild for older SDKs?",
              "createdAt": "2023-01-05T00:28:53Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1148,26 +1152,131 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n                 flags |= SymbolicLink.AllowUnprivilegedCreate;\n             }\n \n-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);\n+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);\n             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;\n         }\n         else\n         {\n-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;\n+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;\n             errorMessage = symbolicLinkCreated ? null : \"The link() library call failed with the following error code: \" + Marshal.GetLastWin32Error();\n         }\n \n         return symbolicLinkCreated;\n     }\n \n+    internal static string GetRelativePath(string relativeTo, string path)",
              "author": {
                "login": "manfred-brands"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "typo?",
              "createdAt": "2023-02-20T14:27:25Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1148,26 +1152,131 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n                 flags |= SymbolicLink.AllowUnprivilegedCreate;\n             }\n \n-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);\n+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);\n             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;\n         }\n         else\n         {\n-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;\n+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;\n             errorMessage = symbolicLinkCreated ? null : \"The link() library call failed with the following error code: \" + Marshal.GetLastWin32Error();\n         }\n \n         return symbolicLinkCreated;\n     }\n \n+    internal static string GetRelativePath(string relativeTo, string path)\n+    {\n+#if NETSTANDARD2_1 || NETCOREAPP2_0_OR_GREATER || NET5_0_OR_GREATER\n+        return Path.GetRelativePath(relativeTo, path);\n+#else\n+        // Based upon .NET 7.0 runtime Path.GetRelativePath\n+        relativeTo = Path.GetFullPath(relativeTo);\n+        path = Path.GetFullPath(path);\n+        int commonLength = GetCommonPathLength(relativeTo, path);\n+        if (commonLength == 0)\n+        {\n+            return path;    // No common part, use absolute path\n+        }\n+\n+        int relativeToLength = relativeTo.Length;\n+        if (EndsInDirectorySeparator(relativeTo))\n+        {\n+            relativeToLength--;\n+        }\n+\n+        bool pathEndsInSeparator = EndsInDirectorySeparator(path);\n+        int pathLength = path.Length;\n+        if (pathEndsInSeparator)\n+        {\n+            pathLength--;\n+        }\n+\n+        if (relativeToLength == pathLength && commonLength >= relativeToLength)\n+        {\n+            return \".\";\n+        }\n+\n+        var sb = new StringBuilder(Math.Max(relativeTo.Length, path.Length));\n+\n+        if (commonLength < relativeToLength)\n+        {\n+            sb.Append(\"..\");\n+\n+            for (int i = commonLength + 1; i < relativeToLength; i++)\n+            {\n+                if (IsDirectorySeparator(relativeTo[i]))\n+                {\n+                    sb.Append(Path.DirectorySeparatorChar);\n+                    sb.Append(\"..\");\n+                }\n+            }\n+        }\n+        else if (IsDirectorySeparator(path[commonLength]))\n+        {\n+            // No parent segments and we need to eat the initial separator.\n+            // (C:\\Foo C:\\Foo\\Bar case)\n+            commonLength++;\n+        }\n+\n+        // Now add the rest of the \"to\" path, adding back the trailing separator\n+        int differenceLength = pathLength - commonLength;\n+        if (pathEndsInSeparator)\n+            differenceLength++;\n+\n+        if (differenceLength > 0)\n+        {\n+            if (sb.Length > 0)\n+            {\n+                sb.Append(Path.DirectorySeparatorChar);\n+            }\n+\n+            sb.Append(path.Substring(commonLength));\n+        }\n+\n+        return sb.ToString();\n+\n+        static bool IsDirectorySeparator(char c) => c == Path.DirectorySeparatorChar || c == Path.AltDirectorySeparatorChar;\n+        static bool EndsInDirectorySeparator(string path) => path.Length > 0 && IsDirectorySeparator(path[path.Length - 1]);\n+        static int GetCommonPathLength(string first, string second)\n+        {\n+            int n = Math.Min(first.Length, second.Length);\n+            int commonLength;\n+            for (commonLength = 0; commonLength < n; commonLength++)\n+            {\n+                // Case sensitive compare, even some NTFS directories can be case sensitive\n+                if (first[commonLength] != second[commonLength])\n+                    break;\n+            }\n+\n+            // If nothing matches\n+            if (commonLength == 0)\n+                return commonLength;\n+\n+            // Or we're a full string and equal length or match to a separator\n+            if (commonLength == first.Length\n+                && (commonLength == second.Length || IsDirectorySeparator(second[commonLength])))\n+                return commonLength;\n+\n+            if (commonLength == second.Length && IsDirectorySeparator(first[commonLength]))\n+                return commonLength;\n+\n+            // It's possible we matched somewhere in the middle of a segment e.g. C:\\Foodie and C:\\Foobar.\n+            while (commonLength > 0 && !IsDirectorySeparator(first[commonLength - 1]))\n+                commonLength--;\n+\n+            return commonLength;\n+        }\n+#endif\n+    }\n+\n     /// <summary>\n     /// Get the last write time of the fullpath to the file.\n     /// </summary>\n     /// <param name=\"fullPath\">Full path to the file in the filesystem</param>\n     /// <returns>The last write time of the file, or DateTime.MinValue if the file does not exist.</returns>\n     /// <remarks>\n     /// This method should be accurate for regular files and symlinks, but can report incorrect data\n-    /// if the file's content was modified by writing to it through a different link, unless\n+    /// if the file's content was modified by writing to it through a different link, unlessLL",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes.",
              "createdAt": "2023-02-22T11:16:55Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1148,26 +1152,131 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n                 flags |= SymbolicLink.AllowUnprivilegedCreate;\n             }\n \n-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);\n+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);\n             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;\n         }\n         else\n         {\n-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;\n+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;\n             errorMessage = symbolicLinkCreated ? null : \"The link() library call failed with the following error code: \" + Marshal.GetLastWin32Error();\n         }\n \n         return symbolicLinkCreated;\n     }\n \n+    internal static string GetRelativePath(string relativeTo, string path)\n+    {\n+#if NETSTANDARD2_1 || NETCOREAPP2_0_OR_GREATER || NET5_0_OR_GREATER\n+        return Path.GetRelativePath(relativeTo, path);\n+#else\n+        // Based upon .NET 7.0 runtime Path.GetRelativePath\n+        relativeTo = Path.GetFullPath(relativeTo);\n+        path = Path.GetFullPath(path);\n+        int commonLength = GetCommonPathLength(relativeTo, path);\n+        if (commonLength == 0)\n+        {\n+            return path;    // No common part, use absolute path\n+        }\n+\n+        int relativeToLength = relativeTo.Length;\n+        if (EndsInDirectorySeparator(relativeTo))\n+        {\n+            relativeToLength--;\n+        }\n+\n+        bool pathEndsInSeparator = EndsInDirectorySeparator(path);\n+        int pathLength = path.Length;\n+        if (pathEndsInSeparator)\n+        {\n+            pathLength--;\n+        }\n+\n+        if (relativeToLength == pathLength && commonLength >= relativeToLength)\n+        {\n+            return \".\";\n+        }\n+\n+        var sb = new StringBuilder(Math.Max(relativeTo.Length, path.Length));\n+\n+        if (commonLength < relativeToLength)\n+        {\n+            sb.Append(\"..\");\n+\n+            for (int i = commonLength + 1; i < relativeToLength; i++)\n+            {\n+                if (IsDirectorySeparator(relativeTo[i]))\n+                {\n+                    sb.Append(Path.DirectorySeparatorChar);\n+                    sb.Append(\"..\");\n+                }\n+            }\n+        }\n+        else if (IsDirectorySeparator(path[commonLength]))\n+        {\n+            // No parent segments and we need to eat the initial separator.\n+            // (C:\\Foo C:\\Foo\\Bar case)\n+            commonLength++;\n+        }\n+\n+        // Now add the rest of the \"to\" path, adding back the trailing separator\n+        int differenceLength = pathLength - commonLength;\n+        if (pathEndsInSeparator)\n+            differenceLength++;\n+\n+        if (differenceLength > 0)\n+        {\n+            if (sb.Length > 0)\n+            {\n+                sb.Append(Path.DirectorySeparatorChar);\n+            }\n+\n+            sb.Append(path.Substring(commonLength));\n+        }\n+\n+        return sb.ToString();\n+\n+        static bool IsDirectorySeparator(char c) => c == Path.DirectorySeparatorChar || c == Path.AltDirectorySeparatorChar;\n+        static bool EndsInDirectorySeparator(string path) => path.Length > 0 && IsDirectorySeparator(path[path.Length - 1]);\n+        static int GetCommonPathLength(string first, string second)\n+        {\n+            int n = Math.Min(first.Length, second.Length);\n+            int commonLength;\n+            for (commonLength = 0; commonLength < n; commonLength++)\n+            {\n+                // Case sensitive compare, even some NTFS directories can be case sensitive\n+                if (first[commonLength] != second[commonLength])\n+                    break;\n+            }\n+\n+            // If nothing matches\n+            if (commonLength == 0)\n+                return commonLength;\n+\n+            // Or we're a full string and equal length or match to a separator\n+            if (commonLength == first.Length\n+                && (commonLength == second.Length || IsDirectorySeparator(second[commonLength])))\n+                return commonLength;\n+\n+            if (commonLength == second.Length && IsDirectorySeparator(first[commonLength]))\n+                return commonLength;\n+\n+            // It's possible we matched somewhere in the middle of a segment e.g. C:\\Foodie and C:\\Foobar.\n+            while (commonLength > 0 && !IsDirectorySeparator(first[commonLength - 1]))\n+                commonLength--;\n+\n+            return commonLength;\n+        }\n+#endif\n+    }\n+\n     /// <summary>\n     /// Get the last write time of the fullpath to the file.\n     /// </summary>\n     /// <param name=\"fullPath\">Full path to the file in the filesystem</param>\n     /// <returns>The last write time of the file, or DateTime.MinValue if the file does not exist.</returns>\n     /// <remarks>\n     /// This method should be accurate for regular files and symlinks, but can report incorrect data\n-    /// if the file's content was modified by writing to it through a different link, unless\n+    /// if the file's content was modified by writing to it through a different link, unlessLL",
              "author": {
                "login": "manfred-brands"
              }
            },
            {
              "body": "Fixed",
              "createdAt": "2023-03-13T06:27:30Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1148,26 +1152,131 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n                 flags |= SymbolicLink.AllowUnprivilegedCreate;\n             }\n \n-            symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, flags);\n+            symbolicLinkCreated = CreateSymbolicLink(newFileName, existingFileName, flags);\n             errorMessage = symbolicLinkCreated ? null : Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error()).Message;\n         }\n         else\n         {\n-            symbolicLinkCreated = symlink(exitingFileName, newFileName) == 0;\n+            symbolicLinkCreated = symlink(existingFileName, newFileName) == 0;\n             errorMessage = symbolicLinkCreated ? null : \"The link() library call failed with the following error code: \" + Marshal.GetLastWin32Error();\n         }\n \n         return symbolicLinkCreated;\n     }\n \n+    internal static string GetRelativePath(string relativeTo, string path)\n+    {\n+#if NETSTANDARD2_1 || NETCOREAPP2_0_OR_GREATER || NET5_0_OR_GREATER\n+        return Path.GetRelativePath(relativeTo, path);\n+#else\n+        // Based upon .NET 7.0 runtime Path.GetRelativePath\n+        relativeTo = Path.GetFullPath(relativeTo);\n+        path = Path.GetFullPath(path);\n+        int commonLength = GetCommonPathLength(relativeTo, path);\n+        if (commonLength == 0)\n+        {\n+            return path;    // No common part, use absolute path\n+        }\n+\n+        int relativeToLength = relativeTo.Length;\n+        if (EndsInDirectorySeparator(relativeTo))\n+        {\n+            relativeToLength--;\n+        }\n+\n+        bool pathEndsInSeparator = EndsInDirectorySeparator(path);\n+        int pathLength = path.Length;\n+        if (pathEndsInSeparator)\n+        {\n+            pathLength--;\n+        }\n+\n+        if (relativeToLength == pathLength && commonLength >= relativeToLength)\n+        {\n+            return \".\";\n+        }\n+\n+        var sb = new StringBuilder(Math.Max(relativeTo.Length, path.Length));\n+\n+        if (commonLength < relativeToLength)\n+        {\n+            sb.Append(\"..\");\n+\n+            for (int i = commonLength + 1; i < relativeToLength; i++)\n+            {\n+                if (IsDirectorySeparator(relativeTo[i]))\n+                {\n+                    sb.Append(Path.DirectorySeparatorChar);\n+                    sb.Append(\"..\");\n+                }\n+            }\n+        }\n+        else if (IsDirectorySeparator(path[commonLength]))\n+        {\n+            // No parent segments and we need to eat the initial separator.\n+            // (C:\\Foo C:\\Foo\\Bar case)\n+            commonLength++;\n+        }\n+\n+        // Now add the rest of the \"to\" path, adding back the trailing separator\n+        int differenceLength = pathLength - commonLength;\n+        if (pathEndsInSeparator)\n+            differenceLength++;\n+\n+        if (differenceLength > 0)\n+        {\n+            if (sb.Length > 0)\n+            {\n+                sb.Append(Path.DirectorySeparatorChar);\n+            }\n+\n+            sb.Append(path.Substring(commonLength));\n+        }\n+\n+        return sb.ToString();\n+\n+        static bool IsDirectorySeparator(char c) => c == Path.DirectorySeparatorChar || c == Path.AltDirectorySeparatorChar;\n+        static bool EndsInDirectorySeparator(string path) => path.Length > 0 && IsDirectorySeparator(path[path.Length - 1]);\n+        static int GetCommonPathLength(string first, string second)\n+        {\n+            int n = Math.Min(first.Length, second.Length);\n+            int commonLength;\n+            for (commonLength = 0; commonLength < n; commonLength++)\n+            {\n+                // Case sensitive compare, even some NTFS directories can be case sensitive\n+                if (first[commonLength] != second[commonLength])\n+                    break;\n+            }\n+\n+            // If nothing matches\n+            if (commonLength == 0)\n+                return commonLength;\n+\n+            // Or we're a full string and equal length or match to a separator\n+            if (commonLength == first.Length\n+                && (commonLength == second.Length || IsDirectorySeparator(second[commonLength])))\n+                return commonLength;\n+\n+            if (commonLength == second.Length && IsDirectorySeparator(first[commonLength]))\n+                return commonLength;\n+\n+            // It's possible we matched somewhere in the middle of a segment e.g. C:\\Foodie and C:\\Foobar.\n+            while (commonLength > 0 && !IsDirectorySeparator(first[commonLength - 1]))\n+                commonLength--;\n+\n+            return commonLength;\n+        }\n+#endif\n+    }\n+\n     /// <summary>\n     /// Get the last write time of the fullpath to the file.\n     /// </summary>\n     /// <param name=\"fullPath\">Full path to the file in the filesystem</param>\n     /// <returns>The last write time of the file, or DateTime.MinValue if the file does not exist.</returns>\n     /// <remarks>\n     /// This method should be accurate for regular files and symlinks, but can report incorrect data\n-    /// if the file's content was modified by writing to it through a different link, unless\n+    /// if the file's content was modified by writing to it through a different link, unlessLL",
              "author": {
                "login": "manfred-brands"
              }
            }
          ]
        }
      }
    ]
  }
}