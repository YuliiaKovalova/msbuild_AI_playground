{
  "number": 8599,
  "title": "Ensure metadata location when created from xml element with known location",
  "body": "Fixes #8579\r\n\r\n### Context\r\n`MetadataElement` of an `ItemElement` doesn't have line&col of `Location` set despite those are created from known xml.\r\nThis way errors referencing the `Location` from metadata would end up pointing to location (0, 0) in the file.\r\n\r\n### Reason\r\nThis happens only to `XmlElementWithLocation` (as opposed to `XmlAttributeWithLocation`) during creating `XmlElementWithLocation` from scratch (during parsing phase that doesn't have the reader with locations already available) from an existing `XmlAttributeWithLocation` (that has the proper location intitialized from Load phase). Due to the need to keep the constructors contract (we override existing `XmlElement`), we cannot pass the additional info in the constructor.\r\n\r\n### Changes Made\r\nMaking the `Location` property of `XmlElementWithLocation` writable - so that it can be properly rewritten if constructed from an existing node with available location info.\r\n\r\n### Testing\r\nHand testing plus applying the changfe to the other PR: https://github.com/dotnet/msbuild/pull/8581, solved the issue with (0, 0) warnings location\r\n\r\n### Note\r\nThis or https://github.com/dotnet/msbuild/pull/8581 PR (whichever is merged later) should remove the workaround https://github.com/dotnet/msbuild/pull/8581/files#diff-e289ba4ce7fa0e72cf63049cce595eafcad1e7b2034ccb3305cd0f06c2f822b8R196-R197 \r\n",
  "state": "MERGED",
  "createdAt": "2023-03-27T07:46:34Z",
  "updatedAt": "2023-04-23T07:07:11Z",
  "closedAt": "2023-04-23T07:07:11Z",
  "mergedAt": "2023-04-23T07:07:11Z",
  "additions": 109,
  "deletions": 20,
  "changedFiles": 10,
  "headRefName": "proto-metadata-loc",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "226514ede8434aaaeb06c5e99d96a61b2171eee5",
          "message": "Populate location of attributes/elements created from other node with location",
          "committedDate": "2023-03-27T07:38:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ab53ea217c98897d419bb037303566e40a98de9",
          "message": "Handle nulls gracefully",
          "committedDate": "2023-03-27T13:29:27Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ad18058019bc8a4bfe3d4aa6d6bcecf4c26cab9",
          "message": "Fix API breaking change",
          "committedDate": "2023-03-27T16:35:46Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "438d48b3756eaaeebd8f25724c0cbdee6c11eec0",
          "message": "Replace setter with AsyncLocal",
          "committedDate": "2023-04-17T16:39:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60fdf2e10a724969781a62a120c6b2524a7c184f",
          "message": "Merge remote-tracking branch 'upstream/main' into proto-metadata-loc",
          "committedDate": "2023-04-17T16:42:25Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c03fd0f483d71b1e0aa508f328e6da91f1102e1c",
          "message": "Remove temporary hack",
          "committedDate": "2023-04-17T17:44:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c912e28dd91aa39f761fe1e4231c36d88232b17a",
          "message": "Add missing comment",
          "committedDate": "2023-04-17T17:50:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d87a96f04dd308f1dce7cd75ff77b7f2f4b7c375",
          "message": "Add unit tests",
          "committedDate": "2023-04-18T10:17:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind - very good point about precautions with locations shifts!\r\nThe location is set in two places:\r\n* `RenameXmlElement` - there location is preserved from the element being renamed (not the attributes) - location of element should not change with rename\r\n* `ProjectMetadataElement.CreateDisconnected` - there the location is argument is populated only for code paths executed on initial project parsing (`ProjectParser.ParseProjectItemElement`) - so the location is not altered.\r\n\r\nAs for subsequent edits of the document (and hence possible subsequent locations shift) - this remains unchanged - the location is not guaranteed after edits:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/ElementLocation/XmlElementWithLocation.cs#L83",
        "createdAt": "2023-04-04T16:34:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> @Forgind - very good point about precautions with locations shifts! The location is set in two places:\r\n> \r\n> * `RenameXmlElement` - there location is preserved from the element being renamed (not the attributes) - location of element should not change with rename\r\n> * `ProjectMetadataElement.CreateDisconnected` - there the location is argument is populated only for code paths executed on initial project parsing (`ProjectParser.ParseProjectItemElement`) - so the location is not altered.\r\n> \r\n> As for subsequent edits of the document (and hence possible subsequent locations shift) - this remains unchanged - the location is not guaranteed after edits:\r\n> \r\n> https://github.com/dotnet/msbuild/blob/main/src/Build/ElementLocation/XmlElementWithLocation.cs#L83\r\n\r\nFor RenameXmlElement, I think row should be constant, but column could change? Am I wrong about that? Like if I have:\r\n`<Foo><Bar /></Foo>`, then change it to `<FooFooFoo><Bar /></FooFooFoo>`, the column of Bar would change.",
        "createdAt": "2023-04-04T18:07:55Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> For RenameXmlElement, I think row should be constant, but column could change? Am I wrong about that? Like if I have:\r\n> `<Foo><Bar /></Foo>`, then change it to `<FooFooFoo><Bar /></FooFooFoo>`, the column of Bar would change.\r\n\r\nCorrect.\r\nThis is something that's unchanged by this PR (it's regard the location of other xml elements after editing some elements)",
        "createdAt": "2023-04-04T18:28:37Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "If it's unchanged, I certainly can't complain too much \ud83d\ude42\r\n\r\nI was thinking you were adding locations in places there previously weren't locations, in which case if they're edited --> wrong, users might expect them to be right anyway, whereas they'd have no expectations without a location. But it sounds like you've looked into this fairly carefully, so I'm satisfied with it.",
        "createdAt": "2023-04-04T18:37:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Looks great! I'm curious why you chose `AsyncLocal<>` over `ThreadLocal<>` when the relevant code is not async.\r\n\r\nGood question. It was meant to be future-proofing. `AsyncLocal` should be full superset of `ThreadLocal` in regards of corectness guarantee, and I wouldn't expect much observable perf difference. \r\nBut those are just my personal feelings - so let's rather test this:\r\n\r\n```csharp\r\n        public class AsyncLocalTest\r\n        {\r\n            private readonly AsyncLocal<int> _al = new AsyncLocal<int>();\r\n            private readonly ThreadLocal<int> _tl = new ThreadLocal<int>();\r\n            private readonly TimeSpan[] _spans;\r\n\r\n            private AsyncLocalTest(int threadsCount)\r\n            {\r\n                _spans = new TimeSpan[threadsCount];\r\n            }\r\n\r\n            public static void Test(int threadsCount, int repetitions, bool useAsyncLocal)\r\n            {\r\n                AsyncLocalTest test = new(threadsCount);\r\n\r\n                Action<int> valueSetter = useAsyncLocal ? (i => test._al.Value = i) : (i => test._tl.Value = i);\r\n                Func<int> valueGetter = useAsyncLocal ? (() => test._al.Value) : (() => test._tl.Value);\r\n\r\n                //\r\n                // Warmup\r\n                //\r\n                test.TestInternal(0, 2, 0, valueSetter, valueGetter);\r\n\r\n                //\r\n                // Nullify timestamps\r\n                //\r\n                for (int i = 0; i < threadsCount; i++)\r\n                {\r\n                    test._spans[i] = TimeSpan.Zero;\r\n                }\r\n\r\n                //\r\n                // Run test in parallel\r\n                //\r\n                Random r = new Random();\r\n                Thread[] ts = Enumerable.Range(0, 16).Select(i =>\r\n                    new Thread(() => test.TestInternal(r.Next(), repetitions, i, valueSetter, valueGetter))).ToArray();\r\n\r\n                foreach (Thread thread in ts)\r\n                {\r\n                    thread.Start();\r\n                }\r\n\r\n                foreach (Thread thread in ts)\r\n                {\r\n                    thread.Join();\r\n                }\r\n\r\n                //\r\n                // Results\r\n                //\r\n                Console.WriteLine($\"====== {(useAsyncLocal ? \"Async\" : \"Thread\")} local: =========\");\r\n                foreach (TimeSpan span in test._spans)\r\n                {\r\n                    Console.WriteLine(span);\r\n                }\r\n            }\r\n\r\n            private void TestInternal(int start, int repetitions, int idx, Action<int> valueSetter, Func<int> valueGetter)\r\n            {\r\n                if (start > int.MaxValue - repetitions)\r\n                {\r\n                    start = int.MaxValue - repetitions;\r\n                }\r\n\r\n                valueSetter(start);\r\n\r\n                Stopwatch sw = Stopwatch.StartNew();\r\n                for (int i = start; i < start + repetitions; i++)\r\n                {\r\n                    // Test correctness\r\n                    if (valueGetter() != i)\r\n                    {\r\n                        throw new Exception();\r\n                    }\r\n\r\n                    valueSetter(i + 1);\r\n                }\r\n                sw.Stop();\r\n                _spans[idx] = sw.Elapsed;\r\n            }\r\n        }\r\n```\r\n\r\nWhen run as (on 20 logical cores):\r\n```csharp\r\n    AsyncLocalTest.Test(16, 1000000, useAsyncLocal:true);\r\n    AsyncLocalTest.Test(16, 1000000, useAsyncLocal:false);\r\n```\r\n\r\nit doesn't crash (so both are giving needed guarantee in simple threading scenario) and gives following output:\r\n\r\n```console\r\n====== Async local: =========\r\n00:00:00.2879965\r\n00:00:00.3978832\r\n00:00:00.4252494\r\n00:00:00.3571488\r\n00:00:00.2553354\r\n00:00:00.4321759\r\n00:00:00.3594426\r\n00:00:00.1722112\r\n00:00:00.3180074\r\n00:00:00.1307697\r\n00:00:00.2985377\r\n00:00:00.2280112\r\n00:00:00.2669700\r\n00:00:00.2654464\r\n00:00:00.3281217\r\n00:00:00.3372726\r\n====== Thread local: =========\r\n00:00:00.0285052\r\n00:00:00.3106148\r\n00:00:00.2867749\r\n00:00:00.4214141\r\n00:00:00.0598388\r\n00:00:00.2942306\r\n00:00:00.2251675\r\n00:00:00.4182183\r\n00:00:00.3176023\r\n00:00:00.2683520\r\n00:00:00.2399414\r\n00:00:00.0855781\r\n00:00:00.2897219\r\n00:00:00.0877046\r\n00:00:00.0506610\r\n00:00:00.1883100\r\n```\r\n\r\nI'd conclude that for our purposes we can call them to be equally performant (well below any level of being able to impact overall perf numbers)",
        "createdAt": "2023-04-18T08:42:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Is there a way to add some test coverage for this?\r\n\r\nTests added",
        "createdAt": "2023-04-18T10:18:49Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I wonder if there's a slightly more elegant way of setting location for newly created elements than adding a Location setter. If you passed the location to `ProjectRootElement.CreateElement` which in turn would pass it to a new overload of  `XmlDocumentWithLocation.CreateElement`, you could set its `_reader` field for the duration of the base call, similar to what `Load` does. Note that `_reader` is of type `IXmlLineInfo`, so not necessarily an XML reader. Or you could introduce a new field (`_currentLocation`?) , which would then even avoid boxing.\r\n\r\nOverall, I would find it nicer to leave the `*WithLocation` classes concerned with setting location without leaking the setter like this. What do you think?",
              "createdAt": "2023-04-05T10:53:26Z",
              "path": "src/Build/Construction/ProjectMetadataElement.cs",
              "diffHunk": "@@ -100,13 +100,17 @@ public string Value\n         /// Creates an unparented ProjectMetadataElement, wrapping an unparented XmlElement.\n         /// Caller should then ensure the element is added to a parent.\n         /// </summary>\n-        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject)\n+        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject, ElementLocation location = null)\n         {\n             XmlUtilities.VerifyThrowArgumentValidElementName(name);\n             ErrorUtilities.VerifyThrowArgument(!FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name), \"ItemSpecModifierCannotBeCustomMetadata\", name);\n             ErrorUtilities.VerifyThrowInvalidOperation(!XMakeElements.ReservedItemNames.Contains(name), \"CannotModifyReservedItemMetadata\", name);\n \n             XmlElementWithLocation element = containingProject.CreateElement(name);\n+            if (location != null)\n+            {\n+                element.Location = location;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thanks for looking into this! Great suggestion!\r\n\r\nI was as well trying to see if I can just extend the creation and avoid subsequent mutation.\r\nThe problem that stopped me and let me to current code is that the `XmlDocumentWithLocation` extends `XmlDocument` and our overriden `CreateElement` is not being called directy, but via a `XmlDocument` function that inside calls internal helper function:\r\n\r\n<img width=\"1015\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3809076/231559925-0714d99b-b7aa-4fdf-b16a-9add2f899374.png\">\r\n\r\n\r\nSo we'd need to duplicate some of that internal `XmlDocument` functionality (and maintain it going forward).\r\n\r\nNot sure which is the lesser evil (allowing mutations vs duplicating `XmlDocument` code) - I arbitrarily decided for openng for mutation.\r\n\r\nWhat do you think about this?",
              "createdAt": "2023-04-12T19:13:54Z",
              "path": "src/Build/Construction/ProjectMetadataElement.cs",
              "diffHunk": "@@ -100,13 +100,17 @@ public string Value\n         /// Creates an unparented ProjectMetadataElement, wrapping an unparented XmlElement.\n         /// Caller should then ensure the element is added to a parent.\n         /// </summary>\n-        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject)\n+        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject, ElementLocation location = null)\n         {\n             XmlUtilities.VerifyThrowArgumentValidElementName(name);\n             ErrorUtilities.VerifyThrowArgument(!FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name), \"ItemSpecModifierCannotBeCustomMetadata\", name);\n             ErrorUtilities.VerifyThrowInvalidOperation(!XMakeElements.ReservedItemNames.Contains(name), \"CannotModifyReservedItemMetadata\", name);\n \n             XmlElementWithLocation element = containingProject.CreateElement(name);\n+            if (location != null)\n+            {\n+                element.Location = location;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Great thanks for offline discussion and tips! - I ended up passing the info via `AsyncLocal` filed.",
              "createdAt": "2023-04-17T17:51:27Z",
              "path": "src/Build/Construction/ProjectMetadataElement.cs",
              "diffHunk": "@@ -100,13 +100,17 @@ public string Value\n         /// Creates an unparented ProjectMetadataElement, wrapping an unparented XmlElement.\n         /// Caller should then ensure the element is added to a parent.\n         /// </summary>\n-        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject)\n+        internal static ProjectMetadataElement CreateDisconnected(string name, ProjectRootElement containingProject, ElementLocation location = null)\n         {\n             XmlUtilities.VerifyThrowArgumentValidElementName(name);\n             ErrorUtilities.VerifyThrowArgument(!FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name), \"ItemSpecModifierCannotBeCustomMetadata\", name);\n             ErrorUtilities.VerifyThrowInvalidOperation(!XMakeElements.ReservedItemNames.Contains(name), \"CannotModifyReservedItemMetadata\", name);\n \n             XmlElementWithLocation element = containingProject.CreateElement(name);\n+            if (location != null)\n+            {\n+                element.Location = location;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}