{
  "number": 7852,
  "title": "BuildManager.ShutdownAllNodes shall shut down server as well",
  "body": "### Context\r\nExisting CLI command \"dotnet build-server shutdown\" was not shutting down MSBuild server.\r\n\r\n### Changes Made\r\nBuildManager.ShutdownAllNodes calls MSBuildClient which connects to Server by namedpipe and send it NodeBuildComplete packet(false) =>shutdown.\r\n\r\n### Testing\r\nUnit testing\r\n",
  "state": "MERGED",
  "createdAt": "2022-07-27T15:25:56Z",
  "updatedAt": "2022-08-23T15:13:23Z",
  "closedAt": "2022-08-05T10:44:02Z",
  "mergedAt": "2022-08-05T10:44:01Z",
  "additions": 194,
  "deletions": 23,
  "changedFiles": 8,
  "headRefName": "rokonec/shutdown-command-includes-server",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9545020f4577ec1d4f206c05306ade55d3a1d09c",
          "message": "BuildManager.ShutdownAllNodes() involves server as well",
          "committedDate": "2022-07-27T14:58:27Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dfa587da06e97913ef4efad849f42dc9e4125d54",
          "message": "Fix unit tests flakines on Linux.",
          "committedDate": "2022-07-27T16:03:43Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8a9b06c7a4fff93133750be95e9e18165ce5be1",
          "message": "Spelling\n\nCo-authored-by: AR-May <67507805+AR-May@users.noreply.github.com>",
          "committedDate": "2022-07-28T16:46:10Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run\r\n",
        "createdAt": "2022-07-27T18:37:29Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-07-27T18:37:39Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-07-27T22:03:32Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-07-27T22:03:41Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "It doesn't look like this fix has made it into .NET 7 RC1 or RC2 builds. Is it planned to get this into .NET 7? Without this change, it's actually causing unit test failures for the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The test verifies that a Linux container with .NET installed doesn't have any world-writable files in it: https://github.com/dotnet/dotnet-docker/blob/307a914cd770826310f674c05ebb3783196e29a1/tests/Microsoft.DotNet.Docker.Tests/ProductImageTests.cs#L37-L81\r\n\r\nIt's failing because the build server is leaving some files which are world-writable:\r\n\r\n```\r\n /tmp/.dotnet\r\n /tmp/.dotnet/shm\r\n /tmp/.dotnet/shm/global\r\n /tmp/.dotnet/shm/global/msbuild-server-running-wPQ91q+X+rXsHDuCumgZV4XXjw8hkO8ONKwWn5AiWwQ\r\n```",
        "createdAt": "2022-08-23T15:08:31Z",
        "author": {
          "login": "mthalman"
        }
      },
      {
        "body": "The squash commit of this PR appears to be an ancestor of the current RC1 reference in sdk: 7063192..5d102ae37163fc1f22610bb433c3ab9a2fff91f0, so there may be a new/different issue @mthalman.",
        "createdAt": "2022-08-23T15:13:23Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is not running.\");\r\n```",
              "createdAt": "2022-07-28T15:15:41Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CommunicationsUtilities.Trace(\"Client cannot connect to idle server to shut it down.\");\r\n```",
              "createdAt": "2022-07-28T15:17:46Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server can not be shutdown for it is not idle.\");\n+                return false;\n+            }\n+\n+            // Connect to server.\n+            if (!TryConnectToServer(1_000))\n+            {\n+                CommunicationsUtilities.Trace(\"Server connect to idle server to shutdown it.\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CommunicationsUtilities.Trace(\"Server cannot be shut down for it is not idle.\");\r\n```",
              "createdAt": "2022-07-28T15:18:37Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server can not be shutdown for it is not idle.\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CommunicationsUtilities.Trace(\"Failed to send shutdown command to the server.\");\r\n```",
              "createdAt": "2022-07-28T15:21:18Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server can not be shutdown for it is not idle.\");\n+                return false;\n+            }\n+\n+            // Connect to server.\n+            if (!TryConnectToServer(1_000))\n+            {\n+                CommunicationsUtilities.Trace(\"Server connect to idle server to shutdown it.\");\n+                return false;\n+            }\n+\n+            if (!TrySendShutdownCommand())\n+            {\n+                CommunicationsUtilities.Trace(\"Failed sent shutdown command to the server.\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this behavior (not to shut down if the node is busy) comply with what regular MSBuild nodes do?",
              "createdAt": "2022-07-28T15:46:43Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server can not be shutdown for it is not idle.\");",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Yes, it does. ShutdownAllNodes tries connect to all candidate processes by namedpipe. If working node is busy, his named pipe is still open (connected to main node) and connection to it will fail, effectively leaving this node alone. ",
              "createdAt": "2022-07-28T16:49:08Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is n-ot running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server can not be shutdown for it is not idle.\");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need both ExitType.ToString() and ExitTypeString? If we need the former, can we wrap this in MSBuildEventSource.Log.IsEnabled() or whatever it is?",
              "createdAt": "2022-08-01T14:42:53Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Since this is called one per build, this would have negligible perf gains.",
              "createdAt": "2022-08-01T18:06:41Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we cancel it externally in this case?",
              "createdAt": "2022-08-01T14:44:39Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is not running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server cannot be shut down for it is not idle.\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It is consistent with how we shutdown nodes. We shut only those which are waiting to be used (not building and not connected to main node).",
              "createdAt": "2022-08-01T18:05:43Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -195,10 +200,74 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n             _numConsoleWritePackets = 0;\n             _sizeOfConsoleWritePackets = 0;\n \n+            ReadPacketsLoop(cancellationToken);\n+\n+            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);\n+            CommunicationsUtilities.Trace(\"Build finished.\");\n+            return _exitResult;\n+        }\n+\n+        /// <summary>\n+        /// Attempt to shutdown MSBuild Server node.\n+        /// </summary>\n+        /// <remarks>\n+        /// It shutdown only server created by current user with current admin elevation.\n+        /// </remarks>\n+        /// <param name=\"cancellationToken\"></param>\n+        /// <returns>True if server is not running anymore.</returns>\n+        public static bool ShutdownServer(CancellationToken cancellationToken)\n+        {\n+            // Neither commandLine nor msbuildlocation is involved in node shutdown\n+            var client = new MSBuildClient(commandLine: null!, msbuildLocation: null!);\n+\n+            return client.TryShutdownServer(cancellationToken);\n+        }\n+\n+        private bool TryShutdownServer(CancellationToken cancellationToken)\n+        {\n+            CommunicationsUtilities.Trace(\"Trying shutdown server node.\");\n+            string serverRunningMutexName = OutOfProcServerNode.GetRunningServerMutexName(_handshake);\n+            string serverBusyMutexName = OutOfProcServerNode.GetBusyServerMutexName(_handshake);\n+\n+            bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (!serverIsAlreadyRunning)\n+            {\n+                CommunicationsUtilities.Trace(\"No need to shutdown server node for it is not running.\");\n+                return true;\n+            }\n+\n+            // Check that server is not busy.\n+            var serverWasBusy = ServerNamedMutex.WasOpen(serverBusyMutexName);\n+            if (serverWasBusy)\n+            {\n+                CommunicationsUtilities.Trace(\"Server cannot be shut down for it is not idle.\");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wondering about this...it'd be a bit messy to make it return a bool for \"succeeded in really reverting something\", and that wouldn't really help anyway because you don't explicitly call this in tests...but I think of these TransientTest___s as asserting first that it exists and second that they can make it not exist, and this breaks that assumption. Not sure what the right answer is.",
              "createdAt": "2022-08-01T14:50:08Z",
              "path": "src/Shared/UnitTests/TestEnvironment.cs",
              "diffHunk": "@@ -583,7 +583,14 @@ public override void Revert()\n         {\n             if (_processId > -1)\n             {\n-                Process.GetProcessById(_processId).KillTree(1000);\n+                try\n+                {\n+                    Process.GetProcessById(_processId).KillTree(1000);\n+                }\n+                catch\n+                {\n+                    // ignore if process is already dead",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "One of the goal of TransientTest__s is, IMO, to get into consistent state so preceding tests side effects will not effect following test runs. So if process has exited himself, was killed by another logic, etc... we still get into consistent state => there is no left over process.\r\nIf test want to assert that process is still running at some point of test run it should be done by usual `Asserting`.\r\n",
              "createdAt": "2022-08-02T11:53:35Z",
              "path": "src/Shared/UnitTests/TestEnvironment.cs",
              "diffHunk": "@@ -583,7 +583,14 @@ public override void Revert()\n         {\n             if (_processId > -1)\n             {\n-                Process.GetProcessById(_processId).KillTree(1000);\n+                try\n+                {\n+                    Process.GetProcessById(_processId).KillTree(1000);\n+                }\n+                catch\n+                {\n+                    // ignore if process is already dead",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}