{
  "number": 11229,
  "title": "Enum.ToString method is resulting in slow performance. Fix it.",
  "body": "### Context\r\nWe recently merged https://github.com/dotnet/msbuild/pull/11202\r\nWhile profiling, the VS profiler started complaining about the Enum.ToString() with a perf cost 0.14%\r\n![EnumToString](https://github.com/user-attachments/assets/7ebf97bd-3f33-4d30-a67c-0ebc7c2dcbc2)\r\nSee also here:\r\nhttps://learn.microsoft.com/en-us/visualstudio/profiling/performance-insights-enum-tostring?view=vs-2022\r\n\r\n### Changes Made\r\nIntroduced a function to do the conversion in a Reflection-less way.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-06T15:25:56Z",
  "updatedAt": "2025-01-08T10:58:08Z",
  "closedAt": "2025-01-08T10:58:06Z",
  "mergedAt": "2025-01-08T10:58:06Z",
  "additions": 17,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "replace-enum-to-string",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "878a618db6bf14cabba12eeda6e885ced9d7ce9f",
          "message": "Enum.ToString method is resulting in slow performance. Fix it.",
          "committedDate": "2025-01-06T15:29:08Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "e8e494f69ecc7b67c9fd4f7209efb1fce296c119",
          "message": "implementing a review suggestion",
          "committedDate": "2025-01-07T10:04:42Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "d1a6d5ead6e39b0ae8274d8ef0077bc2c33fda82",
          "message": "Merge branch 'main' into replace-enum-to-string",
          "committedDate": "2025-01-07T10:05:02Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "310dead65af2150e93bd50bbfca5b7e22d0ad46f",
          "message": "implementing a review comment",
          "committedDate": "2025-01-08T09:56:00Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "20ea52ff11850ca939c1e6f44c5b60a61a51fdf8",
          "message": "Merge branch 'main' into replace-enum-to-string",
          "committedDate": "2025-01-08T09:56:24Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "honestly this feels like it should be a source generator or something out of the box :D cc @jaredpar maybe an interesting language suggestion?",
              "createdAt": "2025-01-06T15:29:38Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "FYI @YuliiaKovalova (was recently looking into similar problem)\r\n\r\nSource generator sounds as an interesting idea.\r\n\r\nBut otherwise I'd be fine as well with one-off hand written switch, or const array\r\n",
              "createdAt": "2025-01-06T16:14:42Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@SimaTian Jan mentioned this change \r\nhttps://github.com/dotnet/msbuild/pull/11106#discussion_r1904039301",
              "createdAt": "2025-01-06T16:20:58Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "So is this approve or do I rework this into something else?\r\nI'd rather do away with the .14% since it is a simple fix (no matter which one we go for)",
              "createdAt": "2025-01-06T16:40:06Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "> maybe an interesting language suggestion?\r\n\r\nThis has come up a few times in the past on runtime / roslyn. I've lost track on what the latest state is with `Enum.ToString` (@stephentoub). \r\n",
              "createdAt": "2025-01-06T17:37:58Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "> While profiling, the VS profiler started complaining about the Enum.ToString() with a perf cost 0.14%\r\n\r\nOn what version of .NET? If I'm looking at the right enum, calling ToString on it on any supported version of .NET Core should end up effectively being an array index to look up the cached string.\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\n\r\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\r\n\r\n[MemoryDiagnoser(false)]\r\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\r\npublic class Tests\r\n{\r\n    private TargetResultCode _result = TargetResultCode.Success;\r\n\r\n    [Benchmark]\r\n    public string EnumToString() => _result.ToString();\r\n}\r\n\r\npublic enum TargetResultCode : byte\r\n{\r\n    Skipped,\r\n    Success,\r\n    Failure,\r\n}\r\n```\r\n\r\n| Method       | Mean     | Allocated |\r\n|------------- |---------:|----------:|\r\n| EnumToString | 10.32 ns |         - |\r\n\r\nIs this code path really so hot that this needs further optimization?\r\n",
              "createdAt": "2025-01-06T17:55:23Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "stephentoub"
              }
            },
            {
              "body": "> Is this code path really so hot that this needs further optimization?\r\n\r\nIt is hot enough that it jumped on me on the front page of a profiler report. Now 0.14% isn't too large of an issue by itself, but at the same time why burn computer cycles when the fix is simple enough.\r\n\r\n\r\nThe profiling was happening on my machine with a latest build of msbuild:\r\n```\r\nMSBuild version 17.14.0-dev-25057-01+08729bf7d for .NET Framework\r\n17.14.0.5701\r\n```\r\nAnd I believe that we use .NET9 - at least my Visual studio is showing me targets for .net9.0 and .net472 so I would hope that my machine then would use the net9.0 version. The fact that I can see the other modern constructs while profiling (I recently did some generated Regex stuff and it appeared in the profiling) further supports this assumption so I hope I'm not wrong.\r\n",
              "createdAt": "2025-01-07T09:00:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Building on your example:\r\n```\r\nusing BenchmarkDotNet.Configs;\r\nusing BenchmarkDotNet.Running;\r\n\r\nusing BenchmarkDotNet.Attributes;\r\n\r\nBenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\r\n\r\n[MemoryDiagnoser(false)]\r\n[HideColumns(\"Job\", \"Error\", \"StdDev\", \"Median\", \"RatioSD\")]\r\npublic class Tests\r\n{\r\n    public string TargetResultCodeToString(TargetResultCode result)\r\n    {\r\n        switch (result)\r\n        {\r\n            case TargetResultCode.Success:\r\n                return nameof(TargetResultCode.Success);\r\n            case TargetResultCode.Failure: return nameof(TargetResultCode.Failure);\r\n            default: return nameof(TargetResultCode.Skipped);\r\n        }\r\n    }\r\n\r\n    private TargetResultCode _result = TargetResultCode.Success;\r\n\r\n    [Benchmark]\r\n    public string EnumToString() => _result.ToString();\r\n\r\n    [Benchmark]\r\n    public string EnumToStringMethod() => TargetResultCodeToString(_result);\r\n}\r\n\r\npublic enum TargetResultCode : byte\r\n{\r\n    Skipped,\r\n    Success,\r\n    Failure,\r\n}\r\n```\r\n\r\n// * Summary *\r\n\r\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.22631.4602/23H2/2023Update/SunValley3)\r\n13th Gen Intel Core i7-13800H, 1 CPU, 20 logical and 14 physical cores\r\n.NET SDK 9.0.100\r\n  [Host]     : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\r\n  DefaultJob : .NET 9.0.0 (9.0.24.52809), X64 RyuJIT AVX2\r\n\r\nJob=DefaultJob\r\n\r\n| Method             | Mean      | Allocated |\r\n|------------------- |----------:|----------:|\r\n| EnumToString       | 5.0009 ns |      24 B |\r\n| EnumToStringMethod | 0.4132 ns |         - |",
              "createdAt": "2025-01-07T09:16:32Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I'm not sure why my case has 24B worth of allocations since it's the same code as you used, but the speed itself is in a similar-ish ballpark (could be battery setting or something)\r\nThe speed factor difference is ~10x on net9.0.\r\nThe reasoning behind the slowup at least according to my Visual Studio is that the Enum.ToString() uses reflection to check if the enum isn't a flag. That being said, I don't have deep enough knowledge about .NET to know if that is the true reason.\r\n",
              "createdAt": "2025-01-07T09:20:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "So yes, I was wrong in my initial assumption. I was indeed measuring for net472 framework.\r\nThank you @JanProvaznik for pointing that out.\r\nSo this is now a question of a performance mostly for the net472. When running it through the profiler via dotnet to access the libraries, the performance is right at the edge of the threshold for VS complaining. There is a minor speedup to be had as I pointed out but it might be well outside of \"what is relevant\" bounds.",
              "createdAt": "2025-01-07T11:06:31Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "![still_there](https://github.com/user-attachments/assets/cbe2963b-bb2d-4446-9062-7b6121dd1a55)\r\nThat being said, while order of magnitude faster than on net472 framework, it is still hot enough to be visible in profiler.\r\nMuch less, but enough for the profiler to complain.",
              "createdAt": "2025-01-07T11:12:26Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Since we are targetting net472 as well (and that's what runs in VS) - then we still likely want this",
              "createdAt": "2025-01-07T12:53:01Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -484,7 +484,7 @@ private async Task ProcessTargetStack(ITaskBuilder taskBuilder)\n                             // Execute all of the tasks on this target.\n                             MSBuildEventSource.Log.TargetStart(currentTargetEntry.Name);\n                             await currentTargetEntry.ExecuteTarget(taskBuilder, _requestEntry, _projectLoggingContext, _cancellationToken);\n-                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.ResultCode.ToString() ?? string.Empty);\n+                            MSBuildEventSource.Log.TargetStop(currentTargetEntry.Name, currentTargetEntry.Result?.TargetResultCodeToString() ?? string.Empty);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    return nameof(TargetResultCode.Failure);\r\n```\r\n\r\nThis is more resilient to future refactorings",
              "createdAt": "2025-01-06T17:36:00Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -136,6 +136,21 @@ public TargetResultCode ResultCode\n             }\n         }\n \n+        public string TargetResultCodeToString()\n+        {\n+            switch (ResultCode)\n+            {\n+                case TargetResultCode.Failure:\n+                    return \"Failure\";",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there no possibility ResultCode could be something else? The real Enum.ToString() has additional logic to handle numerical values that don't map to named values. Related, what are the chances TargetResultCode will evolve to have additional entries? This is fragile and could lead to subtle bugs if additional members were added.\r\n\r\nIf this method is really deemed valuable, I'd suggest having the default case do:\r\n```C#\r\nDebug.Fail($\"Unknown enum value: {ResultCode}\");\r\nreturn ResultCode.ToString();\r\n```\r\nor something like that.",
              "createdAt": "2025-01-07T17:22:16Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -136,6 +136,21 @@ public TargetResultCode ResultCode\n             }\n         }\n \n+        public string TargetResultCodeToString()\n+        {\n+            switch (ResultCode)\n+            {\n+                case TargetResultCode.Failure:\n+                    return nameof(TargetResultCode.Failure);\n+                case TargetResultCode.Skipped:\n+                    return nameof(TargetResultCode.Skipped);\n+                case TargetResultCode.Success:\n+                    return nameof(TargetResultCode.Success);\n+                default:\n+                    return \"\";",
              "author": {
                "login": "stephentoub"
              }
            }
          ]
        }
      }
    ]
  }
}