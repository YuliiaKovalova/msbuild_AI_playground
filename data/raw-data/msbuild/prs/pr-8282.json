{
  "number": 8282,
  "title": "Fix NativeMethods.IsSymLink",
  "body": "Fixes #6773\r\n\r\n### Context\r\n\r\nOriginal PR https://github.com/dotnet/msbuild/pull/8213 had imprecise implementation of `IsSymLink` - fixing this.\r\nDetails: https://github.com/dotnet/msbuild/pull/8213#discussion_r1061334252\r\nSpecial thanks to @KalleOlaviNiemitalo for pointing out the issue and proposing remedy options.\r\n\r\n\r\n### Changes Made\r\n\r\n`IsSymLink` now uses `GetFileInformationByHandleEx` to obtain file attributes and detect symlink in case reparse point was detected.\r\n\r\n### Testing\r\n\r\nCover by unit test added in original PR\r\n",
  "state": "CLOSED",
  "createdAt": "2023-01-05T13:18:54Z",
  "updatedAt": "2023-01-12T10:59:12Z",
  "closedAt": "2023-01-12T10:59:11Z",
  "mergedAt": null,
  "additions": 70,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "proto/issymlink-fix",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9db169d5ad22ad88365207cc035c91194b005f1d",
          "message": "Fix NativeMethods.IsSymLink",
          "committedDate": "2023-01-05T13:11:47Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1da2eac9b31099c4da25eef23a2bc33564a98218",
          "message": "Dedupe Marshal.SizeOf calls",
          "committedDate": "2023-01-05T13:19:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8eb6be2c3ad4baa1bd2982a0071759fa5febc5fe",
          "message": "Fix OS contract",
          "committedDate": "2023-01-05T14:01:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2d7b8d221921276c71aea13ba284661281d8533",
          "message": "Improve marshaling",
          "committedDate": "2023-01-05T15:15:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f1e2b2e290138121339e5ef6c05d27c9ca6f4ae",
          "message": "Decrease requested file access rights",
          "committedDate": "2023-01-05T15:26:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Superseded by https://github.com/dotnet/msbuild/pull/8306",
        "createdAt": "2023-01-12T10:59:11Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't it blittable?",
              "createdAt": "2023-01-05T14:21:30Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1625,6 +1671,41 @@ internal static void VerifyThrowWin32Result(int result)\n     [SupportedOSPlatform(\"windows\")]\n     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);\n \n+    [DllImport(\"kernel32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\n+    [return: MarshalAs(UnmanagedType.Bool)]\n+    [SupportedOSPlatform(\"windows\")]\n+    private static extern bool GetFileInformationByHandleEx(\n+        SafeFileHandle fileHandle,\n+        FileInfoByHandleClass fileInfoByHandleClass,\n+        [Out] IntPtr lpFileInformation,\n+        int dwBufferSize);\n+\n+    [SupportedOSPlatform(\"windows\")]\n+    static bool GetFileAttributeTagInfoByHandle(SafeFileHandle fileHandle, out FileAttributeTagInfo fileAttributeTagInfo)\n+    {\n+        int typeSize = Marshal.SizeOf(typeof(FileAttributeTagInfo));\n+        IntPtr ptr = Marshal.AllocHGlobal(typeSize);",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "Thanks for pointing - simplifying...",
              "createdAt": "2023-01-05T15:16:31Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1625,6 +1671,41 @@ internal static void VerifyThrowWin32Result(int result)\n     [SupportedOSPlatform(\"windows\")]\n     internal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);\n \n+    [DllImport(\"kernel32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\n+    [return: MarshalAs(UnmanagedType.Bool)]\n+    [SupportedOSPlatform(\"windows\")]\n+    private static extern bool GetFileInformationByHandleEx(\n+        SafeFileHandle fileHandle,\n+        FileInfoByHandleClass fileInfoByHandleClass,\n+        [Out] IntPtr lpFileInformation,\n+        int dwBufferSize);\n+\n+    [SupportedOSPlatform(\"windows\")]\n+    static bool GetFileAttributeTagInfoByHandle(SafeFileHandle fileHandle, out FileAttributeTagInfo fileAttributeTagInfo)\n+    {\n+        int typeSize = Marshal.SizeOf(typeof(FileAttributeTagInfo));\n+        IntPtr ptr = Marshal.AllocHGlobal(typeSize);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would FILE_READ_ATTRIBUTES suffice? Perhaps it doesn't matter because the caller will use the result of IsSymLink for deciding whether to read the file.",
              "createdAt": "2023-01-05T14:23:52Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1072,12 +1091,39 @@ internal static bool IsSymLink(FileInfo fileInfo)\n \n         WIN32_FILE_ATTRIBUTE_DATA data = new WIN32_FILE_ATTRIBUTE_DATA();\n \n-        return NativeMethods.GetFileAttributesEx(fileInfo.FullName, 0, ref data) &&\n-               (data.fileAttributes & NativeMethods.FILE_ATTRIBUTE_DIRECTORY) == 0 &&\n-               (data.fileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) == FILE_ATTRIBUTE_REPARSE_POINT;\n+        return\n+            NativeMethods.GetFileAttributesEx(fileInfo.FullName, 0, ref data) &&\n+            (data.fileAttributes & NativeMethods.FILE_ATTRIBUTE_DIRECTORY) == 0 &&\n+            // This is fast but unspecific check - there are multiple types of reparse points.\n+            (data.fileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) == FILE_ATTRIBUTE_REPARSE_POINT &&\n+            // Specific check for a symlink.\n+            IsSymLinkFileInternal(fileInfo.FullName);\n #endif\n     }\n \n+    [SupportedOSPlatform(\"windows\")]\n+    private static bool IsSymLinkFileInternal(string path)\n+    {\n+        using SafeFileHandle handle = CreateFile(path,\n+            GENERIC_READ,",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      }
    ]
  }
}