{
  "number": 7367,
  "title": "Better evaluator errors Fixes #6460",
  "body": "Fixes #6460\r\n\r\n### Context\r\nErrors from Evaluate could appear as just BUILD FAILED 0 Warnings 0 Errors, which is no good. This makes the errors appear in a fairly generic way.\r\n\r\nIt also fixes the motivating issue.\r\n\r\n### Changes Made\r\nLogs an error including a full stack and the original error message with errors in Evaluate.\r\nFixes a bug with GetFullPath being passed an unescaped string instead of an escaped string.\r\nChanges the error formatting such that only the first line gets reformatted.\r\n\r\n### Testing\r\nTried it out before and after the changes. It now prints:\r\n\r\n```\r\nBuild FAILED.\r\n\r\n\"C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\6460\\1.csproj\" (default target) (1) ->\r\n\"C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\6460\\1.csproj\" (Inner target) (1:2) ->\r\n  MSBUILD : error : \"This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msb\r\nuild/issues/new. [C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\6460\\1.csproj]    Message:\r\n    Illegal characters in path.\r\n    Stack:\r\n       at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n   at System.IO.Path.Combine(String path1, String path2)\r\n   at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) in C:\\Users\\forgind\\D\r\nocuments\\GitHub\\msbuild\\src\\Shared\\FileUtilities.cs:line 669\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithN\r\noWildcards, Builder items) in C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluation\\LazyItemEvaluator.cs:line\r\n 453\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHash\r\nSet`1 globsToIgnore) in C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluation\\LazyItemEvaluator.cs:line 439\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) in C:\\U\r\nsers\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluation\\LazyItemEvaluator.cs:line 312\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.<>c.<GetAllItemsDeferred>b__27_0(LazyItemList itemList) in C:\\User\r\ns\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluation\\LazyItemEvaluator.cs:line 511\r\n   at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate() in C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluat\r\nion\\Evaluator.cs:line 681\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root,\r\nProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggi\r\nngService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCacheBase projectRootElement\r\nCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationConte\r\nxt evaluationContext, Boolean interactive) in C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\Evaluation\\Evaluator\r\n.cs:line 336\r\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, Stri\r\nng explicitToolsVersion, String explicitSubToolsetVersion, Int32 visualStudioVersionFromSolution, BuildParameters build\r\nParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService\r\n, Int32 submissionId, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext) in C:\\Users\\forgind\\Documen\r\nts\\GitHub\\msbuild\\src\\Build\\Instance\\ProjectInstance.cs:line 2771\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsV\r\nersion, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResol\r\nverService sdkResolverService, Int32 submissionId, Nullable`1 projectLoadSettings) in C:\\Users\\forgind\\Documents\\GitHu\r\nb\\msbuild\\src\\Build\\Instance\\ProjectInstance.cs:line 486\r\n   at Microsoft.Build.BackEnd.BuildRequestConfiguration.<>c__DisplayClass60_0.<LoadProjectIntoConfiguration>b__0() in C\r\n:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\BackEnd\\Shared\\BuildRequestConfiguration.cs:line 469\r\n   at Microsoft.Build.BackEnd.BuildRequestConfiguration.InitializeProject(BuildParameters buildParameters, Func`1 loadP\r\nrojectFromFile) in C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\src\\Build\\BackEnd\\Shared\\BuildRequestConfiguration.cs:lin\r\ne 495\r\n   at Microsoft.Build.BackEnd.BuildRequestConfiguration.LoadProjectIntoConfiguration(IBuildComponentHost componentHost,\r\n BuildRequestDataFlags buildRequestDataFlags, Int32 submissionId, Int32 nodeId) in C:\\Users\\forgind\\Documents\\GitHub\\m\r\nsbuild\\src\\Build\\BackEnd\\Shared\\BuildRequestConfiguration.cs:line 429\r\n   at Microsoft.Build.BackEnd.RequestBuilder.<BuildProject>d__68.MoveNext() in C:\\Users\\forgind\\Documents\\GitHub\\msbui\r\nld\\src\\Build\\BackEnd\\Components\\RequestBuilder\\RequestBuilder.cs:line 1117\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Microsoft.Build.BackEnd.RequestBuilder.<BuildAndReport>d__59.MoveNext() in C:\\Users\\forgind\\Documents\\GitHub\\msb\r\nuild\\src\\Build\\BackEnd\\Components\\RequestBuilder\\RequestBuilder.cs:line 808\"\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n",
  "state": "MERGED",
  "createdAt": "2022-02-05T00:49:54Z",
  "updatedAt": "2022-02-19T05:10:35Z",
  "closedAt": "2022-02-18T21:57:40Z",
  "mergedAt": "2022-02-18T21:57:40Z",
  "additions": 109,
  "deletions": 1,
  "changedFiles": 16,
  "headRefName": "better-evaluator-errors",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "13bd93e127fd1eddb6820d3fc5d0418ba0240f1b",
          "message": "Fix specific error\n\nGetFullPath \"ASSUMES INPUT IS STILL ESCAPED,\" and the unescaped form was being passed to it. Now pass the escaped form.",
          "committedDate": "2022-02-08T00:18:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2ea97c7b3768bf9aa28ed3fb7839f6276f97330",
          "message": "Log error if there's a failure in Evaluate",
          "committedDate": "2022-02-16T17:05:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This is awesome. Thanks!",
        "createdAt": "2022-02-19T05:10:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I mentioned a boilerplate comment here but it looks like they're not as consistent as I thought so no action needed.",
              "createdAt": "2022-02-07T17:53:45Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So before this should have crashed on a critical exception. Now we'll attempt to recover. Is that ok? It seems kinda bad.",
              "createdAt": "2022-02-08T16:58:20Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It never crashed very hard\u2014even with critical exceptions, we still weren't seeing a stack or anything if it happened at the wrong time. It basically just jumped up the stack a little faster.",
              "createdAt": "2022-02-08T17:03:30Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "My MSBuild senses are tingling with this change, but I have no evidence to push against it. It'll fail in the same way as an InvalidProjectFileException, which can't be that bad right?",
              "createdAt": "2022-02-10T18:22:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I think we should filter the catch on `IsCriticalException()`, as we do elsewhere. If we've hit an OOM or something the best thing we can do is crash immediately and let Watson tell us about it; ideally we could log but we want to see the crash in the place it came from, rather than in logging.",
              "createdAt": "2022-02-11T15:31:45Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "How would Watson get anything? I walked through this case with KirillOsenkov and showed him that even before, a critical exception just disappeared without a trace.",
              "createdAt": "2022-02-11T15:39:00Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ok, then that's bad and we should fix it. Why isn't our UnhandledException handler firing? Is it getting correctly instantiated?",
              "createdAt": "2022-02-11T15:52:00Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I inserted an OutOfMemoryException in LazyItemEvaluator with this change, and it logged it properly. That seems good.",
              "createdAt": "2022-02-11T17:06:01Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "How would an UnhandledException handler know about the exception? I'm slightly hazy on this, but it seems like crash the thread hard, and essentially nothing escapes. I should clarify that there's a point when it writes to a debug file in Temp, but it never says what that file is, so there's a 0.01% chance that I'd find it randomly without having paused the debugger to see exactly which file it is.",
              "createdAt": "2022-02-11T17:20:17Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -823,14 +823,17 @@ private async Task BuildAndReport()\n             catch (Exception ex)\n             {\n                 thrownException = ex;\n-\n-                if (ExceptionHandling.IsCriticalException(ex))\n+                if (ex is BuildAbortedException)\n+                {\n+                    // The build was likely cancelled. We do not need to log an error in this case.\n+                }\n+                else if (_projectLoggingContext is null)\n+                {\n+                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.Message, ex.StackTrace);\n+                }\n+                else\n                 {\n-                    // This includes InternalErrorException, which we definitely want a callstack for.\n-                    // Fortunately the default console UnhandledExceptionHandler will log the callstack even\n-                    // for unhandled exceptions thrown from threads other than the main thread, like here.\n-                    // Less fortunately NUnit doesn't.\n-                    throw;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we add a newline just before message? The current error looks like this:\r\n\r\n```\r\nuild/issues/new. [C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\6460\\1.csproj]    Message:\r\n    Illegal characters in path.\r\n    Stack:\r\n       at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n```\r\nI didn't even notice the word \"Message\" at first. It'd be clearer if it looked like this:\r\n\r\n```\r\nuild/issues/new. [C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\6460\\1.csproj]    \r\n\t\tMessage: Illegal characters in path.\r\n    Stack:\r\n       at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n```",
              "createdAt": "2022-02-10T18:13:57Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,13 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>\"This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.\n+    Message:",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "IMO just use `Exception.ToString()` and don't write message/stack separately",
              "createdAt": "2022-02-11T15:29:41Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,13 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>\"This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.\n+    Message:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's make an aka.ms link for this so we can easily retarget it if necessary\r\n\r\n```suggestion\r\n    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://aka.ms/msbuild/unhandled.\r\n```\r\n\r\nI also think we might want to change the wording from \"please file an issue\" to \"please search for and upvote an issue or if there isn't one file a new one\" if we can figure out a way to say that that is less mean.",
              "createdAt": "2022-02-14T21:50:50Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So should that aka.ms/ link point [here](https://github.com/dotnet/msbuild/issues) instead?\r\n\r\nI would definitely prefer they search for existing issues first, but telling them to search first might deter people from filing issues at all, which biases me a little towards the current wording. How about:\r\nPLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT...\r\n?",
              "createdAt": "2022-02-14T22:22:41Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We should make a specific issue template for this error in this repo, and have the link point to issue create with that particular issue template preselected.  The SDK does this:\r\n\r\n* [here's where the 'new issue' button takes you](https://github.com/dotnet/sdk/issues/new/choose)\r\n* [specific classes of issues have their own templates](https://github.com/dotnet/sdk/issues/new?assignees=&labels=&template=20_feature_request.md)\r\n\r\nWe could then update the aka.ms link to point to the template for unhandled errors, with instructions on what to search for, data to provide on the issue, etc, etc.",
              "createdAt": "2022-02-14T22:29:57Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "For whoever takes this on, some relevant PR's:\r\n\r\nhttps://github.com/dotnet/msbuild/pull/5380\r\nhttps://github.com/dotnet/msbuild/pull/6557\r\nhttps://github.com/dotnet/msbuild/pull/5521",
              "createdAt": "2022-02-14T22:33:55Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I made a separate PR (#7392) for making the unhandled exception issue. That should mean we can merge the two independently and redirect the aka.ms link as necessary later.\r\n\r\nBy the way, what's the link for changing those? I wrote down that it's just https://aka.ms, but that took me to the benefits page.",
              "createdAt": "2022-02-15T00:11:34Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "raw `aka.ms` takes you to the dashboard for updating them, right now Rainer, Marc, and I are set as the owners, so I think only we can see/change it",
              "createdAt": "2022-02-15T00:13:13Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I'm dumb. I typed aka.ms and hit enter without noticing that it autocompleted...\r\nApparently I most use the vanity links to log all my 2/4 hour absences \ud83d\ude01",
              "createdAt": "2022-02-15T00:15:27Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -463,6 +463,10 @@\n     <value>MSB4187: Failed to receive a response from the task thread in the timeout period \"{0}\" ms. Shutting down.</value>\n     <comment>{StrBegin=\"MSB4187: \"}</comment>\n   </data>\n+  <data name=\"UnhandledMSBuildError\" xml:space=\"preserve\">\n+    <value>This is an unhandled exception in MSBuild -- PLEASE FILE AN ISSUE AT https://github.com/dotnet/msbuild/issues/new.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}