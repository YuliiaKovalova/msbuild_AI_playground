{
  "number": 8011,
  "title": "Ignore case when checking for pseudolocales",
  "body": "Fixes https://github.com/dotnet/sdk/issues/27890\r\n\r\n### Customer Impact\r\nCustomer resources containing pseudolocales were no longer recognized due to case sensitivity. This prevented resources being generated of the given pseudolocale.\r\n\r\n### Testing\r\nAdded regression test\r\nTested locally by manually patching the SDK\r\n\r\n### Code Reviewers\r\n\r\n### Description of fix\r\nWhen determining culture-validity on pseudolocales, ensure **case-insensitivity** during the check.\r\n\r\n### Notes\r\nThis wasn't an issue before because these items were added to a **case insensitive hashset.** This new codepath checks the array directly, but I forgot to pass along `OrdinalIgnoreCase`.",
  "state": "MERGED",
  "createdAt": "2022-09-28T18:43:20Z",
  "updatedAt": "2022-09-29T20:10:10Z",
  "closedAt": "2022-09-29T20:10:10Z",
  "mergedAt": "2022-09-29T20:10:10Z",
  "additions": 20,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "culture-case-checking",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": {
    "title": "VS 17.4"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c6d2a7bc53b863249a798b5adfaf872bb193fc81",
          "message": "Ignore case when checking for pseudolocales",
          "committedDate": "2022-09-28T18:38:02Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f51686884b8c1db8d0ad9e8c3294c0e77b59bc8",
          "message": "Add regression test",
          "committedDate": "2022-09-28T20:31:57Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c233ac6b2b2c993fc021d83c9ec130fccf6b8153",
          "message": "Update src/Tasks.UnitTests/AssignCulture_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-09-28T20:39:37Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8d14ac81a8faac4cf5acd84eeff166838c2e53df",
          "message": "Update src/Tasks.UnitTests/AssignCulture_Tests.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-09-28T21:52:11Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f93b0edf778b0da46db17bb211c5e448525724e",
          "message": "Fix UT",
          "committedDate": "2022-09-28T23:33:25Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I still need to verify this locally. Adding a regression test didn't come up with the results I expected, it's possible there's a bit more to this bug. Converting it into a draft.",
        "createdAt": "2022-09-28T18:55:20Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> I still need to verify this locally\r\n\r\nI've verified that manually replacing the `Microsoft.Build.Tasks.Core` dll in the downloaded net sdk **resolves the issue** with this fix.",
        "createdAt": "2022-09-28T20:24:29Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-09-28T20:24:38Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-09-28T20:24:49Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> Adding a regression test didn't come up with the results I expected, it's possible there's a bit more to this bug. Converting it into a draft.\r\n\r\nThis was the regression test running in the `net472` scenario, despite me having net7.0 selected. Disregard this.",
        "createdAt": "2022-09-28T20:32:55Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"Pseudoloc is special-cased in .NET relative to Framework.\")]\r\n```",
              "createdAt": "2022-09-28T20:38:03Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -259,5 +259,24 @@ public void AliasedCultures_SupportedOnNetCore(string culture)\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"This is a net core codepath\")]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            Assert.Equal(t.AssignedFiles[0].GetMetadata(\"WithCulture\"), \"true\");\r\n```",
              "createdAt": "2022-09-28T21:21:47Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -259,5 +259,24 @@ public void AliasedCultures_SupportedOnNetCore(string culture)\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"Pseudoloc is special-cased in .NET relative to Framework.\")]\n+        public void Pseudolocales_CaseInsensitive()\n+        {\n+            string culture = \"qps-Ploc\";\n+            AssignCulture t = new AssignCulture();\n+            t.BuildEngine = new MockEngine();\n+            ITaskItem i = new TaskItem($\"MyResource.{culture}.resx\");\n+            t.Files = new ITaskItem[] { i };\n+            t.Execute();\n+\n+            Assert.Single(t.AssignedFiles);\n+            Assert.Single(t.CultureNeutralAssignedFiles);\n+            Assert.True(t.AssignedFiles[0].GetMetadata(\"WithCulture\").Equals(\"true\"));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            Assert.Equal(\"true\", t.AssignedFiles[0].GetMetadata(\"WithCulture\"));\r\n```",
              "createdAt": "2022-09-28T22:48:35Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -259,5 +259,24 @@ public void AliasedCultures_SupportedOnNetCore(string culture)\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"Pseudoloc is special-cased in .NET relative to Framework.\")]\n+        public void Pseudolocales_CaseInsensitive()\n+        {\n+            string culture = \"qps-Ploc\";\n+            AssignCulture t = new AssignCulture();\n+            t.BuildEngine = new MockEngine();\n+            ITaskItem i = new TaskItem($\"MyResource.{culture}.resx\");\n+            t.Files = new ITaskItem[] { i };\n+            t.Execute();\n+\n+            Assert.Single(t.AssignedFiles);\n+            Assert.Single(t.CultureNeutralAssignedFiles);\n+            Assert.Equal(t.AssignedFiles[0].GetMetadata(\"WithCulture\"), \"true\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}