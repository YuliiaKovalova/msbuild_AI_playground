{
  "number": 9634,
  "title": "Use all MSBuild binding redirects in NuGet.Frameworks AppDomain",
  "body": "### Context\r\n\r\nThe secondary AppDomain hosting `NuGet.Frameworks` was set up with a binding redirect for `Microsoft.Build` but not its dependencies. Additionally, `MSBuild.exe` loader policy was set to `MultiDomainHost`, making it possible to share only Framework assemblies between AppDomains, but still loading MSBuild assemblies domain specific. These issues were resulting in NGEN rejections at run-time.\r\n\r\n### Changes Made\r\n\r\nMade the `GenerateAppDomainConfig` target use all binding redirects from `MSBuild.exe.config` and switched to `MultiDomain` loader policy. Also pluralized the relevant identifiers (redirect -> redirects).\r\n\r\n### Testing\r\n\r\nExperimental VS insertion with PerfDDRITs & Speedometer runs.\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-11T15:06:40Z",
  "updatedAt": "2024-01-19T08:51:14Z",
  "closedAt": "2024-01-19T08:51:13Z",
  "mergedAt": "2024-01-19T08:51:13Z",
  "additions": 21,
  "deletions": 12,
  "changedFiles": 4,
  "headRefName": "exp/fix-binding-redirects",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ba695f721874ad1362be5bdbb4613d24bfdfddfe",
          "message": "Use all MSBuild binding redirects in NuGetFramework AppDomain",
          "committedDate": "2024-01-11T13:47:14Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16144ef0b72d619240ee1a9da84ae5b08c602025",
          "message": "Use LoaderOptimization.MultiDomain",
          "committedDate": "2024-01-12T09:31:20Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bccd7ecfd1b8531f905c282e40491cdffd9a4411",
          "message": "Add comments and update docs",
          "committedDate": "2024-01-16T07:49:18Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd943febaa0255cbcac132ec27de28c1e6f18ef8",
          "message": "Update src/Build/Microsoft.Build.csproj\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-01-19T08:21:33Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Btw. the original change was not inserted into 17.9 - correct? (just trying to see if this will need backporting)",
        "createdAt": "2024-01-15T15:09:28Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Btw. the original change was not inserted into 17.9 - correct? (just trying to see if this will need backporting)\r\n\r\nCorrect, the regression is only in 17.10/main.",
        "createdAt": "2024-01-15T15:16:28Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This may have a negative perf impact on steady state performance because statics are accessed with an extra indirection in domain-neutral code. I have run an evaluation micro-benchmark and it's not shown any regression but still, this is somewhat unfortunate.\r\n\r\nIdeally we would revert the secondary AD logic altogether and instead load the assembly into the default AD by strong name. @jeffkl, you've mentioned that the NuGet SDK resolver may have its version frozen to allow this. Do you think it can realistically happen to `NuGet.Frameworks.dll` as well - which we use as a library to implement a few property functions?",
              "createdAt": "2024-01-15T15:01:18Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -211,14 +211,14 @@ private static void HandleConfigurationException(Exception ex)\n         /// MSBuild no longer runs any arbitrary code (tasks or loggers) on the main thread, so it never needs the\n         /// main thread to be in an STA. Accordingly, to avoid ambiguity, we explicitly use the [MTAThread] attribute.\n         /// This doesn't actually do any work unless COM interop occurs for some reason.\n-        /// We use the MultiDomainHost loader policy because we may create secondary AppDomains and need NGEN images\n-        /// for Framework / GACed assemblies to be loaded domain neutral so their native images can be used.\n+        /// We use the MultiDomain loader policy because we may create secondary AppDomains and need NGEN images\n+        /// for our as well as Framework assemblies to be loaded domain neutral so their native images can be used.\n         /// See <see cref=\"NuGetFrameworkWrapper\"/>.\n         /// </remarks>\n         /// <returns>0 on success, 1 on failure</returns>\n         [MTAThread]\n #if FEATURE_APPDOMAIN\n-        [LoaderOptimization(LoaderOptimization.MultiDomainHost)]\n+        [LoaderOptimization(LoaderOptimization.MultiDomain)]",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "This sounds not great but I would go ahead with it. I'm not sure I understand the docs on this though--it sounds like we wouldn't have gotten much from `MultiDomainHost` because none of our assemblies or our main references were GACed anyway?",
              "createdAt": "2024-01-18T22:30:20Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -211,14 +211,14 @@ private static void HandleConfigurationException(Exception ex)\n         /// MSBuild no longer runs any arbitrary code (tasks or loggers) on the main thread, so it never needs the\n         /// main thread to be in an STA. Accordingly, to avoid ambiguity, we explicitly use the [MTAThread] attribute.\n         /// This doesn't actually do any work unless COM interop occurs for some reason.\n-        /// We use the MultiDomainHost loader policy because we may create secondary AppDomains and need NGEN images\n-        /// for Framework / GACed assemblies to be loaded domain neutral so their native images can be used.\n+        /// We use the MultiDomain loader policy because we may create secondary AppDomains and need NGEN images\n+        /// for our as well as Framework assemblies to be loaded domain neutral so their native images can be used.\n         /// See <see cref=\"NuGetFrameworkWrapper\"/>.\n         /// </remarks>\n         /// <returns>0 on success, 1 on failure</returns>\n         [MTAThread]\n #if FEATURE_APPDOMAIN\n-        [LoaderOptimization(LoaderOptimization.MultiDomainHost)]\n+        [LoaderOptimization(LoaderOptimization.MultiDomain)]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Correct. When testing the original change I was fixated on making sure that `NuGet.Frameworks` can use its native image and for _its_ dependencies `MultiDomainHost` was enough. I missed the obvious fact that it was not enough for `Microsoft.Build`.",
              "createdAt": "2024-01-19T08:26:58Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -211,14 +211,14 @@ private static void HandleConfigurationException(Exception ex)\n         /// MSBuild no longer runs any arbitrary code (tasks or loggers) on the main thread, so it never needs the\n         /// main thread to be in an STA. Accordingly, to avoid ambiguity, we explicitly use the [MTAThread] attribute.\n         /// This doesn't actually do any work unless COM interop occurs for some reason.\n-        /// We use the MultiDomainHost loader policy because we may create secondary AppDomains and need NGEN images\n-        /// for Framework / GACed assemblies to be loaded domain neutral so their native images can be used.\n+        /// We use the MultiDomain loader policy because we may create secondary AppDomains and need NGEN images\n+        /// for our as well as Framework assemblies to be loaded domain neutral so their native images can be used.\n         /// See <see cref=\"NuGetFrameworkWrapper\"/>.\n         /// </remarks>\n         /// <returns>0 on success, 1 on failure</returns>\n         [MTAThread]\n #if FEATURE_APPDOMAIN\n-        [LoaderOptimization(LoaderOptimization.MultiDomainHost)]\n+        [LoaderOptimization(LoaderOptimization.MultiDomain)]",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Built this locally and noticed an incremental build bug which would be fixed by\r\n\r\n```suggestion\r\n          Inputs=\"..\\MSBuild\\app.config;..\\MSBuild\\app.amd64.config;$(MSBuildThisFileFullPath)\"\r\n```\r\n\r\n(to pick up modified logic in this target--unfortunately we can't be more granular than that currently)",
              "createdAt": "2024-01-18T22:37:40Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -681,22 +681,24 @@\n     <NuGetFrameworkWrapperRedirects_FilePath>$(IntermediateOutputPath)NuGetFrameworkWrapper.redirects.cs</NuGetFrameworkWrapperRedirects_FilePath>\n   </PropertyGroup>\n \n-  <!-- Extract binding redirects for Microsoft.Build from MSBuild.exe.config into a source file -->\n+  <!-- Extract binding redirects for MSBuild and dependencies from MSBuild.exe.config into a source file.\n+       This allows us to create secondary AppDomains with the same redirects at run-time, see\n+       https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#nugetframeworks -->\n   <Target Name=\"GenerateAppDomainConfig\"\n           Inputs=\"..\\MSBuild\\app.config;..\\MSBuild\\app.amd64.config\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Applied, thank you!",
              "createdAt": "2024-01-19T08:21:58Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -681,22 +681,24 @@\n     <NuGetFrameworkWrapperRedirects_FilePath>$(IntermediateOutputPath)NuGetFrameworkWrapper.redirects.cs</NuGetFrameworkWrapperRedirects_FilePath>\n   </PropertyGroup>\n \n-  <!-- Extract binding redirects for Microsoft.Build from MSBuild.exe.config into a source file -->\n+  <!-- Extract binding redirects for MSBuild and dependencies from MSBuild.exe.config into a source file.\n+       This allows us to create secondary AppDomains with the same redirects at run-time, see\n+       https://github.com/dotnet/msbuild/blob/main/documentation/NETFramework-NGEN.md#nugetframeworks -->\n   <Target Name=\"GenerateAppDomainConfig\"\n           Inputs=\"..\\MSBuild\\app.config;..\\MSBuild\\app.amd64.config\"",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}