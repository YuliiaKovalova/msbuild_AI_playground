{
  "number": 7139,
  "title": "Add more SdkResolverService events and allow SdkResolvers to log events",
  "body": "Fixes #7136\r\n\r\n### Context\r\nAdding on to https://github.com/dotnet/msbuild/pull/6876, this change adds more events to SDK resolution.\r\n\r\n### Changes Made\r\n1. Add boolean to `CachedSdkResolverServiceResolveSdkStop` so we can differentiate cached and non-cached calls\r\n4. Add `OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart` and `OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop` events to track how long it takes to send/receive an SDK result from the main node\r\n5. Add `SdkResolverEvent`, `SdkResolverEventStart`, and `SdkResolverEventStop` methods to `Microsoft.Build.Framework.SdkLogger` so that SDK resolvers can contribute to the events in SDK resolution.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-12-09T18:07:31Z",
  "updatedAt": "2021-12-22T22:31:38Z",
  "closedAt": "2021-12-22T22:31:38Z",
  "mergedAt": "2021-12-22T22:31:37Z",
  "additions": 119,
  "deletions": 30,
  "changedFiles": 7,
  "headRefName": "more-sdkresolver-events",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7c0ec511457b47e60451abeb5592650e66a95b60",
          "message": "Add more SdkResolverService events and allow SdkResolvers to log events",
          "committedDate": "2021-12-09T17:29:39Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18e92d1e16251d3b520ccd879ea3add63d2e7b53",
          "message": "Address comments",
          "committedDate": "2021-12-13T17:14:03Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b8e91b6da540f7083317890f92e6455ef63dca9",
          "message": "Address comments",
          "committedDate": "2021-12-14T16:57:20Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "02adc9067f13c76cf44bb65e24c1e0f68efe990d",
          "message": "Add documentation",
          "committedDate": "2021-12-14T17:05:28Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "It occurred to me that you're theoretically supposed to update our [event-source docs](https://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md) when you add new events\u2014not that we've done that for almost any of the other changes. If you don't want to, I can try to remember to add all the missing ones in a PR soon.",
        "createdAt": "2021-12-13T23:52:28Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> It occurred to me that you're theoretically supposed to update our event-source docs when you add new events\r\n\r\nI've added some descriptions to my new events and the ones Rainer added, plus I put them in table which I thought was easier to read.\r\n\r\nhttps://github.com/jeffkl/msbuild/blob/more-sdkresolver-events/documentation/specs/event-source.md",
        "createdAt": "2021-12-14T17:07:13Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This means you'll get a single event showing that it was resolved from the cache (if it was), but it won't give you how long that took. Maybe an event before and after where the after also includes resultLazy.IsValueCreated as a parameter?",
              "createdAt": "2021-12-12T18:51:51Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -57,7 +55,21 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n                  */\n                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(\n                     sdk.Name,\n-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));\n+                    key => new Lazy<SdkResult>(() =>\n+                    {\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+\n+                        SdkResult result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);\n+\n+                        return result;\n+                    }));\n+\n+                if (resultLazy.IsValueCreated)\n+                {\n+                    MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkFromCache(sdk.Name, solutionPath, projectPath, resultLazy.Value.Success);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Technically getting a cached result should be nearly instantaneous, as we're only waiting for a lock.  I thought it didn't make sense to measure that, but am open to changing it.",
              "createdAt": "2021-12-12T22:54:31Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -57,7 +55,21 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n                  */\n                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(\n                     sdk.Name,\n-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));\n+                    key => new Lazy<SdkResult>(() =>\n+                    {\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+\n+                        SdkResult result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);\n+\n+                        return result;\n+                    }));\n+\n+                if (resultLazy.IsValueCreated)\n+                {\n+                    MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkFromCache(sdk.Name, solutionPath, projectPath, resultLazy.Value.Success);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Right, but I don't think it's bad to verify that. More importantly, for not cached results, it may be useful to know how long it took, and we'd lose that functionality with its current state.",
              "createdAt": "2021-12-13T03:17:05Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -57,7 +55,21 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n                  */\n                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(\n                     sdk.Name,\n-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));\n+                    key => new Lazy<SdkResult>(() =>\n+                    {\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+\n+                        SdkResult result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);\n+\n+                        return result;\n+                    }));\n+\n+                if (resultLazy.IsValueCreated)\n+                {\n+                    MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkFromCache(sdk.Name, solutionPath, projectPath, resultLazy.Value.Success);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Okay I've removed the \"FromCache\" events and added a boolean to the start and stop events to indicate whether or not the result was cached.  Much cleaner, thanks for the suggestion!",
              "createdAt": "2021-12-13T17:14:49Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -57,7 +55,21 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n                  */\n                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(\n                     sdk.Name,\n-                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));\n+                    key => new Lazy<SdkResult>(() =>\n+                    {\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+\n+                        SdkResult result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+\n+                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);\n+\n+                        return result;\n+                    }));\n+\n+                if (resultLazy.IsValueCreated)\n+                {\n+                    MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkFromCache(sdk.Name, solutionPath, projectPath, resultLazy.Value.Success);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these actually used anywhere?",
              "createdAt": "2021-12-12T18:58:55Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs",
              "diffHunk": "@@ -20,6 +21,21 @@ public SdkLogger(LoggingContext loggingContext)\n             _loggingContext = loggingContext;\n         }\n \n+        public override void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "These are new methods that allow SDK resolver authors to log events to the same stream and augment the logging built into MSBuild.  I'll be calling them in new versions of the NuGet SDK resolver so we can measure how long that one takes.  I thought it made sense to add to the MSBuild logging rather than have NuGet use some other system.  But I'm okay with leaving this out if anyone feels like its not worth having.",
              "createdAt": "2021-12-12T22:56:05Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs",
              "diffHunk": "@@ -20,6 +21,21 @@ public SdkLogger(LoggingContext loggingContext)\n             _loggingContext = loggingContext;\n         }\n \n+        public override void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Works for me!",
              "createdAt": "2021-12-13T03:17:30Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs",
              "diffHunk": "@@ -20,6 +21,21 @@ public SdkLogger(LoggingContext loggingContext)\n             _loggingContext = loggingContext;\n         }\n \n+        public override void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm afraid that this is a breaking change. The class is public and actually used from outside of MSBuild. Should these methods have a default body, perhaps just delegating the call to the existing `LogEvent` in some reasonable way?\r\n",
              "createdAt": "2021-12-13T12:09:54Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -15,5 +15,23 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEvent(params object[] args);\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEventStart(params object[] args);\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEventStop(params object[] args);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I've made these virtual with a default implementation instead.  ",
              "createdAt": "2021-12-13T17:16:16Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -15,5 +15,23 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEvent(params object[] args);\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEventStart(params object[] args);\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public abstract void LogEventStop(params object[] args);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Why not initialize `wasResultCached` with `true` and then reset to `false` when the factory callback runs? The `Lazy` is not super expensive but could be easily avoided.\r\n\r\n```C#\r\n            var sdkResultLazy = _responseCache.GetOrAdd(\r\n                sdk.Name,\r\n                key =>\r\n                {\r\n                    wasResultCached = false;\r\n                    return RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\r\n                }\r\n```",
              "createdAt": "2021-12-13T21:23:00Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "(There is a race and `wasResultCached` could be falsely negative with certain thread scheduling. Both with `Lazy` and the change I'm suggesting. I'm assuming it is OK.)",
              "createdAt": "2021-12-13T21:36:16Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh, I see, it's actually desired to not run `RequestSdkPathFromMainNode` multiple times for the same ~node~key. I take my suggestion back then. The race could be addressed by moving `wasResultCached = false` to the lambda passed to `Lazy`.",
              "createdAt": "2021-12-13T21:45:55Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good point, threads are not blocked until they access the `Value` property so multiple threads could see `false` when in fact only one actually did the work.  That actually brings up an interesting point, do we want to differentiate calls that had to wait in order to get a cached result?  I'd have to have two booleans, one that said it wasn't cached before and one that says it ended up waiting for a cached result.  What are your thoughts?",
              "createdAt": "2021-12-14T16:49:30Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "It might be interesting to report this data but we should pretty much never see contention here. Parallel evaluations may be happening but not in OOP nodes, if I understand it correctly. If a node needs to evaluate a project and the operation blocks I don't think it can be doing something else in the meantime.",
              "createdAt": "2021-12-14T21:49:26Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yeah that's true, out-of-proc nodes do not evaluate projects in parallel as far as I know.  I'll leave it as-is for now",
              "createdAt": "2021-12-15T22:50:04Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs",
              "diffHunk": "@@ -63,21 +64,27 @@ public override void PacketReceived(int node, INodePacket packet)\n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n         {\n+            bool wasResultCached = false;\n+\n+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);\n+\n             // Get a cached response if possible, otherwise send the request\n-            var sdkResult = _responseCache.GetOrAdd(\n+            Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(\n                 sdk.Name,\n-                key =>\n-                {\n-                    var result = RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n-                    return result;\n-                });\n+                key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Thank you for making the change. After re-reviewing I'm wondering if maybe these methods shouldn't be in another class altogether.\r\n- They also \"log\" but it's a different kind of logging than what `LogMessage` is supposed to do. It could be confusing for the caller.\r\n- Do you expect a component to override these? What justifies the `virtual` keyword?\r\n\r\nI'm probably overthinking it, the API is public but a not a commonly used one. Feel free to ignore me.",
              "createdAt": "2021-12-13T21:31:30Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -15,5 +17,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStart(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStart(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStop(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStop(args);\n+        }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> After re-reviewing I'm wondering if maybe these methods shouldn't be in another class altogether.\r\n\r\nI sort of agree, but I also think there's no better place.  I could add a new class and pass it to resolvers but that would be a breaking change.  Do you propose a better spot to have these?\r\n\r\n> Do you expect a component to override these? What justifies the virtual keyword?\r\n\r\nNo but if anyone is implementing this class they'll be broken if the new methods are not `virtual`.  As far as I know, the only implementations are unit tests.  When this was originally created, we decided to use classes instead of interfaces so we could add stuff like this without it being a breaking change.  Of course now you can add default implementations of interfaces...\r\n\r\n",
              "createdAt": "2021-12-14T16:54:27Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -15,5 +17,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStart(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStart(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStop(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStop(args);\n+        }",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "> No but if anyone is implementing this class they'll be broken if the new methods are not `virtual`\r\n\r\nFirst I was like \"that's not the case, adding non-virtual methods doesn't break implementors\" but it totally makes sense on semantic level if the goal is to enable mocking. All clear now, I think it's fine as is. Thank you!",
              "createdAt": "2021-12-14T21:38:17Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -15,5 +17,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEvent(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStart(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStart(args);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.\n+        /// </summary>\n+        /// <param name=\"args\">An array of arguments to log with the event.</param>\n+        public virtual void LogEventStop(params object[] args)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStop(args);\n+        }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}