{
  "number": 7051,
  "title": "Al.exe finds the correct tool based on platform",
  "body": "Finally puts https://github.com/dotnet/msbuild/issues/5981 to bed.\r\n(to trigger an auto-close: fixes https://github.com/dotnet/msbuild/issues/5981)\r\n\r\n### Context\r\nThe underlying problem with the Al issues is that **the Al task finds its own tool based on the current process' architecture**. This means:\r\n\r\nx86 msbuild.exe -> x86 Al.exe\r\nx64 msbuild.exe -> x64 Al.exe\r\n\r\nNow, if your x86 msbuild.exe is building with `Platform=x64`, the x86 Al.exe gets passed `platform:x64` and logs its own warning because of mismatched platforms.\r\n\r\nSo we fixed that by checking if the platform was x64, then look in the x64 tools directory in common.targets.\r\n\r\nNow we're hitting problems where the x64 msbuild.exe is calling the x64 Al.exe and being passed `platform:x86`, causing the reverse of the original issue!\r\n\r\n### Changes Made\r\nThe Al task checks the platform that was passed. If it's x86, it will find the 32 bit al.exe. If x64, it will append x64 to the path before finding the tool.\r\n\r\nThis also reverts appending x64 to the tools directory in common.currentversion.targets before calling the Al task. It shouldn't have worked in today's x64 msbuild.exe, but does because of the x86 fallback behavior. Apending x64 before the task is called is no longer required.\r\n\r\n### Testing\r\n\r\n### Notes\r\nI allowed `_ALExeToolPath` to be overridden to account for projects that may be using it today with older msbuild binaries.\r\n\r\n**A mismatched common.currentversion.targets & microsoft.build.dll can fail**.\r\n\r\nOld targets & new dll: if platform is x64 it will double append x64, but the fallback will find the x64 al.exe.\r\n\t\t\t\t\t\t\t\t\t\tno fix required.\r\n\t\t\t\t\t\t\t\t\tif platform is x86 and x64 is appended to the path: will likely find the x64 tool and log the error.\r\n\t\t\t\t\t\t\t\t\t\tfix: customer should no longer append x64 to the path.\r\nnew targets & old dll: for platform=x64, `x64` needs to be manually appended. The \"source of truth\" is setting `AlToolPath` to end in `x64`.\r\n\t\t\t\t\t\t\t\t\tfor platform=x86, no fix needed.",
  "state": "MERGED",
  "createdAt": "2021-11-18T23:22:13Z",
  "updatedAt": "2021-11-25T13:34:12Z",
  "closedAt": "2021-11-25T13:34:11Z",
  "mergedAt": "2021-11-25T13:34:11Z",
  "additions": 9,
  "deletions": 5,
  "changedFiles": 3,
  "headRefName": "al-x64-32bit",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a77d3033e9fcaf22f47de88717a8b044a1178d01",
          "message": "Modify tool path based on Platform being built\n\nAdded an X64 processor architecture variable for consistency. Ref\nassemblies also updated.",
          "committedDate": "2021-11-18T23:23:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "753ffffeb940cf586100468a845d1b25c4647629",
          "message": "Stop appending x64 in common.targets",
          "committedDate": "2021-11-18T23:24:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0436d43a765ef8bad9a655fbc3ad7716accaa342",
          "message": "Remove X64 as a processorarchitecture",
          "committedDate": "2021-11-22T16:40:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce702f934d4b240b36d6cfd6508b139faaa8917b",
          "message": "Pass a anonymous method for FileInfoExists",
          "committedDate": "2021-11-24T18:46:54Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I like adding this since it's redundant with `AMD64`. Can it be avoided, perhaps by mapping x64->amd64 higher in the callstack?",
              "createdAt": "2021-11-19T19:36:56Z",
              "path": "src/Utilities/ProcessorArchitecture.cs",
              "diffHunk": "@@ -16,6 +16,10 @@ public static class ProcessorArchitecture\n         /// </summary>\n         public const string X86 = \"x86\";\n         /// <summary>\n+        /// Represents the 64-bit AMD64 processor architecture.\n+        /// </summary>\n+        public const string X64 = \"x64\";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You mean modifying the switch case to be `\"x64\"   => Path.Combine(sdkToolsPath, \"x64\"),`? Or checking if the platform is `x64`, then pass `AMD64` into `GeneratePathToTool`?\r\n\r\nI'll add another switch 1 stack frame higher than `GeneratePathToTool`",
              "createdAt": "2021-11-19T21:48:04Z",
              "path": "src/Utilities/ProcessorArchitecture.cs",
              "diffHunk": "@@ -16,6 +16,10 @@ public static class ProcessorArchitecture\n         /// </summary>\n         public const string X86 = \"x86\";\n         /// <summary>\n+        /// Represents the 64-bit AMD64 processor architecture.\n+        /// </summary>\n+        public const string X64 = \"x64\";",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I was thinking the latter (around the `archToLookFor` thing).",
              "createdAt": "2021-11-19T22:05:34Z",
              "path": "src/Utilities/ProcessorArchitecture.cs",
              "diffHunk": "@@ -16,6 +16,10 @@ public static class ProcessorArchitecture\n         /// </summary>\n         public const string X86 = \"x86\";\n         /// <summary>\n+        /// Represents the 64-bit AMD64 processor architecture.\n+        /// </summary>\n+        public const string X64 = \"x64\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The task has a `Prefer32Bit` parameters which also plays a role in the tool invocation. It is intentional to ignore it here and use only `Platform`, is that correct?",
              "createdAt": "2021-11-22T12:42:05Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I think that's only if the platform is AnyCPU.",
              "createdAt": "2021-11-22T15:37:09Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> The task has a Prefer32Bit parameters which also plays a role in the tool invocation. It is intentional to ignore it here and use only Platform, is that correct?\r\n\r\nI was sort of torn here. Prefer32Bit has existed here for a while, but I decided _not_ to use it for the sake of the customer. I haven't seen a single customer _want_ to use x64 Al on a 32 bit platform (and vise-versa), and I'm not sure a customer would want that warning? If we take on `Prefer32Bit` (which `csc` uses), we increase complexity unless it's some new AlPrefer32Bit which is a new opt in for customers. \r\n\r\nIf we just use Platform customer's don't need to do anything and it \"just works.\"",
              "createdAt": "2021-11-22T16:36:20Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\nDelete extra space in untouched file.",
              "createdAt": "2021-11-22T15:36:44Z",
              "path": "src/Utilities/ProcessorArchitecture.cs",
              "diffHunk": "@@ -15,6 +15,7 @@ public static class ProcessorArchitecture\n         /// Represents the 32-bit x86 processor architecture.\n         /// </summary>\n         public const string X86 = \"x86\";\n+",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this one of those cases where SdkToolsPathUtility.FileInfoExists is secretly slower than `f => SdkToolsPathUtility.FileInfoExists(f)`?",
              "createdAt": "2021-11-22T15:38:16Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :\n+                                        Platform.Equals(\"x64\", StringComparison.OrdinalIgnoreCase) ? ProcessorArchitecture.AMD64 : // x64 maps to AMD64 in GeneratePathToTool\n+                                        ProcessorArchitecture.CurrentProcessArchitecture;\n+\n+                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, archToLookFor, SdkToolsPath, ToolExe, Log, true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "\ud83d\ude2e can you post an example of us making that change?",
              "createdAt": "2021-11-22T16:37:16Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :\n+                                        Platform.Equals(\"x64\", StringComparison.OrdinalIgnoreCase) ? ProcessorArchitecture.AMD64 : // x64 maps to AMD64 in GeneratePathToTool\n+                                        ProcessorArchitecture.CurrentProcessArchitecture;\n+\n+                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, archToLookFor, SdkToolsPath, ToolExe, Log, true);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/6983",
              "createdAt": "2021-11-22T17:04:05Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :\n+                                        Platform.Equals(\"x64\", StringComparison.OrdinalIgnoreCase) ? ProcessorArchitecture.AMD64 : // x64 maps to AMD64 in GeneratePathToTool\n+                                        ProcessorArchitecture.CurrentProcessArchitecture;\n+\n+                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, archToLookFor, SdkToolsPath, ToolExe, Log, true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, this thing is devious. It's not a big deal here since this isn't a hot loop but please go ahead and fix.",
              "createdAt": "2021-11-23T20:43:52Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -305,7 +305,12 @@ protected override string GenerateFullPathToTool()\n \n             if (String.IsNullOrEmpty(pathToTool) || !FileSystems.Default.FileExists(pathToTool))\n             {\n-                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, ProcessorArchitecture.CurrentProcessArchitecture, SdkToolsPath, ToolExe, Log, true);\n+                // The bitness of al.exe should match the platform being built\n+                string archToLookFor =  Platform.Equals(\"x86\", StringComparison.OrdinalIgnoreCase) ? Platform :\n+                                        Platform.Equals(\"x64\", StringComparison.OrdinalIgnoreCase) ? ProcessorArchitecture.AMD64 : // x64 maps to AMD64 in GeneratePathToTool\n+                                        ProcessorArchitecture.CurrentProcessArchitecture;\n+\n+                pathToTool = SdkToolsPathUtility.GeneratePathToTool(SdkToolsPathUtility.FileInfoExists, archToLookFor, SdkToolsPath, ToolExe, Log, true);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}