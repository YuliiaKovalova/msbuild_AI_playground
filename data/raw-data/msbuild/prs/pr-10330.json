{
  "number": 10330,
  "title": "Update the severities value of BuildCheck results",
  "body": "Fixes #10097\r\n\r\n### Context\r\nCurrent severity model supports only `Info`, `Warning`, `Error` levels of the configurable values, and are not aligned with the documentation provided in the BuildCheck. \r\nBuildCheck documentation currently provides the possibility to have the severity equal to `None`, `Default`, `Suggestion`\r\n\r\n### Changes Made\r\n- New confg values for severity are introduced: \r\n  - `None` - will result the IsEnabled to be set to false\r\n  - `Default` - if set to the rule, the default value of the rule will be used. \r\n  - `Info` renamed to the `Suggestion`\r\n- Removed the possibility to configure the `IsEnabled`. \r\n  - The property now is readOnly and will be determined based on the Severity value\r\n\r\n### Testing\r\nManual testing with additional automated test to cover the scenario of enablment of the rule\r\n",
  "state": "MERGED",
  "createdAt": "2024-07-03T11:12:14Z",
  "updatedAt": "2024-07-04T14:45:56Z",
  "closedAt": "2024-07-04T14:45:55Z",
  "mergedAt": "2024-07-04T14:45:55Z",
  "additions": 232,
  "deletions": 79,
  "changedFiles": 14,
  "headRefName": "dev/f-alizada/editorconfig-severity-values",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "42b657f1b9201e3da5591258830f7a5f541efbf0",
          "message": "Update the severities value of BuilcCheck results",
          "committedDate": "2024-07-03T10:47:39Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b535f02c51f3b97e8027e6cd55268b7ad9ccaed3",
          "message": "ADd the comment for handling the Default case for IsEnabled",
          "committedDate": "2024-07-03T11:22:04Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5bc92ff997db3deaa0dd072162e2fb3bed6d07fe",
          "message": "Add null case to the tests",
          "committedDate": "2024-07-03T13:04:10Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a54901b9d84c99aaeea58746c37db14f4c6982f4",
          "message": "Merge branch 'main' into dev/f-alizada/editorconfig-severity-values",
          "committedDate": "2024-07-03T13:04:45Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "faacb6be6943cf9b0b4ddeade8cb74c05cd933a6",
          "message": "Change the order of the Severity options",
          "committedDate": "2024-07-03T13:56:36Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68509dd76f873db428c876d2d7075667e807658e",
          "message": "Align the configuration prefix in the doc",
          "committedDate": "2024-07-03T15:14:50Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4bb51908ab5cc841407b45d857c678da75a82e88",
          "message": "Address PR review comments",
          "committedDate": "2024-07-04T11:26:54Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10a5168d87780b5c37562379f459b76a6cab01f0",
          "message": "Returned back the suggestion to the documentation",
          "committedDate": "2024-07-04T11:28:34Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df09f5da6ae1cd78b37c7f682958e9ceee416e39",
          "message": "Add api compat supression file to supress the BuildCheck severity values changes",
          "committedDate": "2024-07-04T12:03:43Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ca2bbf318b63f08a6344def41d9b18363eaf64e",
          "message": "Update the typo",
          "committedDate": "2024-07-04T12:35:02Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@maridematte is that really the case? If no severity is set, then the 'default' severity for each rule should be used, which is variable and will lead to at least some rules being on by default without any user settings. \n\nThis is desired - generally when we make rules we want them to be on, and users have to do something extra to turn them off. ",
        "createdAt": "2024-07-03T12:30:32Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Looks good, I'd like to see somewhere in the documentation stating that to enable a rule or analyzer, the severity needs to be set. Just to make things clear for users.\r\n\r\nThank you @maridematte, like @baronfel mentioned, it is not the case. and only enablment that should be happening is /analyze. \r\nIf there are no any .editorconfigs on the disk, then the default values are taken into the account. This topic contributed additional unit test case to cover specific scenario when no severity is added, and default is used ",
        "createdAt": "2024-07-03T13:06:20Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "@JanKrivanek Thank you for the review. \r\nCould you please clarify what you are suggesting is use only suggestion instead of the info (basically naming?) \r\nMy understanding was that to avoid the usage of something that is not supported yet. Because the suggestion is highlighetd in the IDE but the informational not, hence my thinking was to add it once we will have supported logs, Please let me know what do you think :) thanks",
        "createdAt": "2024-07-04T07:18:30Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: while you are in this file, can you unify the build check prefix used in this doc? both `build_check` and `buildcheck` are here and it is very confusing to know which is actually in use.",
              "createdAt": "2024-07-03T14:05:34Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -75,14 +75,12 @@ Majority of following cases are included in appropriate context within the scena\n ```ini\n # I expect this to apply to all projects within my solution, but not to projects which are not part of the solution\n [ContosoFrontEnd.sln]\n-build_check.BC0101.IsEnabled=true\n build_check.BC0101.Severity=warning",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Didn't notice it at first, thank you! One inconsistency aligned now :) ",
              "createdAt": "2024-07-03T15:15:49Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -75,14 +75,12 @@ Majority of following cases are included in appropriate context within the scena\n ```ini\n # I expect this to apply to all projects within my solution, but not to projects which are not part of the solution\n [ContosoFrontEnd.sln]\n-build_check.BC0101.IsEnabled=true\n build_check.BC0101.Severity=warning",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this intentional removal?\r\nThis way we would not have any way to run the checks and give us results as messages (as opposed to warnings and errors that might be breaking build)",
              "createdAt": "2024-07-03T17:50:57Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -184,7 +182,6 @@ Option `Severity` with following values will be available:\n \n * `Default`\n * `None`\n-* `Suggestion`",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes, this is intentional removal. \r\n```\r\nViolations appear in the\u00a0Message\u00a0tab in the\u00a0Error List\u00a0window but not in command-line build output.\r\n```\r\nI can see that this severity is for the integration of the IDE (please correct me if I'm wrong). Additionaly we have `Info`, which is my mistake of not adding it here :) \r\nPlease let me know if that helps",
              "createdAt": "2024-07-04T07:06:09Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -184,7 +182,6 @@ Option `Severity` with following values will be available:\n \n * `Default`\n * `None`\n-* `Suggestion`",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Discussed offline. \r\n`Suggestion` is used instead of `Info`. The plan is to populate it with the location information so it could be used in IDE as well. ",
              "createdAt": "2024-07-04T11:29:10Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -184,7 +182,6 @@ Option `Severity` with following values will be available:\n \n * `Default`\n * `None`\n-* `Suggestion`",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we want to align with Roslyn analyzers (https://learn.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers#severity-levels), then this should be Suggestion",
              "createdAt": "2024-07-03T17:54:15Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public enum BuildAnalyzerResultSeverity\n {\n+    /// <summary>\n+    /// Information level message.\n+    /// </summary>\n     Info,",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you for pointing out! Currently Suggestion severity is used to suggest in IDE the place where to correct, so the informational message is used for now. Leaving the possibility to add more severities in the future. \r\nLike Suggestion and Silent. ",
              "createdAt": "2024-07-04T07:08:50Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public enum BuildAnalyzerResultSeverity\n {\n+    /// <summary>\n+    /// Information level message.\n+    /// </summary>\n     Info,",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Suggestion returned :) ",
              "createdAt": "2024-07-04T12:04:36Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public enum BuildAnalyzerResultSeverity\n {\n+    /// <summary>\n+    /// Information level message.\n+    /// </summary>\n     Info,",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's order it by severity (Default, None, Suggestion, Warning, Error - or in opposite order - that doesn't matter much) - so that comparisons can be used in the code (e.g. `if (severity >= Severity.Warning)`)",
              "createdAt": "2024-07-03T17:56:40Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public enum BuildAnalyzerResultSeverity\n {\n+    /// <summary>\n+    /// Information level message.\n+    /// </summary>\n     Info,\n+\n+    /// <summary>\n+    /// Results a warning in build if the BuildCheck rule applied.\n+    /// </summary>\n     Warning,\n+\n+    /// <summary>\n+    /// Results an error in build if the BuildCheck rule applied.\n+    /// </summary>\n     Error,\n+\n+    /// <summary>\n+    /// When set to None the rule will not run.\n+    /// </summary>\n+    None,\n+\n+    /// <summary>\n+    /// When set, the default value of the BuildCheck rule will be used.\n+    /// </summary>\n+    Default,\n }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Updated, thank you! ",
              "createdAt": "2024-07-04T11:29:24Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n /// </summary>\n public enum BuildAnalyzerResultSeverity\n {\n+    /// <summary>\n+    /// Information level message.\n+    /// </summary>\n     Info,\n+\n+    /// <summary>\n+    /// Results a warning in build if the BuildCheck rule applied.\n+    /// </summary>\n     Warning,\n+\n+    /// <summary>\n+    /// Results an error in build if the BuildCheck rule applied.\n+    /// </summary>\n     Error,\n+\n+    /// <summary>\n+    /// When set to None the rule will not run.\n+    /// </summary>\n+    None,\n+\n+    /// <summary>\n+    /// When set, the default value of the BuildCheck rule will be used.\n+    /// </summary>\n+    Default,\n }",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    public bool IsEnabled => Severity >= BuildAnalyzerResultSeverity.Suggestion;\r\n```\r\n\r\nIf check doesn't have default in code nor explicit setting in editorconfig - it's considered disabled. None is as well disabled. Everything else is enabled.\r\n",
              "createdAt": "2024-07-03T18:00:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -19,8 +19,11 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope\n     }\n \n     public string RuleId { get; }\n+\n     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }\n+\n     public BuildAnalyzerResultSeverity Severity { get; }\n+\n     public bool IsEnabled { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This is something that is being set during the creating of the instance. Based on the setting of editor config and the default values. \r\nHence there is no need to set it here.\r\n",
              "createdAt": "2024-07-04T07:13:35Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -19,8 +19,11 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope\n     }\n \n     public string RuleId { get; }\n+\n     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }\n+\n     public BuildAnalyzerResultSeverity Severity { get; }\n+\n     public bool IsEnabled { get; }",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Please let me know if it is not clear I'll adjust the code, thank you ",
              "createdAt": "2024-07-04T07:14:07Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -19,8 +19,11 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope\n     }\n \n     public string RuleId { get; }\n+\n     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }\n+\n     public BuildAnalyzerResultSeverity Severity { get; }\n+\n     public bool IsEnabled { get; }",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "This is updated, thanks",
              "createdAt": "2024-07-04T11:34:35Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -19,8 +19,11 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope\n     }\n \n     public string RuleId { get; }\n+\n     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }\n+\n     public BuildAnalyzerResultSeverity Severity { get; }\n+\n     public bool IsEnabled { get; }",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why `GetConfigValue` cannot be used here? I'm trying to see if we need the special handling method `GetSeverityValue`",
              "createdAt": "2024-07-03T18:03:13Z",
              "path": "src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -264,7 +263,7 @@ internal BuildAnalyzerConfigurationInternal GetMergedConfiguration(string projec\n             ruleId: ruleId,\n             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),\n             isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),\n-            severity: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.Severity));\n+            severity: GetSeverityValue(editorConfig, defaultConfig));",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "```\r\n if (editorConfigValue.Severity != null && editorConfigValue.Severity != BuildAnalyzerResultSeverity.Default)\r\n  {\r\n      resultSeverity = editorConfigValue.Severity;\r\n  }\r\n```\r\nIn order to skip the default value and to consider it as `null`.",
              "createdAt": "2024-07-04T07:15:29Z",
              "path": "src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -264,7 +263,7 @@ internal BuildAnalyzerConfigurationInternal GetMergedConfiguration(string projec\n             ruleId: ruleId,\n             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),\n             isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),\n-            severity: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.Severity));\n+            severity: GetSeverityValue(editorConfig, defaultConfig));",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Added the corner case described in the method. ",
              "createdAt": "2024-07-04T11:29:54Z",
              "path": "src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -264,7 +263,7 @@ internal BuildAnalyzerConfigurationInternal GetMergedConfiguration(string projec\n             ruleId: ruleId,\n             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),\n             isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),\n-            severity: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.Severity));\n+            severity: GetSeverityValue(editorConfig, defaultConfig));",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    [InlineData(\"SUGGESTION\", BuildAnalyzerResultSeverity.Info)]\r\n```",
              "createdAt": "2024-07-03T18:03:39Z",
              "path": "src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs",
              "diffHunk": "@@ -33,43 +33,45 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()\n \n     [Theory]\n     [InlineData(\"error\", BuildAnalyzerResultSeverity.Error)]\n+    [InlineData(\"ERROR\", BuildAnalyzerResultSeverity.Error)]\n     [InlineData(\"info\", BuildAnalyzerResultSeverity.Info)]\n+    [InlineData(\"INFO\", BuildAnalyzerResultSeverity.Info)]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    [InlineData(\"suggestion\", true)]\r\n```",
              "createdAt": "2024-07-03T18:05:10Z",
              "path": "src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs",
              "diffHunk": "@@ -33,43 +33,45 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()\n \n     [Theory]\n     [InlineData(\"error\", BuildAnalyzerResultSeverity.Error)]\n+    [InlineData(\"ERROR\", BuildAnalyzerResultSeverity.Error)]\n     [InlineData(\"info\", BuildAnalyzerResultSeverity.Info)]\n+    [InlineData(\"INFO\", BuildAnalyzerResultSeverity.Info)]\n     [InlineData(\"warning\", BuildAnalyzerResultSeverity.Warning)]\n     [InlineData(\"WARNING\", BuildAnalyzerResultSeverity.Warning)]\n+    [InlineData(\"NONE\", BuildAnalyzerResultSeverity.None)]\n+    [InlineData(\"none\", BuildAnalyzerResultSeverity.None)]\n+    [InlineData(\"default\", BuildAnalyzerResultSeverity.Default)]\n+    [InlineData(\"DEFAULT\", BuildAnalyzerResultSeverity.Default)]\n     public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)\n     {\n         var config = new Dictionary<string, string>()\n         {\n             { \"severity\" , parameter },\n         };\n+\n         var buildConfig = BuildAnalyzerConfiguration.Create(config);\n \n         buildConfig.ShouldNotBeNull();\n         buildConfig.Severity.ShouldBe(expected);\n-\n-        buildConfig.IsEnabled.ShouldBeNull();\n         buildConfig.EvaluationAnalysisScope.ShouldBeNull();\n     }\n \n     [Theory]\n-    [InlineData(\"true\", true)]\n-    [InlineData(\"TRUE\", true)]\n-    [InlineData(\"false\", false)]\n-    [InlineData(\"FALSE\", false)]\n-    public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? expected)\n+    [InlineData(\"error\", true)]\n+    [InlineData(\"warning\", true)]\n+    [InlineData(\"info\", true)]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    [InlineData(BuildAnalyzerResultSeverity.Suggestion, BuildAnalyzerResultSeverity.Suggestion, true)]\r\n```",
              "createdAt": "2024-07-03T18:06:51Z",
              "path": "src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs",
              "diffHunk": "@@ -218,4 +212,29 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()\n             configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, \"test123.csproj\"), \"rule_id\");\n         });\n     }\n+\n+    [Theory]\n+    [InlineData(BuildAnalyzerResultSeverity.Warning, BuildAnalyzerResultSeverity.Warning, true)]\n+    [InlineData(BuildAnalyzerResultSeverity.Error, BuildAnalyzerResultSeverity.Error, true)]\n+    [InlineData(BuildAnalyzerResultSeverity.Default, BuildAnalyzerResultSeverity.Warning, true)]\n+    [InlineData(BuildAnalyzerResultSeverity.Info, BuildAnalyzerResultSeverity.Info, true)]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@JanKrivanek @baronfel FYI this situation could appear when the rule is not configured in the editorconfig however the default severity of authored check is set to default. \r\n",
              "createdAt": "2024-07-04T12:06:33Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -10,25 +11,31 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n /// </summary>\n internal sealed class BuildAnalyzerConfigurationInternal\n {\n-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)\n+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)\n     {\n+        if (severity == BuildAnalyzerResultSeverity.Default)\n+        {\n+            throw new ArgumentOutOfRangeException(nameof(severity), severity, \"Severity 'Default' is not recognized by the BuilcCheck reports infrastructure\");",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "tipo 'BuilcCheck'",
              "createdAt": "2024-07-04T12:22:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -10,25 +11,31 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n /// </summary>\n internal sealed class BuildAnalyzerConfigurationInternal\n {\n-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)\n+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)\n     {\n+        if (severity == BuildAnalyzerResultSeverity.Default)\n+        {\n+            throw new ArgumentOutOfRangeException(nameof(severity), severity, \"Severity 'Default' is not recognized by the BuilcCheck reports infrastructure\");",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. this should actually _never_ happen - as we call the ctor after merging 3 config sources - editorconfig, default configr from buildcheck, and the hardcoded default config - which has the severity of None:\r\n\r\nhttps://github.com/dotnet/msbuild/pull/10330/files#diff-889c51f15e7c4415667244aaecf9a9c77442af8baefec35fe30a95ac3425915cR21-R25\r\n\r\nBut it's very fine to keep the exception here - to document that 'Default' seveirty will never be used in the effective configuration",
              "createdAt": "2024-07-04T12:28:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -10,25 +11,31 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n /// </summary>\n internal sealed class BuildAnalyzerConfigurationInternal\n {\n-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)\n+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)\n     {\n+        if (severity == BuildAnalyzerResultSeverity.Default)\n+        {\n+            throw new ArgumentOutOfRangeException(nameof(severity), severity, \"Severity 'Default' is not recognized by the BuilcCheck reports infrastructure\");",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It should not of course, in terms of running the BuildCheck, however if we author the Check Rule with default Severity set to 'Default' and it was not configured, then we will raise the exception",
              "createdAt": "2024-07-04T12:40:08Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs",
              "diffHunk": "@@ -10,25 +11,31 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n /// </summary>\n internal sealed class BuildAnalyzerConfigurationInternal\n {\n-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)\n+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)\n     {\n+        if (severity == BuildAnalyzerResultSeverity.Default)\n+        {\n+            throw new ArgumentOutOfRangeException(nameof(severity), severity, \"Severity 'Default' is not recognized by the BuilcCheck reports infrastructure\");",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}