{
  "number": 10408,
  "title": "Add severity configuration e2e tests",
  "body": "Fixes #10385 \r\n\r\n### Context\r\nE2E tests to cover the configurability and the effect of the severity setup. \r\n\r\n### Changes Made\r\nIntroduced 2 additional tests:\r\n- Severity != `None` should result the BuildCheck BC0101 should report with proper severity.\r\n- Severity = `None` should result the BuildCheck BC0101 not to report anything.\r\n\r\n### Testing\r\nThe PR itself is the introduction of tests ",
  "state": "MERGED",
  "createdAt": "2024-07-18T12:40:55Z",
  "updatedAt": "2024-07-22T09:01:32Z",
  "closedAt": "2024-07-22T09:01:32Z",
  "mergedAt": "2024-07-22T09:01:32Z",
  "additions": 27,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/f-alizada/add-e2e-test-sev-none",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3989be12c0e97d089f0d221d5d5afdf6714faaf0",
          "message": "Add severity configuration e2e tests",
          "committedDate": "2024-07-18T11:38:29Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1799056133fbfc789e77304dae4c2ad48b7396e",
          "message": "Address PR comments",
          "committedDate": "2024-07-19T13:18:54Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1cda009b723fd6b7a8c08f9375e3123d50c93f70",
          "message": "Merge branch 'main' into dev/f-alizada/add-e2e-test-sev-none",
          "committedDate": "2024-07-22T07:04:06Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Not necessarily to be aprt of this PR - we should remove the timeout explicit parameter (here and in the other tests) and rely on sane default of 30 seconds.\r\n2 minutes seems excessive here. I know it is from the other tests - but that was added as a temporary desperate measure for the randomly staling integration test - which is now resolved.",
              "createdAt": "2024-07-19T10:10:08Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu\n         }\n     }\n \n+    [Theory]\n+    [InlineData(\"warning\", \"warning BC0101\")]\n+    [InlineData(\"error\", \"error BC0101\")]\n+    [InlineData(\"suggestion\", \"BC0101\")]\n+    [InlineData(\"default\", \"warning BC0101\")]\n+    public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string expectedOutputValues)\n+    {\n+        PrepareSampleProjectsAndConfig(true, out TransientTestFile projectFile, BC0101Severity);\n+\n+        string output = RunnerUtilities.ExecBootstrapedMSBuild(\n+            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\",\n+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "If we'd add `string[] unexpectedOutputValues` argument to the parametrized test - than we'd be able to more reliably test the `suggestion` case, as well as include the `none` case here and avoid duplication.",
              "createdAt": "2024-07-19T10:13:28Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu\n         }\n     }\n \n+    [Theory]\n+    [InlineData(\"warning\", \"warning BC0101\")]\n+    [InlineData(\"error\", \"error BC0101\")]\n+    [InlineData(\"suggestion\", \"BC0101\")]\n+    [InlineData(\"default\", \"warning BC0101\")]\n+    public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string expectedOutputValues)\n+    {\n+        PrepareSampleProjectsAndConfig(true, out TransientTestFile projectFile, BC0101Severity);\n+\n+        string output = RunnerUtilities.ExecBootstrapedMSBuild(\n+            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\",\n+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I was thinking to do some refactoring there in this PR, but decided to do that after this is merged, overall agree. \r\n\r\nThank you for the suggestion `unexpectedOutputValues` working on that ",
              "createdAt": "2024-07-19T13:07:27Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu\n         }\n     }\n \n+    [Theory]\n+    [InlineData(\"warning\", \"warning BC0101\")]\n+    [InlineData(\"error\", \"error BC0101\")]\n+    [InlineData(\"suggestion\", \"BC0101\")]\n+    [InlineData(\"default\", \"warning BC0101\")]\n+    public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string expectedOutputValues)\n+    {\n+        PrepareSampleProjectsAndConfig(true, out TransientTestFile projectFile, BC0101Severity);\n+\n+        string output = RunnerUtilities.ExecBootstrapedMSBuild(\n+            $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\",\n+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "is there a way to distinguish suggestion from the others?\r\nIf not by presence of specific text, than maybe via absence of specific texts (e.g. `{ \"warning BC0101\", \"error BC0101\" }`)?",
              "createdAt": "2024-07-19T10:11:45Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu\n         }\n     }\n \n+    [Theory]\n+    [InlineData(\"warning\", \"warning BC0101\")]\n+    [InlineData(\"error\", \"error BC0101\")]\n+    [InlineData(\"suggestion\", \"BC0101\")]",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you for the suggestion, update the test case \r\nDuplication removed :) ",
              "createdAt": "2024-07-19T13:21:27Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -105,6 +105,36 @@ public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool bu\n         }\n     }\n \n+    [Theory]\n+    [InlineData(\"warning\", \"warning BC0101\")]\n+    [InlineData(\"error\", \"error BC0101\")]\n+    [InlineData(\"suggestion\", \"BC0101\")]",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}