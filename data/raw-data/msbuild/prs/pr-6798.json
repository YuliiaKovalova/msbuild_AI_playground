{
  "number": 6798,
  "title": "Add invariant check to InternableString.ExpensiveConvertToString",
  "body": "Fixes [AB#1343753](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1343753)\r\n\r\n### Context\r\nWe're getting hang dumps where a lock taken by the concurrent flavor of `WeakStringCache` is orphaned. This can possibly be caused by `InternableString.ExpensiveConvertToString`, which is running unsafe code under the lock, throwing a corrupting exception, thus preventing the lock-releasing finally blocks from running.\r\n\r\n### Changes Made\r\nSince no bug has been found in stress runs and by extensive code inspection, I am adding a cheap invariant check to the unsafe method, hoping that it would help us figure out the issue.\r\n\r\n### Testing\r\nSmoke-tested the invariant.\r\n",
  "state": "MERGED",
  "createdAt": "2021-08-31T12:50:22Z",
  "updatedAt": "2021-09-09T07:21:05Z",
  "closedAt": "2021-09-07T21:50:50Z",
  "mergedAt": "2021-09-07T21:50:50Z",
  "additions": 9,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "stringtools-add-invariant-check",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "52669850b58e838d296b059bfcb40d3cb71e4644",
          "message": "Add invariant check to InternableString.ExpensiveConvertToString",
          "committedDate": "2021-08-31T12:29:20Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6ebfccb31167982e9d0422f76861839910b7cc8",
          "message": "Update src/StringTools/InternableString.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-08-31T15:02:17Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d2512cc114ab51ee5dcef6d903805d582ab7589",
          "message": "PR feedback: Include the mismatching numbers in exception message",
          "committedDate": "2021-09-02T09:21:27Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The comment makes sense to me but I'm not sure I understand how the new exception would help the situation. Can you expand on that some?",
              "createdAt": "2021-08-31T14:15:15Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,14 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");\n+                }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I am assuming that a length mismatch does not always mean memory corruption and a memory corruption does not always mean immediate crash. So the new code will execute and we'll get dumps (or other artifacts, possibly including a repro) at the stack where the problem happens. As opposed to getting hangs on another thread later, which is the current unfortunate situation.",
              "createdAt": "2021-08-31T14:33:39Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,14 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");\n+                }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "```suggestion\r\n                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\r\n                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\r\n                // to hangs caused by the lock getting orphaned. Attempt to detect that and throw now, \r\n                // before the corruption causes further problems.\r\n                if (destPtr != resultPtr + Length)\r\n                {\r\n                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");\r\n                }\r\n```\r\n\r\n?",
              "createdAt": "2021-08-31T14:44:15Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,14 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");\n+                }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Applied, thank you!",
              "createdAt": "2021-08-31T15:02:43Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,14 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");\n+                }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "maybe also print the values of all the three numbers if it will make debugging easier?",
              "createdAt": "2021-09-01T23:08:04Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,15 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned. Attempt to detect that and throw now, \n+                // before the corruption causes further problems.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Yes, I have added two numbers to the exception message. The pointer value is not of much use without a dump and can be easily extracted from the dump if it's available. Thank you!",
              "createdAt": "2021-09-02T09:27:54Z",
              "path": "src/StringTools/InternableString.cs",
              "diffHunk": "@@ -265,6 +265,15 @@ public unsafe string ExpensiveConvertToString()\n                         }\n                     }\n                 }\n+\n+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.\n+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,\n+                // to hangs caused by the lock getting orphaned. Attempt to detect that and throw now, \n+                // before the corruption causes further problems.\n+                if (destPtr != resultPtr + Length)\n+                {\n+                    throw new InvalidOperationException(\"Length property does not match sum of span lengths\");",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}