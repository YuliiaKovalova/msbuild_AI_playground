{
  "number": 7807,
  "title": "Suppress writing global namespaces with WriteCodeFragment when ImplicitUsings on projects are set to \"enable\".",
  "body": "Fixes #7806\r\n\r\n### Context\r\nSince the .NET 6 SDK's ``ImplicitUsings`` was added for global usings support for C# projects. Due to that I feelt that WriteCodeFragment should migrate to using Implicit Usings only when enabled by a project.\r\n\r\n### Changes Made\r\nAdded a new required parameter to ``WriteCodeFragment`` which is meant to pass the value of ``ImplicitUsings`` set by a project. Only when it's value is \"enable\" does it change the results of ``WriteCodeFragment``.\r\n\r\n### Testing\r\nI made the changes directly on github, however a few more files might need changes before I know for sure that build won't fail.\r\n\r\n### Notes\r\nThere will need to be changes to change the fully qualified nature of the keys as well when ``ImplicitUsings`` is set to ``enable`` as well.",
  "state": "CLOSED",
  "createdAt": "2022-07-09T23:17:04Z",
  "updatedAt": "2022-08-04T16:24:03Z",
  "closedAt": "2022-08-04T16:24:03Z",
  "mergedAt": null,
  "additions": 33,
  "deletions": 6,
  "changedFiles": 4,
  "headRefName": "patch-1",
  "isDraft": true,
  "author": {
    "login": "AraHaan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a6df1535c52425f66de9ca3367aa053c9584c056",
          "message": "Suppress writing global namespaces with WriteCodeFragment when ImplicitUsings on projects are set to \"enable\".",
          "committedDate": "2022-07-09T23:03:01Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f6c8904383aa0aede416120427e17a7187422a2",
          "message": "Add WriteCodeFragment.ImplicitUsings to PublicAPI.",
          "committedDate": "2022-07-09T23:29:42Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4343d46d4ecde22a72bcca5bb55176f10d6f9608",
          "message": "Add new parameter to Microsoft.Common.CurrentVersion.targets.",
          "committedDate": "2022-07-09T23:46:57Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adb29f14d9bb1e99249c009a572b86450d5ffe7e",
          "message": "Add WriteCodeFragment.ImplicitUsings to PublicAPI (netstandard).",
          "committedDate": "2022-07-10T00:02:43Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ed92833b4c6abd8f819f96a0c0ccead634fd292",
          "message": "Update Microsoft.Common.CurrentVersion.targets",
          "committedDate": "2022-07-10T00:13:20Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1f9f3b76757eec3ef1980f8e5a8b34d98dff127",
          "message": "Apply suggestions from code review",
          "committedDate": "2022-07-10T00:45:36Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c03b72fb4146bf99837c125e62429af22847ae9f",
          "message": "Update Microsoft.Common.CurrentVersion.targets",
          "committedDate": "2022-07-10T01:40:14Z",
          "author": {
            "name": "AraHaan",
            "email": "seandhunt_7@yahoo.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I think it should be good now except for tests needing to be updated.",
        "createdAt": "2022-07-10T00:13:58Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "Team triage:\r\nWe talked this over, and we don't think adding support for implicitly defined namespaces is useful here or for WriteCodeFragment more generally.\r\n\r\nPeople don't normally look too carefully at generated code, so keeping the usings doesn't add to any confusion. More importantly, removing them would mean we create some code snippets that do not work for older versions that don't expect it. Portability is key, and this reduces that.\r\n\r\nCustomers can already redefine what's included in their list of implicit usings, which means that even if we think we know what they're going to be, we could be wrong. Doing this properly introduces per-project variability AND requires SDK work, which complicates this.",
        "createdAt": "2022-08-04T16:24:02Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`true` is, unfortunately, a supported value too.",
              "createdAt": "2022-07-10T00:29:47Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is not \"enable\")",
              "author": {
                "login": "alexrp"
              }
            },
            {
              "body": "I noticed that now in the docs as well, will have to update it thanks.",
              "createdAt": "2022-07-10T00:35:49Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is not \"enable\")",
              "author": {
                "login": "AraHaan"
              }
            },
            {
              "body": "```suggestion\r\n            if (ImplicitUsings is \"disable\" or \"false\")\r\n```",
              "createdAt": "2022-07-10T00:36:46Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is not \"enable\")",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Because this breaks the .NET SDK itself, I think this could be set to Required in a follow-up PR after the .NET SDK starts to use it everywhere that the ``WriteCodeFragment`` task is used.",
              "createdAt": "2022-07-10T00:41:13Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.\n+        /// Anything other than \"enable\" changes nothing here.\n+        /// When it is set to \"enable\" then do not add the usings that\n+        /// this normally writes to the output file.\n+        /// This leverages the full power of what was added in .NET 6+\n+        /// called global usings of C# 10 which is specific to C# (I think).\n+        /// </summary>\n+        [Required]\n+        public string ImplicitUsings { get; set; }",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// This leverages the full power of what was added in .NET 6+\r\n        /// called global usings of C# 10. Also it leverages the feature\r\n        /// that existed for a long time in Visual Basic as well.\r\n        /// </summary>\r\n        public string ImplicitUsings { get; set; } = \"disable\";\r\n```",
              "createdAt": "2022-07-10T00:44:01Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.\n+        /// Anything other than \"enable\" changes nothing here.\n+        /// When it is set to \"enable\" then do not add the usings that\n+        /// this normally writes to the output file.\n+        /// This leverages the full power of what was added in .NET 6+\n+        /// called global usings of C# 10 which is specific to C# (I think).\n+        /// </summary>\n+        [Required]\n+        public string ImplicitUsings { get; set; }",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The code will need to figure out a way to filter the fully qualified attributes and shorten them up to just their types when ``ImplicitUsings`` is ``enable`` or ``true`` (or the responsibility for it could be passed to the .NET SDK itself to exclude fully qualifying them when it's set to those values).",
              "createdAt": "2022-07-10T00:47:28Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is \"disable\" or \"false\")\n             {\n-                globalNamespace.Imports.Add(new CodeNamespaceImport(name));\n+                foreach (string name in NamespaceImports)\n+                {\n+                    globalNamespace.Imports.Add(new CodeNamespaceImport(name));\n+                }\n             }\n \n             foreach (ITaskItem attributeItem in AssemblyAttributes)",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A follow-up pr will need to be made to remove ``= \"disable\";`` here after the .NET SDK starts using it everywhere this task is used.",
              "createdAt": "2022-07-10T00:52:24Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.\n+        /// Anything other than \"enable\" changes nothing here.\n+        /// When it is set to \"enable\" then do not add the usings that\n+        /// this normally writes to the output file.\n+        /// This leverages the full power of what was added in .NET 6+\n+        /// called global usings of C# 10. Also it leverages the feature\n+        /// that existed for a long time in Visual Basic as well.\n+        /// </summary>\n+        public string ImplicitUsings { get; set; } = \"disable\";",
              "author": {
                "login": "AraHaan"
              }
            },
            {
              "body": "The task is [documented](https://docs.microsoft.com/en-us/visualstudio/msbuild/writecodefragment-task?view=vs-2022) and can be run from user-defined targets. Better not break compatibility with those.",
              "createdAt": "2022-07-10T07:27:13Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.\n+        /// Anything other than \"enable\" changes nothing here.\n+        /// When it is set to \"enable\" then do not add the usings that\n+        /// this normally writes to the output file.\n+        /// This leverages the full power of what was added in .NET 6+\n+        /// called global usings of C# 10. Also it leverages the feature\n+        /// that existed for a long time in Visual Basic as well.\n+        /// </summary>\n+        public string ImplicitUsings { get; set; } = \"disable\";",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\"implicit\"",
              "createdAt": "2022-07-10T07:19:20Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3572,10 +3572,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n           Inputs=\"$(MSBuildAllProjects)\"\n           Outputs=\"$(AssemblyAttributesPath)\"\n           Condition=\"'@(AssemblyAttributes)' != '' and '$(GenerateAdditionalSources)' == 'true'\">\n+    <!-- A project can opt into implcit usings by setting AssemblyAttributesImplicitUsings to 'enable' or 'true'. -->",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should these be added into PublicAPI.Unshipped.txt, instead? To indicate that they haven't been in any release yet, and can be renamed or removed without breaking the compatibility policy.",
              "createdAt": "2022-07-10T07:21:33Z",
              "path": "src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt",
              "diffHunk": "@@ -2083,6 +2083,8 @@ Microsoft.Build.Tasks.WriteCodeFragment.AssemblyAttributes.get -> Microsoft.Buil\n Microsoft.Build.Tasks.WriteCodeFragment.AssemblyAttributes.set -> void\n Microsoft.Build.Tasks.WriteCodeFragment.Language.get -> string\n Microsoft.Build.Tasks.WriteCodeFragment.Language.set -> void\n+Microsoft.Build.Tasks.WriteCodeFragment.ImplicitUsings.get -> string\n+Microsoft.Build.Tasks.WriteCodeFragment.ImplicitUsings.set -> void",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "True, I made the change here temporarily to make CI pass.",
              "createdAt": "2022-07-10T07:40:30Z",
              "path": "src/Tasks/PublicAPI/net/PublicAPI.Shipped.txt",
              "diffHunk": "@@ -2083,6 +2083,8 @@ Microsoft.Build.Tasks.WriteCodeFragment.AssemblyAttributes.get -> Microsoft.Buil\n Microsoft.Build.Tasks.WriteCodeFragment.AssemblyAttributes.set -> void\n Microsoft.Build.Tasks.WriteCodeFragment.Language.get -> string\n Microsoft.Build.Tasks.WriteCodeFragment.Language.set -> void\n+Microsoft.Build.Tasks.WriteCodeFragment.ImplicitUsings.get -> string\n+Microsoft.Build.Tasks.WriteCodeFragment.ImplicitUsings.set -> void",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\"ImplicitUsings\", \"its\"",
              "createdAt": "2022-07-10T07:24:32Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Elsewhere you mentioned \"true\" as an alias of \"enable\".",
              "createdAt": "2022-07-10T07:25:43Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -44,6 +48,17 @@ public class WriteCodeFragment : TaskExtension\n         [Required]\n         public string Language { get; set; }\n \n+        /// <summary>\n+        /// If the projects have ImplictUsings set, then use it's value.\n+        /// Anything other than \"enable\" changes nothing here.",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This comparison should be case-insensitive to match MSBuild.",
              "createdAt": "2022-07-10T07:29:30Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is \"disable\" or \"false\")",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not including System makes sense to me, but don't we still need System.Reflection?",
              "createdAt": "2022-07-12T18:50:53Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is \"disable\" or \"false\")\n             {\n-                globalNamespace.Imports.Add(new CodeNamespaceImport(name));\n+                foreach (string name in NamespaceImports)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, because the .NET SDK does not implicitly set it yet (although I think it should).",
              "createdAt": "2022-07-12T19:01:36Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -170,9 +185,15 @@ private string GenerateCode(out string extension)\n             }\n \n             // For convenience, bring in the namespaces, where many assembly attributes lie\n-            foreach (string name in NamespaceImports)\n+            // This will be skipped for only a single situation:\n+            // - When Language is \"C#\" and sets ImplicitUsings to \"enable\".\n+            // Checking only ImplicitUsings is unknown if it works for Visual Basic.\n+            if (ImplicitUsings is \"disable\" or \"false\")\n             {\n-                globalNamespace.Imports.Add(new CodeNamespaceImport(name));\n+                foreach (string name in NamespaceImports)",
              "author": {
                "login": "AraHaan"
              }
            }
          ]
        }
      }
    ]
  }
}