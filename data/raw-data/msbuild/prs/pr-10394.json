{
  "number": 10394,
  "title": "Add BuildOM forward compatibility",
  "body": "Fixes #10349\r\n\r\n### Context\r\nThe OM unification work https://github.com/dotnet/msbuild/pull/10172 introduced backwards compatible unified OM (code compiled against old MSBuild binaries can be run against new MSBuild binaries), but it was not forward compatible (code compiled against new MSBuild binaries could not be run against old MSBuild binaries). This change is bridging such gap.\r\n\r\n### Changes Made\r\nAdding 'proxy' properties for those that have been pulled to base classes - so that the compiled code is not trying to reference base classes, that do not exist in the old version of MSBuild code.\r\n\r\n### Testing\r\nManual testing of x-compatibility of the OM.\r\n\r\n1. Add a binary (e.g. console app) with code that is using the OM and it's properties - e.g.:\r\n```csharp\r\n            Microsoft.Build.Graph.GraphBuildRequestData data =\r\n                new(\r\n                    projectFullPath: \"a/b/c\",\r\n                    globalProperties: new Dictionary<string, string>() { { \"a\", \"b\"} },\r\n                    targetsToBuild: new List<string>() { \"t1\", \"t2\"},\r\n                    hostServices: null);\r\n\r\n            Console.WriteLine(\"target names:\" + data.TargetNames.FirstOrDefault());\r\n```\r\n2. Build and run the code (just sanity check) - on the new version of MSBuild and old version of MSBuild\r\n3. Copy the created binary from the old version of MSBuild over to the output of new MSBuild (testing of backwards compatibility) and run\r\n4. Copy the created binary from the new version of MSBuild over to the output of old MSBuild (testing of forward compatibility) and run\r\n\r\n### Notes\r\nBig thanks to @rainersigwald and @dfederm for the detailed help and ideas during troubleshooting the problem\r\n",
  "state": "MERGED",
  "createdAt": "2024-07-17T13:07:19Z",
  "updatedAt": "2024-08-22T10:38:57Z",
  "closedAt": "2024-07-18T07:33:23Z",
  "mergedAt": "2024-07-18T07:33:23Z",
  "additions": 188,
  "deletions": 1,
  "changedFiles": 5,
  "headRefName": "bugfix/buildom-fwd-compat",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2264c4cc3a5e4daf99dbe988af5530d8dbdbd2f2",
          "message": "Add BuildOM fwd compatibility",
          "committedDate": "2024-07-17T12:58:51Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a59e65489c83b019ad78509aaf0a71879d6546b7",
          "message": "Add tests guarding the fwd compat",
          "committedDate": "2024-07-17T16:08:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Can you add some tests that use reflection to make sure these things continue to exist? The comment is good but a test expresses intent even more clearly IMO.\r\n\r\nTests added - populated with pre-refactoring set of properties and methods (for simplicity it doesn't verify method signatures, but simple signature change would be catched by ApiCompat. It'd need to be a case of multiple overloads, while some are moved to base - and in the pre-refactoring OM there were no overloads of the provided public methods)",
        "createdAt": "2024-07-17T16:10:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}