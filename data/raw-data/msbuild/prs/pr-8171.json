{
  "number": 8171,
  "title": "Fix vs tools path error when condition is false",
  "body": "Fixes #8167 and Fixes #8168\r\n\r\n### Context\r\nThe VS tools path \"directory does not exist\" error check did not take into account a condition on the import element. This resolves that issue.\r\n\r\n### Changes Made\r\nMove the condition check earlier and have it suppress the error.\r\n\r\n### Testing\r\nManual testing with repro from #8168.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-11-15T21:48:34Z",
  "updatedAt": "2022-12-08T03:30:44Z",
  "closedAt": "2022-12-08T03:30:44Z",
  "mergedAt": "2022-12-08T03:30:44Z",
  "additions": 77,
  "deletions": 9,
  "changedFiles": 3,
  "headRefName": "fix-vstoolspath-error",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e518c673ea6b7ce1e842e2ccdd95eb98cfba3f54",
          "message": "Fix vs tools path error when condition is false",
          "committedDate": "2022-11-15T21:47:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e6b9e9600003404d15970449ccdb53af4378592f",
          "message": "Make clearer",
          "committedDate": "2022-11-15T23:50:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "009a07f85d60321c15483b9d84abd72e53c1f313",
          "message": "Log error if any missing directory has a true condition",
          "committedDate": "2022-11-16T23:28:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0dbab6ea60d432cfba9048d85df1f55504f9eac9",
          "message": "Remove extra space",
          "committedDate": "2022-11-16T23:30:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55ad0aee451125e5d1b111e0f7bbd4a62bce629e",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into fix-vstoolspath-error",
          "committedDate": "2022-11-30T23:05:35Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "052c68ec471a004858f7e45643bf670bd144c609",
          "message": "Fix typo",
          "committedDate": "2022-11-30T23:59:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c0c7eba2fb08ba16b45b6704c85ab32b45aeb90",
          "message": "Progress on making a test",
          "committedDate": "2022-12-01T00:00:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5e47893b96c56d24dabf1d8a95b12978fcd5dc0",
          "message": "Finish test",
          "committedDate": "2022-12-02T22:05:04Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c10fba5ad0b31239f8d7725dd2148e83bcbfc15",
          "message": "Comments",
          "committedDate": "2022-12-05T23:07:25Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Was there no test coverage for these non-fallback scenarios before?",
              "createdAt": "2022-12-05T16:45:35Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I haven't checked for every one of these scenarios, but I checked for a few, and they weren't there. (Like my first attempt at introducing the error did pass CI but included undesirable behavior.)",
              "createdAt": "2022-12-05T19:14:42Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'll check a couple others now; if some are duplicates, that doesn't bother me too much.",
              "createdAt": "2022-12-05T19:15:35Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ok, so some of them are definitely duplicates of things tested elsewhere, and some are new. Some are also only relevant to constraining the error to the relevant scenario. Do you want me to try to figure out which we don't need, or are you ok with some extras?",
              "createdAt": "2022-12-05T19:56:52Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Some extras are fine, but be super clear in comments about what we're really testing here.",
              "createdAt": "2022-12-05T20:00:00Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comment to explain why VSToolsPath is special and worth testing explicitly here, please.",
              "createdAt": "2022-12-05T16:46:27Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"$(VSToolsPath)\", \"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'false'\"\"\", true };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Worth the same thing but with an exists check instead of just hardcoded false?",
              "createdAt": "2022-12-05T16:47:48Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -50,6 +50,62 @@ public void Dispose()\n             GC.Collect();\n         }\n \n+        [Theory]\n+        [MemberData(nameof(ImportLoadingScenarioTestData))]\n+        public void VerifyLoadingImportScenarios(string importParameter, bool shouldSucceed)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder existentDirectory = env.CreateFolder(createFolder: true);\n+                TransientTestFile realFile = env.CreateFile(existentDirectory, \"realFile.csproj\", @\"<Project> </Project>\");\n+                TransientTestFile projectFile = env.CreateFile(\"project.proj\", @$\"\n+<Project>\n+  <Import {importParameter.Replace(\"realFolder\", existentDirectory.Path)} />\n+\n+  <Target Name=\"\"MyTarget\"\">\n+    <Message Text=\"\"Target working!\"\" />\n+  </Target>\n+</Project>\n+\");\n+                bool result = false;\n+                try\n+                {\n+                    Project project = new(projectFile.Path);\n+                    MockLogger logger = new();\n+                    result = project.Build(logger);\n+                }\n+                catch (InvalidProjectFileException) { }\n+                result.ShouldBe(shouldSucceed);\n+            }\n+        }\n+\n+        public static IEnumerable<object[]> ImportLoadingScenarioTestData\n+        {\n+            get\n+            {\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"nonexistentDirectory\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'true'\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"projectThatDoesNotExist.csproj\")}\"\"\", false };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"Exists('{Path.Combine(\"realFolder\", \"realFile.csproj\")}')\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\" Condition=\"\"'true'\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"realFile.csproj\")}\"\"\", true };\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"realFolder\", \"*.*proj\")}\"\"\", true };\n+\n+                yield return new object[] { $@\"Project=\"\"{Path.Combine(\"$(VSToolsPath)\", \"nonexistentDirectory\", \"projectThatDoesNotExist.csproj\")}\"\" Condition=\"\"'false'\"\"\", true };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I have had to read this and the old version . . . too many times . . . to get to this understanding so I think a comment here would be helpful:\r\n\r\n```suggestion\r\n                // If the whole fallback folder doesn't exist, short-circuit and don't\r\n                // bother constructing an exact file path.\r\n                if (!_fallbackSearchPathsCache.DirectoryExists(extensionPathExpanded))\r\n```",
              "createdAt": "2022-12-05T16:53:02Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1651,15 +1652,17 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                 string extensionPathExpanded = _data.ExpandString(extensionPath);\n \n-                if (!_fallbackSearchPathsCache.DirectoryExists(extensionPathExpanded))\n+                var newExpandedCondition = importElement.Condition.Replace(extensionPropertyRefAsString, extensionPathExpanded, StringComparison.OrdinalIgnoreCase);\n+                if (!EvaluateConditionCollectingConditionedProperties(importElement, newExpandedCondition, ExpanderOptions.ExpandProperties, ParserOptions.AllowProperties,\n+                            _projectRootElementCache))\n                 {\n                     continue;\n                 }\n \n-                var newExpandedCondition = importElement.Condition.Replace(extensionPropertyRefAsString, extensionPathExpanded, StringComparison.OrdinalIgnoreCase);\n-                if (!EvaluateConditionCollectingConditionedProperties(importElement, newExpandedCondition, ExpanderOptions.ExpandProperties, ParserOptions.AllowProperties,\n-                            _projectRootElementCache))\n+                if (!_fallbackSearchPathsCache.DirectoryExists(extensionPathExpanded))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}