{
  "number": 9890,
  "title": "Instrumentation module for BuildCheck",
  "body": "Fixes #9629\r\n\r\n### Context\r\nWe need some timers and performance indicators for BuildCheck.\r\n\r\n- Added an opt in `--analyzerStats` option so it will report the time the BuildCheck infrastructure and individual analyzers performed.\r\n- Added timer to a few infrastructure points so we can know how they perform.\r\n- Currently they are just logged and then show on command line.\r\n![image](https://github.com/dotnet/msbuild/assets/10743736/6636b514-255d-4cff-a71c-a106add54453)\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2024-03-18T13:35:08Z",
  "updatedAt": "2024-04-15T18:57:05Z",
  "closedAt": "2024-04-15T18:57:05Z",
  "mergedAt": null,
  "additions": 109,
  "deletions": 21,
  "changedFiles": 11,
  "headRefName": "9629",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d145aaea5d957e4f053ab4605e69ae63f77ca33b",
          "message": "First draft on stats logger for Analyzers",
          "committedDate": "2024-03-22T14:33:23Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6403a9d44f9b9d2c0d43fbe68c5e1c3187bb4f4a",
          "message": "Made the messages a bit prettier",
          "committedDate": "2024-03-22T14:33:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94a8eae47fd6cbb8d72d230a4dcbf1985094b8cd",
          "message": "removed some extra comments",
          "committedDate": "2024-03-22T14:33:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf884cc52a123bff112f5e292cca23c7738d82ba",
          "message": " Renamed BuildCop to BuildCheck",
          "committedDate": "2024-03-22T14:51:18Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da3b69b4885431692652226db34813bddb3729a3",
          "message": "Combined infraStats and analyzerStats when logging info",
          "committedDate": "2024-04-08T15:07:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dabac28c7043cb1c2f9502cb2b8de8d6a45c38d4",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-09T16:27:44Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c90a3ad99db1e9e624434875cbc55321c9710732",
          "message": "Merge exp/build-analyzers into 9629",
          "committedDate": "2024-04-09T16:39:45Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Right now we only have time for `AnalyzerAcquisitionTime` which will be at 0 for now as we don't have analyzers to acquire. For folks working on BuildCheck, I'd love suggestions about where to add timers and performance indicators to, so we can have a more complete view on time.",
        "createdAt": "2024-03-18T17:37:30Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need to distinguish the infra and analyzers/checks tracing stats?\r\n\r\nBoth - infrastructure and checks - will run in main and worker nodes - so we'll need to transfer and merge both.\r\n\r\nWe can probably even just push them into the single dictionary (they can differ by prefix of the key e.g.) - that way we can have single message for transfer and single merging code",
              "createdAt": "2024-03-19T15:52:49Z",
              "path": "src/Framework/BuildCop/BuildCopEventArgs.cs",
              "diffHunk": "@@ -20,6 +20,8 @@ public sealed class BuildCopTracingEventArgs(Dictionary<string, TimeSpan> tracin\n     internal BuildCopTracingEventArgs() : this(new Dictionary<string, TimeSpan>())\n     { }\n \n+    internal bool isInfraTracing = false;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we unify the naming of the variable? :) ",
              "createdAt": "2024-03-28T09:27:09Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -12,12 +12,17 @@\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n-internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)\n+internal sealed class BuildCheckConnectorLogger(\n+    IBuildAnalysisLoggingContextFactory loggingContextFactory, \n+    IBuildCheckManager buildCheckManager,\n+    bool isStatsEnabled)\n     : ILogger\n {\n     public LoggerVerbosity Verbosity { get; set; }\n     public string? Parameters { get; set; }\n \n+    private bool _areStatsEnabled = isStatsEnabled;",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    private string BuildStatsTable(string title, Dictionary<string, TimeSpan> rowData)\r\n```",
              "createdAt": "2024-03-28T09:28:21Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -79,22 +91,47 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();\n \n-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);\n+            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);\n+\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+        string infraData = buildStatsTable(\"Infrastructure run times\", _statsInfra);\n+        loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+        string analyzerData = buildStatsTable(\"Analyzer run times\", _statsAnalyzers);\n+        loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+    }\n+\n+    private string buildStatsTable(string title, Dictionary<string, TimeSpan> rowData)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: ```suggestion\r\n        string headerSeparator = \"=============\";\r\n```\r\nDo we need this? ",
              "createdAt": "2024-03-28T09:28:51Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -79,22 +91,47 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();\n \n-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);\n+            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);\n+\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+        string infraData = buildStatsTable(\"Infrastructure run times\", _statsInfra);\n+        loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+        string analyzerData = buildStatsTable(\"Analyzer run times\", _statsAnalyzers);\n+        loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+    }\n+\n+    private string buildStatsTable(string title, Dictionary<string, TimeSpan> rowData)\n+    {\n+        string headerSeparator = $\"=============\";",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I was thinking of it as a visual barrier. As we don't have connection to the binlog yet this is the only place the analyzer stats will be displayed. This list can also have the potential to increase by a lot so I think that for now this header is a good separator. Definitely not forever though, since the final form of the instrumentation module will be shown on bonlog / binlog viewer.",
              "createdAt": "2024-04-09T16:27:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -79,22 +91,47 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();\n \n-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);\n+            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);\n+\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+        string infraData = buildStatsTable(\"Infrastructure run times\", _statsInfra);\n+        loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+        string analyzerData = buildStatsTable(\"Analyzer run times\", _statsAnalyzers);\n+        loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+    }\n+\n+    private string buildStatsTable(string title, Dictionary<string, TimeSpan> rowData)\n+    {\n+        string headerSeparator = $\"=============\";",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Thank you for the clarification! \r\n",
              "createdAt": "2024-04-11T09:57:30Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -79,22 +91,47 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsInfra = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext).ToLoggingContext();\n \n-        // TODO: tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats(), (span1, span2) => span1 + span2);\n+            _statsInfra.Merge(buildCheckManager.CreateBuildCheckInfraTracingStats(), (span1, span2) => span1 + span2);\n+\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+        string infraData = buildStatsTable(\"Infrastructure run times\", _statsInfra);\n+        loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+        string analyzerData = buildStatsTable(\"Analyzer run times\", _statsAnalyzers);\n+        loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+    }\n+\n+    private string buildStatsTable(string title, Dictionary<string, TimeSpan> rowData)\n+    {\n+        string headerSeparator = $\"=============\";",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a chance not to throw the exception here? \r\nJust to be on the safe side in case it is invoked, I do not think we should raise the exception. \r\n@JanKrivanek what do you think? ",
              "createdAt": "2024-03-28T09:31:26Z",
              "path": "src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs",
              "diffHunk": "@@ -47,4 +45,7 @@ public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventCo\n \n     public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)\n     { }\n+\n+    public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => throw new NotImplementedException();",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I changed to return an empty list, so it does not throw and not change to rest of the code to account for a null value.",
              "createdAt": "2024-04-09T16:29:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs",
              "diffHunk": "@@ -47,4 +45,7 @@ public void YieldProject(BuildCheckDataSource buildCheckDataSource, BuildEventCo\n \n     public void ResumeProject(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)\n     { }\n+\n+    public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats() => throw new NotImplementedException();",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "May I clarify why the switch is parameterized, what are the parameters of invocation? ",
              "createdAt": "2024-03-28T09:45:23Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -269,6 +270,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"analyze\", \"al\" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),\n+            new ParameterizedSwitchInfo(  new string[] { \"analyzeStats\", \"as\" },                ParameterizedSwitch.AnalyzeStats,               null,                           false,          null,                                  true,   false),",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I changed it to a prameterless switch. Honestly did not pay a lot of attention to that when adding the command line switch.",
              "createdAt": "2024-04-09T16:28:41Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -269,6 +270,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"analyze\", \"al\" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),\n+            new ParameterizedSwitchInfo(  new string[] { \"analyzeStats\", \"as\" },                ParameterizedSwitch.AnalyzeStats,               null,                           false,          null,                                  true,   false),",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The value \"infrastructureStat_\" used twice, please consider to share the duplicated value via const variables.",
              "createdAt": "2024-04-10T07:39:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -312,10 +312,19 @@ public void FinalizeProcessing(LoggingContext loggingContext)\n                 // We do not want to send tracing stats from in-proc node\n                 return;\n             }\n+            string infraStatPrefix = \"infrastructureStat_\";",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: There was a decision not to use the short alias: https://github.com/dotnet/msbuild/blob/25b5f75df908bf749b1283d76b37996c6a02bb67/src/MSBuild/CommandLineSwitches.cs\r\nJust wondering if we want to apply the decision here as well? @JanKrivanek what do you think? ",
              "createdAt": "2024-04-10T08:22:03Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -222,6 +223,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterlessSwitchInfo(  new string[] { \"filelogger8\", \"fl8\" },                     ParameterlessSwitch.FileLogger8,           null),\n             new ParameterlessSwitchInfo(  new string[] { \"filelogger9\", \"fl9\" },                     ParameterlessSwitch.FileLogger9,           null),\n             new ParameterlessSwitchInfo(  new string[] { \"distributedfilelogger\", \"dfl\" },           ParameterlessSwitch.DistributedFileLogger, null),\n+            new ParameterlessSwitchInfo(  new string[] { \"analyzeStats\", \"as\" },                     ParameterlessSwitch.AnalyzeStats,          null),",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should all of those be TimeSpans?",
              "createdAt": "2024-04-10T09:57:25Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -13,6 +13,11 @@ internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal long analyzerSetDataSourceTime;\n+    internal long newProjectAnalyzersTime;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Btw. as discussed here: https://github.com/dotnet/msbuild/pull/9853#discussion_r1529349458, the stats might rather be part of analysis, without an opt-in.\r\n\r\nThe opt-in migh be used to just flip the importance of the messages (default should be `MessageImportance.Low` - so that it's not part of console/file logs under default verbosity; the current opt-in can promote that to `MessageImportance.High` to make it visible in console even with the default verbosity)",
              "createdAt": "2024-04-11T09:23:00Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -80,22 +85,62 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        string infraStatPrefix = \"infrastructureStat_\";\n+\n+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();\n+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();\n+\n+        foreach (var stat in _statsAnalyzers)\n+        {\n+            if (stat.Key.StartsWith(infraStatPrefix))\n+            {\n+                string newKey = stat.Key.Replace(infraStatPrefix, string.Empty);\n+                infraStats[newKey] = stat.Value;\n+            }\n+            else\n+            {\n+                analyzerStats[stat.Key] = stat.Value;\n+            }\n+        }\n+\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For easy viewing and working with data I'd recommend some existing textual table format - e.g. csv or md table",
              "createdAt": "2024-04-11T09:29:39Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -80,22 +85,62 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n         }\n     }\n \n-    private readonly Dictionary<string, TimeSpan> _stats = new Dictionary<string, TimeSpan>();\n+    private readonly Dictionary<string, TimeSpan> _statsAnalyzers = new Dictionary<string, TimeSpan>();\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n \n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        if (_areStatsEnabled)\n+        {\n+            _statsAnalyzers.Merge(buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);\n+            LogAnalyzerStats(loggingContext);\n+        }\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        string infraStatPrefix = \"infrastructureStat_\";\n+\n+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();\n+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();\n+\n+        foreach (var stat in _statsAnalyzers)\n+        {\n+            if (stat.Key.StartsWith(infraStatPrefix))\n+            {\n+                string newKey = stat.Key.Replace(infraStatPrefix, string.Empty);\n+                infraStats[newKey] = stat.Value;\n+            }\n+            else\n+            {\n+                analyzerStats[stat.Key] = stat.Value;\n+            }\n+        }\n+\n+        loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+        string infraData = BuildStatsTable(\"Infrastructure run times\", infraStats);\n+        loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+        string analyzerData = BuildStatsTable(\"Analyzer run times\", analyzerStats);\n+        loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+    }\n+\n+    private string BuildStatsTable(string title, Dictionary<string, TimeSpan> rowData)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}