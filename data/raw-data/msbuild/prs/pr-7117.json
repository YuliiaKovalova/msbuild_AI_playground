{
  "number": 7117,
  "title": "Eliminate IDeepCloneable<T>",
  "body": "Fixes #6176\r\n\r\n### Context\r\n\r\nThe props and items sent to loggers as part of `ProjectStartedEventArgs` are passed in special collections holding snapshots of props/items that are created lazily when a logger starts enumerating them. These props/items are guaranteed to be deep copies of the real props/items such that no modifications that a logger may make don't propagate back.\r\n\r\n### Changes Made\r\n\r\nFor props, the collection holds tuples of prop name and evaluated value. Both are strings so the concept of deep copying is implicit (strings are immutable). Similarly, for items we return `TaskItem` instances created over the original item, which guarantees the deep-copy semantics (`TaskItems` holds a copy of the metadata and a few strings). Consequentially, there is no need to explicitly deep-copy the props/items before enumeration and the `IDeepCloneable<T>` interface becomes unused.\r\n\r\nAs an additional code cleanup, `ProjectPropertyInstanceEnumeratorProxy` and `ProjectItemInstanceEnumeratorProxy` can easily be replaced with the `Select` LINQ operation and are thus not needed.\r\n\r\nHere's a detailed analysis of the code that runs when enumerating props and items, without and with these changes:\r\n\r\n#### Props\r\nBefore: When a logger calls `GetEnumerator` `CopyOnReadEnumerable` creates a list and populates it with the results of calling `DeepClone` on the props. During enumeration the iterator in `ProjectPropertyInstanceEnumeratorProxy` extracts the `Name` and `EvaluatedValue` and returns them to the logger.\r\nAfter: When a logger calls `GetEnumerator` `CopyOnReadEnumerable` creates a list and populates it with [`Name`, `EvaluatedValue`] tuples, saving the intermediate step of cloning.\r\n\r\n#### Items\r\nBefore: When a logger calls `GetEnumerator` `CopyOnReadEnumerable` creates a list and populates it with the results of calling `DeepClone` on the items. During enumeration the iterator in `ProjectItemInstanceEnumeratorProxy` creates new instances of `TaskItem` and returns them to the logger.\r\nAfter: When a logger calls `GetEnumerator` `CopyOnReadEnumerable` creates a list and populates it with [`ItemType`, `TaskItem`] tuples, saving the intermediate step of cloning.\r\n\r\nSemantically the old and new behaviors are equivalent. A snapshot of prop/items is made at the point where `GetEnumerator` is called.\r\n\r\n### Testing\r\n\r\nExisting unit tests, some tests were modified.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-12-03T11:50:37Z",
  "updatedAt": "2021-12-10T09:23:28Z",
  "closedAt": "2021-12-10T09:23:28Z",
  "mergedAt": "2021-12-10T09:23:27Z",
  "additions": 58,
  "deletions": 240,
  "changedFiles": 11,
  "headRefName": "6176-optimize-corenumerable",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ec2958327bd4139ea91c7a28afecb11c33eb866c",
          "message": "Eliminate IDeepCloneable<T>",
          "committedDate": "2021-12-07T09:58:09Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb08dbd172493d5290de715c2e1270fb10caa6e1",
          "message": "Fix CopyOnReadEnumerable_Tests",
          "committedDate": "2021-12-07T09:58:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2869982d872a27446fada59784c4679ed0db3731",
          "message": "Keep original null behavior in ProjectStartedEventArgs",
          "committedDate": "2021-12-07T09:58:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb50e38d613265f55ead48cc0fbf10ba138c1218",
          "message": "Make CopyOnReadEnumerable take a selector for 100% semantic compatibility",
          "committedDate": "2021-12-07T09:58:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5abad986abd5b71b940b08a7418396fa9a96d78a",
          "message": "PR feedback: Array.Empty -> Enumerable.Empty",
          "committedDate": "2021-12-07T10:00:09Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "853ad8c07bb5daf568efde13d334d75329d1d550",
          "message": "Use Enumerable.TryGetNonEnumerated when targeting .NET 6",
          "committedDate": "2021-12-07T10:08:41Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5da9c7a2441919143a8b55ef94763837058515c",
          "message": "Fix bad merge",
          "committedDate": "2021-12-07T10:57:01Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Nice!",
        "createdAt": "2021-12-07T01:24:58Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this another case of using x => func(x) being faster than just func?",
              "createdAt": "2021-12-06T17:41:42Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -48,37 +56,21 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)\n         /// Returns an enumerator over the collection.\n         /// </summary>\n         /// <returns>The enumerator.</returns>\n-        public IEnumerator<T> GetEnumerator()\n+        public IEnumerator<TResult> GetEnumerator()\n         {\n-            List<T> list;\n+            List<TResult> list;\n             if (_backingEnumerable is ICollection backingCollection)\n             {\n-                list = new List<T>(backingCollection.Count);\n+                list = new List<TResult>(backingCollection.Count);\n             }\n             else\n             {\n-                list = new List<T>();\n+                list = new List<TResult>();\n             }\n \n-            bool isCloneable = false;\n-            bool checkForCloneable = true;\n             lock (_syncRoot)\n             {\n-                foreach (T item in _backingEnumerable)\n-                {\n-                    if (checkForCloneable)\n-                    {\n-                        if (item is IDeepCloneable<T>)\n-                        {\n-                            isCloneable = true;\n-                        }\n-\n-                        checkForCloneable = false;\n-                    }\n-\n-                    T copiedItem = isCloneable ? (item as IDeepCloneable<T>).DeepClone() : item;\n-                    list.Add(copiedItem);\n-                }\n+                list.AddRange(_backingEnumerable.Select(_selector));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Select takes a `Func<T, TResult>` so this won't allocate. The allocation usually was implicit at callsite when a method group was used.",
              "createdAt": "2021-12-07T03:22:59Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -48,37 +56,21 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)\n         /// Returns an enumerator over the collection.\n         /// </summary>\n         /// <returns>The enumerator.</returns>\n-        public IEnumerator<T> GetEnumerator()\n+        public IEnumerator<TResult> GetEnumerator()\n         {\n-            List<T> list;\n+            List<TResult> list;\n             if (_backingEnumerable is ICollection backingCollection)\n             {\n-                list = new List<T>(backingCollection.Count);\n+                list = new List<TResult>(backingCollection.Count);\n             }\n             else\n             {\n-                list = new List<T>();\n+                list = new List<TResult>();\n             }\n \n-            bool isCloneable = false;\n-            bool checkForCloneable = true;\n             lock (_syncRoot)\n             {\n-                foreach (T item in _backingEnumerable)\n-                {\n-                    if (checkForCloneable)\n-                    {\n-                        if (item is IDeepCloneable<T>)\n-                        {\n-                            isCloneable = true;\n-                        }\n-\n-                        checkForCloneable = false;\n-                    }\n-\n-                    T copiedItem = isCloneable ? (item as IDeepCloneable<T>).DeepClone() : item;\n-                    list.Add(copiedItem);\n-                }\n+                list.AddRange(_backingEnumerable.Select(_selector));",
              "author": {
                "login": "Therzok"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this use [TryGetNonEnumeratedCount](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.trygetnonenumeratedcount?view=net-6.0)?",
              "createdAt": "2021-12-07T03:20:55Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -46,13 +56,23 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)\n         /// Returns an enumerator over the collection.\n         /// </summary>\n         /// <returns>The enumerator.</returns>\n-        public IEnumerator<T> GetEnumerator()\n+        public IEnumerator<TResult> GetEnumerator()\n         {\n-            List<T> list;\n+            List<TResult> list;\n+            if (_backingEnumerable is ICollection backingCollection)\n+            {\n+                list = new List<TResult>(backingCollection.Count);",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "If there is net6.0 multi-targeting support.",
              "createdAt": "2021-12-07T03:22:01Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -46,13 +56,23 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)\n         /// Returns an enumerator over the collection.\n         /// </summary>\n         /// <returns>The enumerator.</returns>\n-        public IEnumerator<T> GetEnumerator()\n+        public IEnumerator<TResult> GetEnumerator()\n         {\n-            List<T> list;\n+            List<TResult> list;\n+            if (_backingEnumerable is ICollection backingCollection)\n+            {\n+                list = new List<TResult>(backingCollection.Count);",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Nice, I didn't know about this method, thank you. I've added an #ifdef to make it super easy to delete the old code when we remove Framework support in the future.",
              "createdAt": "2021-12-07T10:11:39Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -46,13 +56,23 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)\n         /// Returns an enumerator over the collection.\n         /// </summary>\n         /// <returns>The enumerator.</returns>\n-        public IEnumerator<T> GetEnumerator()\n+        public IEnumerator<TResult> GetEnumerator()\n         {\n-            List<T> list;\n+            List<TResult> list;\n+            if (_backingEnumerable is ICollection backingCollection)\n+            {\n+                list = new List<TResult>(backingCollection.Count);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Aside, for these internal classes, is the allocation of a lock object worth it? Locking on the object itself is very unlikely to cause a problem.",
              "createdAt": "2021-12-07T03:25:15Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -1,45 +1,53 @@\n \ufeff// Copyright (c) Microsoft. All rights reserved.\n // Licensed under the MIT license. See LICENSE file in the project root for full license information.\n \n+using System;\n using System.Collections;\n using System.Collections.Generic;\n+using System.Linq;\n using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.Collections\n {\n     /// <summary>\n-    /// A class which implements IEnumerable by creating an optionally-deep copy of the backing collection.\n+    /// A class which implements IEnumerable by creating a copy of the backing collection.\n     /// </summary>\n     /// <remarks>\n-    /// If the type contained in the collection implements IDeepCloneable then the copies will be deep clones instead\n-    /// of mere reference copies.\n     /// <see cref=\"GetEnumerator()\"/> is thread safe for concurrent access.\n     /// </remarks>\n-    /// <typeparam name=\"T\">The type contained in the backing collection.</typeparam>\n-    internal class CopyOnReadEnumerable<T> : IEnumerable<T>\n+    /// <typeparam name=\"TSource\">The type contained in the backing collection.</typeparam>\n+    /// <typeparam name=\"TResult\">The type of items being enumerated.</typeparam>\n+    internal class CopyOnReadEnumerable<TSource, TResult> : IEnumerable<TResult>\n     {\n         /// <summary>\n         /// The backing collection.\n         /// </summary>\n-        private readonly IEnumerable<T> _backingEnumerable;\n+        private readonly IEnumerable<TSource> _backingEnumerable;\n \n         /// <summary>\n         /// The object used to synchronize access for copying.\n         /// </summary>\n         private readonly object _syncRoot;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Oh never mind, I see it's passed in.",
              "createdAt": "2021-12-07T03:25:31Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -1,45 +1,53 @@\n \ufeff// Copyright (c) Microsoft. All rights reserved.\n // Licensed under the MIT license. See LICENSE file in the project root for full license information.\n \n+using System;\n using System.Collections;\n using System.Collections.Generic;\n+using System.Linq;\n using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.Collections\n {\n     /// <summary>\n-    /// A class which implements IEnumerable by creating an optionally-deep copy of the backing collection.\n+    /// A class which implements IEnumerable by creating a copy of the backing collection.\n     /// </summary>\n     /// <remarks>\n-    /// If the type contained in the collection implements IDeepCloneable then the copies will be deep clones instead\n-    /// of mere reference copies.\n     /// <see cref=\"GetEnumerator()\"/> is thread safe for concurrent access.\n     /// </remarks>\n-    /// <typeparam name=\"T\">The type contained in the backing collection.</typeparam>\n-    internal class CopyOnReadEnumerable<T> : IEnumerable<T>\n+    /// <typeparam name=\"TSource\">The type contained in the backing collection.</typeparam>\n+    /// <typeparam name=\"TResult\">The type of items being enumerated.</typeparam>\n+    internal class CopyOnReadEnumerable<TSource, TResult> : IEnumerable<TResult>\n     {\n         /// <summary>\n         /// The backing collection.\n         /// </summary>\n-        private readonly IEnumerable<T> _backingEnumerable;\n+        private readonly IEnumerable<TSource> _backingEnumerable;\n \n         /// <summary>\n         /// The object used to synchronize access for copying.\n         /// </summary>\n         private readonly object _syncRoot;",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Enumerable.Empty could be used here instead.",
              "createdAt": "2021-12-07T03:26:50Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -89,8 +89,8 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss\n                 var propertyEnumerable = projectProperties?.GetCopyOnReadEnumerable();\n                 var itemsEnumerable = projectItems?.GetCopyOnReadEnumerable();\n \n-                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue));\n-                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item)));\n+                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue)) ?? Array.Empty<DictionaryEntry>();\n+                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Array.Empty<DictionaryEntry>();",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Done, thank you.",
              "createdAt": "2021-12-07T10:09:00Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -89,8 +89,8 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss\n                 var propertyEnumerable = projectProperties?.GetCopyOnReadEnumerable();\n                 var itemsEnumerable = projectItems?.GetCopyOnReadEnumerable();\n \n-                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue));\n-                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item)));\n+                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue)) ?? Array.Empty<DictionaryEntry>();\n+                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Array.Empty<DictionaryEntry>();",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}