{
  "number": 9931,
  "title": "[release/vs17.0] Onboard 1es templates ",
  "body": "### Context\r\nApply 1es templates, update arcade for the servicing branch and disable opt prof steps.\r\n\r\nOpt profs steps were commented in this file:\r\n[.vsts-dotnet.yml](https://github.com/YuliiaKovalova/msbuild/blob/dev/ykovalova/onboard_1es_vs17.0/.vsts-dotnet.yml)\r\nin order to spot the affected sections, search for \"# OptProf is not needed because this packaged will not be serviced in VS.\" comment (~lines 113-119 and 152-194)\r\nIt was agreed to do that because the optimized bits are used for VS insertion only and no servicing is planned for vs17.0.\r\nRun the internal pipeline with **SkipApplyOptimizationData=true**.\r\n\r\n### Test run\r\nhttps://tfsprodwus2su6.visualstudio.com/A011b8bdf-6d56-4f87-be0d-0092136884d9/DevDiv/_build/results?buildId=9309849&view=results",
  "state": "MERGED",
  "createdAt": "2024-03-27T10:09:16Z",
  "updatedAt": "2024-03-28T06:00:46Z",
  "closedAt": "2024-03-27T21:44:17Z",
  "mergedAt": "2024-03-27T21:44:17Z",
  "additions": 2780,
  "deletions": 1673,
  "changedFiles": 71,
  "headRefName": "dev/ykovalova/onboard_1es_vs17.0",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ed754373a0c100b04216016804e5603d74dd0356",
          "message": "update arcade",
          "committedDate": "2024-03-27T10:02:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "886bc9dd7c043ce68efc29b1e9cc15923927a5d9",
          "message": "onboard 1es tempaltes + disable optprof",
          "committedDate": "2024-03-27T10:04:38Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6ed2d741de794ea7180468dce5731b61e8689c5",
          "message": "bump MicrosoftNETTestSdkVersion",
          "committedDate": "2024-03-27T10:26:32Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "35b432802413df8ff6781f6fc38f439e9d6d7713",
          "message": "NoWarn NETSDK1182",
          "committedDate": "2024-03-27T11:09:43Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6ebd363be492fe203367ecbfd3012f71cfad4f0",
          "message": "Update comment\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-03-27T20:05:32Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abbf62d2148927663eadf7da5fc08ebda0b24eb7",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-03-27T20:05:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-03-27T10:09:49Z",
        "author": {
          "login": "dotnet-policy-service"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Where is this used? \r\nDoes it need update in Version.Details.xml as well?",
              "createdAt": "2024-03-27T11:07:04Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -32,11 +33,12 @@\n     <!-- DotNetCliVersion MUST match the dotnet version in global.json.\n          Otherwise, this version of dotnet will not be installed and the build will error out. -->\n     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\\global.json')), '\"dotnet\": \"([^\"]*)\"').Groups.get_Item(1))</DotNetCliVersion>\n-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21460.7</MicrosoftDotNetXUnitExtensionsVersion>\n+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.24176.9</MicrosoftDotNetXUnitExtensionsVersion>\n     <MicrosoftCodeAnalysisBannedApiAnalyzersVersion>3.3.2</MicrosoftCodeAnalysisBannedApiAnalyzersVersion>\n     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>\n     <MicrosoftNetCompilersToolsetVersion>4.0.0-5.21469.2</MicrosoftNetCompilersToolsetVersion>\n     <NuGetBuildTasksVersion>6.0.0-preview.4.243</NuGetBuildTasksVersion>\n+    <MicrosoftNETTestSdkVersion>17.0.3-release-20230412-05</MicrosoftNETTestSdkVersion>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The version is provided by arcade and used for test runs. Is references Newtonsoft.Json 9.0.1 that we can't utilize anymore.\r\nI don't think we need to make any changes in Version.Details.xml, do we @rainersigwald ?",
              "createdAt": "2024-03-27T11:30:51Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -32,11 +33,12 @@\n     <!-- DotNetCliVersion MUST match the dotnet version in global.json.\n          Otherwise, this version of dotnet will not be installed and the build will error out. -->\n     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\\global.json')), '\"dotnet\": \"([^\"]*)\"').Groups.get_Item(1))</DotNetCliVersion>\n-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21460.7</MicrosoftDotNetXUnitExtensionsVersion>\n+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.24176.9</MicrosoftDotNetXUnitExtensionsVersion>\n     <MicrosoftCodeAnalysisBannedApiAnalyzersVersion>3.3.2</MicrosoftCodeAnalysisBannedApiAnalyzersVersion>\n     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>\n     <MicrosoftNetCompilersToolsetVersion>4.0.0-5.21469.2</MicrosoftNetCompilersToolsetVersion>\n     <NuGetBuildTasksVersion>6.0.0-preview.4.243</NuGetBuildTasksVersion>\n+    <MicrosoftNETTestSdkVersion>17.0.3-release-20230412-05</MicrosoftNETTestSdkVersion>",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Oh I see - then it's all good",
              "createdAt": "2024-03-27T12:10:35Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -32,11 +33,12 @@\n     <!-- DotNetCliVersion MUST match the dotnet version in global.json.\n          Otherwise, this version of dotnet will not be installed and the build will error out. -->\n     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\\global.json')), '\"dotnet\": \"([^\"]*)\"').Groups.get_Item(1))</DotNetCliVersion>\n-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21460.7</MicrosoftDotNetXUnitExtensionsVersion>\n+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.24176.9</MicrosoftDotNetXUnitExtensionsVersion>\n     <MicrosoftCodeAnalysisBannedApiAnalyzersVersion>3.3.2</MicrosoftCodeAnalysisBannedApiAnalyzersVersion>\n     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>\n     <MicrosoftNetCompilersToolsetVersion>4.0.0-5.21469.2</MicrosoftNetCompilersToolsetVersion>\n     <NuGetBuildTasksVersion>6.0.0-preview.4.243</NuGetBuildTasksVersion>\n+    <MicrosoftNETTestSdkVersion>17.0.3-release-20230412-05</MicrosoftNETTestSdkVersion>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This used to be conditioned a bit: https://github.com/dotnet/msbuild/pull/9931/commits/886bc9dd7c043ce68efc29b1e9cc15923927a5d9#diff-4421f08c144fc5d2728f4c77ec102322d6c32e9213b3d7f97664aa1164304856L259\r\n\r\nDo we want all checks now to run even as part of PR and on publicly visible builds? Wouldn't that be a possible security concern? (revealing our checks and findings before addressing them)",
              "createdAt": "2024-03-27T11:17:02Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -37,231 +37,274 @@ variables:\n   - name: _DotNetValidationArtifactsCategory\n     value: .NETCoreValidation\n \n-stages:\n-- stage: build\n-  displayName: Build\n+resources:\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n \n-  jobs:\n-  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # should track next-release's active dev branch\n-    - template: /eng/common/templates/job/onelocbuild.yml\n-      parameters:\n-        LclSource: lclFilesfromPackage\n-        LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n-        MirrorRepo: 'msbuild'\n-        MirrorBranch: 'main' # should match condition above\n-\n-  - job: Windows_NT\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    featureFlags:\n+      autoBaseline: true\n     pool:\n-      name: VSEngSS-MicroBuild2019-1ES\n-      demands:\n-      - agent.os -equals Windows_NT\n-\n-    timeoutInMinutes: 180\n-\n-    variables:\n-    - group: DotNet-Blob-Feed\n-    - group: DotNet-Symbol-Publish\n-    - group: Publish-Build-Assets\n-    - name: TeamName\n-      value: MSBuild\n-    - name: VisualStudio.MajorVersion\n-      value: 17\n-    - name: VisualStudio.ChannelName\n-      value: 'int.d17.0'\n-    - name: VisualStudio.DropName\n-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n-\n-    steps:\n-    - task: NuGetToolInstaller@0\n-      inputs:\n-        versionSpec: '4.9.2'\n-\n-    - task: NuGetCommand@2\n-      displayName: Restore internal tools\n-      inputs:\n-        command: restore\n-        feedsToUse: config\n-        restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n-        nugetConfigPath: 'NuGet.config'\n-        restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n-\n-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n-      inputs:\n-        signType: $(SignType)\n-        zipSources: false\n-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n-\n-    - task: MicroBuildOptProfPlugin@6\n-      inputs:\n-        ProfilingInputsDropName: '$(VisualStudio.DropName)'\n-        ShouldSkipOptimize: true\n-        AccessToken: '$(System.AccessToken)'\n-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n-      displayName: 'Install OptProf Plugin'\n-\n-    # Required by MicroBuildBuildVSBootstrapper\n-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1\n-      inputs:\n-        dropName: $(VisualStudio.DropName)\n-\n-    - script: eng/CIBuild.cmd\n-                -configuration $(BuildConfiguration)\n-                -officialBuildId $(Build.BuildNumber)\n-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n-                /p:RepositoryName=$(Build.Repository.Name)\n-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n-                /p:VisualStudioDropAccessToken=$(System.AccessToken)\n-                /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                /p:DotNetSignType=$(SignType)\n-                /p:DotNetPublishToBlobFeed=true\n-                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n-                /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n-                /p:PublishToSymbolServer=true\n-                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n-                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n-                /p:TeamName=MSBuild\n-                /p:DotNetPublishUsingPipelines=true\n-                /p:VisualStudioIbcDrop=$(OptProfDrop)\n+      name: VSEngSS-MicroBuild2022-1ES\n+      os: windows\n+    sdl:\n+      # We generate SBOM ourselves, so don't need steps injected by 1ES.\n+      sbom:\n+        enabled: false\n+\n+    stages:\n+    - stage: build\n       displayName: Build\n-      condition: succeeded()\n-\n-    # Publish OptProf configuration files\n-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0\n-      inputs:\n-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n-        sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n-        toLowerCase: false\n-        usePat: true\n-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n-      condition: succeeded()\n-\n-    # Build VS bootstrapper\n-    # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2\n-      inputs:\n-        vsMajorVersion: $(VisualStudio.MajorVersion)\n-        channelName: $(VisualStudio.ChannelName)\n-        manifests: $(VisualStudio.SetupManifestList)\n-        outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-      displayName: 'OptProf - Build VS bootstrapper'\n-      condition: succeeded()\n-\n-    # Publish run settings\n-    - task: PowerShell@2\n-      inputs:\n-        filePath: eng\\common\\sdk-task.ps1\n-        arguments: -configuration $(BuildConfiguration)\n-                  -task VisualStudio.BuildIbcTrainingSettings\n-                  /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n-      displayName: 'OptProf - Build IBC training settings'\n-      condition: succeeded()\n-\n-    # Publish bootstrapper info\n-    - task: PublishBuildArtifacts@1\n-      inputs:\n-        PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n-        ArtifactName: MicroBuildOutputs\n-        ArtifactType: Container\n-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n-      condition: succeeded()\n-\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: logs'\n-      inputs:\n-        PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n-        ArtifactName: logs\n-      condition: succeededOrFailed()\n-\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: bin'\n-      inputs:\n-        path: 'artifacts\\bin'\n-        artifactName: bin\n-      condition: succeededOrFailed()\n-\n-    # Publishes setup VSIXes to a drop.\n-    # Note: The insertion tool looks for the display name of this task in the logs.\n-    - task: MicroBuildUploadVstsDropFolder@2\n-      displayName: Upload VSTS Drop\n-      inputs:\n-        DropName: $(VisualStudio.DropName)\n-        DropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-        AccessToken: '$(System.AccessToken)'\n-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n-      condition: succeeded()\n-\n-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: VSSetup'\n-      inputs:\n-        PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n-        ArtifactName: VSSetup\n-      condition: succeeded()\n-\n-    # Archive NuGet packages to DevOps.\n-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n-    # arcade templates depend on the name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: packages'\n-      inputs:\n-        PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n-        ArtifactName: PackageArtifacts\n-      condition: succeeded()\n-\n-    # Publish \"IntelliSense\" XSD files to their own artifact\n-    # so it can be consumed by the insertion-to-VS job\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: xsd'\n-      inputs:\n-        path: 'artifacts\\xsd'\n-        artifactName: xsd\n-      condition: succeeded()\n-\n-    # Publish Asset Manifests for Build Asset Registry job\n-    - task: PublishBuildArtifacts@1\n-      displayName: Publish Asset Manifests\n-      inputs:\n-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n-        ArtifactName: AssetManifests\n-      condition: succeeded()\n-\n-    # Tag the build at the very end when we know it's been successful.\n-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n-      displayName: Tag build as ready for optimization training\n-      inputs:\n-        tags: 'ready-for-training'\n-      condition: succeeded()\n-\n-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n-      displayName: Execute cleanup tasks\n-      condition: succeededOrFailed()\n-\n-  - template: /eng/common/templates/job/source-build.yml\n-    parameters:\n-      platform:\n-        name: 'Managed'\n-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'\n-\n-  - template: /eng/common/templates/job/publish-build-assets.yml\n-    parameters:\n-      enablePublishBuildArtifacts: true\n-      publishUsingPipelines: true\n-      dependsOn:\n-        - Windows_NT\n-        - Source_Build_Managed\n-      pool:\n-        vmImage: windows-latest\n-\n-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n-  - template: eng\\common\\templates\\post-build\\post-build.yml\n-    parameters:\n-      publishingInfraVersion: 3\n-      # Symbol validation is not entirely reliable as of yet, so should be turned off until\n-      # https://github.com/dotnet/arcade/issues/2871 is resolved.\n-      enableSymbolValidation: false\n-      enableSourceLinkValidation: false\n-      enableNugetValidation: false\n+\n+      jobs:\n+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:\n+        - template: /eng/common/templates-official/job/onelocbuild.yml@self\n+          parameters:\n+            LclSource: lclFilesfromPackage\n+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n+            MirrorRepo: 'msbuild'\n+            MirrorBranch: 'main' # should match condition above\n+\n+      - job: Windows_NT\n+        pool:\n+          name: VSEngSS-MicroBuild2022-1ES\n+          demands:\n+          - agent.os -equals Windows_NT\n+\n+        timeoutInMinutes: 180\n+\n+        variables:\n+        - group: DotNet-Blob-Feed\n+        - group: DotNet-Symbol-Publish\n+        - group: Publish-Build-Assets\n+        - name: TeamName\n+          value: MSBuild\n+        - name: VisualStudio.MajorVersion\n+          value: 17\n+        - name: VisualStudio.ChannelName\n+          value: 'int.d17.0'\n+        - name: VisualStudio.DropName\n+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+\n+        steps:\n+        - task: NuGetToolInstaller@1\n+          displayName: 'Install NuGet.exe'\n+\n+        - task: NuGetCommand@2\n+          displayName: Restore internal tools\n+          inputs:\n+            command: restore\n+            feedsToUse: config\n+            restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n+            nugetConfigPath: 'NuGet.config'\n+            restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n+\n+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n+          inputs:\n+            signType: $(SignType)\n+            zipSources: false\n+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # - task: MicroBuildOptProfPlugin@6\n+        #   inputs:\n+        #     ProfilingInputsDropName: '$(VisualStudio.DropName)'\n+        #     ShouldSkipOptimize: true\n+        #     AccessToken: '$(System.AccessToken)'\n+        #     feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n+        #   displayName: 'Install OptProf Plugin'\n+\n+        # Required by MicroBuildBuildVSBootstrapper\n+        - task: MicroBuildSwixPlugin@4\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+\n+        - script: eng/CIBuild.cmd\n+                    -configuration $(BuildConfiguration)\n+                    -officialBuildId $(Build.BuildNumber)\n+                    -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n+                    /p:RepositoryName=$(Build.Repository.Name)\n+                    /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n+                    /p:VisualStudioDropAccessToken=$(System.AccessToken)\n+                    /p:VisualStudioDropName=$(VisualStudio.DropName)\n+                    /p:DotNetSignType=$(SignType)\n+                    /p:DotNetPublishToBlobFeed=true\n+                    /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n+                    /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n+                    /p:PublishToSymbolServer=true\n+                    /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n+                    /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n+                    /p:TeamName=MSBuild\n+                    /p:DotNetPublishUsingPipelines=true\n+                    /p:VisualStudioIbcDrop=$(OptProfDrop)\n+                    /p:GenerateSbom=true\n+          displayName: Build\n+          condition: succeeded()\n+\n+        # Required by Microsoft policy\n+        - template: eng\\common\\templates-official\\steps\\generate-sbom.yml@self\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # Publish OptProf configuration files\n+        # - task: 1ES.PublishArtifactsDrop@1\n+        #   inputs:\n+        #     dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n+        #     buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n+        #     sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n+        #     toLowerCase: false\n+        #     usePat: true\n+        #   displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n+        #   condition: succeeded()\n+\n+        # Build VS bootstrapper\n+        # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        # - task: MicroBuildBuildVSBootstrapper@3\n+        #   inputs:\n+        #     vsMajorVersion: $(VisualStudio.MajorVersion)\n+        #     channelName: $(VisualStudio.ChannelName)\n+        #     manifests: $(VisualStudio.SetupManifestList)\n+        #     outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+        #     bootstrapperCoreVersion:\n+        #   displayName: 'OptProf - Build VS bootstrapper'\n+        #   condition: succeeded()\n+\n+        # Publish run settings\n+        # - task: PowerShell@2\n+        #   inputs:\n+        #     filePath: eng\\common\\sdk-task.ps1\n+        #     arguments: -configuration $(BuildConfiguration)\n+        #               -task VisualStudio.BuildIbcTrainingSettings\n+        #               /p:VisualStudioDropName=$(VisualStudio.DropName)\n+        #               /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        #               /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n+        #   displayName: 'OptProf - Build IBC training settings'\n+        #   condition: succeeded()\n+\n+        # Publish bootstrapper info\n+        # - task: 1ES.PublishBuildArtifacts@1\n+        #   inputs:\n+        #     PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n+        #     ArtifactName: MicroBuildOutputs\n+        #     ArtifactType: Container\n+        #   displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n+        #   condition: succeeded()\n+\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: logs'\n+          inputs:\n+            PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n+            ArtifactName: logs\n+          condition: succeededOrFailed()\n+\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: bin'\n+          inputs:\n+            path: 'artifacts\\bin'\n+            artifactName: bin\n+          condition: succeededOrFailed()\n+\n+        # Publishes setup VSIXes to a drop.\n+        # Note: The insertion tool looks for the display name of this task in the logs.\n+        - task: 1ES.MicroBuildVstsDrop@1\n+          displayName: Upload VSTS Drop\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+            dropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+            dropRetentionDays: '30' # extended by insertion + VS release\n+            accessToken: '$(System.AccessToken)'\n+            dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n+            vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n+          condition: succeeded()\n+\n+        # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: VSSetup'\n+          inputs:\n+            PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n+            ArtifactName: VSSetup\n+          condition: succeeded()\n+\n+        # Archive NuGet packages to DevOps.\n+        # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n+        # arcade templates depend on the name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: packages'\n+          inputs:\n+            PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n+            ArtifactName: PackageArtifacts\n+          condition: succeeded()\n+\n+        # Publish \"IntelliSense\" XSD files to their own artifact\n+        # so it can be consumed by the insertion-to-VS job\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: xsd'\n+          inputs:\n+            path: 'artifacts\\xsd'\n+            artifactName: xsd\n+          condition: succeeded()\n+\n+        # Publish Asset Manifests for Build Asset Registry job\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: Publish Asset Manifests\n+          inputs:\n+            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n+            ArtifactName: AssetManifests\n+          condition: succeeded()\n+\n+        # Tag the build at the very end when we know it's been successful.\n+        - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n+          displayName: Tag build as ready for optimization training\n+          inputs:\n+            tags: 'ready-for-training'\n+          condition: succeeded()\n+\n+        - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n+          displayName: Execute cleanup tasks\n+          condition: succeededOrFailed()\n+\n+      - template: /eng/common/templates-official/jobs/source-build.yml@self\n+        parameters:\n+          platforms:\n+            - name: Managed\n+              pool:\n+                name: AzurePipelines-EO\n+                image: AzurePipelinesUbuntu22.04compliantGPT\n+                os: linux\n+\n+      - template: /eng/common/templates-official/job/publish-build-assets.yml@self\n+        parameters:\n+          enablePublishBuildArtifacts: true\n+          publishUsingPipelines: true\n+          dependsOn:\n+            - Windows_NT\n+            - Source_Build_Managed\n+          pool:\n+            name: AzurePipelines-EO\n+            image: 1ESPT-Windows2022\n+            os: windows\n+\n+    - template: eng\\common\\templates-official\\post-build\\post-build.yml@self",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This pipeline is run internally only, for PRs we have a separate file https://github.com/YuliiaKovalova/msbuild/blob/dev/ykovalova/onboard_1es_vs17.0/.vsts-dotnet-ci.yml\r\nthat's why I was able to remove all \"pull request\" conditioning.",
              "createdAt": "2024-03-27T11:26:28Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -37,231 +37,274 @@ variables:\n   - name: _DotNetValidationArtifactsCategory\n     value: .NETCoreValidation\n \n-stages:\n-- stage: build\n-  displayName: Build\n+resources:\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n \n-  jobs:\n-  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # should track next-release's active dev branch\n-    - template: /eng/common/templates/job/onelocbuild.yml\n-      parameters:\n-        LclSource: lclFilesfromPackage\n-        LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n-        MirrorRepo: 'msbuild'\n-        MirrorBranch: 'main' # should match condition above\n-\n-  - job: Windows_NT\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    featureFlags:\n+      autoBaseline: true\n     pool:\n-      name: VSEngSS-MicroBuild2019-1ES\n-      demands:\n-      - agent.os -equals Windows_NT\n-\n-    timeoutInMinutes: 180\n-\n-    variables:\n-    - group: DotNet-Blob-Feed\n-    - group: DotNet-Symbol-Publish\n-    - group: Publish-Build-Assets\n-    - name: TeamName\n-      value: MSBuild\n-    - name: VisualStudio.MajorVersion\n-      value: 17\n-    - name: VisualStudio.ChannelName\n-      value: 'int.d17.0'\n-    - name: VisualStudio.DropName\n-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n-\n-    steps:\n-    - task: NuGetToolInstaller@0\n-      inputs:\n-        versionSpec: '4.9.2'\n-\n-    - task: NuGetCommand@2\n-      displayName: Restore internal tools\n-      inputs:\n-        command: restore\n-        feedsToUse: config\n-        restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n-        nugetConfigPath: 'NuGet.config'\n-        restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n-\n-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n-      inputs:\n-        signType: $(SignType)\n-        zipSources: false\n-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n-\n-    - task: MicroBuildOptProfPlugin@6\n-      inputs:\n-        ProfilingInputsDropName: '$(VisualStudio.DropName)'\n-        ShouldSkipOptimize: true\n-        AccessToken: '$(System.AccessToken)'\n-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n-      displayName: 'Install OptProf Plugin'\n-\n-    # Required by MicroBuildBuildVSBootstrapper\n-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1\n-      inputs:\n-        dropName: $(VisualStudio.DropName)\n-\n-    - script: eng/CIBuild.cmd\n-                -configuration $(BuildConfiguration)\n-                -officialBuildId $(Build.BuildNumber)\n-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n-                /p:RepositoryName=$(Build.Repository.Name)\n-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n-                /p:VisualStudioDropAccessToken=$(System.AccessToken)\n-                /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                /p:DotNetSignType=$(SignType)\n-                /p:DotNetPublishToBlobFeed=true\n-                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n-                /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n-                /p:PublishToSymbolServer=true\n-                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n-                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n-                /p:TeamName=MSBuild\n-                /p:DotNetPublishUsingPipelines=true\n-                /p:VisualStudioIbcDrop=$(OptProfDrop)\n+      name: VSEngSS-MicroBuild2022-1ES\n+      os: windows\n+    sdl:\n+      # We generate SBOM ourselves, so don't need steps injected by 1ES.\n+      sbom:\n+        enabled: false\n+\n+    stages:\n+    - stage: build\n       displayName: Build\n-      condition: succeeded()\n-\n-    # Publish OptProf configuration files\n-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0\n-      inputs:\n-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n-        sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n-        toLowerCase: false\n-        usePat: true\n-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n-      condition: succeeded()\n-\n-    # Build VS bootstrapper\n-    # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2\n-      inputs:\n-        vsMajorVersion: $(VisualStudio.MajorVersion)\n-        channelName: $(VisualStudio.ChannelName)\n-        manifests: $(VisualStudio.SetupManifestList)\n-        outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-      displayName: 'OptProf - Build VS bootstrapper'\n-      condition: succeeded()\n-\n-    # Publish run settings\n-    - task: PowerShell@2\n-      inputs:\n-        filePath: eng\\common\\sdk-task.ps1\n-        arguments: -configuration $(BuildConfiguration)\n-                  -task VisualStudio.BuildIbcTrainingSettings\n-                  /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n-      displayName: 'OptProf - Build IBC training settings'\n-      condition: succeeded()\n-\n-    # Publish bootstrapper info\n-    - task: PublishBuildArtifacts@1\n-      inputs:\n-        PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n-        ArtifactName: MicroBuildOutputs\n-        ArtifactType: Container\n-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n-      condition: succeeded()\n-\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: logs'\n-      inputs:\n-        PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n-        ArtifactName: logs\n-      condition: succeededOrFailed()\n-\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: bin'\n-      inputs:\n-        path: 'artifacts\\bin'\n-        artifactName: bin\n-      condition: succeededOrFailed()\n-\n-    # Publishes setup VSIXes to a drop.\n-    # Note: The insertion tool looks for the display name of this task in the logs.\n-    - task: MicroBuildUploadVstsDropFolder@2\n-      displayName: Upload VSTS Drop\n-      inputs:\n-        DropName: $(VisualStudio.DropName)\n-        DropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-        AccessToken: '$(System.AccessToken)'\n-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n-      condition: succeeded()\n-\n-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: VSSetup'\n-      inputs:\n-        PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n-        ArtifactName: VSSetup\n-      condition: succeeded()\n-\n-    # Archive NuGet packages to DevOps.\n-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n-    # arcade templates depend on the name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: packages'\n-      inputs:\n-        PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n-        ArtifactName: PackageArtifacts\n-      condition: succeeded()\n-\n-    # Publish \"IntelliSense\" XSD files to their own artifact\n-    # so it can be consumed by the insertion-to-VS job\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: xsd'\n-      inputs:\n-        path: 'artifacts\\xsd'\n-        artifactName: xsd\n-      condition: succeeded()\n-\n-    # Publish Asset Manifests for Build Asset Registry job\n-    - task: PublishBuildArtifacts@1\n-      displayName: Publish Asset Manifests\n-      inputs:\n-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n-        ArtifactName: AssetManifests\n-      condition: succeeded()\n-\n-    # Tag the build at the very end when we know it's been successful.\n-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n-      displayName: Tag build as ready for optimization training\n-      inputs:\n-        tags: 'ready-for-training'\n-      condition: succeeded()\n-\n-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n-      displayName: Execute cleanup tasks\n-      condition: succeededOrFailed()\n-\n-  - template: /eng/common/templates/job/source-build.yml\n-    parameters:\n-      platform:\n-        name: 'Managed'\n-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'\n-\n-  - template: /eng/common/templates/job/publish-build-assets.yml\n-    parameters:\n-      enablePublishBuildArtifacts: true\n-      publishUsingPipelines: true\n-      dependsOn:\n-        - Windows_NT\n-        - Source_Build_Managed\n-      pool:\n-        vmImage: windows-latest\n-\n-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n-  - template: eng\\common\\templates\\post-build\\post-build.yml\n-    parameters:\n-      publishingInfraVersion: 3\n-      # Symbol validation is not entirely reliable as of yet, so should be turned off until\n-      # https://github.com/dotnet/arcade/issues/2871 is resolved.\n-      enableSymbolValidation: false\n-      enableSourceLinkValidation: false\n-      enableNugetValidation: false\n+\n+      jobs:\n+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:\n+        - template: /eng/common/templates-official/job/onelocbuild.yml@self\n+          parameters:\n+            LclSource: lclFilesfromPackage\n+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n+            MirrorRepo: 'msbuild'\n+            MirrorBranch: 'main' # should match condition above\n+\n+      - job: Windows_NT\n+        pool:\n+          name: VSEngSS-MicroBuild2022-1ES\n+          demands:\n+          - agent.os -equals Windows_NT\n+\n+        timeoutInMinutes: 180\n+\n+        variables:\n+        - group: DotNet-Blob-Feed\n+        - group: DotNet-Symbol-Publish\n+        - group: Publish-Build-Assets\n+        - name: TeamName\n+          value: MSBuild\n+        - name: VisualStudio.MajorVersion\n+          value: 17\n+        - name: VisualStudio.ChannelName\n+          value: 'int.d17.0'\n+        - name: VisualStudio.DropName\n+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+\n+        steps:\n+        - task: NuGetToolInstaller@1\n+          displayName: 'Install NuGet.exe'\n+\n+        - task: NuGetCommand@2\n+          displayName: Restore internal tools\n+          inputs:\n+            command: restore\n+            feedsToUse: config\n+            restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n+            nugetConfigPath: 'NuGet.config'\n+            restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n+\n+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n+          inputs:\n+            signType: $(SignType)\n+            zipSources: false\n+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # - task: MicroBuildOptProfPlugin@6\n+        #   inputs:\n+        #     ProfilingInputsDropName: '$(VisualStudio.DropName)'\n+        #     ShouldSkipOptimize: true\n+        #     AccessToken: '$(System.AccessToken)'\n+        #     feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n+        #   displayName: 'Install OptProf Plugin'\n+\n+        # Required by MicroBuildBuildVSBootstrapper\n+        - task: MicroBuildSwixPlugin@4\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+\n+        - script: eng/CIBuild.cmd\n+                    -configuration $(BuildConfiguration)\n+                    -officialBuildId $(Build.BuildNumber)\n+                    -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n+                    /p:RepositoryName=$(Build.Repository.Name)\n+                    /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n+                    /p:VisualStudioDropAccessToken=$(System.AccessToken)\n+                    /p:VisualStudioDropName=$(VisualStudio.DropName)\n+                    /p:DotNetSignType=$(SignType)\n+                    /p:DotNetPublishToBlobFeed=true\n+                    /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n+                    /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n+                    /p:PublishToSymbolServer=true\n+                    /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n+                    /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n+                    /p:TeamName=MSBuild\n+                    /p:DotNetPublishUsingPipelines=true\n+                    /p:VisualStudioIbcDrop=$(OptProfDrop)\n+                    /p:GenerateSbom=true\n+          displayName: Build\n+          condition: succeeded()\n+\n+        # Required by Microsoft policy\n+        - template: eng\\common\\templates-official\\steps\\generate-sbom.yml@self\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # Publish OptProf configuration files\n+        # - task: 1ES.PublishArtifactsDrop@1\n+        #   inputs:\n+        #     dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n+        #     buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n+        #     sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n+        #     toLowerCase: false\n+        #     usePat: true\n+        #   displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n+        #   condition: succeeded()\n+\n+        # Build VS bootstrapper\n+        # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        # - task: MicroBuildBuildVSBootstrapper@3\n+        #   inputs:\n+        #     vsMajorVersion: $(VisualStudio.MajorVersion)\n+        #     channelName: $(VisualStudio.ChannelName)\n+        #     manifests: $(VisualStudio.SetupManifestList)\n+        #     outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+        #     bootstrapperCoreVersion:\n+        #   displayName: 'OptProf - Build VS bootstrapper'\n+        #   condition: succeeded()\n+\n+        # Publish run settings\n+        # - task: PowerShell@2\n+        #   inputs:\n+        #     filePath: eng\\common\\sdk-task.ps1\n+        #     arguments: -configuration $(BuildConfiguration)\n+        #               -task VisualStudio.BuildIbcTrainingSettings\n+        #               /p:VisualStudioDropName=$(VisualStudio.DropName)\n+        #               /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        #               /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n+        #   displayName: 'OptProf - Build IBC training settings'\n+        #   condition: succeeded()\n+\n+        # Publish bootstrapper info\n+        # - task: 1ES.PublishBuildArtifacts@1\n+        #   inputs:\n+        #     PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n+        #     ArtifactName: MicroBuildOutputs\n+        #     ArtifactType: Container\n+        #   displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n+        #   condition: succeeded()\n+\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: logs'\n+          inputs:\n+            PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n+            ArtifactName: logs\n+          condition: succeededOrFailed()\n+\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: bin'\n+          inputs:\n+            path: 'artifacts\\bin'\n+            artifactName: bin\n+          condition: succeededOrFailed()\n+\n+        # Publishes setup VSIXes to a drop.\n+        # Note: The insertion tool looks for the display name of this task in the logs.\n+        - task: 1ES.MicroBuildVstsDrop@1\n+          displayName: Upload VSTS Drop\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+            dropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+            dropRetentionDays: '30' # extended by insertion + VS release\n+            accessToken: '$(System.AccessToken)'\n+            dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n+            vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n+          condition: succeeded()\n+\n+        # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: VSSetup'\n+          inputs:\n+            PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n+            ArtifactName: VSSetup\n+          condition: succeeded()\n+\n+        # Archive NuGet packages to DevOps.\n+        # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n+        # arcade templates depend on the name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: packages'\n+          inputs:\n+            PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n+            ArtifactName: PackageArtifacts\n+          condition: succeeded()\n+\n+        # Publish \"IntelliSense\" XSD files to their own artifact\n+        # so it can be consumed by the insertion-to-VS job\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: xsd'\n+          inputs:\n+            path: 'artifacts\\xsd'\n+            artifactName: xsd\n+          condition: succeeded()\n+\n+        # Publish Asset Manifests for Build Asset Registry job\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: Publish Asset Manifests\n+          inputs:\n+            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n+            ArtifactName: AssetManifests\n+          condition: succeeded()\n+\n+        # Tag the build at the very end when we know it's been successful.\n+        - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n+          displayName: Tag build as ready for optimization training\n+          inputs:\n+            tags: 'ready-for-training'\n+          condition: succeeded()\n+\n+        - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n+          displayName: Execute cleanup tasks\n+          condition: succeededOrFailed()\n+\n+      - template: /eng/common/templates-official/jobs/source-build.yml@self\n+        parameters:\n+          platforms:\n+            - name: Managed\n+              pool:\n+                name: AzurePipelines-EO\n+                image: AzurePipelinesUbuntu22.04compliantGPT\n+                os: linux\n+\n+      - template: /eng/common/templates-official/job/publish-build-assets.yml@self\n+        parameters:\n+          enablePublishBuildArtifacts: true\n+          publishUsingPipelines: true\n+          dependsOn:\n+            - Windows_NT\n+            - Source_Build_Managed\n+          pool:\n+            name: AzurePipelines-EO\n+            image: 1ESPT-Windows2022\n+            os: windows\n+\n+    - template: eng\\common\\templates-official\\post-build\\post-build.yml@self",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Oh I see - makes sense!",
              "createdAt": "2024-03-27T12:07:31Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -37,231 +37,274 @@ variables:\n   - name: _DotNetValidationArtifactsCategory\n     value: .NETCoreValidation\n \n-stages:\n-- stage: build\n-  displayName: Build\n+resources:\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n \n-  jobs:\n-  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # should track next-release's active dev branch\n-    - template: /eng/common/templates/job/onelocbuild.yml\n-      parameters:\n-        LclSource: lclFilesfromPackage\n-        LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n-        MirrorRepo: 'msbuild'\n-        MirrorBranch: 'main' # should match condition above\n-\n-  - job: Windows_NT\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    featureFlags:\n+      autoBaseline: true\n     pool:\n-      name: VSEngSS-MicroBuild2019-1ES\n-      demands:\n-      - agent.os -equals Windows_NT\n-\n-    timeoutInMinutes: 180\n-\n-    variables:\n-    - group: DotNet-Blob-Feed\n-    - group: DotNet-Symbol-Publish\n-    - group: Publish-Build-Assets\n-    - name: TeamName\n-      value: MSBuild\n-    - name: VisualStudio.MajorVersion\n-      value: 17\n-    - name: VisualStudio.ChannelName\n-      value: 'int.d17.0'\n-    - name: VisualStudio.DropName\n-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n-\n-    steps:\n-    - task: NuGetToolInstaller@0\n-      inputs:\n-        versionSpec: '4.9.2'\n-\n-    - task: NuGetCommand@2\n-      displayName: Restore internal tools\n-      inputs:\n-        command: restore\n-        feedsToUse: config\n-        restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n-        nugetConfigPath: 'NuGet.config'\n-        restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n-\n-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n-      inputs:\n-        signType: $(SignType)\n-        zipSources: false\n-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n-\n-    - task: MicroBuildOptProfPlugin@6\n-      inputs:\n-        ProfilingInputsDropName: '$(VisualStudio.DropName)'\n-        ShouldSkipOptimize: true\n-        AccessToken: '$(System.AccessToken)'\n-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n-      displayName: 'Install OptProf Plugin'\n-\n-    # Required by MicroBuildBuildVSBootstrapper\n-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1\n-      inputs:\n-        dropName: $(VisualStudio.DropName)\n-\n-    - script: eng/CIBuild.cmd\n-                -configuration $(BuildConfiguration)\n-                -officialBuildId $(Build.BuildNumber)\n-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n-                /p:RepositoryName=$(Build.Repository.Name)\n-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n-                /p:VisualStudioDropAccessToken=$(System.AccessToken)\n-                /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                /p:DotNetSignType=$(SignType)\n-                /p:DotNetPublishToBlobFeed=true\n-                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n-                /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n-                /p:PublishToSymbolServer=true\n-                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n-                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n-                /p:TeamName=MSBuild\n-                /p:DotNetPublishUsingPipelines=true\n-                /p:VisualStudioIbcDrop=$(OptProfDrop)\n+      name: VSEngSS-MicroBuild2022-1ES\n+      os: windows\n+    sdl:\n+      # We generate SBOM ourselves, so don't need steps injected by 1ES.\n+      sbom:\n+        enabled: false\n+\n+    stages:\n+    - stage: build\n       displayName: Build\n-      condition: succeeded()\n-\n-    # Publish OptProf configuration files\n-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0\n-      inputs:\n-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n-        sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n-        toLowerCase: false\n-        usePat: true\n-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n-      condition: succeeded()\n-\n-    # Build VS bootstrapper\n-    # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2\n-      inputs:\n-        vsMajorVersion: $(VisualStudio.MajorVersion)\n-        channelName: $(VisualStudio.ChannelName)\n-        manifests: $(VisualStudio.SetupManifestList)\n-        outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-      displayName: 'OptProf - Build VS bootstrapper'\n-      condition: succeeded()\n-\n-    # Publish run settings\n-    - task: PowerShell@2\n-      inputs:\n-        filePath: eng\\common\\sdk-task.ps1\n-        arguments: -configuration $(BuildConfiguration)\n-                  -task VisualStudio.BuildIbcTrainingSettings\n-                  /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n-      displayName: 'OptProf - Build IBC training settings'\n-      condition: succeeded()\n-\n-    # Publish bootstrapper info\n-    - task: PublishBuildArtifacts@1\n-      inputs:\n-        PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n-        ArtifactName: MicroBuildOutputs\n-        ArtifactType: Container\n-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n-      condition: succeeded()\n-\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: logs'\n-      inputs:\n-        PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n-        ArtifactName: logs\n-      condition: succeededOrFailed()\n-\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: bin'\n-      inputs:\n-        path: 'artifacts\\bin'\n-        artifactName: bin\n-      condition: succeededOrFailed()\n-\n-    # Publishes setup VSIXes to a drop.\n-    # Note: The insertion tool looks for the display name of this task in the logs.\n-    - task: MicroBuildUploadVstsDropFolder@2\n-      displayName: Upload VSTS Drop\n-      inputs:\n-        DropName: $(VisualStudio.DropName)\n-        DropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-        AccessToken: '$(System.AccessToken)'\n-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n-      condition: succeeded()\n-\n-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: VSSetup'\n-      inputs:\n-        PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n-        ArtifactName: VSSetup\n-      condition: succeeded()\n-\n-    # Archive NuGet packages to DevOps.\n-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n-    # arcade templates depend on the name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: packages'\n-      inputs:\n-        PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n-        ArtifactName: PackageArtifacts\n-      condition: succeeded()\n-\n-    # Publish \"IntelliSense\" XSD files to their own artifact\n-    # so it can be consumed by the insertion-to-VS job\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: xsd'\n-      inputs:\n-        path: 'artifacts\\xsd'\n-        artifactName: xsd\n-      condition: succeeded()\n-\n-    # Publish Asset Manifests for Build Asset Registry job\n-    - task: PublishBuildArtifacts@1\n-      displayName: Publish Asset Manifests\n-      inputs:\n-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n-        ArtifactName: AssetManifests\n-      condition: succeeded()\n-\n-    # Tag the build at the very end when we know it's been successful.\n-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n-      displayName: Tag build as ready for optimization training\n-      inputs:\n-        tags: 'ready-for-training'\n-      condition: succeeded()\n-\n-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n-      displayName: Execute cleanup tasks\n-      condition: succeededOrFailed()\n-\n-  - template: /eng/common/templates/job/source-build.yml\n-    parameters:\n-      platform:\n-        name: 'Managed'\n-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'\n-\n-  - template: /eng/common/templates/job/publish-build-assets.yml\n-    parameters:\n-      enablePublishBuildArtifacts: true\n-      publishUsingPipelines: true\n-      dependsOn:\n-        - Windows_NT\n-        - Source_Build_Managed\n-      pool:\n-        vmImage: windows-latest\n-\n-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n-  - template: eng\\common\\templates\\post-build\\post-build.yml\n-    parameters:\n-      publishingInfraVersion: 3\n-      # Symbol validation is not entirely reliable as of yet, so should be turned off until\n-      # https://github.com/dotnet/arcade/issues/2871 is resolved.\n-      enableSymbolValidation: false\n-      enableSourceLinkValidation: false\n-      enableNugetValidation: false\n+\n+      jobs:\n+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:\n+        - template: /eng/common/templates-official/job/onelocbuild.yml@self\n+          parameters:\n+            LclSource: lclFilesfromPackage\n+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n+            MirrorRepo: 'msbuild'\n+            MirrorBranch: 'main' # should match condition above\n+\n+      - job: Windows_NT\n+        pool:\n+          name: VSEngSS-MicroBuild2022-1ES\n+          demands:\n+          - agent.os -equals Windows_NT\n+\n+        timeoutInMinutes: 180\n+\n+        variables:\n+        - group: DotNet-Blob-Feed\n+        - group: DotNet-Symbol-Publish\n+        - group: Publish-Build-Assets\n+        - name: TeamName\n+          value: MSBuild\n+        - name: VisualStudio.MajorVersion\n+          value: 17\n+        - name: VisualStudio.ChannelName\n+          value: 'int.d17.0'\n+        - name: VisualStudio.DropName\n+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+\n+        steps:\n+        - task: NuGetToolInstaller@1\n+          displayName: 'Install NuGet.exe'\n+\n+        - task: NuGetCommand@2\n+          displayName: Restore internal tools\n+          inputs:\n+            command: restore\n+            feedsToUse: config\n+            restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n+            nugetConfigPath: 'NuGet.config'\n+            restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n+\n+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n+          inputs:\n+            signType: $(SignType)\n+            zipSources: false\n+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # - task: MicroBuildOptProfPlugin@6\n+        #   inputs:\n+        #     ProfilingInputsDropName: '$(VisualStudio.DropName)'\n+        #     ShouldSkipOptimize: true\n+        #     AccessToken: '$(System.AccessToken)'\n+        #     feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n+        #   displayName: 'Install OptProf Plugin'\n+\n+        # Required by MicroBuildBuildVSBootstrapper\n+        - task: MicroBuildSwixPlugin@4\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+\n+        - script: eng/CIBuild.cmd\n+                    -configuration $(BuildConfiguration)\n+                    -officialBuildId $(Build.BuildNumber)\n+                    -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n+                    /p:RepositoryName=$(Build.Repository.Name)\n+                    /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n+                    /p:VisualStudioDropAccessToken=$(System.AccessToken)\n+                    /p:VisualStudioDropName=$(VisualStudio.DropName)\n+                    /p:DotNetSignType=$(SignType)\n+                    /p:DotNetPublishToBlobFeed=true\n+                    /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n+                    /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n+                    /p:PublishToSymbolServer=true\n+                    /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n+                    /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n+                    /p:TeamName=MSBuild\n+                    /p:DotNetPublishUsingPipelines=true\n+                    /p:VisualStudioIbcDrop=$(OptProfDrop)\n+                    /p:GenerateSbom=true\n+          displayName: Build\n+          condition: succeeded()\n+\n+        # Required by Microsoft policy\n+        - template: eng\\common\\templates-official\\steps\\generate-sbom.yml@self\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # Publish OptProf configuration files\n+        # - task: 1ES.PublishArtifactsDrop@1\n+        #   inputs:\n+        #     dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n+        #     buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n+        #     sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n+        #     toLowerCase: false\n+        #     usePat: true\n+        #   displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n+        #   condition: succeeded()\n+\n+        # Build VS bootstrapper\n+        # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        # - task: MicroBuildBuildVSBootstrapper@3\n+        #   inputs:\n+        #     vsMajorVersion: $(VisualStudio.MajorVersion)\n+        #     channelName: $(VisualStudio.ChannelName)\n+        #     manifests: $(VisualStudio.SetupManifestList)\n+        #     outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+        #     bootstrapperCoreVersion:\n+        #   displayName: 'OptProf - Build VS bootstrapper'\n+        #   condition: succeeded()\n+\n+        # Publish run settings\n+        # - task: PowerShell@2\n+        #   inputs:\n+        #     filePath: eng\\common\\sdk-task.ps1\n+        #     arguments: -configuration $(BuildConfiguration)\n+        #               -task VisualStudio.BuildIbcTrainingSettings\n+        #               /p:VisualStudioDropName=$(VisualStudio.DropName)\n+        #               /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n+        #               /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n+        #   displayName: 'OptProf - Build IBC training settings'\n+        #   condition: succeeded()\n+\n+        # Publish bootstrapper info\n+        # - task: 1ES.PublishBuildArtifacts@1\n+        #   inputs:\n+        #     PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n+        #     ArtifactName: MicroBuildOutputs\n+        #     ArtifactType: Container\n+        #   displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n+        #   condition: succeeded()\n+\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: logs'\n+          inputs:\n+            PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n+            ArtifactName: logs\n+          condition: succeededOrFailed()\n+\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: bin'\n+          inputs:\n+            path: 'artifacts\\bin'\n+            artifactName: bin\n+          condition: succeededOrFailed()\n+\n+        # Publishes setup VSIXes to a drop.\n+        # Note: The insertion tool looks for the display name of this task in the logs.\n+        - task: 1ES.MicroBuildVstsDrop@1\n+          displayName: Upload VSTS Drop\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+            dropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n+            dropRetentionDays: '30' # extended by insertion + VS release\n+            accessToken: '$(System.AccessToken)'\n+            dropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n+            vsDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n+          condition: succeeded()\n+\n+        # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: VSSetup'\n+          inputs:\n+            PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n+            ArtifactName: VSSetup\n+          condition: succeeded()\n+\n+        # Archive NuGet packages to DevOps.\n+        # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n+        # arcade templates depend on the name.\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: 'Publish Artifact: packages'\n+          inputs:\n+            PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n+            ArtifactName: PackageArtifacts\n+          condition: succeeded()\n+\n+        # Publish \"IntelliSense\" XSD files to their own artifact\n+        # so it can be consumed by the insertion-to-VS job\n+        - task: 1ES.PublishPipelineArtifact@1\n+          displayName: 'Publish Artifact: xsd'\n+          inputs:\n+            path: 'artifacts\\xsd'\n+            artifactName: xsd\n+          condition: succeeded()\n+\n+        # Publish Asset Manifests for Build Asset Registry job\n+        - task: 1ES.PublishBuildArtifacts@1\n+          displayName: Publish Asset Manifests\n+          inputs:\n+            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n+            ArtifactName: AssetManifests\n+          condition: succeeded()\n+\n+        # Tag the build at the very end when we know it's been successful.\n+        - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n+          displayName: Tag build as ready for optimization training\n+          inputs:\n+            tags: 'ready-for-training'\n+          condition: succeeded()\n+\n+        - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n+          displayName: Execute cleanup tasks\n+          condition: succeededOrFailed()\n+\n+      - template: /eng/common/templates-official/jobs/source-build.yml@self\n+        parameters:\n+          platforms:\n+            - name: Managed\n+              pool:\n+                name: AzurePipelines-EO\n+                image: AzurePipelinesUbuntu22.04compliantGPT\n+                os: linux\n+\n+      - template: /eng/common/templates-official/job/publish-build-assets.yml@self\n+        parameters:\n+          enablePublishBuildArtifacts: true\n+          publishUsingPipelines: true\n+          dependsOn:\n+            - Windows_NT\n+            - Source_Build_Managed\n+          pool:\n+            name: AzurePipelines-EO\n+            image: 1ESPT-Windows2022\n+            os: windows\n+\n+    - template: eng\\common\\templates-official\\post-build\\post-build.yml@self",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        # OptProf is not needed because the 17.0 branch will not be serviced in VS.\r\n```",
              "createdAt": "2024-03-27T17:28:06Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -37,231 +37,274 @@ variables:\n   - name: _DotNetValidationArtifactsCategory\n     value: .NETCoreValidation\n \n-stages:\n-- stage: build\n-  displayName: Build\n+resources:\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n \n-  jobs:\n-  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # should track next-release's active dev branch\n-    - template: /eng/common/templates/job/onelocbuild.yml\n-      parameters:\n-        LclSource: lclFilesfromPackage\n-        LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n-        MirrorRepo: 'msbuild'\n-        MirrorBranch: 'main' # should match condition above\n-\n-  - job: Windows_NT\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    featureFlags:\n+      autoBaseline: true\n     pool:\n-      name: VSEngSS-MicroBuild2019-1ES\n-      demands:\n-      - agent.os -equals Windows_NT\n-\n-    timeoutInMinutes: 180\n-\n-    variables:\n-    - group: DotNet-Blob-Feed\n-    - group: DotNet-Symbol-Publish\n-    - group: Publish-Build-Assets\n-    - name: TeamName\n-      value: MSBuild\n-    - name: VisualStudio.MajorVersion\n-      value: 17\n-    - name: VisualStudio.ChannelName\n-      value: 'int.d17.0'\n-    - name: VisualStudio.DropName\n-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n-\n-    steps:\n-    - task: NuGetToolInstaller@0\n-      inputs:\n-        versionSpec: '4.9.2'\n-\n-    - task: NuGetCommand@2\n-      displayName: Restore internal tools\n-      inputs:\n-        command: restore\n-        feedsToUse: config\n-        restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n-        nugetConfigPath: 'NuGet.config'\n-        restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n-\n-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n-      inputs:\n-        signType: $(SignType)\n-        zipSources: false\n-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n-\n-    - task: MicroBuildOptProfPlugin@6\n-      inputs:\n-        ProfilingInputsDropName: '$(VisualStudio.DropName)'\n-        ShouldSkipOptimize: true\n-        AccessToken: '$(System.AccessToken)'\n-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n-      displayName: 'Install OptProf Plugin'\n-\n-    # Required by MicroBuildBuildVSBootstrapper\n-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1\n-      inputs:\n-        dropName: $(VisualStudio.DropName)\n-\n-    - script: eng/CIBuild.cmd\n-                -configuration $(BuildConfiguration)\n-                -officialBuildId $(Build.BuildNumber)\n-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n-                /p:RepositoryName=$(Build.Repository.Name)\n-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n-                /p:VisualStudioDropAccessToken=$(System.AccessToken)\n-                /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                /p:DotNetSignType=$(SignType)\n-                /p:DotNetPublishToBlobFeed=true\n-                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n-                /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n-                /p:PublishToSymbolServer=true\n-                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n-                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n-                /p:TeamName=MSBuild\n-                /p:DotNetPublishUsingPipelines=true\n-                /p:VisualStudioIbcDrop=$(OptProfDrop)\n+      name: VSEngSS-MicroBuild2022-1ES\n+      os: windows\n+    sdl:\n+      # We generate SBOM ourselves, so don't need steps injected by 1ES.\n+      sbom:\n+        enabled: false\n+\n+    stages:\n+    - stage: build\n       displayName: Build\n-      condition: succeeded()\n-\n-    # Publish OptProf configuration files\n-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0\n-      inputs:\n-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n-        sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n-        toLowerCase: false\n-        usePat: true\n-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n-      condition: succeeded()\n-\n-    # Build VS bootstrapper\n-    # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2\n-      inputs:\n-        vsMajorVersion: $(VisualStudio.MajorVersion)\n-        channelName: $(VisualStudio.ChannelName)\n-        manifests: $(VisualStudio.SetupManifestList)\n-        outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-      displayName: 'OptProf - Build VS bootstrapper'\n-      condition: succeeded()\n-\n-    # Publish run settings\n-    - task: PowerShell@2\n-      inputs:\n-        filePath: eng\\common\\sdk-task.ps1\n-        arguments: -configuration $(BuildConfiguration)\n-                  -task VisualStudio.BuildIbcTrainingSettings\n-                  /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n-      displayName: 'OptProf - Build IBC training settings'\n-      condition: succeeded()\n-\n-    # Publish bootstrapper info\n-    - task: PublishBuildArtifacts@1\n-      inputs:\n-        PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n-        ArtifactName: MicroBuildOutputs\n-        ArtifactType: Container\n-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n-      condition: succeeded()\n-\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: logs'\n-      inputs:\n-        PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n-        ArtifactName: logs\n-      condition: succeededOrFailed()\n-\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: bin'\n-      inputs:\n-        path: 'artifacts\\bin'\n-        artifactName: bin\n-      condition: succeededOrFailed()\n-\n-    # Publishes setup VSIXes to a drop.\n-    # Note: The insertion tool looks for the display name of this task in the logs.\n-    - task: MicroBuildUploadVstsDropFolder@2\n-      displayName: Upload VSTS Drop\n-      inputs:\n-        DropName: $(VisualStudio.DropName)\n-        DropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-        AccessToken: '$(System.AccessToken)'\n-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n-      condition: succeeded()\n-\n-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: VSSetup'\n-      inputs:\n-        PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n-        ArtifactName: VSSetup\n-      condition: succeeded()\n-\n-    # Archive NuGet packages to DevOps.\n-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n-    # arcade templates depend on the name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: packages'\n-      inputs:\n-        PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n-        ArtifactName: PackageArtifacts\n-      condition: succeeded()\n-\n-    # Publish \"IntelliSense\" XSD files to their own artifact\n-    # so it can be consumed by the insertion-to-VS job\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: xsd'\n-      inputs:\n-        path: 'artifacts\\xsd'\n-        artifactName: xsd\n-      condition: succeeded()\n-\n-    # Publish Asset Manifests for Build Asset Registry job\n-    - task: PublishBuildArtifacts@1\n-      displayName: Publish Asset Manifests\n-      inputs:\n-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n-        ArtifactName: AssetManifests\n-      condition: succeeded()\n-\n-    # Tag the build at the very end when we know it's been successful.\n-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n-      displayName: Tag build as ready for optimization training\n-      inputs:\n-        tags: 'ready-for-training'\n-      condition: succeeded()\n-\n-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n-      displayName: Execute cleanup tasks\n-      condition: succeededOrFailed()\n-\n-  - template: /eng/common/templates/job/source-build.yml\n-    parameters:\n-      platform:\n-        name: 'Managed'\n-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'\n-\n-  - template: /eng/common/templates/job/publish-build-assets.yml\n-    parameters:\n-      enablePublishBuildArtifacts: true\n-      publishUsingPipelines: true\n-      dependsOn:\n-        - Windows_NT\n-        - Source_Build_Managed\n-      pool:\n-        vmImage: windows-latest\n-\n-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n-  - template: eng\\common\\templates\\post-build\\post-build.yml\n-    parameters:\n-      publishingInfraVersion: 3\n-      # Symbol validation is not entirely reliable as of yet, so should be turned off until\n-      # https://github.com/dotnet/arcade/issues/2871 is resolved.\n-      enableSymbolValidation: false\n-      enableSourceLinkValidation: false\n-      enableNugetValidation: false\n+\n+      jobs:\n+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:\n+        - template: /eng/common/templates-official/job/onelocbuild.yml@self\n+          parameters:\n+            LclSource: lclFilesfromPackage\n+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n+            MirrorRepo: 'msbuild'\n+            MirrorBranch: 'main' # should match condition above\n+\n+      - job: Windows_NT\n+        pool:\n+          name: VSEngSS-MicroBuild2022-1ES\n+          demands:\n+          - agent.os -equals Windows_NT\n+\n+        timeoutInMinutes: 180\n+\n+        variables:\n+        - group: DotNet-Blob-Feed\n+        - group: DotNet-Symbol-Publish\n+        - group: Publish-Build-Assets\n+        - name: TeamName\n+          value: MSBuild\n+        - name: VisualStudio.MajorVersion\n+          value: 17\n+        - name: VisualStudio.ChannelName\n+          value: 'int.d17.0'\n+        - name: VisualStudio.DropName\n+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+\n+        steps:\n+        - task: NuGetToolInstaller@1\n+          displayName: 'Install NuGet.exe'\n+\n+        - task: NuGetCommand@2\n+          displayName: Restore internal tools\n+          inputs:\n+            command: restore\n+            feedsToUse: config\n+            restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n+            nugetConfigPath: 'NuGet.config'\n+            restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n+\n+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n+          inputs:\n+            signType: $(SignType)\n+            zipSources: false\n+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        # OptProf is not needed because the 17.0 branch will not be serviced in VS.\r\n```",
              "createdAt": "2024-03-27T17:28:39Z",
              "path": ".vsts-dotnet.yml",
              "diffHunk": "@@ -37,231 +37,274 @@ variables:\n   - name: _DotNetValidationArtifactsCategory\n     value: .NETCoreValidation\n \n-stages:\n-- stage: build\n-  displayName: Build\n+resources:\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n \n-  jobs:\n-  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # should track next-release's active dev branch\n-    - template: /eng/common/templates/job/onelocbuild.yml\n-      parameters:\n-        LclSource: lclFilesfromPackage\n-        LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n-        MirrorRepo: 'msbuild'\n-        MirrorBranch: 'main' # should match condition above\n-\n-  - job: Windows_NT\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    featureFlags:\n+      autoBaseline: true\n     pool:\n-      name: VSEngSS-MicroBuild2019-1ES\n-      demands:\n-      - agent.os -equals Windows_NT\n-\n-    timeoutInMinutes: 180\n-\n-    variables:\n-    - group: DotNet-Blob-Feed\n-    - group: DotNet-Symbol-Publish\n-    - group: Publish-Build-Assets\n-    - name: TeamName\n-      value: MSBuild\n-    - name: VisualStudio.MajorVersion\n-      value: 17\n-    - name: VisualStudio.ChannelName\n-      value: 'int.d17.0'\n-    - name: VisualStudio.DropName\n-      value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n-\n-    steps:\n-    - task: NuGetToolInstaller@0\n-      inputs:\n-        versionSpec: '4.9.2'\n-\n-    - task: NuGetCommand@2\n-      displayName: Restore internal tools\n-      inputs:\n-        command: restore\n-        feedsToUse: config\n-        restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n-        nugetConfigPath: 'NuGet.config'\n-        restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n-\n-    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n-      inputs:\n-        signType: $(SignType)\n-        zipSources: false\n-      condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n-\n-    - task: MicroBuildOptProfPlugin@6\n-      inputs:\n-        ProfilingInputsDropName: '$(VisualStudio.DropName)'\n-        ShouldSkipOptimize: true\n-        AccessToken: '$(System.AccessToken)'\n-        feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n-      displayName: 'Install OptProf Plugin'\n-\n-    # Required by MicroBuildBuildVSBootstrapper\n-    - task: ms-vseng.MicroBuildTasks.32f78468-e895-4f47-962c-58a699361df8.MicroBuildSwixPlugin@1\n-      inputs:\n-        dropName: $(VisualStudio.DropName)\n-\n-    - script: eng/CIBuild.cmd\n-                -configuration $(BuildConfiguration)\n-                -officialBuildId $(Build.BuildNumber)\n-                -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n-                /p:RepositoryName=$(Build.Repository.Name)\n-                /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n-                /p:VisualStudioDropAccessToken=$(System.AccessToken)\n-                /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                /p:DotNetSignType=$(SignType)\n-                /p:DotNetPublishToBlobFeed=true\n-                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n-                /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n-                /p:PublishToSymbolServer=true\n-                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n-                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n-                /p:TeamName=MSBuild\n-                /p:DotNetPublishUsingPipelines=true\n-                /p:VisualStudioIbcDrop=$(OptProfDrop)\n+      name: VSEngSS-MicroBuild2022-1ES\n+      os: windows\n+    sdl:\n+      # We generate SBOM ourselves, so don't need steps injected by 1ES.\n+      sbom:\n+        enabled: false\n+\n+    stages:\n+    - stage: build\n       displayName: Build\n-      condition: succeeded()\n-\n-    # Publish OptProf configuration files\n-    - task: ms-vscs-artifact.build-tasks.artifactDropTask-1.artifactDropTask@0\n-      inputs:\n-        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'\n-        buildNumber: 'ProfilingInputs/DevDiv/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'\n-        sourcePath: '$(Build.SourcesDirectory)\\artifacts\\OptProf\\$(BuildConfiguration)\\Data'\n-        toLowerCase: false\n-        usePat: true\n-      displayName: 'OptProf - Publish to Artifact Services - ProfilingInputs'\n-      condition: succeeded()\n-\n-    # Build VS bootstrapper\n-    # Generates $(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-    - task: ms-vseng.MicroBuildTasks.0e9d0d4d-71ec-4e4e-ae40-db9896f1ae74.MicroBuildBuildVSBootstrapper@2\n-      inputs:\n-        vsMajorVersion: $(VisualStudio.MajorVersion)\n-        channelName: $(VisualStudio.ChannelName)\n-        manifests: $(VisualStudio.SetupManifestList)\n-        outputFolder: '$(Build.SourcesDirectory)\\artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-      displayName: 'OptProf - Build VS bootstrapper'\n-      condition: succeeded()\n-\n-    # Publish run settings\n-    - task: PowerShell@2\n-      inputs:\n-        filePath: eng\\common\\sdk-task.ps1\n-        arguments: -configuration $(BuildConfiguration)\n-                  -task VisualStudio.BuildIbcTrainingSettings\n-                  /p:VisualStudioDropName=$(VisualStudio.DropName)\n-                  /p:BootstrapperInfoPath=$(Build.StagingDirectory)\\MicroBuild\\Output\\BootstrapperInfo.json\n-                  /p:VisualStudioIbcTrainingSettingsPath=$(Build.SourcesDirectory)\\eng\\config\\OptProf.runsettings\n-      displayName: 'OptProf - Build IBC training settings'\n-      condition: succeeded()\n-\n-    # Publish bootstrapper info\n-    - task: PublishBuildArtifacts@1\n-      inputs:\n-        PathtoPublish: $(Build.StagingDirectory)\\MicroBuild\\Output\n-        ArtifactName: MicroBuildOutputs\n-        ArtifactType: Container\n-      displayName: 'OptProf - Publish Artifact: MicroBuildOutputs'\n-      condition: succeeded()\n-\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: logs'\n-      inputs:\n-        PathtoPublish: 'artifacts\\log\\$(BuildConfiguration)'\n-        ArtifactName: logs\n-      condition: succeededOrFailed()\n-\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: bin'\n-      inputs:\n-        path: 'artifacts\\bin'\n-        artifactName: bin\n-      condition: succeededOrFailed()\n-\n-    # Publishes setup VSIXes to a drop.\n-    # Note: The insertion tool looks for the display name of this task in the logs.\n-    - task: MicroBuildUploadVstsDropFolder@2\n-      displayName: Upload VSTS Drop\n-      inputs:\n-        DropName: $(VisualStudio.DropName)\n-        DropFolder: 'artifacts\\VSSetup\\$(BuildConfiguration)\\Insertion'\n-        AccessToken: '$(System.AccessToken)'\n-        DropServiceUri: 'https://devdiv.artifacts.visualstudio.com'\n-        VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'\n-      condition: succeeded()\n-\n-    # Publish an artifact that the RoslynInsertionTool is able to find by its name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: VSSetup'\n-      inputs:\n-        PathtoPublish: 'artifacts\\VSSetup\\$(BuildConfiguration)'\n-        ArtifactName: VSSetup\n-      condition: succeeded()\n-\n-    # Archive NuGet packages to DevOps.\n-    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the\n-    # arcade templates depend on the name.\n-    - task: PublishBuildArtifacts@1\n-      displayName: 'Publish Artifact: packages'\n-      inputs:\n-        PathtoPublish: 'artifacts\\packages\\$(BuildConfiguration)'\n-        ArtifactName: PackageArtifacts\n-      condition: succeeded()\n-\n-    # Publish \"IntelliSense\" XSD files to their own artifact\n-    # so it can be consumed by the insertion-to-VS job\n-    - task: PublishPipelineArtifact@1\n-      displayName: 'Publish Artifact: xsd'\n-      inputs:\n-        path: 'artifacts\\xsd'\n-        artifactName: xsd\n-      condition: succeeded()\n-\n-    # Publish Asset Manifests for Build Asset Registry job\n-    - task: PublishBuildArtifacts@1\n-      displayName: Publish Asset Manifests\n-      inputs:\n-        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'\n-        ArtifactName: AssetManifests\n-      condition: succeeded()\n-\n-    # Tag the build at the very end when we know it's been successful.\n-    - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0\n-      displayName: Tag build as ready for optimization training\n-      inputs:\n-        tags: 'ready-for-training'\n-      condition: succeeded()\n-\n-    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1\n-      displayName: Execute cleanup tasks\n-      condition: succeededOrFailed()\n-\n-  - template: /eng/common/templates/job/source-build.yml\n-    parameters:\n-      platform:\n-        name: 'Managed'\n-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'\n-\n-  - template: /eng/common/templates/job/publish-build-assets.yml\n-    parameters:\n-      enablePublishBuildArtifacts: true\n-      publishUsingPipelines: true\n-      dependsOn:\n-        - Windows_NT\n-        - Source_Build_Managed\n-      pool:\n-        vmImage: windows-latest\n-\n-- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n-  - template: eng\\common\\templates\\post-build\\post-build.yml\n-    parameters:\n-      publishingInfraVersion: 3\n-      # Symbol validation is not entirely reliable as of yet, so should be turned off until\n-      # https://github.com/dotnet/arcade/issues/2871 is resolved.\n-      enableSymbolValidation: false\n-      enableSourceLinkValidation: false\n-      enableNugetValidation: false\n+\n+      jobs:\n+      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:\n+        - template: /eng/common/templates-official/job/onelocbuild.yml@self\n+          parameters:\n+            LclSource: lclFilesfromPackage\n+            LclPackageId: 'LCL-JUNO-PROD-MSBUILD'\n+            MirrorRepo: 'msbuild'\n+            MirrorBranch: 'main' # should match condition above\n+\n+      - job: Windows_NT\n+        pool:\n+          name: VSEngSS-MicroBuild2022-1ES\n+          demands:\n+          - agent.os -equals Windows_NT\n+\n+        timeoutInMinutes: 180\n+\n+        variables:\n+        - group: DotNet-Blob-Feed\n+        - group: DotNet-Symbol-Publish\n+        - group: Publish-Build-Assets\n+        - name: TeamName\n+          value: MSBuild\n+        - name: VisualStudio.MajorVersion\n+          value: 17\n+        - name: VisualStudio.ChannelName\n+          value: 'int.d17.0'\n+        - name: VisualStudio.DropName\n+          value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+\n+        steps:\n+        - task: NuGetToolInstaller@1\n+          displayName: 'Install NuGet.exe'\n+\n+        - task: NuGetCommand@2\n+          displayName: Restore internal tools\n+          inputs:\n+            command: restore\n+            feedsToUse: config\n+            restoreSolution: 'eng\\common\\internal\\Tools.csproj'\n+            nugetConfigPath: 'NuGet.config'\n+            restoreDirectory: '$(Build.SourcesDirectory)\\.packages'\n+\n+        - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1\n+          inputs:\n+            signType: $(SignType)\n+            zipSources: false\n+          condition: and(succeeded(), in(variables['SignType'], 'test', 'real'))\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.\n+        # - task: MicroBuildOptProfPlugin@6\n+        #   inputs:\n+        #     ProfilingInputsDropName: '$(VisualStudio.DropName)'\n+        #     ShouldSkipOptimize: true\n+        #     AccessToken: '$(System.AccessToken)'\n+        #     feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'\n+        #   displayName: 'Install OptProf Plugin'\n+\n+        # Required by MicroBuildBuildVSBootstrapper\n+        - task: MicroBuildSwixPlugin@4\n+          inputs:\n+            dropName: $(VisualStudio.DropName)\n+\n+        - script: eng/CIBuild.cmd\n+                    -configuration $(BuildConfiguration)\n+                    -officialBuildId $(Build.BuildNumber)\n+                    -officialSkipApplyOptimizationData $(SkipApplyOptimizationData)\n+                    /p:RepositoryName=$(Build.Repository.Name)\n+                    /p:VisualStudioIbcSourceBranchName=$(SourceBranch)\n+                    /p:VisualStudioDropAccessToken=$(System.AccessToken)\n+                    /p:VisualStudioDropName=$(VisualStudio.DropName)\n+                    /p:DotNetSignType=$(SignType)\n+                    /p:DotNetPublishToBlobFeed=true\n+                    /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)\n+                    /p:DotNetPublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n+                    /p:PublishToSymbolServer=true\n+                    /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n+                    /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n+                    /p:TeamName=MSBuild\n+                    /p:DotNetPublishUsingPipelines=true\n+                    /p:VisualStudioIbcDrop=$(OptProfDrop)\n+                    /p:GenerateSbom=true\n+          displayName: Build\n+          condition: succeeded()\n+\n+        # Required by Microsoft policy\n+        - template: eng\\common\\templates-official\\steps\\generate-sbom.yml@self\n+\n+        # OptProf is not needed because this packaged will not be serviced in VS.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <VersionPrefix>17.0.2</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\r\n```",
              "createdAt": "2024-03-27T17:30:00Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -2,7 +2,8 @@\n <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->\n <Project>\n   <PropertyGroup>\n-    <VersionPrefix>17.0.1</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n+    <VersionPrefix>17.0.1</VersionPrefix>\n+    <DotNetFinalVersionKind>release</DotNetFinalVersionKind>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}