{
  "number": 6204,
  "title": "Fixes for big-endian systems",
  "body": "### Context\r\nWe are currently working on bringing up .NET on the IBM Z architecture (s390x-ibm-linux), which uses big-endian byte order.  During that process we have run into a couple of endian-specific bugs in msbuild code.\r\n\r\n### Changes Made\r\n* In MSBuildNameIgnoreCaseComparer::GetHashCode, when reading pairs of characters aliased to an int, handle the single last remaining char correctly on big-endian systems.\r\n\r\n* In NodeProviderOutOfProcBase, byte-swap the packet length on big-endian systems.\r\n\r\n### Testing\r\nOn IBM Z, a msbuild package built with this patch successfully builds and executes a \"hello world\" program.  We were also able to successfully bootstrap msbuild (build it with itself) on IBM Z.  (This of course also requires the work-in-progress dotnet runtime port, and for the bootstrap an endian bugfix to nuget is also required.)\r\nAlso verified that \"./build.sh --test\" still succeeds on a little-endian (Intel) Linux system.\r\n",
  "state": "MERGED",
  "createdAt": "2021-03-01T17:53:16Z",
  "updatedAt": "2021-05-14T10:37:47Z",
  "closedAt": "2021-03-11T15:00:06Z",
  "mergedAt": "2021-03-11T15:00:05Z",
  "additions": 19,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "bigendian",
  "isDraft": false,
  "author": {
    "login": "uweigand"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4a8752b0d3dd9226c86003205599c70c3f57e34b",
          "message": "Fixes for big-endian systems\n\n* In MSBuildNameIgnoreCaseComparer::GetHashCode, when reading pairs of\n  characters aliased to an int, handle the single last remaing char\n  correctly on big-endian systems.\n\n* In NodeProviderOutOfProcBase, byte-swap the packet length on\n  big-endian systems.",
          "committedDate": "2021-03-01T17:51:10Z",
          "author": {
            "name": "Ulrich Weigand",
            "email": "ulrich.weigand@de.ibm.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the review!   One additional comment on the NodeProviderOutOfProcBase change (which I just noticed as I was trying to backport the changes to older releases):\r\n\r\nThe packet length problem is actually quite recent, it was introduced only 4 weeks ago by this commit by @KirillOsenkov \r\nhttps://github.com/dotnet/msbuild/commit/de3b8871781e9d8e562f461f1f5916e3097f33ef#diff-f0e57cbf17e0f7fb207f255deb11445afccbb5c7bf0499a24b8065ff057fcdf3\r\n\r\nBefore that patch the packet length used to be in native byte order.  The patch changed the **sender** to write the packet length always in little-endian byte order (using the BinaryWriter which always uses little-endian, and/or the new WriteInt32 routine.  However, the **receiver** side was not changed, which caused the mismatch.\r\n\r\nNow, once this PR is applied, that mismatch will be fixed again.  However, I'm now wondering if that switch in encoding was even intentional in the first place.   Could there ever be the situation where an \"old\" version of msbuild (using native-endian encoding) would have to communicate with a \"new\" version (using little-endian endian encoding)?   That might still be a problem then.\r\n",
        "createdAt": "2021-03-04T11:45:44Z",
        "author": {
          "login": "uweigand"
        }
      },
      {
        "body": "MSBuild never communicates cross-version and the only part of the protocol we have to be careful about is the handshake where we check that the version (plus a few other things) matches. So no concerns here, we don't have to be backward or forward compatible when it comes to the actual packet exchange.",
        "createdAt": "2021-03-04T12:03:14Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "OK, then this patch should be all that is required to fix it again.  Thanks!",
        "createdAt": "2021-03-04T12:35:47Z",
        "author": {
          "login": "uweigand"
        }
      },
      {
        "body": "Thanks, I didn't pay attention to endianness when I made the change. It was driven purely by the need to reduce allocations since BitConverter required a 4-byte array. In general I'll need to learn more about endianness and pay more attention to it going forward, so this is educational.",
        "createdAt": "2021-03-04T19:11:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}