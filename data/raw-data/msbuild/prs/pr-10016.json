{
  "number": 10016,
  "title": "Instrumentation module for BuildCheck",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/9629\r\n\r\nContext\r\nWe need some timers and performance indicators for BuildCheck.\r\n\r\nAdded `--analyzeStats` option so it will report the time the BuildCheck infrastructure and individual analyzers performed to the command line, otherwise this information is just passed to the logger. \r\nAdded timer to a few infrastructure points so we can know how they perform.\r\n\r\nPreview of what the command line output looks like:\r\n![image](https://github.com/dotnet/msbuild/assets/10743736/ee8e6c81-df52-4016-9533-554c590e1cc1)\r\n\r\n\r\nRe-making the PR from https://github.com/dotnet/msbuild/pull/9890.",
  "state": "MERGED",
  "createdAt": "2024-04-16T11:23:16Z",
  "updatedAt": "2024-08-07T10:10:44Z",
  "closedAt": "2024-05-02T13:47:42Z",
  "mergedAt": "2024-05-02T13:47:42Z",
  "additions": 138,
  "deletions": 21,
  "changedFiles": 9,
  "headRefName": "9629",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d145aaea5d957e4f053ab4605e69ae63f77ca33b",
          "message": "First draft on stats logger for Analyzers",
          "committedDate": "2024-03-22T14:33:23Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6403a9d44f9b9d2c0d43fbe68c5e1c3187bb4f4a",
          "message": "Made the messages a bit prettier",
          "committedDate": "2024-03-22T14:33:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94a8eae47fd6cbb8d72d230a4dcbf1985094b8cd",
          "message": "removed some extra comments",
          "committedDate": "2024-03-22T14:33:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf884cc52a123bff112f5e292cca23c7738d82ba",
          "message": " Renamed BuildCop to BuildCheck",
          "committedDate": "2024-03-22T14:51:18Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da3b69b4885431692652226db34813bddb3729a3",
          "message": "Combined infraStats and analyzerStats when logging info",
          "committedDate": "2024-04-08T15:07:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dabac28c7043cb1c2f9502cb2b8de8d6a45c38d4",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-09T16:27:44Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c90a3ad99db1e9e624434875cbc55321c9710732",
          "message": "Merge exp/build-analyzers into 9629",
          "committedDate": "2024-04-09T16:39:45Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d3490776e740d712e46921adc78693fdfdcb06c",
          "message": "Addressed some PR comments",
          "committedDate": "2024-04-12T20:57:59Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0421eb177108b3042003a082698100dea8885eb9",
          "message": "Addressed some PR comments",
          "committedDate": "2024-04-16T11:02:26Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebdba51439521900e1dc9810af6e09808cd005f6",
          "message": "Merging main into 9629",
          "committedDate": "2024-04-16T11:16:50Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56e4b199e4951557b57c685f8ad6a796e0c06843",
          "message": "More PR comments",
          "committedDate": "2024-04-16T14:55:11Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c4e2c800359a4d7b0794337f9a486573e89f7009",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-22T14:17:15Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10b8fcfe1359a540d59810c10c77f5518a87f078",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-24T12:00:22Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99c86cb8ae48aa9dedba7b1e3779e6788f15c200",
          "message": "Fix build",
          "committedDate": "2024-04-24T13:49:25Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e16b79e00d0e80bf41810c72caba1d97e99da7f4",
          "message": "Merge main to 9629",
          "committedDate": "2024-04-24T13:51:16Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0cb7a9bb54df82c997dc352811dff8cca6f307e5",
          "message": "Added a comment for clarification",
          "committedDate": "2024-04-24T14:32:03Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "982ae73b92f141d63c178de141f5dc148a4dc414",
          "message": "Merge main",
          "committedDate": "2024-04-25T15:15:38Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11a07c8940500e51a301199c8b68eec72c208e80",
          "message": "Fix after merge",
          "committedDate": "2024-04-25T15:29:07Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e9ede38df6fb83f50fd8e308e7a4ac218fd872f",
          "message": "Fixed tests",
          "committedDate": "2024-04-26T18:47:51Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65db4e2694f4353d55627e5bd297d6f6df5c1492",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-29T11:44:10Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fffa517752d35e48655258b5e6c364fb647d4638",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-29T19:56:32Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b3ba6bf0885361b60d93b635fa00276f5765ea56",
          "message": "Make tracing stats timers private",
          "committedDate": "2024-04-30T13:50:20Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da910d5cbbd40eabbb31273c912165cad8fdb0d8",
          "message": "Removed switch for message priority",
          "committedDate": "2024-04-30T15:30:58Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "let's remove this",
              "createdAt": "2024-04-17T12:01:13Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -33,9 +39,18 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n                 return;\n             }\n \n+            try\n+            {\n             buildCheckManager.ProcessEvaluationFinishedEventArgs(\n                 loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),\n                 projectEvaluationFinishedEventArgs);\n+            }\n+            catch (Exception exception)\n+            {\n+                Debugger.Launch();\n+                Console.WriteLine(exception);\n+                throw;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to be a leftover of merge - should be removed",
              "createdAt": "2024-04-17T12:05:06Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -273,6 +277,7 @@ private void SetupAnalyzersForNewProject(string projectFullPath, BuildEventConte\n                     _loggingService.LogErrorFromText(buildEventContext, null, null, null,\n                         new BuildEventFileInfo(projectFullPath),\n                         e.Message);\n+                    _loggingService.LogCommentFromText(buildEventContext, MessageImportance.High, $\"Dismounting analyzer '{analyzerFactoryContext.FriendlyName}'\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please comment more in detail of what is the purpose of those - or remove. So that this doesn't stay in code forewer unused",
              "createdAt": "2024-04-17T12:08:40Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -13,6 +13,11 @@ internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal TimeSpan analyzerSetDataSourceTime;\n+    internal TimeSpan newProjectAnalyzersTime;\n+",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I readded the timers to their respective functions. I think it might have gotten lost during the merge.",
              "createdAt": "2024-04-22T14:18:00Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -13,6 +13,11 @@ internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal TimeSpan analyzerSetDataSourceTime;\n+    internal TimeSpan newProjectAnalyzersTime;\n+",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The `LogCommentFromText` will write to binlog if attached as well - however that's an unstructured representation, so would need to be searched and parsed with proprietary and fragile code. Log a structured data with `loggingContext.LogBuildEvent` as well.\r\n\r\nYou do not need to create new BuildEvent for that purpose - the existing `BuildCheckTracingEventArgs` can be reused for this purpose. Just add a boolean flag which indicates whether it's a single node intermediary data, or final merged stats (so that binlog viewer code can decide which should be ignored and which should be parsed)",
              "createdAt": "2024-04-17T12:17:06Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -75,17 +90,69 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        _stats.Merge(buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);\n+        LogAnalyzerStats(loggingContext);\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to be a merge leftover - should be removed",
              "createdAt": "2024-04-23T11:11:20Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        MessageImportance importance = _areStatsEnabled ? MessageImportance.High : MessageImportance.Low;\r\n\r\n        loggingContext.LogCommentFromText(importance, $\"BuildCheck run times{Environment.NewLine}\");\r\n        string infraData = BuildCsvString(\"Infrastructure run times\", infraStats);\r\n        loggingContext.LogCommentFromText(importance, infraData);\r\n\r\n        string analyzerData = BuildCsvString(\"Analyzer run times\", analyzerStats);\r\n        loggingContext.LogCommentFromText(importance, analyzerData);\r\n```",
              "createdAt": "2024-04-23T11:14:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -75,17 +84,62 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n \n     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);\n-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + \": \" + a.Value));\n-\n         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(\n             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,\n             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n \n         LoggingContext loggingContext = loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        _stats.Merge(buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);\n+        LogAnalyzerStats(loggingContext);\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();\n+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();\n+\n+        foreach (var stat in _stats)\n+        {\n+            if (stat.Key.StartsWith(BuildCheckConstants.infraStatPrefix))\n+            {\n+                string newKey = stat.Key.Replace(BuildCheckConstants.infraStatPrefix, string.Empty);\n+                infraStats[newKey] = stat.Value;\n+            }\n+            else\n+            {\n+                analyzerStats[stat.Key] = stat.Value;\n+            }\n+        }\n+\n+        BuildCheckTracingEventArgs statEvent = new BuildCheckTracingEventArgs(_stats, true)\n+        { BuildEventContext = loggingContext.BuildEventContext };\n+\n+        loggingContext.LogBuildEvent(statEvent);\n+\n+        if (_areStatsEnabled)\n+        {\n+            loggingContext.LogCommentFromText(MessageImportance.High, $\"BuildCheck run times{Environment.NewLine}\");\n+            string infraData = BuildCsvString(\"Infrastructure run times\", infraStats);\n+            loggingContext.LogCommentFromText(MessageImportance.High, infraData);\n+\n+            string analyzerData = BuildCsvString(\"Analyzer run times\", analyzerStats);\n+            loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);\n+        }\n+        else\n+        {\n+            loggingContext.LogCommentFromText(MessageImportance.Low, $\"BuildCheck run times{Environment.NewLine}\");\n+            string infraData = BuildCsvString(\"Infrastructure run times\", infraStats);\n+            loggingContext.LogCommentFromText(MessageImportance.Low, infraData);\n+\n+            string analyzerData = BuildCsvString(\"Analyzer run times\", analyzerStats);\n+            loggingContext.LogCommentFromText(MessageImportance.Low, analyzerData);\n+        }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this needed?",
              "createdAt": "2024-04-23T11:15:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -2,6 +2,7 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+using System.CodeDom.Compiler;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "StopWatch is cheap - let's create local variable in each function as needed, to avoid possible issues with overlapped calls",
              "createdAt": "2024-04-23T11:18:08Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -44,6 +46,8 @@ internal static IBuildComponent CreateComponent(BuildComponentType type)\n         return new BuildCheckManagerProvider();\n     }\n \n+    internal static Stopwatch _stopwatch = new Stopwatch();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks like should be responsibility of the `_tracingReporter` (as the individual times as well as the TracingStats property are all in its ownership).\r\n\r\nThat way we can in the future guard in case of concurrent access",
              "createdAt": "2024-04-23T11:22:24Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -310,6 +325,14 @@ private void SetupAnalyzersForNewProject(string projectFullPath, BuildEventConte\n                 }\n             }\n \n+            var infraStats = new Dictionary<string, TimeSpan>() {\n+                { $\"{BuildCheckConstants.infraStatPrefix}analyzerAcquisitionTime\", _tracingReporter.analyzerAcquisitionTime },\n+                { $\"{BuildCheckConstants.infraStatPrefix}analyzerSetDataSourceTime\", _tracingReporter.analyzerSetDataSourceTime },\n+                { $\"{BuildCheckConstants.infraStatPrefix}newProjectAnalyzersTime\", _tracingReporter.newProjectAnalyzersTime }\n+            };\n+\n+            _tracingReporter.TracingStats.Merge(infraStats, (span1, span2) => span1 + span2);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just wondering if we can have bit more descriptive naming - something like?\r\n\r\n```suggestion\r\n    public bool IsAggregatedGlobalReport { get; private set; } = false;\r\n```\r\n\r\nPlus a comment would be nice.",
              "createdAt": "2024-04-23T11:25:30Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -28,6 +28,12 @@ internal sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tr\n     internal BuildCheckTracingEventArgs() : this(new Dictionary<string, TimeSpan>())\n     { }\n \n+    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isLogReport) : this(data)\n+    {\n+        IsLogReport = isLogReport;\n+    }\n+\n+    public bool IsLogReport { get; private set; } = false;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Merge leftover - please remove",
              "createdAt": "2024-04-23T11:26:06Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did some learnings on my own PR reviews :) \r\nThe thing is the Replace method will try to find  all occurrences  and replace, however the substring will do one operation and that is it, meaning using Substring usage will be more performant\r\n```suggestion\r\n            if (stat.Key.StartsWith(BuildCheckConstants.infraStatPrefix))\r\n            {\r\n                string newKey = stat.Key.Substring(BuildCheckConstants.infraStatPrefix.Length);\r\n                infraStats[newKey] = stat.Value;\r\n            }\r\n```",
              "createdAt": "2024-04-29T07:09:09Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -92,8 +94,44 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n \n         LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        _stats.Merge(_buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);\n+        LogAnalyzerStats(loggingContext);\n+    }\n+    \n+    private void LogAnalyzerStats(LoggingContext loggingContext)\n+    {\n+        Dictionary<string, TimeSpan> infraStats = new Dictionary<string, TimeSpan>();\n+        Dictionary<string, TimeSpan> analyzerStats = new Dictionary<string, TimeSpan>();\n+\n+        foreach (var stat in _stats)\n+        {\n+            if (stat.Key.StartsWith(BuildCheckConstants.infraStatPrefix))\n+            {\n+                string newKey = stat.Key.Replace(BuildCheckConstants.infraStatPrefix, string.Empty);\n+                infraStats[newKey] = stat.Value;\n+            }",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "is the null-forgiving operator (`!`) needed here? CreateAnalyzerTracingStats() is not declared as nullable.",
              "createdAt": "2024-04-29T13:06:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -92,8 +94,44 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n \n         LoggingContext loggingContext = _loggingContextFactory.CreateLoggingContext(buildEventContext);\n \n-        // Tracing: https://github.com/dotnet/msbuild/issues/9629\n-        loggingContext.LogCommentFromText(MessageImportance.High, msg);\n+        _stats.Merge(_buildCheckManager.CreateAnalyzerTracingStats()!, (span1, span2) => span1 + span2);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            Stopwatch stopwatch = Stopwatch.StartNew();\r\n```",
              "createdAt": "2024-04-29T13:09:59Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -88,15 +89,21 @@ internal BuildCheckManager(ILoggingService loggingService)\n         /// <param name=\"buildCheckDataSource\"></param>\n         public void SetDataSource(BuildCheckDataSource buildCheckDataSource)\n         {\n+            Stopwatch stopwatch = new Stopwatch();\n+            stopwatch.Start();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Lets turn those into autoproperties",
              "createdAt": "2024-04-29T13:11:49Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -6,13 +6,20 @@\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n+using Microsoft.Build.BuildCheck.Utilities;\n+using Microsoft.Build.Experimental.BuildCheck;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n \n internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal TimeSpan analyzerSetDataSourceTime;\n+    internal TimeSpan newProjectAnalyzersTime;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Or better - let's expose only an AddXXX methods for those - that way we won't accidentaly overwrite the counter in the calling code ",
              "createdAt": "2024-04-29T13:13:58Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -6,13 +6,20 @@\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n+using Microsoft.Build.BuildCheck.Utilities;\n+using Microsoft.Build.Experimental.BuildCheck;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n \n internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal TimeSpan analyzerSetDataSourceTime;\n+    internal TimeSpan newProjectAnalyzersTime;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Lets make those private, so that that the Add methods cannot be bypassed.",
              "createdAt": "2024-04-30T13:01:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -6,13 +6,20 @@\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n+using Microsoft.Build.BuildCheck.Utilities;\n+using Microsoft.Build.Experimental.BuildCheck;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n \n internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now\n+    internal TimeSpan analyzerAcquisitionTime;\n+    internal TimeSpan analyzerSetDataSourceTime;\n+    internal TimeSpan newProjectAnalyzersTime;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What if the method is called multiple times? This should add.",
              "createdAt": "2024-04-29T13:12:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -116,6 +123,8 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,\n \n                 _loggingService.LogBuildEvent(eventArgs);\n             }\n+            stopwatch.Stop();\n+            _tracingReporter.analyzerAcquisitionTime = stopwatch.Elapsed;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How expensive is the process of this collection? Could we just have it on all the time?",
              "createdAt": "2024-04-29T14:13:19Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2991,7 +2991,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n \n                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]\n                 {\n-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)\n+                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance, _buildParameters.AreBuildCheckStatsEnabled)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, it actually is and this controls only log verbosity? I . . . am not sure that's worth the complexity. Is there a strong need for it?",
              "createdAt": "2024-04-29T14:29:10Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2991,7 +2991,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n \n                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]\n                 {\n-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)\n+                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance, _buildParameters.AreBuildCheckStatsEnabled)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It currently it is a switch for verbosity. It was originally for collecting this infrastructure data in general, but I was asked to change that after a discussion that the stats would be part of the analyzers (https://github.com/dotnet/msbuild/pull/9890#discussion_r1560706854)",
              "createdAt": "2024-04-29T19:38:38Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2991,7 +2991,7 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n \n                 loggers = (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[]\n                 {\n-                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance)\n+                    new BuildCheckConnectorLogger(new AnalyzerLoggingContextFactory(loggingService), buildCheckManagerProvider.Instance, _buildParameters.AreBuildCheckStatsEnabled)",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is non-blocking but storing a known list of things in a dictionary feels a bit weird to me.",
              "createdAt": "2024-04-29T14:24:43Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -24,4 +31,15 @@ public void AddStats(string name, TimeSpan subtotal)\n             TracingStats[name] = subtotal;\n         }\n     }\n+\n+    public void AddAnalyzerInfraStats()\n+    {\n+        var infraStats = new Dictionary<string, TimeSpan>() {",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yeah, just using a dictionary since we already had the methods for it. If it a bother I can write some new methods to go with another structure.",
              "createdAt": "2024-04-29T19:39:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -24,4 +31,15 @@ public void AddStats(string name, TimeSpan subtotal)\n             TracingStats[name] = subtotal;\n         }\n     }\n+\n+    public void AddAnalyzerInfraStats()\n+    {\n+        var infraStats = new Dictionary<string, TimeSpan>() {",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you help me understand how the stat that feels most important for a user, \"how much time overhead did running buildchecks add?\" will fit in here?",
              "createdAt": "2024-04-29T14:31:57Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -6,13 +6,20 @@\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n+using Microsoft.Build.BuildCheck.Utilities;\n+using Microsoft.Build.Experimental.BuildCheck;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n \n internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Right now this is just a foundation for the instrumentation module. It does not contain all necessary measures that we will want to keep in the future, but it is just building the infrastructure behind it.",
              "createdAt": "2024-04-29T19:55:01Z",
              "path": "src/Build/BuildCheck/Infrastructure/TracingReporter.cs",
              "diffHunk": "@@ -6,13 +6,20 @@\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n+using Microsoft.Build.BuildCheck.Utilities;\n+using Microsoft.Build.Experimental.BuildCheck;\n \n namespace Microsoft.Build.BuildCheck.Infrastructure;\n \n internal class TracingReporter\n {\n     internal Dictionary<string, TimeSpan> TracingStats { get; } = new();\n \n+    // Infrastructure time keepers, examples for now",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need to be serialized to the binlog?",
              "createdAt": "2024-04-30T15:37:41Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -30,6 +30,17 @@ internal BuildCheckTracingEventArgs()\n     {\n     }\n \n+    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isAggregatedGlobalReport) : this(data)\n+    {\n+        IsAggregatedGlobalReport = isAggregatedGlobalReport;\n+    }\n+\n+    /// <summary>\n+    /// When true, the tracing information is from the whole build for logging purposes\n+    /// When false, the tracing is being used for communication between nodes and central process\n+    /// </summary>\n+    public bool IsAggregatedGlobalReport { get; private set; } = false;\n+\n     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It does not, but we use this event args to send stats during the build for communication between worker nodes and main node, and at the end of the build to get all stats. If we do not have this bool we continue adding stats after the end of the build and it crashes.",
              "createdAt": "2024-04-30T16:18:17Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -30,6 +30,17 @@ internal BuildCheckTracingEventArgs()\n     {\n     }\n \n+    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isAggregatedGlobalReport) : this(data)\n+    {\n+        IsAggregatedGlobalReport = isAggregatedGlobalReport;\n+    }\n+\n+    /// <summary>\n+    /// When true, the tracing information is from the whole build for logging purposes\n+    /// When false, the tracing is being used for communication between nodes and central process\n+    /// </summary>\n+    public bool IsAggregatedGlobalReport { get; private set; } = false;\n+\n     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "I believe this was refering to the whole class. Yes we want it (https://github.com/dotnet/msbuild/pull/10016#discussion_r1568748145). It'll need to be handled in https://github.com/dotnet/msbuild/blob/main/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs and https://github.com/dotnet/msbuild/blob/main/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs in order to have those in the binlog (otherwise we'd have just the unstructured textual outputs there - those would then need to be string parsed with code tightly dependent on actual output format)",
              "createdAt": "2024-04-30T21:01:21Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -30,6 +30,17 @@ internal BuildCheckTracingEventArgs()\n     {\n     }\n \n+    internal BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> data, bool isAggregatedGlobalReport) : this(data)\n+    {\n+        IsAggregatedGlobalReport = isAggregatedGlobalReport;\n+    }\n+\n+    /// <summary>\n+    /// When true, the tracing information is from the whole build for logging purposes\n+    /// When false, the tracing is being used for communication between nodes and central process\n+    /// </summary>\n+    public bool IsAggregatedGlobalReport { get; private set; } = false;\n+\n     public Dictionary<string, TimeSpan> TracingData { get; private set; } = tracingData;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}