{
  "number": 10464,
  "title": "[8.0.4xx] Fix serialization of TelemetryEventArgs data packets across MSBuild worker nodes",
  "body": "Fixes [azdo#2174440](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/2174440)\r\n\r\n### Context\r\n\r\nThe serialization of telemetry events assumed that telemetry properties would always have a value - it seems like it's possible for callers to send null values, so we need to be able to handle that. This was triggered with the addition of containers telemetry added in 8.0.400.\r\n\r\n### Changes Made\r\n\r\nOptionally write and read the value string for the telemetry event payload.\r\n\r\n### Testing\r\n\r\nAdded previously-nonexistent round-tripping tests for this event type.\r\n\r\n### Notes\r\nWe'll want to take this to SDK Tactics for servicing, but then to VS QB to see if they want to align releases or let the VS side drift a bit.",
  "state": "MERGED",
  "createdAt": "2024-07-30T20:55:16Z",
  "updatedAt": "2024-08-06T15:02:20Z",
  "closedAt": "2024-08-06T14:34:27Z",
  "mergedAt": "2024-08-06T14:34:27Z",
  "additions": 88,
  "deletions": 8,
  "changedFiles": 4,
  "headRefName": "fix-telemetry-event-serialization",
  "isDraft": false,
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved",
    "do-not-merge"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "04f3e2389b4e194793c2a2c941ad64db31662ad0",
          "message": "Telemetry strings could be null, so handle that case",
          "committedDate": "2024-07-30T22:28:37Z",
          "author": {
            "name": "Chet Husk",
            "email": "chusk3@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4b90a085bbb8817386de98e9db36cb6c40b1220",
          "message": "Bump version",
          "committedDate": "2024-07-30T22:28:37Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "036459bfdb74abae3b2f408539568082704a3cf1",
          "message": "Add tests to cover TelemetryEventArg round-trip serialization",
          "committedDate": "2024-07-30T22:28:53Z",
          "author": {
            "name": "Chet Husk",
            "email": "chusk3@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7201430b76f60d4b36436bf28bfc1907214a6747",
          "message": "Test cleanups and nullability in the TelemetryEventargs",
          "committedDate": "2024-07-31T14:07:07Z",
          "author": {
            "name": "Chet Husk",
            "email": "chusk3@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if we could split the test into three different TestCases? or it is repro only in provided combination/order? \r\nThe cons of using different test scnarios in one is that if all of the cases are failing we will be be knowing that only after solving 1 by 1\r\nPros of course the resources and time for the setup. ",
              "createdAt": "2024-07-31T13:18:19Z",
              "path": "src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs",
              "diffHunk": "@@ -974,5 +974,62 @@ private static void VerifyTaskFinished(TaskFinishedEventArgs genericEvent, TaskF\n             newGenericEvent.TaskFile.ShouldBe(genericEvent.TaskFile, StringCompareShould.IgnoreCase); // \"Expected TaskFile to Match\"\n             newGenericEvent.TaskName.ShouldBe(genericEvent.TaskName, StringCompareShould.IgnoreCase); // \"Expected TaskName to Match\"\n         }\n+\n+\n+        [Fact]\n+        public void TestTelemetryEventArgs()\n+        {\n+            // Test using reasonable values\n+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = \"Good\", Properties = new Dictionary<string, string> { { \"Key\", \"Value\" } } };\n+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);\n+\n+            // Serialize\n+            genericEvent.WriteToStream(_writer);\n+            long streamWriteEndPosition = _stream.Position;\n+\n+            // Deserialize and Verify\n+            _stream.Position = 0;\n+            TelemetryEventArgs newGenericEvent = new TelemetryEventArgs();\n+            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);\n+            _stream.Position.ShouldBe(streamWriteEndPosition); // \"Stream End Positions Should Match\"\n+            VerifyGenericEventArg(genericEvent, newGenericEvent);\n+            VerifyTelemetryEvent(genericEvent, newGenericEvent);\n+\n+            // Test using null event name",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Happy to do that? I was mostly just following along the existing pattern in this file.",
              "createdAt": "2024-07-31T13:30:12Z",
              "path": "src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs",
              "diffHunk": "@@ -974,5 +974,62 @@ private static void VerifyTaskFinished(TaskFinishedEventArgs genericEvent, TaskF\n             newGenericEvent.TaskFile.ShouldBe(genericEvent.TaskFile, StringCompareShould.IgnoreCase); // \"Expected TaskFile to Match\"\n             newGenericEvent.TaskName.ShouldBe(genericEvent.TaskName, StringCompareShould.IgnoreCase); // \"Expected TaskName to Match\"\n         }\n+\n+\n+        [Fact]\n+        public void TestTelemetryEventArgs()\n+        {\n+            // Test using reasonable values\n+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = \"Good\", Properties = new Dictionary<string, string> { { \"Key\", \"Value\" } } };\n+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);\n+\n+            // Serialize\n+            genericEvent.WriteToStream(_writer);\n+            long streamWriteEndPosition = _stream.Position;\n+\n+            // Deserialize and Verify\n+            _stream.Position = 0;\n+            TelemetryEventArgs newGenericEvent = new TelemetryEventArgs();\n+            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);\n+            _stream.Position.ShouldBe(streamWriteEndPosition); // \"Stream End Positions Should Match\"\n+            VerifyGenericEventArg(genericEvent, newGenericEvent);\n+            VerifyTelemetryEvent(genericEvent, newGenericEvent);\n+\n+            // Test using null event name",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I split out the test cases for clarity.",
              "createdAt": "2024-07-31T14:07:26Z",
              "path": "src/Framework.UnitTests/CustomEventArgSerialization_Tests.cs",
              "diffHunk": "@@ -974,5 +974,62 @@ private static void VerifyTaskFinished(TaskFinishedEventArgs genericEvent, TaskF\n             newGenericEvent.TaskFile.ShouldBe(genericEvent.TaskFile, StringCompareShould.IgnoreCase); // \"Expected TaskFile to Match\"\n             newGenericEvent.TaskName.ShouldBe(genericEvent.TaskName, StringCompareShould.IgnoreCase); // \"Expected TaskName to Match\"\n         }\n+\n+\n+        [Fact]\n+        public void TestTelemetryEventArgs()\n+        {\n+            // Test using reasonable values\n+            TelemetryEventArgs genericEvent = new TelemetryEventArgs { EventName = \"Good\", Properties = new Dictionary<string, string> { { \"Key\", \"Value\" } } };\n+            genericEvent.BuildEventContext = new BuildEventContext(5, 4, 3, 2);\n+\n+            // Serialize\n+            genericEvent.WriteToStream(_writer);\n+            long streamWriteEndPosition = _stream.Position;\n+\n+            // Deserialize and Verify\n+            _stream.Position = 0;\n+            TelemetryEventArgs newGenericEvent = new TelemetryEventArgs();\n+            newGenericEvent.CreateFromStream(_reader, _eventArgVersion);\n+            _stream.Position.ShouldBe(streamWriteEndPosition); // \"Stream End Positions Should Match\"\n+            VerifyGenericEventArg(genericEvent, newGenericEvent);\n+            VerifyTelemetryEvent(genericEvent, newGenericEvent);\n+\n+            // Test using null event name",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Possibly controversial, but since the lack of nullability enforcement contributed to this bug I felt it was ok to onboard this type to it as part of this fix.",
              "createdAt": "2024-07-31T14:08:18Z",
              "path": "src/Framework/TelemetryEventArgs.cs",
              "diffHunk": "@@ -6,8 +6,6 @@\n using System.IO;\n using Microsoft.Build.Shared;\n \n-#nullable disable",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I find that justification pretty convincing.",
              "createdAt": "2024-07-31T16:16:41Z",
              "path": "src/Framework/TelemetryEventArgs.cs",
              "diffHunk": "@@ -6,8 +6,6 @@\n using System.IO;\n using Microsoft.Build.Shared;\n \n-#nullable disable",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When we merge to main we probably need to annotate this property as nullable and handle an explicitly null set in the read method",
              "createdAt": "2024-07-31T14:19:12Z",
              "path": "src/Framework/TelemetryEventArgs.cs",
              "diffHunk": "@@ -19,12 +17,12 @@ public sealed class TelemetryEventArgs : BuildEventArgs\n         /// <summary>\n         /// Gets or sets the name of the event.\n         /// </summary>\n-        public string EventName { get; set; }\n+        public string? EventName { get; set; }\n \n         /// <summary>\n         /// Gets or sets a list of properties associated with the event.\n         /// </summary>\n-        public IDictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();\n+        public IDictionary<string, string?> Properties { get; set; } = new Dictionary<string, string?>();",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}