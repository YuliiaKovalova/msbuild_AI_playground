{
  "number": 6694,
  "title": "Expose the MSBuildGlob regex for caching",
  "body": "### Context\r\nThis enables caching of the MSBuildGlob pattern directly on the CPS side. The codepath accessing this pattern glob matching is in solution close and constructing the string has proven to be buggy and slow. It would make more sense to acquire it directly it from the source instead of trying to mimic the code badly in different project systems.",
  "state": "CLOSED",
  "createdAt": "2021-07-21T06:24:00Z",
  "updatedAt": "2021-12-06T18:33:21Z",
  "closedAt": "2021-12-06T18:33:21Z",
  "mergedAt": null,
  "additions": 7,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "dev/arkalyan/msbuildglob-regex-caching",
  "isDraft": true,
  "author": {
    "login": "arunchndr"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4130e7347b719770d329ca1fcc3784a8d790f937",
          "message": "Expose the MSBuildGlob regex for caching",
          "committedDate": "2021-07-21T06:21:04Z",
          "author": {
            "name": "Arun Chander Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "For the moment, we have a minimal implementation on the CPS side that uses the filespec to generate the regex and globroot. But if this PR is approved, we can swap the implementation on the CPS side.",
        "createdAt": "2021-07-21T08:21:43Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "MSBuild globs being based on regular expressions has so far been an implementation detail. This change breaks the abstraction and would make it harder to rewrite the internals (rather unlikely we would want to do it, but still).\r\n\r\nCan you please help us understand the requirements to make sure we're making the right trade-off? What does CPS do with the `Regex` object that it cannot do with the `MSBuildGlob`?",
        "createdAt": "2021-07-21T09:48:45Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> MSBuild globs being based on regular expressions has so far been an implementation detail. This change breaks the abstraction and would make it harder to rewrite the internals (rather unlikely we would want to do it, but still).\r\n> \r\n> Can you please help us understand the requirements to make sure we're making the right trade-off? What does CPS do with the `Regex` object that it cannot do with the `MSBuildGlob`?\r\n\r\nThis is part of the effort to make all the project evaluation related classes serializable for caching and second load speedup. Both construction and evaluation items are cached for second solution load, one of the deficit scenarios blocking dogfooding of the cache mode scenario is the ability to use glob based scenarios such as adding files directly on the disk. In order to serialize and deserialize in it's current state it seems like we have 2 options:\r\n\r\nOption A: Expose/mimic the implementation of how a regex is constructed. We would have to construct the regex from the filespec which means mimicking the RegularExpressionFromFileSpec implementation in msbuild or making that public + assuming some details of a GlobRoot for a glob or making that public perf glob. This in general has been the choice for mose of the msbuild classes to minimize disrupting the public msbuild contract, but here particularly there are quite of a bit of implementational assumptions and it could break us in cases you've described above for even the minutest of implementation changes.\r\n\r\nOption B: Expose the regex itself and consume that instead of the implementation. \r\n\r\nRegex seemed like more of a end result than an implementation in light of Option A, but if you feel that is also an implementational detail that needs to be abstracted away, we can continue using Option A. In that case, would it make sense to expose the GlobRoot? (Right now GlobRoot is assumed to be the fixed directory part except for globs with gaps where the gaps use the fixed directory part of the mainglob)\r\n",
        "createdAt": "2021-07-21T17:29:53Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "I agree with @ladipro that in this case exposing the regex decreases maintainability and changeability.\r\n\r\n>Option A: Expose/mimic the implementation of how a regex is constructed. We would have to construct the regex from the filespec which means mimicking the RegularExpressionFromFileSpec implementation in msbuild or making that public + assuming some details of a GlobRoot for a glob or making that public perf glob. \r\n\r\nI would avoid any solutions that leak implementation details, including mimicking logic. Instead, I would favor updating the msbuild globbing APIs to enable your scenario without exposing internal details.\r\nIdeally you should never use Regex objects in VS to express MSBuild globs. Instead, you should always use IMSBuildGlob to achieve the high level use cases of globs such as matching strings against them or globbing a filesystem path.\r\n\r\nIn this particular case it sounds like you are trying to cache state and would like to avoid reparsing a Regex by serializing and deserializing it. Since the Regex is an implementation detail of IMSBuildGlob, the better approach would be to ask the IMSBuildGlob to serialize / deserialize itself to / from a stream.\r\nIf dev resourcing for this change is hard to approve, then one option is to access the Regex via reflection in VS. That way we the implementation leak is contained in VS.",
        "createdAt": "2021-07-21T18:05:02Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> the better approach would be to ask the IMSBuildGlob to serialize / deserialize itself to / from a stream.\r\n\r\nThere are a couple of implementational roadblocks with offloading the serialization logic to msbuild in targeted cases. The serialization/deserialization used in CPS does not embed strings into the same stream as the actual evaluation result objects for compression and machine abstraction reasons, so we would ideally need to expose the serialization/deserialization itself from CPS and have msbuild then call it on specific objects. Come to think of it, that would actually be a good backlog item - CPS owns the serialization logic and msbuild continues to own the actual objects. But that option is non trivial and yes brings us to dev resourcing. \r\n\r\n>access the Regex via reflection in VS\r\n\r\nThis would impact the solution close critical path given the slowness of the reflection apis.\r\n\r\nHow about another option - would it make sense to introduce a MSBuildGlob constructor that takes the 3 public parts and constructs the MSBuildGlob for us? The GlobRoot would need to be exposed again in that option(?)",
        "createdAt": "2021-07-21T19:04:31Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "> The serialization/deserialization used in CPS does not embed strings into the same stream as the actual evaluation result objects \r\n\r\nTo sidestep this whole issue, couldn't you recreate the glob objects based on the deserialized evaluation state, instead of serializing/deserializing them? It wouldn't be as fast, but maybe it's good enough for now? AFAIK Glob object creation does not use shared state, is mostly CPU bound, not much I/O if any, so their creation can be massively parallelized, which suggests that the effort to serialize them may not be worth it. Then later on when the whole CPS caching story is stable you can then tackle more particular optimizations like serializing glob objects instead of recreating them.\r\n\r\n> How about another option - would it make sense to introduce a MSBuildGlob constructor that takes the 3 public parts and constructs the MSBuildGlob for us? The GlobRoot would need to be exposed again in that option(?)\r\n\r\nThere already exists an overload, [MSBuildGlob Parse(string globRoot, string fileSpec)](https://github.com/dotnet/msbuild/blob/9e576281e638d60701ca34411e2483bed01e35c7/src/Build/Globbing/MSBuildGlob.cs#L168), that takes the glob root. Is this sufficient for your needs?\r\n\r\n>>access the Regex via reflection in VS\r\n\r\n>This would impact the solution close critical path given the slowness of the reflection apis.\r\n\r\nReflection perf can be improved. Maybe the cached delegate option is good enough? https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/",
        "createdAt": "2021-07-21T21:11:11Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@arkalyanms\r\nDo we still need this? I think I remember we agreed to do something different, but I may be misremembering.",
        "createdAt": "2021-09-17T16:22:35Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind The requirement still stands in that we need a way to create globs from IMSBuildGlob members of fixeddirectory. wildcardDirectory, filename. Right now the workaround is to mimic the msbuild side logic to create a regex. We can possibly try to reuse the MSBuildGlob Parse(string globRoot, string fileSpec). How do they match up against the IMSBuildGlob entities?",
        "createdAt": "2021-09-17T18:35:49Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "> Reflection perf can be improved. Maybe the cached delegate option is good enough? https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/\r\n\r\n+1 on this. The one-time cost of binding the member via reflection would likely be insignificant in the grand scheme of things. \r\n\r\nI am not fully following the reasoning for not exposing a general (de)serialization API. If we expose the `Regex`, then presumably CPS would call `ToString()` on it to recover the regex string and save it. Why not a (de)serialization API which takes/returns an opaque string, then? Do you really need to know that it is a regex and understand its structure?\r\n\r\n@arkalyanms should we cover this in the next CPS-MSBuild sync? Thank you!",
        "createdAt": "2021-09-21T15:38:47Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "\r\n> @arkalyanms should we cover this in the next CPS-MSBuild sync? Thank you!\r\n\r\nAdded to the 9/29 sync agenda.",
        "createdAt": "2021-09-21T16:25:49Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "The latest proposal is to expose the expanded glob as a list of strings that can be serialized or used to deserialize back to MSBuildGlob. ",
        "createdAt": "2021-09-30T16:57:10Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "@arkalyanms, are you planning to repurpose this PR or open a new one?",
        "createdAt": "2021-10-11T15:09:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I am planning to repurpose this PR in 17.1.",
        "createdAt": "2021-10-11T18:00:38Z",
        "author": {
          "login": "arunchndr"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}