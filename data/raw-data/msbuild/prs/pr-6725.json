{
  "number": 6725,
  "title": "Miscellaneous event tweaks",
  "body": "- Make EvaluateStop event adjacent to EvaluateStart\r\n\r\n  It's not well documented, but EventSource requires that the start and stop event IDs for a single thing be separated by exactly one. Since this one didn't, we weren't getting DURATION_MSEC computed for overall evaluation time in our traces.\r\n  \r\n  See https://github.com/dotnet/runtime/blob/f83a9d9689433ce522b91e74a9631c83847e3b64/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L3270.\r\n- Update Evaluate* event doc comments\r\n- Include EvaluateStart/Stop in DOTNET_PERFLOG\r\n- Drop Parse from DOTNET_PERFLOG\r\n",
  "state": "MERGED",
  "createdAt": "2021-08-02T20:55:30Z",
  "updatedAt": "2021-08-16T15:09:30Z",
  "closedAt": "2021-08-09T08:18:57Z",
  "mergedAt": "2021-08-09T08:18:57Z",
  "additions": 33,
  "deletions": 33,
  "changedFiles": 1,
  "headRefName": "match-evaluation-activity",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "11f08511b253bc0bf37adeaa94ac60d5974d0cfe",
          "message": "Make EvaluateStop event adjacent to EvaluateStart\n\nIt's not well documented, but EventSource requires that the start and stop event IDs\nfor a single thing be separated by exactly one. Since this one didn't, we weren't\ngetting DURATION_MSEC computed for overall evaluation time in our traces.\n\nSee https://github.com/dotnet/runtime/blob/f83a9d9689433ce522b91e74a9631c83847e3b64/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventSource.cs#L3270.",
          "committedDate": "2021-08-02T20:37:26Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b298e8e5a1d666ec4884c0589d514184c01c931c",
          "message": "Update Evaluate* event doc comments",
          "committedDate": "2021-08-02T20:42:49Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "326fd95183c6f2e2529fd7ca94c1287bdde6ad6c",
          "message": "Include EvaluateStart/Stop in DOTNET_PERFLOG\n\nThis is a more critical measure than Parse, which is XML->memory, because it\nincludes imports, SDK resolution, and MSBuild logic.",
          "committedDate": "2021-08-02T20:51:32Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "46690ea604ec1a61b87b4efc9e3b8ef04d1515dc",
          "message": "Drop Parse from DOTNET_PERFLOG\n\nIt's pretty rare that the XML parse phase of project load is a signifcant\npart of evaluation time; it's usually a tiny fraction of overall evaluation.",
          "committedDate": "2021-08-02T20:52:43Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Is this why the event names were surfaced inconsistently by tools like PerfView?\n> \n> \n> \n> Evaluate/Start\n> \n> EvaluateStop/Stop\n\nThat is exactly the case that caused me to ask about this and ask for help from @josalem who figured out the mismatch.\n\n> Can this change break tools relying on the old names, for example:\n> \n> https://github.com/dotnet/performance/blob/83f1fa22571b6fc4cd054b6ef07e647f12eb6efe/src/tools/ScenarioMeasurement/Startup/InnerLoopMsBuildParser.cs#L107-L115\n\nYes, I think so. Do you or @DrewScoggins  have an objection to fixing it here and following up with a fix there? I think we could possibly have a redundant stop event to preserve name compat but ideally not for the long term.\n\n",
        "createdAt": "2021-08-03T16:35:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> dotnet/performance@83f1fa2/src/tools/ScenarioMeasurement/Startup/InnerLoopMsBuildParser.cs#L107-L115\r\n\r\nYes, that code will break with this change, because the events should now show up as `Evaluate/Start` and `Evaluate/Stop`. Other code shouldn't break becuase the event names aren't changing. If code relied on the eventIDs, then you may need to change things. The EventSource will send a manifest along with the events, so you should know in advance which events you will see.\r\n\r\nIf you make this change, you may need to update any readers to account for the name change in `Evaluate/*` events, but also still work with the old manifest.\r\n\r\nFor some clarity here, `EventSource`:\r\n1. takes all of the methods not decorated with `NonEventAttribute`\r\n2. iterates them in declaration order\r\n3. creates a task named `EventName` whenever if finds a method named `EventNameStart`\r\n4. adds the `Stop` event IFF _the next event is named `EventNameStop`_.\r\n\r\nThe odd behavior prior to this patch (having an `EvaluateStop/Stop` event+task) is because `EvaluateStop` was defined later in the class with an event ID that wasn't `EvaluateStart`'s ID + 1.\r\n\r\nAnother way to fix this would be to explicitly define your tasks by adding a nested class named `Tasks` and assigning a task to your events directly, e.g.,\r\n\r\n```csharp\r\npublic sealed MySource : EventSource\r\n{\r\n\tpublic class Tasks\r\n\t{\r\n\t\tpublic const EventTask MyTask = (EventTask)1;\r\n\t}\r\n\r\n\t[Event(1, OpCode=OpCode.Start, Task=Tasks.MyTask, ...)]\r\n\tpublic void MyEventStart() => WriteEvent(1);\r\n\r\n\t// ...\r\n\r\n\t[Event(N, OpCode=OpCode.Stop, Task=Tasks.MyTask, ...)]\r\n\tpublic void MyEventStop() => WriteEvent(N);\r\n}\r\n```",
        "createdAt": "2021-08-03T16:56:05Z",
        "author": {
          "login": "josalem"
        }
      },
      {
        "body": "I am happy to make the change on our side, as long as I get a clear list of all of the new names of the events, but I am a little concerned about the breaking change in and of itself.\r\n\r\n- What is the extent of the impact to our customers?\r\n- Do we have a good method for communicating this break to our customers?\r\n- Do we plan to backport this change to older versions of MSBuild?",
        "createdAt": "2021-08-03T18:24:50Z",
        "author": {
          "login": "DrewScoggins"
        }
      },
      {
        "body": "Tested this with a fresh build of MSBuild and it looks good to me:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/128086028-ff2cb7d2-cf75-4b08-9559-61ffa1e7da69.png)\r\n\r\n\r\n> Another way to fix this would be to explicitly define your tasks by adding a nested class named `Tasks` and assigning a task to your events directly, e.g.,\r\n\r\nThis would be just as breaking for consumers who have strings like `EvaluateStop/Stop`, right?\r\n\r\n> * What is the extent of the impact to our customers?\r\n\r\nI am not aware of direct impact to customers; these ETW events are primarily for the dev team's use when investigating and this feels to me like a straightforward bug fix.\r\n\r\n> * Do we have a good method for communicating this break to our customers?\r\n\r\nWe can include it in our release notes; I don't think this rises to the level of interest of the overall VS or .NET 6 release notes.\r\n\r\n> * Do we plan to backport this change to older versions of MSBuild?\r\n\r\nI do not, but we conceivably could. Is it important enough to do so?",
        "createdAt": "2021-08-03T21:06:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > * What is the extent of the impact to our customers?\r\n> \r\n> I am not aware of direct impact to customers; these ETW events are primarily for the dev team's use when investigating and this feels to me like a straightforward bug fix.\r\n> \r\n> > * Do we have a good method for communicating this break to our customers?\r\n> \r\n> We can include it in our release notes; I don't think this rises to the level of interest of the overall VS or .NET 6 release notes.\r\n> \r\n> > * Do we plan to backport this change to older versions of MSBuild?\r\n> \r\n> I do not, but we conceivably could. Is it important enough to do so?\r\n\r\nSGTM",
        "createdAt": "2021-08-03T21:29:22Z",
        "author": {
          "login": "DrewScoggins"
        }
      },
      {
        "body": "@brianrob also pointed out offline that the compat bar would be higher if these events were documented. I don't think we've documented them and couldn't find any evidence of them on docs.microsoft.com, for example [searching for `\"Microsoft-Build\" EvaluateCondition`](https://docs.microsoft.com/en-us/search/?scope=MSBuild&view=vs-2019&terms=%22Microsoft-Build%22%20EvaluateCondition).\r\n\r\nI think we should go ahead.",
        "createdAt": "2021-08-03T21:41:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Well...\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md\r\n\r\nIt doesn't seem to have been updated for a while, but there is some Microsoft-endorsed documentation on them.\r\n\r\nI still agree with going ahead but thought I should throw that out there. I don't think that's even the right folder \ud83d\ude01",
        "createdAt": "2021-08-04T00:17:30Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think the previous comment was particularly helpful, but I'm not sure this one is either. It just sounds like an English version of \"projectFile for Evaluate,\" which you could get from the parameter's name and the function name. Be nice if we could just drop them, but I'm guessing some style checker would complain.",
              "createdAt": "2021-08-02T21:46:51Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -103,100 +103,100 @@ public void EvaluateConditionStop(string condition, bool result)\n         /// <summary>\n         /// Call this method to notify listeners of how the project data was evaluated.\n         /// </summary>\n-        /// <param name=\"projectFile\">Relevant information about where in the run of the progam it is.</param>\n-        [Event(11, Keywords = Keywords.All)]\n+        /// <param name=\"projectFile\">Filename of the project being evaluated.</param>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What does `Keywords.PerformanceLog` do here, and why remove it from ParseStartStop?",
              "createdAt": "2021-08-03T20:49:27Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -278,15 +278,15 @@ public void RarLogResultsStop()\n         /// <summary>\n         /// Call this method to notify listeners of profiling for the function that parses an XML document into a ProjectRootElement.\n         /// </summary>\n-        /// <param name=\"projectFileName\">Relevant information about where in the run of the progam it is.</param>\n-        [Event(33, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        /// <param name=\"projectFileName\">Filename of the project being evaluated.</param>\n+        [Event(33, Keywords = Keywords.All)]\n         public void ParseStart(string projectFileName)\n         {\n             WriteEvent(33, projectFileName);\n         }\n \n-        /// <param name=\"projectFileName\">Relevant information about where in the run of the progam it is.</param>\n-        [Event(34, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        /// <param name=\"projectFileName\">Filename of the project being evaluated.</param>\n+        [Event(34, Keywords = Keywords.All)]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Events tagged with `PerformanceLog` are included in the text perf log emitted when configured (#5861).\r\n\r\nAs to why remove this, I put this in the commit message\r\n\r\n> It's pretty rare that the XML parse phase of project load is a significant part of evaluation time; it's usually a tiny fraction of overall evaluation.",
              "createdAt": "2021-08-03T20:52:00Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -278,15 +278,15 @@ public void RarLogResultsStop()\n         /// <summary>\n         /// Call this method to notify listeners of profiling for the function that parses an XML document into a ProjectRootElement.\n         /// </summary>\n-        /// <param name=\"projectFileName\">Relevant information about where in the run of the progam it is.</param>\n-        [Event(33, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        /// <param name=\"projectFileName\">Filename of the project being evaluated.</param>\n+        [Event(33, Keywords = Keywords.All)]\n         public void ParseStart(string projectFileName)\n         {\n             WriteEvent(33, projectFileName);\n         }\n \n-        /// <param name=\"projectFileName\">Relevant information about where in the run of the progam it is.</param>\n-        [Event(34, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        /// <param name=\"projectFileName\">Filename of the project being evaluated.</param>\n+        [Event(34, Keywords = Keywords.All)]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}