{
  "number": 6192,
  "title": "Modify rar-service design doc",
  "body": "### Context\r\nDuring implementing of RAR code we realize we need to revisit some of our decisions from https://github.com/dotnet/msbuild/issues/5536\r\n\r\n### Changes Made\r\nUpdating .md document to reflect our current plan.",
  "state": "MERGED",
  "createdAt": "2021-02-24T11:17:05Z",
  "updatedAt": "2021-04-01T13:36:54Z",
  "closedAt": "2021-02-25T14:45:00Z",
  "mergedAt": "2021-02-25T14:45:00Z",
  "additions": 28,
  "deletions": 133,
  "changedFiles": 1,
  "headRefName": "rokonec/rar-design",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      },
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b4cfe3651b69a05e5b5453ca7774e9a2b5ba0c1c",
          "message": "Modify rar-service design doc",
          "committedDate": "2021-02-24T11:13:08Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5668911de9cd97baa79f8d817f2027b6f9776cc",
          "message": "Review changes - Ladi #1",
          "committedDate": "2021-02-24T17:20:53Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a001cb9417b7657257615a17b86c728c6d89013",
          "message": "Remove mutex usage from docs",
          "committedDate": "2021-02-25T11:36:09Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Can't comment on this part in-line as it's not being changed in the PR:\r\n> \r\n> _Connecting to the RAR node will not require any discovery of processes on computer._\r\n> \r\n> Do you think this is still true? Or are we reusing the existing handshake mechanism?\r\n\r\nWe plan to reuse existing handshaking. Connection to RAR service will be done by opening named-pipe including existing handshaking.",
        "createdAt": "2021-02-24T17:19:43Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "And, most importantly, serializing parameters passed to and from the out-of-proc task.",
              "createdAt": "2021-02-24T14:15:06Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).\n \n+RAR Node will adopt existing MSBuild infrastructure code, NodeProviderOutOfProcTaskHost and related, used for invoking tasks out of process.\n+\n+This code already solved many aspect of 'Out of process task invocation':\n+- logging\n+- environmental variables\n+- current directory path\n+- current culture\n+- cancellation\n+- etc...",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: typo \"... clients request**ing** data ...\" ?",
              "createdAt": "2021-02-24T14:17:49Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).\n \n+RAR Node will adopt existing MSBuild infrastructure code, NodeProviderOutOfProcTaskHost and related, used for invoking tasks out of process.\n+\n+This code already solved many aspect of 'Out of process task invocation':\n+- logging\n+- environmental variables\n+- current directory path\n+- current culture\n+- cancellation\n+- etc...\n+\n ### Execute RAR task\n \n Execution should be the same as it is now.\n \n There is already some layer of separation between Task interface and actual execution method. We will leverage this, and put the decision logic if to run locally or not into the \"wrapper\" method and so we will not have to modify this and in server-side execution we will directly call the internal execution method.\n \n+#### RAR Concurrency\n+\n There is one big concern and that is how to handle multiple requests at once. As right now, RAR task is not prepared for multi-thread use.\n \n+One of the biggest challenges with RAR as service, is to make execution and caching of RAR task thread-safe, since in most cases there will be multiple clients request data from it at once.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: typo \"... ha**ve** ...\"",
              "createdAt": "2021-02-24T14:20:56Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).\n \n+RAR Node will adopt existing MSBuild infrastructure code, NodeProviderOutOfProcTaskHost and related, used for invoking tasks out of process.\n+\n+This code already solved many aspect of 'Out of process task invocation':\n+- logging\n+- environmental variables\n+- current directory path\n+- current culture\n+- cancellation\n+- etc...\n+\n ### Execute RAR task\n \n Execution should be the same as it is now.\n \n There is already some layer of separation between Task interface and actual execution method. We will leverage this, and put the decision logic if to run locally or not into the \"wrapper\" method and so we will not have to modify this and in server-side execution we will directly call the internal execution method.\n \n+#### RAR Concurrency\n+\n There is one big concern and that is how to handle multiple requests at once. As right now, RAR task is not prepared for multi-thread use.\n \n+One of the biggest challenges with RAR as service, is to make execution and caching of RAR task thread-safe, since in most cases there will be multiple clients request data from it at once.\n+\n+Following areas has to be addressed to allow concurrent execution of RAR:",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f \r\nHow confident are you that this list is complete?",
              "createdAt": "2021-02-24T14:27:13Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).\n \n+RAR Node will adopt existing MSBuild infrastructure code, NodeProviderOutOfProcTaskHost and related, used for invoking tasks out of process.\n+\n+This code already solved many aspect of 'Out of process task invocation':\n+- logging\n+- environmental variables\n+- current directory path\n+- current culture\n+- cancellation\n+- etc...\n+\n ### Execute RAR task\n \n Execution should be the same as it is now.\n \n There is already some layer of separation between Task interface and actual execution method. We will leverage this, and put the decision logic if to run locally or not into the \"wrapper\" method and so we will not have to modify this and in server-side execution we will directly call the internal execution method.\n \n+#### RAR Concurrency\n+\n There is one big concern and that is how to handle multiple requests at once. As right now, RAR task is not prepared for multi-thread use.\n \n+One of the biggest challenges with RAR as service, is to make execution and caching of RAR task thread-safe, since in most cases there will be multiple clients request data from it at once.\n+\n+Following areas has to be addressed to allow concurrent execution of RAR:\n+\n+- thread safety (static variables, shared data structures, caching, ...)\n+- environmental variables virtualization\n+- current directory virtualization\n+- current culture isolation",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Considence level about 85% :-)\r\nI have modified above sentence to hint that this list might be incomplete.",
              "createdAt": "2021-02-24T16:56:13Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).\n \n+RAR Node will adopt existing MSBuild infrastructure code, NodeProviderOutOfProcTaskHost and related, used for invoking tasks out of process.\n+\n+This code already solved many aspect of 'Out of process task invocation':\n+- logging\n+- environmental variables\n+- current directory path\n+- current culture\n+- cancellation\n+- etc...\n+\n ### Execute RAR task\n \n Execution should be the same as it is now.\n \n There is already some layer of separation between Task interface and actual execution method. We will leverage this, and put the decision logic if to run locally or not into the \"wrapper\" method and so we will not have to modify this and in server-side execution we will directly call the internal execution method.\n \n+#### RAR Concurrency\n+\n There is one big concern and that is how to handle multiple requests at once. As right now, RAR task is not prepared for multi-thread use.\n \n+One of the biggest challenges with RAR as service, is to make execution and caching of RAR task thread-safe, since in most cases there will be multiple clients request data from it at once.\n+\n+Following areas has to be addressed to allow concurrent execution of RAR:\n+\n+- thread safety (static variables, shared data structures, caching, ...)\n+- environmental variables virtualization\n+- current directory virtualization\n+- current culture isolation",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we still need a mutex? If multiple nodes try to create a pipe of the same name, all but one will fail. Isn't it enough to implement mutual exclusion?",
              "createdAt": "2021-02-24T14:36:31Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It should be enough -AFAIK -  I wasn't focusing at that area. Will update it.",
              "createdAt": "2021-02-24T17:10:28Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I an unaware of 'user's only RAR node' means. Can you please elaborate?",
              "createdAt": "2021-02-24T17:14:03Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "This refers to the requirement that there shouldn't be more than one RAR node running for the given user (in a given session?). In other words, we want a singleton process, same as the Roslyn compilation server, for example.\r\n\r\n(Looks like you tagged somebody else in your comment.)",
              "createdAt": "2021-02-25T07:28:02Z",
              "path": "documentation/specs/rar-as-service.md",
              "diffHunk": "@@ -42,14 +42,35 @@ This step will create new process which will act as RAR node. It will also pass\n \n We will use Mutex (as in [Roslyn](https://github.com/dotnet/roslyn/blob/838874b1b817db84ce146bef690cc95a39c213a5/src/Compilers/Server/VBCSCompiler/BuildServerController.cs#L143)) to ensure we don't create two RAR nodes at once. Its name must encode whether it is the user's only RAR node, including user name, administrator privileges, and some initial settings for the node. Such a name could be: `MSBuild.RAR.ostorc.7`, where **MSBuild.RAR** is its prefix, **ostorc** is the user who called MSBuild, and **7** represents encoded settings (flag enum).",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}