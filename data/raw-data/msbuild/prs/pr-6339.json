{
  "number": 6339,
  "title": "Add support for embedding arbitrary files into binlog",
  "body": "It would be very useful to embed more than just the project files into the binlog. For example, project.assets.json is a common request: https://github.com/dotnet/msbuild/issues/3529. global.json or nuget.config would be other examples. Some users may want to embed all *.cs files as well.\r\n\r\nAdd a special EmbedInBinlog item type recognized by BuildEventArgsWriter. If after evaluation the items contain EmbedInBinlog, all such items will be logged if the evaluated include points to a full file path that exists on disk. A given file can be mentioned more than once, but will only be embedded once. If a file doesn't exist or is empty, it will not be embedded. If the item is added from a target (after evaluation is done), it will not be embedded.\r\n\r\nChecking for EmbedInBinlog is done in BuildEventArgsWriter to reuse the complicated and performance-optimized logic of iterating over all items.\r\n\r\nThis PR is a prerequisite for https://github.com/dotnet/msbuild/issues/3529",
  "state": "MERGED",
  "createdAt": "2021-04-10T22:31:11Z",
  "updatedAt": "2021-04-21T16:57:57Z",
  "closedAt": "2021-04-21T16:57:56Z",
  "mergedAt": "2021-04-21T16:57:56Z",
  "additions": 49,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "dev/kirillo/embedInBinlog",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1d97b48cb283a939124315f9547ac039d5ca6147",
          "message": "Add support for embedding arbitrary files into binlog\n\nIt would be very useful to embed more than just the project files into the binlog. For example, project.assets.json is a common request: https://github.com/dotnet/msbuild/issues/3529. global.json or nuget.config would be other examples. Some users may want to embed all *.cs files as well.\n\nAdd a special EmbedInBinlog item type recognized by BuildEventArgsWriter. If after evaluation the items contain EmbedInBinlog, all such items will be logged if the evaluated include points to a full file path that exists on disk. A given file can be mentioned more than once, but will only be embedded once. If a file doesn't exist or is empty, it will not be embedded. If the item is added from a target (after evaluation is done), it will not be embedded.\n\nChecking for EmbedInBinlog is done in BuildEventArgsWriter to reuse the complicated and performance-optimized logic of iterating over all items.",
          "committedDate": "2021-04-10T22:30:20Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "92632a96e59c1e2cb7d90aef1ec23eca6bd6bcdf",
          "message": "Add ItemTypeNames.EmbedInBinlog",
          "committedDate": "2021-04-15T17:16:14Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efec80c6d82419b3168a0922002c3deebfe4dadd",
          "message": "Don't subscribe to EmbedFile if not embedding any files",
          "committedDate": "2021-04-16T18:13:46Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've tested this with embedding project.assets.json:\r\nhttps://github.com/dotnet/sdk/pull/16840\r\n\r\nSurprisingly, there's no perceptible slowdown of builds:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/114292552-1d99bb80-9a44-11eb-81d5-8ac24d5b31a7.png)\r\n\r\nI'm guessing all the extra json file compressing cost is hidden on a background thread:\r\nhttps://github.com/dotnet/msbuild/blob/9bcc06cbe19ae2482ab18eab90a82fd079b26897/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs#L81-L83\r\n\r\nBinlog size does increase however from 3.5 MB to 5 MB (the size of the files blob increases from 400 K to 1.9 MB). I suspect that for larger builds the size increase will grow slower than linearly:\r\n\r\n1. number of project.assets.json files grows with the number of projects\r\n2. the contents of all files are similar and probably compress better together\r\n\r\nWe'll need to think about whether to have it off by default.",
        "createdAt": "2021-04-11T04:38:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I did more testing with project.assets.json on Roslyn.sln incremental and the build times are:\r\n\r\nRoslyn no embed | Roslyn embed\r\n-- | --\r\n39.882 | 40.026\r\n41.874 | 40.937\r\n43.024 | 42.573\r\n42.261 | 40.806\r\n41.49 | 41.73\r\nAverage: 41.706 s | Average: 41.214 s\r\n\r\nBinlog size increased from 15.8 MB -> 21.1 MB. The inner files archive increased from 1.3 MB -> 6.7 MB.\r\nA bit sad to lose a few MBs in size after all these savings, maybe project.assets.json should be off by default. \r\n\r\nNote that this PR by itself has no adverse effects on either build speed or binlog size. The effects only show with https://github.com/dotnet/sdk/pull/16840",
        "createdAt": "2021-04-11T18:27:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to check the `EmbedFile` event for null here and bail right away?",
              "createdAt": "2021-04-12T15:16:23Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "In theory, but in our scenario we know it\u2019s not null, so probably doesn\u2019t matter either way. I was just using the ?.Invoke pattern out of habit.",
              "createdAt": "2021-04-12T16:39:31Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Apologies for scrutinizing and hope I'm not misreading the code. `EmbedFile` is subscribed to always, yes, but the handler `EventArgsWriter_EmbedFile` is a conditional no-op. And that condition looks real, i.e. `projectImportsCollector` does not always get created. Are you sure we can't hoist the check and avoid running the loop here in some scenarios?",
              "createdAt": "2021-04-16T07:18:16Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh, I see what you're saying. Sounds good.",
              "createdAt": "2021-04-16T18:10:41Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "How's this?",
              "createdAt": "2021-04-16T18:13:57Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Awesome, thank you!",
              "createdAt": "2021-04-16T20:01:41Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Put special item types known by the engine here: [https://github.com/dotnet/msbuild/blob/main/src/Shared/Constants.cs#L126](https://github.com/dotnet/msbuild/blob/main/src/Shared/Constants.cs#L126)",
              "createdAt": "2021-04-15T00:14:26Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "good idea, done",
              "createdAt": "2021-04-15T17:16:28Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What if these itemspecs are plain strings that do not refer to files, or they are paths but the paths do not exist? Should you error / warn on these?",
              "createdAt": "2021-04-15T00:17:08Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {\n+            if (!string.Equals(itemType, EmbedInBinlogItemType, StringComparison.OrdinalIgnoreCase) || itemList is not IEnumerable list)\n+            {\n+                return;\n+            }\n+\n+            foreach (var item in list)\n+            {\n+                if (item is ITaskItem taskItem && !string.IsNullOrEmpty(taskItem.ItemSpec))",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "they will be silently skipped, I think this is acceptable",
              "createdAt": "2021-04-15T00:30:19Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {\n+            if (!string.Equals(itemType, EmbedInBinlogItemType, StringComparison.OrdinalIgnoreCase) || itemList is not IEnumerable list)\n+            {\n+                return;\n+            }\n+\n+            foreach (var item in list)\n+            {\n+                if (item is ITaskItem taskItem && !string.IsNullOrEmpty(taskItem.ItemSpec))",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I assume that each project in the graph will add the same files over and over (because I assume the EmbedInBinlog item will be added either in directory.build.props or the sdk itself). Is that alright? Do you need to dedupe?",
              "createdAt": "2021-04-15T00:18:32Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {\n+            if (!string.Equals(itemType, EmbedInBinlogItemType, StringComparison.OrdinalIgnoreCase) || itemList is not IEnumerable list)\n+            {\n+                return;\n+            }\n+\n+            foreach (var item in list)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "it\u2019s deduped, there\u2019s a hashset",
              "createdAt": "2021-04-15T00:30:46Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -823,6 +832,28 @@ private void WriteProjectItems(IEnumerable items)\n             }\n         }\n \n+        private const string EmbedInBinlogItemType = \"EmbedInBinlog\";\n+\n+        private void CheckForFilesToEmbed(string itemType, object itemList)\n+        {\n+            if (!string.Equals(itemType, EmbedInBinlogItemType, StringComparison.OrdinalIgnoreCase) || itemList is not IEnumerable list)\n+            {\n+                return;\n+            }\n+\n+            foreach (var item in list)",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}