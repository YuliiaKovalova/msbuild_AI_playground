{
  "number": 10500,
  "title": "Skip BuildCheck on restore",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/9747\r\n\r\n### Context\r\nWe don't want BuildCheck to run on restore, so we are skipping that.\r\n\r\n### Changes Made\r\nChecked if we are restoring on the `RequestBuilder`, as it is the place where we call BuildCheckManager directly to run the checks. And added extra handling to the BuildChecks logs for the `BuildSubmissionStartedEventArgs`, to account for out-of-proc processing of analyzers. When we get the event, it checks if it is running during the restore. If it is, all events handling is disabled until another `BuildSubmissionStartedEventArgs` to signal that the restore phase has ended.\r\n\r\n### Testing\r\nAdded a test to run restore target without the build and check if there are BuildCheck outputs on it.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-08T10:41:23Z",
  "updatedAt": "2024-10-22T12:07:14Z",
  "closedAt": "2024-08-09T08:20:41Z",
  "mergedAt": "2024-08-09T08:20:41Z",
  "additions": 50,
  "deletions": 8,
  "changedFiles": 4,
  "headRefName": "skipRestore",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c8c8201fc4505665c33833bb5b3f3cd50070efb4",
          "message": "Skip restore on RequestBuilder",
          "committedDate": "2024-08-08T10:33:59Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17775e6a5e227a9cc63ca23d382a924300547083",
          "message": "Base test",
          "committedDate": "2024-08-08T10:35:52Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68ce1cba84da9aca3a04105e44e6398fe4341aa0",
          "message": "Logger handling of new event",
          "committedDate": "2024-08-08T10:36:04Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7034359b658c751f45532c0cfca21633541d8c8a",
          "message": "PR comments and fix test",
          "committedDate": "2024-08-08T14:29:14Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ba7c18d2d1176119bb82fffc4579a647926e1394",
          "message": "fixed test v2",
          "committedDate": "2024-08-08T14:56:25Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1bb626eb64a6f7f6606272dc1fb884a0473a1498",
          "message": "Address comments",
          "committedDate": "2024-08-08T15:08:59Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3643e9ee851650f3b0def3ebb46f99280f46248e",
          "message": "Merge branch 'main' into skipRestore",
          "committedDate": "2024-08-08T16:29:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d333854e0c6c3d85339ec311f2d40fabdf1676e",
          "message": "Merge branch 'main' into skipRestore",
          "committedDate": "2024-08-08T19:33:35Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb3b4c32275c338f95ccd286574606de8a74fdf5",
          "message": "Fix and refactor",
          "committedDate": "2024-08-09T07:04:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "(Disabling automerge - let's merge after renaming merged)",
        "createdAt": "2024-08-08T15:17:16Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Seems redundant",
              "createdAt": "2024-08-08T10:45:03Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -4,6 +4,7 @@\n using System;\n using System.Collections.Concurrent;\n using System.Collections.Generic;\n+using System.Diagnostics;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It feels this code can be a bit more self expressive - e.g.:\r\n\r\n```suggestion\r\n            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is not null;\r\n```",
              "createdAt": "2024-08-08T10:46:38Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1105,9 +1106,13 @@ private async Task<BuildResult> BuildProject()\n             ErrorUtilities.VerifyThrow(_targetBuilder != null, \"Target builder is null\");\n \n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n+            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels overcomplicated - we should be able to skip everything if BuildSubmissionStarted indicates restore and resume if next BuildSubmissionStarted indicates otherwise",
              "createdAt": "2024-08-08T10:48:36Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -20,15 +21,19 @@ internal class BuildCheckBuildEventHandler\n \n     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n \n+    private IDictionary<int, bool> _projectRestore;\n+\n     internal BuildCheckBuildEventHandler(\n         IAnalysisContextFactory analyzerContextFactory,\n         IBuildCheckManager buildCheckManager)\n     {\n         _buildCheckManager = buildCheckManager;\n         _analyzerContextFactory = analyzerContextFactory;\n \n+        _projectRestore = new Dictionary<int, bool>();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This second condition could be merged to the parent one",
              "createdAt": "2024-08-08T10:59:19Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -45,12 +50,38 @@ internal class BuildCheckBuildEventHandler\n \n     public void HandleBuildEvent(BuildEventArgs e)\n     {\n+        if (\n+            e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&\n+            e.BuildEventContext is not null &&\n+            _projectRestore.TryGetValue(e.BuildEventContext.SubmissionId, out bool isRestoring) &&\n+            isRestoring)\n+        {\n+            return;\n+        }\n+\n         if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n         {\n             handler(e);\n         }\n     }\n \n+    private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n+    {\n+        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        {\n+            if (isRestoring)",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "There is also `else` below so I am not quite sure about it. \r\nThis code seems to be overcomplicated to me, while it is correct. Given that the `BuildSubmissionStartedEventArgs` is sent once per submission, how this submission could be in the dictionary already? Or I am wrong, and it could be sent more times?",
              "createdAt": "2024-08-08T12:46:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -45,12 +50,38 @@ internal class BuildCheckBuildEventHandler\n \n     public void HandleBuildEvent(BuildEventArgs e)\n     {\n+        if (\n+            e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&\n+            e.BuildEventContext is not null &&\n+            _projectRestore.TryGetValue(e.BuildEventContext.SubmissionId, out bool isRestoring) &&\n+            isRestoring)\n+        {\n+            return;\n+        }\n+\n         if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n         {\n             handler(e);\n         }\n     }\n \n+    private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n+    {\n+        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        {\n+            if (isRestoring)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Yes, it was overcomplicated as I was still thinking about the prior implementation we had. I simplified for the restoring to just be a bool to check instead of a dictionary ",
              "createdAt": "2024-08-08T13:16:35Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -45,12 +50,38 @@ internal class BuildCheckBuildEventHandler\n \n     public void HandleBuildEvent(BuildEventArgs e)\n     {\n+        if (\n+            e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&\n+            e.BuildEventContext is not null &&\n+            _projectRestore.TryGetValue(e.BuildEventContext.SubmissionId, out bool isRestoring) &&\n+            isRestoring)\n+        {\n+            return;\n+        }\n+\n         if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n         {\n             handler(e);\n         }\n     }\n \n+    private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n+    {\n+        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        {\n+            if (isRestoring)",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: consider adding a comment before this code for its intent?\r\n```suggestion\r\n        // Skip BuildCheck on restore\r\n        if (\r\n```",
              "createdAt": "2024-08-08T12:50:06Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -45,12 +50,38 @@ internal class BuildCheckBuildEventHandler\n \n     public void HandleBuildEvent(BuildEventArgs e)\n     {\n+        if (",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Should start with \"_\" for uniformity.",
              "createdAt": "2024-08-08T14:49:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -20,6 +21,8 @@ internal class BuildCheckBuildEventHandler\n \n     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n \n+    private bool isRestoring = false;",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we sure that there could not be two submissions with restore in a row? As far as I know it should be... ",
              "createdAt": "2024-08-08T15:01:24Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -67,18 +66,14 @@ public void HandleBuildEvent(BuildEventArgs e)\n \n     private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n     {\n-        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        if (isRestoring)\n         {\n-            if (isRestoring)\n-            {\n-                _projectRestore[eventArgs.SubmissionId] = false;\n-            }\n+            isRestoring = false;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Let's play it sure - extract the restore indicating property and set the _isRestoring  based on that",
              "createdAt": "2024-08-08T15:04:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -67,18 +66,14 @@ public void HandleBuildEvent(BuildEventArgs e)\n \n     private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n     {\n-        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        if (isRestoring)\n         {\n-            if (isRestoring)\n-            {\n-                _projectRestore[eventArgs.SubmissionId] = false;\n-            }\n+            isRestoring = false;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I agree",
              "createdAt": "2024-08-08T15:07:52Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -67,18 +66,14 @@ public void HandleBuildEvent(BuildEventArgs e)\n \n     private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)\n     {\n-        if (_projectRestore.TryGetValue(eventArgs.SubmissionId, out bool isRestoring))\n+        if (isRestoring)\n         {\n-            if (isRestoring)\n-            {\n-                _projectRestore[eventArgs.SubmissionId] = false;\n-            }\n+            isRestoring = false;",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is the last condition needed?",
              "createdAt": "2024-08-08T15:03:53Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -45,12 +49,34 @@ internal class BuildCheckBuildEventHandler\n \n     public void HandleBuildEvent(BuildEventArgs e)\n     {\n+        // Skip event handling during restore phase\n+        if (\n+            isRestoring &&\n+            e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&\n+            e.BuildEventContext is not null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}