{
  "number": 6414,
  "title": "Fix NullReferenceException when expanding property functions that return null",
  "body": "Fixes #6413\r\n\r\n### Context\r\n\r\nThis is a regression introduced in #6128. MSBuild crashes when evaluating a project where a property function returns null and its result is concatenated with another non-empty value.\r\n\r\n### Changes Made\r\n\r\nAdd a null check.\r\n\r\n### Testing\r\n\r\nFixed and extended the relevant test case.\r\n\r\n### Notes\r\n\r\nEnable \"Hide whitespace changes\" when reviewing this change.",
  "state": "MERGED",
  "createdAt": "2021-05-05T21:18:07Z",
  "updatedAt": "2021-05-06T07:49:25Z",
  "closedAt": "2021-05-06T07:49:21Z",
  "mergedAt": "2021-05-06T07:49:21Z",
  "additions": 18,
  "deletions": 12,
  "changedFiles": 2,
  "headRefName": "6413-fix-null-evaluation-fail",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "61b8ddb162a36f57bbd1cf3246bfa6b5c8f877f7",
          "message": "Fix NullReferenceException when expanding property functions that return null",
          "committedDate": "2021-05-05T21:17:18Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Was this just a fancy way to get `null` before, and you're using the easier approach now?",
              "createdAt": "2021-05-05T21:25:13Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2010,13 +2010,16 @@ public void PropertyFunctionNullArgument()\n         public void PropertyFunctionNullReturn()\n         {\n             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n-            pg.Set(ProjectPropertyInstance.Create(\"SomeStuff\", \"This IS SOME STUff\"));\n \n             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n \n-            string result = expander.ExpandIntoStringLeaveEscaped(\"$([System.Convert]::ChangeType(,$(SomeStuff.GetType())))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It was not evaluating to `null` before so not hitting the intended code path. Presumably because the `(,` argument omission makes us pass an empty string.",
              "createdAt": "2021-05-05T21:51:52Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2010,13 +2010,16 @@ public void PropertyFunctionNullArgument()\n         public void PropertyFunctionNullReturn()\n         {\n             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n-            pg.Set(ProjectPropertyInstance.Create(\"SomeStuff\", \"This IS SOME STUff\"));\n \n             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n \n-            string result = expander.ExpandIntoStringLeaveEscaped(\"$([System.Convert]::ChangeType(,$(SomeStuff.GetType())))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm now reminded that if an environment var doesn't exist, GetEnvironmentVariable returns null.",
              "createdAt": "2021-05-05T21:30:19Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2010,13 +2010,16 @@ public void PropertyFunctionNullArgument()\n         public void PropertyFunctionNullReturn()\n         {\n             PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n-            pg.Set(ProjectPropertyInstance.Create(\"SomeStuff\", \"This IS SOME STUff\"));\n \n             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n \n-            string result = expander.ExpandIntoStringLeaveEscaped(\"$([System.Convert]::ChangeType(,$(SomeStuff.GetType())))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);\n-\n+            // The null-returning function is the only thing in the expression.\n+            string result = expander.ExpandIntoStringLeaveEscaped(\"$([System.Environment]::GetEnvironmentVariable(`_NonExistentVar`))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}