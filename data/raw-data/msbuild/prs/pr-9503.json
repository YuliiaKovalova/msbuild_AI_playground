{
  "number": 9503,
  "title": "Fix sln-based graph builds with non-built projects with solution dependencies",
  "body": "Fixes #9500\r\n\r\nPreviously the code was considering all projects when building up the solution dependencies and later that was blowing up due to including projects which weren't built. This moves the logic to the same loop that already filters projects which don't build so should be (trivially) more efficient anyway.",
  "state": "MERGED",
  "createdAt": "2023-12-06T16:13:10Z",
  "updatedAt": "2023-12-18T20:17:17Z",
  "closedAt": "2023-12-18T17:23:23Z",
  "mergedAt": "2023-12-18T17:23:23Z",
  "additions": 85,
  "deletions": 50,
  "changedFiles": 2,
  "headRefName": "fix-sln-graph-nobuild-with-deps",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "dfederm"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e73d3f3f78f73a31656f79d463d51483ce3624ff",
          "message": "Fix sln-based graph builds with non-built projects with solution dependencies",
          "committedDate": "2023-12-06T16:10:27Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7241306fb67af9555e24a871f5a706601ebf7458",
          "message": "Update src/Build.UnitTests/Graph/ProjectGraph_Tests.cs\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2023-12-11T14:09:44Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57c7bae8fd736d0788937be7780685f2caf3db57",
          "message": "Add more to UT",
          "committedDate": "2023-12-11T15:58:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Does the ordering that was provided here before matter now? Maybe alter the test sln to have the project is dependent on the other project appear before it to validate?",
              "createdAt": "2023-12-06T17:22:57Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -367,43 +400,6 @@ SolutionConfigurationInSolution SelectSolutionConfiguration(SolutionFile solutio\n                 var partiallyMarchedConfig = projectConfigs.FirstOrDefault(pc => pc.Value.ConfigurationName.Equals(solutionConfig.ConfigurationName, StringComparison.OrdinalIgnoreCase)).Value;\n                 return partiallyMarchedConfig ?? projectConfigs.First().Value;\n             }\n-\n-            IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetSolutionDependencies(SolutionFile solutionFile)\n-            {\n-                var solutionDependencies = new Dictionary<string, IReadOnlyCollection<string>>();\n-\n-                foreach (var projectWithDependencies in solutionFile.ProjectsInOrder.Where(p => p.Dependencies.Count != 0))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Order doesn't matter here as the loop body doesn't read anything from the collections it's writing to.\r\n\r\nI'll add a UT though just to cover this case anyway though.",
              "createdAt": "2023-12-11T15:48:23Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -367,43 +400,6 @@ SolutionConfigurationInSolution SelectSolutionConfiguration(SolutionFile solutio\n                 var partiallyMarchedConfig = projectConfigs.FirstOrDefault(pc => pc.Value.ConfigurationName.Equals(solutionConfig.ConfigurationName, StringComparison.OrdinalIgnoreCase)).Value;\n                 return partiallyMarchedConfig ?? projectConfigs.First().Value;\n             }\n-\n-            IReadOnlyDictionary<string, IReadOnlyCollection<string>> GetSolutionDependencies(SolutionFile solutionFile)\n-            {\n-                var solutionDependencies = new Dictionary<string, IReadOnlyCollection<string>>();\n-\n-                foreach (var projectWithDependencies in solutionFile.ProjectsInOrder.Where(p => p.Dependencies.Count != 0))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                project7Xml.Save(project7Path);\r\n```",
              "createdAt": "2023-12-11T10:55:25Z",
              "path": "src/Build.UnitTests/Graph/ProjectGraph_Tests.cs",
              "diffHunk": "@@ -814,20 +820,23 @@ public void ConstructGraphWithSolution()\n                 ProjectRootElement project4Xml = ProjectRootElement.Create();\n                 ProjectRootElement project5Xml = ProjectRootElement.Create();\n                 ProjectRootElement project6Xml = ProjectRootElement.Create();\n+                ProjectRootElement project7Xml = ProjectRootElement.Create();\n \n                 string project1Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project1.csproj\");\n                 string project2Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project2.vcxproj\");\n                 string project3Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project3.vcxproj\");\n                 string project4Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project4.vcxproj\");\n                 string project5Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project5.vcxproj\");\n                 string project6Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project6.wapproj\");\n+                string project7Path = Path.Combine(env.DefaultTestDirectory.Path, \"Project7.csproj\");\n \n                 project1Xml.Save(project1Path);\n                 project2Xml.Save(project2Path);\n                 project3Xml.Save(project3Path);\n                 project4Xml.Save(project4Path);\n                 project5Xml.Save(project5Path);\n                 project6Xml.Save(project6Path);\n+                project6Xml.Save(project7Path);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}