{
  "number": 8872,
  "title": "Add solution global properties for solution-based graphs",
  "body": "Add solution global properties for solution-based graphs\r\n\r\nMore in the vein of #8625 and #8855. Getting sln-based graph builds to be more aligned with non-graph sln builds.",
  "state": "MERGED",
  "createdAt": "2023-06-12T21:23:44Z",
  "updatedAt": "2023-06-15T10:29:17Z",
  "closedAt": "2023-06-15T10:29:16Z",
  "mergedAt": "2023-06-15T10:29:16Z",
  "additions": 42,
  "deletions": 8,
  "changedFiles": 2,
  "headRefName": "graph-sln-props",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ac01c9838f81f329473a875a5a250a1c8a615c2a",
          "message": "Add solution global properties for solution-based graphs",
          "committedDate": "2023-06-12T21:20:59Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97bbae3e029ee95a328c78c140c8ebe36642fca2",
          "message": "Update src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-06-12T21:41:30Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Any way to validate that this is the full set of magic solution properties? I can't think of a great one myself.\r\n\r\nI compared binlogs, but I don't think you're talking about manual validation.\r\n\r\nThe only thing I can think of is to create a helper in `SolutionProjectGenerator`, but even then it uses a `ProjectPropertyGroupElement` while the graph code uses a `ImmutableDictionary<string, string>.Builder`. So extra allocation there to copy the collection or taking some `Action<string, string>` which also would allocate.",
        "createdAt": "2023-06-12T21:45:59Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I found this very confusing; possible clarification:\r\n\r\n```suggestion\r\n            // Remove some properties for comparison purposes as we are comparing a graph created from a solution against the graph (without solution properties) used to make the solution.\r\n```",
              "createdAt": "2023-06-12T21:29:24Z",
              "path": "src/Build.UnitTests/Graph/GraphLoadedFromSolution_tests.cs",
              "diffHunk": "@@ -524,18 +524,37 @@ public void SolutionsCanInjectEdgesIntoTheProjectGraph(Dictionary<int, int[]> ed\n \n             var graphFromSolutionEdges = graphFromSolution.TestOnly_Edges.TestOnly_AsConfigurationMetadata();\n \n-            // Solutions add the CurrentSolutionConfigurationContents global property for platform resolution\n-            foreach ((ConfigurationMetadata, ConfigurationMetadata) graphFromSolutionEdge in graphFromSolutionEdges.Keys)\n+            // These are global properties added by GraphBuilder when building a solution\n+            HashSet<string> propertiesToIgnore = new(StringComparer.OrdinalIgnoreCase)\n             {\n-                graphFromSolutionEdge.Item1.GlobalProperties.ShouldContainKey(\"CurrentSolutionConfigurationContents\");\n-                graphFromSolutionEdge.Item2.GlobalProperties.ShouldContainKey(\"CurrentSolutionConfigurationContents\");\n+                \"CurrentSolutionConfigurationContents\",\n+                \"BuildingSolutionFile\",\n+                \"SolutionDir\",\n+                \"SolutionExt\",\n+                \"SolutionFileName\",\n+                \"SolutionName\",\n+                SolutionProjectGenerator.SolutionPathPropertyName\n+            };\n+\n+            // Solutions add these global properties\n+            foreach (string propertyToIgnore in propertiesToIgnore)\n+            {\n+                foreach ((ConfigurationMetadata, ConfigurationMetadata) graphFromSolutionEdge in graphFromSolutionEdges.Keys)\n+                {\n+                    graphFromSolutionEdge.Item1.GlobalProperties.ShouldContainKey(propertyToIgnore);\n+                    graphFromSolutionEdge.Item2.GlobalProperties.ShouldContainKey(propertyToIgnore);\n+                }\n             }\n \n-            // Remove CurrentSolutionConfigurationContents for comparison purposes. This is done as a separate pass since some edges may be sharing an instance.\n-            foreach ((ConfigurationMetadata, ConfigurationMetadata) graphFromSolutionEdge in graphFromSolutionEdges.Keys)\n+            // Remove some properties for comparison purposes as we are comparing a graph created with and without a solution.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm tempted to recommend EnsureTrailingSlash, but this is how it does it in SPG, so I can't really complain.",
              "createdAt": "2023-06-12T21:58:59Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -280,8 +281,22 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n \n             SolutionConfigurationInSolution currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionEntryPoint.GlobalProperties);\n \n+            // Mimic behavior of SolutionProjectGenerator\n             string solutionConfigurationXml = SolutionProjectGenerator.GetSolutionConfiguration(solution, currentSolutionConfiguration);\n             solutionGlobalPropertiesBuilder[\"CurrentSolutionConfigurationContents\"] = solutionConfigurationXml;\n+            solutionGlobalPropertiesBuilder[\"BuildingSolutionFile\"] = \"true\";\n+\n+            string solutionDirectoryName = solution.SolutionFileDirectory;\n+            if (!solutionDirectoryName.EndsWith(Path.DirectorySeparatorChar.ToString(), StringComparison.Ordinal))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I was considering the same, but `EnsureTrailingSlash` does do a small amount of \"other stuff\" (eg slash replacement I think) so decided not to risk it.",
              "createdAt": "2023-06-12T23:12:58Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -280,8 +281,22 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n \n             SolutionConfigurationInSolution currentSolutionConfiguration = SelectSolutionConfiguration(solution, solutionEntryPoint.GlobalProperties);\n \n+            // Mimic behavior of SolutionProjectGenerator\n             string solutionConfigurationXml = SolutionProjectGenerator.GetSolutionConfiguration(solution, currentSolutionConfiguration);\n             solutionGlobalPropertiesBuilder[\"CurrentSolutionConfigurationContents\"] = solutionConfigurationXml;\n+            solutionGlobalPropertiesBuilder[\"BuildingSolutionFile\"] = \"true\";\n+\n+            string solutionDirectoryName = solution.SolutionFileDirectory;\n+            if (!solutionDirectoryName.EndsWith(Path.DirectorySeparatorChar.ToString(), StringComparison.Ordinal))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}