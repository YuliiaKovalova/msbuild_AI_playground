{
  "number": 8654,
  "title": "[automated] Merge branch 'vs17.6' => 'main'",
  "body": "I detected changes in the vs17.6 branch which have not been merged yet to main. I'm a robot and am [configured](https://github.com/dotnet/versions/blob/main/Maestro/subscriptions.json) to help you automatically keep main up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on vs17.6 by the following committers:\n\n* @rainersigwald\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout vs17.6\r\ngit pull --ff-only\r\ngit checkout main\r\ngit pull --ff-only\r\ngit merge --no-ff vs17.6\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/msbuild HEAD:merge/vs17.6-to-main\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/msbuild HEAD:merge/vs17.6-to-main\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/vs17.6-to-main'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/vs17.6-to-main main\r\ngit pull https://github.com/dotnet-maestro-bot/msbuild merge/vs17.6-to-main\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/msbuild HEAD:merge/vs17.6-to-main\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/vs17.6-to-main main\r\ngit pull git@github.com:dotnet-maestro-bot/msbuild merge/vs17.6-to-main\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/msbuild HEAD:merge/vs17.6-to-main\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n",
  "state": "MERGED",
  "createdAt": "2023-04-11T17:39:39Z",
  "updatedAt": "2023-04-12T22:20:28Z",
  "closedAt": "2023-04-12T22:20:27Z",
  "mergedAt": "2023-04-12T22:20:27Z",
  "additions": 78,
  "deletions": 3,
  "changedFiles": 4,
  "headRefName": "merge/vs17.6-to-main",
  "isDraft": false,
  "author": {
    "login": "dotnet-maestro-bot"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8ffc3fe3dc15b17ecf39a289deb5cd7fb65993a0",
          "message": "Avoid overly-specific cast in bulk metadata copy (#8646)\n\nThe return value of `ITaskItem.CloneCustomMetadata` is an `IDictionary`,\r\nwhich is generally (in modern MSBuild) backed by a\r\n`Dictionary<string, string>`, but can be (when given an item from a\r\nnet35 taskhost) a `Hashtable`. In the latter situation, casting entries\r\nto `KeyValuePair<,>` fails, because they conform only to\r\n`DictionaryEntry`.\r\n\r\nUse that less-well-typed approach--the casts were present in the pre-\r\nbulk-edit version of the code. Fixes #8645.",
          "committedDate": "2023-04-11T17:36:40Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "78cc219f08c46ac70dba467a32d44406a1fa889f",
          "message": "Regression test for #8645\n\nAdd a test task with properties like the failing WiX tasks to prevent\nregressions of #8645.",
          "committedDate": "2023-04-12T17:17:45Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a478b9dda01222ee635e6a62fa24a168c7462cda",
          "message": "Merge remote-tracking branch 'vs17.6'",
          "committedDate": "2023-04-12T17:20:11Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is the important part, right? That it's a Hashtable and not a Dictionary<string, string>?",
              "createdAt": "2023-04-12T19:00:20Z",
              "path": "src/Build.UnitTests/TaskThatReturnsMinimalItem.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Engine.UnitTests;\n+\n+/// <summary>\n+/// Task that emulates .NET 3.5 tasks.\n+/// </summary>\n+public sealed class TaskThatReturnsMinimalItem : ITask\n+{\n+    public IBuildEngine? BuildEngine { get; set; }\n+    public ITaskHost? HostObject { get; set; }\n+\n+    [Output]\n+    public ITaskItem MinimalTaskItemOutput { get => new MinimalTaskItem(); }\n+\n+    public bool Execute() => true;\n+\n+    /// <summary>\n+    /// Minimal implementation of <see cref=\"ITaskItem\"/> that uses a <see cref=\"Hashtable\"/> for metadata,\n+    /// like MSBuild 3 did.\n+    /// </summary>\n+    internal sealed class MinimalTaskItem : ITaskItem\n+    {\n+        public string ItemSpec { get => $\"{nameof(MinimalTaskItem)}spec\"; set => throw new NotImplementedException(); }\n+\n+        public ICollection MetadataNames => throw new NotImplementedException();\n+\n+        public int MetadataCount => throw new NotImplementedException();\n+\n+        public IDictionary CloneCustomMetadata()\n+        {\n+            Hashtable t = new();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Correct. I considered writing an even-more-malicious `IDictionary` implementation but it seemed like overkill.",
              "createdAt": "2023-04-12T20:25:29Z",
              "path": "src/Build.UnitTests/TaskThatReturnsMinimalItem.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Engine.UnitTests;\n+\n+/// <summary>\n+/// Task that emulates .NET 3.5 tasks.\n+/// </summary>\n+public sealed class TaskThatReturnsMinimalItem : ITask\n+{\n+    public IBuildEngine? BuildEngine { get; set; }\n+    public ITaskHost? HostObject { get; set; }\n+\n+    [Output]\n+    public ITaskItem MinimalTaskItemOutput { get => new MinimalTaskItem(); }\n+\n+    public bool Execute() => true;\n+\n+    /// <summary>\n+    /// Minimal implementation of <see cref=\"ITaskItem\"/> that uses a <see cref=\"Hashtable\"/> for metadata,\n+    /// like MSBuild 3 did.\n+    /// </summary>\n+    internal sealed class MinimalTaskItem : ITaskItem\n+    {\n+        public string ItemSpec { get => $\"{nameof(MinimalTaskItem)}spec\"; set => throw new NotImplementedException(); }\n+\n+        public ICollection MetadataNames => throw new NotImplementedException();\n+\n+        public int MetadataCount => throw new NotImplementedException();\n+\n+        public IDictionary CloneCustomMetadata()\n+        {\n+            Hashtable t = new();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This probably shouldn't be my focus, since this is a test, but it bothers me a little that this will return \"value\" for undefined metadata. It's fine if you want to leave it, but I'd slightly prefer a check for \"key\" (and updating the test above accordingly)",
              "createdAt": "2023-04-12T19:01:29Z",
              "path": "src/Build.UnitTests/TaskThatReturnsMinimalItem.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections;\n+\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Engine.UnitTests;\n+\n+/// <summary>\n+/// Task that emulates .NET 3.5 tasks.\n+/// </summary>\n+public sealed class TaskThatReturnsMinimalItem : ITask\n+{\n+    public IBuildEngine? BuildEngine { get; set; }\n+    public ITaskHost? HostObject { get; set; }\n+\n+    [Output]\n+    public ITaskItem MinimalTaskItemOutput { get => new MinimalTaskItem(); }\n+\n+    public bool Execute() => true;\n+\n+    /// <summary>\n+    /// Minimal implementation of <see cref=\"ITaskItem\"/> that uses a <see cref=\"Hashtable\"/> for metadata,\n+    /// like MSBuild 3 did.\n+    /// </summary>\n+    internal sealed class MinimalTaskItem : ITaskItem\n+    {\n+        public string ItemSpec { get => $\"{nameof(MinimalTaskItem)}spec\"; set => throw new NotImplementedException(); }\n+\n+        public ICollection MetadataNames => throw new NotImplementedException();\n+\n+        public int MetadataCount => throw new NotImplementedException();\n+\n+        public IDictionary CloneCustomMetadata()\n+        {\n+            Hashtable t = new();\n+            t[\"key\"] = \"value\";\n+\n+            return t;\n+        }\n+        public void CopyMetadataTo(ITaskItem destinationItem) => throw new NotImplementedException();\n+        public string GetMetadata(string metadataName) => \"value\";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}