{
  "number": 8524,
  "title": "Add warning for using BinaryFormatter in GenerateResource on .NET 8",
  "body": "It will be removed in .NET 9; doing so should be discouraged.\r\n\r\nNote that this does nothing by default, but we can change that in the SDK.\r\n\r\nFixes #8453\r\n\r\n### Context\r\nBinaryFormatter is deprecated and will be removed in .NET 9. In addition to the possibility of using a modern MSBuild with an older framework, there are apparently ways you can exempt your project, so we are not currently removing it entirely, and this warning (which is off by default) can be disabled even if it is enabled in the SDK.\r\n\r\n### Changes Made\r\nI deleted `using System.Runtime.Serialization.Formatters.Binary;` in GenerateResource, then put a warning before the one usage of BinaryFormatter. That isn't necessarily the best way to figure out where it's used, as it would be helpful to know early, so feel free to comment to that effect.\r\n\r\nThen I disabled it via a property and will make a separate PR to enable it in the 8.0 SDK.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-03T00:21:24Z",
  "updatedAt": "2023-03-29T01:30:02Z",
  "closedAt": "2023-03-29T01:30:01Z",
  "mergedAt": "2023-03-29T01:30:01Z",
  "additions": 205,
  "deletions": 38,
  "changedFiles": 21,
  "headRefName": "warn-bf-net8",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ed7a667b96d7ad4c32afc6ea7704acb61c6a6ee2",
          "message": "Add warning for using BinaryFormatter on .NET 8\n\nIt will be removed in .NET 9; doing so should be discouraged.\n\nNote that this does nothing by default, but we can change that in the SDK.",
          "committedDate": "2023-03-03T00:18:01Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "882720d8553c2163672a50c4acad4a7dff8d21ec",
          "message": "Thread BinaryFormatter change through to MSBuildResXReader",
          "committedDate": "2023-03-03T20:24:05Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8edd97f4e012165a3c683454b0db5839816ff052",
          "message": "Comments",
          "committedDate": "2023-03-03T21:55:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd7d4500939c0fe03fcbfed775a0ec3f486c1270",
          "message": "PR comments\n\nNot fully tested, but looks promising",
          "committedDate": "2023-03-06T21:45:18Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e6c0a4f02f6c73334aef1baa55eabfcd12f0a3ef",
          "message": "Remove mimetype",
          "committedDate": "2023-03-07T22:23:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "333c90c4c36e8da13e2df52df35308de151f837d",
          "message": "Fix argument number",
          "committedDate": "2023-03-08T00:18:18Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac457cbf3147acea17d73d86009d18acdae780f3",
          "message": "Add test",
          "committedDate": "2023-03-08T00:18:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0474acfc6861432fc08eef7fc802487ea82d87d",
          "message": "PR comment",
          "committedDate": "2023-03-08T00:26:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Can you add a test of the end-to-end scenario showing that it fires when opted in in `GenerateResource_Tests`?\r\n\r\nFear not! I've been working on that all afternoon \ud83e\udee1",
        "createdAt": "2023-03-07T23:37:16Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is not the right place to put the warning. What we want to warn about is not build-time use of BinaryFormatter, which is already avoidable with `UsePreserializedResources`, but the fact of embedding a BinaryFormatter resource, which wouldn't be noticed (in .NET/`UsePreserializedResources` mode) on this codepath.",
              "createdAt": "2023-03-03T14:26:40Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -1969,9 +1975,14 @@ private bool NeedSeparateAppDomainBasedOnSerializedType(XmlReader reader)\n         /// </summary>\n         private bool DetermineWhetherSerializedObjectLoads(string data)\n         {\n+            if (WarnOnBinaryFormatterUse)\n+            {\n+                Log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        // Warn of BinaryFormatter exposure (SDK should set this on by default in .NET 8+)\r\n```",
              "createdAt": "2023-03-03T20:29:12Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think `typename` is of more interest than `mimetype` here. The user likely didn't set the mimetype but let a tool specify that by serializing an object.\r\n\r\nOn the flip side, it's conceivable that a given object is serializable both via binaryformatter and typeconverter so a different representation of the same object wouldn't throw. Hmm. @merriemcgaw do you have a preference (or a suggestion for someone who might)?",
              "createdAt": "2023-03-03T20:34:08Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I do not personally, but I wonder if @JeremyKuhne and/or @ericstj might have thoughts. My first thought would be to agree `typename` is more interesting but you bring up an interesting case. ",
              "createdAt": "2023-03-03T22:55:11Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "merriemcgaw"
              }
            },
            {
              "body": "Since it's for developers why not include both?",
              "createdAt": "2023-03-03T23:39:51Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "MimeType here can be one of 3 values, 2 of which haven't been used since like .NET 1.0 days so its probably not all that useful except to help the user know why the resource was being flagged.  Probably could be left out to make a less scary warning and just mentioned in the documentation for the diagnostic ID.  Agreed that typename is much more useful.",
              "createdAt": "2023-03-06T22:17:56Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "ericstj"
              }
            },
            {
              "body": "@ericstj is right -- I forgot those were legacy",
              "createdAt": "2023-03-06T23:25:59Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Check `log is null`?",
              "createdAt": "2023-03-03T20:43:30Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'd initially intended it to just never be null, but then I broke my own invariant when tests came along and made a narrower and more confusing invariant. I'll change this.",
              "createdAt": "2023-03-03T21:23:57Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, mimetype);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "By convention, put this real input above the virtual inputs `MSBuildRuntime` and `MSBuildArchitecture`.",
              "createdAt": "2023-03-03T20:44:47Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3329,7 +3330,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         ExecuteAsTool=\"$(ResGenExecuteAsTool)\"\n         EnvironmentVariables=\"$(ResGenEnvironment)\"\n         MSBuildRuntime=\"$(GenerateResourceMSBuildRuntime)\"\n-        MSBuildArchitecture=\"$(GenerateResourceMSBuildArchitecture)\">\n+        MSBuildArchitecture=\"$(GenerateResourceMSBuildArchitecture)\"\n+        WarnOnBinaryFormatterUse=\"$(GenerateResourceWarnOnBinaryFormatterUse)\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I'd explicitly set a default here; I'd just pass it undefined in general.",
              "createdAt": "2023-03-03T20:48:50Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3283,6 +3283,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <PropertyGroup>\n+      <GenerateResourceWarnOnBinaryFormatterUse Condition=\"'$(GenerateResourceWarnOnBinaryFormatterUse)' == ''\">false</GenerateResourceWarnOnBinaryFormatterUse>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Put resxFilename in location instead of in message\r\nTry to find line number of resource using bf",
              "createdAt": "2023-03-06T16:44:06Z",
              "path": "src/Tasks/ResourceHandling/MSBuildResXReader.cs",
              "diffHunk": "@@ -186,6 +194,12 @@ private static void ParseData(string resxFilename, bool pathsRelativeToBasePath,\n                     case BinSerializedObjectMimeType:\n                     case Beta2CompatSerializedObjectMimeType:\n                     case CompatBinSerializedObjectMimeType:\n+                        // Warn of BinaryFormatter exposure (SDK should turn this on by default in .NET 8+)\n+                        if (logWarningForBinaryFormatter)\n+                        {\n+                            log?.LogWarningWithCodeFromResources(\"GenerateResource.BinaryFormatterUse\", name, resxFilename, typename);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Don't change this copy, which is the .NET 3.5 one that won't have the new arg.",
              "createdAt": "2023-03-07T23:13:23Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3356,6 +3358,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         OutputResources=\"@(EmbeddedResource->'$(IntermediateOutputPath)%(ManifestResourceName).resources')\"\n         MSBuildRuntime=\"$(GenerateResourceMSBuildRuntime)\"\n         MSBuildArchitecture=\"$(GenerateResourceMSBuildArchitecture)\"\n+        WarnOnBinaryFormatterUse=\"$(GenerateResourceWarnOnBinaryFormatterUse)\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't there a helplink field on the warning? can we set that too?",
              "createdAt": "2023-03-07T23:24:40Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -1161,6 +1161,11 @@\n     <value>MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</value>\n     <comment>{StrBegin=\"MSB3824: \"}</comment>\n   </data>\n+  <data name=\"GenerateResource.BinaryFormatterUse\">\n+    <value>MSB3825: Resource \"{0}\" of type \"{2}\" is deserialized via BinaryFormatter at runtime. BinaryFormatter is deprecated due to possible security risks and will be removed with .NET 9. If you wish to continue using it, set property \"GenerateResourceWarnOnBinaryFormatterUse\" to false.\n+           More information: https://learn.microsoft.com/dotnet/standard/serialization/binaryformatter-security-guide</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This sounds familiar, but I'm having trouble finding what I'd expected.\r\n\r\nSearching for \"helplink\" didn't return anything helpful.\r\nSearching for \"help\" in the TaskLoggingHelper revealed that there's a HelpKeywordPrefix (generally just set to MSBuild) that's added to the messageResourceName, so no action there, but I don't think that's what you meant.\r\nSearching for \"help\" in the same Strings.resx revealed nothing.\r\nSearching the whole repo for <help also didn't work.\r\n\r\nAny suggestions?",
              "createdAt": "2023-03-08T00:32:22Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -1161,6 +1161,11 @@\n     <value>MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</value>\n     <comment>{StrBegin=\"MSB3824: \"}</comment>\n   </data>\n+  <data name=\"GenerateResource.BinaryFormatterUse\">\n+    <value>MSB3825: Resource \"{0}\" of type \"{2}\" is deserialized via BinaryFormatter at runtime. BinaryFormatter is deprecated due to possible security risks and will be removed with .NET 9. If you wish to continue using it, set property \"GenerateResourceWarnOnBinaryFormatterUse\" to false.\n+           More information: https://learn.microsoft.com/dotnet/standard/serialization/binaryformatter-security-guide</value>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We noticed that HelpLink is available, but there isn't a helper method for it yet. I suggested I'd make a follow-up PR to fix that and clean up all the other instances using it.",
              "createdAt": "2023-03-08T22:20:24Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -1161,6 +1161,11 @@\n     <value>MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</value>\n     <comment>{StrBegin=\"MSB3824: \"}</comment>\n   </data>\n+  <data name=\"GenerateResource.BinaryFormatterUse\">\n+    <value>MSB3825: Resource \"{0}\" of type \"{2}\" is deserialized via BinaryFormatter at runtime. BinaryFormatter is deprecated due to possible security risks and will be removed with .NET 9. If you wish to continue using it, set property \"GenerateResourceWarnOnBinaryFormatterUse\" to false.\n+           More information: https://learn.microsoft.com/dotnet/standard/serialization/binaryformatter-security-guide</value>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/issues/5493#issuecomment-1238926812 <-- we don't actually have an easy way to do this right now. So we can wait.",
              "createdAt": "2023-03-08T22:20:31Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -1161,6 +1161,11 @@\n     <value>MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</value>\n     <comment>{StrBegin=\"MSB3824: \"}</comment>\n   </data>\n+  <data name=\"GenerateResource.BinaryFormatterUse\">\n+    <value>MSB3825: Resource \"{0}\" of type \"{2}\" is deserialized via BinaryFormatter at runtime. BinaryFormatter is deprecated due to possible security risks and will be removed with .NET 9. If you wish to continue using it, set property \"GenerateResourceWarnOnBinaryFormatterUse\" to false.\n+           More information: https://learn.microsoft.com/dotnet/standard/serialization/binaryformatter-security-guide</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}