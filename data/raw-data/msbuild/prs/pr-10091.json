{
  "number": 10091,
  "title": "[WIP] Prototype for discussion",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2024-04-30T14:13:49Z",
  "updatedAt": "2024-06-12T07:44:24Z",
  "closedAt": "2024-06-12T07:44:24Z",
  "mergedAt": null,
  "additions": 47,
  "deletions": 7,
  "changedFiles": 4,
  "headRefName": "rokonec/buildcheck-restore-nono",
  "isDraft": true,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9915a6e3a0986751ab6fdd6e7f79de2db5520d95",
          "message": "Prototype for discussion",
          "committedDate": "2024-04-30T14:12:36Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "this feels that it might not need to be conditional - if the buildcheck was not enabled, then the `_buildCheckManagerForEnabledState` is anyways the null pattern manager - and hence setting doesn't hurt",
              "createdAt": "2024-04-30T14:31:11Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1834,10 +1834,22 @@ private static BuildResult ExecuteRestore(string projectFile, string toolsVersio\n                 hostServices: null,\n                 flags: flags);\n \n-            return ExecuteBuild(buildManager, restoreRequest);\n+            bool? wasBuildCheckEnabled = null;\n+            try\n+            {\n+                wasBuildCheckEnabled = buildManager.ConfigureBuildCheck(false);\n+                BuildResult restoreResult = ExecuteBuild(buildManager, restoreRequest);\n+                return restoreResult;\n+            }\n+            finally\n+            {\n+                if (wasBuildCheckEnabled == true)\n+                {\n+                    buildManager.ConfigureBuildCheck(true);\n+                }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Correct. If we go this way, I plan to clean it a bit, so far I was mostly focusing on describing the approach\r\n",
              "createdAt": "2024-04-30T18:27:32Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1834,10 +1834,22 @@ private static BuildResult ExecuteRestore(string projectFile, string toolsVersio\n                 hostServices: null,\n                 flags: flags);\n \n-            return ExecuteBuild(buildManager, restoreRequest);\n+            bool? wasBuildCheckEnabled = null;\n+            try\n+            {\n+                wasBuildCheckEnabled = buildManager.ConfigureBuildCheck(false);\n+                BuildResult restoreResult = ExecuteBuild(buildManager, restoreRequest);\n+                return restoreResult;\n+            }\n+            finally\n+            {\n+                if (wasBuildCheckEnabled == true)\n+                {\n+                    buildManager.ConfigureBuildCheck(true);\n+                }",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Btw. I definitely like this swapping approach.\r\n\r\nI'm not 100% sure whether we want to have the infra dictate if restore is happening or have the other approach - storing the flag in BuildEvaluationStartedEventArg (as then the handling might be more unified for the replay case).\r\nBut even if we stay with BuildEvaluationStartedEventArg case - I'd like to adopt this swapping strategy",
              "createdAt": "2024-04-30T14:34:31Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -15,14 +15,15 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;\n internal sealed class BuildCheckConnectorLogger : ILogger\n {\n     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n-    private readonly IBuildCheckManager _buildCheckManager;\n+    private IBuildCheckManager _buildCheckManager;\n+    private readonly IBuildCheckManager _buildCheckManagerForEnabledState;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}