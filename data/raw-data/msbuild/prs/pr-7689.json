{
  "number": 7689,
  "title": "Add net481 as a netframework version",
  "body": "Fixes ToolLocationHelper returning null when on net481. \r\n\r\nFixes https://github.com/dotnet/msbuild/issues/8027 and https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1541603/\r\n\r\n### Context\r\nNet481 is the latest .NET Framework, but calling `Microsoft.Build.Utilities.ToolLocationHelper.GetPathToDotNetFramework(TargetDotNetFrameworkVersion.VersionLatest);` returns null. MSBuild needs to learn that net481 exists.\r\n\r\n### Changes Made\r\nAdd entries for net481 when returning paths to various .net framework installs.\r\n\r\nBroadens our \"valid install\" check to include checking for microsoft.build.dll as well as msbuild.exe. The reason for this is net481 did not include msbuild.exe because it didn't exist at the time. The binaries did ship though, so we can check for those.\r\n\r\n### Testing\r\nLocal testing with a simple repro by replacing the Microsoft.Build.Utility.Core.dll with my custom one. The function should return the full path to al.exe.\r\n```\r\n            Console.WriteLine(\"Framework SDK File: \" + ToolLocationHelper.GetPathToDotNetFrameworkSdkFile(\"al.exe\", (TargetDotNetFrameworkVersion)15));\r\n\r\n            Console.ReadKey();\r\n```\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-06-08T19:42:03Z",
  "updatedAt": "2022-12-05T20:54:07Z",
  "closedAt": "2022-12-05T20:54:07Z",
  "mergedAt": "2022-12-05T20:54:07Z",
  "additions": 56,
  "deletions": 7,
  "changedFiles": 6,
  "headRefName": "add-net481",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ded83e1478fe204f9621e8ab78f1ee03e4821793",
          "message": "Add net481 as a netframework version",
          "committedDate": "2022-06-08T19:48:39Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "211483b78edfa5156f46b24d07ad834aa4ada7d7",
          "message": "Add 481 to Framework & ToolLocationHelper where relevant",
          "committedDate": "2022-06-08T20:13:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1100d70ba49f598a94331db9f9fc4c07456e463d",
          "message": "Add new enums to publicapi.txt files",
          "committedDate": "2022-06-10T17:10:54Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e49c0146db08a3825ea9cc9fc4b63e95b96383a",
          "message": "Undo net481 as the latest",
          "committedDate": "2022-11-01T19:27:18Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88dbe574b797b45cf0676c34a201b6b757a9934d",
          "message": "Check install validity via Microsoft.Build.dll as well",
          "committedDate": "2022-11-01T21:31:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b85a013e000d46c6cf40d6bbc15a568017f10d7",
          "message": "Merge branch 'main' into add-net481",
          "committedDate": "2022-11-01T21:42:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14c9dee38196c37f11c9206f0019a57b2cf0352e",
          "message": "Undo publicapi change",
          "committedDate": "2022-11-02T21:58:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58fad40af60c7615792aeb489e4efe7486e87704",
          "message": "Fix up netframework / VS version alignments",
          "committedDate": "2022-11-02T22:04:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1f94374bc1dab0ccca5062fb0c64eac5f0c9a95",
          "message": "Update src/Shared/FrameworkLocationHelper.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-02T22:06:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce83d71f3526c0d8c2d1245f79c71456f6d4ad1e",
          "message": "[Revert] arm64 still not finding path, add debug info",
          "committedDate": "2022-11-03T20:52:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "915b545ee4b13c1b77e8c81b584fd331c0523f40",
          "message": "Revert \"[Revert] arm64 still not finding path, add debug info\"\n\nThis reverts commit ce83d71f3526c0d8c2d1245f79c71456f6d4ad1e.",
          "committedDate": "2022-11-10T00:56:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "235b5242a73d03630c58b17b7abc3524a51e971a",
          "message": "Ensure 481 falls back to 48",
          "committedDate": "2022-11-10T21:24:29Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2f8b521babc0e29549005ea20cdd69403f0a2cc",
          "message": "Update to newer 481 registry keys\n\nMimics https://github.com/dotnet/msbuild/pull/4487",
          "committedDate": "2022-11-10T21:28:02Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "09b9a61d0913c92c150b815f813807d6b90c825a",
          "message": "net481 is latest msbuild knows about",
          "committedDate": "2022-11-14T18:04:14Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0495053a759f812a3ef49da94692f9a34a881a49",
          "message": "Add fallback rules for other netfx versions",
          "committedDate": "2022-11-14T18:14:10Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a560d351550fb03ef781a43d29727d518f8d4f14",
          "message": "Update test for 481",
          "committedDate": "2022-11-14T18:37:31Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c64dd52772b6f909461d57600afe0f22e66b642",
          "message": "Update vs version when querying net481 in test",
          "committedDate": "2022-11-14T19:03:20Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7ba7a23a20e32e70bd36b8cb17b1dbec80b4f834",
          "message": "Use net481 registry key, falling back to net48 if unavailable",
          "committedDate": "2022-11-14T23:35:59Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "944988c127f8cbc933f326d55c8822d795fc94cb",
          "message": "Add fallback logic directly in the app.config",
          "committedDate": "2022-11-15T17:50:13Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Status on this: the arm64 net481 install does not automatically come with MSBuild.exe. This results in MSBuild _almost_ finding the correct MSBuild, but not seeing MSBuild.exe there and therefore assuming it was a broken install.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/7a0fefe241f1040c4ebfa42626a854839fa0f71e/src/Shared/FrameworkLocationHelper.cs#L1383-L1386\r\n\r\nYou'll notice there's a `this._hasMSBuild` check, this is always set to true no matter what:\r\nhttps://github.com/dotnet/msbuild/blob/7a0fefe241f1040c4ebfa42626a854839fa0f71e/src/Shared/FrameworkLocationHelper.cs#L1132-L1143\r\n\r\n## Brain Dump Time\r\n\r\n- Can we just ship MSBuild.exe into net481?\r\n\r\n  - Sure, but we'd still need to account for 481 installs that don't include MSBuild.exe\r\n\r\n- Does it really mean that the net framework install is broken if msbuild.exe doesn't exist? Clearly not.\r\n  - Would callers of `ToolLocationHelper.GetPathToDotNetFramework` expect MSBuild.exe to exist? The API summarizes it as: `Get a fully qualified path to the frameworks root directory.`, so I don't think that's a problem.\r\n\r\n- We can check for `Microsoft.Build.dll` instead of, or as well as MSBuild.exe\r\n  - Is that dll always guaranteed to exist if msbuild.exe doesn't? I think it's safe to say that if we once assumed MSBuild.exe was going to exist, we can _even more safely_ assume that Microsoft.Build.dll will exist as an AnyCPU binary (correct me if I'm wrong)\r\n    \r\n    - Correcting myself: Previous versions within `C:/Windows/Microsoft.NET/Framework64` sometimes don't have Microsoft.Build.dll (v2.0.5, v3.5). Can we expect future versions to have this?\r\n\r\n### Current Path Forward\r\nIf MSBuild.exe doesn't exist, check if `Microsoft.Build.dll` exists. We can handle future cases as they come up, just like this one.",
        "createdAt": "2022-06-21T17:58:26Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos, your comment from June looks stale. Is this still needed? Close it?",
        "createdAt": "2022-10-06T21:26:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Related issue: https://github.com/dotnet/msbuild/issues/8027",
        "createdAt": "2022-10-20T16:13:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "After refreshing myself on this, The issue is that we're not shipping arm64 MSBuild.exe into `C:\\Windows\\Microsoft.NET\\FrameworkArm64\\v4.0.30319`.\r\n\r\nARM64 msbuild probably wasn't a thing when this folder was created, but it is now and we should ship msbuild.exe in there. I'm not entirely sure who to contact here. cc @marcpopMSFT \r\n\r\nConsidering the workaround I mentioned higher up in the comments (to check for Microsoft.Build.dll OR msbuild.exe), it _might_ be worth doing if users who try to find this folder don't also expect the exe to be there, but we should tackle the real problem, which is that msbuild isn't being shipped here.\r\n\r\n\u261d\ufe0f thinking more on this last sentence. If MSBuild.exe not existing here doesn't _entirely_ mean a broken install. What is Microsot.Build.dll / most other files exist? Is it still worth returning the path? @rainersigwald thoughts?",
        "createdAt": "2022-11-01T19:40:12Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "After discussing with Nikola and Rainer, we decided to broaden the MSBuild.exe check.",
        "createdAt": "2022-11-01T21:31:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Have you validated that this works in the container scenario that was failing?\r\n\r\nnot sure about a container scenario, but I'm going to verify locally that this scenario is fixed: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1541603/\r\n\r\nTL;DR (for the repro): Call toollocationhelper.GetPathToDotnetFramework, expect a non-null-actual-path",
        "createdAt": "2022-11-03T17:54:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I finally got the method to return the proper path. I need to investigate what changes in the PR are actually necessary.\r\n\r\ncc @rainersigwald about the container scenario to check afterward.",
        "createdAt": "2022-11-04T23:51:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Quick Recap: I figured out that the fix for the [original issue](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1541603/) just needs this one commit: 88dbe574b797b45cf0676c34a201b6b757a9934d.\r\n\r\nI don't think the [issue Rainer mentioned](https://github.com/dotnet/msbuild/issues/8027) would be resolved by this. My current understanding is that we need another change similar to https://github.com/dotnet/msbuild/pull/4487/files, but I can't validate the registry entry.",
        "createdAt": "2022-11-10T00:48:33Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Okay, I've validated the registry entry (after realizing this was stored in the 32 bit registry, and that the 32 bit registry is separate from the 64 bit registry /shakefist). \r\n\r\nIt seems easy enough to update 4.8 to 4.8.1 similar to https://github.com/dotnet/msbuild/pull/4487/files. My main concern was \"was if a user doesn't have 481 but they have 48?\" My latest commit (235b524) captures that scenario by adding an explicit fallback rule.",
        "createdAt": "2022-11-10T21:25:53Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Just verified we can find net481, and a tool under that folder (I manually replaced Microsoft.Build.Utilities in bin/debug and reran the same code without rebuilding):\r\n<img width=\"827\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4691428/201412056-dade3985-998e-4e4e-9a3b-5ff0b4a53e20.png\">\r\n\r\nEdit: Also verified it resolves the arm64 scenario: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1541603/",
        "createdAt": "2022-11-11T19:02:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Just verified this resolves https://github.com/dotnet/msbuild/issues/8027\r\n\r\nSee https://github.com/dotnet/msbuild/issues/8027#issuecomment-1312273773 for the details there.",
        "createdAt": "2022-11-11T23:59:04Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "My last compatibility question here is: Should we add versions for net481 on VS 16,15, etc.? How far back do we go?",
        "createdAt": "2022-11-14T19:04:20Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I added the fallback logic if the net481 registry key doesn't exist. It should fall back to net48 (the last version we knew was okay) so we can avoid regressing customers for now.",
        "createdAt": "2022-11-14T23:36:49Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The comment indicates we shouldn't change this. Do we need to? If so should the comment be updated?",
              "createdAt": "2022-06-08T19:50:12Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,13 +105,18 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,\n+\n         /// <summary>\n         /// The latest version available at the time of major release. This\n         /// value should not be updated in minor releases as it could be a\n         /// breaking change. Use 'Latest' if possible, but note the\n         /// compatibility implications.\n         /// </summary>\n-        VersionLatest = Version48,\n+        VersionLatest = Version481,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Presumably not. I'm trying to see what breaks in unit tests by forcing this",
              "createdAt": "2022-06-08T20:01:28Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,13 +105,18 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,\n+\n         /// <summary>\n         /// The latest version available at the time of major release. This\n         /// value should not be updated in minor releases as it could be a\n         /// breaking change. Use 'Latest' if possible, but note the\n         /// compatibility implications.\n         /// </summary>\n-        VersionLatest = Version48,\n+        VersionLatest = Version481,",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Reference this around line 2052 to be the new Latest",
              "createdAt": "2022-06-08T19:51:41Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,13 +105,18 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ping on this, is it a bad idea or just missed?",
              "createdAt": "2022-11-14T16:48:36Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,13 +105,18 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "~~In theory the fallback rule would save this if the user didn't have 481 installed, so we should be safe to bump VersionLatest to the next version.~~\r\n\r\nAfter re-reading, this should be safe to do. If a user passes `Latest`, that implies the latest we know about, which is inherently different from versionlatest, the safe one to use.",
              "createdAt": "2022-11-14T17:52:24Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,13 +105,18 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // Note: net481 did not ship an ARM64 MSBuild.exe, so checking its dll's is the fallback for a valid install.\r\n```",
              "createdAt": "2022-11-02T14:19:59Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -1380,10 +1391,14 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi\n                                     Directory.GetDirectories,\n                                     architecture);\n \n-                // .net was improperly uninstalled: msbuild.exe isn't there\n+                // Assume if either MSBuild.exe or Microsoft.Build.dll are shipped, there is a valid install.\n+                // Note: net481 did not ship an MSBuild.exe, so checking its dll's is the fallback for a valid install.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "should this be ARM only?",
              "createdAt": "2022-11-02T14:20:09Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -1380,10 +1391,14 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi\n                                     Directory.GetDirectories,\n                                     architecture);\n \n-                // .net was improperly uninstalled: msbuild.exe isn't there\n+                // Assume if either MSBuild.exe or Microsoft.Build.dll are shipped, there is a valid install.\n+                // Note: net481 did not ship an MSBuild.exe, so checking its dll's is the fallback for a valid install.\n+                // Context: https://github.com/dotnet/msbuild/pull/7689\n                 if (this._hasMsBuild &&\n                     generatedPathToDotNetFramework != null &&\n-                    !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, NativeMethodsShared.IsWindows ? \"MSBuild.exe\" : \"mcs.exe\")))\n+                    (!FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, NativeMethodsShared.IsWindows ? \"MSBuild.exe\" : \"mcs.exe\")) &&\n+                     !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, \"Microsoft.Build.dll\")))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm indifferent about it. Non-arm scenarios will find msbuild.exe and it should short-circuit.",
              "createdAt": "2022-11-02T18:51:28Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -1380,10 +1391,14 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi\n                                     Directory.GetDirectories,\n                                     architecture);\n \n-                // .net was improperly uninstalled: msbuild.exe isn't there\n+                // Assume if either MSBuild.exe or Microsoft.Build.dll are shipped, there is a valid install.\n+                // Note: net481 did not ship an MSBuild.exe, so checking its dll's is the fallback for a valid install.\n+                // Context: https://github.com/dotnet/msbuild/pull/7689\n                 if (this._hasMsBuild &&\n                     generatedPathToDotNetFramework != null &&\n-                    !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, NativeMethodsShared.IsWindows ? \"MSBuild.exe\" : \"mcs.exe\")))\n+                    (!FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, NativeMethodsShared.IsWindows ? \"MSBuild.exe\" : \"mcs.exe\")) &&\n+                     !FileSystems.Default.FileExists(Path.Combine(generatedPathToDotNetFramework, \"Microsoft.Build.dll\")))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like `VersionLatest` can go back to Shipped",
              "createdAt": "2022-11-02T14:20:27Z",
              "path": "src/Utilities/PublicAPI/net/PublicAPI.Unshipped.txt",
              "diffHunk": "@@ -0,0 +1,2 @@\n+Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.Version481 = 15 -> Microsoft.Build.Utilities.TargetDotNetFrameworkVersion\n+Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.VersionLatest = 15 -> Microsoft.Build.Utilities.TargetDotNetFrameworkVersion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you really target 4.8.1 from dev15 (this section)? Doesn't feel right to me.",
              "createdAt": "2022-11-02T14:22:14Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -289,6 +293,7 @@ internal static class FrameworkLocationHelper\n                 dotNetFrameworkVersion471,\n                 dotNetFrameworkVersion472,\n                 dotNetFrameworkVersion48,\n+                dotNetFrameworkVersion481,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Not sure why I put this here in the first place, but I agree. There was another area where I created a spec for net481 -> VS 15, which I've changed to be net481->vs17",
              "createdAt": "2022-11-02T22:04:59Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -289,6 +293,7 @@ internal static class FrameworkLocationHelper\n                 dotNetFrameworkVersion471,\n                 dotNetFrameworkVersion472,\n                 dotNetFrameworkVersion48,\n+                dotNetFrameworkVersion481,",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is the only one I expected, but to be super clear I'm not 100% confident I understand the current functionality of these VisualStudioSpecs",
              "createdAt": "2022-11-02T14:22:57Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -327,6 +333,7 @@ internal static class FrameworkLocationHelper\n                 dotNetFrameworkVersion471,\n                 dotNetFrameworkVersion472,\n                 dotNetFrameworkVersion48,\n+                dotNetFrameworkVersion481,",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this safe to do? What does the default VS installer install for  the .NET SDK? Is it 4.8.1? If it's not, what happens if 4.8.1 isn't installed?",
              "createdAt": "2022-11-14T16:47:07Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -172,15 +172,15 @@\n         <property name=\"MSBuildToolsPath32\" value=\"$([MSBuild]::GetToolsDirectory32())\" />\n         <property name=\"MSBuildToolsPath64\" value=\"$([MSBuild]::GetToolsDirectory64())\" />\n         <property name=\"MSBuildSDKsPath\" value=\"$([MSBuild]::GetMSBuildSDKsPath())\" />\n-        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is what I've been most curious about. https://github.com/dotnet/msbuild/pull/4487 merged with no discussion so I don't have much context on how safe this is. At face value it looks like FrameworkSDKRoot would be empty. I'll try setting up a clean machine with a clean install and see what happens.\r\n\r\nWhat we could safely do is create a \"backup\" property that stays on 4.8, and if the new prop is empty we fall back to the backup.\r\n",
              "createdAt": "2022-11-14T17:50:45Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -172,15 +172,15 @@\n         <property name=\"MSBuildToolsPath32\" value=\"$([MSBuild]::GetToolsDirectory32())\" />\n         <property name=\"MSBuildToolsPath64\" value=\"$([MSBuild]::GetToolsDirectory64())\" />\n         <property name=\"MSBuildSDKsPath\" value=\"$([MSBuild]::GetMSBuildSDKsPath())\" />\n-        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Hmm. This is the default installer (live public 17.4):\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/201734696-38c00bfd-9b73-4322-bb99-264005c230b0.png)\r\n\r\nSo the user is _not_ guaranteed to have 4.8 installed, and should be guaranteed to have 4.7.2. But I don't remember hearing any grumbling about pointing to 4.8 in the toolset. @tmeschter do you recall any additional context on #4487?",
              "createdAt": "2022-11-14T18:12:23Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -172,15 +172,15 @@\n         <property name=\"MSBuildToolsPath32\" value=\"$([MSBuild]::GetToolsDirectory32())\" />\n         <property name=\"MSBuildToolsPath64\" value=\"$([MSBuild]::GetToolsDirectory64())\" />\n         <property name=\"MSBuildSDKsPath\" value=\"$([MSBuild]::GetMSBuildSDKsPath())\" />\n-        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "When removing the registry entry (in a VM \ud83d\ude31) I verified that calling `GetPathToDotNetFrameworkSdkFile` passing net481, it does return null.\r\n\r\nBuilding a localized resource also shows this error:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tTask could not find \"al.exe\" using the SdkToolsPath \"\" or the registry key \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86\". Make sure the SdkToolsPath is set and the tool exists in the correct processor specific location under the SdkToolsPath and that the Microsoft Windows SDK is installed\tToolLocationHelperRepro\t\t\t\r\n```\r\n\r\nSo if the key isn't there there _will_ be a build failure, which was entirely possible when we updated to the 4.8 registry key. Maybe we wait until the next major version for that update as well?",
              "createdAt": "2022-11-14T18:59:15Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -172,15 +172,15 @@\n         <property name=\"MSBuildToolsPath32\" value=\"$([MSBuild]::GetToolsDirectory32())\" />\n         <property name=\"MSBuildToolsPath64\" value=\"$([MSBuild]::GetToolsDirectory64())\" />\n         <property name=\"MSBuildSDKsPath\" value=\"$([MSBuild]::GetMSBuildSDKsPath())\" />\n-        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "^ this is also an argument for having the \"backup\" property where we query for 4.8.1 and 4.8, and if 4.8.1 is empty then we use 4.8",
              "createdAt": "2022-11-14T19:02:12Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -172,15 +172,15 @@\n         <property name=\"MSBuildToolsPath32\" value=\"$([MSBuild]::GetToolsDirectory32())\" />\n         <property name=\"MSBuildToolsPath64\" value=\"$([MSBuild]::GetToolsDirectory64())\" />\n         <property name=\"MSBuildSDKsPath\" value=\"$([MSBuild]::GetMSBuildSDKsPath())\" />\n-        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"FrameworkSDKRoot\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this be a full list of all the supported targets for VS 17? That's my naive interpretaion of the VS16 section above.",
              "createdAt": "2022-11-14T16:50:02Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -373,6 +378,9 @@ internal static class FrameworkLocationHelper\n             { (dotNetFrameworkVersion471, visualStudioVersion160), (dotNetFrameworkVersion47, visualStudioVersion160) },\n             { (dotNetFrameworkVersion472, visualStudioVersion160), (dotNetFrameworkVersion471, visualStudioVersion160) },\n             { (dotNetFrameworkVersion48, visualStudioVersion160), (dotNetFrameworkVersion472, visualStudioVersion160) },\n+\n+            // VS 17\n+            { (dotNetFrameworkVersion481, visualStudioVersion170), (dotNetFrameworkVersion48, visualStudioVersion170) },",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I was focusing a bit too much on net481 specifically here. While we're here we should include all versions compatible with vs 17",
              "createdAt": "2022-11-14T18:11:41Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -373,6 +378,9 @@ internal static class FrameworkLocationHelper\n             { (dotNetFrameworkVersion471, visualStudioVersion160), (dotNetFrameworkVersion47, visualStudioVersion160) },\n             { (dotNetFrameworkVersion472, visualStudioVersion160), (dotNetFrameworkVersion471, visualStudioVersion160) },\n             { (dotNetFrameworkVersion48, visualStudioVersion160), (dotNetFrameworkVersion472, visualStudioVersion160) },\n+\n+            // VS 17\n+            { (dotNetFrameworkVersion481, visualStudioVersion170), (dotNetFrameworkVersion48, visualStudioVersion170) },",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I added other versions and noticed 4.6 falls back to 4.5.1 instead of 4.5.2.\r\n\r\nAccording to https://github.com/dotnet/msbuild/issues/601 this is intended.",
              "createdAt": "2022-11-14T18:20:38Z",
              "path": "src/Shared/FrameworkLocationHelper.cs",
              "diffHunk": "@@ -373,6 +378,9 @@ internal static class FrameworkLocationHelper\n             { (dotNetFrameworkVersion471, visualStudioVersion160), (dotNetFrameworkVersion47, visualStudioVersion160) },\n             { (dotNetFrameworkVersion472, visualStudioVersion160), (dotNetFrameworkVersion471, visualStudioVersion160) },\n             { (dotNetFrameworkVersion48, visualStudioVersion160), (dotNetFrameworkVersion472, visualStudioVersion160) },\n+\n+            // VS 17\n+            { (dotNetFrameworkVersion481, visualStudioVersion170), (dotNetFrameworkVersion48, visualStudioVersion170) },",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We need to bump this during the next major version.",
              "createdAt": "2022-11-14T17:59:14Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,6 +105,11 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,\n+\n         /// <summary>\n         /// The latest version available at the time of major release. This",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Created https://github.com/dotnet/msbuild/issues/8163 to track this",
              "createdAt": "2022-11-14T18:02:41Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -105,6 +105,11 @@ public enum TargetDotNetFrameworkVersion\n         /// </summary>\n         Version48 = 14,\n \n+        /// <summary>\n+        /// version 4.8.1\n+        /// </summary>\n+        Version481 = 15,\n+\n         /// <summary>\n         /// The latest version available at the time of major release. This",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Another option would avoid the need for downstream changes:\r\n\r\n```suggestion\r\n        <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::ValueOrDefault($([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32)), $([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\r\n```\r\n\r\nThink that's better, or too complicated to be helpful?",
              "createdAt": "2022-11-15T16:14:26Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -181,6 +181,7 @@\n         <property name=\"MSBuildFrameworkToolsRoot\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\\" />\n         <property name=\"SDK35ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n         <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"SDK481ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This works, though I think it should be ValueOrDefault(<481 registry key>, <48 registry key>) so we can fall back to 48",
              "createdAt": "2022-11-15T17:32:39Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -181,6 +181,7 @@\n         <property name=\"MSBuildFrameworkToolsRoot\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\\" />\n         <property name=\"SDK35ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n         <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"SDK481ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yes, definitely!",
              "createdAt": "2022-11-15T17:44:46Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -181,6 +181,7 @@\n         <property name=\"MSBuildFrameworkToolsRoot\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\\" />\n         <property name=\"SDK35ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n         <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"SDK481ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I verified this logic works and correctly falls back to 4.8 after I uninstalled 4.8.1.\r\n\r\n(see \"Foo: Test: ...\")\r\n```\r\nC:\\src\\temp\\11-15\\9_36>msbuild\r\nMSBuild version 17.5.0-preview-22519-01+82a30d307 for .NET Framework\r\nBuild started 11/15/2022 9:38:25 AM.\r\nProject \"C:\\src\\temp\\11-15\\9_36\\proj.proj\" on node 1 (default targets).\r\nFoo:\r\n <SEE THIS>---->  Test: C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8.1 Tools\\\r\n...\r\n[C:\\src\\temp\\11-15\\9_36\\proj.proj]\r\nCopyFilesToOutputDirectory:\r\n  proj ->\r\nDone Building Project \"C:\\src\\temp\\11-15\\9_36\\proj.proj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.44\r\n\r\nC:\\src\\temp\\11-15\\9_36>msbuild\r\nMSBuild version 17.5.0-preview-22519-01+82a30d307 for .NET Framework\r\nBuild started 11/15/2022 9:42:53 AM.\r\nProject \"C:\\src\\temp\\11-15\\9_36\\proj.proj\" on node 1 (default targets).\r\nFoo:\r\n<SEE THIS>---->  Test: C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\\r\n...\r\n [C:\\src\\temp\\11-15\\9_36\\proj.proj]\r\nCopyFilesToOutputDirectory:\r\n  proj ->\r\nDone Building Project \"C:\\src\\temp\\11-15\\9_36\\proj.proj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.44\r\n```\r\n\r\nThe project:\r\n```xml\r\n<Project Sdk=\"Microsoft.Build.NoTargets/3.1.0\" InitialTargets=\"Foo\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n        <Test>$([MSBuild]::ValueOrDefault($([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32)), $([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))))</Test>\r\n    </PropertyGroup>\r\n\r\n    <Target Name=\"Foo\">\r\n        <Message Text=\"Test: $(Test)\" Importance=\"High\" />\r\n    </Target>\r\n\r\n</Project>\r\n\r\n```",
              "createdAt": "2022-11-15T17:47:56Z",
              "path": "src/MSBuild/app.amd64.config",
              "diffHunk": "@@ -181,6 +181,7 @@\n         <property name=\"MSBuildFrameworkToolsRoot\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\\" />\n         <property name=\"SDK35ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n         <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\n+        <property name=\"SDK481ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.8.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}