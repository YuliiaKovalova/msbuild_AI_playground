{
  "number": 10792,
  "title": "perf fixes copy from dotutils and MSBuildStructuredLog",
  "body": "Fixes #10674 #10675\r\n\r\n### Context\r\nhttps://github.com/dotutils/streamutils/pull/2 makes more performant custom implementations of streams which can be copied here\r\n\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/pull/821 indroduced changes to BuildEventArgsReader which should be the same in MSBuildStructuredLog, this PR copies these changes.\r\n\r\n### Changes Made\r\n3 commits\r\n1. override custom stream methods\r\n2. adopt changes to BuildEventArgsReader\r\n3. make non-params versions of resource methods\r\n\r\n### Testing\r\nperf improvement validation setup:\r\n1. get validation .binlog from msbuild's own build on this branch `.\\build /bl /p:Configuration=Release, \r\n4. also do this for a baseline from main [94941d9](https://github.com/dotnet/msbuild/commit/94941d9cb26bb86045452b4a174a357b65a30c99)\r\n5. measurement of replay speed in powershell script: run with each version bootstrapped replay `versionX\\artifacts\\bin\\bootstrap\\core\\dotnet.exe build ThisPRVersion\\msbuild.binlog`\r\n6. 100x measurements for both versions alternating their runs\r\n7. mean, stdev, t-test\r\n\r\nResults on Devbox machine:\r\n\r\nCommand 1: `.\\msbuild\\artifacts\\bin\\bootstrap\\core\\dotnet.exe build .\\msbuild\\msbuild.binlog`\r\nAverage runtime: 1790.30201 ms\r\nStandard deviation: 247.701794004614 ms\r\n\r\nCommand 2: `.\\msbuildbase\\artifacts\\bin\\bootstrap\\core\\dotnet.exe build .\\msbuild\\msbuild.binlog`\r\nAverage runtime: 2202.75113 ms\r\nStandard deviation: 146.88933492219 ms\r\n\r\nT-statistic: -14.3221294766752\r\ndegrees of freedom 100-1\r\npvalue <0.0001, we can reject the hypothesis that the distributions have the same mean, the alternate hypothesis is that the change is faster.\r\n\r\n_We got a ~23% speedup for this scenario._\r\n\r\n(even better results on OrchardCore, but less rigorously obtained)\r\n### Notes\r\n\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-10-10T17:45:37Z",
  "updatedAt": "2024-10-14T08:21:13Z",
  "closedAt": "2024-10-14T08:21:13Z",
  "mergedAt": "2024-10-14T08:21:13Z",
  "additions": 364,
  "deletions": 64,
  "changedFiles": 5,
  "headRefName": "dev/janpro/perf-fixes-dotutils-viewer",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "40167a411f419db44f524342f93c178044c5e847",
          "message": "adopt stream changes from dotutils",
          "committedDate": "2024-10-10T16:02:50Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc764a7bce6d15c578a16942a85b56704bb476ad",
          "message": "adopt BuildEventArgsReader changes from BinlogViewer",
          "committedDate": "2024-10-10T16:03:15Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bbb50d135b5204fd330396350d7caf8da240e9ea",
          "message": "add ResourceUtilities methods without params, refacor",
          "committedDate": "2024-10-10T16:15:32Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "523e06ad93840524cb2958cfca6dc5af5005685e",
          "message": "refactor conditional compilation to debug method attribute",
          "committedDate": "2024-10-14T07:39:06Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Tiny nit: since you're also guarding all calls to this under `#if DEBUG`, consider letting the compiler do that for you:\r\n```suggestion\r\n        [Conditional(\"DEBUG\")]\r\n        private static void ValidateArgs(object[] args)\r\n```\r\n\r\nThe compiler [appears to be smart enough to elide the array construction](https://sharplab.io/#v2:CYLg1APgAgTAjAWAFBQAwAIpwHQBECWAhgOYB2A9gM4Au+AxpQNzJQDMmM6AwugN7LpBmdlAAs6ALIAKAJR8BQxQUqEADqoCmhAE75SxCRuoALcsCkBtOABoYAXRnMkixVgCcsp4oC+CwX/QLLnJSYHxaEMIAGykAIgBlAAUAUS4ASQBBABkAfXiAOQB5AHUAMSyMgGlk2Jk7RQC2TDgANkxxZTVNHT0DI1NzcgAjACsNOmoLevwZAP5nF0F8ADN0KXxsLI19E3QAPnQ4WYXF+cXFk21yAHd0Ug1b/PJqNIBbVSiNV+3qDWBkgAedA0qgipE8AR8AV8SG8QA) when it's unnecessary.",
              "createdAt": "2024-10-10T21:56:07Z",
              "path": "src/Shared/ResourceUtilities.cs",
              "diffHunk": "@@ -227,33 +369,89 @@ internal static string FormatString(string unformatted, params object[] args)\n             string formatted = unformatted;\n \n             // NOTE: String.Format() does not allow a null arguments array\n-            if ((args?.Length > 0))\n+            if (args?.Length > 0)\n             {\n #if DEBUG\n-                // If you accidentally pass some random type in that can't be converted to a string,\n-                // FormatResourceString calls ToString() which returns the full name of the type!\n-                foreach (object param in args)\n-                {\n-                    // Check it has a real implementation of ToString() and the type is not actually System.String\n-                    if (param != null)\n-                    {\n-                        if (string.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal) &&\n-                            param.GetType() != typeof(string))\n-                        {\n-                            ErrorUtilities.ThrowInternalError(\"Invalid resource parameter type, was {0}\",\n-                                param.GetType().FullName);\n-                        }\n-                    }\n-                }\n+                ValidateArgs(args);\n #endif\n+\n                 // Format the string, using the variable arguments passed in.\n                 // NOTE: all String methods are thread-safe\n-                formatted = String.Format(CultureInfo.CurrentCulture, unformatted, args);\n+                formatted = string.Format(CultureInfo.CurrentCulture, unformatted, args);\n             }\n \n             return formatted;\n         }\n \n+        // Overloads with 1-3 arguments to avoid array allocations.\n+\n+        /// <summary>\n+        /// Formats the given string using the variable arguments passed in.\n+        /// </summary>\n+        /// <param name=\"unformatted\">The string to format.</param>\n+        /// <param name=\"arg1\">Argument for formatting the given string.</param>\n+        /// <returns>The formatted string.</returns>\n+        internal static string FormatString(string unformatted, object arg1)\n+        {\n+#if DEBUG\n+            ValidateArgs([arg1]);\n+#endif\n+            return string.Format(CultureInfo.CurrentCulture, unformatted, arg1);\n+        }\n+\n+        /// <summary>\n+        /// Formats the given string using the variable arguments passed in.\n+        /// </summary>\n+        /// <param name=\"unformatted\">The string to format.</param>\n+        /// <param name=\"arg1\">First argument for formatting the given string.</param>\n+        /// <param name=\"arg2\">Second argument for formatting the given string.</param>\n+        /// <returns>The formatted string.</returns>\n+        internal static string FormatString(string unformatted, object arg1, object arg2)\n+        {\n+#if DEBUG\n+            ValidateArgs([arg1, arg2]);\n+#endif\n+            return string.Format(CultureInfo.CurrentCulture, unformatted, arg1, arg2);\n+        }\n+\n+        /// <summary>\n+        /// Formats the given string using the variable arguments passed in.\n+        /// </summary>\n+        /// <param name=\"unformatted\">The string to format.</param>\n+        /// <param name=\"arg1\">First argument for formatting the given string.</param>\n+        /// <param name=\"arg2\">Second argument for formatting the given string.</param>\n+        /// <param name=\"arg3\">Third argument for formatting the given string.</param>\n+        /// <returns>The formatted string.</returns>\n+        internal static string FormatString(string unformatted, object arg1, object arg2, object arg3)\n+        {\n+#if DEBUG\n+            ValidateArgs([arg1, arg2, arg3]);\n+#endif\n+            return string.Format(CultureInfo.CurrentCulture, unformatted, arg1, arg2, arg3);\n+        }\n+\n+#if DEBUG\n+        private static void ValidateArgs(object[] args)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}