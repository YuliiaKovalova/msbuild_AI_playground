{
  "number": 7056,
  "title": "Evaluator allocation optimization",
  "body": "Fixes #6307\r\n\r\n### Context\r\nEvaluator sometimes allocates `List<ProjectRootElement>` instances when it's not necessary.\r\n\r\n### Changes Made\r\nCollection allocation is postponed and empty `Enumerable` singleton is used to represent empty result.\r\n@drewnoakes I tried to use `ImmutableArray`, but it produced more allocations - builder is copying underlying array when creating instance of the immutable collection.\r\n\r\n### Testing\r\nI tracked `List<ProjectRootElement>` allocations while building simple solution with two empty C# projects (.NET Framework and Core). Number of allocated instances dropped from 264 to 178.\r\n\r\n### Notes\r\nThis optimization looked like good first issue to solve, but complexity of the `Evaluator` is IMHO high and using `out` parameters for these collections makes it more difficult to track their flow :)",
  "state": "MERGED",
  "createdAt": "2021-11-22T08:32:29Z",
  "updatedAt": "2022-12-29T12:13:58Z",
  "closedAt": "2021-11-26T08:18:59Z",
  "mergedAt": "2021-11-26T08:18:58Z",
  "additions": 37,
  "deletions": 18,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/evaluator-allocation-optimization-v2",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9ba848847c3dabd4253f58945596372c3aedfaa9",
          "message": "Removed unnecessary allocations",
          "committedDate": "2021-11-18T10:03:17Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f727cb81339cf60f272b6630520bb78d4e05998",
          "message": "Fixed some failing tests",
          "committedDate": "2021-11-18T12:10:44Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e940df7d34e3e244c7c739c1b5e2f2e8dd152691",
          "message": "Resolving failing tests",
          "committedDate": "2021-11-18T13:27:58Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a45283dc02ca686cea34bc8d62a28fc4d7962358",
          "message": "Using 'null' as empty collection representation",
          "committedDate": "2021-11-23T10:58:16Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "91fc458f8c88814524c40bb47db15dc026b7cc74",
          "message": "Resolved \"project\" variable reasigning",
          "committedDate": "2021-11-23T15:08:25Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7056) <br/>All CLA requirements met.",
        "createdAt": "2021-11-22T08:32:42Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7056) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7056) before we can accept your contribution.<br/><br/>:x: MichalPavlik [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7056)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=7056) it.</sub>",
        "createdAt": "2021-11-22T08:32:43Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Out of curiosity, instead of having the API allocate the list, why not pass a list to add to, to the API? That avoids all the intermediate collection allocations.",
        "createdAt": "2021-11-22T10:01:52Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "> @drewnoakes I tried to use ImmutableArray, but it produced more allocations - builder is copying underlying array when creating instance of the immutable collection.\r\n\r\nThere are several ways to construct `ImmutableArray`. If you use a builder with correct capacity, then `MoveToImmutable` there is no wasted allocation.\r\n\r\n> Changing the type of the variable to IEnumerable has the unfortunate implication of regressing foreach performance. \r\n\r\nIf you are able to use `ImmutableArray` then the foreach performance benefit will be maintained.",
        "createdAt": "2021-11-22T12:55:32Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@Therzok It was one of the solutions I proposed in the issue. The change would be more impactful, because for example `ExpandAndLoadImports` is adding items to collection conditionally based on `containsWildcards` value. I wanted to avoid bigger changes and make the PR small.",
        "createdAt": "2021-11-22T13:40:32Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@drewnoakes When I looked at the description for this method some time ago, I somehow fixed in my mind that it immediately creates new array for Builder. I checked the source and it seems I understood it wrong. I will update my branch with `ImmutableArray` and measure it again.",
        "createdAt": "2021-11-22T13:46:51Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@drewnoakes I tried `MoveToImmutable`, but it requires to know the exact number of elements in advance. So I used `null` insead of empty enumerable in last commit.",
        "createdAt": "2021-11-23T11:02:59Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Changing the type of the variable to `IEnumerable` has the unfortunate implication of regressing `foreach` performance. Compare the IL code here:\r\n\r\nhttps://sharplab.io/#v2:EYLgtghglgdgNAFxFANgHwAICYCMBYAKAwAYACDHAFgG5CMBmcrUgYVIG9DTvzGNLSAWQAUAGSgBnBAB4KxAHykUkhAEoOXHloBmAewBOAUwgBjABalhc0hNKwlK1Zq3dOBFx/I4AnMImrad08AX2dSUKDuBnIBADkrHHpZHAUHKXU3T1I9I1MLBLJbe2V0sK1MrJ4KX39ArIitCOCgA\r\n\r\nWhen typed as `IEnumerable`, List's enumerator is boxed (an extra allocation) and then accessed through the `IEnumerator` interface (tiny bit slower than direct calls).\r\n\r\nCan this optimization be implemented without changing the type, by using a special value of `null` to represent an empty list for example?",
              "createdAt": "2021-11-22T11:42:42Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1428,7 +1428,7 @@ private void EvaluateImportElement(string directoryOfImportingFile, ProjectImpor\n         {\n             using (_evaluationProfiler.TrackElement(importElement))\n             {\n-                List<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n+                IEnumerable<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n \n                 foreach (ProjectRootElement importedProjectRootElement in importedProjectRootElements)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I know about value type based enumerator for `List<T>` and I was thinking about using `null` to keep specific type. To be honest, I don't know why I rejected this idea so it worth to use it. \r\nI will try to use `ImmutableArray` and `MoveToImmutable` as Drew mentioned. Maybe we will not need `List` at all.",
              "createdAt": "2021-11-22T13:52:20Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1428,7 +1428,7 @@ private void EvaluateImportElement(string directoryOfImportingFile, ProjectImpor\n         {\n             using (_evaluationProfiler.TrackElement(importElement))\n             {\n-                List<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n+                IEnumerable<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n \n                 foreach (ProjectRootElement importedProjectRootElement in importedProjectRootElements)",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "@ladipro I changed the code to use `null`s.",
              "createdAt": "2021-11-23T11:04:41Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1428,7 +1428,7 @@ private void EvaluateImportElement(string directoryOfImportingFile, ProjectImpor\n         {\n             using (_evaluationProfiler.TrackElement(importElement))\n             {\n-                List<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n+                IEnumerable<ProjectRootElement> importedProjectRootElements = ExpandAndLoadImports(directoryOfImportingFile, importElement, out var sdkResult);\n \n                 foreach (ProjectRootElement importedProjectRootElement in importedProjectRootElements)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this needed?",
              "createdAt": "2021-11-23T12:31:24Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1830,38 +1840,47 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                         _evaluationLoggingContext.LogBuildEvent(eventArgs);\n \n-                        projects = new List<ProjectRootElement>();\n-\n                         return;\n                     }\n \n                     ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, \"CouldNotResolveSdk\", sdkReference.ToString());\n                 }\n \n-                if (sdkResult.Path == null)\n-                {\n-                    projects = new List<ProjectRootElement>();\n-                }\n-                else\n+                if (sdkResult.Path != null)\n                 {\n                     ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, Path.Combine(sdkResult.Path, project),\n                         throwOnFileNotExistsError, out projects);\n \n+                    if (projects?.Count > 0)\n+                    {\n+                        projects = new List<ProjectRootElement>(projects);\n+                    }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n                    if (sdkResult.AdditionalPaths?.Count > 0)\r\n                    {\r\n                        projects ??= new List<ProjectRootElement>();\r\n```\r\n\r\nOr maybe even:\r\n```suggestion\r\n                    if (sdkResult.AdditionalPaths?.Count > 0)\r\n                    {\r\n```\r\n\r\nand new up the `List` lazily when actually adding to it a few lines below.",
              "createdAt": "2021-11-23T12:33:15Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1830,38 +1840,47 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                         _evaluationLoggingContext.LogBuildEvent(eventArgs);\n \n-                        projects = new List<ProjectRootElement>();\n-\n                         return;\n                     }\n \n                     ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, \"CouldNotResolveSdk\", sdkReference.ToString());\n                 }\n \n-                if (sdkResult.Path == null)\n-                {\n-                    projects = new List<ProjectRootElement>();\n-                }\n-                else\n+                if (sdkResult.Path != null)\n                 {\n                     ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, Path.Combine(sdkResult.Path, project),\n                         throwOnFileNotExistsError, out projects);\n \n+                    if (projects?.Count > 0)\n+                    {\n+                        projects = new List<ProjectRootElement>(projects);\n+                    }\n+\n                     if (sdkResult.AdditionalPaths != null)\n                     {\n+                        if (projects == null && sdkResult.AdditionalPaths.Count > 0)\n+                        {\n+                            projects = new List<ProjectRootElement>();\n+                        }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh boy! That's an embarrassing refactoring mistake. I'm starting to have selective blindness in this part of code. It's scary that all tests passed... It should be fixed now.",
              "createdAt": "2021-11-23T15:10:41Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1830,38 +1840,47 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                         _evaluationLoggingContext.LogBuildEvent(eventArgs);\n \n-                        projects = new List<ProjectRootElement>();\n-\n                         return;\n                     }\n \n                     ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, \"CouldNotResolveSdk\", sdkReference.ToString());\n                 }\n \n-                if (sdkResult.Path == null)\n-                {\n-                    projects = new List<ProjectRootElement>();\n-                }\n-                else\n+                if (sdkResult.Path != null)\n                 {\n                     ExpandAndLoadImportsFromUnescapedImportExpression(directoryOfImportingFile, importElement, Path.Combine(sdkResult.Path, project),\n                         throwOnFileNotExistsError, out projects);\n \n+                    if (projects?.Count > 0)\n+                    {\n+                        projects = new List<ProjectRootElement>(projects);\n+                    }\n+\n                     if (sdkResult.AdditionalPaths != null)\n                     {\n+                        if (projects == null && sdkResult.AdditionalPaths.Count > 0)\n+                        {\n+                            projects = new List<ProjectRootElement>();\n+                        }",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}