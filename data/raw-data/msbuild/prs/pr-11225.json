{
  "number": 11225,
  "title": "Make the cancelation can be executed before the task is done",
  "body": "Fixes #11018\r\n\r\n### Context\r\nTest result `Shouldly.ShouldAssertException : task.Result\\r\\n    should be\\r\\nFalse\\r\\n    but was\\r\\nTrue` indicates that the task is done quickly before the cancelation is executed, though the test cancels it right after it is started. \r\n \r\n### Changes Made\r\nMake a fake stream that provides a single character A~Z per a couple of milliseconds infinitely without high memory cost as the content of http response message and increase the task timeout a little so that the cancellation can be executed.\r\n\r\n### Testing\r\nN/A\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-06T06:36:02Z",
  "updatedAt": "2025-01-23T08:03:54Z",
  "closedAt": "2025-01-23T08:03:49Z",
  "mergedAt": "2025-01-23T08:03:49Z",
  "additions": 38,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "downloadfile-flaky-test",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bdd4baafd1df304e229a8fabfd96ec506fc55254",
          "message": "Make the file large enough so that the cancelation can be executed before the task is done",
          "committedDate": "2025-01-06T10:07:33Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "026f60d7ff43f9cccb714a7a848bb53a0ed57d05",
          "message": "Use StreamContent to indefinitely provide single char per couple dozens milliseconds",
          "committedDate": "2025-01-10T07:47:01Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "734d2c1c4dc3f6d4715e60db85b8a21629b18652",
          "message": "Use a fake stream that provides a single character A~Z per a couple of milliseconds without high memory cost instead",
          "committedDate": "2025-01-17T06:22:53Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "79270f82f9ed02349c483a07036142b7d6049fd5",
          "message": "Correct the TimeSpan with Milliseconds",
          "committedDate": "2025-01-21T07:39:52Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27bf9d5c4769a23885c7ac6f6624aa62f0a81f33",
          "message": "Change the implementation of Read() in the fake stream with simple logic and add a comment",
          "committedDate": "2025-01-23T07:16:21Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2025-01-07T06:38:00Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2025-01-07T06:38:12Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we instead use a `StreamContent` that would e.g. indefinitely provide single char per couple dozens milliseconds?",
              "createdAt": "2025-01-07T13:22:38Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -37,7 +37,7 @@ public void CanBeCanceled()\n                     DestinationFolder = new TaskItem(folder.Path),\n                     HttpMessageHandler = new MockHttpMessageHandler((message, token) => new HttpResponseMessage(HttpStatusCode.OK)\n                     {\n-                        Content = new StringContent(new String('!', 10000000)),\n+                        Content = new StringContent(new String('!', 0xfffffff)),",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The idea is not to require extreme resources for the test to proceed, but rather create a custom implementation of content, that would behave as if it'd be indefinite, but rather than being backed by real memory, it would just keep returning artifical data.\r\n\r\nLm know if code sample would be helpful here to clarify.",
              "createdAt": "2025-01-11T20:46:08Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -37,7 +37,7 @@ public void CanBeCanceled()\n                     DestinationFolder = new TaskItem(folder.Path),\n                     HttpMessageHandler = new MockHttpMessageHandler((message, token) => new HttpResponseMessage(HttpStatusCode.OK)\n                     {\n-                        Content = new StringContent(new String('!', 10000000)),\n+                        Content = new StringContent(new String('!', 0xfffffff)),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This change unfortunately still allocates the large string.",
              "createdAt": "2025-01-14T10:51:56Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -37,7 +37,7 @@ public void CanBeCanceled()\n                     DestinationFolder = new TaskItem(folder.Path),\n                     HttpMessageHandler = new MockHttpMessageHandler((message, token) => new HttpResponseMessage(HttpStatusCode.OK)\n                     {\n-                        Content = new StringContent(new String('!', 10000000)),\n+                        Content = new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes(new String('!', 0xfffffff)))),",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we want to wait here for almost half of an hour?\r\nWhat is supposed to happen here please?",
              "createdAt": "2025-01-20T13:03:50Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -47,7 +47,7 @@ public void CanBeCanceled()\n \n                 downloadFile.Cancel();\n \n-                task.Wait(TimeSpan.FromSeconds(1)).ShouldBeTrue();\n+                task.Wait(TimeSpan.FromSeconds(1500)).ShouldBeTrue();",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Oh, that was a miss. It should be Milliseconds.",
              "createdAt": "2025-01-21T07:41:14Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -47,7 +47,7 @@ public void CanBeCanceled()\n \n                 downloadFile.Cancel();\n \n-                task.Wait(TimeSpan.FromSeconds(1)).ShouldBeTrue();\n+                task.Wait(TimeSpan.FromSeconds(1500)).ShouldBeTrue();",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please comment what is this doing and why (especially why it doesn't write at requested offset).\r\n\r\nShould it just be?\r\n```\r\n// Writes next char in alphabet into the begining of requested destination\r\nbuffer[offset] = (byte)('A' + Position % 26);\r\n...\r\n```",
              "createdAt": "2025-01-21T10:53:53Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -401,4 +401,38 @@ protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage reques\n             }\n         }\n     }\n+\n+    // Fake stream that simulates providing a single character A~Z per a couple of milliseconds without high memory cost.\n+    public class FakeStream : Stream\n+    {\n+        private readonly int delayMilliseconds;\n+\n+        public FakeStream(int delayInMilliseconds = 20)\n+        {\n+            delayMilliseconds = delayInMilliseconds;\n+            Position = 0;\n+        }\n+\n+        public override bool CanRead => true;\n+        public override bool CanSeek => true;\n+        public override bool CanWrite => false;\n+        public override long Length => long.MaxValue;\n+        public override long Position { get; set; }\n+\n+        public override int Read(byte[] buffer, int offset, int count)\n+        {\n+            buffer[Position % count] = (byte)('A' + Position % 26);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "it doesn't do that though. It keeps internal position and ignores both offset and count, though count only partially (it uses it to do a weird sort of array bound check)\r\nso overall it will work in this case, but the returned data is kind of weird. \r\nWe don't care about the data here so for the test alone it's fine-ish, but a comment would be appreciated.",
              "createdAt": "2025-01-21T11:31:24Z",
              "path": "src/Tasks.UnitTests/DownloadFile_Tests.cs",
              "diffHunk": "@@ -401,4 +401,38 @@ protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage reques\n             }\n         }\n     }\n+\n+    // Fake stream that simulates providing a single character A~Z per a couple of milliseconds without high memory cost.\n+    public class FakeStream : Stream\n+    {\n+        private readonly int delayMilliseconds;\n+\n+        public FakeStream(int delayInMilliseconds = 20)\n+        {\n+            delayMilliseconds = delayInMilliseconds;\n+            Position = 0;\n+        }\n+\n+        public override bool CanRead => true;\n+        public override bool CanSeek => true;\n+        public override bool CanWrite => false;\n+        public override long Length => long.MaxValue;\n+        public override long Position { get; set; }\n+\n+        public override int Read(byte[] buffer, int offset, int count)\n+        {\n+            buffer[Position % count] = (byte)('A' + Position % 26);",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}