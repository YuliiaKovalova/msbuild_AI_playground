{
  "number": 8638,
  "title": "Fix flaky test  CanShutdownServerProcess",
  "body": "Fixes #8631\r\n\r\n### Context\r\nWe have got him!\r\nThere was eluding low freq flaky test. It was caused by race condition between finishing build server client and server releasing its `I am busy` mutex.\r\n\r\n### Changes Made\r\nWait and retry when it was detected busy for 500 ms.\r\nClean additional logging from test.\r\n\r\n### Testing\r\nLocal, PR\r\n",
  "state": "MERGED",
  "createdAt": "2023-04-05T14:16:53Z",
  "updatedAt": "2023-04-05T19:34:38Z",
  "closedAt": "2023-04-05T19:34:38Z",
  "mergedAt": "2023-04-05T19:34:38Z",
  "additions": 18,
  "deletions": 7,
  "changedFiles": 2,
  "headRefName": "rokonec/8631-fix-flaky-test-CanShutdownServerProcess",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7a7309a012c32e0adea866086d284f8a89b99a4e",
          "message": "Fix flaky test  CanShutdownServerProcess",
          "committedDate": "2023-04-05T14:13:42Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01fad6a0ca9f151863373b2157b0a07f2e62f49c",
          "message": "Refactor condition\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-04-05T14:43:02Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08d905f9b6579cf02bba1484c7753fd5b535a566",
          "message": "Minor refactoring\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-04-05T15:25:55Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-04-05T15:32:24Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-04-05T16:13:04Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we leave this in for a while? Sounds like you're very confident of the fix . . .",
              "createdAt": "2023-04-05T14:19:32Z",
              "path": "src/MSBuild.UnitTests/MSBuildServer_Tests.cs",
              "diffHunk": "@@ -221,10 +221,6 @@ public void CanShutdownServerProcess(bool byBuildManager)\n         {\n             _env.SetEnvironmentVariable(\"MSBUILDUSESERVER\", \"1\");\n \n-            // This test seems to be flaky, lets enable better logging to investigate it next time\n-            // TODO: delete after investigated its flakiness\n-            _env.WithTransientDebugEngineForNewProcesses(true);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I am confident, but also I was wrongly confident in past more than few times, but we can easily put it back with, hopefully not happening, next failure.",
              "createdAt": "2023-04-05T14:53:32Z",
              "path": "src/MSBuild.UnitTests/MSBuildServer_Tests.cs",
              "diffHunk": "@@ -221,10 +221,6 @@ public void CanShutdownServerProcess(bool byBuildManager)\n         {\n             _env.SetEnvironmentVariable(\"MSBUILDUSESERVER\", \"1\");\n \n-            // This test seems to be flaky, lets enable better logging to investigate it next time\n-            // TODO: delete after investigated its flakiness\n-            _env.WithTransientDebugEngineForNewProcesses(true);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            while (isBusy && sw.ElapsedMilliseconds < milliseconds)\r\n```\r\n\r\n?",
              "createdAt": "2023-04-05T14:21:49Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -291,6 +292,20 @@ private bool TryShutdownServer(CancellationToken cancellationToken)\n             return _exitResult.MSBuildClientExitType == MSBuildClientExitType.Success;\n         }\n \n+        private bool ServerIsBusyWithWaitAndRetry(int milliseconds)\n+        {\n+            bool isBusy = ServerWasBusy();\n+            Stopwatch sw = Stopwatch.StartNew();\n+            while (isBusy && sw.Elapsed < TimeSpan.FromMilliseconds(milliseconds))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Or use a maximum number of retries instead of measuring elapsed time?",
              "createdAt": "2023-04-05T15:19:46Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -291,6 +292,20 @@ private bool TryShutdownServer(CancellationToken cancellationToken)\n             return _exitResult.MSBuildClientExitType == MSBuildClientExitType.Success;\n         }\n \n+        private bool ServerIsBusyWithWaitAndRetry(int milliseconds)\n+        {\n+            bool isBusy = ServerWasBusy();\n+            Stopwatch sw = Stopwatch.StartNew();\n+            while (isBusy && sw.Elapsed < TimeSpan.FromMilliseconds(milliseconds))",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to ensure this never happens by releasing ServerBusy before reporting the finish? Or does that violate other invariants?",
              "createdAt": "2023-04-05T14:23:12Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -265,9 +265,10 @@ private bool TryShutdownServer(CancellationToken cancellationToken)\n                 return true;\n             }\n \n-            // Check that server is not busy.\n-            bool serverWasBusy = ServerWasBusy();\n-            if (serverWasBusy)\n+            // Check and wait for server to be not busy for some short time to avoid race condition when server reports build is finished but had not released ServerBusy mutex yet.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I thought about it. It is hard to me to identify and understand all consequences. In theory it shall be fine, report server not busy when its namedpipe connection still sending data to finishing client shall be fine, since worst case we fall back to non server because namedpipe could not be opened. But is sending final build result to client part of being busy? I think it is? So declaring not busy while still doing something related with just finished build is not clear.\r\n\r\nAll in all, I just consider my changes slightly better and less risky. Not a biggie though",
              "createdAt": "2023-04-05T14:52:21Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -265,9 +265,10 @@ private bool TryShutdownServer(CancellationToken cancellationToken)\n                 return true;\n             }\n \n-            // Check that server is not busy.\n-            bool serverWasBusy = ServerWasBusy();\n-            if (serverWasBusy)\n+            // Check and wait for server to be not busy for some short time to avoid race condition when server reports build is finished but had not released ServerBusy mutex yet.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}