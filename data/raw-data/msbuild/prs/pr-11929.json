{
  "number": 11929,
  "title": "Avoid enumerator boxing for ItemBucket",
  "body": "Fixes #\r\n\r\nThe ItemBucket constructor enumerates some dictionary keys through the ICollection<T> interface that causes allocations by boxing an enumerator.\r\n\r\n### Context\r\n The only type that's passed to the constructor is a dictionary and we pass the associated KeyCollection which ends up getting boxed. We can just pass the concrete type to avoid this.\r\n\r\n![image](https://github.com/user-attachments/assets/99ad2076-782f-4544-b174-d3aee5675784)\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-29T21:11:59Z",
  "updatedAt": "2025-06-02T14:51:03Z",
  "closedAt": "2025-06-02T14:51:03Z",
  "mergedAt": "2025-06-02T14:51:03Z",
  "additions": 2,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "dev/erarndt/keyCollection",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8b8dafd8b6f94abb9aa0867f70ea3bda092c8088",
          "message": "Avoid enumerator boxing for ItemBucket",
          "committedDate": "2025-05-29T21:06:35Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider using a dictionary with representative test data for clarity in tests rather than an empty dictionary, ensuring the usage of KeyCollection is well illustrated.\n```suggestion\n            var representativeDictionary = new Dictionary<string, ICollection<ProjectItemInstance>>\n            {\n                { \"Key1\", new List<ProjectItemInstance> { new ProjectItemInstance(project, \"Item1\", \"a.cs\", \".\") } },\n                { \"Key2\", new List<ProjectItemInstance> { new ProjectItemInstance(project, \"Item2\", \"b.cs\", \".\") } }\n            };\n\n            _bucket = new ItemBucket(representativeDictionary.Keys, new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);\n```",
              "createdAt": "2025-05-29T21:12:21Z",
              "path": "src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs",
              "diffHunk": "@@ -1282,7 +1282,7 @@ private void InitializeHost(bool throwOnExecute)\n             itemsByName.Add(item2);\n             _twoItems = new ITaskItem[] { new TaskItem(item), new TaskItem(item2) };\n \n-            _bucket = new ItemBucket(Array.Empty<string>(), new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);\n+            _bucket = new ItemBucket(new Dictionary<string, ICollection<ProjectItemInstance>>().Keys, new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}