{
  "number": 8258,
  "title": "[FancyLogger] Add nodes data structures and optimize buffer",
  "body": "Fixes #\r\n\r\n### Context\r\nThe FancyLogger shows the projects currently being built with relevant information such as their currently running tasks and targets, as well as additional info such as high priority messages, warnings and errors. \r\nThis information updates live on the buffer, so proper data structures are needed. \r\n\r\n![image](https://user-images.githubusercontent.com/5952839/208793436-03107ae8-12d9-4e7e-866b-803648a339d9.png)\r\n\r\n### Changes Made\r\n* Removed `FancyLoggerNode` that was previously used as a generic node to create the build tree.\r\n* Created `FancyLoggerProjectNode` to contain information and methods relevant to projects, and to communicate with other types of nodes for displaying targets, projects, messages, warnings and errors. \r\n* Created `FancyLoggerTargetNode` to contain information and methods about the currently executing target in each project, as well as to communicate with `FancyLoggerTaskNode` for displaying info about the current task. \r\n* Created `FancyLoggerTaskNode` to contain information and methods about the currently executing task inside a target. \r\n\r\n* The FancyLogger now shows a list of projects, each with information on the currently executing target and task, as well as the amount of completed targets. \r\n\r\n### Testing\r\n\r\n\r\n### Notes",
  "state": "MERGED",
  "createdAt": "2022-12-20T02:36:02Z",
  "updatedAt": "2023-01-09T02:42:23Z",
  "closedAt": "2023-01-09T02:42:23Z",
  "mergedAt": "2023-01-09T02:42:23Z",
  "additions": 399,
  "deletions": 367,
  "changedFiles": 7,
  "headRefName": "edvilme-flg-projects",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "58dfa23fbcc2f92796aaf122e14c31f0bbd7cccd",
          "message": "Added FancyLogger\n\nAdded FancyLogger (in development). Used with the /fancylogger commandline switch",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f188e4a1ee8d1c3e2685d942c79b483de45de783",
          "message": "Clean up code comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9d38d899354c5f52a8f49ebdd48778f5ee3f448",
          "message": "Clean up code comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9fd2b6331bd0e037f94b44c13668556642ba095a",
          "message": "Does not use FancyLogger if being redirected to a file",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11100e8ee776ee9bad4a1d34fa9f704f39bac0fb",
          "message": "Added ANSIBuilder for formatting and console updating",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1ffa074b51931f680b6d26091f31738102f0a10",
          "message": "Added target started to logs",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72c17bcaf31125f25691a7b07f244bf352e2213d",
          "message": "Fixed bugs and added better comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc46e3f549649ccf107b768984797f28bfe46cf6",
          "message": "Added design documentation for FancyLogger",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42e289e077ffe370c7ff026f4e61bb8c060e3dfe",
          "message": "Adding deferred build message",
          "committedDate": "2022-11-18T22:51:56Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7ae8cc483398899b68be71173534109be3afb78",
          "message": "Added loading indicator",
          "committedDate": "2022-11-19T01:18:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "642a92d428e1ab82ba001847de0bcdea177caa41",
          "message": "Renamed ANSIBuilder.Grapics.Loading to ANSIBuilder.Graphics.Spinner\n\nRenamed to a more descriptive name and replaced undisplayable characters with \\|/-",
          "committedDate": "2022-11-22T01:02:30Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73587b10a61c1a02600e1830f24e4f9f7930fcd0",
          "message": "Working on ANSI",
          "committedDate": "2022-11-22T18:09:29Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87516e5f976a3dae896adad6005527c32befa3cb",
          "message": "Add wildcard for FancyLogger on Microsoft.Build.csproj\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-23T00:49:17Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83f2dacdfeae0ccd8e4c6d907dacce0e88c0e07d",
          "message": "Added fancylogger with alternate screenbuffer",
          "committedDate": "2022-11-30T22:35:55Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "253d275cf658b87066703dc9de51017bb7390a66",
          "message": "Added fancylogger with alternate screenbuffer",
          "committedDate": "2022-11-30T22:36:25Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d064c35d592c2f4291d327afad09cd83e4288bf6",
          "message": "Solve Windows Terminal related bugs",
          "committedDate": "2022-11-30T22:46:59Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a0415027fb479f5a59bc323dcfca61939cbcdb9f",
          "message": "Added faux-scrolling for alternate buffer\n\nDefault scrolling is disabled for the alternate buffer. Instead, it responds to up/down arrow keys for scrolling and rendering automatically",
          "committedDate": "2022-12-01T00:49:00Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a0d4da32f48466800adb630b49520161f663778",
          "message": "Merged changes for csproj file",
          "committedDate": "2022-12-01T00:58:12Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7eb2086694b9113640d9a5a6a5b350a5fa1470df",
          "message": "Very basic demo for testing\n\nTargets are shown and marked as complete with checkmark and green color when finished",
          "committedDate": "2022-12-01T01:54:29Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f67d17f961e9816d4470993854116bba6395aef",
          "message": "Added scroll lock and hierarchy for projects, targets and tasks\n\nReady for demo",
          "committedDate": "2022-12-01T20:21:39Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "536c9f0954546c3385901bc7c0729abc45790972",
          "message": "Add basic percentage counter\n\nCalculated as completedTasks / existingTasks",
          "committedDate": "2022-12-01T22:49:00Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52d2cb21023425e44c6dc1a2da05f680e1f17de8",
          "message": "Removed delay",
          "committedDate": "2022-12-02T20:10:54Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1dba6ce889e7236000ac0a08bc7f4fcac0085e9",
          "message": "Added justification options for Left, Right and Center",
          "committedDate": "2022-12-02T23:51:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "54861b5204f6b31649fe979d6c4d7e2c1d30d9fd",
          "message": "Renamed justification to alignment",
          "committedDate": "2022-12-02T23:58:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b27114deca3c5d87b8559496ff44f2140d7beecc",
          "message": "Added data structure for nodes in build",
          "committedDate": "2022-12-05T21:42:28Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f721900da524abca23a1c63e98ce18de47323c9",
          "message": "Created FancyLoggerNode\n\nCreated class to encapsulate information and hierarchy of build events with their corresponding buffer line ids, and methods for expanding / collapsing (wip)",
          "committedDate": "2022-12-06T00:24:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1dac4047557beeecbd8b91e0f6f2dd52c7160b5",
          "message": "Created tree structure for builds",
          "committedDate": "2022-12-06T01:58:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "666cc376afbad835d98bea1c9ddd1ec7170cc559",
          "message": "Added node for tree writing to FnacyLoggerBuffer",
          "committedDate": "2022-12-07T00:44:26Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62da1ea1d1a8fc952ded78bc43c68115186829b6",
          "message": "a",
          "committedDate": "2022-12-07T20:44:28Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f800754001c0609a0bbcb9800ba164b7d3b0d9da",
          "message": "Fixed bug",
          "committedDate": "2022-12-13T22:39:14Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40aabf5c30175cc4b862e4f7fbb0c886e5fbc9c5",
          "message": "Refactored opt-in mechanism, and simplified logger for this pr",
          "committedDate": "2022-12-16T02:42:21Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2313ef290f43e1736df7c9ac624e51d24195de52",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into edvilme-fancy-logger",
          "committedDate": "2022-12-16T02:58:31Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e60e78c0812da88aa3ed999b4bc6256eb6d1bdfb",
          "message": "Added deferredbuildmessages for when FancyLogger is not supported",
          "committedDate": "2022-12-16T19:56:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ee97b82a367a263f33674754dd41f87f89c14a5",
          "message": "Added copyright header",
          "committedDate": "2022-12-16T19:58:06Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "310b19367c376309377eca0b1dceee5bd4b99116",
          "message": "Changed deferredbuildmessages for when FancyLogger is not supported to Low Importance",
          "committedDate": "2022-12-16T20:11:08Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d2957f65ab9bc6f312583cefb404531bf027d8f",
          "message": "Fixed typo",
          "committedDate": "2022-12-16T20:14:41Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ecf0f78139a86f792dde0c693f2d4fdf220d780",
          "message": "Solved a bug that caused deferredbuildmessages to not be added correctly. Reviewed comments",
          "committedDate": "2022-12-17T20:27:34Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab9674b2c1c96ff4f7a7efe0476c54ba89340ee8",
          "message": "Remove unused files",
          "committedDate": "2022-12-19T22:01:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "305c6cd4b77986e34b6e9b30d1b26425664ccbe2",
          "message": "Fix code styling",
          "committedDate": "2022-12-19T23:07:24Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "35e4500431dd750d472d9e1ed5944b78289e2c20",
          "message": "Fix code styling",
          "committedDate": "2022-12-19T23:12:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99e547997439ca9183a282aa53f7dc183f205328",
          "message": "Add q key to exit",
          "committedDate": "2022-12-19T23:20:54Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ef7cfc6ae2339db43c2021a7be379be053d56d7",
          "message": "Add q key to exit. Code styling",
          "committedDate": "2022-12-19T23:31:36Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d50d79765ebeeb877b66a989e5781cbdf72243e8",
          "message": "Created basic data structures\n\nReplaced FancyLoggerNode with specific nodes for projects (FancyLoggerProjectNode).",
          "committedDate": "2022-12-20T02:27:28Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b74452d8ac65c71598b231a5a9ef71f2e4969d6",
          "message": "Added placeholder for target and task info",
          "committedDate": "2022-12-20T02:50:45Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bda1cdad1970bc611a255da6d695fe4898642987",
          "message": "Added currently running target name",
          "committedDate": "2022-12-20T03:02:13Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc6238b9adb1f0c084dd330cff4137b32256b366",
          "message": "Merge branch 'main' into edvilme-flg-projects",
          "committedDate": "2022-12-20T19:29:55Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b3b34887b335be96af0596b7864fb5c50e7e8b0",
          "message": "Solved typos",
          "committedDate": "2022-12-20T19:38:42Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2be4f0c3b8ec8c501ebdd3015a66ee0b6b95c984",
          "message": "Added additional FancyLoggerNodes\n\nAdded FancyLoggerTaskNode, FancyLoggerMessageNode, FancyLoggerWarningNode and FancyLoggerErrorNode",
          "committedDate": "2022-12-20T20:01:45Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3be631e454c6bbf3e6740cbce28cdd8ca7becb92",
          "message": "Added communication between FancyLoggerProjectNode, FancyLoggerTargetNode, and FancyLoggerTaskNode.\n\nEach project node has its associated currently executing target which itself has its currently executing task. This information is displayed in the line below the project details. Also, the completed target counter is now working",
          "committedDate": "2022-12-21T00:34:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aae72efa927fe0b4040edcbff83e9ae7ba533ae5",
          "message": "Replaced placeholder name for tasks with empty string",
          "committedDate": "2022-12-21T00:52:55Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "49564afd400afdb980c4c47d758d067ac2db3682",
          "message": "Fixed bug that messed up scrolling when adding/removing a line",
          "committedDate": "2022-12-21T22:14:03Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "738d5108bde454307c41bd49d0ec44a5ba7fc63d",
          "message": "Added methods for adding messages, warnings and errors to project nodes",
          "committedDate": "2022-12-21T22:33:56Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cdae18abe2d51481d81a7b45373220de4558b767",
          "message": "Worked on comments",
          "committedDate": "2023-01-03T19:59:31Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a7992e7766e4d931e91ffe8afc097fd4bf2aeff",
          "message": "Optimized FancyLoggerBuffer",
          "committedDate": "2023-01-04T01:48:03Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ecbb302f0cdfe47c75616a624581bcd4504c6bed",
          "message": "Fixed scrolling issues",
          "committedDate": "2023-01-04T01:57:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da77e21b510407a886824c261200c085ae085c66",
          "message": "Deleted FancyLoggerBufferOld",
          "committedDate": "2023-01-04T18:10:46Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbc657197463783b0bc3b728b95657ad011017ab",
          "message": "Added target framework tags for projects",
          "committedDate": "2023-01-04T19:35:15Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59a6f745638c2cf10a426c89bc8a0242bfbc238f",
          "message": "Update src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-01-04T19:55:59Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "34de83b5c5f7576a31ad5bb5d6483959e0c6a360",
          "message": "Made FancyLoggerProjectNode internal class",
          "committedDate": "2023-01-05T20:35:07Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f44d8cce17d445a124c3aa9bb309189635bc26cb",
          "message": "Moved FancyLoggerProjectNode, FancyLoggerTargetNode, FancyLoggerTaskNode and FancyLoggerMessageNode to separate files",
          "committedDate": "2023-01-05T20:49:19Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6519bc6fca813a3f8ef1d772774018048593247e",
          "message": "Added comments for code to be removed or replaced",
          "committedDate": "2023-01-05T22:33:02Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b4fe98e2b215f0a79a7c72acae479b7979633269",
          "message": "Update src/Build/Logging/FancyLogger/FancyLogger.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-01-06T16:13:16Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I thought we'd decided we weren't showing anything at task granularity; did I misremember?",
              "createdAt": "2022-12-27T17:06:08Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -43,12 +42,12 @@ public void Initialize(IEventSource eventSource)\n             // Started\n             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n-            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n-            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It is used also for updating the spinner. The names of the tasks can be shown inline (eg, Target : Task), but I will make it so that it can be easily hidden in case we don't like it",
              "createdAt": "2023-01-03T23:52:34Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -43,12 +42,12 @@ public void Initialize(IEventSource eventSource)\n             // Started\n             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n-            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n-            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if, rather than just returning early, we should error for this kind of case? On the one hand, it sounds like it's a bug if we \"finish\" a project without having \"started\" it, but on the other hand, it's good when your logging infrastructure doesn't fail a build that otherwise would have succeeded.\r\n\r\nSame (maybe) applies to targets, etc.",
              "createdAt": "2022-12-27T17:10:08Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I see a lot of `e.BuildEventContext!`; is it possible to make BuildEventContext never null on this type? Ignore this if it's hard or annoying.",
              "createdAt": "2022-12-27T17:11:50Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also, the code is almost identical for almost all of these; I'm wondering if you could factor it out so these methods just all call one method with a parameter?",
              "createdAt": "2022-12-27T17:13:37Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> I see a lot of `e.BuildEventContext!`; is it possible to make BuildEventContext never null on this type? Ignore this if it's hard or annoying.\r\n\r\nI agree. I haven't looked into changing it on the type as I don't know if it would cause undesired behavior. But I can look into it",
              "createdAt": "2022-12-28T07:18:23Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "We should annotate the event-args types (and everything else in MSBuild :)). But don't spend more than a couple hours looking into it. If it can't get done in that time, we'll live with the `!` here.",
              "createdAt": "2023-01-04T15:30:03Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So you mean looking into making `BuildEventContext` not nullable for `BuildEventArgs`? I am unsure if it would break something ",
              "createdAt": "2023-01-04T18:07:11Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "Correct, but as I say this isn't a high-priority effort right now.",
              "createdAt": "2023-01-04T18:11:56Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +72,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();\n         }\n         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         {\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n-            if(!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine? line)) return;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n             // Update line\n-            FancyLoggerBuffer.UpdateLine(line.Id,\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n+            node.Finished = true;\n+            node.Log();\n         }\n         // Target\n         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddTarget(e);\n+            node.Log();\n         }\n         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.FinishedTargets++;\n+            node.Log();\n         }\n \n         // Task\n         void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do we not need this anymore?",
              "createdAt": "2022-12-27T17:14:34Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -120,24 +128,40 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n \n         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddMessage(e);\n+            node.Log();\n         }\n         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n         {\n-            FancyLoggerBuffer.WriteNewLine(\"Warning\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddWarning(e);\n+            node.Log();\n         }\n         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n         {\n-            // TODO: Try to redirect to stderr\n-            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddError(e);\n+            node.Log();\n         }\n \n \n         public void Shutdown() {\n             // Keep open if autoscroll disabled (the user is reading info)\n-            while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n+            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ohh, removed it for development. Will add back",
              "createdAt": "2022-12-28T07:18:55Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -120,24 +128,40 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n \n         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddMessage(e);\n+            node.Log();\n         }\n         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n         {\n-            FancyLoggerBuffer.WriteNewLine(\"Warning\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddWarning(e);\n+            node.Log();\n         }\n         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n         {\n-            // TODO: Try to redirect to stderr\n-            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddError(e);\n+            node.Log();\n         }\n \n \n         public void Shutdown() {\n             // Keep open if autoscroll disabled (the user is reading info)\n-            while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n+            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Few things I'm confused by in this function:\r\nIf you want to insert at the top (index 0), you'd have to pass in -1 as the index to insert after, but that means to return null. Is this a limitation?\r\nIt looks like you don't modify line before returning it. Should this just return a bool (success/failure)?\r\nWhy are we scrolling to the top line? It doesn't make more sense to scroll to the added line?",
              "createdAt": "2022-12-27T17:22:31Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -220,19 +220,24 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)\n         public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)\n         {\n             if (lineIndex == -1) return null;\n+            // Get Id of currentTopLineIndex",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I also thought it would make more sense to scroll to the newly added line. However, there might be cases where new lines are added outside of the current viewport and scrolling to them would mean having the viewport jumping to random lines which might not be great for the customer. \r\nHaving it scroll to the currenTopLineIndex (the line that is currently at the top of the viewport), aka updating the display, makes more sense as it does not affect the current viewport. ",
              "createdAt": "2022-12-28T07:38:13Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -220,19 +220,24 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)\n         public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)\n         {\n             if (lineIndex == -1) return null;\n+            // Get Id of currentTopLineIndex",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "For the insertion at the top index, I agree I didn't take that into consideration. I would also like to modify several implementation details about adding and updating lines (to both make it more understandable and predictable, and also make it much more performant)",
              "createdAt": "2022-12-28T07:39:50Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -220,19 +220,24 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)\n         public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)\n         {\n             if (lineIndex == -1) return null;\n+            // Get Id of currentTopLineIndex",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to assume that there is only ever one target executing at a time, and once we've started executing a target, we execute it to completion and never look at it again.\r\n\r\nThat's often true but not guaranteed. As a simple example of when it fails, we have a task called CallTarget. You can execute that within Target Foo to go execute Target Bar. Afterwards, it will return to execute the rest of Foo.\r\n\r\nWith that in mind, might it be necessary to have a list of targets currently executing?",
              "createdAt": "2022-12-27T17:28:58Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is true but may not be super important at the moment. If we track most-recently-started target, in the `CallTarget` case it'll be:\r\n\r\n| Time | Target Running              | Target logged               |\r\n|------|-----------------------------|-----------------------------|\r\n| 1    | `TargetThatHasCallTargetInIt` | `TargetThatHasCallTargetInIt` |\r\n| 2    | `TargetThatWasCalled`         | `TargetThatWasCalled`         |\r\n| 3    | `TargetThatHasCallTargetInIt` | `TargetThatWasCalled`         |\r\n\r\nThe 1->2 transition is fine. The 2->3 transition is potentially a problem if there's a long-running task after the `CallTarget`, since the user could misattribute the problem. I don't think that's super common. We could also potentially work around it by updating the `Target` state within `AddTask`--if we start a new task, make sure the target containing that task is on the top of the list.",
              "createdAt": "2023-01-04T16:23:32Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nDo all these things need to be public? They feel like internal implementation details.",
              "createdAt": "2022-12-27T17:29:48Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nIs this function actually needed? I'm wondering why it's better than calling Path.GetFileName() on the relevant paths.",
              "createdAt": "2022-12-27T17:30:39Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes. @rainersigwald and I agreed to create a function that for the moment does that but that eventually is able to disambiguate paths (ie, if two projects have the same file name but in different directories)",
              "createdAt": "2022-12-28T07:20:16Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "Worth putting this in a comment I'd say :)",
              "createdAt": "2023-01-04T15:00:30Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nThis is a bit complicated. I think I understand what's going on, but saving off some intermediates before getting here would make my life easier \ud83d\ude42\r\n\r\nAlso, you told me you tested things like that checkmark in various consoles, including older ones like cmd.exe, right? Just want to make sure they can all render it properly.",
              "createdAt": "2022-12-27T17:33:02Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes. I tested each and the whole FancyLogger is disabled for consoles that do not support ANSI. conhost (not Windows Terminal) works well \r\n![image](https://user-images.githubusercontent.com/5952839/209774457-a89bb5c3-8e37-4f8b-85cb-01b1d3980d27.png)\r\n",
              "createdAt": "2022-12-28T07:22:59Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Understanding check:\r\nThis should only return early if you haven't even started building your first target yet, correct?",
              "createdAt": "2022-12-27T17:38:27Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes. That is, on project started. On all other cases, it should continue and display the relevant current target and info. \r\nWill replace the comment so it makes more sense.",
              "createdAt": "2022-12-28T07:24:47Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Similar to targets, the assumption that one task executes to completion before the next task executes may not be correct. With IBuildEngine3, we added \"Yield\" and \"Reacquire\" calls that a task can do to let something else execute while the task does something in the background that MSBuild doesn't have to care about. That may mean you'd have multiple tasks executing \"simultaneously\"...",
              "createdAt": "2022-12-27T17:48:00Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            // If self\n-            if(Id == id) return this;\n-            // If no children\n-            if(Children.Count == 0) return null;\n-            // Iterate\n-            foreach (var child in Children)\n+            // Get target id\n+            int targetId = args.BuildEventContext!.TargetId;\n+            if (CurrentTargetNode?.Id == targetId)\n             {\n-                FancyLoggerNode? node = child.Value.Find(id);\n-                if (node != null) return node;\n+                CurrentTargetNode.AddTask(args);\n             }\n-            return null;\n         }\n+        public void AddMessage(BuildMessageEventArgs args)\n+        {\n+            if (args.Importance != MessageImportance.High) return;\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddWarning(BuildWarningEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerWarningNode(args));\n+        }\n+        public void AddError(BuildErrorEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerErrorNode(args));\n+        }\n+    }\n \n-        public void Add(FancyLoggerNode node)\n+    public class FancyLoggerTargetNode\n+    {\n+        public int Id;\n+        public string TargetName;\n+        public FancyLoggerTaskNode? CurrentTaskNode;\n+        public FancyLoggerTargetNode(TargetStartedEventArgs args)\n+        {\n+            Id = args.BuildEventContext!.TargetId;\n+            TargetName = args.TargetName;\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            if (Children.ContainsKey(node.Id)) return;\n-            Children.Add(node.Id, node);\n-            node.Depth = Depth + 1;\n-            node.Parent = this;\n+            CurrentTaskNode = new FancyLoggerTaskNode(args);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`Yield` yields the whole project, so there shouldn't ever be multiple tasks in flight for a single project. This should be ok for the current per-project display scheme.",
              "createdAt": "2023-01-04T16:25:29Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            // If self\n-            if(Id == id) return this;\n-            // If no children\n-            if(Children.Count == 0) return null;\n-            // Iterate\n-            foreach (var child in Children)\n+            // Get target id\n+            int targetId = args.BuildEventContext!.TargetId;\n+            if (CurrentTargetNode?.Id == targetId)\n             {\n-                FancyLoggerNode? node = child.Value.Find(id);\n-                if (node != null) return node;\n+                CurrentTargetNode.AddTask(args);\n             }\n-            return null;\n         }\n+        public void AddMessage(BuildMessageEventArgs args)\n+        {\n+            if (args.Importance != MessageImportance.High) return;\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddWarning(BuildWarningEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerWarningNode(args));\n+        }\n+        public void AddError(BuildErrorEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerErrorNode(args));\n+        }\n+    }\n \n-        public void Add(FancyLoggerNode node)\n+    public class FancyLoggerTargetNode\n+    {\n+        public int Id;\n+        public string TargetName;\n+        public FancyLoggerTaskNode? CurrentTaskNode;\n+        public FancyLoggerTargetNode(TargetStartedEventArgs args)\n+        {\n+            Id = args.BuildEventContext!.TargetId;\n+            TargetName = args.TargetName;\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            if (Children.ContainsKey(node.Id)) return;\n-            Children.Add(node.Id, node);\n-            node.Depth = Depth + 1;\n-            node.Parent = this;\n+            CurrentTaskNode = new FancyLoggerTaskNode(args);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So does this mean you can't actually see warnings/messages/errors?",
              "createdAt": "2022-12-27T17:49:50Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            // If self\n-            if(Id == id) return this;\n-            // If no children\n-            if(Children.Count == 0) return null;\n-            // Iterate\n-            foreach (var child in Children)\n+            // Get target id\n+            int targetId = args.BuildEventContext!.TargetId;\n+            if (CurrentTargetNode?.Id == targetId)\n             {\n-                FancyLoggerNode? node = child.Value.Find(id);\n-                if (node != null) return node;\n+                CurrentTargetNode.AddTask(args);\n             }\n-            return null;\n         }\n+        public void AddMessage(BuildMessageEventArgs args)\n+        {\n+            if (args.Importance != MessageImportance.High) return;\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddWarning(BuildWarningEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerWarningNode(args));\n+        }\n+        public void AddError(BuildErrorEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerErrorNode(args));\n+        }\n+    }\n \n-        public void Add(FancyLoggerNode node)\n+    public class FancyLoggerTargetNode\n+    {\n+        public int Id;\n+        public string TargetName;\n+        public FancyLoggerTaskNode? CurrentTaskNode;\n+        public FancyLoggerTargetNode(TargetStartedEventArgs args)\n+        {\n+            Id = args.BuildEventContext!.TargetId;\n+            TargetName = args.TargetName;\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            if (Children.ContainsKey(node.Id)) return;\n-            Children.Add(node.Id, node);\n-            node.Depth = Depth + 1;\n-            node.Parent = this;\n+            CurrentTaskNode = new FancyLoggerTaskNode(args);\n         }\n+    }\n \n-        public int GetLastLineIndex()\n+    public class FancyLoggerTaskNode\n+    {\n+        public int Id;\n+        public string TaskName;\n+        public FancyLoggerTaskNode(TaskStartedEventArgs args)\n         {\n-            // If no line, return -1\n-            if (Line == null) return -1;\n-            // Get line index and id\n-            int lastLineIndex = FancyLoggerBuffer.GetLineIndexById(Line.Id);\n-            int lastLineId = Line.Id;\n-            if (lastLineIndex == -1) return -1;\n-            // Get max of children\n-            foreach (var child in Children)\n-            {\n-                int childLastLineIndex = child.Value.GetLastLineIndex();\n-                if (childLastLineIndex > lastLineIndex)\n-                {\n-                    lastLineIndex = childLastLineIndex;\n-                    lastLineId = child.Value.Line!.Id;\n-                }\n-            }\n-            return lastLineIndex;\n+            Id = args.BuildEventContext!.TaskId;\n+            TaskName = args.TaskName;\n         }\n+    }\n \n-        public void Write()\n+    public class FancyLoggerWarningNode\n+    {\n+        public FancyLoggerWarningNode(BuildWarningEventArgs args)\n         {\n-            if (Line == null) { return; }\n-            // Adjust identation\n-            Line.IdentationLevel = Depth - 1;\n-            // If line not in the buffer, add\n-            if (FancyLoggerBuffer.GetLineIndexById(Line.Id) == -1)\n-            {\n-                // Get parent last line index\n-                if (Parent != null)\n-                {\n-                    int parentLastLineId = Parent.GetLastLineIndex();\n-                    // if (parentLastLineId == -1) throw new Exception(\"Oops something went wrong\");\n-                    if (parentLastLineId == -1) return;\n-                    // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);\n-                    FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);\n-                }\n-            }\n         }\n+    }\n \n-        public void Collapse()\n+    public class FancyLoggerMessageNode\n+    {\n+        public FancyLoggerMessageNode(BuildMessageEventArgs args)\n         {\n-            foreach (var child in Children)\n-            {\n-                if (child.Value.Line == null) continue;\n-                FancyLoggerBuffer.HideLine(child.Value.Line.Id);\n-                child.Value.Collapse();\n-            }\n         }\n+    }\n \n-        public void Expand()\n+    public class FancyLoggerErrorNode\n+    {\n+        public FancyLoggerErrorNode(BuildErrorEventArgs args)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Nope. Just simplifying and having one class for warnings/messages/errors instead of three. Also allows us to store a list of `FancyLoggerMessageNode` instead of a list of `object`",
              "createdAt": "2022-12-28T07:26:01Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,136 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<Object> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            // If current target\n+            if (CurrentTargetNode == null) return;\n+            // Create or update\n+            if (Finished && CurrentTargetLine != null)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                return;\n             }\n+            string currentTargetLineContents = $\"   \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n         }\n-        public FancyLoggerNode? Find(string id)\n+\n+        public void AddTarget(TargetStartedEventArgs args)\n+        {\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            // If self\n-            if(Id == id) return this;\n-            // If no children\n-            if(Children.Count == 0) return null;\n-            // Iterate\n-            foreach (var child in Children)\n+            // Get target id\n+            int targetId = args.BuildEventContext!.TargetId;\n+            if (CurrentTargetNode?.Id == targetId)\n             {\n-                FancyLoggerNode? node = child.Value.Find(id);\n-                if (node != null) return node;\n+                CurrentTargetNode.AddTask(args);\n             }\n-            return null;\n         }\n+        public void AddMessage(BuildMessageEventArgs args)\n+        {\n+            if (args.Importance != MessageImportance.High) return;\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddWarning(BuildWarningEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerWarningNode(args));\n+        }\n+        public void AddError(BuildErrorEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerErrorNode(args));\n+        }\n+    }\n \n-        public void Add(FancyLoggerNode node)\n+    public class FancyLoggerTargetNode\n+    {\n+        public int Id;\n+        public string TargetName;\n+        public FancyLoggerTaskNode? CurrentTaskNode;\n+        public FancyLoggerTargetNode(TargetStartedEventArgs args)\n+        {\n+            Id = args.BuildEventContext!.TargetId;\n+            TargetName = args.TargetName;\n+        }\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            if (Children.ContainsKey(node.Id)) return;\n-            Children.Add(node.Id, node);\n-            node.Depth = Depth + 1;\n-            node.Parent = this;\n+            CurrentTaskNode = new FancyLoggerTaskNode(args);\n         }\n+    }\n \n-        public int GetLastLineIndex()\n+    public class FancyLoggerTaskNode\n+    {\n+        public int Id;\n+        public string TaskName;\n+        public FancyLoggerTaskNode(TaskStartedEventArgs args)\n         {\n-            // If no line, return -1\n-            if (Line == null) return -1;\n-            // Get line index and id\n-            int lastLineIndex = FancyLoggerBuffer.GetLineIndexById(Line.Id);\n-            int lastLineId = Line.Id;\n-            if (lastLineIndex == -1) return -1;\n-            // Get max of children\n-            foreach (var child in Children)\n-            {\n-                int childLastLineIndex = child.Value.GetLastLineIndex();\n-                if (childLastLineIndex > lastLineIndex)\n-                {\n-                    lastLineIndex = childLastLineIndex;\n-                    lastLineId = child.Value.Line!.Id;\n-                }\n-            }\n-            return lastLineIndex;\n+            Id = args.BuildEventContext!.TaskId;\n+            TaskName = args.TaskName;\n         }\n+    }\n \n-        public void Write()\n+    public class FancyLoggerWarningNode\n+    {\n+        public FancyLoggerWarningNode(BuildWarningEventArgs args)\n         {\n-            if (Line == null) { return; }\n-            // Adjust identation\n-            Line.IdentationLevel = Depth - 1;\n-            // If line not in the buffer, add\n-            if (FancyLoggerBuffer.GetLineIndexById(Line.Id) == -1)\n-            {\n-                // Get parent last line index\n-                if (Parent != null)\n-                {\n-                    int parentLastLineId = Parent.GetLastLineIndex();\n-                    // if (parentLastLineId == -1) throw new Exception(\"Oops something went wrong\");\n-                    if (parentLastLineId == -1) return;\n-                    // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);\n-                    FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);\n-                }\n-            }\n         }\n+    }\n \n-        public void Collapse()\n+    public class FancyLoggerMessageNode\n+    {\n+        public FancyLoggerMessageNode(BuildMessageEventArgs args)\n         {\n-            foreach (var child in Children)\n-            {\n-                if (child.Value.Line == null) continue;\n-                FancyLoggerBuffer.HideLine(child.Value.Line.Id);\n-                child.Value.Collapse();\n-            }\n         }\n+    }\n \n-        public void Expand()\n+    public class FancyLoggerErrorNode\n+    {\n+        public FancyLoggerErrorNode(BuildErrorEventArgs args)",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: delete redundant line\r\n```suggestion\r\n```",
              "createdAt": "2023-01-04T14:55:02Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -43,18 +34,19 @@ public void Initialize(IEventSource eventSource)\n             // Started\n             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n-            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n-            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n             // Finished\n             eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n             eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n-            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n             // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n             // Raised\n             eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n             // Initialize FancyLoggerBuffer\n+            // FancyLoggerBuffer.Initialize();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You don't need to change any style things now, but please read [the standard Microsoft C# style guide](https://learn.microsoft.com/dotnet/csharp/fundamentals/coding-style/coding-conventions) and try to conform to its suggestions for future code. We may come back and restyle a bunch of this toward the end of the project :)",
              "createdAt": "2023-01-04T14:58:24Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -1,265 +1,196 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n+//\n \n using System;\n using System.Collections.Generic;\n+using System.Collections.Specialized;\n using System.Linq;\n using System.Text;\n+using System.Threading;\n using System.Threading.Tasks;\n \n namespace Microsoft.Build.Logging.FancyLogger\n {\n-    /// <summary>\n-    /// Represents an identifiable line inside the fancylogger buffer.\n-    /// </summary>\n     public class FancyLoggerBufferLine\n     {\n-        private static int counter = 0;\n+        private static int Counter = 0;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please pull each class into its own file.",
              "createdAt": "2023-01-04T15:01:51Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,159 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<FancyLoggerMessageNode> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            // Project details\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",\n+                $\"({FinishedTargets} targets completed)\",\n+                Console.WindowWidth\n+            );\n+\n+            // Create or update line\n+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);\n+            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+\n+            // For finished projects\n+            if (Finished)\n             {\n-                case FancyLoggerNodeType.Build:\n-                    Id = $\"build-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Project:\n-                    Id = $\"project-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Target:\n-                    Id = $\"target-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Task:\n-                    Id = $\"task-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Message:\n-                    Id = $\"message-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Warning:\n-                    Id = $\"warning-{id}\";\n-                    break;\n-                case FancyLoggerNodeType.Error:\n-                    Id = $\"error-{id}\";\n-                    break;\n-                default:\n-                    Id = id.ToString(); break;\n+                if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                foreach (FancyLoggerMessageNode node in AdditionalDetails)\n+                {\n+                    if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);\n+                    node.Line = null;\n+                }\n             }\n-        }\n-        public FancyLoggerNode? Find(string id)\n-        {\n-            // If self\n-            if(Id == id) return this;\n-            // If no children\n-            if(Children.Count == 0) return null;\n-            // Iterate\n-            foreach (var child in Children)\n+\n+            // Current target details\n+            if (CurrentTargetNode == null) return;\n+            string currentTargetLineContents = $\"    \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\n+            if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);\n+            else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);\n+\n+            // Messages, warnings and errors\n+            foreach (FancyLoggerMessageNode node in AdditionalDetails)\n             {\n-                FancyLoggerNode? node = child.Value.Find(id);\n-                if (node != null) return node;\n+                if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, \"Message\");\n+                node.Log();\n             }\n-            return null;\n         }\n \n-        public void Add(FancyLoggerNode node)\n+        public void AddTarget(TargetStartedEventArgs args)\n         {\n-            if (Children.ContainsKey(node.Id)) return;\n-            Children.Add(node.Id, node);\n-            node.Depth = Depth + 1;\n-            node.Parent = this;\n+            CurrentTargetNode = new FancyLoggerTargetNode(args);\n         }\n-\n-        public int GetLastLineIndex()\n+        public void AddTask(TaskStartedEventArgs args)\n         {\n-            // If no line, return -1\n-            if (Line == null) return -1;\n-            // Get line index and id\n-            int lastLineIndex = FancyLoggerBuffer.GetLineIndexById(Line.Id);\n-            int lastLineId = Line.Id;\n-            if (lastLineIndex == -1) return -1;\n-            // Get max of children\n-            foreach (var child in Children)\n+            // Get target id\n+            int targetId = args.BuildEventContext!.TargetId;\n+            if (CurrentTargetNode?.Id == targetId)\n             {\n-                int childLastLineIndex = child.Value.GetLastLineIndex();\n-                if (childLastLineIndex > lastLineIndex)\n-                {\n-                    lastLineIndex = childLastLineIndex;\n-                    lastLineId = child.Value.Line!.Id;\n-                }\n+                CurrentTargetNode.AddTask(args);\n             }\n-            return lastLineIndex;\n         }\n+        public void AddMessage(BuildMessageEventArgs args)\n+        {\n+            if (args.Importance != MessageImportance.High) return;\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddWarning(BuildWarningEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+        public void AddError(BuildErrorEventArgs args)\n+        {\n+            AdditionalDetails.Add(new FancyLoggerMessageNode(args));\n+        }\n+    }\n \n-        public void Write()\n+    public class FancyLoggerTargetNode\n+    {\n+        public int Id;\n+        public string TargetName;\n+        public FancyLoggerTaskNode? CurrentTaskNode;\n+        public FancyLoggerTargetNode(TargetStartedEventArgs args)\n         {\n-            if (Line == null) { return; }\n-            // Adjust identation\n-            Line.IdentationLevel = Depth - 1;\n-            // If line not in the buffer, add\n-            if (FancyLoggerBuffer.GetLineIndexById(Line.Id) == -1)\n-            {\n-                // Get parent last line index\n-                if (Parent != null)\n-                {\n-                    int parentLastLineId = Parent.GetLastLineIndex();\n-                    // if (parentLastLineId == -1) throw new Exception(\"Oops something went wrong\");\n-                    if (parentLastLineId == -1) return;\n-                    // FancyLoggerBuffer.WriteNewLineAfter(Line, parentLastLineId);\n-                    FancyLoggerBuffer.WriteNewLineAfterIndex(Line, parentLastLineId);\n-                }\n-            }\n+            Id = args.BuildEventContext!.TargetId;\n+            TargetName = args.TargetName;\n         }\n+        public void AddTask(TaskStartedEventArgs args)\n+        {\n+            CurrentTaskNode = new FancyLoggerTaskNode(args);\n+        }\n+    }\n \n-        public void Collapse()\n+    public class FancyLoggerTaskNode\n+    {\n+        public int Id;\n+        public string TaskName;\n+        public FancyLoggerTaskNode(TaskStartedEventArgs args)\n         {\n-            foreach (var child in Children)\n-            {\n-                if (child.Value.Line == null) continue;\n-                FancyLoggerBuffer.HideLine(child.Value.Line.Id);\n-                child.Value.Collapse();\n-            }\n+            Id = args.BuildEventContext!.TaskId;\n+            TaskName = args.TaskName;\n         }\n+    }\n+\n+    public class FancyLoggerMessageNode",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is in the user's main console buffer, right? I don't think we should clear that, just append--this output should be similar to what you'd get with `-v:m` without `-flg` after the build completes IMO.",
              "createdAt": "2023-01-04T15:13:33Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -120,24 +121,40 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n \n         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            // node.AddMessage(e);\n+            // node.Log();\n         }\n         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n         {\n-            FancyLoggerBuffer.WriteNewLine(\"Warning\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddWarning(e);\n+            node.Log();\n         }\n         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n         {\n-            // TODO: Try to redirect to stderr\n-            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddError(e);\n+            node.Log();\n         }\n \n \n         public void Shutdown() {\n             // Keep open if autoscroll disabled (the user is reading info)\n-            while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n+            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n             {\n-            }\n+            }*/\n             FancyLoggerBuffer.Terminate();\n+            Console.Clear();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Added comment for temporary workaround ;) ",
              "createdAt": "2023-01-05T02:56:25Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -120,24 +121,40 @@ void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n \n         void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n         {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            // node.AddMessage(e);\n+            // node.Log();\n         }\n         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n         {\n-            FancyLoggerBuffer.WriteNewLine(\"Warning\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddWarning(e);\n+            node.Log();\n         }\n         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n         {\n-            // TODO: Try to redirect to stderr\n-            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;\n+            // Update\n+            node.AddError(e);\n+            node.Log();\n         }\n \n \n         public void Shutdown() {\n             // Keep open if autoscroll disabled (the user is reading info)\n-            while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n+            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n             {\n-            }\n+            }*/\n             FancyLoggerBuffer.Terminate();\n+            Console.Clear();",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this class used? I don't see it anywhere.",
              "createdAt": "2023-01-04T15:24:49Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBufferOld.cs",
              "diffHunk": "@@ -0,0 +1,255 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line inside the fancylogger buffer.\n+    /// </summary>\n+    public class FancyLoggerBufferLineOld",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, I meant to delete it. Sorry about that :/",
              "createdAt": "2023-01-04T18:11:10Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBufferOld.cs",
              "diffHunk": "@@ -0,0 +1,255 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line inside the fancylogger buffer.\n+    /// </summary>\n+    public class FancyLoggerBufferLineOld",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Have you ever observed this? I'd be tempted to change to an assert or something to see if it ever happens (I wouldn't expect it to).",
              "createdAt": "2023-01-04T15:26:20Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +65,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can wait, but I'd really, really like to decouple the display-to-console stuff from the process-event stuff. That should make a bunch of design decisions easier to implement.",
              "createdAt": "2023-01-04T15:27:40Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -73,43 +65,52 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n             // If id already exists...\n-            if (projectConsoleLines.ContainsKey(id)) return;\n-            // Create line\n-            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n-                ANSIBuilder.Alignment.SpaceBetween(\n-                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n-                    \"(5 targets completed)\",\n-                    Console.WindowWidth\n-                )\n-            );\n-\n-            projectConsoleLines.Add(id, line);\n+            if (projects.ContainsKey(id)) return;\n+            // Add project\n+            FancyLoggerProjectNode node = new FancyLoggerProjectNode(e);\n+            projects[id] = node;\n+            // Log\n+            node.Log();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why switch to the main buffer first?",
              "createdAt": "2023-01-04T15:38:05Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -1,265 +1,196 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n+//\n \n using System;\n using System.Collections.Generic;\n+using System.Collections.Specialized;\n using System.Linq;\n using System.Text;\n+using System.Threading;\n using System.Threading.Tasks;\n \n namespace Microsoft.Build.Logging.FancyLogger\n {\n-    /// <summary>\n-    /// Represents an identifiable line inside the fancylogger buffer.\n-    /// </summary>\n     public class FancyLoggerBufferLine\n     {\n-        private static int counter = 0;\n+        private static int Counter = 0;\n         public int Id;\n         public string Text;\n-        public bool IsHidden;\n-        public int IdentationLevel = -1;\n+\n         public FancyLoggerBufferLine()\n         {\n-            Id = counter++;\n+            Id = Counter++;\n             Text = String.Empty;\n         }\n         public FancyLoggerBufferLine(string text)\n+            : this()\n         {\n-            Id = counter++;\n             Text = text;\n         }\n-        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)\n-        {\n-            IdentationLevel = identationLevel;\n-        }\n-        public void Hide()\n-        {\n-            IsHidden = true;\n-        }\n-        public void Unhide()\n-        {\n-            IsHidden = false;\n-        }\n-        public int GetIndex()\n-        {\n-            return FancyLoggerBuffer.GetLineIndexById(Id);\n-        }\n     }\n \n-    /// <summary>\n-    /// Buffer manager for FancyLogger\n-    /// </summary>\n-    internal static class FancyLoggerBuffer\n+    public class FancyLoggerBuffer\n     {\n-        // Status\n-        public static bool AutoScrollEnabled { get; private set; }\n-        public static bool IsTerminated { get; private set; }\n-        public static int CurrentTopLineIndex { get; private set; }\n-        public static int Height { get { return Console.WindowHeight; } }\n-        // Lines to be presented by the buffer\n-        private static List<FancyLoggerBufferLine> lines = new();\n+        private static List<FancyLoggerBufferLine> Lines = new();\n+        private static int TopLineIndex = 0;\n+        // private static bool AutoScrollEnabled = true;\n         public static void Initialize()\n         {\n-            // Setup event listeners\n+            // Use alternate buffer\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I am trying to avoid some bugs when switching from and to the alternate buffer. Will update with comment for clarity soon",
              "createdAt": "2023-01-05T20:38:42Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -1,265 +1,196 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n+//\n \n using System;\n using System.Collections.Generic;\n+using System.Collections.Specialized;\n using System.Linq;\n using System.Text;\n+using System.Threading;\n using System.Threading.Tasks;\n \n namespace Microsoft.Build.Logging.FancyLogger\n {\n-    /// <summary>\n-    /// Represents an identifiable line inside the fancylogger buffer.\n-    /// </summary>\n     public class FancyLoggerBufferLine\n     {\n-        private static int counter = 0;\n+        private static int Counter = 0;\n         public int Id;\n         public string Text;\n-        public bool IsHidden;\n-        public int IdentationLevel = -1;\n+\n         public FancyLoggerBufferLine()\n         {\n-            Id = counter++;\n+            Id = Counter++;\n             Text = String.Empty;\n         }\n         public FancyLoggerBufferLine(string text)\n+            : this()\n         {\n-            Id = counter++;\n             Text = text;\n         }\n-        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)\n-        {\n-            IdentationLevel = identationLevel;\n-        }\n-        public void Hide()\n-        {\n-            IsHidden = true;\n-        }\n-        public void Unhide()\n-        {\n-            IsHidden = false;\n-        }\n-        public int GetIndex()\n-        {\n-            return FancyLoggerBuffer.GetLineIndexById(Id);\n-        }\n     }\n \n-    /// <summary>\n-    /// Buffer manager for FancyLogger\n-    /// </summary>\n-    internal static class FancyLoggerBuffer\n+    public class FancyLoggerBuffer\n     {\n-        // Status\n-        public static bool AutoScrollEnabled { get; private set; }\n-        public static bool IsTerminated { get; private set; }\n-        public static int CurrentTopLineIndex { get; private set; }\n-        public static int Height { get { return Console.WindowHeight; } }\n-        // Lines to be presented by the buffer\n-        private static List<FancyLoggerBufferLine> lines = new();\n+        private static List<FancyLoggerBufferLine> Lines = new();\n+        private static int TopLineIndex = 0;\n+        // private static bool AutoScrollEnabled = true;\n         public static void Initialize()\n         {\n-            // Setup event listeners\n+            // Use alternate buffer\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A few comments on this.\r\n\r\nI'm not sure it's a good idea to use the normal thread pool for these purposes, but we'll try it for now.\r\n\r\nWhen using the thread pool, though, it is dangerous to use operations like `Thread.Sleep`. That puts _the whole thread_ to sleep, meaning it can't be used to do anything else that another Task wants to do. If you do that enough times, you can exhaust the thread pool and deadlock your process.\r\n\r\nFortunately there's a similar operation that _doesn't_ do that.\r\n\r\n```suggestion\r\n            Task.Run(async () => {\r\n                while (true)\r\n                {\r\n                    await Task.Delay(500 / 60);\r\n                    Render();\r\n                }\r\n            });\r\n```\r\n\r\nFor readability, I'd also recommend using a `TimeSpan` constant and using the `Task.Delay(TimeSpan)` overload.",
              "createdAt": "2023-01-04T15:55:18Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -1,265 +1,196 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n+//\n \n using System;\n using System.Collections.Generic;\n+using System.Collections.Specialized;\n using System.Linq;\n using System.Text;\n+using System.Threading;\n using System.Threading.Tasks;\n \n namespace Microsoft.Build.Logging.FancyLogger\n {\n-    /// <summary>\n-    /// Represents an identifiable line inside the fancylogger buffer.\n-    /// </summary>\n     public class FancyLoggerBufferLine\n     {\n-        private static int counter = 0;\n+        private static int Counter = 0;\n         public int Id;\n         public string Text;\n-        public bool IsHidden;\n-        public int IdentationLevel = -1;\n+\n         public FancyLoggerBufferLine()\n         {\n-            Id = counter++;\n+            Id = Counter++;\n             Text = String.Empty;\n         }\n         public FancyLoggerBufferLine(string text)\n+            : this()\n         {\n-            Id = counter++;\n             Text = text;\n         }\n-        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)\n-        {\n-            IdentationLevel = identationLevel;\n-        }\n-        public void Hide()\n-        {\n-            IsHidden = true;\n-        }\n-        public void Unhide()\n-        {\n-            IsHidden = false;\n-        }\n-        public int GetIndex()\n-        {\n-            return FancyLoggerBuffer.GetLineIndexById(Id);\n-        }\n     }\n \n-    /// <summary>\n-    /// Buffer manager for FancyLogger\n-    /// </summary>\n-    internal static class FancyLoggerBuffer\n+    public class FancyLoggerBuffer\n     {\n-        // Status\n-        public static bool AutoScrollEnabled { get; private set; }\n-        public static bool IsTerminated { get; private set; }\n-        public static int CurrentTopLineIndex { get; private set; }\n-        public static int Height { get { return Console.WindowHeight; } }\n-        // Lines to be presented by the buffer\n-        private static List<FancyLoggerBufferLine> lines = new();\n+        private static List<FancyLoggerBufferLine> Lines = new();\n+        private static int TopLineIndex = 0;\n+        // private static bool AutoScrollEnabled = true;\n         public static void Initialize()\n         {\n-            // Setup event listeners\n+            // Use alternate buffer\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+\n+            Task.Run(() => {\n+                while (true)\n+                {\n+                    Thread.Sleep(500 / 60);\n+                    Render();\n+                }\n+            });",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit that can wait: the spinners don't seem to be spinning for me. I think the \"get a new character every call to the method\" approach is cycling through them too fast, maybe? Might want to switch to a per-frame update.",
              "createdAt": "2023-01-04T16:39:33Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerNode.cs",
              "diffHunk": "@@ -4,148 +4,159 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.Framework;\n \n namespace Microsoft.Build.Logging.FancyLogger\n { \n-    // TODO: Maybe remove\n-    public enum FancyLoggerNodeType\n+    public class FancyLoggerProjectNode\n     {\n-        None,\n-        Build,\n-        Project,\n-        Target,\n-        Task,\n-        Message,\n-        Warning,\n-        Error\n-    }\n+        private static string GetUnambiguousPath(string path)\n+        {\n+            return Path.GetFileName(path);\n+        }\n \n-    public class FancyLoggerNode\n-    {\n-        public string Id;\n-        public Dictionary<string, FancyLoggerNode> Children = new Dictionary<string, FancyLoggerNode>();\n-        public FancyLoggerNode? Parent;\n+        public int Id;\n+        public string ProjectPath;\n+        public bool Finished;\n+        // Line to display project info\n         public FancyLoggerBufferLine? Line;\n-        public int Depth = 0;\n-        public FancyLoggerNode(string id)\n+        // Targets\n+        public int FinishedTargets;\n+        public FancyLoggerBufferLine? CurrentTargetLine;\n+        public FancyLoggerTargetNode? CurrentTargetNode;\n+        // Messages, errors and warnings\n+        List<FancyLoggerMessageNode> AdditionalDetails = new();\n+        public FancyLoggerProjectNode(ProjectStartedEventArgs args)\n         {\n-            Id = id;\n+            Id = args.ProjectId;\n+            ProjectPath = args.ProjectFile!;\n+            Finished = false;\n+            FinishedTargets = 0;\n         }\n-        public FancyLoggerNode(int id, FancyLoggerNodeType type)\n+\n+        public void Log()\n         {\n-            switch (type)\n+            // Project details\n+            string lineContents = ANSIBuilder.Alignment.SpaceBetween(\n+                $\"{(Finished ? ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim(\"Project: \")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}\",",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: A build can succeed with warnings (ours generally have warnings-as-errors turned on but that's not required).\r\n\r\n```suggestion\r\n                Console.WriteLine(\"\\tX Warning(s)\");\r\n```",
              "createdAt": "2023-01-06T15:21:06Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -148,14 +150,23 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n         }\n \n \n-        public void Shutdown() {\n-            // Keep open if autoscroll disabled (the user is reading info)\n-            /*while (FancyLoggerBuffer.AutoScrollEnabled || !FancyLoggerBuffer.IsTerminated)\n-            {\n-            }*/\n+        public void Shutdown()\n+        {\n             FancyLoggerBuffer.Terminate();\n+            // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer\n             Console.Clear();\n-            Console.WriteLine(\"Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed\");\n+            // Console.WriteLine(\"Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed\");\n+            if (Succeeded)\n+            {\n+                Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build succeeded.\", ANSIBuilder.Formatting.ForegroundColor.Green));\n+                Console.WriteLine(\"\\t0 Warning(s)\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}