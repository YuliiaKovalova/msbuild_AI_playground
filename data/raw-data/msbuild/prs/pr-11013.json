{
  "number": 11013,
  "title": "telemetry onepager",
  "body": "### Context\r\nhttps://github.com/dotnet/msbuild/issues/10560\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-20T20:36:50Z",
  "updatedAt": "2024-12-20T09:39:29Z",
  "closedAt": "2024-12-20T09:39:29Z",
  "mergedAt": "2024-12-20T09:39:29Z",
  "additions": 77,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "docs/telemetry-onepager",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      },
      {
        "login": "JanProvaznik"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f9cbb931fb73b5cbba70a0311e0390d85d2c4e1f",
          "message": "telemetry onepager",
          "committedDate": "2024-11-20T20:34:56Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "493265779f0ce99becfd0a1d32ee179289246734",
          "message": "rename file",
          "committedDate": "2024-11-21T10:58:55Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "419a2ce9da31f0fe86b30ee00282578d2fa5fc1e",
          "message": "update with comments and scope section",
          "committedDate": "2024-11-27T14:38:42Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84850209b2b5a930470853e2752c0e979174fa8f",
          "message": "update",
          "committedDate": "2024-11-27T14:40:03Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e2f0def1d01bc7130c52dc6f31373a2422df4bd",
          "message": "Update telemetry-onepager.md",
          "committedDate": "2024-11-29T11:36:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWe have limited data about usage of MSBuild by our customers in VS and no data about usage of standalone msbuild.exe.\r\n```",
              "createdAt": "2024-11-25T14:40:20Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nOver time we want to have comprehensive insight into how MSBuild is used in all scenarios. Collecting such a data without any constraints nor limitations would however be prohibitively expensive (from the data storage PoV and possibly as well from the client side performance impact PoV). Ability to sample / configure the collection is an important factor in deciding the instrumentation and collection tech stack. Implementing telemetry via VS OpenTelemetry initiative would give us this ability in the future.\r\n```",
              "createdAt": "2024-11-25T14:47:17Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n### Successful handover of V1\r\n```",
              "createdAt": "2024-11-25T14:49:30Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. \n+\n+Goal: To have relevant data in that is actionable for decisions about development. Measuring real world performance impact of features (e.g. BuildCheck). Easily extensible telemetry infrastructure if we want to measure a new datapoint.\n+\n+## Impact \n+- Better planning of deployment of forces in MSBuild by product/team management.\n+- Customers can subscribe to telemetry locally to have data in standardized OpenTelemetry format\n+\n+## Stakeholders \n+- Jan (Krivanek|Provaznik) design and implementation of telemetry via VS OTel. Mariana - using data we already have from SDK.\n+- MSBuild Team+Management \u2013 want insights from builds in VS\n+- VS OpenTelemetry team \u2013 provide support for VS OpenTelemetry collector library, want successful adoption \n+- SourceBuild \u2013 consulting and approving usage of OpenTelemetry \n+- Chet \u2013 representing customers who want to monitor their builds locally\n+\n+### Successful handover",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Having data that we do not need does not feel as a risk.\r\n\r\nHaving (too much) instrumentation that leads to perf degradation or additional storage/querying costs server side - that is something that can be inflated by uninterested data (but can be present without it as well)",
              "createdAt": "2024-11-25T14:53:03Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. \n+\n+Goal: To have relevant data in that is actionable for decisions about development. Measuring real world performance impact of features (e.g. BuildCheck). Easily extensible telemetry infrastructure if we want to measure a new datapoint.\n+\n+## Impact \n+- Better planning of deployment of forces in MSBuild by product/team management.\n+- Customers can subscribe to telemetry locally to have data in standardized OpenTelemetry format\n+\n+## Stakeholders \n+- Jan (Krivanek|Provaznik) design and implementation of telemetry via VS OTel. Mariana - using data we already have from SDK.\n+- MSBuild Team+Management \u2013 want insights from builds in VS\n+- VS OpenTelemetry team \u2013 provide support for VS OpenTelemetry collector library, want successful adoption \n+- SourceBuild \u2013 consulting and approving usage of OpenTelemetry \n+- Chet \u2013 representing customers who want to monitor their builds locally\n+\n+### Successful handover\n+- Shipped to Visual Studio\n+- Data queryable in Kusto\n+- Dashboards\n+- Customers are able to monitor with OpenTelemetry collector of choice (can be cut)\n+\n+## Risks \n+- Performance regression risks - it's another thing MSBuild would do and if the perf hit would be too bad it would need mitigation effort.\n+- It introduces a closed source dependency for VS and MSBuild.exe distribution methods which requires workarounds to remain compatible with SourceBuild policy (conditional compilation/build). \n+- Using a new VS API - might have gaps\n+- Instrumenting data that would ultimately prove uninteresting.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n## V1 Cost \r\n```",
              "createdAt": "2024-11-25T14:53:17Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. \n+\n+Goal: To have relevant data in that is actionable for decisions about development. Measuring real world performance impact of features (e.g. BuildCheck). Easily extensible telemetry infrastructure if we want to measure a new datapoint.\n+\n+## Impact \n+- Better planning of deployment of forces in MSBuild by product/team management.\n+- Customers can subscribe to telemetry locally to have data in standardized OpenTelemetry format\n+\n+## Stakeholders \n+- Jan (Krivanek|Provaznik) design and implementation of telemetry via VS OTel. Mariana - using data we already have from SDK.\n+- MSBuild Team+Management \u2013 want insights from builds in VS\n+- VS OpenTelemetry team \u2013 provide support for VS OpenTelemetry collector library, want successful adoption \n+- SourceBuild \u2013 consulting and approving usage of OpenTelemetry \n+- Chet \u2013 representing customers who want to monitor their builds locally\n+\n+### Successful handover\n+- Shipped to Visual Studio\n+- Data queryable in Kusto\n+- Dashboards\n+- Customers are able to monitor with OpenTelemetry collector of choice (can be cut)\n+\n+## Risks \n+- Performance regression risks - it's another thing MSBuild would do and if the perf hit would be too bad it would need mitigation effort.\n+- It introduces a closed source dependency for VS and MSBuild.exe distribution methods which requires workarounds to remain compatible with SourceBuild policy (conditional compilation/build). \n+- Using a new VS API - might have gaps\n+- Instrumenting data that would ultimately prove uninteresting.\n+- Potential additional costs and delays due to compliance with SourceBuild/VS data.\n+\n+## Cost ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This might be tad optimistic",
              "createdAt": "2024-11-25T14:54:03Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. \n+\n+Goal: To have relevant data in that is actionable for decisions about development. Measuring real world performance impact of features (e.g. BuildCheck). Easily extensible telemetry infrastructure if we want to measure a new datapoint.\n+\n+## Impact \n+- Better planning of deployment of forces in MSBuild by product/team management.\n+- Customers can subscribe to telemetry locally to have data in standardized OpenTelemetry format\n+\n+## Stakeholders \n+- Jan (Krivanek|Provaznik) design and implementation of telemetry via VS OTel. Mariana - using data we already have from SDK.\n+- MSBuild Team+Management \u2013 want insights from builds in VS\n+- VS OpenTelemetry team \u2013 provide support for VS OpenTelemetry collector library, want successful adoption \n+- SourceBuild \u2013 consulting and approving usage of OpenTelemetry \n+- Chet \u2013 representing customers who want to monitor their builds locally\n+\n+### Successful handover\n+- Shipped to Visual Studio\n+- Data queryable in Kusto\n+- Dashboards\n+- Customers are able to monitor with OpenTelemetry collector of choice (can be cut)\n+\n+## Risks \n+- Performance regression risks - it's another thing MSBuild would do and if the perf hit would be too bad it would need mitigation effort.\n+- It introduces a closed source dependency for VS and MSBuild.exe distribution methods which requires workarounds to remain compatible with SourceBuild policy (conditional compilation/build). \n+- Using a new VS API - might have gaps\n+- Instrumenting data that would ultimately prove uninteresting.\n+- Potential additional costs and delays due to compliance with SourceBuild/VS data.\n+\n+## Cost \n+5 months of .5 developer's effort ~ 50 dev days (dd)\n+\n+20-30dd JanPro OTel design + implementation, 10-15dd JanK design + implementation, 5-10dd Mariana/someone getting available data in order/\"data science\"/dashboards + external documentation\n+\n+Uncertainties:\n+It\u2019s an exploratory project for VS OpenTelemetry, we'll be their first OSS component, so there might come up issues. SourceBuild compliance could introduce delays.\n+\n+## Plan \n+- Prototyping the libraries/mechanism for collecting telemetry data (month 1) 10dd\n+\n+- Defining usful data points (month 1) 5dd\n+\n+- Design and approval of hooking VSTelemetry collectors and OTel collectors  (month 2) 10dd\n+\n+- Formalizing, agreeing to sourcebuild and other external requirements (month 2) 2dd",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This on the other hand feels too pesimistic :-)",
              "createdAt": "2024-11-25T14:54:25Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "@@ -0,0 +1,63 @@\n+# Telemetry \n+\n+We want to implement telemetry collection for VS/MSBuild.exe scenarios where we are currently not collecting any data. VS OpenTelemetry initiative provides a good opportunity to use their infrastructure and library. \n+There is some data we collect via SDK which we want to make accessible.\n+\n+## Goals and Motivation \n+\n+We have no data about usage of MSBuild customers in VS.\n+This limits us in prioritization of features and scenarios to optimize performance for. \n+Implementing telemetry via VS OpenTelemetry initiative would give us comprehensive insight into how MSBuild is used in all scenarios. \n+\n+Goal: To have relevant data in that is actionable for decisions about development. Measuring real world performance impact of features (e.g. BuildCheck). Easily extensible telemetry infrastructure if we want to measure a new datapoint.\n+\n+## Impact \n+- Better planning of deployment of forces in MSBuild by product/team management.\n+- Customers can subscribe to telemetry locally to have data in standardized OpenTelemetry format\n+\n+## Stakeholders \n+- Jan (Krivanek|Provaznik) design and implementation of telemetry via VS OTel. Mariana - using data we already have from SDK.\n+- MSBuild Team+Management \u2013 want insights from builds in VS\n+- VS OpenTelemetry team \u2013 provide support for VS OpenTelemetry collector library, want successful adoption \n+- SourceBuild \u2013 consulting and approving usage of OpenTelemetry \n+- Chet \u2013 representing customers who want to monitor their builds locally\n+\n+### Successful handover\n+- Shipped to Visual Studio\n+- Data queryable in Kusto\n+- Dashboards\n+- Customers are able to monitor with OpenTelemetry collector of choice (can be cut)\n+\n+## Risks \n+- Performance regression risks - it's another thing MSBuild would do and if the perf hit would be too bad it would need mitigation effort.\n+- It introduces a closed source dependency for VS and MSBuild.exe distribution methods which requires workarounds to remain compatible with SourceBuild policy (conditional compilation/build). \n+- Using a new VS API - might have gaps\n+- Instrumenting data that would ultimately prove uninteresting.\n+- Potential additional costs and delays due to compliance with SourceBuild/VS data.\n+\n+## Cost \n+5 months of .5 developer's effort ~ 50 dev days (dd)\n+\n+20-30dd JanPro OTel design + implementation, 10-15dd JanK design + implementation, 5-10dd Mariana/someone getting available data in order/\"data science\"/dashboards + external documentation\n+\n+Uncertainties:\n+It\u2019s an exploratory project for VS OpenTelemetry, we'll be their first OSS component, so there might come up issues. SourceBuild compliance could introduce delays.\n+\n+## Plan \n+- Prototyping the libraries/mechanism for collecting telemetry data (month 1) 10dd\n+\n+- Defining usful data points (month 1) 5dd\n+\n+- Design and approval of hooking VSTelemetry collectors and OTel collectors  (month 2) 10dd\n+\n+- Formalizing, agreeing to sourcebuild and other external requirements (month 2) 2dd\n+\n+- Instrumenting MSBuild with defined datapoints (month 3) 10dd",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably add section for 'V1 scope' - what's in and what's out",
              "createdAt": "2024-11-25T14:55:09Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I attempted adding it but I'm unsure what to put in that section that's not just restating other parts, could you edit it directly with what you want there?",
              "createdAt": "2024-11-27T14:43:55Z",
              "path": "documentation/specs/proposed/telemetry_onepager.md",
              "diffHunk": "",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      }
    ]
  }
}