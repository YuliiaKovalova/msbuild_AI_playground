{
  "number": 9775,
  "title": "Safe access to event wait handle",
  "body": "### Context\r\nThere is a possibility that the variable emptyQueueEvent could be null. \r\nUnfortunatelly I was not able to reproduce the exact scenario, but accessing the variables that could be null safely should not do harm overall.\r\n\r\n### Changes Made\r\n\r\n1. Change the way to access the EventWaitHandle objects inside LoggingEventProc. \r\n2. Change the order of checking if the thread should stop or not with putting the check of cancelled token first in the while condition\r\n\r\n### Testing\r\nAll existing tests should pass. ",
  "state": "CLOSED",
  "createdAt": "2024-02-23T11:12:23Z",
  "updatedAt": "2024-06-14T10:04:37Z",
  "closedAt": "2024-02-26T11:16:14Z",
  "mergedAt": null,
  "additions": 5,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "dev/f-alizada/safe-access-to-EventWaitHandle",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6c994f7073cf8432d43e31b50a135b9f5dadc2a1",
          "message": "Access nullable values safely",
          "committedDate": "2024-02-23T10:46:58Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b570686c3f946ea709236be8d2d712cd5e0896af",
          "message": "fix the comparison of IsEmpty",
          "committedDate": "2024-02-23T10:59:11Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55b4391e11f82506ed02ece5c52b22d7228bbbcb",
          "message": "Respect the cancelled token request first",
          "committedDate": "2024-02-23T11:10:44Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@rokonec Could you confirm that it is not a breaking change in the logic/requirements? \r\nThe change includes: Do not wait for the queue to be empty if the cancellation is requested compared to previous behaviour.",
              "createdAt": "2024-02-26T09:13:27Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1343,19 +1343,19 @@ void LoggingEventProc()\n                     }\n                     else\n                     {\n-                        _emptyQueueEvent.Set();\n+                        _emptyQueueEvent?.Set();\n \n                         // Wait for next event, or finish.\n-                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                        if (!completeAdding.IsCancellationRequested && _eventQueue?.IsEmpty == true)\n                         {\n                             WaitHandle.WaitAny(waitHandlesForNextEvent);\n                         }\n \n-                        _emptyQueueEvent.Reset();\n+                        _emptyQueueEvent?.Reset();\n                     }\n-                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);\n+                } while (!completeAdding.IsCancellationRequested || _eventQueue?.IsEmpty == false);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "The logic change here is that we do not crash if `_eventQueue` is null. Otherwise the end result logic is same. So this is good (we do not want unhandled exceptions as part of our contract)\r\n\r\nAs from perf point of view - checking both is quick - so I do not expect any measurable impact there either.",
              "createdAt": "2024-02-26T09:34:27Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1343,19 +1343,19 @@ void LoggingEventProc()\n                     }\n                     else\n                     {\n-                        _emptyQueueEvent.Set();\n+                        _emptyQueueEvent?.Set();\n \n                         // Wait for next event, or finish.\n-                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                        if (!completeAdding.IsCancellationRequested && _eventQueue?.IsEmpty == true)\n                         {\n                             WaitHandle.WaitAny(waitHandlesForNextEvent);\n                         }\n \n-                        _emptyQueueEvent.Reset();\n+                        _emptyQueueEvent?.Reset();\n                     }\n-                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);\n+                } while (!completeAdding.IsCancellationRequested || _eventQueue?.IsEmpty == false);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "thank you @JanKrivanek. \r\nWe have discussed the PR and the issue with @rokonec offline: \r\nSince the changes does not fix the problem, this is more of experimental fix that possibly could address. There is not 100% pointers to the exact problem. Having that said it is more prefereble to wait for more information about the fails and errors appearing from Reset and Set events, and close the PR :) \r\nThank you every one. ",
              "createdAt": "2024-02-26T11:16:09Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1343,19 +1343,19 @@ void LoggingEventProc()\n                     }\n                     else\n                     {\n-                        _emptyQueueEvent.Set();\n+                        _emptyQueueEvent?.Set();\n \n                         // Wait for next event, or finish.\n-                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                        if (!completeAdding.IsCancellationRequested && _eventQueue?.IsEmpty == true)\n                         {\n                             WaitHandle.WaitAny(waitHandlesForNextEvent);\n                         }\n \n-                        _emptyQueueEvent.Reset();\n+                        _emptyQueueEvent?.Reset();\n                     }\n-                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);\n+                } while (!completeAdding.IsCancellationRequested || _eventQueue?.IsEmpty == false);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "@JanKrivanek I forgot to mention that the second part of logic update was in the timing when we stop logging based on the request. \r\nand the main question here was should we wait till we process all events or should we stop once we received the cancellation request :) ",
              "createdAt": "2024-02-26T12:23:48Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1343,19 +1343,19 @@ void LoggingEventProc()\n                     }\n                     else\n                     {\n-                        _emptyQueueEvent.Set();\n+                        _emptyQueueEvent?.Set();\n \n                         // Wait for next event, or finish.\n-                        if (!completeAdding.IsCancellationRequested && _eventQueue.IsEmpty)\n+                        if (!completeAdding.IsCancellationRequested && _eventQueue?.IsEmpty == true)\n                         {\n                             WaitHandle.WaitAny(waitHandlesForNextEvent);\n                         }\n \n-                        _emptyQueueEvent.Reset();\n+                        _emptyQueueEvent?.Reset();\n                     }\n-                } while (!_eventQueue.IsEmpty || !completeAdding.IsCancellationRequested);\n+                } while (!completeAdding.IsCancellationRequested || _eventQueue?.IsEmpty == false);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}