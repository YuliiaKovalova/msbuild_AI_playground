{
  "number": 10172,
  "title": "Refactor/Unify Build and Graph OM and API",
  "body": "Prerequisity for indicating Build Submissions in Build Events (which will be needed by BuildCheck to detect Restore)\r\n\r\n### Context\r\nBuild and Graph Build OM and API is largely duplicated. Building on top of this (e.g. to add 'BuildSubmissionStartedEventArgs') would require even further duplication of code.\r\n\r\nSo let's deduplicate the OM and API.\r\n\r\n\r\n### Changes Made\r\n* [x] Unify Request, Result, Submission\r\n* [x] Apply nullability checking on all refactored code\r\n* [x] Unify the functionality in `BuildManager`\r\n* [x] Apply nullability checking on whole `BuildManager`\r\n\r\nImportant notes:\r\n * I sealed the existing OM - letting it open was a design mistake that doesn't have sane usage. Hopefully there is none - we can easily revert if there proves to be some usages.\r\n * For some reasons the Results Cache is applicable only for 'standard' build requests - not for graph build requests. I do not fully understand why. I have left that aspect untouched\r\n https://github.com/dotnet/msbuild/blob/9bea8026aad964cb36f3ec9d93bd95a941487690/src/Build/BackEnd/Components/Caching/IResultsCache.cs#L33\r\n\r\n * `ExecuteSubmission` differs very significantly for BuildRequest and GraphBuildRequest - those are left in their separate functions (but at least there is a single entrypoint function to them)\r\n * The entrypoint location of where we should introduce emiting of `BuildRequestStarted` is indicated in code by TODO with some hints (https://github.com/dotnet/msbuild/pull/10172/files#diff-2b0716a511d8f4ee690ebd5c3a59dec1e3f9a5eab4ab2a80a1018820a658accbR1370-R1372) - so once this PR is merged, there hopefully should be a no blocker for https://github.com/dotnet/msbuild/issues/9747 (FYI @maridematte)\r\n\r\n\r\n\r\n\r\nFYI @dfederm - this is heavily touching graph requesting - so your PoV would be very helpful\r\n",
  "state": "MERGED",
  "createdAt": "2024-05-24T17:29:49Z",
  "updatedAt": "2024-07-04T09:20:43Z",
  "closedAt": "2024-07-04T09:20:42Z",
  "mergedAt": "2024-07-04T09:20:42Z",
  "additions": 1024,
  "deletions": 947,
  "changedFiles": 33,
  "headRefName": "proto/submission-refactor",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7ce54808976afb179fe8310047762db149d9b401",
          "message": "Fix test utils wording",
          "committedDate": "2024-05-20T15:28:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5596374ba17d7224d9a96ab42da6acd5c48d2a8",
          "message": "Update src/UnitTests.Shared/RunnerUtilities.cs\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-05-20T17:59:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4697806a3adc5f9d225b4267967201670545e314",
          "message": "Merge remote-tracking branch 'upstream/main'",
          "committedDate": "2024-06-06T18:34:57Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39610a8362847d2369ec644da46089cba9969927",
          "message": "Refactor submission OM - part 1",
          "committedDate": "2024-06-06T18:35:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "168f6cde84bbd818a6812f0847bbf17a466c1007",
          "message": "Fix xml comments",
          "committedDate": "2024-06-06T18:35:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2474f37f8f71576b5c4ba8fdd4083d0a7fdf13b4",
          "message": "Fix nullability in tests",
          "committedDate": "2024-06-06T18:35:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "461576747f07f2200dffada4f3acf44562eae994",
          "message": "Finalize merging of the build requesting OM and API",
          "committedDate": "2024-06-06T18:35:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d42f1364b6cc1cf47b830ff5fcf826c2649b3b4",
          "message": "Add nullability to BuildManager",
          "committedDate": "2024-06-06T18:35:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "158375a97ca435fad534260c915ddbc08f47c1a2",
          "message": "Remove leftover test code",
          "committedDate": "2024-06-06T18:35:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e6771c4f4ec49ca31692ab4db053e85abed5b3da",
          "message": "Fix nullables after rebase",
          "committedDate": "2024-06-06T18:40:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dab5d0aa85d7473afe035825989054911af62abe",
          "message": "Fix verification check",
          "committedDate": "2024-06-10T10:58:57Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f50a52061a590988dff1feafa809c16cf680db6e",
          "message": "Adjust",
          "committedDate": "2024-06-10T11:00:07Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9580be36d336fe6ea96f6f2a3d36efd96193e4ec",
          "message": "Restructure the code, add exception for sealing OM",
          "committedDate": "2024-06-11T10:52:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be1181ebfa18de0727cef3688da513e9f00b0e3a",
          "message": "Removing breaking change",
          "committedDate": "2024-06-11T15:36:52Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86945514df1aa76bd6ec6fdc6238e40856e48a9f",
          "message": "Dummy change to kick cla bot",
          "committedDate": "2024-06-14T07:50:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eef433c5ef39518746fbb11de136074659496f56",
          "message": "Merge branch 'main' into proto/submission-refactor",
          "committedDate": "2024-06-26T15:26:24Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b447c6d8399b1e874dde02ff4479918aaa8dad7c",
          "message": "Update src/Build/BuildCheck/Utilities/EnumerableExtensions.cs\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-07-01T11:01:57Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e47e01f2a88011ad429a0c161be26d673d3b54ac",
          "message": "Fix API breaking changes",
          "committedDate": "2024-07-03T15:18:14Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2024-06-11T12:43:28Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-06-11T12:43:37Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "rekicking CLA bot",
        "createdAt": "2024-06-11T13:49:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-06-14T05:23:51Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-06-14T05:24:00Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "rekicking cla",
        "createdAt": "2024-06-14T07:48:28Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Experimental VS insertion: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/562572 (build goes fine now!)",
        "createdAt": "2024-07-03T15:17:58Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": ":)",
              "createdAt": "2024-06-06T18:10:52Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -602,6 +602,8 @@ private static string GetFriendlyCounterType(PerformanceCounterType type, string\n         /// </summary>\n         private static void DebuggerLaunchCheck()\n         {\n+            Debugger.Launch();",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "oops - thanks! :)",
              "createdAt": "2024-06-06T18:13:27Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -602,6 +602,8 @@ private static string GetFriendlyCounterType(PerformanceCounterType type, string\n         /// </summary>\n         private static void DebuggerLaunchCheck()\n         {\n+            Debugger.Launch();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I see a lot of these nullable removals, are we actively trying to get away from these? Because if yes I think it would be interesting to open a specific issue for it.",
              "createdAt": "2024-06-20T09:55:28Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -41,8 +41,6 @@\n using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;\n using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;\n \n-#nullable disable",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Nullable checks bring more safety (we had already some nullref issues before) - so it's good to get rid of them opportunistically as we are touching code. On the other hand adapting to those checks just for sake of adapting is not worth it (as any change brings a risk)",
              "createdAt": "2024-07-01T11:12:30Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -41,8 +41,6 @@\n using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;\n using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;\n \n-#nullable disable",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I agree here with @maridematte, in terms of reviewing, however since we do not have some automation around that (yet :) ) not a blocker",
              "createdAt": "2024-07-01T17:51:37Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -41,8 +41,6 @@\n using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;\n using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;\n \n-#nullable disable",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// Returns the item as an enumerable with single item.\r\n```",
              "createdAt": "2024-06-20T12:07:38Z",
              "path": "src/Build/BuildCheck/Utilities/EnumerableExtensions.cs",
              "diffHunk": "@@ -23,6 +21,26 @@ public static string ToCsvString<T>(this IEnumerable<T>? source, bool useSpace =\n         return source == null ? \"<NULL>\" : string.Join(useSpace ? \", \" : \",\", source);\n     }\n \n+    /// <summary>\n+    /// Returns the item as and enumerable with single item.",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we expect that the exception will be null here? \r\nIs the scenario when both exceptions are null valid here? ",
              "createdAt": "2024-07-01T11:28:06Z",
              "path": "src/Build.UnitTests/BackEnd/BuildResult_Tests.cs",
              "diffHunk": "@@ -322,12 +327,12 @@ public void TestTranslation()\n             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());\n             INodePacket packet = BuildResult.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());\n \n-            BuildResult deserializedResult = packet as BuildResult;\n+            BuildResult deserializedResult = (packet as BuildResult)!;\n \n             Assert.Equal(result.ConfigurationId, deserializedResult.ConfigurationId);\n             Assert.True(TranslationHelpers.CompareCollections(result.DefaultTargets, deserializedResult.DefaultTargets, StringComparer.Ordinal));\n             Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);\n-            Assert.Equal(result.Exception.Message, deserializedResult.Exception.Message);\n+            Assert.Equal(result.Exception?.Message, deserializedResult.Exception?.Message);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Yes - if result suceeds, it won't have any exception, and then the transfered result should as well be without exception",
              "createdAt": "2024-07-03T15:23:56Z",
              "path": "src/Build.UnitTests/BackEnd/BuildResult_Tests.cs",
              "diffHunk": "@@ -322,12 +327,12 @@ public void TestTranslation()\n             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());\n             INodePacket packet = BuildResult.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());\n \n-            BuildResult deserializedResult = packet as BuildResult;\n+            BuildResult deserializedResult = (packet as BuildResult)!;\n \n             Assert.Equal(result.ConfigurationId, deserializedResult.ConfigurationId);\n             Assert.True(TranslationHelpers.CompareCollections(result.DefaultTargets, deserializedResult.DefaultTargets, StringComparer.Ordinal));\n             Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);\n-            Assert.Equal(result.Exception.Message, deserializedResult.Exception.Message);\n+            Assert.Equal(result.Exception?.Message, deserializedResult.Exception?.Message);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarify if we already have this kind of cases where the value inserted is null? ",
              "createdAt": "2024-07-01T13:24:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildRequestData.cs",
              "diffHunk": "@@ -179,7 +180,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild\n         /// <param name=\"toolsVersion\">The tools version to use for the build.  May be null.</param>\n         /// <param name=\"targetsToBuild\">The targets to build.</param>\n         /// <param name=\"hostServices\">The host services to use.  May be null.</param>\n-        public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, string toolsVersion, string[] targetsToBuild, HostServices hostServices)\n+        public BuildRequestData(string projectFullPath, IDictionary<string, string?> globalProperties, string? toolsVersion, string[] targetsToBuild, HostServices? hostServices)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "This is rather around the code contract than the usage case it represents.\r\n\r\nUnfortunately we do not have nullables enabled in majority of our code - so any values comming from code without nullables enabled, needs to be treated as possible null.\r\nThe BuildRequestData constructor has calls from more then 100 places from our code - so we'd need to exapnd the rafctoring of enabling nullables to all those locations to have the guaranteed non-null value.",
              "createdAt": "2024-07-03T15:27:16Z",
              "path": "src/Build/BackEnd/BuildManager/BuildRequestData.cs",
              "diffHunk": "@@ -179,7 +180,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild\n         /// <param name=\"toolsVersion\">The tools version to use for the build.  May be null.</param>\n         /// <param name=\"targetsToBuild\">The targets to build.</param>\n         /// <param name=\"hostServices\">The host services to use.  May be null.</param>\n-        public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, string toolsVersion, string[] targetsToBuild, HostServices hostServices)\n+        public BuildRequestData(string projectFullPath, IDictionary<string, string?> globalProperties, string? toolsVersion, string[] targetsToBuild, HostServices? hostServices)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}