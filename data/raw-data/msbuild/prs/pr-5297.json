{
  "number": 5297,
  "title": "[Static graph] Support skipping nonexisting targets",
  "body": "Depends on #5222. Review that one first.\r\n\r\nIn msbuild, one can call targets which do not exist by setting `SkipNonexistentTargets` on the MSBuild task. This PR adds support for nonexistent targets in the static graph [target protocol](https://github.com/microsoft/msbuild/blob/master/documentation/specs/static-graph.md#inferring-which-targets-to-run-for-a-project-within-the-graph).\r\n\r\nTo mark a target as optional, users can now define the following: `<ProjectReferenceTargets Include='Build' Targets='GetTargetFrameworks' SkipNonexistentTargets='true'>`.\r\n\r\nImplementation overview: `ProjectGraph.GetTargetLists()` removes nonexistent targets. Since nonexistent targets do not have a BuildResult, the Scheduler now needs to know about this case when it checks whether cache misses are allowed. This required saving a project's targets in a new `BuildRequestConfiguration.ProjectTargets`, and a corresponding field in `BuildResult.Targets` which ferries the targets from the out of proc nodes to the build manager node.",
  "state": "CLOSED",
  "createdAt": "2020-04-17T23:26:08Z",
  "updatedAt": "2021-01-16T01:10:06Z",
  "closedAt": "2021-01-16T01:10:06Z",
  "mergedAt": null,
  "additions": 1296,
  "deletions": 343,
  "changedFiles": 27,
  "headRefName": "supportSkippingNonexistingTargetsInStaticGraph",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "46294df28200102be484f0875e2607f6cc901e7e",
          "message": "Simplify condition",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd71db178eba08ae87ea4c514807790b7d924805",
          "message": "Tests",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e21922b4d5e4e493596254ef1f8081e87160768e",
          "message": "Resolve config collisions from exempt projects",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8f67ea312f6bbc4e7d6d253cdfaa3d3ff0150f9",
          "message": "Copy satellites in deployment script",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10cfc85fc7f0925311b2694d74ef43d6b5e697bd",
          "message": "Don't add new cache entries in the cache of old results",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff8227abe3f4692a5e87868f691cdbb5ecc938ec",
          "message": "Change debug assertions to mandatory assertions",
          "committedDate": "2020-04-20T20:27:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "019b954fb708579e45e88e05e676a02f83b9d031",
          "message": "Handle case where exempt project also exists in the input results cache",
          "committedDate": "2020-04-20T20:27:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75d587448dd96adf651c0d664a9b5f8cfc6c4f69",
          "message": "Merge colliding configs",
          "committedDate": "2020-04-20T20:27:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ba0c769a2d5cdfddf2e96f48d6df1a076bef969",
          "message": "Update debug assertions",
          "committedDate": "2020-04-20T20:27:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "726b29fde1fa0fef8e30a3f832dc622561a08e03",
          "message": "Mark self build configs as exempt from isolation constraints",
          "committedDate": "2020-04-20T20:27:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "890360db7e804483641ec83a281a2412e48e2c92",
          "message": "Rename",
          "committedDate": "2020-04-20T20:27:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e71cb35770370671bc92fdd997c79b46d144610",
          "message": "Add BuildRequestConfiguration.ProjectTargets",
          "committedDate": "2020-04-20T21:53:08Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56a377df040d6251002b6b1caf06b83e92e4a0fa",
          "message": "Support optional targets in ProjectReferenceTargets",
          "committedDate": "2020-04-20T21:53:08Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "576130aae8b93f46c3790fd988eae4118a63c0fd",
          "message": "FIx illegal ProjectInstance access",
          "committedDate": "2020-04-23T00:00:40Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing until this problem becomes more pressing.",
        "createdAt": "2021-01-16T01:10:06Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If we are trying to reduce the indentations, then perhaps using `ForEach()` would be better:\r\n```\r\nconfigurationsCleared.ForEach(configurationId => _resultsCache.ClearResultsForConfiguration(configurationId));\r\n```",
              "createdAt": "2020-10-21T13:57:40Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -511,22 +511,24 @@ void InitializeCaches()\n                 _configCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ConfigCache) as IConfigCache;\n                 _resultsCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ResultsCache) as IResultsCache;\n \n-                if (!usesInputCaches && (_buildParameters.ResetCaches || _configCache.IsConfigCacheSizeLargerThanThreshold()))\n+                if (usesInputCaches)\n+                {\n+                    return;\n+                }\n+\n+                if ((_buildParameters.ResetCaches || _configCache.IsConfigCacheSizeLargerThanThreshold()))\n                 {\n                     ResetCaches();\n                 }\n                 else\n                 {\n-                    if (!usesInputCaches)\n-                    {\n-                        List<int> configurationsCleared = _configCache.ClearNonExplicitlyLoadedConfigurations();\n+                    List<int> configurationsCleared = _configCache.ClearNonExplicitlyLoadedConfigurations();\n \n-                        if (configurationsCleared != null)\n+                    if (configurationsCleared != null)\n+                    {\n+                        foreach (int configurationId in configurationsCleared)",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If it doesn't affect the functionality or it's unrelated to the topic of a PR, then perhaps changing this one specific line should be avoided (reduced amount of files changed in PR)?\r\nIf not, then why this specific line?",
              "createdAt": "2020-10-21T14:01:37Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs",
              "diffHunk": "@@ -502,7 +502,7 @@ private void TestSkipIsolationConstraints(string glob, string referencePath, boo\n \n             glob = $\"$([MSBuild]::Escape('{glob}'))\";\n \n-            projectContents = projectContents ?? $@\"\n+            projectContents ??= $@\"",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "With such a big commit, or even bigger PR it's a good practice to separate formatting/cosmetical changes from the functional changes.",
              "createdAt": "2020-10-21T14:07:51Z",
              "path": "src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs",
              "diffHunk": "@@ -315,35 +311,33 @@ public void BuildProjectGraphUsingCaches(Dictionary<int, int[]> edges)\n             }\n \n             // Build again using the first caches. Project file changes from references should not be visible.\n-            BuildUsingCaches(\n-                topoSortedNodes,\n+            BuildGraphUsingCacheFiles(_env, graph,\n                 expectedOutput,\n                 outputCaches,\n                 generateCacheFiles: false,\n                 assertBuildResults: true,\n                 // there are no items in the second build. The references are loaded from cache and have items,\n                 // but the current project is loaded from file and has no items\n-                (node, localExpectedOutput) => localExpectedOutput[node].Skip(1).ToArray());\n+                expectedOutputProducer: (node, localExpectedOutput) => localExpectedOutput[node].Skip(1).ToArray());\n         }\n \n         [Fact]\n         public void OutputCacheShouldNotContainInformationFromInputCaches()\n         {\n-            var topoSortedNodes =\n+            var graph =\n                 CreateProjectGraph(\n                     env: _env,\n-                    dependencyEdges: new Dictionary<int, int[]> { { 1, new[] { 2, 3 } } },\n+                    dependencyEdges: new Dictionary<int, int[]> {{1, new[] {2, 3}}},",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Because of small refactoring done in line 139 this would also use some polishing:\r\n`_override.HasConfiguration(configId)` has already been checked in line 134.",
              "createdAt": "2020-10-21T14:45:32Z",
              "path": "src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs",
              "diffHunk": "@@ -121,7 +136,7 @@ public bool HasConfiguration(int configId)\n #if DEBUG\n                 ErrorUtilities.VerifyThrow(!CurrentCache.HasConfiguration(configId), \"caches should not overlap\");\n #endif\n-                return overrideHasConfiguration;\n+                return true;\n             }\n \n             return _override.HasConfiguration(configId) || CurrentCache.HasConfiguration(configId);",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`Try` in a method's name suggests throwing an exception.\r\nPerhaps:\r\n`GetConfigWithGivenIdIfExists` would describe both actions this method does?",
              "createdAt": "2020-10-21T14:57:13Z",
              "path": "src/Build/BackEnd/Components/Caching/IConfigCache.cs",
              "diffHunk": "@@ -27,6 +27,14 @@ internal interface IConfigCache : IBuildComponent, IEnumerable<BuildRequestConfi\n             get;\n         }\n \n+        /// <summary>\n+        /// Check existence of entry and return value if present.\n+        /// </summary>\n+        /// <param name=\"configId\">The configuration id.</param>\n+        /// <param name=\"existingConfig\">Corresponding configuration if configId is present. Null otherwise</param>\n+        /// <returns>True if the cache contains the configuration. False otherwise. </returns>\n+        bool TryGetConfiguration(int configId, out BuildRequestConfiguration existingConfig);",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Perhaps `request.Targets.Any()` would be easier to read?",
              "createdAt": "2020-10-21T15:11:01Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1893,6 +1924,39 @@ string ConcatenateGlobalProperties(BuildRequestConfiguration configuration)\n             {\n                 return string.Join(\"; \", configuration.GlobalProperties.Select<ProjectPropertyInstance, string>(p => $\"{p.Name}={p.EvaluatedValue}\"));\n             }\n+\n+            bool RequestSkipsNonexistentTargetsAndAllExistingTargetsHaveResults(BuildRequest buildRequest)\n+            {\n+                // Return early if the request does not skip nonexistent targets.\n+                if ((buildRequest.BuildRequestDataFlags & BuildRequestDataFlags.SkipNonexistentTargets) != BuildRequestDataFlags.SkipNonexistentTargets)\n+                {\n+                    return false;\n+                }\n+\n+                var requestResults = _resultsCache.GetResultsForConfiguration(buildRequest.ConfigurationId);\n+\n+                if (requestResults == null)\n+                {\n+                    return false;\n+                }\n+\n+                // Non-existing targets do not have results.\n+                // We must differentiate targets that do not exist in the reference, from targets that exist but have no results.\n+                // In isolated builds, cache misses from the former are accepted for requests that skip non-existing targets.\n+                // Cache misses from the latter break the isolation constraint of no cache misses, even when non-existing targets get skipped.\n+                bool any = false;\n+                foreach (var target in request.Targets)",
              "author": {
                "login": "BartoszKlonowski"
              }
            }
          ]
        }
      }
    ]
  }
}