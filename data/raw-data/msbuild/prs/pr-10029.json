{
  "number": 10029,
  "title": "ElementLocation optimisations",
  "body": "- Null annotate file\r\n- Remove some redundant code\r\n- Consolidate validation\r\n- Reduce branching during construction\r\n- Documentation updates\r\n- Generally reduce the number of diagnostics displayed in the IDE in this file",
  "state": "OPEN",
  "createdAt": "2024-04-18T00:52:40Z",
  "updatedAt": "2025-06-02T08:26:43Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 517,
  "deletions": 523,
  "changedFiles": 4,
  "headRefName": "element-location-perf",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": {
    "title": "VS 17.13"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "776ec7a2769b8e809a9023914b06e1e3b82878dd",
          "message": "Remove redundant GetHashCode calls\n\nFor Int32, GetHashCode just returns the value directly.",
          "committedDate": "2024-04-17T23:42:53Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37def1127d383e5c8acd6de4514fbe4aab5afdf4",
          "message": "Remove redundant null check",
          "committedDate": "2024-04-17T23:44:52Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb6ec145c6ef6dbfa8413a8702b8ded23682f205",
          "message": "Update comment",
          "committedDate": "2024-04-17T23:54:38Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "093bee796c3626e1389cc31d570af83ac4571838",
          "message": "Null annotate ElementLocation",
          "committedDate": "2024-04-18T00:02:22Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65ed4dd9a4a1a6d8e103bab9031d0e36335a7752",
          "message": "Pack line and column values into four bytes\n\nThe SmallElementLocation class exists because very few element locations require 32 bits to store the line/column values. It uses ushort (2 bytes) instead of int (4 bytes) for each value, in an attempt to reduce memory usage.\n\nHowever the CLR aligns ushort fields on classes at four-byte boundaries on most (all?) architectures, meaning the optimisation has no effect.\n\nThis commit explicitly packs the two values into four bytes to ensure that four bytes is saved per instance.",
          "committedDate": "2024-04-18T00:50:27Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb30e4fc5ed9e991d1185d94af4de9662281a557",
          "message": "Remove redundant validation\n\nThe caller performs this validation already, and no other code can call this. Avoid some indirection and branching.",
          "committedDate": "2024-04-18T01:04:15Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57e0d5b6fc3333a0922c582e24b827b63dadb773",
          "message": "Simplify LocationString construction\n\nThe compiler will generate slightly better code from this switch statement, in cases where either line or column is zero.",
          "committedDate": "2024-04-18T01:17:41Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "80c1ea2403063c0447a5b13dc94bb3239e352182",
          "message": "Consolidate validation\n\nThere was inconsistent handling of validation between implementations. This moves it all into the `Create` method so that it can be handled in one place, consistently.",
          "committedDate": "2024-04-18T02:19:43Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ea9a86bc0421570ee30c45a0e81b2822b8c2034",
          "message": "Simplify names (IDE0001)",
          "committedDate": "2024-04-18T02:19:58Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "075ce08328937af3783f446ae6d337e9b2937f24",
          "message": "Use auto properties",
          "committedDate": "2024-04-18T02:19:58Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f1c07864dad9ec03b2efc3194cab50451e762ab",
          "message": "Use inheritdoc to avoid duplication",
          "committedDate": "2024-04-18T02:19:58Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28cfb199105bd0da7da2b40d70d74c92a1b0f601",
          "message": "Make field readonly",
          "committedDate": "2024-04-18T02:19:59Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2acc6281ab25679ca96068e840bd380ec35f3a59",
          "message": "Use constants",
          "committedDate": "2024-04-18T02:19:59Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "596c57485098014ff0b3bbd2c3be90ade44a4832",
          "message": "Reduce branching when testing line/column values",
          "committedDate": "2024-04-18T02:20:24Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d4615223b2d4b8cb77720d8e4e9b5d480bff0c5d",
          "message": "Use pattern matching",
          "committedDate": "2024-04-18T02:20:28Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ef2a4b696ab07742f086f44d8dcd2e9da75abd6",
          "message": "Use standard API doc prefix",
          "committedDate": "2024-04-18T02:20:29Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b81d60ceea2afa6febf1cce127586bcfa270cfe",
          "message": "Use primary constructor",
          "committedDate": "2024-04-18T02:20:29Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc82d47c92d112fa23fe0b4dbb5e5c0fcd7d09a4",
          "message": "Seal private nested classes",
          "committedDate": "2024-04-18T02:20:29Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be277f6e099e3ccbdafc9498896779bddfc4b7aa",
          "message": "Improve hash function",
          "committedDate": "2024-04-18T23:49:28Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2653348f3769a4421f24801dcf5d48ec5afa7872",
          "message": "Revert field packing\n\nThe CLR does in fact pack these fields adjacent to one another, so we don't have to do this in code ourselves.",
          "committedDate": "2024-04-18T23:52:08Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efb2f9ae0977c69877745bbd51f8726c20021155",
          "message": "Inline field",
          "committedDate": "2024-04-19T09:06:04Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d4a4ee2e107dd4f5054e5a4425b383a16216426",
          "message": "Pack ElementLocation more efficiently on 64-bit architectures\n\nAdds new subtypes for `ElementLocation` that pack to multiples of eight bytes, to avoid wasting space at runtime on padding between instances of this class in memory.\n\nThe primary gain here comes from being able to use a smaller value for the `File` value. With this change, there's a lock-free cache of file paths which are then stored by index. When the index is small, as it usually will be, it can be packed for efficiently (e.g. in 2 bytes) than a string reference (8 bytes on 64-bit architectures).\n\nSee code comment for more details.\n\nAlso remove file IO from unit tests so they run faster.",
          "committedDate": "2024-04-22T02:31:28Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5ab818fe483e89b9a9d53f65e0dcf88cf6b6d4b",
          "message": "Reset the file index before running ElementLocation tests",
          "committedDate": "2024-04-22T12:15:02Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c47008b903f5e4271ea6630195ad57cda1ee069c",
          "message": "Simplify test a bit",
          "committedDate": "2024-04-22T12:45:48Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be049a8d301275beb35aa1c593759e962e3879c9",
          "message": "Add test that shows file index packing",
          "committedDate": "2024-04-22T12:46:15Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fb49a824cb74d6d562fcd67b7fce3b5c34aa84d",
          "message": "Add comment",
          "committedDate": "2024-04-22T12:46:30Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3de3786a9381d094e35ac7d13b112899a49bc64",
          "message": "More info in assertion message",
          "committedDate": "2024-04-22T13:43:31Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a3af7bf0583342f55b7504cb03886da383db9e0e",
          "message": "Fix assertion",
          "committedDate": "2024-04-22T14:43:21Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eeed8717941adf6750f717214e7a7f5fd3567196",
          "message": "Update test code",
          "committedDate": "2024-04-22T22:07:54Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> However the CLR aligns ushort fields on classes at four-byte boundaries on most (all?) architectures, meaning the optimisation has no effect.\r\n\r\nThis is surprising. The alignment requirement of primitives tends to be their size, so two-byte integers will typically be aligned at two-byte boundaries. Inspecting the x64 NetFx MSBuild with SOS supports it:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/60179d36-89ff-4ec7-8493-39544ea03920)\r\n\r\nOn which architecture did you see them unnecessarily padded?",
        "createdAt": "2024-04-18T09:20:04Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Yes I was also surprised. I tested [here](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoIgBgAIiyA6AJXwwEsBbGZgYQjcADpwA2MKAGVJAN05gYAZwDc1aviUBDAGYxqAb2r0T9WVqj0IZegF56eGAHd6/MgAoAlGqqmzFqxI7B2dXEi8fP3NLCABmYMcXfliI41NoqxQE0IhgACsYMAxUqjSTPE48DHphDCgbewBVPG09ZgBBJQAeNzR6AEkqgAU6gD53WB0rMm8yh0rq2qggppbdPk6ekj7BjBGoccnA2d9TCqqauvjV1o3u5J3hsYmYKbiTv3PFuqyb9Y7urkCkVHntnkcICgPqY5kwAJzuOZ+AAkACJ0UjTG56EpOAAvGAgegGJZBOCXeoAX0xJn4QVxBKJJKu9HJpOppz8tPiDMJxKWWTZVw5XNM6NRJw56hoQWxBnoC3o7RUCouACEVRzSGFifQcEoABbQarKvWG430DX0LWy+LysQQPAAcyVKodzstmuoQA=), which is x64. Maybe the approach taken in that code is incorrect.",
        "createdAt": "2024-04-18T09:56:42Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "[Here's](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoIgBgAIiyA6AJXwwEsBbGZgYQjcADpwA2MKAGVJAN05gYAZwDc1aviUBDAGYxqAb2r0T9WVqj0IZegF56eGAHd6/MgAoAlGqqmzFqxI7B2dXEi8fP3NLCABmYMcXfliI41NoqxQE0IhgACsYMAxUqjSTPE48DHphDCgbewBVPG09ZgBBJQAeNzR6AEkqgAU6gD53WB0rMm8yh0rq2qggppbdPk6ekj7BjBGoccnA2d9TCqqauvjV1o3u5J3hsYmYKbiTv3PFuqyb9Y7urkCkVHntnkcICgPqY5kwAJzuOZ+AAkACJ0UjTG56EpOAAvGAgegGJZBOCXeoAX0xJn4QVxBKJJKu9HJpOppz8tPiDMJxKWWTZVw5XNM6NR0NFcx0nAQMAAJvR3AsAFQ1EhaYIAMmsHU80tlCqVqvVwG1uoAQvrOcSafRgABPDAwNXAYQa4LuR3OlWed1aSKi+1Ol3291m+xekO+8OBqU2vzwr3h1lhjWS+gcjnqGhBbEGegLSR4LRiQsXdoqcvOqAlssLegWqsc0hhYnV4ul+g4JQAC2g1UrHdrXZ7/ag1SbmeoreS7aLI7LYggeAA5vQhwu6/Rl2vG83qEA=) a diff between field positions that shows four bytes offset between consecutive `ushort` fields.",
        "createdAt": "2024-04-18T10:03:08Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> Inspecting the x64 NetFx MSBuild with SOS supports it:\r\n\r\nThe highlighted bit of your screenshot shows the `string name` field is two bytes, which looks suspicious to me.",
        "createdAt": "2024-04-18T10:16:49Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "I believe the test gives misleading results because classes are always aligned at a pointer-size boundary. A class with two 2-byte integers will be padded with 4 extra bytes, making it use the same amount of space as a class with two 4-byte integers. If I tweak the test to use four fields instead of two, the sizes come out different.",
        "createdAt": "2024-04-18T10:20:22Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > Inspecting the x64 NetFx MSBuild with SOS supports it:\r\n> \r\n> The highlighted bit of your screenshot shows the `string name` field is two bytes, which looks suspicious to me.\r\n\r\nI believe this output uses hex numbers.",
        "createdAt": "2024-04-18T10:21:07Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> [Here's](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoIgBgAIiyA6AJXwwEsBbGZgYQjcADpwA2MKAGVJAN05gYAZwDc1aviUBDAGYxqAb2r0T9WVqj0IZegF56eGAHd6/MgAoAlGqqmzFqxI7B2dXEi8fP3NLCABmYMcXfliI41NoqxQE0IhgACsYMAxUqjSTPE48DHphDCgbewBVPG09ZgBBJQAeNzR6AEkqgAU6gD53WB0rMm8yh0rq2qggppbdPk6ekj7BjBGoccnA2d9TCqqauvjV1o3u5J3hsYmYKbiTv3PFuqyb9Y7urkCkVHntnkcICgPqY5kwAJzuOZ+AAkACJ0UjTG56EpOAAvGAgegGJZBOCXeoAX0xJn4QVxBKJJKu9HJpOppz8tPiDMJxKWWTZVw5XNM6NR0NFcx0nAQMAAJvR3AsAFQ1EhaYIAMmsHU80tlCqVqvVwG1uoAQvrOcSafRgABPDAwNXAYQa4LuR3OlWed1aSKi+1Ol3291m+xekO+8OBqU2vzwr3h1lhjWS+gcjnqGhBbEGegLSR4LRiQsXdoqcvOqAlssLegWqsc0hhYnV4ul+g4JQAC2g1UrHdrXZ7/ag1SbmeoreS7aLI7LYggeAA5vQhwu6/Rl2vG83qEA=) a diff between field positions that shows four bytes offset between consecutive `ushort` fields.\r\n\r\nOh I used the wrong type here. Changing it to `C2` works correctly.",
        "createdAt": "2024-04-18T10:22:45Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Thank you for double checking. I've closed the original issue.\r\n\r\nThere are some changes here to reduce CPU as well which you might consider, given these seem to be highly used types/methods. I'll update the PR tomorrow. Let me know if any of the other changes seem problematic, and I'll back them out too.",
        "createdAt": "2024-04-18T10:25:50Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "There's actually still a reasonable opportunity to reduce the size of this class on 64-bit platforms. The two 2-byte integers end up being padded to 8 bytes so it's no better than two 4-byte integers, as you found out. If we switched `file` from a reference (8 bytes) to a 4-byte index into a \"file table\", the size of the class would be reduced from 32 to 24 bytes (including the method table pointer and syncblock).\r\n\r\nWe could go further. Instead of a class this could be a struct with a size of 8 bytes (4 byte for file index, 4 bytes for line/column), allocated from a special pool. What would then be passed around instead of a reference to the class would be an index of the struct in the pool. But this would be quite a pervasive change, not sure if it would be worth the churn.",
        "createdAt": "2024-04-18T20:26:55Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "(Sometimes felt like the MSBuild engine is basically string manipulation, file IO, map lookups, and caches...) These could certainly be cached, but then you have interning and cache invalidation to deal with, which has been challenging in several places, such as the XML cache and the original string interning cache.",
        "createdAt": "2024-04-18T20:49:35Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Pulling the 8-byte string reference out makes some sense. I wondered if we could find a way to remove it completely, if the locations are always used within the context of a document, or an element that can reach a document.\r\n\r\nConverting to a struct is also possible, though we'd need to allocate the maximum size for line/column, as the small/regular approach used here relies on polymorphism which doesn't work with structs.\r\n\r\nIn both cases, I assumed we couldn't really consider them as possibilities given this is public API. If there's some leeway there then we can revisit.",
        "createdAt": "2024-04-18T23:47:59Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Ah, that's true, they're public. Definitely limits the options but \"compressing\" the file reference should still be possible.",
        "createdAt": "2024-04-19T07:29:02Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "If the string cache is a global singleton then yes it'd be straightforward. Would we consider such a cache? I think it'd be per-process, grow-only, with no eviction. The assumption being that there's a limited number of files involved in build operations.\r\n\r\nIf there's interest, I'll push an update to explore the idea.",
        "createdAt": "2024-04-19T09:00:08Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "I think it depends on the impact. I would probably first measure how much we can save relative to all MSBuild allocations.",
        "createdAt": "2024-04-19T09:09:38Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "```\r\ndotnet new console temp\r\nmsbuild /getProperty:MyProperty temp.csproj\r\n```\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/350947/3e6eaeaa-ad92-417f-b28a-7756dcadba2b)\r\n\r\nFor evaluation of an empty console app, it looks like `SmallElementLocation` is just over 2% of allocated bytes.\r\n\r\nWe believe `SmallElementLocation` objects are currently 24 bytes each:\r\n\r\n- 8 header\r\n- 8 string reference\r\n- 4 line\r\n- 4 column\r\n\r\nInstead, we could have 16 bytes to cover almost everything:\r\n\r\n- Small\r\n  - 8 header\r\n  - 2 bytes index\r\n  - 2 column\r\n  - 4 line\r\n\r\nSo roughly an 0.7% reduction for evalution. But please check my numbers!",
        "createdAt": "2024-04-19T10:20:54Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Thank you. The overhead of being an object is 16 bytes on 64-bit so I think it would go from 32 to 24 bytes actually taken up on the GC heap but I guess the delta is the important number and that's still -8 bytes.\r\n\r\nFor evaluation, I suspect some of the allocations seen during command-line execution of MSBuild.exe are one-time initialization that wouldn't happen again on subsequent evaluations. So the relative reduction in e.g. VS scenarios would probably be slightly more. I'd say it's worth it - assuming that the implementation does not add too much complexity and doesn't slow down construction of these objects.",
        "createdAt": "2024-04-19T12:08:28Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Relevant for #11160 - as this has potential to improve incremental eval perf",
        "createdAt": "2025-01-14T11:59:54Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This might lead to collisions with `Column ^ Line`",
              "createdAt": "2024-04-18T19:01:21Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -85,29 +93,17 @@ public static ElementLocation EmptyLocation\n             get { return s_emptyElementLocation; }\n         }\n \n-        /// <summary>\n-        /// Get reasonable hash code.\n-        /// </summary>\n+        /// <inheritdoc />\n         public override int GetHashCode()\n         {\n             // Line and column are good enough\n-            return Line.GetHashCode() ^ Column.GetHashCode();\n+            return Line ^ Column;",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "Yeah it's no worse than before but seems pretty bad, can we at least get a bit-shift in there?",
              "createdAt": "2024-04-18T19:03:22Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -85,29 +93,17 @@ public static ElementLocation EmptyLocation\n             get { return s_emptyElementLocation; }\n         }\n \n-        /// <summary>\n-        /// Get reasonable hash code.\n-        /// </summary>\n+        /// <inheritdoc />\n         public override int GetHashCode()\n         {\n             // Line and column are good enough\n-            return Line.GetHashCode() ^ Column.GetHashCode();\n+            return Line ^ Column;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Is this ever called? That would inform how much it matters",
              "createdAt": "2024-04-18T20:41:47Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -85,29 +93,17 @@ public static ElementLocation EmptyLocation\n             get { return s_emptyElementLocation; }\n         }\n \n-        /// <summary>\n-        /// Get reasonable hash code.\n-        /// </summary>\n+        /// <inheritdoc />\n         public override int GetHashCode()\n         {\n             // Line and column are good enough\n-            return Line.GetHashCode() ^ Column.GetHashCode();\n+            return Line ^ Column;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "I'll change it to `return Line ^ (Column * 397);` which matches some combination logic elsewhere in the repo.",
              "createdAt": "2024-04-18T23:40:23Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -85,29 +93,17 @@ public static ElementLocation EmptyLocation\n             get { return s_emptyElementLocation; }\n         }\n \n-        /// <summary>\n-        /// Get reasonable hash code.\n-        /// </summary>\n+        /// <inheritdoc />\n         public override int GetHashCode()\n         {\n             // Line and column are good enough\n-            return Line.GetHashCode() ^ Column.GetHashCode();\n+            return Line ^ Column;",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "No idea why I didn't do this. Instead I wrote the comment about CLR packing!",
              "createdAt": "2024-04-18T20:43:57Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -306,70 +232,46 @@ public override int Column\n         /// A \"very small\" variation that used two bytes (or halves of a short) would fit about half of them\n         /// and save 4 more bytes each, but the CLR packs each field to 4 bytes, so it isn't actually any smaller.\n         /// </summary>\n-        private class SmallElementLocation : ElementLocation\n+        private sealed class SmallElementLocation : ElementLocation\n         {\n             /// <summary>\n-            /// The source file.\n-            /// </summary>\n-            private string file;\n-\n-            /// <summary>\n-            /// The source line.\n-            /// </summary>\n-            private ushort line;\n-\n-            /// <summary>\n-            /// The source column.\n+            /// Packs both the line and column values into a single four-byte element.\n+            /// The high two bytes are the line, and low two bytes are the column.\n             /// </summary>\n-            private ushort column;\n+            /// <remarks>\n+            /// If we had two <see cref=\"ushort\"/> fields, the CLR would pad them each to\n+            /// four-byte boundaries, meaning no space would actually be saved here.\n+            /// So instead, we pack them manually.\n+            /// </remarks>\n+            private int packedData;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Ah, I see you reversed it. I must have followed the same thought process then.",
              "createdAt": "2024-04-19T00:00:56Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -306,70 +232,46 @@ public override int Column\n         /// A \"very small\" variation that used two bytes (or halves of a short) would fit about half of them\n         /// and save 4 more bytes each, but the CLR packs each field to 4 bytes, so it isn't actually any smaller.\n         /// </summary>\n-        private class SmallElementLocation : ElementLocation\n+        private sealed class SmallElementLocation : ElementLocation\n         {\n             /// <summary>\n-            /// The source file.\n-            /// </summary>\n-            private string file;\n-\n-            /// <summary>\n-            /// The source line.\n-            /// </summary>\n-            private ushort line;\n-\n-            /// <summary>\n-            /// The source column.\n+            /// Packs both the line and column values into a single four-byte element.\n+            /// The high two bytes are the line, and low two bytes are the column.\n             /// </summary>\n-            private ushort column;\n+            /// <remarks>\n+            /// If we had two <see cref=\"ushort\"/> fields, the CLR would pad them each to\n+            /// four-byte boundaries, meaning no space would actually be saved here.\n+            /// So instead, we pack them manually.\n+            /// </remarks>\n+            private int packedData;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Yes it turns out the fields are actually packed tightly for `ushort`. I was testing for it in an incorrect way. What this investigation has shown though is that because the class is not a multiple of 8 in size, that we're still likely to have padding _after_ the fields. If that's the case, then the small/regular optimisation is unlikely to yield any benefit and might actually hurt read performance due to a change in alignment of the fields. It would need more investigation, and at this point I'm not sure the juice is worth the squeeze. I've left this PR open though with some other optimisations, in case there's interest.",
              "createdAt": "2024-04-19T00:05:50Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -306,70 +232,46 @@ public override int Column\n         /// A \"very small\" variation that used two bytes (or halves of a short) would fit about half of them\n         /// and save 4 more bytes each, but the CLR packs each field to 4 bytes, so it isn't actually any smaller.\n         /// </summary>\n-        private class SmallElementLocation : ElementLocation\n+        private sealed class SmallElementLocation : ElementLocation\n         {\n             /// <summary>\n-            /// The source file.\n-            /// </summary>\n-            private string file;\n-\n-            /// <summary>\n-            /// The source line.\n-            /// </summary>\n-            private ushort line;\n-\n-            /// <summary>\n-            /// The source column.\n+            /// Packs both the line and column values into a single four-byte element.\n+            /// The high two bytes are the line, and low two bytes are the column.\n             /// </summary>\n-            private ushort column;\n+            /// <remarks>\n+            /// If we had two <see cref=\"ushort\"/> fields, the CLR would pad them each to\n+            /// four-byte boundaries, meaning no space would actually be saved here.\n+            /// So instead, we pack them manually.\n+            /// </remarks>\n+            private int packedData;",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This should be `unchecked` for perf and in very extreme cases also for correctness.",
              "createdAt": "2024-04-23T06:08:27Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -71,43 +68,30 @@ public abstract class ElementLocation : IElementLocation, ITranslatable, IImmuta\n         /// </summary>\n         public string LocationString\n         {\n-            get { return GetLocationString(File, Line, Column); }\n-        }\n-\n-        /// <summary>\n-        /// Gets the empty element location.\n-        /// This is not to be used when something is \"missing\": that should have a null location.\n-        /// It is to be used for the project location when the project has not been given a name.\n-        /// In that case, it exists, but can't have a specific location.\n-        /// </summary>\n-        public static ElementLocation EmptyLocation\n-        {\n-            get { return s_emptyElementLocation; }\n+            get\n+            {\n+                int line = Line;\n+                int column = Column;\n+                return (line, column) switch\n+                {\n+                    (not 0, not 0) => ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"FileLocation\", File, line, column),\n+                    (not 0, 0) => $\"{File} ({line})\",\n+                    _ => File,\n+                };\n+            }\n         }\n \n-        /// <summary>\n-        /// Get reasonable hash code.\n-        /// </summary>\n+        /// <inheritdoc />\n         public override int GetHashCode()\n         {\n-            // Line and column are good enough\n-            return Line.GetHashCode() ^ Column.GetHashCode();\n+            // We don't include the file path in the hash\n+            return (Line * 397) ^ Column;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wonder if storing the last file in a thread-static variable wouldn't amortize the cost of full lookup/add enough that we could use a conventional data structure with a simple lock.",
              "createdAt": "2024-04-23T06:28:38Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -185,192 +176,288 @@ internal static ElementLocation Create(string file)\n         /// In AG there are 600 locations that have a file but zero line and column.\n         /// In theory yet another derived class could be made for these to save 4 bytes each.\n         /// </remarks>\n-        internal static ElementLocation Create(string file, int line, int column)\n+        internal static ElementLocation Create(string? filePath, int line, int column)\n         {\n-            if (string.IsNullOrEmpty(file) && line == 0 && column == 0)\n+            // Combine line and column values with bitwise OR so we can perform various\n+            // checks on both values in a single comparison, reducing the amount of branching\n+            // in the code.\n+            int combinedValue = line | column;\n+\n+            if (string.IsNullOrEmpty(filePath) && combinedValue == 0)\n             {\n-                return EmptyLocation;\n+                // When combinedValue is zero, it implies that both line and column are zero.\n+                return EmptyElementLocation.Instance;\n             }\n \n-            if (line <= 65535 && column <= 65535)\n+            // When combinedValue is negative, it implies that either line or column were negative.\n+            ErrorUtilities.VerifyThrow(combinedValue > -1, \"Use zero for unknown\");\n+\n+            // TODO store the last run's value and check if this is for the same file. If so, skip the dictionary lookup (tree walk).",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}