{
  "number": 5665,
  "title": "Use a counter instead of relying in XPathNodeIterator.Count",
  "body": "Solves #2051",
  "state": "MERGED",
  "createdAt": "2020-08-19T17:41:12Z",
  "updatedAt": "2021-04-28T18:49:56Z",
  "closedAt": "2020-08-28T15:48:08Z",
  "mergedAt": "2020-08-28T15:48:08Z",
  "additions": 21,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "patch-1",
  "isDraft": false,
  "author": {
    "login": "paulomorgado"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bc3bca5897c4d88099d8d7c09025bace33be0971",
          "message": "Use a counter instead of relying in XPathNodeIterator.Count\n\nSolves #2051",
          "committedDate": "2020-08-19T17:40:58Z",
          "author": {
            "name": "Paulo Morgado",
            "email": "470455+paulomorgado@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6c396ba0a730c3d68ed6c04962fe8de2e044fe7",
          "message": "Added unit test that fails in the old implementation and succeeds now.",
          "committedDate": "2020-08-20T20:39:33Z",
          "author": {
            "name": "Paulo Morgado",
            "email": "470455+paulomorgado@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Is it possible to add a unit test?",
        "createdAt": "2020-08-19T17:54:45Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Sure, @danmosemsft,\r\n\r\nThis was done right in GitHub. Adding a test will require a bit more work.\r\n\r\nWhere should I add the test?\r\n\r\nThis will be my first MSBuild Task unit test. Any model I can follow?\r\n",
        "createdAt": "2020-08-19T18:16:24Z",
        "author": {
          "login": "paulomorgado"
        }
      },
      {
        "body": "https://github.com/dotnet/msbuild/blob/f6739274e179fd1ecb7317b8fdc6a3e2c09b4ee0/src/Tasks.UnitTests/XmlPoke_Tests.cs",
        "createdAt": "2020-08-19T18:19:17Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Done!",
        "createdAt": "2020-08-19T20:06:44Z",
        "author": {
          "login": "paulomorgado"
        }
      },
      {
        "body": "I'll do the changes, they are out of scope, but I'll do them.\r\n\r\nDo you want Shouldly to be used on the entire test class or only on the added test method?",
        "createdAt": "2020-08-20T20:26:39Z",
        "author": {
          "login": "paulomorgado"
        }
      },
      {
        "body": "@paulomorgado Only the added test method.\r\n\r\nMuch appreciated!",
        "createdAt": "2020-08-20T20:30:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Done!",
        "createdAt": "2020-08-20T20:47:11Z",
        "author": {
          "login": "paulomorgado"
        }
      },
      {
        "body": "Thanks!",
        "createdAt": "2020-08-28T15:48:14Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nWe normally use Shouldly now:\r\n```suggestion\r\n            nodes.Count.ShouldBe(1, $\"There should be 1 <class /> element with an AccessModifier attribute {Environment.NewLine}{xmlDocument.OuterXml}\");\r\n```\r\n\r\n(And nodes also shouldn't be null, right?)",
              "createdAt": "2020-08-20T18:13:13Z",
              "path": "src/Tasks.UnitTests/XmlPoke_Tests.cs",
              "diffHunk": "@@ -111,6 +111,22 @@ public void PokeChildren()\n             Assert.Equal(\"Testing\", testNodes?.First().InnerText);\n         }\n \n+        [Fact]\n+        public void PokeAttributeWithCondition()\n+        {\n+            const string original = \"b\";\n+            const string value = \"x\";\n+            const string queryTemplate = \"/class/variable[@Name='{0}']/@Name\";\n+\n+            XmlDocument xmlDocument = ExecuteXmlPoke(query: string.Format(queryTemplate, original), value: value);\n+\n+            List<XmlAttribute> nodes = xmlDocument.SelectNodes(string.Format(queryTemplate, value))?.Cast<XmlAttribute>().ToList();\n+\n+            Assert.True(nodes?.Count == 1, $\"There should be 1 <class /> element with an AccessModifier attribute {Environment.NewLine}{xmlDocument.OuterXml}\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            nodes.First().Value.ShouldBe(value);\r\n```",
              "createdAt": "2020-08-20T18:14:18Z",
              "path": "src/Tasks.UnitTests/XmlPoke_Tests.cs",
              "diffHunk": "@@ -111,6 +111,22 @@ public void PokeChildren()\n             Assert.Equal(\"Testing\", testNodes?.First().InnerText);\n         }\n \n+        [Fact]\n+        public void PokeAttributeWithCondition()\n+        {\n+            const string original = \"b\";\n+            const string value = \"x\";\n+            const string queryTemplate = \"/class/variable[@Name='{0}']/@Name\";\n+\n+            XmlDocument xmlDocument = ExecuteXmlPoke(query: string.Format(queryTemplate, original), value: value);\n+\n+            List<XmlAttribute> nodes = xmlDocument.SelectNodes(string.Format(queryTemplate, value))?.Cast<XmlAttribute>().ToList();\n+\n+            Assert.True(nodes?.Count == 1, $\"There should be 1 <class /> element with an AccessModifier attribute {Environment.NewLine}{xmlDocument.OuterXml}\");\n+\n+            Assert.Equal(value, nodes?.First().Value);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}