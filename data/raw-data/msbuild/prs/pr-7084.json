{
  "number": 7084,
  "title": "Enable solution filtering with -graph option",
  "body": "Fixes #7058\r\n\r\n### Context\r\nSolution filters operate in MSBuild by modifying the list of projects that \"should build.\" This list is normally constructed in SolutionProjectGenerator, but for -graph builds, it's in GraphBuilder instead. This was hard to notice because it didn't actually cause a build failure because the slnf tries to get out of the way as quickly as it can when you try to build it, which meant the graph build simply built the full sln. This corrects the slnf filtering behavior with -graph.\r\n\r\n### Changes Made\r\nFilter the list of projects that \"should build\" when using -graph.\r\n\r\n### Testing\r\nI built MSBuild.dev.slnf before and after the change as well as with and without graph. Eyeballing it, there were about the same number of projects built with the change and -graph as without the change and without -graph. There were substantially more with -graph but without the change.",
  "state": "MERGED",
  "createdAt": "2021-11-24T23:52:06Z",
  "updatedAt": "2021-12-15T10:46:57Z",
  "closedAt": "2021-12-15T10:46:56Z",
  "mergedAt": "2021-12-15T10:46:56Z",
  "additions": 288,
  "deletions": 225,
  "changedFiles": 5,
  "headRefName": "slnf-with-graph",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f05af5d89ff74113a0833481d1b84ff0cc7262af",
          "message": "Respect solution filter's filtering",
          "committedDate": "2021-11-24T23:45:26Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a4373be661dccd39ee66316f7bbc3cb8c5380e1",
          "message": "Clarify test and move slnf tests to a single class",
          "committedDate": "2021-11-29T23:11:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a0831a4715b21eae003ae633b6250727e8fff724",
          "message": "Update src/Build.UnitTests/Construction/SolutionFilter_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-12-02T21:55:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d36fcf095c01413608fbaeead92355eca2a2cfb0",
          "message": "Use graph API in theory",
          "committedDate": "2021-12-09T00:04:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ceadbf1042f04476c479c01291f071dfe0ebf9f5",
          "message": "Add comment",
          "committedDate": "2021-12-13T23:29:28Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for fixing this!",
        "createdAt": "2021-11-25T00:46:29Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Seems to. I modified MSBuild.Dev.slnf to be:\r\n```\r\n{\r\n  \"solution\": {\r\n    \"path\": \"MSBuild.sln\",\r\n    \"projects\": [\r\n      \"src\\\\Build.OM.UnitTests\\\\Microsoft.Build.Engine.OM.UnitTests.csproj\",\r\n      \"src\\\\Build.UnitTests\\\\Microsoft.Build.Engine.UnitTests.csproj\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nand it built fine (including things other than M.B.E.OM.UT and M.B.E.UT).",
        "createdAt": "2021-11-29T18:20:30Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You\u2019ll need to leave this as-is until your change ships in a build used by Source Build right?",
              "createdAt": "2021-11-25T00:08:52Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "If Source Build gets this change in Build.props, wouldn't it also get the fix?",
              "createdAt": "2021-11-25T00:30:44Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah but source build doesn\u2019t use current MSBuild to build (as far as I know). I think it uses our build.cmd which uses a pretty recent version but will lag behind a little until this change is committed and inserted to VS and .NET SDK. Right?",
              "createdAt": "2021-11-25T00:36:18Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I know very little about source build, so I have no idea. Pushed the change \ud83d\ude42 Thanks!",
              "createdAt": "2021-11-25T00:38:31Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It looks like it runs `build.sh`:\r\nhttps://github.com/dotnet/msbuild/blob/764b54b73225a14353e2a1a10e72ae8febb779e0/eng/common/templates/steps/source-build.yml#L71\r\n\r\n`build.sh` installs the .NET SDK version based on what's in `global.json`:\r\nhttps://github.com/dotnet/msbuild/blob/764b54b73225a14353e2a1a10e72ae8febb779e0/eng/Versions.props#L34\r\n\r\nSo until we're using a version of .NET SDK with this change, we'll need to leave Static Graph restore off for Source Build.  Might be worth opening a tracking issue to do that if you haven't already.",
              "createdAt": "2021-11-25T00:45:59Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "The version of MSBuild used in source-build isn't directly controlled by our repo at all--it's a property of sourcebuild itself. The job that runs in our PR checks is only a simulation and I don't think it's sufficient on this front to be a good canary for when we're ready to remove this.",
              "createdAt": "2021-11-29T15:39:59Z",
              "path": "eng/Build.props",
              "diffHunk": "@@ -3,7 +3,7 @@\n <Project>\n \n   <PropertyGroup>\n-    <RestoreUseStaticGraphEvaluation Condition=\"'$(DotNetBuildFromSource)' != 'true'\">true</RestoreUseStaticGraphEvaluation>\n+    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n\r\n```",
              "createdAt": "2021-12-02T21:47:17Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,276 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Fact]\n+        public void SolutionFilterFiltersProjects()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it would be fairly difficult to understand why this test fails when it fails for only the graph case. Did you find that to be true when you ran this without the fix?\r\n\r\nThere's a bunch of setup code here so a totally separate test doesn't seem justified, but at the very least a `graphBuild: true/false` theory would help.",
              "createdAt": "2021-12-02T21:52:26Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,276 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Fact]\n+        public void SolutionFilterFiltersProjects()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"SimpleProject\"\", \"\"SimpleProject\\SimpleProject.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"ClassLibrary\"\", \"\"..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|Any CPU = Debug|Any CPU\n+                            Release|Any CPU = Release|Any CPU\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, \"solutionFilter.slnf\",\n+                    @\"\n+                {\n+                  \"\"solution\"\": {\n+                    // I'm a comment\n+                    \"\"path\"\": \"\".\\\\SimpleProject\\\\SimpleProject.sln\"\",\n+                    \"\"projects\"\": [\n+                    /* \"\"..\\\\ClassLibrary\\\\ClassLibrary\\\\ClassLibrary.csproj\"\", */\n+                      \"\"SimpleProject\\\\SimpleProject.csproj\"\",\n+                    ]\n+                    }\n+                }\n+                \");\n+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));\n+                SolutionFile solution = SolutionFile.Parse(filterFile.Path);\n+                ILoggingService mockLogger = CreateMockLoggingService();\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);\n+                instances.ShouldHaveSingleItem();\n+\n+                // Check that dependencies are built, and non-dependencies in the .sln are not.\n+                MockLogger logger = new(output);\n+                instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n+                logger.AssertLogContains(new string[] { \"SimpleProjectBuilt\" });\n+                logger.AssertLogDoesntContain(\"ClassLibraryBuilt\");\n+\n+                // Test that the same works for graph builds\n+                string log = RunnerUtilities.ExecMSBuild(filterFile.Path + \" -graph\", out bool success);\n+                success.ShouldBeTrue();\n+                log.ShouldContain(\"SimpleProjectBuilt\");\n+                log.ShouldNotContain(\"ClassLibraryBuild\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I was waffling on this a little. We have some tests in the theory model and some more like this where, after setting up, it runs multiple tests in a row on the same thing. I thought this was more appropriate for the latter because most of it is boring setup. It's hard for me to say how debuggable it is when I know the answer ahead of time. My first priority is getting something that will fail if someone breaks this. I honestly doubt anyone other than me will be trying to debug this in the near future...",
              "createdAt": "2021-12-02T22:00:54Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,276 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Fact]\n+        public void SolutionFilterFiltersProjects()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"SimpleProject\"\", \"\"SimpleProject\\SimpleProject.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"ClassLibrary\"\", \"\"..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|Any CPU = Debug|Any CPU\n+                            Release|Any CPU = Release|Any CPU\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, \"solutionFilter.slnf\",\n+                    @\"\n+                {\n+                  \"\"solution\"\": {\n+                    // I'm a comment\n+                    \"\"path\"\": \"\".\\\\SimpleProject\\\\SimpleProject.sln\"\",\n+                    \"\"projects\"\": [\n+                    /* \"\"..\\\\ClassLibrary\\\\ClassLibrary\\\\ClassLibrary.csproj\"\", */\n+                      \"\"SimpleProject\\\\SimpleProject.csproj\"\",\n+                    ]\n+                    }\n+                }\n+                \");\n+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));\n+                SolutionFile solution = SolutionFile.Parse(filterFile.Path);\n+                ILoggingService mockLogger = CreateMockLoggingService();\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);\n+                instances.ShouldHaveSingleItem();\n+\n+                // Check that dependencies are built, and non-dependencies in the .sln are not.\n+                MockLogger logger = new(output);\n+                instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n+                logger.AssertLogContains(new string[] { \"SimpleProjectBuilt\" });\n+                logger.AssertLogDoesntContain(\"ClassLibraryBuilt\");\n+\n+                // Test that the same works for graph builds\n+                string log = RunnerUtilities.ExecMSBuild(filterFile.Path + \" -graph\", out bool success);\n+                success.ShouldBeTrue();\n+                log.ShouldContain(\"SimpleProjectBuilt\");\n+                log.ShouldNotContain(\"ClassLibraryBuild\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why does this invoke `msbuild.exe` rather than using the API like the one above does?",
              "createdAt": "2021-12-02T21:53:56Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,276 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Fact]\n+        public void SolutionFilterFiltersProjects()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"SimpleProject\"\", \"\"SimpleProject\\SimpleProject.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"ClassLibrary\"\", \"\"..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|Any CPU = Debug|Any CPU\n+                            Release|Any CPU = Release|Any CPU\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, \"solutionFilter.slnf\",\n+                    @\"\n+                {\n+                  \"\"solution\"\": {\n+                    // I'm a comment\n+                    \"\"path\"\": \"\".\\\\SimpleProject\\\\SimpleProject.sln\"\",\n+                    \"\"projects\"\": [\n+                    /* \"\"..\\\\ClassLibrary\\\\ClassLibrary\\\\ClassLibrary.csproj\"\", */\n+                      \"\"SimpleProject\\\\SimpleProject.csproj\"\",\n+                    ]\n+                    }\n+                }\n+                \");\n+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));\n+                SolutionFile solution = SolutionFile.Parse(filterFile.Path);\n+                ILoggingService mockLogger = CreateMockLoggingService();\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);\n+                instances.ShouldHaveSingleItem();\n+\n+                // Check that dependencies are built, and non-dependencies in the .sln are not.\n+                MockLogger logger = new(output);\n+                instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n+                logger.AssertLogContains(new string[] { \"SimpleProjectBuilt\" });\n+                logger.AssertLogDoesntContain(\"ClassLibraryBuilt\");\n+\n+                // Test that the same works for graph builds\n+                string log = RunnerUtilities.ExecMSBuild(filterFile.Path + \" -graph\", out bool success);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Using the API is better, but this was something I mostly knew how to do already. If you feel strongly, I can try to figure out the graph API. I would guesstimate an hour or two.",
              "createdAt": "2021-12-02T22:02:48Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,276 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Fact]\n+        public void SolutionFilterFiltersProjects()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"SimpleProject\"\", \"\"SimpleProject\\SimpleProject.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"ClassLibrary\"\", \"\"..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|Any CPU = Debug|Any CPU\n+                            Release|Any CPU = Release|Any CPU\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, \"solutionFilter.slnf\",\n+                    @\"\n+                {\n+                  \"\"solution\"\": {\n+                    // I'm a comment\n+                    \"\"path\"\": \"\".\\\\SimpleProject\\\\SimpleProject.sln\"\",\n+                    \"\"projects\"\": [\n+                    /* \"\"..\\\\ClassLibrary\\\\ClassLibrary\\\\ClassLibrary.csproj\"\", */\n+                      \"\"SimpleProject\\\\SimpleProject.csproj\"\",\n+                    ]\n+                    }\n+                }\n+                \");\n+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));\n+                SolutionFile solution = SolutionFile.Parse(filterFile.Path);\n+                ILoggingService mockLogger = CreateMockLoggingService();\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(solution, null, null, _buildEventContext, mockLogger);\n+                instances.ShouldHaveSingleItem();\n+\n+                // Check that dependencies are built, and non-dependencies in the .sln are not.\n+                MockLogger logger = new(output);\n+                instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n+                logger.AssertLogContains(new string[] { \"SimpleProjectBuilt\" });\n+                logger.AssertLogDoesntContain(\"ClassLibraryBuilt\");\n+\n+                // Test that the same works for graph builds\n+                string log = RunnerUtilities.ExecMSBuild(filterFile.Path + \" -graph\", out bool success);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please at least comment that it's sufficient to construct the graph and it doesn't require building it.",
              "createdAt": "2021-12-13T22:56:51Z",
              "path": "src/Build.UnitTests/Construction/SolutionFilter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,286 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Exceptions;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Graph;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Engine.UnitTests.Construction\n+{\n+    public class SolutionFilter_Tests : IDisposable\n+    {\n+        private readonly ITestOutputHelper output;\n+\n+        private static readonly BuildEventContext _buildEventContext = new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0);\n+\n+        public SolutionFilter_Tests(ITestOutputHelper output)\n+        {\n+            this.output = output;\n+        }\n+\n+        public void Dispose()\n+        {\n+            ProjectCollection.GlobalProjectCollection.UnloadAllProjects();\n+        }\n+\n+        /// <summary>\n+        /// Test that a solution filter file excludes projects not covered by its list of projects or their dependencies.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SolutionFilterFiltersProjects(bool graphBuild)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFolder classLibSubFolder = testEnvironment.CreateFolder(Path.Combine(classLibFolder.Path, \"ClassLibrary\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibSubFolder, \"ClassLibrary.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"ClassLibraryTarget\"\">\n+                      <Message Text=\"\"ClassLibraryBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFolder simpleProjectSubFolder = testEnvironment.CreateFolder(Path.Combine(simpleProjectFolder.Path, \"SimpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectSubFolder, \"SimpleProject.csproj\",\n+                    @\"<Project DefaultTargets=\"\"SimpleProjectTarget\"\">\n+                  <Target Name=\"\"SimpleProjectTarget\"\">\n+                      <Message Text=\"\"SimpleProjectBuilt\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(simpleProjectFolder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"SimpleProject\"\", \"\"SimpleProject\\SimpleProject.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"ClassLibrary\"\", \"\"..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|Any CPU = Debug|Any CPU\n+                            Release|Any CPU = Release|Any CPU\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|Any CPU.Build.0 = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n+                            {06A4DD1B-5027-41EF-B72F-F586A5A83EA5}.Release|Any CPU.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+                TransientTestFile filterFile = testEnvironment.CreateFile(folder, \"solutionFilter.slnf\",\n+                    @\"\n+                {\n+                  \"\"solution\"\": {\n+                    // I'm a comment\n+                    \"\"path\"\": \"\".\\\\SimpleProject\\\\SimpleProject.sln\"\",\n+                    \"\"projects\"\": [\n+                    /* \"\"..\\\\ClassLibrary\\\\ClassLibrary\\\\ClassLibrary.csproj\"\", */\n+                      \"\"SimpleProject\\\\SimpleProject.csproj\"\",\n+                    ]\n+                    }\n+                }\n+                \");\n+                Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));\n+                if (graphBuild)\n+                {\n+                    ProjectCollection projectCollection = testEnvironment.CreateProjectCollection().Collection;\n+                    MockLogger logger = new();\n+                    logger.Verbosity = LoggerVerbosity.Diagnostic;\n+                    projectCollection.RegisterLogger(logger);\n+                    ProjectGraphEntryPoint entryPoint = new(filterFile.Path, new Dictionary<string, string>());\n+                    ProjectGraph graphFromSolution = new(entryPoint, projectCollection);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}