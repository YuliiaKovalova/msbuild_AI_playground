{
  "number": 11254,
  "title": "removing the conflicting assembly",
  "body": "Fixes https://github.com/microsoft/azure-pipelines-tasks/issues/20734?reload=1?reload=1\r\n\r\n### Context\r\nThis is a hopefully temporary rollback due to the assembly collision in Microsoft.IO.Redist \r\n\r\n### Changes Made\r\nRemoved the conflicting dependency.\r\n\r\n### Testing\r\nExisting tests.\r\n\r\n### Notes\r\nWe have a proper fix here: https://github.com/microsoft/azure-pipelines-tasks-common-packages/pull/422\r\nHowever since this change is breaking a lot of people, we're doing this as an interim-patch.\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-10T14:13:55Z",
  "updatedAt": "2025-01-13T09:25:09Z",
  "closedAt": "2025-01-13T09:25:07Z",
  "mergedAt": "2025-01-13T09:25:07Z",
  "additions": 3,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "AZDO-assembly-collision",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0b6af783bca8e36f482d0abcaba7684885c20288",
          "message": "removing the conflicting assembly",
          "committedDate": "2025-01-10T14:27:11Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've worked with @surayya-MS  and @JanProvaznik to check if this is enough to remove the assembly conflict. It appears that this should be sufficient. The current main branch silently fails in windows powershell and works with this change when using the test script \r\n```\r\n\r\n\t$Architecture = 'x64'\r\n \r\n\t$Path = \"D:\\bld\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\"\r\n\t$msUtilities = [System.Reflection.Assembly]::LoadFrom($Path)\r\n\r\n\t[type]$t = $msUtilities.GetType('Microsoft.Build.Utilities.ToolLocationHelper')\r\n\tif ($t -ne $null) \r\n\t{\r\n\t\t[System.Reflection.MethodInfo] $mi = $t.GetMethod(\"GetPathToBuildToolsFile\",[type[]]@( [string], [string], $msUtilities.GetType(\"Microsoft.Build.Utilities.DotNetFrameworkArchitecture\") ))\r\n\r\n\t$param3 = $mi.GetParameters()[2]\r\n\t\t$archValues = [System.Enum]::GetValues($param3. ParameterType)\r\n\r\n\r\n\t[object] $archValue = $null\r\n\t\t\tif ($Architecture -eq 'x86') {\r\n\t\t\t\t$archValue = $archValues.GetValue(1) # DotNetFrameworkArchitecture.Bitness32\r\n\t\t\t} elseif ($Architecture -eq 'x64') {\r\n\t\t\t\t$archValue = $archValues.GetValue(2) # DotNetFrameworkArchitecture.Bitness64\r\n\t\t\t} else {\r\n\t\t\t\t$archValue = $archValues.GetValue(1) # DotNetFrameworkArchitecture.Bitness32\r\n\t\t\t}\r\n\t\t#Write-Host \"archValue = $archValue\"\r\n\r\n\t$msBuildPath = $mi.Invoke($null, @( 'msbuild.exe', '17.0', $archValue ))\r\n\t\t$msBuildPath\r\n\t}\r\n\r\n```\r\n\r\nI've also started exp insertion recommended by @YuliiaKovalova, unless this PR is urgent-urgent I would prefer to wait with the merge until it finishes.\r\n",
        "createdAt": "2025-01-10T16:10:08Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}