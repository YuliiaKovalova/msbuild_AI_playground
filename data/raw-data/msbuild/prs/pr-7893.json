{
  "number": 7893,
  "title": "Specialcase UAP == windows",
  "body": "Fixes #6150\r\n\r\n### Context\r\nWe verify that the target platform is appropriate for the target platform identifier, but that check is too specific; it doesn't permit equivalent strings from matching. So far, we only know of UAP being a windows app, hence valid for windows. This fixes that instance.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\nTried to reproduce this with and without this change. The error changed, and I don't think it's related, but I'm keeping this a draft PR anyway because I'm not confident about this.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-08-17T23:40:06Z",
  "updatedAt": "2022-10-06T16:42:06Z",
  "closedAt": "2022-10-06T16:42:05Z",
  "mergedAt": "2022-10-06T16:42:05Z",
  "additions": 33,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "accept-uap-",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b0cf7e2d2bf6b06e8bfd6968c5938030d186d544",
          "message": "Specialcase UAP",
          "committedDate": "2022-08-17T23:26:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5cb2706669101a29c07dfb9dacde3440d5a45b65",
          "message": "Use dictionary to hold aliases",
          "committedDate": "2022-08-23T22:47:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3730ec805a1c1d4a91d9b960d30e0726127d6b63",
          "message": "Add unit test",
          "committedDate": "2022-08-25T20:48:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c6db320ad3dcdf742e33d314cf9dbd2d0154e69",
          "message": "Give variables names",
          "committedDate": "2022-08-25T20:50:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "535884288a6a8a0389aced16a00ca24fa09eccd0",
          "message": "PR comment",
          "committedDate": "2022-08-30T23:32:02Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24bb1cc2ef0f7d7bd3022036f85c1e413a2f8e6c",
          "message": "PR comment",
          "committedDate": "2022-09-13T17:32:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "067fd13ae3dd71051fa3bfd9fc842912e9b45c1c",
          "message": "Revert CreateItem change",
          "committedDate": "2022-09-13T18:37:10Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "756bc3c338b84906ca03f29d7c67ffd13e4a3b57",
          "message": "Update src/Tasks/ResolveSDKReference.cs\n\nCo-authored-by: Nirmal Guru <Nirmal4G@ymail.com>",
          "committedDate": "2022-09-21T19:56:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@BenVillalobos pointed out how I was being stupid with testing, and I verified this made the error go away \ud83d\ude42",
        "createdAt": "2022-08-18T17:51:25Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd create a hashset of `supportedAliases` or something akin to that. Then we can comment next to the variable a link to the issue, and this new bit of code will be self-documenting.",
              "createdAt": "2022-08-18T22:25:47Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Actually, a dictionary <string,string> might make more sense.  `if (string.Equals(TargetPlatform, supportedAliases[TargetPlatform])`, this way we can directly map windows to UAP.\r\n\r\nMy priority in this case would be clarity + potential future cases similar to this, though admittedly I'm not 100% sure how often it would happen so I could be over-engineering.\r\n\r\nEither way we should link back to this PR/issue.",
              "createdAt": "2022-08-18T22:30:12Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I would consider making a local function so you can be a bit more verbose.",
              "createdAt": "2022-08-22T14:19:08Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I made a dictionary. I don't think it's quite as nice as just doing the string comparisons for just one alias, but if we have multiple, it starts to be clearer.",
              "createdAt": "2022-08-23T22:47:59Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                if (!String.IsNullOrEmpty(TargetPlatform) && !string.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !string.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))\r\n```\r\n\r\nnit",
              "createdAt": "2022-08-18T22:30:58Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I agree, but I did it this way intentionally because the rest of the file uses String, and I didn't want to change everything or stand out.",
              "createdAt": "2022-08-19T00:05:05Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1251,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!String.Equals(\"UAP\", TargetPlatform, StringComparison.OrdinalIgnoreCase) || !String.Equals(targetPlatformIdentifier, \"windows\", StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                if (!String.IsNullOrEmpty(TargetPlatform) && (!String.Equals(targetPlatformIdentifier, TargetPlatform) || (platformAliases.TryGetValue(TargetPlatform, out string platform) && !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase))))\r\n```\r\n\r\nThis reads easier to me. Even if this isn't preferred: If trygetvalue returned false, why bother checking if platform == TPI?",
              "createdAt": "2022-08-24T18:46:15Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1259,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!platformAliases.TryGetValue(TargetPlatform, out string platform) || !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "If TargetPlatform is not null or empty, and it isn't the same as targetPlatformIdentifier, and it isn't the same as the aliased version, we should fail.\r\n\r\nYour version says that if TargetPlatform is not null or empty, and it _is_ the same as targetPlatformIdentifier, but it's also in the dictionary and the aliased version is not the same, then we should fail, and that isn't true. Similarly, with your version, if TargetPlatform is not null or empty, and it's different from targetPlatformIdentifier, then we don't bother checking the dictionary, and we fail, which again is not what we want.",
              "createdAt": "2022-08-24T18:55:49Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1259,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!platformAliases.TryGetValue(TargetPlatform, out string platform) || !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "AH my bad, this is the **failing case**, not the continuing case.",
              "createdAt": "2022-08-24T22:12:42Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1259,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!platformAliases.TryGetValue(TargetPlatform, out string platform) || !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Added a unit test \ud83d\ude42",
              "createdAt": "2022-08-25T20:49:41Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1251,7 +1259,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n                     AddResolutionWarning(\"ResolveSDKReference.MaxPlatformVersionNotSpecified\", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());\n                 }\n \n-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))\n+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!platformAliases.TryGetValue(TargetPlatform, out string platform) || !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand this test and it doesn't look like the other tests. Can you clarify what it's testing?",
              "createdAt": "2022-08-26T14:51:24Z",
              "path": "src/Tasks.UnitTests/ResolveSDKReference_Tests.cs",
              "diffHunk": "@@ -4202,6 +4203,27 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()\n             }\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void VerifyPlatformAliasesWork()\n+        {\n+            SDKReference reference = new(new TaskItem(\"sdkReference\", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, \"UAP\" } }), \"sdkName\", \"1.0.2\");\n+            reference.Resolve(\n+                new Dictionary<string, ITaskItem>() { { \"sdkName, Version=1.0.2\", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { \"PlatformVersion\", \"1.0.2\" } }) } },\n+                \"Release\",\n+                \"x64\",\n+                new HashSet<string>() { \"sdkName\" },\n+                treatErrorsAsWarnings: false,\n+                prefer32Bit: false,\n+                \"windows\",\n+                new Version(\"1.0.2\"),\n+                \"projectName\",\n+                enableMaxPlatformVersionEmptyWarning: true);\n+\n+            reference.ResolutionErrors.ShouldBeEmpty();\n+            reference.ResolutionWarnings.ShouldBeEmpty();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If it understands the idea of aliases, it should be able to resolve the SDK reference without warnings or errors. This is a pretty barebones version, so most of the parameters end up taking default values, but it hits the one that led to this particular issue.",
              "createdAt": "2022-08-30T22:00:56Z",
              "path": "src/Tasks.UnitTests/ResolveSDKReference_Tests.cs",
              "diffHunk": "@@ -4202,6 +4203,27 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()\n             }\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void VerifyPlatformAliasesWork()\n+        {\n+            SDKReference reference = new(new TaskItem(\"sdkReference\", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, \"UAP\" } }), \"sdkName\", \"1.0.2\");\n+            reference.Resolve(\n+                new Dictionary<string, ITaskItem>() { { \"sdkName, Version=1.0.2\", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { \"PlatformVersion\", \"1.0.2\" } }) } },\n+                \"Release\",\n+                \"x64\",\n+                new HashSet<string>() { \"sdkName\" },\n+                treatErrorsAsWarnings: false,\n+                prefer32Bit: false,\n+                \"windows\",\n+                new Version(\"1.0.2\"),\n+                \"projectName\",\n+                enableMaxPlatformVersionEmptyWarning: true);\n+\n+            reference.ResolutionErrors.ShouldBeEmpty();\n+            reference.ResolutionWarnings.ShouldBeEmpty();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Can you call out via comment in the test code the relevant features of the test? That way it's less mysterious if it starts failing. Like here I think it's that in line 4210 UAP isn't a \"real\" platform but it should be aliased to \"Windows\" anyway?\r\n\r\nAlso, is there an assert you can apply to the resolution of the alias?",
              "createdAt": "2022-09-08T15:51:17Z",
              "path": "src/Tasks.UnitTests/ResolveSDKReference_Tests.cs",
              "diffHunk": "@@ -4202,6 +4203,27 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()\n             }\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void VerifyPlatformAliasesWork()\n+        {\n+            SDKReference reference = new(new TaskItem(\"sdkReference\", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, \"UAP\" } }), \"sdkName\", \"1.0.2\");\n+            reference.Resolve(\n+                new Dictionary<string, ITaskItem>() { { \"sdkName, Version=1.0.2\", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { \"PlatformVersion\", \"1.0.2\" } }) } },\n+                \"Release\",\n+                \"x64\",\n+                new HashSet<string>() { \"sdkName\" },\n+                treatErrorsAsWarnings: false,\n+                prefer32Bit: false,\n+                \"windows\",\n+                new Version(\"1.0.2\"),\n+                \"projectName\",\n+                enableMaxPlatformVersionEmptyWarning: true);\n+\n+            reference.ResolutionErrors.ShouldBeEmpty();\n+            reference.ResolutionWarnings.ShouldBeEmpty();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Unlikely to matter in this case but for cleanliness:\r\n\r\n```suggestion\r\n        private static readonly Dictionary<string, string> PlatformAliases = new(StringComparer.OrdinalIgnoreCase)\r\n```",
              "createdAt": "2022-08-26T14:52:08Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -25,6 +25,14 @@ public class ResolveSDKReference : TaskExtension\n     {\n         #region fields\n \n+        /// <summary>\n+        /// Platform aliases\n+        /// </summary>\n+        private static Dictionary<string, string> platformAliases = new(StringComparer.OrdinalIgnoreCase)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "?",
              "createdAt": "2022-09-13T18:11:59Z",
              "path": "src/Tasks.UnitTests/CreateItem_Tests.cs",
              "diffHunk": "@@ -154,7 +154,7 @@ public void WildcardsWithRecursiveDir()\n             ObjectModelHelpers.DeleteTempProjectDirectory();\n \n             ObjectModelHelpers.CreateFileInTempProjectDirectory(\"Myapp.proj\", @\"\n-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                <Project ToolsVersionresol=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Not sure how that crept in; will revert.",
              "createdAt": "2022-09-13T18:36:47Z",
              "path": "src/Tasks.UnitTests/CreateItem_Tests.cs",
              "diffHunk": "@@ -154,7 +154,7 @@ public void WildcardsWithRecursiveDir()\n             ObjectModelHelpers.DeleteTempProjectDirectory();\n \n             ObjectModelHelpers.CreateFileInTempProjectDirectory(\"Myapp.proj\", @\"\n-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                <Project ToolsVersionresol=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't do quite what I was thinking--is there no way to assert the uap/windows releationship?",
              "createdAt": "2022-09-13T18:13:54Z",
              "path": "src/Tasks.UnitTests/ResolveSDKReference_Tests.cs",
              "diffHunk": "@@ -4202,6 +4203,29 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()\n             }\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void VerifyPlatformAliasesWork()\n+        {\n+            // This verifies that UAP is an alias for windows, so verifying the target platforms align. Other parts of the reference don't matter here.\n+            SDKReference reference = new(new TaskItem(\"sdkReference\", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, \"UAP\" } }), \"sdkName\", \"1.0.2\");\n+            reference.Resolve(\n+                new Dictionary<string, ITaskItem>() { { \"sdkName, Version=1.0.2\", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { \"PlatformVersion\", \"1.0.2\" } }) } },\n+                \"Release\",\n+                \"x64\",\n+                new HashSet<string>() { \"sdkName\" },\n+                treatErrorsAsWarnings: false,\n+                prefer32Bit: false,\n+                \"windows\",\n+                new Version(\"1.0.2\"),\n+                \"projectName\",\n+                enableMaxPlatformVersionEmptyWarning: true);\n+\n+            reference.ResolutionErrors.ShouldBeEmpty();\n+            reference.ResolutionWarnings.ShouldBeEmpty();\n+            reference.TargetPlatform.ShouldBe(\"UAP\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Windows is passed in as a thing to compare against; it isn't part of the resolution. So no.",
              "createdAt": "2022-09-13T18:36:06Z",
              "path": "src/Tasks.UnitTests/ResolveSDKReference_Tests.cs",
              "diffHunk": "@@ -4202,6 +4203,29 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()\n             }\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void VerifyPlatformAliasesWork()\n+        {\n+            // This verifies that UAP is an alias for windows, so verifying the target platforms align. Other parts of the reference don't matter here.\n+            SDKReference reference = new(new TaskItem(\"sdkReference\", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, \"UAP\" } }), \"sdkName\", \"1.0.2\");\n+            reference.Resolve(\n+                new Dictionary<string, ITaskItem>() { { \"sdkName, Version=1.0.2\", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { \"PlatformVersion\", \"1.0.2\" } }) } },\n+                \"Release\",\n+                \"x64\",\n+                new HashSet<string>() { \"sdkName\" },\n+                treatErrorsAsWarnings: false,\n+                prefer32Bit: false,\n+                \"windows\",\n+                new Version(\"1.0.2\"),\n+                \"projectName\",\n+                enableMaxPlatformVersionEmptyWarning: true);\n+\n+            reference.ResolutionErrors.ShouldBeEmpty();\n+            reference.ResolutionWarnings.ShouldBeEmpty();\n+            reference.TargetPlatform.ShouldBe(\"UAP\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            { \"UAP\", \"Windows\" }\r\n```",
              "createdAt": "2022-09-19T15:06:42Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -25,6 +25,14 @@ public class ResolveSDKReference : TaskExtension\n     {\n         #region fields\n \n+        /// <summary>\n+        /// Platform aliases\n+        /// </summary>\n+        private static readonly Dictionary<string, string> PlatformAliases = new(StringComparer.OrdinalIgnoreCase)\n+        {\n+            { \"UAP\", \"windows\" }",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Although I'll admit that looks nicer, lower-case windows is what the string actually is, so this adds a layer of complexity to the check I'd like to avoid.",
              "createdAt": "2022-09-19T18:43:43Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -25,6 +25,14 @@ public class ResolveSDKReference : TaskExtension\n     {\n         #region fields\n \n+        /// <summary>\n+        /// Platform aliases\n+        /// </summary>\n+        private static readonly Dictionary<string, string> PlatformAliases = new(StringComparer.OrdinalIgnoreCase)\n+        {\n+            { \"UAP\", \"windows\" }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, The `TargetPlatformIdentifier` is `Windows`, even in Windows XAML targets and in the Windows SDK targets. I can confirm. And besides, you're ignoring case, so it doesn't really matter.",
              "createdAt": "2022-09-19T18:59:24Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -25,6 +25,14 @@ public class ResolveSDKReference : TaskExtension\n     {\n         #region fields\n \n+        /// <summary>\n+        /// Platform aliases\n+        /// </summary>\n+        private static readonly Dictionary<string, string> PlatformAliases = new(StringComparer.OrdinalIgnoreCase)\n+        {\n+            { \"UAP\", \"windows\" }",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}