{
  "number": 8965,
  "title": "Issue 8963",
  "body": "Updated `SolutionFile.cs`\r\n\r\nUpdated the `SolutionFile.FullPath` property to have a `public` getter and an `internal` setter.  Since, now the property is part of a publicly-exposed API, reworked the XML documentation for the property as well.  Suggest updating the Microsoft Learn docs accordingly.\r\n\r\nUpdated the `SolutionFile.SolutionFileDirectory` property to have a `public` getter and an `internal` setter.  I also added XML documentation configuration for the property, since, now, it is part of a publicly-exposed API.  Suggest updating the Microsoft Learn docs accordingly.\r\n\r\nThis was done because it is a best practice to expose the fully-qualified pathname of a Solution file after it's been parsed.  In my mind, there is no risk of programs reading the value of the property ",
  "state": "CLOSED",
  "createdAt": "2023-06-27T17:22:13Z",
  "updatedAt": "2023-07-12T20:31:10Z",
  "closedAt": "2023-07-12T20:31:10Z",
  "mergedAt": null,
  "additions": 41,
  "deletions": 10,
  "changedFiles": 1,
  "headRefName": "issue-8963",
  "isDraft": false,
  "author": {
    "login": "astrohart"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2fd8caece0676e8f536e2e5b85a58dad4e9aa607",
          "message": "Fixed #8963\n\n--\nUpdated the SolutionFile.FullPath property to have a public getter and an internal setter.  Since, now the property is part of a publicly-exposed API, reworked the XML documentation for the property as well.\n\nUpdated the SolutionFile.SolutionFileDirectory property to have a public getter and an internal setter.  I also added XML documentation configuration for it.",
          "committedDate": "2023-06-27T17:11:57Z",
          "author": {
            "name": "Brian Hart",
            "email": "brian.hart@xylogix.net"
          }
        }
      },
      {
        "commit": {
          "oid": "aaf2c5fbedd719f3a2ad29fb2f90a12254018fae",
          "message": "Update SolutionFile.cs\n\n* Updated the setter of the `SolutionFile.FullPath` property to only set the value of the `SolutionFile.SolutionFileDirectory` property if, and only if, the `_solutionFile` field has a non-blank and non-NULL value and actually contains the pathname of a file that exists on the disk, and contains a pathname that has a .sln or .slnf extension.\n\nNot doing input-validation is a CVE (cyber vulnerability)! We should verify that our variables actually contain the data that we assume they contain, rather than just assuming, before we work with them or set other variables, IMHO.",
          "committedDate": "2023-06-27T17:21:42Z",
          "author": {
            "name": "Brian Hart",
            "email": "brian.hart@xylogix.net"
          }
        }
      },
      {
        "commit": {
          "oid": "8df0cda09a8e2af9b2fe810ad146f6c4d501a8d4",
          "message": "Update SolutionFile.cs\n\nRemoved prefix from `cref` XML tag on line 195 per style guide.",
          "committedDate": "2023-07-03T23:59:11Z",
          "author": {
            "name": "Brian",
            "email": "brian.hart@xylogix.net"
          }
        }
      },
      {
        "commit": {
          "oid": "fcb1472a03029d92d75738c230159d3b86cdf0bd",
          "message": "Update SolutionFile.cs\n\nPut braces in the `if` branch on line 224.   Removed the cref prefix in the XML tag on line 256.  Remove the apostrophe from \"Solution's\" in line 257.",
          "committedDate": "2023-07-04T00:01:58Z",
          "author": {
            "name": "Brian",
            "email": "brian.hart@xylogix.net"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I am making Submissions in the course of work for my employer (or my employer has intellectual property rights in my Submissions by contract or applicable law). I have permission from my employer to make Submissions and enter into this Agreement on behalf of my employer. By signing below, the defined term \u201cYou\u201d includes me and my employer.\r\n\r\n@dotnet-policy-service agree [company=\"xyLOGIX, LLC\"]",
        "createdAt": "2023-06-27T17:23:19Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "@dotnet-policy-service agree company=\"xyLOGIX, LLC\"",
        "createdAt": "2023-06-27T17:24:12Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> As mentioned in the issue, SolutionFile is MSBuild's way of understanding solution files; it isn't the \"canonical\" solution parser, nor is it really intended to be used extensively outside of MSBuild. Parts are used by other teams, but we've historically been somewhat hesitant to extend that usage too much. I'd rather not take this PR. From the scenario you described, it sounds like it would be fairly easy to pass the path along with the `SolutionFile`. You could even make a struct to hold them more cleanly.\r\n\r\n@Forgind Fair points but forgive me, but isn't this a quick change and really low impact?  I would respectfully request to merge the code since it seems very intuitive and useful from my standpoint.  Also, did you notice I updated the `FullPath` property's setter to be more robust, by doing some input validation?\r\n\r\nIf you can merge this PR I think it would increase the effectiveness and usability of the `SolutionFile` class.",
        "createdAt": "2023-06-28T22:26:54Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "Looks like checks are currently snarled in some random style stuff. I'm kinda curious whether they'd pass or not; I know we have cases in which project files do _not_ exist but should be treated as if they were legitimate, but I don't think we have anything similar for solution files? I'd want validation on that, though.",
        "createdAt": "2023-06-29T00:08:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Looks like checks are currently snarled in some random style stuff. I'm kinda curious whether they'd pass or not; I know we have cases in which project files do _not_ exist but should be treated as if they were legitimate, but I don't think we have anything similar for solution files. I'd want validation on that, though.\r\n\r\nGreat points, but as someone with a physics and a military background, part of my focus as a coding professional is to work for the military-industrial complex, and other industry sectors that demand a high level of robustness and fault tolerance.  As a PhD astrophysicist and former US Navy Cyber Warfare Engineer, I am asked to write \"superrobust\" code.  As to files existing or not, that is pretty much a given, and ordinarily not the case where you would normally have to worry about that.  As a cosmologist (an astrophysicist who specializes in the study and the evolution of the universe) I was made aware, during my PhD, of things called [single-event upsets](https://www.youtube.com/watch?v=333-KCJEt-s) occur.  This is due to particles of matter and energy continually streaming down upon the Earth from astrophysical sources...and the circuitry in a computer chip is now at the scale of close to the size of one or multiple atoms.   Including the CPU registers.  Now, why is this important?  SEUs can make a CPU register or bit of RAM or what have you, have a value other than what you'd expect.  In superrobust programming that i do for a living, they tell us to basically, be as paranoid as hell.  As a programmer, before I perform any operation, I validate the current state of the machine.  A single bit error caused by a SEU would serve to make the result of `File.Exists` to be `false` when it should be `true`, or vice-versa.  I also check the output values of methods I call.  And, it's entirely possible that the user, another user, or another process (such as an anti-virus) can come in, and delete a `.csproj` file or a `.sln` file while the code that uses `SolutionFile` is executing.\r\n\r\nI firmly believe, in my heart of hearts, that whenever we write libraries, such as what `SolutionFile` is suitable for, in my paranoid brain, \"the project file is always going to exist\" is an _assumption_ about an _enabler_ (something outside the code on which the code depends in order to work properly) always being available, when, in my mind, you have no way of knowing that for sure.  \r\n\r\nBasically, i am saying, in my line of work, for writing the application software that I want to have depend on `SolutionFile`, I need to be able to check the existence of the file before using it, and several times during the lifecycle of the application, from the `SolutionFile` instance.  I also work with several `SolutionFile`s and I need to be able to identify who parsed what file. \r\n\r\nI am sure there are others out there who could benefit from my PR, as well.  Finally, I think it is just architecture best-practice...if you have an object that parsed a file to get its contents, users of the object may work with a collection of them, and may wish to know exactly which file it is, which object instance was parsed from.\r\n\r\nCan you _please_ merge this PR, so I can have a `FullPath` property exposed to me?  I guess I do not understand the reluctance to approve this PR.  It's blindingly obvious to me that this is a good, and proper, change.",
        "createdAt": "2023-07-03T23:55:20Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "I have updated the PR.  I strongly suggest this PR makes for user-friendly, robust, and fault-tolerant code that can be used in production-level environments, where reliability and mission-criticality are important factors.",
        "createdAt": "2023-07-04T00:04:44Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "As we mentioned in the bug we don't think adding this functionality to MSBuild is a good path forward, since it is not a general-purpose solution parser.",
        "createdAt": "2023-07-12T20:27:15Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}