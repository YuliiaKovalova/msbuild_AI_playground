{
  "number": 10508,
  "title": "Revert \"Revert Emit eval props if requested by any sink (#10243)\"",
  "body": "Reverts dotnet/msbuild#10447\r\nReintroduces changes from #10243\r\nFixes #10225\r\n\r\n### Context\r\n#10243 introduced fix that ensured props/items attached to `ProjectEvaluationFinishedEventargs` if requested by any logger.\r\nThis however caused perf regression (https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/2173921) - as previously props/items were attached only when requested by ALL loggers. Such behavior would however break loggers requiring the props for correct functionality (e.g. BuildCheck logger).\r\n\r\n### VS insertions\r\n\r\n* Of the original fix (pure revert of revert): https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/571491 (still has the perf regression)\r\n* Of the current fix (with NullLogger adjustment): https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/571724 - Speedometer shows no regression \ud83e\udd73 ",
  "state": "MERGED",
  "createdAt": "2024-08-12T09:09:05Z",
  "updatedAt": "2024-08-15T16:37:48Z",
  "closedAt": "2024-08-15T16:37:47Z",
  "mergedAt": "2024-08-15T16:37:47Z",
  "additions": 183,
  "deletions": 107,
  "changedFiles": 15,
  "headRefName": "revert-10447-proto/revert-eval-props",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7aeeca8dcf8d6ec2aa242dbb83c4762c925e8b98",
          "message": "Revert \"Revert Emit eval props if requested by any sink (#10243) (#10447)\"\n\nThis reverts commit bd46115a1d330e758e6a53798c71efe0f8bb7c0a.",
          "committedDate": "2024-08-12T09:04:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "krivanek.j@hotmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c4f918fd790b6fddc162c245391913650467976",
          "message": "Prevent NullLogger to request eval props",
          "committedDate": "2024-08-14T09:07:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0bc99390b1c241cc76d502c074b71d935119f01a",
          "message": "Remove extra newline",
          "committedDate": "2024-08-15T15:46:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Credit goes to @GangWang01 for finding this as a source of perf regression of this PR. Thanks!! :-)",
              "createdAt": "2024-08-14T09:08:52Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -3279,25 +3280,19 @@ public LoggerVerbosity Verbosity\n             /// </summary>\n             public void Initialize(IEventSource eventSource)\n             {\n-                // The concrete type we get should always be our internal\n-                // implementation and up-to-date, but we need to meet the\n-                // external contract so can't specify that for the\n-                // argument.\n-\n-                IEventSource4 eventSource4 = (IEventSource4)eventSource;\n-\n                 // Most checks in LoggingService are \"does any attached logger\n                 // specifically opt into this new behavior?\". As such, the\n                 // NullLogger shouldn't opt into them explicitly and should\n                 // let other loggers opt in.\n \n-                // IncludeEvaluationPropertiesAndItems is different though,\n-                // because its check is \"do ALL attached loggers opt into\n-                // the new behavior?\", since the new behavior removes\n-                // information from old loggers. So the NullLogger must\n-                // opt in to ensure it doesn't accidentally veto the new\n-                // behavior.\n-                eventSource4.IncludeEvaluationPropertiesAndItems();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is this extra line needed?",
              "createdAt": "2024-08-15T14:55:26Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -614,6 +652,7 @@ public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)\n             return GetWarningsForProject(context, _warningsNotAsErrorsByProject, WarningsNotAsErrors);\n         }\n \n+",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "oops :-)\r\nRemoved",
              "createdAt": "2024-08-15T15:46:54Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -614,6 +652,7 @@ public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)\n             return GetWarningsForProject(context, _warningsNotAsErrorsByProject, WarningsNotAsErrors);\n         }\n \n+",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}