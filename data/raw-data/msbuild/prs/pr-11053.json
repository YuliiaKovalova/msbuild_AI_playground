{
  "number": 11053,
  "title": "add custom check documentation",
  "body": "Fixes #https://github.com/dotnet/msbuild/issues/10449\r\n\r\n### Context\r\nAdd verbose documentation for custom checks creation.\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-29T18:32:12Z",
  "updatedAt": "2024-12-02T14:56:50Z",
  "closedAt": "2024-12-02T12:53:34Z",
  "mergedAt": "2024-12-02T12:53:34Z",
  "additions": 142,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/add_customcheck_verbose_instruction",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "68367e889c9388182981901eb2cb737bb148e8d1",
          "message": "add custom check documentation",
          "committedDate": "2024-11-29T18:30:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08bc2d862fdd15b60655fa80484723e62e16eae6",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Jan Krivanek <jankrivanek@microsoft.com>",
          "committedDate": "2024-12-01T21:19:54Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "463c1c8863fdc8e7ea352ee0813658ee1ce0afa5",
          "message": "fix review comments",
          "committedDate": "2024-12-02T12:27:18Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n### 3. Instantiate Project Template\r\n```",
              "createdAt": "2024-11-29T19:40:33Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,144 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Create Project Template",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are all those 3 refering to the same thing?\r\n\r\nI'd just put something like 'Inherit your checks from the `Microsoft.Build.Experimental.BuildCheck.Check` base class as already done by the template as otherwise your checks won't be registered during build runtime.'",
              "createdAt": "2024-11-29T19:43:27Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,144 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Create Project Template\n+```powershell\n+dotnet new msbuildcheck -n MyCustomBuildChecks\n+```\n+\n+### 4. Examine Template Structure\n+- Inherit from the MSBuild API base class\n+- Do NOT attempt to unbind from the base class Check because it's validated on MSBuild side\n+- Follow the strict type checking requirements",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        new CheckConfiguration(Severity = CheckResultSeverity.Warning));\r\n```\r\n\r\nLet's make it clear that default severity can be set from code",
              "createdAt": "2024-11-29T19:45:27Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,144 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Create Project Template\n+```powershell\n+dotnet new msbuildcheck -n MyCustomBuildChecks\n+```\n+\n+### 4. Examine Template Structure\n+- Inherit from the MSBuild API base class\n+- Do NOT attempt to unbind from the base class Check because it's validated on MSBuild side\n+- Follow the strict type checking requirements\n+- There is a custom target `AddNuGetDlls` included for copying 3rd party assemblies in the final package\n+\n+### 5. Define Rule Identification\n+Key components for making your check discoverable:\n+- Unique Rule ID (critical for system recognition)\n+- Clear, descriptive title\n+- Comprehensive description\n+- Actionable recommendation message\n+\n+### 6. Choose Build Stage for Monitoring\n+Custom checks can monitor different build stages:\n+- Project Evaluation Build Time (most common)\n+- Access project properties\n+- Track and validate configurations\n+\n+### 7. Implement Check Logic\n+```csharp\n+public sealed class MaxVersionCheck : Check\n+{\n+    // Define allowed versions\n+    private static Dictionary<string, Version> propertiesToAllowedVersion = new Dictionary<string, Version>()\n+    {\n+        { \"ProductVersion\", new Version(6, 0, 0) }\n+    };\n+\n+    // Unique Rule Identifier\n+    private const string RuleId = \"BC123\";\n+\n+    // Define Rule with Detailed Information\n+    public static CheckRule SupportedRule = new CheckRule(\n+        RuleId,\n+        \"NoForbiddenProjectProperties\",\n+        \"Prevent unauthorized version usage\",\n+        \"The version '{0}' for property '{1}' is forbidden. Use version '{2}' instead.\",\n+        new CheckConfiguration());",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is meant by this one?",
              "createdAt": "2024-11-29T19:47:38Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,144 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Create Project Template\n+```powershell\n+dotnet new msbuildcheck -n MyCustomBuildChecks\n+```\n+\n+### 4. Examine Template Structure\n+- Inherit from the MSBuild API base class\n+- Do NOT attempt to unbind from the base class Check because it's validated on MSBuild side\n+- Follow the strict type checking requirements\n+- There is a custom target `AddNuGetDlls` included for copying 3rd party assemblies in the final package\n+\n+### 5. Define Rule Identification\n+Key components for making your check discoverable:\n+- Unique Rule ID (critical for system recognition)\n+- Clear, descriptive title\n+- Comprehensive description\n+- Actionable recommendation message\n+\n+### 6. Choose Build Stage for Monitoring\n+Custom checks can monitor different build stages:\n+- Project Evaluation Build Time (most common)\n+- Access project properties\n+- Track and validate configurations\n+\n+### 7. Implement Check Logic\n+```csharp\n+public sealed class MaxVersionCheck : Check\n+{\n+    // Define allowed versions\n+    private static Dictionary<string, Version> propertiesToAllowedVersion = new Dictionary<string, Version>()\n+    {\n+        { \"ProductVersion\", new Version(6, 0, 0) }\n+    };\n+\n+    // Unique Rule Identifier\n+    private const string RuleId = \"BC123\";\n+\n+    // Define Rule with Detailed Information\n+    public static CheckRule SupportedRule = new CheckRule(\n+        RuleId,\n+        \"NoForbiddenProjectProperties\",\n+        \"Prevent unauthorized version usage\",\n+        \"The version '{0}' for property '{1}' is forbidden. Use version '{2}' instead.\",\n+        new CheckConfiguration());\n+\n+    // Registration Method\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    // Validation Logic\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        foreach (var property in propertiesToAllowedVersion)\n+        {\n+            if (context.Data.EvaluatedProperties.TryGetValue(property.Key, out string value))\n+            {\n+                if (Version.TryParse(value, out Version version) && version > property.Value)\n+                {\n+                    context.ReportResult(BuildCheckResult.Create(\n+                        SupportedRule,\n+                        ElementLocation.EmptyLocation,\n+                        value,\n+                        property.Key,\n+                        property.Value.ToString()));\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+### 8. Configure via .editorconfig\n+```editorconfig\n+# Custom check configuration\n+build_check.BC123.severity = error\n+```\n+\n+### 9. Package and Distribute\n+- Compile as a NuGet package\n+- Integrate into project build process\n+- Add as a PackageReference to the checked project\n+\n+## Practical Considerations\n+\n+### Security and Vulnerability Prevention\n+- Version constraints can prevent:\n+  - Using outdated or vulnerable package versions\n+  - Breaking dependencies in product files\n+  - Introducing security risks\n+\n+### Performance Tips\n+- Keep checks lightweight\n+- Focus on specific, targeted validations\n+- Minimize build time overhead\n+\n+## Real-World Use Cases\n+- Enforce version constraints\n+- Prevent security vulnerabilities\n+- Manage dependency consistency\n+- Validate project configurations\n+\n+## Contribution and Feedback\n+The MSBuild team welcomes:\n+- Community testing\n+- Feature feedback\n+- Repository contributions\n+- Issue reporting\n+\n+## Limitations\n+- Performance-conscious checks\n+- Consistent configuration required",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Links might be helpful for the cases below :-)",
              "createdAt": "2024-11-29T19:48:30Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,144 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Create Project Template\n+```powershell\n+dotnet new msbuildcheck -n MyCustomBuildChecks\n+```\n+\n+### 4. Examine Template Structure\n+- Inherit from the MSBuild API base class\n+- Do NOT attempt to unbind from the base class Check because it's validated on MSBuild side\n+- Follow the strict type checking requirements\n+- There is a custom target `AddNuGetDlls` included for copying 3rd party assemblies in the final package\n+\n+### 5. Define Rule Identification\n+Key components for making your check discoverable:\n+- Unique Rule ID (critical for system recognition)\n+- Clear, descriptive title\n+- Comprehensive description\n+- Actionable recommendation message\n+\n+### 6. Choose Build Stage for Monitoring\n+Custom checks can monitor different build stages:\n+- Project Evaluation Build Time (most common)\n+- Access project properties\n+- Track and validate configurations\n+\n+### 7. Implement Check Logic\n+```csharp\n+public sealed class MaxVersionCheck : Check\n+{\n+    // Define allowed versions\n+    private static Dictionary<string, Version> propertiesToAllowedVersion = new Dictionary<string, Version>()\n+    {\n+        { \"ProductVersion\", new Version(6, 0, 0) }\n+    };\n+\n+    // Unique Rule Identifier\n+    private const string RuleId = \"BC123\";\n+\n+    // Define Rule with Detailed Information\n+    public static CheckRule SupportedRule = new CheckRule(\n+        RuleId,\n+        \"NoForbiddenProjectProperties\",\n+        \"Prevent unauthorized version usage\",\n+        \"The version '{0}' for property '{1}' is forbidden. Use version '{2}' instead.\",\n+        new CheckConfiguration());\n+\n+    // Registration Method\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    // Validation Logic\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        foreach (var property in propertiesToAllowedVersion)\n+        {\n+            if (context.Data.EvaluatedProperties.TryGetValue(property.Key, out string value))\n+            {\n+                if (Version.TryParse(value, out Version version) && version > property.Value)\n+                {\n+                    context.ReportResult(BuildCheckResult.Create(\n+                        SupportedRule,\n+                        ElementLocation.EmptyLocation,\n+                        value,\n+                        property.Key,\n+                        property.Value.ToString()));\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+### 8. Configure via .editorconfig\n+```editorconfig\n+# Custom check configuration\n+build_check.BC123.severity = error\n+```\n+\n+### 9. Package and Distribute\n+- Compile as a NuGet package\n+- Integrate into project build process\n+- Add as a PackageReference to the checked project\n+\n+## Practical Considerations\n+\n+### Security and Vulnerability Prevention\n+- Version constraints can prevent:\n+  - Using outdated or vulnerable package versions\n+  - Breaking dependencies in product files\n+  - Introducing security risks\n+\n+### Performance Tips\n+- Keep checks lightweight\n+- Focus on specific, targeted validations\n+- Minimize build time overhead\n+\n+## Real-World Use Cases\n+- Enforce version constraints\n+- Prevent security vulnerabilities\n+- Manage dependency consistency\n+- Validate project configurations\n+\n+## Contribution and Feedback\n+The MSBuild team welcomes:\n+- Community testing\n+- Feature feedback\n+- Repository contributions\n+- Issue reporting\n+\n+## Limitations\n+- Performance-conscious checks\n+- Consistent configuration required\n+- Limited to specific build stages\n+\n+## Conclusion\n+Custom build checks provide a powerful mechanism to enforce project-specific rules, enhance build quality, and maintain consistent development practices.\n+\n+## Getting Help",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it would be nice to have a small section on how to handle errors gracefully in case the check needs to error out, and what would happen when it does (BuildCheck will emit a warning with the error message from the check, and will disable the check, so no more rules will run)",
              "createdAt": "2024-12-02T14:56:50Z",
              "path": "documentation/specs/BuildCheck/CustomBuildCheck.md",
              "diffHunk": "@@ -0,0 +1,142 @@\n+# MSBuild Custom Build Checks Guide\n+\n+## Overview\n+Custom build checks in MSBuild provide developers with an extensibility point to implement specific validation and reporting during the build process.\n+\n+## Step-by-Step Custom Check Creation\n+\n+### 1. Understand the Motivation\n+Before creating a custom check, identify your specific project needs, e.g.:\n+- Do you need to enforce version constraints?\n+- Are there security concerns with certain configurations?\n+- Do you want to maintain consistent project properties?\n+Depending on this, different MSBuild project stages can be considered (Evaluation, Build or Post Build events.)\n+\n+### 2. Install Prerequisites\n+- Install .NET SDK 9 or higher\n+\n+- Install MSBuild Custom Check Template\n+```powershell\n+dotnet new install Microsoft.Build.Templates\n+```\n+\n+### 3. Instantiate Project Template\n+```powershell\n+dotnet new msbuildcheck -n MyCustomBuildChecks\n+```\n+\n+### 4. Examine Template Structure\n+- Inherit from the MSBuild API base class (Microsoft.Build.Experimental.BuildCheck.Check) as already done by the template as otherwise your checks won't be registered during build runtime\n+- <CustomCheckName>.props file contains the intrinsic function \"RegisterBuildCheck\" that is picked by MSBuild and is an entry point to the check.\n+- <CustomCheckName>.csproj file has a custom target `AddNuGetDlls` included for copying 3rd party assemblies in the final package\n+\n+### 5. Define Rule Identification\n+Key components for making your check discoverable:\n+- Unique Rule ID (critical for system recognition)\n+- Clear, descriptive title\n+- Comprehensive description\n+- Actionable recommendation message\n+\n+### 6. Choose Build Stage for Monitoring\n+Custom checks can monitor different build stages:\n+- Project Evaluation Build Time (most common)\n+- Access project properties\n+- Track and validate configurations\n+\n+### 7. Implement Check Logic\n+```csharp\n+public sealed class MaxVersionCheck : Check\n+{\n+    // Define allowed versions\n+    private static Dictionary<string, Version> propertiesToAllowedVersion = new Dictionary<string, Version>()\n+    {\n+        { \"ProductVersion\", new Version(6, 0, 0) }\n+    };\n+\n+    // Unique Rule Identifier\n+    private const string RuleId = \"BC123\";\n+\n+    // Define Rule with Detailed Information\n+    public static CheckRule SupportedRule = new CheckRule(\n+        RuleId,\n+        \"NoForbiddenProjectProperties\",\n+        \"Prevent unauthorized version usage\",\n+        \"The version '{0}' for property '{1}' is forbidden. Use version '{2}' instead.\",\n+        new CheckConfiguration(Severity = CheckResultSeverity.Warning));\n+\n+    // Registration Method\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    // Validation Logic\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        foreach (var property in propertiesToAllowedVersion)\n+        {\n+            if (context.Data.EvaluatedProperties.TryGetValue(property.Key, out string value))\n+            {\n+                if (Version.TryParse(value, out Version version) && version > property.Value)\n+                {\n+                    context.ReportResult(BuildCheckResult.Create(\n+                        SupportedRule,\n+                        ElementLocation.EmptyLocation,\n+                        value,\n+                        property.Key,\n+                        property.Value.ToString()));\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n+\n+### 8. Configure via .editorconfig\n+```editorconfig\n+# Custom check configuration\n+build_check.BC123.severity = error\n+```\n+\n+### 9. Package and Distribute\n+- Compile as a NuGet package\n+- Integrate into project build process\n+- Add as a PackageReference to the checked project\n+\n+## Practical Considerations",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      }
    ]
  }
}