{
  "number": 8266,
  "title": "Ensure trailing slash for string used as key in AssemblyTableInfo's cache",
  "body": "We do exact string comparisons with this path, and it is user-provided, so if it does not include a slash, we may do more work.\r\n",
  "state": "MERGED",
  "createdAt": "2022-12-27T23:03:26Z",
  "updatedAt": "2023-01-10T03:09:20Z",
  "closedAt": "2023-01-10T03:09:19Z",
  "mergedAt": "2023-01-10T03:09:19Z",
  "additions": 3,
  "deletions": 10,
  "changedFiles": 2,
  "headRefName": "add-ensure-trailing-slash",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "421f7a0c81b9989c5a7f0311abb1753f03cfa1d9",
          "message": "Ensure trailing slash\n\nWe do exact string comparisons with this path, and it is user-provided, so if it does not include a slash, we may do slightly more work.",
          "committedDate": "2022-12-27T20:19:43Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c111521e2de159235dc829a52399d2498fa46522",
          "message": "Normalize at ATI creation time",
          "committedDate": "2023-01-03T23:31:33Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> How did you discover this?\r\n\r\nI was working on a larger change around caching in RAR and trying to get a general idea for how things worked when I noticed this. I finished the larger change, but it didn't actually seem to really affect performance, so I don't think it's worth a PR. I started another change as well that might improve perf, but I haven't finished that one yet.\r\n\r\n> Can you describe the situation where a user might hit the miss?\r\n\r\nThis is a bit narrow, but if you pass in exactly one TargetFrameworkDirectory, it doesn't end in a slash, and ou also pass in one or more AssemblyTables with FrameworkDirectory metadata, that un-normalized directory will be part of the key into s_cachedRedistList [here](https://github.com/dotnet/msbuild/blob/main/src/Tasks/RedistList.cs#L353). If you then specify one or more LatestTargetFrameworkDirectories, those will be compared against that directory [here](https://github.com/dotnet/msbuild/blob/main/src/Tasks/AssemblyDependency/ReferenceTable.cs#L2066).\r\n\r\nLooking at that more, though, I do think my current change is insufficient, and I should apply normalization across the board. I had tried to just align with the other code path in that method that was doing some light normalization, but it looks like we aren't even consistent on whether we try to normalize the path. I'm sure it isn't a huge perf loss, but it still is slightly wasteful. I'm a little split between normalizing every instance in which we make these paths versus normalizing just before using the key; the latter is easier but would probably be a bit more allocate-y. Maybe not, though? I'll look more.",
        "createdAt": "2023-01-03T22:43:43Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Would this be appropriate? It \"feels\" like it expresses intention more clearly.\r\n\r\n```suggestion\r\n                        frameworkDirectory = FileUtilities.NormalizeForPathComparison(TargetFrameworkDirectories[0]);\r\n```",
              "createdAt": "2023-01-03T17:22:54Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3006,8 +3006,7 @@ private AssemblyTableInfo[] GetInstalledAssemblyTableInfo(bool ignoreInstalledAs\n                     {\n                         // Exactly one TargetFrameworkDirectory, so assume it's related to this\n                         // InstalledAssemblyTable.\n-\n-                        frameworkDirectory = TargetFrameworkDirectories[0];\n+                        frameworkDirectory = FileUtilities.EnsureTrailingSlash(TargetFrameworkDirectories[0]);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think that change is reasonable, but if we take it, we'd have to change all the other points that EnsureTrailingSlash rather than NormalizeForPathComparison, or else we'd be ensuring cache misses rather than increasing the chance of cache hits. (I can do that if you'd like, but it's a larger change, and it'd be easier to accidentally miss a case.)",
              "createdAt": "2023-01-03T22:09:52Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3006,8 +3006,7 @@ private AssemblyTableInfo[] GetInstalledAssemblyTableInfo(bool ignoreInstalledAs\n                     {\n                         // Exactly one TargetFrameworkDirectory, so assume it's related to this\n                         // InstalledAssemblyTable.\n-\n-                        frameworkDirectory = TargetFrameworkDirectories[0];\n+                        frameworkDirectory = FileUtilities.EnsureTrailingSlash(TargetFrameworkDirectories[0]);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}