{
  "number": 3446,
  "title": "Allocation reductions and some .NET 1 data structure removal",
  "body": "- Removed a few more ArrayLists.\r\n- Converted some internal-facing properties from array to List<T> and removed related unneeded List<T>.ToArray() calls.\r\n- For #3320 ",
  "state": "MERGED",
  "createdAt": "2018-06-22T18:39:12Z",
  "updatedAt": "2021-10-12T00:01:27Z",
  "closedAt": "2018-06-26T20:56:15Z",
  "mergedAt": "2018-06-26T20:56:15Z",
  "additions": 138,
  "deletions": 170,
  "changedFiles": 26,
  "headRefName": "dev/erikmav/arrayReduction",
  "isDraft": false,
  "author": {
    "login": "erikmav"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "39ee5124082ab3584db418322d95a3ecf3095c70",
          "message": "Reduce heap allocs between internal classes by reducing ToArray() calls, and reduce ArrayList usage",
          "committedDate": "2018-06-22T18:24:23Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f49ea7b9914941792cf9de3086f360f6cfa438b2",
          "message": "Add autogen updates",
          "committedDate": "2018-06-22T18:24:23Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd4b0563d1cb90a705ced7a8ecc44f05dfd2137c",
          "message": "Undo automated refactoring changes",
          "committedDate": "2018-06-23T23:30:20Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a556407b5b515dcdea4bf0bbaf0333dcf8a8b84",
          "message": "PR comments",
          "committedDate": "2018-06-26T01:22:52Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a80e226b26e9c9d27c0942df0c6e5f9ba57f4777",
          "message": "Further proof list mutability in RAR",
          "committedDate": "2018-06-26T01:29:51Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-bot test Ubuntu16.04 Build for CoreCLR please\r\n",
        "createdAt": "2018-06-23T00:52:53Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for CoreCLR please\r\n",
        "createdAt": "2018-06-23T00:53:09Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test OSX10.13 Build for CoreCLR please\r\n",
        "createdAt": "2018-06-23T00:53:41Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for CoreCLR please",
        "createdAt": "2018-06-26T18:59:31Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for Full please",
        "createdAt": "2018-06-26T18:59:44Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot tets OSX10.13 Build for CoreCLR please",
        "createdAt": "2018-06-26T19:00:08Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test OSX10.13 Build for CoreCLR  please",
        "createdAt": "2018-06-26T19:00:18Z",
        "author": {
          "login": "erikmav"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Whitespace change seems off.",
              "createdAt": "2018-06-25T16:47:20Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -494,7 +494,7 @@ public override void ProjectStartedHandler(object sender, ProjectStartedEventArg\n             // Add the project to the BuildManager so we can use the start information later in the build process\n             _buildEventManager.AddProjectStartedEvent(e, _showTimeStamp || IsVerbosityAtLeast(LoggerVerbosity.Detailed));\n \n-\n+            ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "fixed in next push",
              "createdAt": "2018-06-26T01:14:43Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -494,7 +494,7 @@ public override void ProjectStartedHandler(object sender, ProjectStartedEventArg\n             // Add the project to the BuildManager so we can use the start information later in the build process\n             _buildEventManager.AddProjectStartedEvent(e, _showTimeStamp || IsVerbosityAtLeast(LoggerVerbosity.Detailed));\n \n-\n+            ",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this safe now? Before, the array was at least length-immutable; will it now be easy to accidentally mutate one of these input lists when intending to deal with the result?\r\n\r\n(All of this stuff looks like great candidates for immutable collections, which may fall out of the RAR work I have planned. But we don't need to make it worse now.)",
              "createdAt": "2018-06-25T17:03:15Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2448,17 +2444,17 @@ private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, Fil\n         /// <summary>\n         /// Combines two DependentAssembly arrays into one.\n         /// </summary>\n-        private static DependentAssembly[] CombineRemappedAssemblies(DependentAssembly[] first, DependentAssembly[] second)\n+        private static List<DependentAssembly> CombineRemappedAssemblies(List<DependentAssembly> first, List<DependentAssembly> second)\n         {\n             if (first == null)\n                 return second;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Not safe in the sense that you mean; but safe in the sense that ReferenceTable.ComputeClosure(), the only consumer of the resulting list, treats the list as immutable. Updated in next push to make ReferenceTable use IEnumerable instead of List to ensure it's immutable.",
              "createdAt": "2018-06-26T01:22:18Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2448,17 +2444,17 @@ private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, Fil\n         /// <summary>\n         /// Combines two DependentAssembly arrays into one.\n         /// </summary>\n-        private static DependentAssembly[] CombineRemappedAssemblies(DependentAssembly[] first, DependentAssembly[] second)\n+        private static List<DependentAssembly> CombineRemappedAssemblies(List<DependentAssembly> first, List<DependentAssembly> second)\n         {\n             if (first == null)\n                 return second;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "I realized I missed the gist of what you were saying. Additional push changes the signature here to use IReadOnlyCollection to avoid unintended mutability.",
              "createdAt": "2018-06-26T01:30:52Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2448,17 +2444,17 @@ private AssemblyNameExtension[] GetDependencies(Reference resolvedReference, Fil\n         /// <summary>\n         /// Combines two DependentAssembly arrays into one.\n         /// </summary>\n-        private static DependentAssembly[] CombineRemappedAssemblies(DependentAssembly[] first, DependentAssembly[] second)\n+        private static List<DependentAssembly> CombineRemappedAssemblies(List<DependentAssembly> first, List<DependentAssembly> second)\n         {\n             if (first == null)\n                 return second;",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      }
    ]
  }
}