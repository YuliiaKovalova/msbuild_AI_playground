{
  "number": 5975,
  "title": "Allow redundant specification of MSBuild assemblies in inline tasks",
  "body": "Fixes #5822 by filtering out the default MSBuild assemblies from the UsingTask list.\r\n\r\n\r\n9bfc622 is the real work but there were a bunch of refactorings to make that clear. I recommend going commit-by-commit.",
  "state": "MERGED",
  "createdAt": "2020-12-16T21:40:13Z",
  "updatedAt": "2020-12-21T21:45:10Z",
  "closedAt": "2020-12-21T21:45:09Z",
  "mergedAt": "2020-12-21T21:45:09Z",
  "additions": 145,
  "deletions": 95,
  "changedFiles": 2,
  "headRefName": "amd64-inline-tasks",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "07378c6710600ecdb3037bc0c3e797fbf7ead544",
          "message": "Use exception filter in AddReferenceAssemblyToReferenceList",
          "committedDate": "2020-12-16T16:14:11Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24cc81f8a8abdd9177136d8e038988cd4965a166",
          "message": "Extract GetPathFromPartialAssemblyName",
          "committedDate": "2020-12-16T16:18:30Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1a5e33bd0d26e864930b7d72de2b3010ff1b2f3",
          "message": "Inline fileExists bool",
          "committedDate": "2020-12-16T16:19:01Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d94352e7ffb309ead6c7e993517150a6669855b6",
          "message": "Extract CacheAssemblyIdentityFromPath",
          "committedDate": "2020-12-16T16:20:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ade18598ce8b2c56b3fa09e6d3d3734485841eb",
          "message": "Clearer param names for local functions",
          "committedDate": "2020-12-16T16:23:32Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "764b0676a9e8e4e83b1a2a4ced4972c4adf7f147",
          "message": "Remove unnecessary local function params",
          "committedDate": "2020-12-16T16:26:25Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9247c20459f0ea706f38a3f9d109a3f5a91eec87",
          "message": "move list ctor into CombineReferencedAssemblies()",
          "committedDate": "2020-12-21T19:16:49Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f54963d40f426b4de73944fa2b19fc0bb68e469b",
          "message": "Inline DefaultReferencedAssemblies",
          "committedDate": "2020-12-21T19:16:49Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5669267c84a324f9bf39bb62696b890e9dab5275",
          "message": "Ignore redundant specifications of default MSBuild assemblies",
          "committedDate": "2020-12-21T19:16:49Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b2f947ee861c0eb53f93dcfbc87c95ab85c37c00",
          "message": "Precompute assembly names and paths",
          "committedDate": "2020-12-21T19:16:50Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cfd63097fd7e2e46addd1ba8a17415b6cfcf409e",
          "message": "Add test for redundant references",
          "committedDate": "2020-12-21T19:16:50Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f3055a0bd2da1f68720c60b325ec6c0f01f4aef8",
          "message": "Allow backslashes in CodeTaskFactory references",
          "committedDate": "2020-12-21T19:16:51Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do CodeTaskFactorys get reused? If so, this removed the caching, so there could be a perf hit.",
              "createdAt": "2020-12-18T16:21:17Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -851,20 +847,44 @@ private Assembly CompileInMemoryAssembly()\n         /// <summary>\n         /// Combine our default referenced assemblies with those explicitly specified\n         /// </summary>\n-        private void CombineReferencedAssemblies(List<string> finalReferenceList)\n+        private List<string> CombineReferencedAssemblies()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Since the previous cache `s_defaultReferencedAssemblies` applied to the raw inputs and it mapped those to filenames again every time (via probing/reflection) I don't think the lack of the input cache is likely to be significant.",
              "createdAt": "2020-12-21T19:27:58Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -851,20 +847,44 @@ private Assembly CompileInMemoryAssembly()\n         /// <summary>\n         /// Combine our default referenced assemblies with those explicitly specified\n         /// </summary>\n-        private void CombineReferencedAssemblies(List<string> finalReferenceList)\n+        private List<string> CombineReferencedAssemblies()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Mono failure from something here?",
              "createdAt": "2020-12-18T16:24:07Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -712,6 +642,73 @@ private void AddReferenceAssemblyToReferenceList(List<string> referenceAssemblyL\n                     _log.LogErrorWithCodeFromResources(\"CodeTaskFactory.CouldNotFindReferenceAssembly\", referenceAssembly);\n                 }\n             }\n+\n+            static string GetPathFromPartialAssemblyName(string partialName)\n+            {\n+                string candidateAssemblyLocation = null;\n+\n+#pragma warning disable 618, 612\n+                // Unfortunately Assembly.Load is not an alternative to LoadWithPartialName, since\n+                // Assembly.Load requires the full assembly name to be passed to it.\n+                // Therefore we must ignore the deprecated warning.\n+                Assembly candidateAssembly = Assembly.LoadWithPartialName(partialName);\n+                if (candidateAssembly != null)\n+                {\n+                    candidateAssemblyLocation = candidateAssembly.Location;\n+                }\n+                else if (NativeMethodsShared.IsMono)\n+                {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good guess but no! Instead it was 84643d8309--we just didn't have any test assets in that form before.",
              "createdAt": "2020-12-21T17:25:53Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -712,6 +642,73 @@ private void AddReferenceAssemblyToReferenceList(List<string> referenceAssemblyL\n                     _log.LogErrorWithCodeFromResources(\"CodeTaskFactory.CouldNotFindReferenceAssembly\", referenceAssembly);\n                 }\n             }\n+\n+            static string GetPathFromPartialAssemblyName(string partialName)\n+            {\n+                string candidateAssemblyLocation = null;\n+\n+#pragma warning disable 618, 612\n+                // Unfortunately Assembly.Load is not an alternative to LoadWithPartialName, since\n+                // Assembly.Load requires the full assembly name to be passed to it.\n+                // Therefore we must ignore the deprecated warning.\n+                Assembly candidateAssembly = Assembly.LoadWithPartialName(partialName);\n+                if (candidateAssembly != null)\n+                {\n+                    candidateAssemblyLocation = candidateAssembly.Location;\n+                }\n+                else if (NativeMethodsShared.IsMono)\n+                {",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Since you refactored this and are creating the list here, it may be worth starting with the expected capacity: `s_defaultReferencedFrameworkAssemblyNames.Length + 2 + _referencedAssemblies.Count`.",
              "createdAt": "2020-12-18T16:30:27Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -851,20 +847,44 @@ private Assembly CompileInMemoryAssembly()\n         /// <summary>\n         /// Combine our default referenced assemblies with those explicitly specified\n         /// </summary>\n-        private void CombineReferencedAssemblies(List<string> finalReferenceList)\n+        private List<string> CombineReferencedAssemblies()\n         {\n-            foreach (string defaultReference in DefaultReferencedAssemblies)\n+            List<string> finalReferenceList = new List<string>();",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}