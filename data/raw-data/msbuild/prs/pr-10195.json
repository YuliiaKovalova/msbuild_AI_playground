{
  "number": 10195,
  "title": "Implement adaptive node timeout",
  "body": "Contributes to #9922\r\n\r\n### Context\r\n\r\nMSBuild currently uses a fixed timeout of 15 minutes, after which idle nodes shut themselves down. This works well for cases where the build is invoked repeatedly and the nodes stay alive for a long time. However, for one-off builds the timeout may be perceived as excessive.\r\n\r\n### Changes Made\r\n\r\nThis PR makes the timeout \"adaptive\". We assume that the process is expected to live for about double it's current up time, meaning that the timeout automatically increases as the node is processing build requests. For example, if the process has been running for 5 minutes, we set the timeout for 5 minutes.\r\n\r\nThe default maximum timeout is 15 minutes and the default minimum timeout is 1 minute. Both can be overridden with environment variables.\r\n\r\n### Testing\r\n\r\nManual verification.\r\n",
  "state": "CLOSED",
  "createdAt": "2024-05-31T12:46:19Z",
  "updatedAt": "2024-08-05T15:16:05Z",
  "closedAt": "2024-08-05T15:16:04Z",
  "mergedAt": null,
  "additions": 64,
  "deletions": 14,
  "changedFiles": 6,
  "headRefName": "9922-node-management",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2f7145a6cde6b44d2e7c9aaf3100298939452968",
          "message": "Implement adaptive node timeout",
          "committedDate": "2024-05-31T12:46:04Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I have a bit mixed feeling about this - is there a chance that this negatively impacts some of the current scenarios? Do we know what's the usual initial delay between the first build and rebuild for tipical inner loop? It would be nice to have telemetry for that :-|\r\n\r\nAlternatively - can we make this opt-in? So that users suffering with side effect of big number of long lived processes can have some knob to influence the behavior.\r\n\r\nNot sure what would be more optimal solution to this thoug :-| - multi threaded msbuild is too big of a chunk; maybe addaptive timeout based on number of pre-existing msbuild processes? Not sure..",
        "createdAt": "2024-06-04T17:59:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "There are also outside-of-MSBuild mechanisms that we are considering at the SDK level - some users have asked for a 'one-shot' mode that would make use of things like long-lived compiler servers over the course of a single build, but then terminate them at the end of the build. IMO that would solve the user observation of \"too many orphan processes\" in a different yet just-as-valid way.",
        "createdAt": "2024-06-04T18:01:36Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Alternatively - can we make this opt-in? So that users suffering with side effect of big number of long lived processes can have some knob to influence the behavior.\r\n\r\nWe do offer `MSBUILDNODESHUTDOWNTIMEOUT` as an env var today (it's in seconds).",
        "createdAt": "2024-06-04T18:14:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I have a bit mixed feeling about this - is there a chance that this negatively impacts some of the current scenarios? Do we know what's the usual initial delay between the first build and rebuild for tipical inner loop? It would be nice to have telemetry for that :-|\r\n\r\nYes, admittedly, this is a bit of a shot in the dark, trying to address the complaint that MSBuild processes linger for too long. I believe we already have telemetry, both from VS and from the SDK to answer this question but what we really need IMO is find the sweet spot where the cost of re-starting the processes after they time out is acceptable - and this is really hard to know without an A/B test of some sort.",
        "createdAt": "2024-06-04T18:33:11Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> There are also outside-of-MSBuild mechanisms that we are considering at the SDK level - some users have asked for a 'one-shot' mode that would make use of things like long-lived compiler servers over the course of a single build, but then terminate them at the end of the build. IMO that would solve the user observation of \"too many orphan processes\" in a different yet just-as-valid way.\r\n\r\nSince this came up in context of VS Code / CDK, how would you feel about killing the processes when the user exits VS Code? This would align the behavior with VS and while there seem to be technical limitations related to VS Code not giving extensions any time for running shutdown code, we hypothetically _could_ have the inverse implementation where worker nodes watch the parent/VS process and exit when it's no longer live.",
        "createdAt": "2024-06-04T18:39:43Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Team is not ready to take this as adaptive timeout can cause other regressions",
        "createdAt": "2024-08-05T15:16:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}