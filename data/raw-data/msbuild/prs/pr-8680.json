{
  "number": 8680,
  "title": "ItemSpec: Do not call MatchCount when count is not needed",
  "body": "Relates to https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1728887/\r\n\r\n### Context\r\nItemSpecFragment.MatchCount result is thrown away when called from ItemExpressionFragment.MatchCount (it just needs to get info about existing match).\r\n\r\nThe mentioned codepath is on the stack of the detected UI delay. While it might not be the rootcause, it doesn't hurt to improve this behavior.\r\n\r\nThanks @davkean for specific suggestions pointers during ivestigation \r\n",
  "state": "MERGED",
  "createdAt": "2023-04-19T18:09:48Z",
  "updatedAt": "2023-05-02T11:29:27Z",
  "closedAt": "2023-04-21T07:00:17Z",
  "mergedAt": "2023-04-21T07:00:17Z",
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "perf/itemspec-matchcount",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "858635a4a54ca197eebab4d9b9488bd37ccd9ecb",
          "message": "Do not call MatchCount when count is not needed",
          "committedDate": "2023-04-19T17:57:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> MatchCount just calls IsMatch and returns 0 or 1 according to the result, so this should barely be faster, but I'll take it \ud83d\ude42\r\n\r\nThat's correct. Though there is no harm fixing, and I wanted to give it a try since it's showing on the hot stack in some perfWatson cases",
        "createdAt": "2023-04-21T08:22:39Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "On the same topic, should we just eliminate MatchCount uses from across MSBuild? It's not only (slightly) slower but can also be confusing if you think you'll get a real number of matches.",
        "createdAt": "2023-04-21T13:56:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> On the same topic, should we just eliminate MatchCount uses from across MSBuild? It's not only (slightly) slower but can also be confusing if you think you'll get a real number of matches.\r\n\r\nThe second implementations of this virtual method is actualy being used in expected way: https://github.com/dotnet/msbuild/blob/main/src/Build/Evaluation/ItemSpec.cs#L324\r\n\r\nUsage of the 0/1 implementation was removed by this PR",
        "createdAt": "2023-04-21T14:21:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> The second implementations of this virtual method is actualy being used in expected way: https://github.com/dotnet/msbuild/blob/main/src/Build/Evaluation/ItemSpec.cs#L324\r\n> \r\n> Usage of the 0/1 implementation was removed by this PR\r\n\r\nI first saw this at an awkward time for looking into it, but can you clarify what you meant? When I look at the line you linked and use go-to-definition, it goes to the IsMatch(...) ? 1 : 0 code that is confusing and unnecessary.",
        "createdAt": "2023-05-01T21:07:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I first saw this at an awkward time for looking into it, but can you clarify what you meant? When I look at the line you linked and use go-to-definition, it goes to the IsMatch(...) ? 1 : 0 code that is confusing and unnecessary.\r\n\r\nYou are right - the non-overwritten ItemSpecFragment.MatchCount default implementation (returning just 0 or 1) can still be called. One of the code paths (the one that was on the stack of PerfWatson findings) that let to calling it was removed.\r\nI was rather reffereing to 'should we just eliminate MatchCount uses from across MSBuild' - since there are legitimate usages of overriden `MatchCount` - so removing is not straightforward and beyond scope of this PR.",
        "createdAt": "2023-05-02T11:29:27Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}