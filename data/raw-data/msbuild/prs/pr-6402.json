{
  "number": 6402,
  "title": "Add TargetSkipReason and OriginalBuildEventContext to TargetSkippedEventArgs",
  "body": "We weren't logging TargetSkippedEventArgs in two cases: when the target was satisfied from cache (previously built), or when the outputs were up-to-date. We were logging simple messages. Switch to logging TargetSkippedEventArgs in these cases as well.\r\n\r\nAdd a new TargetSkipReason enum to indicate why the target was skipped. Store and serialize it for node packet translator and binary logger.\r\n\r\nWhen logging a TargetSkippedEventArgs because a target was built previously it is also useful to find the original target invocation (e.g. to see the target outputs). Add OriginalBuildEventContext to TargetResult and ensure it is translated properly. Add OriginalBuildEventContext on TargetSkippedEventArgs and serialize that as well (both node packet translator and binary logger).\r\n\r\nNote that if the target didn't build because the Condition was false, the OriginalBuildEventContext will be a project context, not a target context.\r\n\r\nWe have to increment the binlog file format version to 14 to add the two new fields.\r\n\r\nImplement BuildEventContext.ToString() for easier debugging.\r\n\r\nAdd an internal setter for Importance on BuildMessageEventArgs.\r\n\r\nWe were missing unit-tests for node packet translation of TargetSkippedEventArgs. Add test.\r\n\r\nFixes https://github.com/dotnet/msbuild/issues/5475",
  "state": "MERGED",
  "createdAt": "2021-05-03T02:20:51Z",
  "updatedAt": "2021-05-29T04:02:19Z",
  "closedAt": "2021-05-28T19:19:44Z",
  "mergedAt": "2021-05-28T19:19:44Z",
  "additions": 261,
  "deletions": 45,
  "changedFiles": 17,
  "headRefName": "dev/kirillo/originalTarget",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c56a2e18dbd0f71618cc59c0a8ba749cdd294f4d",
          "message": "Add TargetSkipReason and OriginalBuildEventContext to TargetSkippedEventArgs\n\nWe weren't logging TargetSkippedEventArgs in two cases: when the target was satisfied from cache (previously built), or when the outputs were up-to-date. We were logging simple messages. Switch to logging TargetSkippedEventArgs in these cases as well.\n\nAdd a new TargetSkipReason enum to indicate why the target was skipped. Store and serialize it for node packet translator and binary logger.\n\nWhen logging a TargetSkippedEventArgs because a target was built previously it is also useful to find the original target invocation (e.g. to see the target outputs). Add OriginalBuildEventContext to TargetResult and ensure it is translated properly. Add OriginalBuildEventContext on TargetSkippedEventArgs and serialize that as well (both node packet translator and binary logger).\n\nNote that if the target didn't build because the Condition was false, the OriginalBuildEventContext will be a project context, not a target context.\n\nWe have to increment the binlog file format version to 14 to add the two new fields.\n\nImplement BuildEventContext.ToString() for easier debugging.\n\nAdd an internal setter for Importance on BuildMessageEventArgs.\n\nWe were missing unit-tests for node packet translation of TargetSkippedEventArgs. Add test.\n\nFixes https://github.com/dotnet/msbuild/issues/5475",
          "committedDate": "2021-05-03T02:20:10Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65a6e2147e8ebb7f9e5c845278ae236d442df05d",
          "message": "Can't use Array.Empty() in .NET 3.5.",
          "committedDate": "2021-05-03T02:48:28Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7bb849ae43ee279ed6d3c2d811fe75de9e205d72",
          "message": "Fix skip reason.",
          "committedDate": "2021-05-04T01:18:59Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "454959c05cc1f202b9db459356a9b8d747a0301f",
          "message": "Add comment explaining when TargetResult.OriginalBuildEventContext can be null.",
          "committedDate": "2021-05-04T02:11:27Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c26b4e38b47a81bf85b141f7aad2fd554cf9bf6",
          "message": "Forgot to set SkipReason ConditionWasFalse.",
          "committedDate": "2021-05-04T03:41:25Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "21efdb6ea429115f1cab10724dd57a540b61b692",
          "message": "Add a check that TargetSkipReason is set",
          "committedDate": "2021-05-04T21:12:31Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The viewer was updated to file format version 14 and to take advantage of this new information:\r\n\r\n![NavigateToOriginalTarget](https://user-images.githubusercontent.com/679326/116838520-84158380-ab83-11eb-9a40-44c37e98f16a.gif)\r\n",
        "createdAt": "2021-05-03T03:18:41Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The TargetSkipReasons should be different right?",
              "createdAt": "2021-05-04T01:12:31Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -564,14 +564,17 @@ private bool CheckSkipTarget(ref bool stopProcessingStack, TargetEntry currentTa\n                 {\n                     // If we've already dealt with this target and it didn't skip, let's log appropriately\n                     // Otherwise we don't want anything more to do with it.\n+                    bool success = targetResult.ResultCode == TargetResultCode.Success;\n                     var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)\n                     {\n                         BuildEventContext = _projectLoggingContext.BuildEventContext,\n                         TargetName = currentTargetEntry.Name,\n                         TargetFile = currentTargetEntry.Target.Location.File,\n                         ParentTarget = currentTargetEntry.ParentEntry?.Target.Name,\n                         BuildReason = currentTargetEntry.BuildReason,\n-                        OriginallySucceeded = targetResult.ResultCode == TargetResultCode.Success\n+                        OriginallySucceeded = success,\n+                        SkipReason = success ? TargetSkipReason.PreviouslyBuiltSuccessfully : TargetSkipReason.PreviouslyBuiltSuccessfully,",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "OUCH, good catch!\r\n\r\nThis is why code reviews are worth it!",
              "createdAt": "2021-05-04T01:17:34Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -564,14 +564,17 @@ private bool CheckSkipTarget(ref bool stopProcessingStack, TargetEntry currentTa\n                 {\n                     // If we've already dealt with this target and it didn't skip, let's log appropriately\n                     // Otherwise we don't want anything more to do with it.\n+                    bool success = targetResult.ResultCode == TargetResultCode.Success;\n                     var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)\n                     {\n                         BuildEventContext = _projectLoggingContext.BuildEventContext,\n                         TargetName = currentTargetEntry.Name,\n                         TargetFile = currentTargetEntry.Target.Location.File,\n                         ParentTarget = currentTargetEntry.ParentEntry?.Target.Name,\n                         BuildReason = currentTargetEntry.BuildReason,\n-                        OriginallySucceeded = targetResult.ResultCode == TargetResultCode.Success\n+                        OriginallySucceeded = success,\n+                        SkipReason = success ? TargetSkipReason.PreviouslyBuiltSuccessfully : TargetSkipReason.PreviouslyBuiltSuccessfully,",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A target that was not skipped should never issue a TargetSkippedEvent right? So I'm confused how None can represent a target that was not skipped.",
              "createdAt": "2021-05-04T01:19:19Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Yes in theory None should never be used. But I decided to leave a \"null\" value just in case... Maybe it should be called Invalid?",
              "createdAt": "2021-05-04T01:20:53Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "What about just deleting it altogether? Or asserting that it's never None?",
              "createdAt": "2021-05-04T01:31:02Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Yes I'm guessing I'll just delete it. Felt like if we didn't have a \"null\" value we could paint ourselves in the corner, e.g. when reading 0 from a deserializer it would map to an invalid value, thus signaling to us that it's an error, but if we don't have a default value and 0 will just map the first field, then we'll never know it was bad. I'm just hypothesizing here.",
              "createdAt": "2021-05-04T01:46:37Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "This is the scenario I'm talking about here: \r\nhttps://github.com/dotnet/msbuild/blob/454959c05cc1f202b9db459356a9b8d747a0301f/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs#L300\r\n\r\nFor older versions we need some default value that represents \"null\" and I don't want to make it nullable because it'd increase bloat.",
              "createdAt": "2021-05-04T02:13:53Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Feels like we do need a value for None/Unknown/Invalid/Unspecified",
              "createdAt": "2021-05-04T02:32:11Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Yea, and always error via ErrorUtilities.VerifyThrow when a None value flows into a field via the TaskSkippedEventArgs constructor / setter? It would be nice for something to crash somewhere whenever the null symbol starts to flow around.",
              "createdAt": "2021-05-04T17:30:58Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I added a check",
              "createdAt": "2021-05-04T21:58:08Z",
              "path": "src/Framework/TargetSkippedEventArgs.cs",
              "diffHunk": "@@ -7,6 +7,37 @@\n \n namespace Microsoft.Build.Framework\n {\n+    /// <summary>\n+    /// A reason why a target was skipped.\n+    /// </summary>\n+    public enum TargetSkipReason\n+    {\n+        /// <summary>\n+        /// The target was not skipped or the skip reason was unknown.",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you please better document when this is null and when it isn't? I assume it's null when this target first executed, and after that all subsequent executions should have an OBEC.",
              "createdAt": "2021-05-04T01:25:28Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,24 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;\n+\n         /// <summary>\n         /// Initializes the results with specified items and result.\n         /// </summary>\n         /// <param name=\"items\">The items produced by the target.</param>\n         /// <param name=\"result\">The overall result for the target.</param>\n-        internal TargetResult(TaskItem[] items, WorkUnitResult result)\n+        /// <param name=\"originalBuildEventContext\">The original build event context from when the target was first built, if available. Can be null.</param>",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Good idea, added a comment.",
              "createdAt": "2021-05-04T02:11:41Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,24 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;\n+\n         /// <summary>\n         /// Initializes the results with specified items and result.\n         /// </summary>\n         /// <param name=\"items\">The items produced by the target.</param>\n         /// <param name=\"result\">The overall result for the target.</param>\n-        internal TargetResult(TaskItem[] items, WorkUnitResult result)\n+        /// <param name=\"originalBuildEventContext\">The original build event context from when the target was first built, if available. Can be null.</param>",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to stick the SkipReason in TargetResult as well? Feels like the API would be more complete if a user can ask a TargetResult if it represents a skipped target or not. Or maybe have an OriginalTargetResult instead of the OriginalBuildEventContext, and then put a BuildEventContext in all of them?",
              "createdAt": "2021-05-04T17:48:29Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,30 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Can a TargetResult represent a skipped target? I thought it always represents the original target?",
              "createdAt": "2021-05-04T17:50:12Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,30 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "A BuildEventContext is a well-known \"currency\" type that can float around everywhere and is understood by node packet translator, loggers, etc. A TargetResult is not defined in Framework (but in MS.Build.dll) so it's not as suitable as a \"currency\" that everyone understands.",
              "createdAt": "2021-05-04T17:51:28Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,30 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "All good points :)",
              "createdAt": "2021-05-04T18:16:28Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -44,17 +44,30 @@ public class TargetResult : ITargetResult, ITranslatable\n         /// </summary>\n         private CacheInfo _cacheInfo;\n \n+        /// <summary>\n+        /// The (possibly null) <see cref=\"BuildEventContext\"/> from the original target build\n+        /// </summary>\n+        private BuildEventContext _originalBuildEventContext;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}