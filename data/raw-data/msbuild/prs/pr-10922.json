{
  "number": 10922,
  "title": "formatting fix according to IDE0055",
  "body": "### Context\r\nI've had some issues with code review formatting suggestions. Most of those were avoidable via rule IDE0055 which is only a suggestion. This is a first rounds of changes to then hopefully make IDE0055.severity = warning toggle possible.\r\n\r\n### Changes Made\r\nFormatting fixes.\r\n\r\n### Testing\r\nNo functionality has changed. Only formatting. Our current tests should still apply.\r\n\r\n### Notes\r\nFirst commit is via hand, second via VS cleanup feature that I found later.",
  "state": "MERGED",
  "createdAt": "2024-11-01T15:00:16Z",
  "updatedAt": "2024-11-07T08:54:07Z",
  "closedAt": "2024-11-07T08:54:05Z",
  "mergedAt": "2024-11-07T08:54:05Z",
  "additions": 207,
  "deletions": 199,
  "changedFiles": 77,
  "headRefName": "formatting-fix-vol1",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2d27b9168448a4f8098079187dc98719396bffe8",
          "message": "formatting fix according to IDE0055",
          "committedDate": "2024-11-01T14:50:19Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "9689818342e1e0f6bf64b79ffe17a76eb866681a",
          "message": "remainder of formatting fixes for the rule IDE0055",
          "committedDate": "2024-11-01T14:59:25Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "885f53a4f1fc8444d34f3a2dc4a31f568ac6055c",
          "message": "Update src/Build/BuildCheck/Infrastructure/CheckWrapper.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-11-06T12:08:16Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "174477bd62a20e35432cd0775be995d61a859bcd",
          "message": "Update src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-11-06T14:11:29Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "9b96d4334d2088dcb64dd9a95cb5a26dda5a9df2",
          "message": "two minor changes",
          "committedDate": "2024-11-06T14:19:10Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "b0181115fdd9464c51459fd80adb38405b4fb170",
          "message": "Merge branch 'main' into formatting-fix-vol1",
          "committedDate": "2024-11-06T14:19:34Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd actually just fully delete this one\r\n```suggestion\r\n```",
              "createdAt": "2024-11-04T16:02:53Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -131,7 +131,7 @@ private void AddDiagnostic(CheckConfigurationEffective configurationEffective)\n \n         switch (configurationEffective.Severity)\n         {\n-            \n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this really the canonical style? I definitely expected the way it was before.",
              "createdAt": "2024-11-04T16:03:31Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2763,7 +2763,7 @@ private static IEnumerable<ProjectItemElement> GetItemElementsThatMightAffectIte\n                         itemElement.RemoveLocation == null);\n \n                 // add the include operation that created the project item element\n-                return [item.Xml, ..relevantElementsAfterInclude];\n+                return [item.Xml, .. relevantElementsAfterInclude];",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It surprised me too, but yes, this is what the rule requested. I recall that I've done this one manually at least on one occasion. Took me a while to figure out what it wanted.\r\nCode modified with this PR passes through build.cmd without warnings so it should be correct - as least as far as the .editorconfig is concerned.",
              "createdAt": "2024-11-05T10:03:07Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2763,7 +2763,7 @@ private static IEnumerable<ProjectItemElement> GetItemElementsThatMightAffectIte\n                         itemElement.RemoveLocation == null);\n \n                 // add the include operation that created the project item element\n-                return [item.Xml, ..relevantElementsAfterInclude];\n+                return [item.Xml, .. relevantElementsAfterInclude];",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a separate rule for \"only ever one blank line\"? I'd just delete these . . . but not a big deal, this PR is a strict improvement.",
              "createdAt": "2024-11-04T16:04:52Z",
              "path": "src/BuildCheck.UnitTests/EditorConfig_Tests.cs",
              "diffHunk": "@@ -1038,7 +1038,7 @@ public void LongLines()\n             properties);\n     }\n \n-    \n+",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "[doesn't seem so, here is the list.](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options#new-line-options)\r\ninteresting and kind of surprising.",
              "createdAt": "2024-11-05T10:03:42Z",
              "path": "src/BuildCheck.UnitTests/EditorConfig_Tests.cs",
              "diffHunk": "@@ -1038,7 +1038,7 @@ public void LongLines()\n             properties);\n     }\n \n-    \n+",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Looks like there's `dotnet_style_allow_multiple_blank_lines_experimental` but no concrete plans to make it non-`experimental`: https://github.com/dotnet/roslyn/issues/60539.",
              "createdAt": "2024-11-05T16:14:58Z",
              "path": "src/BuildCheck.UnitTests/EditorConfig_Tests.cs",
              "diffHunk": "@@ -1038,7 +1038,7 @@ public void LongLines()\n             properties);\n     }\n \n-    \n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            Exception e = (Exception)Activator.CreateInstance(\r\n            exceptionType, \r\n            BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance,\r\n            null, \r\n            new object[] { \"msg\", new GenericBuildTransferredException() },\r\n            System.Globalization.CultureInfo.CurrentCulture);\r\n```",
              "createdAt": "2024-11-06T13:07:16Z",
              "path": "src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs",
              "diffHunk": "@@ -258,7 +258,7 @@ public static IEnumerable<object[]> GetBuildExceptionsAsTestData()\n         [MemberData(nameof(GetBuildExceptionsAsTestData))]\n         public void TestSerializationOfBuildExceptions(Type exceptionType)\n         {\n-            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[]{\"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);\n+            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[] { \"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Is it ok if I do one more indent there to make the createInstance parameters more pronounced?:\r\n```\r\nException e = (Exception)Activator.CreateInstance(\r\n    exceptionType,\r\n    BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance,\r\n    null,\r\n    new object[] { \"msg\", new GenericBuildTransferredException() },\r\n    System.Globalization.CultureInfo.CurrentCulture);\r\n```",
              "createdAt": "2024-11-06T14:18:12Z",
              "path": "src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs",
              "diffHunk": "@@ -258,7 +258,7 @@ public static IEnumerable<object[]> GetBuildExceptionsAsTestData()\n         [MemberData(nameof(GetBuildExceptionsAsTestData))]\n         public void TestSerializationOfBuildExceptions(Type exceptionType)\n         {\n-            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[]{\"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);\n+            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[] { \"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yeah, I think that looks better.",
              "createdAt": "2024-11-06T14:53:26Z",
              "path": "src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs",
              "diffHunk": "@@ -258,7 +258,7 @@ public static IEnumerable<object[]> GetBuildExceptionsAsTestData()\n         [MemberData(nameof(GetBuildExceptionsAsTestData))]\n         public void TestSerializationOfBuildExceptions(Type exceptionType)\n         {\n-            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[]{\"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);\n+            Exception e = (Exception)Activator.CreateInstance(exceptionType, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.CreateInstance | BindingFlags.Instance, null, new object[] { \"msg\", new GenericBuildTransferredException() }, System.Globalization.CultureInfo.CurrentCulture);",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we just put the semicolon on the above line?",
              "createdAt": "2024-11-06T13:09:56Z",
              "path": "src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs",
              "diffHunk": "@@ -771,7 +771,7 @@ public void TestAfterTargetsEmpty()\n             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);\n             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);\n             (string name, TargetBuiltReason reason)[] target = { (\"Build\", TargetBuiltReason.None) }\n-;            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);\n+; BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      }
    ]
  }
}