{
  "number": 6465,
  "title": "Building a subset of a VS solution at the command line causes MSB4057",
  "body": "Fixes #6373\r\n\r\n### Summary\r\n\r\nSolution metaprojects should have a target for each project they contain, so that you can build a single project or set of projects in the context of the solution. A regression in 16.10 means that instead, specifying a project name as a target when building a solution attempts to build a target with that name for every project in the solution.\r\n\r\n### Customer impact\r\nCustomers cannot build a subset of a solution by specifying a project between #6282 and this PR.\r\n\r\n### Regression?\r\nYes, from 16.9. This bug was introduced in #6282. The critical line is line 786 of SolutionProjectGenerator, though all similar instances were reverted in this case. Note that as #6282 is an agglomeration of functionally unrelated changes, no other files in #6282 relied on the changes in SolutionProjectGenerator.\r\n\r\n### Changes Made\r\nReverted the part of #6282 using Except incorrectly, i.e., the part in SolutionProjectGenerator, and added a test.\r\n\r\n### Testing\r\nCreated a unit test that fails before the other changes in this PR and succeeds afterwards. The unit test mimics but simplifies the customer's repro. \r\n\r\n### Risk\r\nLow. Revert to prior implementation.",
  "state": "MERGED",
  "createdAt": "2021-05-19T23:02:26Z",
  "updatedAt": "2021-06-08T03:51:38Z",
  "closedAt": "2021-05-20T19:58:50Z",
  "mergedAt": "2021-05-20T19:58:50Z",
  "additions": 48,
  "deletions": 7,
  "changedFiles": 3,
  "headRefName": "fix-except-cache-problem",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b00d82cd845851c4c3f8373178da5c79f5ff2810",
          "message": "Do not use Exclude\n\nExclude takes a snapshot of what we're excluding. We change the Enumerable mid-enumeration, which makes that invalid.",
          "committedDate": "2021-05-19T23:41:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94ce625ce7df557c134a10da5bc0a2f137fce888",
          "message": "Add test",
          "committedDate": "2021-05-19T23:41:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6a27ddb46d87723e62806b67cbc54b6c64e2912",
          "message": "Bump version to 16.10.1",
          "committedDate": "2021-05-20T19:20:10Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "it seems that using the \"rebuild\" switch is working as a workaround\r\n\r\nmsbuild solution.sln -t project:rebuild ",
        "createdAt": "2021-05-31T20:07:51Z",
        "author": {
          "login": "elikrief"
        }
      },
      {
        "body": "Will this be released in 16.10.1? We have tests and things that are hitting this bug.\r\nThanks!",
        "createdAt": "2021-06-02T20:04:23Z",
        "author": {
          "login": "ben-may"
        }
      },
      {
        "body": "@ben-may Yes, it's in the internal builds and will be in the public 16.10.1.",
        "createdAt": "2021-06-02T20:06:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks!",
        "createdAt": "2021-06-02T22:36:43Z",
        "author": {
          "login": "ben-may"
        }
      },
      {
        "body": "We've hit this issue with Pipeline builds in Azure DevOps as you've updated your build agents. When will the fix be deployed to Azure?",
        "createdAt": "2021-06-08T03:51:03Z",
        "author": {
          "login": "john-hynes"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we extract method that returns the enumerable? And use it in four places? And add a detailed comment explaining that it has to be lazy because evidently the traversalInstance.Targets contents changes during enumeration? It's a tricky spot.",
              "createdAt": "2021-05-19T23:24:46Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "also need to pay attention to how Keys behaves - is it returning the live collection or a snapshot of the keys?",
              "createdAt": "2021-05-19T23:25:24Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Extract method might be dicey - maybe better keep as is for simplicity... just add comments? You decide",
              "createdAt": "2021-05-19T23:26:21Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I want this to be as small of a change and as safe of a change as possible, since this is going into 16.10 rather than 17.0. This is a straight revert of the relevant part of the commit that caused the issue, which is safest in my opinion. Adding a comment is a good plan, though\u2014I'll just add it for the first case, since that's the only one that I _know_ should be just in time.",
              "createdAt": "2021-05-19T23:38:36Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Agreed on keeping this to a revert. Can extract as follow up in a future milestone if that's better.",
              "createdAt": "2021-05-20T00:02:58Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, let\u2019s not extract, it was just a knee jerk reaction of seeing the changes in four places. All good!",
              "createdAt": "2021-05-20T00:17:20Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -782,7 +782,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))\n+                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}