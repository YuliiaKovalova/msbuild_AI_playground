{
  "number": 8380,
  "title": "Add a comment to all sources under src/Deprecated",
  "body": "### Context\r\n\r\nI regularly find myself making changes to files without realizing they are in the deprecated part of the tree. Having a clear \"you're not supposed to be here\" indicator would save me time.\r\n\r\n### Changes Made\r\n\r\nAdded a comment to all C# files under src/Deprecated. This should help in cases when the developer opens the file by name (e.g. using a GoToFile IDE functionality).\r\n\r\n### Testing\r\n\r\n`git diff --stat` to make sure all files got exactly +4 lines.\r\n\r\n### Notes\r\n\r\n- The change was made with a script that preserves the BOM in the files.\r\n- The comment is a minor rewording of `src/Deprecated/README.md`.\r\n- I sometimes get to these files using FindInFiles IDE functionality which immediately scrolls the file to the hit line so this comment won't help.",
  "state": "MERGED",
  "createdAt": "2023-01-31T20:59:20Z",
  "updatedAt": "2023-02-08T08:44:41Z",
  "closedAt": "2023-02-08T08:44:41Z",
  "mergedAt": "2023-02-08T08:44:41Z",
  "additions": 1208,
  "deletions": 0,
  "changedFiles": 302,
  "headRefName": "deprecated-source-warning",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "306e7984cd30891651883f1eeed3d4795a462da5",
          "message": "Add a comment to all sources under src/Deprecated",
          "committedDate": "2023-01-31T19:56:11Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Here it is, quick and dirty:\r\n\r\n```C#\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nstring[] linesToAdd =\r\n{\r\n    \"// THE ASSEMBLY BUILT FROM THIS SOURCE FILE HAS BEEN DEPRECATED FOR YEARS. IT IS BUILT ONLY TO PROVIDE\",\r\n    \"// BACKWARD COMPATIBILITY FOR API USERS WHO HAVE NOT YET MOVED TO UPDATED APIS. PLEASE DO NOT SEND PULL\",\r\n    \"// REQUESTS THAT CHANGE THIS FILE WITHOUT FIRST CHECKING WITH THE MAINTAINERS THAT THE FIX IS REQUIRED.\"\r\n};\r\n\r\nif (args.Length != 1)\r\n{\r\n    Console.WriteLine($\"Usage: {Process.GetCurrentProcess().ProcessName} <directory>\");\r\n    return;\r\n}\r\n\r\nforeach (var file in Directory.GetFiles(args[0], \"*.cs\", SearchOption.AllDirectories))\r\n{\r\n    var tmpFile = file + \".tmp\";\r\n    TransformFile(file, tmpFile, linesToAdd);\r\n\r\n    File.Delete(file);\r\n    File.Move(tmpFile, file);\r\n}\r\n\r\n// From https://stackoverflow.com/questions/3825390/effective-way-to-find-any-files-encoding\r\nstatic Encoding GetEncoding(string filename)\r\n{\r\n    // Read the BOM\r\n    var bom = new byte[4];\r\n    using (var file = new FileStream(filename, FileMode.Open, FileAccess.Read))\r\n    {\r\n        file.Read(bom, 0, 4);\r\n    }\r\n\r\n    // Analyze the BOM\r\n    if (bom[0] == 0x2b && bom[1] == 0x2f && bom[2] == 0x76) return Encoding.UTF7;\r\n    if (bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf) return Encoding.UTF8;\r\n    if (bom[0] == 0xff && bom[1] == 0xfe && bom[2] == 0 && bom[3] == 0) return Encoding.UTF32; //UTF-32LE\r\n    if (bom[0] == 0xff && bom[1] == 0xfe) return Encoding.Unicode; //UTF-16LE\r\n    if (bom[0] == 0xfe && bom[1] == 0xff) return Encoding.BigEndianUnicode; //UTF-16BE\r\n    if (bom[0] == 0 && bom[1] == 0 && bom[2] == 0xfe && bom[3] == 0xff) return new UTF32Encoding(true, true);  //UTF-32BE\r\n\r\n    // Assume UTF8 (no BOM) if we reach this point\r\n    return new UTF8Encoding(false);\r\n}\r\n\r\nstatic void TransformFile(string srcFile, string dstFile, string[] linesToAdd)\r\n{\r\n    using StreamReader sr = new StreamReader(srcFile);\r\n    using StreamWriter sw = new StreamWriter(dstFile, true, GetEncoding(srcFile));\r\n\r\n    bool readingLeadingComment = true;\r\n\r\n    string line;\r\n    while ((line = sr.ReadLine()) != null)\r\n    {\r\n        // Skip the license comment at the top\r\n        if (readingLeadingComment && !line.StartsWith(\"//\"))\r\n        {\r\n            sw.WriteLine();\r\n            foreach (var lineToAdd in linesToAdd)\r\n            {\r\n                sw.WriteLine(lineToAdd);\r\n            }\r\n            readingLeadingComment = false;\r\n        }\r\n        sw.WriteLine(line);\r\n    }\r\n}\r\n```\r\n\r\n",
        "createdAt": "2023-02-01T09:12:11Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}