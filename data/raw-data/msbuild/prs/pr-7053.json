{
  "number": 7053,
  "title": "Fix stackoverflowexception",
  "body": "Fixes #6925\r\n\r\n### Context\r\nIf you have a cycle in your ProjectReferences, that should be caught and marked as invalid with MSB4251. If you do a graph build, however, it turns into a StackOverflowException, which is much less clear. This handles circular dependencies, giving the nicer exception.\r\n\r\n### Changes Made\r\nEnsures that each project \"marks\" itself as not to be revisited before the recursive call so that you cannot get endless recursion.\r\n\r\n### Testing\r\nTried with the original repro and got MSB4251 as desired.\r\n\r\n### Notes\r\nThe first commit maintains the previous caching behavior. It isn't obvious to me how much benefit there really is here, and I have yet to test it. In particular, although it could save you a good bit of work, it costs creation and manipulation of a series of intermediate HashSets that are all stored in a Dictionary, so GC can't even get rid of any of them. Without having tested this, I would guess that the first commit would be more efficient for large projects, and the second commit would be more efficient for small projects. I'm happy to hear feedback before I test or just test that hypothesis as reviewers think best.",
  "state": "MERGED",
  "createdAt": "2021-11-19T22:56:10Z",
  "updatedAt": "2021-12-23T04:21:05Z",
  "closedAt": "2021-12-23T04:21:04Z",
  "mergedAt": "2021-12-23T04:21:04Z",
  "additions": 46,
  "deletions": 11,
  "changedFiles": 2,
  "headRefName": "fix-stackoverflowexception",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1b0aea226ac4ecca5bfe0d29ab48a7525e02f17a",
          "message": "Fix StackOverFlowException in graph build\n\nFixes #6925\n\nThis version tries to retain caching behavior.",
          "committedDate": "2021-11-19T22:47:29Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e2b4184770b4ae1ab01340332ba00d2d8c4370d",
          "message": "Cut out extraneous Contains call",
          "committedDate": "2021-11-23T02:21:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84ee8fe6049b7bd8e3cb8930adedf498287c8267",
          "message": "Add test (self-loop)\n\nThere was already a test for self-loops for .NET Framework projects but not .NET Core projects\u2014and that's a relevant difference!",
          "committedDate": "2021-11-23T23:08:17Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac93ec9e5b951a7d0da8b3836044bdbca800fa4b",
          "message": "PR comment + fix cached references",
          "committedDate": "2021-12-07T17:31:08Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "188cc1e66187d48c734b0c2e576a660a8081daf9",
          "message": "Always add children",
          "committedDate": "2021-12-07T17:39:03Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8698cace5b2671570c1366cf5c48588106c85003",
          "message": "Add comment",
          "committedDate": "2021-12-13T17:59:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4550674f152bb53f0ea301c5d130e76bac91620e",
          "message": "Name/comment comments",
          "committedDate": "2021-12-13T23:02:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ac060e38a9802b2ced69f639db63345ef2b7d03",
          "message": "Factor out reference",
          "committedDate": "2021-12-13T23:24:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "NTS: Add tests",
        "createdAt": "2021-11-22T16:13:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "From my testing, it seems like it's about 4% faster without caching for a very simple app (a console with a ProjectReference to a classlib). It's about 5% fasting with caching for OrchardCore. That sounds like the cache is doing surprisingly little, but it might make sense given how many wasted intermediate objects it needs. That said, OrchardCore is the more relevant scenario here, so I think we should keep the cache. I updated the code accordingly. Haven't added tests yet.",
        "createdAt": "2021-11-23T02:22:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Where does the actual throw happen?\r\n\r\nThe CircularDependencyException? That comes from the DetectCycles method\u2014not modified in this PR. This is about preventing a Really Bad exception, letting it go through to the correct one.",
        "createdAt": "2021-12-07T17:49:13Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You can combine both add and contains into one call, by checking the return value on Add. Avoids a hashcode computation and lookupm",
              "createdAt": "2021-11-20T13:12:08Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -162,27 +160,20 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n             {\n-                if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))\n-                {\n-                    return cachedTransitiveReferences;\n-                }\n-                else\n-                {\n-                    var transitiveReferences = new HashSet<ProjectGraphNode>();\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references);\n+                return references;\n+            }\n \n-                    foreach (var referenceInfo in parsedProject.ReferenceInfos)\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences)\n+            {\n+                foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)\n+                {\n+                    if (!transitiveReferences.Contains(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode))\n                     {\n                         transitiveReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode);",
              "author": {
                "login": "Therzok"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    transitiveReferences.UnionWith(cachedTransitiveReferences);\r\n```\r\n\r\n?",
              "createdAt": "2021-12-06T23:16:24Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,42 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)\n             {\n                 if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))\n                 {\n-                    return cachedTransitiveReferences;\n+                    transitiveReferences = transitiveReferences.Concat(cachedTransitiveReferences).ToHashSet();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand what `referencesFromHere` does. Is there another name? Below you call it with `toCache`.",
              "createdAt": "2021-12-06T23:22:26Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,42 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm open to better names.\r\n\r\ntransitiveReferences holds all references we have found so far.\r\ntoCache stores all references (including transitive references) from the project (parsedProject) being considered in one particular recursive call.\r\nreferencesFromHere is like toCache but from the parent project.\r\n\r\nLet's say project A references project B and project C. Project B references project D, and D references E.\r\nWhen B is \"parsedProject,\" referencesFromHere contains all of A's references, so it either does (if C were first) or will (if B comes first) contain C, but C is not part of B's transitive reference tree, hence toCache. toCache, at line 183, is passed as referencesFromHere to the recursive call for project D. D will add both its references (through passing toCache in line 183 (transitive references) and adding direct references directly on line 189. At this point, toCache holds all of D's references exluding itself, so we add it to transitiveReferenceCache.\r\n\r\nAt that point, B's toCache (passed to D as referencesFromHere) has nothing. D's recursive call adds E to it on 195 by adding its own references. Then, in B's recursive call, it adds D on 189. Now it has all of its (direct and indirect) references.\r\n\r\nDoes that make sense? Recursion can be very confusing (and having a bug didn't help).",
              "createdAt": "2021-12-07T17:45:33Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,42 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "```suggestion\r\n            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> traversedReferences, HashSet<ProjectGraphNode> referencesOfReferencingNode)\r\n```\r\n\r\n?",
              "createdAt": "2021-12-13T18:09:06Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,42 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "referencesOfDirectlyReferencingNode?\r\n\r\nI'm a little unsure about either name because it makes it sound like something the recursive calls could use rather than something incomplete to add to.\r\n\r\nincompleteReferencesOfDirectlyReferencingNode?",
              "createdAt": "2021-12-13T18:40:39Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,42 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to transitiveReferenceCache yet, since we haven't finished\r\n```",
              "createdAt": "2021-12-13T18:04:36Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,47 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            // transitiveReferences contains all of the references we've found so far from the initial GetTransitiveProjectReferencesExcludingSelf call.\n+            // referencesFromHere is essentially \"reset\" at each level of the recursion.\n+            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to a cache yet, since we haven't finished",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these accurate?\r\n\r\n```suggestion\r\n                    // We've returned from recursing through all transitive references\r\n                    // of this node, so add that set to the cache\r\n                    transitiveReferenceCache[parsedProject.GraphNode] = toCache;\r\n                    if (referencesFromHere is not null)\r\n                    {\r\n                        // Also add it to the set of transitive dependencies of\r\n                        // the referencing node (which may still be incomplete)\r\n                        referencesFromHere.UnionWith(toCache);\r\n```",
              "createdAt": "2021-12-13T18:13:49Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,47 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            // transitiveReferences contains all of the references we've found so far from the initial GetTransitiveProjectReferencesExcludingSelf call.\n+            // referencesFromHere is essentially \"reset\" at each level of the recursion.\n+            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to a cache yet, since we haven't finished\n+            // finding all the transitive references yet.\n+            // On the other hand, the second is important to help us fill that cache afterwards. The cache is from a particular node to all of its references, including transitive references\n+            // but not including itself, which means we can't include parents as we would if we used transitiveReferences. You can see that for any particular call, it creates a new \"toCache\"\n+            // HashSet that we fill with direct references and pass as referencesFromHere in recursive calls to fill it with transitive references. It is then used to populate the cache.\n+            // Meanwhile, we avoid going into the recursive step at all if transitiveReferences already includes a particular node to avoid a StackOverflowException if there's a loop.\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)\n             {\n                 if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))\n                 {\n-                    return cachedTransitiveReferences;\n+                    transitiveReferences.UnionWith(cachedTransitiveReferences);\n                 }\n                 else\n                 {\n-                    var transitiveReferences = new HashSet<ProjectGraphNode>();\n-\n-                    foreach (var referenceInfo in parsedProject.ReferenceInfos)\n+                    HashSet<ProjectGraphNode> toCache = new();\n+                    foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)\n                     {\n-                        transitiveReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode);\n-\n-                        foreach (var transitiveReference in GetTransitiveProjectReferencesExcludingSelf(allParsedProjects[referenceInfo.ReferenceConfiguration]))\n+                        if (transitiveReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode))\n                         {\n-                            transitiveReferences.Add(transitiveReference);\n+                            GetTransitiveProjectReferencesExcludingSelfHelper(allParsedProjects[referenceInfo.ReferenceConfiguration], transitiveReferences, toCache);\n                         }\n+                        else if (transitiveReferenceCache.TryGetValue(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode, out cachedTransitiveReferences))\n+                        {\n+                            toCache.UnionWith(cachedTransitiveReferences);\n+                        }\n+                        toCache.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode);\n                     }\n \n-                    transitiveReferenceCache.Add(parsedProject.GraphNode, transitiveReferences);\n-\n-                    return transitiveReferences;\n+                    transitiveReferenceCache[parsedProject.GraphNode] = toCache;\n+                    if (referencesFromHere is not null)\n+                    {\n+                        referencesFromHere.UnionWith(toCache);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    HashSet<ProjectGraphNode> referencesFromThisNode = new();\r\n```",
              "createdAt": "2021-12-13T18:27:49Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -161,28 +161,47 @@ private void AddEdgesFromProjectReferenceItems(Dictionary<ConfigurationMetadata,\n             }\n \n             HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProject parsedProject)\n+            {\n+                HashSet<ProjectGraphNode> references = new();\n+                GetTransitiveProjectReferencesExcludingSelfHelper(parsedProject, references, null);\n+                return references;\n+            }\n+\n+            // transitiveReferences contains all of the references we've found so far from the initial GetTransitiveProjectReferencesExcludingSelf call.\n+            // referencesFromHere is essentially \"reset\" at each level of the recursion.\n+            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to a cache yet, since we haven't finished\n+            // finding all the transitive references yet.\n+            // On the other hand, the second is important to help us fill that cache afterwards. The cache is from a particular node to all of its references, including transitive references\n+            // but not including itself, which means we can't include parents as we would if we used transitiveReferences. You can see that for any particular call, it creates a new \"toCache\"\n+            // HashSet that we fill with direct references and pass as referencesFromHere in recursive calls to fill it with transitive references. It is then used to populate the cache.\n+            // Meanwhile, we avoid going into the recursive step at all if transitiveReferences already includes a particular node to avoid a StackOverflowException if there's a loop.\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)\n             {\n                 if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))\n                 {\n-                    return cachedTransitiveReferences;\n+                    transitiveReferences.UnionWith(cachedTransitiveReferences);\n                 }\n                 else\n                 {\n-                    var transitiveReferences = new HashSet<ProjectGraphNode>();\n-\n-                    foreach (var referenceInfo in parsedProject.ReferenceInfos)\n+                    HashSet<ProjectGraphNode> toCache = new();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        ProjectGraphNode referencedNode = allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode;\r\n                        if (traversedReferences.Add(referencedNode ))\r\n```\r\n\r\n? And for the other uses here?",
              "createdAt": "2021-12-13T23:15:37Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -169,38 +169,42 @@ HashSet<ProjectGraphNode> GetTransitiveProjectReferencesExcludingSelf(ParsedProj\n \n             // transitiveReferences contains all of the references we've found so far from the initial GetTransitiveProjectReferencesExcludingSelf call.\n             // referencesFromHere is essentially \"reset\" at each level of the recursion.\n-            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to a cache yet, since we haven't finished\n+            // The first is important because if we find a cycle at some point, we need to know not to keep recursing. We wouldn't have added to transitiveReferenceCache yet, since we haven't finished\n             // finding all the transitive references yet.\n             // On the other hand, the second is important to help us fill that cache afterwards. The cache is from a particular node to all of its references, including transitive references\n             // but not including itself, which means we can't include parents as we would if we used transitiveReferences. You can see that for any particular call, it creates a new \"toCache\"\n             // HashSet that we fill with direct references and pass as referencesFromHere in recursive calls to fill it with transitive references. It is then used to populate the cache.\n             // Meanwhile, we avoid going into the recursive step at all if transitiveReferences already includes a particular node to avoid a StackOverflowException if there's a loop.\n-            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> transitiveReferences, HashSet<ProjectGraphNode> referencesFromHere)\n+            void GetTransitiveProjectReferencesExcludingSelfHelper(ParsedProject parsedProject, HashSet<ProjectGraphNode> traversedReferences, HashSet<ProjectGraphNode> incompleteReferencesOfDirectlyReferencingNode)\n             {\n                 if (transitiveReferenceCache.TryGetValue(parsedProject.GraphNode, out HashSet<ProjectGraphNode> cachedTransitiveReferences))\n                 {\n-                    transitiveReferences.UnionWith(cachedTransitiveReferences);\n+                    traversedReferences.UnionWith(cachedTransitiveReferences);\n                 }\n                 else\n                 {\n-                    HashSet<ProjectGraphNode> toCache = new();\n+                    HashSet<ProjectGraphNode> referencesFromThisNode = new();\n                     foreach (ProjectInterpretation.ReferenceInfo referenceInfo in parsedProject.ReferenceInfos)\n                     {\n-                        if (transitiveReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode))\n+                        if (traversedReferences.Add(allParsedProjects[referenceInfo.ReferenceConfiguration].GraphNode))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}