{
  "number": 7203,
  "title": "SA1136 place each enum value on its own line",
  "body": "Relates to #7174\r\nhttps://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1136.md",
  "state": "MERGED",
  "createdAt": "2022-01-02T10:41:38Z",
  "updatedAt": "2022-01-12T21:06:55Z",
  "closedAt": "2022-01-12T18:41:00Z",
  "mergedAt": "2022-01-12T18:41:00Z",
  "additions": 67,
  "deletions": 18,
  "changedFiles": 8,
  "headRefName": "SA1136",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f9d87d4066be23f4a28152455035f8b39a831ad0",
          "message": "SA1136 place each enum value on its own line",
          "committedDate": "2022-01-02T10:41:11Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65d418db109ea662d1bf9a384223b5b252e25601",
          "message": "Fixes from code review",
          "committedDate": "2022-01-03T02:39:50Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dde2b3fda22fb450f2bf4ff78b1b7838cda385cb",
          "message": "Fixes from code review",
          "committedDate": "2022-01-03T20:54:06Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e103b1bf39fea6ffec471aa6ceb398336e31088c",
          "message": "revert changes to deprecated",
          "committedDate": "2022-01-03T23:15:26Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd8cebd57365ef12071e3f1992c02d2a05085de0",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-01-04T00:25:15Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7b5bf2d10cc5dc2e6e38a9f4b764c3a0f2347b71",
          "message": "Apply suggestions from code review",
          "committedDate": "2022-01-04T00:27:48Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83e606ced5f2abfcd00674785af8e6137b85e651",
          "message": "Changes from review",
          "committedDate": "2022-01-11T23:08:30Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This one should be manually corrected",
              "createdAt": "2022-01-02T23:58:20Z",
              "path": "src/Tasks.UnitTests/ResolveComReference_Tests.cs",
              "diffHunk": "@@ -753,7 +753,9 @@ public void AxReferenceKnowsItsRCWPiaExists_IncludeVersion()\n             CheckAxReferenceRCWTlbExists(RcwStyle.PreexistingPia /* pass in the PIA reference */, true /* include version in the interop name */);\n         }\n \n-        private enum RcwStyle { GenerateTlb, PreexistingTlb, PreexistingPia };\n+        private enum RcwStyle { GenerateTlb,\n+            PreexistingTlb,\n+            PreexistingPia };",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This one should be manually corrected",
              "createdAt": "2022-01-02T23:58:36Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -16,8 +16,12 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public abstract class GenerateManifestBase : Task\n     {\n-        private enum AssemblyType { Unspecified, Managed, Native, Satellite };\n-        private enum DependencyType { Install, Prerequisite };\n+        private enum AssemblyType { Unspecified,\n+            Managed,\n+            Native,\n+            Satellite };\n+        private enum DependencyType { Install,\n+            Prerequisite };",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This one should be manually corrected",
              "createdAt": "2022-01-02T23:58:39Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -16,8 +16,12 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public abstract class GenerateManifestBase : Task\n     {\n-        private enum AssemblyType { Unspecified, Managed, Native, Satellite };\n-        private enum DependencyType { Install, Prerequisite };\n+        private enum AssemblyType { Unspecified,\n+            Managed,\n+            Native,\n+            Satellite };",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This one should be manually corrected",
              "createdAt": "2022-01-02T23:58:45Z",
              "path": "src/Tasks/GenerateApplicationManifest.cs",
              "diffHunk": "@@ -17,7 +17,8 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public sealed class GenerateApplicationManifest : GenerateManifestBase\n     {\n-        private enum _ManifestType { Native, ClickOnce }\n+        private enum _ManifestType { Native,\n+            ClickOnce }",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This one should be manually corrected",
              "createdAt": "2022-01-02T23:58:46Z",
              "path": "src/Tasks/FormatVersion.cs",
              "diffHunk": "@@ -17,7 +17,8 @@ namespace Microsoft.Build.Tasks\n     /// </comment>\n     public sealed class FormatVersion : TaskExtension\n     {\n-        private enum _FormatType { Version, Path }\n+        private enum _FormatType { Version,\n+            Path }",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd All the enums in this pull request should use the consistent style for C# projects (Allman-style braces, no extraneous semicolon). I would encourage, but not require, the use of a trailing comma on the final enum item. Here's the result of all three suggestions applied to this case:\r\n\r\n```suggestion\r\n        private enum RcwStyle\r\n        {\r\n            GenerateTlb,\r\n            PreexistingTlb,\r\n            PreexistingPia,\r\n        }\r\n```",
              "createdAt": "2022-01-03T16:34:39Z",
              "path": "src/Tasks.UnitTests/ResolveComReference_Tests.cs",
              "diffHunk": "@@ -753,7 +753,11 @@ public void AxReferenceKnowsItsRCWPiaExists_IncludeVersion()\n             CheckAxReferenceRCWTlbExists(RcwStyle.PreexistingPia /* pass in the PIA reference */, true /* include version in the interop name */);\n         }\n \n-        private enum RcwStyle { GenerateTlb, PreexistingTlb, PreexistingPia };\n+        private enum RcwStyle {\n+            GenerateTlb,\n+            PreexistingTlb,\n+            PreexistingPia\n+        };",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": "> \r\n\r\nDone.",
              "createdAt": "2022-01-03T20:54:49Z",
              "path": "src/Tasks.UnitTests/ResolveComReference_Tests.cs",
              "diffHunk": "@@ -753,7 +753,11 @@ public void AxReferenceKnowsItsRCWPiaExists_IncludeVersion()\n             CheckAxReferenceRCWTlbExists(RcwStyle.PreexistingPia /* pass in the PIA reference */, true /* include version in the interop name */);\n         }\n \n-        private enum RcwStyle { GenerateTlb, PreexistingTlb, PreexistingPia };\n+        private enum RcwStyle {\n+            GenerateTlb,\n+            PreexistingTlb,\n+            PreexistingPia\n+        };",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra semicolon; no trailing comma",
              "createdAt": "2022-01-04T00:21:51Z",
              "path": "src/Build/Evaluation/Conditionals/Token.cs",
              "diffHunk": "@@ -32,11 +32,24 @@ internal sealed class Token\n         /// </summary>\n         internal enum TokenType\n         {\n-            Comma, LeftParenthesis, RightParenthesis,\n-            LessThan, GreaterThan, LessThanOrEqualTo, GreaterThanOrEqualTo,\n-            And, Or,\n-            EqualTo, NotEqualTo, Not,\n-            Property, String, Numeric, ItemList, ItemMetadata, Function,\n+            Comma,\n+            LeftParenthesis,\n+            RightParenthesis,\n+            LessThan,\n+            GreaterThan,\n+            LessThanOrEqualTo,\n+            GreaterThanOrEqualTo,\n+            And,\n+            Or,\n+            EqualTo,\n+            NotEqualTo,\n+            Not,\n+            Property,\n+            String,\n+            Numeric,\n+            ItemList,\n+            ItemMetadata,\n+            Function,",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            NonMultitargeting,\r\n```",
              "createdAt": "2022-01-04T00:21:59Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -40,7 +40,9 @@ private ProjectInterpretation()\n \n         internal enum ProjectType\n         {\n-            OuterBuild, InnerBuild, NonMultitargeting\n+            OuterBuild,\n+            InnerBuild,\n+            NonMultitargeting",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private enum RcwStyle\r\n        {\r\n```",
              "createdAt": "2022-01-04T00:22:09Z",
              "path": "src/Tasks.UnitTests/ResolveComReference_Tests.cs",
              "diffHunk": "@@ -753,7 +753,11 @@ public void AxReferenceKnowsItsRCWPiaExists_IncludeVersion()\n             CheckAxReferenceRCWTlbExists(RcwStyle.PreexistingPia /* pass in the PIA reference */, true /* include version in the interop name */);\n         }\n \n-        private enum RcwStyle { GenerateTlb, PreexistingTlb, PreexistingPia };\n+        private enum RcwStyle {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        CopyAllFilesIfNotHomeSite,\r\n```\r\nand extra semicolon",
              "createdAt": "2022-01-04T00:22:22Z",
              "path": "src/Tasks/BootstrapperUtil/Product.cs",
              "diffHunk": "@@ -12,7 +12,9 @@ namespace Microsoft.Build.Tasks.Deployment.Bootstrapper\n {\n     internal enum CopyAllFilesType\n     {\n-        CopyAllFilesFalse, CopyAllFilesTrue, CopyAllFilesIfNotHomeSite\n+        CopyAllFilesFalse,\n+        CopyAllFilesTrue,\n+        CopyAllFilesIfNotHomeSite",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private enum _FormatType\r\n        {\r\n```",
              "createdAt": "2022-01-04T00:22:28Z",
              "path": "src/Tasks/FormatVersion.cs",
              "diffHunk": "@@ -17,7 +17,10 @@ namespace Microsoft.Build.Tasks\n     /// </comment>\n     public sealed class FormatVersion : TaskExtension\n     {\n-        private enum _FormatType { Version, Path }\n+        private enum _FormatType {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private enum _ManifestType\r\n        {\r\n```",
              "createdAt": "2022-01-04T00:22:35Z",
              "path": "src/Tasks/GenerateApplicationManifest.cs",
              "diffHunk": "@@ -17,7 +17,10 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public sealed class GenerateApplicationManifest : GenerateManifestBase\n     {\n-        private enum _ManifestType { Native, ClickOnce }\n+        private enum _ManifestType {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private enum AssemblyType\r\n        {\r\n```",
              "createdAt": "2022-01-04T00:22:43Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -16,8 +16,17 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public abstract class GenerateManifestBase : Task\n     {\n-        private enum AssemblyType { Unspecified, Managed, Native, Satellite };\n-        private enum DependencyType { Install, Prerequisite };\n+        private enum AssemblyType {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private enum DependencyType\r\n        {\r\n```",
              "createdAt": "2022-01-04T00:22:51Z",
              "path": "src/Tasks/GenerateManifestBase.cs",
              "diffHunk": "@@ -16,8 +16,17 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public abstract class GenerateManifestBase : Task\n     {\n-        private enum AssemblyType { Unspecified, Managed, Native, Satellite };\n-        private enum DependencyType { Install, Prerequisite };\n+        private enum AssemblyType {\n+            Unspecified,\n+            Managed,\n+            Native,\n+            Satellite,\n+        }\n+\n+        private enum DependencyType {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        Unknown,\r\n```\r\nand extra semicolon",
              "createdAt": "2022-01-04T00:23:05Z",
              "path": "src/Tasks/StrongNameUtils.cs",
              "diffHunk": "@@ -18,7 +18,10 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     internal enum StrongNameLevel\n     {\n-        None, DelaySigned, FullySigned, Unknown\n+        None,\n+        DelaySigned,\n+        FullySigned,\n+        Unknown",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Team triage: The original version was grouped logically; can you insert some spaces between those sets to make it easier to follow?",
              "createdAt": "2022-01-10T16:10:25Z",
              "path": "src/Build/Evaluation/Conditionals/Token.cs",
              "diffHunk": "@@ -32,13 +32,26 @@ internal sealed class Token\n         /// </summary>\n         internal enum TokenType\n         {\n-            Comma, LeftParenthesis, RightParenthesis,\n-            LessThan, GreaterThan, LessThanOrEqualTo, GreaterThanOrEqualTo,\n-            And, Or,\n-            EqualTo, NotEqualTo, Not,\n-            Property, String, Numeric, ItemList, ItemMetadata, Function,\n-            EndOfInput\n-        };\n+            Comma,",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}