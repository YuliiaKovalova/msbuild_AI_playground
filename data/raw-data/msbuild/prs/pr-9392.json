{
  "number": 9392,
  "title": "Fix the ui language override helper method for input language \"en\" ",
  "body": "Fixes #9254\r\n\r\n### Context\r\nDOTNET_CLI_UI_LANGUAGE enviroment variable was not respected when TwoLetterISOLanguageName of CultureInfo was equal to en. \r\n\r\n### Changes Made\r\nRemoved the additional check for described in the context case\r\n\r\n### Testing\r\nCase covered by unit test of the method additionally to testing in debug mode. \r\n",
  "state": "MERGED",
  "createdAt": "2023-11-03T14:21:36Z",
  "updatedAt": "2024-06-14T10:05:30Z",
  "closedAt": "2023-11-06T16:19:51Z",
  "mergedAt": "2023-11-06T16:19:51Z",
  "additions": 58,
  "deletions": 20,
  "changedFiles": 3,
  "headRefName": "dev/f-alizada/overriden-languagen-envvar",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "878f0728a214c0af6a37383104c43988b64c70c4",
          "message": "Fix the ui language override helper method",
          "committedDate": "2023-11-02T15:34:51Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a855809cef0b2969ff64a042173b07e8aac426ba",
          "message": "Update the skip logic for test",
          "committedDate": "2023-11-03T13:04:37Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a3af1259e42871134b437f2d0a53ad4e0378652",
          "message": "Address PR comment, use Shouldly for assertions",
          "committedDate": "2023-11-05T14:34:58Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: for new tests we generally prefer Shouldly assertions (they have much nicer errors than the default xunit ones):\r\n\r\n```suggestion\r\n            EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding().ShouldBeEquivalentTo(new CultureInfo(expectedLanguage));\r\n```\r\n\r\n(and a `using Shouldly;`, and for the other assertions too please)",
              "createdAt": "2023-11-03T21:54:35Z",
              "path": "src/Utilities.UnitTests/EncodingUtilities_Tests.cs",
              "diffHunk": "@@ -0,0 +1,57 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Globalization;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    public sealed class EncodingUtilities_Tests\n+    {\n+        /// <summary>\n+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded \n+        /// in the current system encoding.\n+        /// </summary>\n+        [WindowsOnlyFact]\n+        public void CanEncodeTest()\n+        {\n+            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;\n+\n+            string nonAnsiCharacters = \"\\u521B\\u5EFA\";\n+            string pathWithAnsiCharacters = @\"c:\\windows\\system32\\cmd.exe\";\n+\n+            Assert.False(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters));\n+            Assert.True(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters));\n+        }\n+\n+        /// <summary>\n+        /// Test for bug where the MSBuild does not respect \"en\" CultureInfo\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"en\", \"en\")]\n+        [InlineData(\"jp\", \"jp\")]\n+        [InlineData(\"fr\", \"fr\")]\n+        public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOverriddenLanguage(string inputLanguage, string expectedLanguage)\n+        {\n+            if (!EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())\n+            {\n+                return; // Do not run test to replicate the behaviour of the invoking method\n+            }\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+            using TestEnvironment testEnvironment = TestEnvironment.Create();\n+            \n+            // Override the ui language by setting environment variable\n+            testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, inputLanguage);\n+\n+            var result = EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding();\n+            Assert.Equal(new CultureInfo(expectedLanguage), result);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you for the review! I have addressed the comment. \r\nWill it make sense to mentioned 'using Shouldly' in the documentation: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Contributing-Code.md as one of the bullet points within the scope of this PR?  ",
              "createdAt": "2023-11-05T14:38:48Z",
              "path": "src/Utilities.UnitTests/EncodingUtilities_Tests.cs",
              "diffHunk": "@@ -0,0 +1,57 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Globalization;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    public sealed class EncodingUtilities_Tests\n+    {\n+        /// <summary>\n+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded \n+        /// in the current system encoding.\n+        /// </summary>\n+        [WindowsOnlyFact]\n+        public void CanEncodeTest()\n+        {\n+            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;\n+\n+            string nonAnsiCharacters = \"\\u521B\\u5EFA\";\n+            string pathWithAnsiCharacters = @\"c:\\windows\\system32\\cmd.exe\";\n+\n+            Assert.False(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters));\n+            Assert.True(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters));\n+        }\n+\n+        /// <summary>\n+        /// Test for bug where the MSBuild does not respect \"en\" CultureInfo\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"en\", \"en\")]\n+        [InlineData(\"jp\", \"jp\")]\n+        [InlineData(\"fr\", \"fr\")]\n+        public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOverriddenLanguage(string inputLanguage, string expectedLanguage)\n+        {\n+            if (!EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())\n+            {\n+                return; // Do not run test to replicate the behaviour of the invoking method\n+            }\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+            using TestEnvironment testEnvironment = TestEnvironment.Create();\n+            \n+            // Override the ui language by setting environment variable\n+            testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, inputLanguage);\n+\n+            var result = EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding();\n+            Assert.Equal(new CultureInfo(expectedLanguage), result);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Let's do that in a separate PR.",
              "createdAt": "2023-11-06T16:06:04Z",
              "path": "src/Utilities.UnitTests/EncodingUtilities_Tests.cs",
              "diffHunk": "@@ -0,0 +1,57 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Globalization;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    public sealed class EncodingUtilities_Tests\n+    {\n+        /// <summary>\n+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded \n+        /// in the current system encoding.\n+        /// </summary>\n+        [WindowsOnlyFact]\n+        public void CanEncodeTest()\n+        {\n+            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;\n+\n+            string nonAnsiCharacters = \"\\u521B\\u5EFA\";\n+            string pathWithAnsiCharacters = @\"c:\\windows\\system32\\cmd.exe\";\n+\n+            Assert.False(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters));\n+            Assert.True(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters));\n+        }\n+\n+        /// <summary>\n+        /// Test for bug where the MSBuild does not respect \"en\" CultureInfo\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"en\", \"en\")]\n+        [InlineData(\"jp\", \"jp\")]\n+        [InlineData(\"fr\", \"fr\")]\n+        public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOverriddenLanguage(string inputLanguage, string expectedLanguage)\n+        {\n+            if (!EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())\n+            {\n+                return; // Do not run test to replicate the behaviour of the invoking method\n+            }\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+            using TestEnvironment testEnvironment = TestEnvironment.Create();\n+            \n+            // Override the ui language by setting environment variable\n+            testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, inputLanguage);\n+\n+            var result = EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding();\n+            Assert.Equal(new CultureInfo(expectedLanguage), result);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Got it, thank you! ",
              "createdAt": "2023-11-06T16:18:47Z",
              "path": "src/Utilities.UnitTests/EncodingUtilities_Tests.cs",
              "diffHunk": "@@ -0,0 +1,57 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Globalization;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    public sealed class EncodingUtilities_Tests\n+    {\n+        /// <summary>\n+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded \n+        /// in the current system encoding.\n+        /// </summary>\n+        [WindowsOnlyFact]\n+        public void CanEncodeTest()\n+        {\n+            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;\n+\n+            string nonAnsiCharacters = \"\\u521B\\u5EFA\";\n+            string pathWithAnsiCharacters = @\"c:\\windows\\system32\\cmd.exe\";\n+\n+            Assert.False(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters));\n+            Assert.True(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters));\n+        }\n+\n+        /// <summary>\n+        /// Test for bug where the MSBuild does not respect \"en\" CultureInfo\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"en\", \"en\")]\n+        [InlineData(\"jp\", \"jp\")]\n+        [InlineData(\"fr\", \"fr\")]\n+        public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOverriddenLanguage(string inputLanguage, string expectedLanguage)\n+        {\n+            if (!EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())\n+            {\n+                return; // Do not run test to replicate the behaviour of the invoking method\n+            }\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+            using TestEnvironment testEnvironment = TestEnvironment.Create();\n+            \n+            // Override the ui language by setting environment variable\n+            testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, inputLanguage);\n+\n+            var result = EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding();\n+            Assert.Equal(new CultureInfo(expectedLanguage), result);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}