{
  "number": 7740,
  "title": "Update doc",
  "body": "This PR updates documentation.",
  "state": "MERGED",
  "createdAt": "2022-06-24T08:44:11Z",
  "updatedAt": "2022-07-01T08:34:23Z",
  "closedAt": "2022-07-01T08:34:22Z",
  "mergedAt": "2022-07-01T08:34:22Z",
  "additions": 15,
  "deletions": 9,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/msbuild-server-doc",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5462f7a61a050a66c95cb2889b3ca4f2ce7b95f7",
          "message": "Update doc",
          "committedDate": "2022-06-24T08:39:48Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "30c8c0aa6f4d8b02b1154fcde789134cac230c50",
          "message": "Fixed typo",
          "committedDate": "2022-06-24T08:45:30Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "193699c8c0518359c7aa0f836746cb1184ac5c57",
          "message": "Fixed another typo",
          "committedDate": "2022-06-24T08:49:08Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0dce76ac189ae7d16be1a8aa38e1bbde29c601e",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-28T08:01:23Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "083a2f3e5ab468a122ed55b1b4d511e0f99f2c2b",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-28T08:01:55Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adaa4ceaf670cc8f7eec28932f5ca5abc6e72821",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-28T08:02:42Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e94f12a4ba35c49b66c7679fa4bd4a43c12c8738",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-28T08:03:01Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4509d1b520377fe10f8106569730c0846a412dfa",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-28T08:05:12Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d040f29a712b8b633209d703bdd8e5b5431883cb",
          "message": "Update documentation/MSBuild-Server.md\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-06-30T07:18:18Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c560dd9daea3d871c52983bc313bb2d30507983f",
          "message": "Resolving comments",
          "committedDate": "2022-06-30T08:52:23Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nMSBuild Server nodes accept build requests from clients and use worker nodes in the current fashion to build projects. The main purpose of the server node is to preserve caches between builds and avoid expensive MSBuild process start operations during build from tools like the .NET SDK.\r\n```",
              "createdAt": "2022-06-27T14:40:58Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,26 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK,\n+and preserve caches between builds.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThe primary ways to use MSBuild are via Visual Studio and via the CLI using the `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio because Visual studio itself works like MSBuild Server. For the CLI, the server functionality is enabled by default and can be disabled by setting the `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.\r\n```",
              "createdAt": "2022-06-27T14:42:27Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,26 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK,\n+and preserve caches between builds.\n+\n+## Usage\n+\n+The primary ways to use MSBuild are via Visual Studio and via CLI using `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio, becuase Visual studio itself\n+works like MSBuild Server. For CLI is the server functionality enabled by default and can be disabled by setting `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nTo re-enable MSBuild Server, remove the variable or set its value to `0`.\r\n```",
              "createdAt": "2022-06-27T14:42:59Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,26 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK,\n+and preserve caches between builds.\n+\n+## Usage\n+\n+The primary ways to use MSBuild are via Visual Studio and via CLI using `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio, becuase Visual studio itself\n+works like MSBuild Server. For CLI is the server functionality enabled by default and can be disabled by setting `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.\n+In order to re-enable using of MSBuild Server, remove the variable or set the value to `0`.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   - If server is busy or the connection is broken, fall back to previous build behavior\r\n```",
              "createdAt": "2022-06-27T14:43:32Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,26 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK,\n+and preserve caches between builds.\n+\n+## Usage\n+\n+The primary ways to use MSBuild are via Visual Studio and via CLI using `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio, becuase Visual studio itself\n+works like MSBuild Server. For CLI is the server functionality enabled by default and can be disabled by setting `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.\n+In order to re-enable using of MSBuild Server, remove the variable or set the value to `0`.\n \n ## Communication protocol\n \n The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n \n 1. Try to connect to server\n    - If server is not running, start new instance\n-   - If server is busy, fallback to classic build \n+   - If server is busy or the connection is broken, fallback to classic build ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   - Write content to the appropriate output stream (respecting coloring) with the `ServerNodeConsoleWrite` packet\r\n   - After the build completes, the `ServerNodeBuildResult` packet indicates the exit code [and provides other information? Not sure what else]\r\n```\r\n?",
              "createdAt": "2022-06-27T14:48:39Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,26 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK,\n+and preserve caches between builds.\n+\n+## Usage\n+\n+The primary ways to use MSBuild are via Visual Studio and via CLI using `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio, becuase Visual studio itself\n+works like MSBuild Server. For CLI is the server functionality enabled by default and can be disabled by setting `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.\n+In order to re-enable using of MSBuild Server, remove the variable or set the value to `0`.\n \n ## Communication protocol\n \n The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n \n 1. Try to connect to server\n    - If server is not running, start new instance\n-   - If server is busy, fallback to classic build \n+   - If server is busy or the connection is broken, fallback to classic build \n 2. Initiate handshake\n-2. Issue build command with `EntryNodeCommand` packet\n+2. Issue build command with `ServerNodeBuildCommand` packet\n 3. Read packets from pipe\n-   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n-   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+   - When `ServerNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `ServerNodeBuildResult` packet type is recieved, build is done and client writes trace message with exit code",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`ServerNodeBuildResult` indicates how the build finished.\r\n```",
              "createdAt": "2022-06-27T14:49:29Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -34,21 +41,22 @@ Server requires to introduce new packet types for IPC.\n | BuildProcessEnvironment  | IDictionary<String, String>  | Environment variables for current build |\n | Culture                  | CultureInfo                  | The culture value for current build |\n | UICulture                | CultureInfo                  | The UI culture value for current build |\n+| ConsoleConfiguration     | TargetConsoleConfiguration   | Console configuration of target Console at which the output will be rendered |\n \n-`EntryNodeConsoleWrite` contains information for console output.\n+`ServerNodeConsoleWrite` contains information for console output.\n \n | Property name            | Type          | Description |\n |---|---|---|\n | Text                     | String        | The text that is written to the output stream. It includes ANSI escape codes for formatting. |\n | OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |\n \n-`EntryNodeResponse` informs about finished build.\n+`ServerNodeBuildResult` informs about finished build.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\n```suggestion\r\nThe primary ways to use MSBuild are via Visual Studio and via the CLI using the `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio because Visual Studio itself works like MSBuild Server. For the CLI, the server functionality is enabled by default and can be disabled by setting the `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.\r\n```",
              "createdAt": "2022-06-28T16:27:11Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -1,19 +1,24 @@\n # MSBuild Server\n \n-MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+MSBuild Server nodes accept build requests from clients and use worker nodes in the current fashion to build projects. The main purpose of the server node is to preserve caches between builds and avoid expensive MSBuild process start operations during build from tools like the .NET SDK.\n+\n+## Usage\n+\n+The primary ways to use MSBuild are via Visual Studio and via the CLI using the `dotnet build`/`dotnet msbuild` commands. MSBuild Server is not supported in Visual Studio because Visual studio itself works like MSBuild Server. For the CLI, the server functionality is enabled by default and can be disabled by setting the `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER` environment variable to value `1`.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}