{
  "number": 9407,
  "title": "TL: Fix logs appearance from nuget client/credential provider",
  "body": "Fixes #9068\r\n\r\n### Context\r\nBefore this change we were showing specific messages in TL that matched a selected pattern + all the build warnings were displayed at the final build stage.\r\n\r\n### Changes Made\r\nIntroduce immediate print functionality for blocking messages from nuget client/credential provider\r\n\r\n### Testing\r\nManual + UTs\r\n\r\n### Notes\r\nThe implementation will be reconsidered after introducing TL API",
  "state": "MERGED",
  "createdAt": "2023-11-08T16:22:33Z",
  "updatedAt": "2023-11-15T12:55:36Z",
  "closedAt": "2023-11-15T12:55:36Z",
  "mergedAt": "2023-11-15T12:55:36Z",
  "additions": 159,
  "deletions": 4,
  "changedFiles": 11,
  "headRefName": "dev/ykovalova/fix_nuget_prompt_appearance",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "67b804e54e5312fafdd4ffd82c1d2922eeefd7a7",
          "message": "fix nuget message appearance",
          "committedDate": "2023-11-08T16:16:16Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "179e48737d52484f33daee29f06c37985b9427c9",
          "message": "fix review comments",
          "committedDate": "2023-11-09T16:57:33Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6065898710eca199561f1de3c09a5db4be2e854f",
          "message": "add unit tests",
          "committedDate": "2023-11-09T18:01:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a150e71b213d21e611f71912553291d60899387c",
          "message": "fix comments",
          "committedDate": "2023-11-09T18:36:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14d7d68fd7aef371cc6edabd96e200205bbf1ea0",
          "message": "use full source-generator",
          "committedDate": "2023-11-10T12:49:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fc6e65fcb3ff8ad5f31f999ce4cc9cbf855077e",
          "message": "fix review comments",
          "committedDate": "2023-11-13T16:15:54Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc343ef1141494bc731389ae31be0f17c2310aa6",
          "message": "fix tests",
          "committedDate": "2023-11-13T16:40:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4804d3bbf901b9899366f33b50beedf5ee23fa10",
          "message": "fix review comment",
          "committedDate": "2023-11-14T13:04:43Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52e49cc6cb02d21d22807b3cf36ce861616b4abc",
          "message": "address more comments",
          "committedDate": "2023-11-14T13:16:51Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Looks great, thank you. From UX perspective I wonder if the output shouldn't contain the name of the project because it looks like we're currently printing just the bare message which is going to land at a random line. It may be mistakenly attributed to the last project that finished building. cc @baronfel\r\n\r\nI see what you mean, but just for illustration:\r\nThe example of output for DeviceFlow\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/7a8dfedd-06f2-49d0-a9fa-2848079e1429)\r\nand warning message\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/56f7f776-1213-41a1-8e50-0164f564c9af)\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/09f28e06-8341-423b-877c-6103f4caeee6)\r\n\r\nSince it's a part of the Restore target that contains the ProjectName, I am not fully confident we need to include this information in the immediate messages. ",
        "createdAt": "2023-11-15T10:24:22Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "I see, it's always restore-only. In that case, please ignore me!",
        "createdAt": "2023-11-15T10:33:08Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I see, it's always restore-only. In that case, please ignore me!\r\n\r\nLet's wait for @baronfel anyway :)",
        "createdAt": "2023-11-15T10:34:32Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "I agree with @YuliiaKovalova's finding here \ud83d\udc4d",
        "createdAt": "2023-11-15T12:53:01Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: .NET 8 provides a SearchValues<T> structure that, when used in `IndexOfAny` gives massive perf speedups. can you see if that works, since we'll be doing this on every message?",
              "createdAt": "2023-11-08T16:26:38Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "we compile for .net framework too, is it ok to use `IndexOfAny`for .net only? ",
              "createdAt": "2023-11-08T16:29:09Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "SearchValues only applies to sets of individual characters, as far as I can tell.",
              "createdAt": "2023-11-08T16:38:16Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I _think_ if you can convert the string to a span/memory, then `Memory.IndexOfAny(StringValues)` will be much more performant here and on 598 below.",
              "createdAt": "2023-11-08T16:27:44Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -561,6 +564,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     project.OutputPath = outputPath;\n                 }\n             }\n+\n+            // Detect markers that require special attention from a customer.\n+            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I think a regex might actually be the best path forward here (\ud83d\ude31). I don't know another way to  do an equivalent of `IndexOfAny(string[])`. We can use the .NET 8 source-generated ones though!",
              "createdAt": "2023-11-08T16:45:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -561,6 +564,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     project.OutputPath = outputPath;\n                 }\n             }\n+\n+            // Detect markers that require special attention from a customer.\n+            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "so should I switch to regex here?",
              "createdAt": "2023-11-09T09:38:41Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -561,6 +564,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     project.OutputPath = outputPath;\n                 }\n             }\n+\n+            // Detect markers that require special attention from a customer.\n+            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "I think so. Since it's scanning lots of messages I think it's worth pursuing the perf improvements we'd get there.",
              "createdAt": "2023-11-09T11:46:43Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -561,6 +564,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     project.OutputPath = outputPath;\n                 }\n             }\n+\n+            // Detect markers that require special attention from a customer.\n+            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you comment these? Is it that if you're not in interactive, the message will say \"add --interactive\", and if you are in interactive, the message has `[CredentialProvider]`?",
              "createdAt": "2023-11-08T16:33:47Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "\"add --interactive\" falls in `WarningRaised`, and \"[CredentialProvider]\" goes to `MessageRaised`.\r\nIf any of these substrings appears we put it in output immediately:\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/47f608e8-eb0a-464c-a572-98f1937328da)\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/eed5480f-d271-420b-8fbe-03b745f6e11f)\r\n",
              "createdAt": "2023-11-08T17:15:06Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Man I hate that formatting, but it's probably the best we can reasonably do given the free-form nature of the Messages. My ideal long-term fix for this would have different formatting for sure :)\r\n\r\nSide question - do more advanced terminals (iTerm2, Windows Terminal, etc?) make the devicelogin url clickable?",
              "createdAt": "2023-11-08T18:35:12Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Windows Terminal +\r\niTerm2 -\r\nbash -",
              "createdAt": "2023-11-09T11:40:55Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "@baronfel , I removed the coloring, let me know if you desperately want it back ;)",
              "createdAt": "2023-11-09T17:00:06Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -25,6 +25,9 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// </remarks>\n internal sealed class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+    private readonly string[] _immediateMessageMarkers = new[] { \"[CredentialProvider]\", \"--interactive\" };",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why colorize this? It would have just been normal-foreground-color in the legacy logger, right?",
              "createdAt": "2023-11-08T21:13:18Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -848,6 +862,26 @@ private string RenderBuildResult(bool succeeded, bool hasError, bool hasWarning)\n         }\n     }\n \n+    /// <summary>\n+    /// Print a build messages to the output that require special customer's attention.\n+    /// </summary>\n+    /// <param name=\"message\">Build message needed to be shown immediately.</param>\n+    /// <param name=\"severity\">Message severity.</param>\n+    private void RenderImmediateMessage(string message, MessageSeverity severity)\n+    {\n+        string styledMessage = severity switch\n+        {\n+            MessageSeverity.Warning => AnsiCodes.Colorize(message, TerminalColor.Yellow),\n+            MessageSeverity.Blocking => AnsiCodes.Colorize(message, TerminalColor.Blue),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I expected to see this wrapped in something like `EraseNodes()`/`DisplayNodes()`, so that it would be \"as though\" it was emitted and then the live display floated below it. Does the current approach avoid overwriting this message?",
              "createdAt": "2023-11-08T21:34:10Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -848,6 +862,26 @@ private string RenderBuildResult(bool succeeded, bool hasError, bool hasWarning)\n         }\n     }\n \n+    /// <summary>\n+    /// Print a build messages to the output that require special customer's attention.\n+    /// </summary>\n+    /// <param name=\"message\">Build message needed to be shown immediately.</param>\n+    /// <param name=\"severity\">Message severity.</param>\n+    private void RenderImmediateMessage(string message, MessageSeverity severity)\n+    {\n+        string styledMessage = severity switch\n+        {\n+            MessageSeverity.Warning => AnsiCodes.Colorize(message, TerminalColor.Yellow),\n+            MessageSeverity.Blocking => AnsiCodes.Colorize(message, TerminalColor.Blue),\n+            _ => string.Empty,\n+        };\n+\n+        if (!string.IsNullOrEmpty(styledMessage))\n+        {\n+            Terminal.WriteLine(styledMessage);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "typo here: `Immediate` ",
              "createdAt": "2023-11-09T18:11:53Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -595,15 +596,27 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))\n+            if (ImmeidateMessageRaised(message))\n             {\n-                RenderImmediateMessage(message, MessageSeverity.Warning);\n+                RenderImmediateMessage(message);\n             }\n \n             project.AddBuildMessage(MessageSeverity.Warning, message);\n         }\n     }\n \n+    /// <summary>\n+    /// Detectw markers that require special attention from a customer.\n+    /// </summary>\n+    /// <param name=\"message\">Raised event</param>\n+    /// <returns>true if marker is detected.</returns>\n+    private bool ImmeidateMessageRaised(string message)",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "we shouldn't re-create this Regex for each call to this method - we should precompute it once as a class-local value and reuse that precomputed value here.",
              "createdAt": "2023-11-09T18:12:34Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -595,15 +596,27 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n-            if (_immediateMessageMarkers.Any(marker => message.IndexOf(marker, StringComparison.Ordinal) > 0))\n+            if (ImmeidateMessageRaised(message))\n             {\n-                RenderImmediateMessage(message, MessageSeverity.Warning);\n+                RenderImmediateMessage(message);\n             }\n \n             project.AddBuildMessage(MessageSeverity.Warning, message);\n         }\n     }\n \n+    /// <summary>\n+    /// Detectw markers that require special attention from a customer.\n+    /// </summary>\n+    /// <param name=\"message\">Raised event</param>\n+    /// <returns>true if marker is detected.</returns>\n+    private bool ImmeidateMessageRaised(string message)\n+    {\n+        Regex regex = new Regex($\"({_immediateMessagePattern})\");",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider doing the full source-generator thing for .NET 8. Example in #9411.",
              "createdAt": "2023-11-09T21:13:33Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -28,7 +28,7 @@ internal sealed class TerminalLogger : INodeLogger\n {\n     private const string FilePathPattern = \" -> \";\n     private const char PatternSeparator = '|';\n-    private readonly string _immediateMessagePattern = $@\"\\[CredentialProvider\\]{PatternSeparator}--interactive\";\n+    private readonly Regex _immediateMessageRegex = new Regex($@\"\\[CredentialProvider\\]{PatternSeparator}--interactive\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2023-11-10T13:24:02Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -28,7 +28,7 @@ internal sealed class TerminalLogger : INodeLogger\n {\n     private const string FilePathPattern = \" -> \";\n     private const char PatternSeparator = '|';\n-    private readonly string _immediateMessagePattern = $@\"\\[CredentialProvider\\]{PatternSeparator}--interactive\";\n+    private readonly Regex _immediateMessageRegex = new Regex($@\"\\[CredentialProvider\\]{PatternSeparator}--interactive\");",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Will this result in repeating the warning?",
              "createdAt": "2023-11-10T15:18:07Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -586,10 +613,22 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n+            if (ImmediateMessageRaised(message))\n+            {\n+                RenderImmediateMessage(message);\n+            }\n+\n             project.AddBuildMessage(MessageSeverity.Warning, message);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If I don't include it in warning messages, the build result will be different - it is reported as \"success\". \r\nIs it ok? ",
              "createdAt": "2023-11-13T10:06:47Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -586,10 +613,22 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n+            if (ImmediateMessageRaised(message))\n+            {\n+                RenderImmediateMessage(message);\n+            }\n+\n             project.AddBuildMessage(MessageSeverity.Warning, message);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Ah, no, we should report the true status even if there's a duplicate.",
              "createdAt": "2023-11-13T15:46:44Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -586,10 +613,22 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n+            if (ImmediateMessageRaised(message))\n+            {\n+                RenderImmediateMessage(message);\n+            }\n+\n             project.AddBuildMessage(MessageSeverity.Warning, message);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this should be wrapped in `lock (_lock)` so it can't compete with the thread that is updating the \"live\" stuff. That's what the \"immediate\" output for project-complete does.",
              "createdAt": "2023-11-10T15:39:51Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -848,6 +887,19 @@ private string RenderBuildResult(bool succeeded, bool hasError, bool hasWarning)\n         }\n     }\n \n+    /// <summary>\n+    /// Print a build messages to the output that require special customer's attention.\n+    /// </summary>\n+    /// <param name=\"message\">Build message needed to be shown immediately.</param>\n+    /// <param name=\"severity\">Message severity.</param>\n+    private void RenderImmediateMessage(string message)\n+    {\n+        // Calling erase helps to clear the screen before printing the message\n+        // The immediate output will not overlap with node status reporting\n+        EraseNodes();\n+        Terminal.WriteLine(message);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Naming nit: I'd prefer something like `IsImmediateMessage`; `ImmediateMessageRaised` sounds like an event handler to me.",
              "createdAt": "2023-11-10T19:24:14Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -586,10 +613,22 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 threadId: e.ThreadId,\n                 logOutputProperties: null);\n \n+            if (ImmediateMessageRaised(message))\n+            {\n+                RenderImmediateMessage(message);\n+            }\n+\n             project.AddBuildMessage(MessageSeverity.Warning, message);\n         }\n     }\n \n+    /// <summary>\n+    /// Detect markers that require special attention from a customer.\n+    /// </summary>\n+    /// <param name=\"message\">Raised event.</param>\n+    /// <returns>true if marker is detected.</returns>\n+    private bool ImmediateMessageRaised(string message) => ImmediateMessageRegex().IsMatch(message);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can the example string be an exact match for one of the NuGet strings?\r\n\r\nI also considered pulling a resource from the NuGet assemblies but that seems very heavyweight.",
              "createdAt": "2023-11-10T19:25:43Z",
              "path": "src/MSBuild.UnitTests/TerminalLogger_Tests.cs",
              "diffHunk": "@@ -229,6 +237,39 @@ public Task PrintBuildSummary_SucceededWithWarnings()\n             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();\n         }\n \n+        [Fact]\n+        public Task PrintImmediateWarningMessage_Succeeded()\n+        {\n+            InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>\n+            {\n+                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs(\"[CredentialProvider]\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Regex matching on .NET Framework tends to be much slower than on .NET, even with `RegexOptions.Compiled`. For the particular pattern used here I see a pair of `IndexOf` calls being about 2x faster than the regex (on amd64). Please consider keeping the regex only for NET7+.",
              "createdAt": "2023-11-14T12:34:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -23,8 +27,26 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// <remarks>\n /// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.\n /// </remarks>\n-internal sealed class TerminalLogger : INodeLogger\n+internal sealed partial class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+\n+#if NET7_0_OR_GREATER\n+    [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+    private const string ImmediateMessagePattern = @\"\\[CredentialProvider\\]|--interactive\";\n+\n+    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\n+\n+#if NET7_0_OR_GREATER\n+    [GeneratedRegex(ImmediateMessagePattern, Options)]\n+    private static partial Regex ImmediateMessageRegex();\n+#else\n+    private static Regex ImmediateMessageRegex() => immediateMessageRegex;\n+\n+    private static readonly Regex immediateMessageRegex = new(ImmediateMessagePattern, RegexOptions.Compiled | Options);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The backslashes are not interpreted as escape markers here, the strings will have literally `\\[` in it. Also nit: `static`.",
              "createdAt": "2023-11-14T13:14:44Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -23,8 +27,21 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// <remarks>\n /// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.\n /// </remarks>\n-internal sealed class TerminalLogger : INodeLogger\n+internal sealed partial class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+\n+#if NET7_0_OR_GREATER\n+    [StringSyntax(StringSyntaxAttribute.Regex)]\n+    private const string ImmediateMessagePattern = @\"\\[CredentialProvider\\]|--interactive\";\n+    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\n+\n+    [GeneratedRegex(ImmediateMessagePattern, Options)]\n+    private static partial Regex ImmediateMessageRegex();\n+#else\n+    private readonly string[] _immediateMessageKeywords = { @\"\\[CredentialProvider\\]\", \"--interactive\" };",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "This was correct before: the `\\` in this case is a *regex* special character escaping `[`. Without the `\\[\\]` this collapses to \"any character from the character class `[CredntialPov]`\", instead of \"the literal string `[CredentialProvider]`\".\r\n\r\n(it would have been valid to do `\"\\\\[CredentialProvider\\\\]\"` instead of `@\"\\[CredentialProvider\\]\"`)",
              "createdAt": "2023-11-14T18:01:41Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -23,8 +27,21 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// <remarks>\n /// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.\n /// </remarks>\n-internal sealed class TerminalLogger : INodeLogger\n+internal sealed partial class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+\n+#if NET7_0_OR_GREATER\n+    [StringSyntax(StringSyntaxAttribute.Regex)]\n+    private const string ImmediateMessagePattern = @\"\\[CredentialProvider\\]|--interactive\";\n+    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\n+\n+    [GeneratedRegex(ImmediateMessagePattern, Options)]\n+    private static partial Regex ImmediateMessageRegex();\n+#else\n+    private readonly string[] _immediateMessageKeywords = { @\"\\[CredentialProvider\\]\", \"--interactive\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh wait I'm sorry, @ladipro was right because you switched to `IndexOf`. I'm surprised by the perf results there though, I see Regex being faster all the time (see https://github.com/dotnet/msbuild/pull/9411#discussion_r1392968936)",
              "createdAt": "2023-11-14T18:08:38Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -23,8 +27,21 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// <remarks>\n /// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.\n /// </remarks>\n-internal sealed class TerminalLogger : INodeLogger\n+internal sealed partial class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+\n+#if NET7_0_OR_GREATER\n+    [StringSyntax(StringSyntaxAttribute.Regex)]\n+    private const string ImmediateMessagePattern = @\"\\[CredentialProvider\\]|--interactive\";\n+    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\n+\n+    [GeneratedRegex(ImmediateMessagePattern, Options)]\n+    private static partial Regex ImmediateMessageRegex();\n+#else\n+    private readonly string[] _immediateMessageKeywords = { @\"\\[CredentialProvider\\]\", \"--interactive\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm trying to understand the different perf results we got. It is quite intriguing.",
              "createdAt": "2023-11-14T18:10:22Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -23,8 +27,21 @@ namespace Microsoft.Build.Logging.TerminalLogger;\n /// <remarks>\n /// Uses ANSI/VT100 control codes to erase and overwrite lines as the build is progressing.\n /// </remarks>\n-internal sealed class TerminalLogger : INodeLogger\n+internal sealed partial class TerminalLogger : INodeLogger\n {\n+    private const string FilePathPattern = \" -> \";\n+\n+#if NET7_0_OR_GREATER\n+    [StringSyntax(StringSyntaxAttribute.Regex)]\n+    private const string ImmediateMessagePattern = @\"\\[CredentialProvider\\]|--interactive\";\n+    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\n+\n+    [GeneratedRegex(ImmediateMessagePattern, Options)]\n+    private static partial Regex ImmediateMessageRegex();\n+#else\n+    private readonly string[] _immediateMessageKeywords = { @\"\\[CredentialProvider\\]\", \"--interactive\" };",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}