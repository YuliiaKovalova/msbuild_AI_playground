{
  "number": 8098,
  "title": "Batch metadata updates for better performance",
  "body": "Improves https://github.com/dotnet/sdk/issues/27738 \r\n\r\n### Context\r\nI was looking for a reason why \"design-time-builds\" are slow (see https://github.com/dotnet/sdk/issues/27738).\r\nOne method that stands out in the performance profiler is a method called `GatherTaskOutputs`.\r\nIt copies the output of the executed task into a new `ProjectItemInstance`. Copying the output metadata involves creating and populating the `ImmutableDicitionary` in the newly created `ProjectItemInstance`. The copying process turns out to be a noticeably slow operation.\r\n\r\n### Changes Made\r\n\r\nInstead of copying metadata properties one by one, all properties will be copied with a single [SetItems](https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutabledictionary-2.setitems) operation.\r\nAccording to BenchmarkDotNet using a single operation to populate the ImmutableDictionary is twice as fast.\r\n\r\n### Testing\r\nBenchmarking using scenario from https://github.com/dotnet/sdk/issues/27738#issue-1364794138.\r\n\r\n- before:\r\nTime Elapsed 00:01:23.18\r\nTime Elapsed 00:01:23.36\r\nTime Elapsed 00:01:23.91\r\nTime Elapsed 00:01:23.18\r\nTime Elapsed 00:01:23.25\r\n\r\n- after:\r\nTime Elapsed 00:01:20.87\r\nTime Elapsed 00:01:20.21\r\nTime Elapsed 00:01:20.71\r\nTime Elapsed 00:01:20.49\r\nTime Elapsed 00:01:20.60\r\n\r\nThis change improves performance of the tested scenario by 3-4%!\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-10-27T11:25:02Z",
  "updatedAt": "2022-12-02T15:22:52Z",
  "closedAt": "2022-11-05T09:22:29Z",
  "mergedAt": "2022-11-05T09:22:29Z",
  "additions": 20,
  "deletions": 11,
  "changedFiles": 2,
  "headRefName": "marcink-20221027-gathertaskoutputs",
  "isDraft": false,
  "author": {
    "login": "marcin-krystianc"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1c29efffd30c24f3a56e036165f876ddf4319aad",
          "message": "batch metadata updates for better performance",
          "committedDate": "2022-10-27T10:51:53Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Your solution looks pretty big, so I could see where this would have benefits, and I'm assuming the test case you used in Benchmark.NET was similarly big. Can you try with something small? I'm wondering if this change might hurt in that case, since it adds Linq and KeyValuePair allocations.\r\n\r\nMy BenchamrkDotNet tests didn't cover extra allocations from Linq and KeyValuePair allocations, just pure comparison of `Add` vs `AddRange`. Anyway, I've tried my changes on the `msbuild` solution itself and I don't see any noticeable difference:\r\n```\r\nbefore:\r\nTime Elapsed 00:00:06.64\r\nTime Elapsed 00:00:06.72\r\nTime Elapsed 00:00:06.72\r\nTime Elapsed 00:00:06.72\r\nTime Elapsed 00:00:06.65\r\n\r\nafter:\r\nTime Elapsed 00:00:06.95\r\nTime Elapsed 00:00:06.53\r\nTime Elapsed 00:00:06.64\r\nTime Elapsed 00:00:06.53\r\nTime Elapsed 00:00:06.75\r\n```\r\n\r\nMy gut feeling is that for small solutions the extra allocations are not noticeable and for large solutions the benefit of improved performance of ImmutableDictionary is much greater than the cost of extra allocations. ",
        "createdAt": "2022-10-28T12:35:33Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "Looks like more variance after, but that might just be a product of small sample size. Thanks for checking that!",
        "createdAt": "2022-10-28T19:33:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "\"license/cla\" status is still pending, what do I need to do to make it go green?",
        "createdAt": "2022-11-01T20:18:50Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "> \"license/cla\" status is still pending, what do I need to do to make it go green?\r\n\r\nWe are bothering people internally, but it's going frustratingly slowly. Sorry!",
        "createdAt": "2022-11-01T21:01:27Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It should have been `item.Key` instead of `item.Value` - this mistake introduced the problem reported in https://github.com/dotnet/msbuild/issues/8153. I'm working on covering this scenario with unit tests.",
              "createdAt": "2022-12-02T15:22:51Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1791,6 +1791,18 @@ internal void SetMetadataOnTaskOutput(string name, string evaluatedValueEscaped)\n                 }\n             }\n \n+            internal void SetMetadataOnTaskOutput(IEnumerable<KeyValuePair<string, string>> items)\n+            {\n+                ProjectInstance.VerifyThrowNotImmutable(_isImmutable);\n+                _directMetadata ??= new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n+\n+                var metadata = items\n+                    .Where(item => !FileUtilities.ItemSpecModifiers.IsDerivableItemSpecModifier(item.Value))",
              "author": {
                "login": "marcin-krystianc"
              }
            }
          ]
        }
      }
    ]
  }
}