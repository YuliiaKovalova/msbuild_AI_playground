{
  "number": 7554,
  "title": "Base64 converter Fixes #7442",
  "body": "Fixes #7442\r\n\r\n### Context\r\nSome odd parameters sometimes need to be passed through MSBuild. This provides a built-in way to avoid escaping nonsense.\r\n\r\n### Changes Made\r\nAdded intrinsic functions encoding or decoding a string to or from base 64.\r\n\r\n### Testing\r\nAdded unit test",
  "state": "MERGED",
  "createdAt": "2022-04-20T16:46:47Z",
  "updatedAt": "2022-04-26T22:24:11Z",
  "closedAt": "2022-04-26T22:24:10Z",
  "mergedAt": "2022-04-26T22:24:09Z",
  "additions": 80,
  "deletions": 2,
  "changedFiles": 3,
  "headRefName": "base64-converter",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6b5f3cdcdf10add3168563cd2c015233f34a1893",
          "message": "Add base64 en/decoders",
          "committedDate": "2022-04-20T16:44:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29edb44d15dcb27d206d70865dbc63c887999351",
          "message": "Add tests",
          "committedDate": "2022-04-20T16:44:54Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7eab811461fb4950b601b9a14546a32646556627",
          "message": "PR comments",
          "committedDate": "2022-04-25T15:56:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81f37a56f309f18eea16ff3833b17f8ad9c4c7c2",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-04-26T15:55:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "514356c8951b55457677aff3902af2175a059f50",
          "message": "Used changed names",
          "committedDate": "2022-04-26T16:24:10Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is ending in '=' desirable behavior? It seems to be required for the decoder to work properly, but my gut doesn't like that there are 65 possible characters in base 64 encodings even though one is more of an \"end of string\" character.",
              "createdAt": "2022-04-20T16:48:33Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It's allowed by the [spec](https://www.ietf.org/rfc/rfc4648.txt) - since Base64 strings must have a multiple of 3 characters, if performing the encoding would result in less that implementations may add `=` to fill the padding requirement. The `=` padding character is also explicitly part of the the 'base64 alphabet' per the spec too. So no worries about it being odd or incorrect here :)",
              "createdAt": "2022-04-20T16:58:25Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Sounds good! I made an encoder/decoder in college at one point, and the spec our professor provided didn't include padding.",
              "createdAt": "2022-04-20T17:09:11Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How do you know the right encoding to use?\r\n\r\nWe talked about this offline: should probably be UTF-8.",
              "createdAt": "2022-04-25T15:12:21Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toEncode\">String to encode in base 64.</param>\n+        /// <returns></returns>\n+        internal static string ConvertToBase64(string toEncode)\n+        {\n+            return Convert.ToBase64String(Encoding.Default.GetBytes(toEncode));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Update comment.",
              "createdAt": "2022-04-25T15:15:23Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3510,7 +3510,10 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,\n                     // If the result of the function call is a string, then we need to escape the result\n                     // so that we maintain the \"engine contains escaped data\" state.\n                     // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));\r\n```",
              "createdAt": "2022-04-25T15:20:51Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toEncode\">String to encode in base 64.</param>\n+        /// <returns></returns>\n+        internal static string ConvertToBase64(string toEncode)\n+        {\n+            return Convert.ToBase64String(Encoding.Default.GetBytes(toEncode));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            return Encoding.UTF8.GetString(Convert.FromBase64String(toDecode));\r\n```",
              "createdAt": "2022-04-25T15:21:04Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toEncode\">String to encode in base 64.</param>\n+        /// <returns></returns>\n+        internal static string ConvertToBase64(string toEncode)\n+        {\n+            return Convert.ToBase64String(Encoding.Default.GetBytes(toEncode));\n+        }\n+\n+        /// <summary>\n+        /// Returns the string after converting from base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toDecode\">The string to decode.</param>\n+        /// <returns></returns>\n+        internal static string ConvertFromBase64(string toDecode)\n+        {\n+            return Encoding.Default.GetString(Convert.FromBase64String(toDecode));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd like to see a couple of tests with known encoded strings (testing decode) and vice versa.",
              "createdAt": "2022-04-25T15:46:56Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3646,6 +3646,20 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\")]\n+        [InlineData(\"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n+        public void TestBase64Conversion(string testCase)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);\n+        }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A small change here would make future failures easier to understand:\r\n\r\n```suggestion\r\n        public void TestExplicitToBase64Conversion(string plaintext, string base64)\r\n```",
              "createdAt": "2022-04-26T15:00:16Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3652,14 +3652,38 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n         [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n         public void TestBase64Conversion(string testCase)\n         {\n-            PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n-            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n             string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n             intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n             string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n             original.ShouldBe(testCase);\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string testCase, string result)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public void TestExplicitFromBase64Conversion(string plaintext, string base64)\r\n```",
              "createdAt": "2022-04-26T15:00:30Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3652,14 +3652,38 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n         [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n         public void TestBase64Conversion(string testCase)\n         {\n-            PropertyDictionary<ProjectPropertyInstance> pg = new PropertyDictionary<ProjectPropertyInstance>();\n-            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n             string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n             intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n             string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n             original.ShouldBe(testCase);\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string testCase, string result)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.ShouldBe(result);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitFromBase64Conversion(string testCase, string intermediate)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <returns>The encoded string.</returns>\r\n```",
              "createdAt": "2022-04-26T15:01:28Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toEncode\">String to encode in base 64.</param>\n+        /// <returns></returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <returns>The decoded string.</returns>\r\n```",
              "createdAt": "2022-04-26T15:02:01Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -350,6 +351,26 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue\n             }\n         }\n \n+        /// <summary>\n+        /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toEncode\">String to encode in base 64.</param>\n+        /// <returns></returns>\n+        internal static string ConvertToBase64(string toEncode)\n+        {\n+            return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));\n+        }\n+\n+        /// <summary>\n+        /// Returns the string after converting from base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.\n+        /// </summary>\n+        /// <param name=\"toDecode\">The string to decode.</param>\n+        /// <returns></returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{plaintext}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\r\n```",
              "createdAt": "2022-04-26T16:21:32Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3646,6 +3646,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\")]\n+        [InlineData(\"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n+        public void TestBase64Conversion(string testCase)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            intermediate.ShouldBe(base64);\r\n```",
              "createdAt": "2022-04-26T16:21:57Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3646,6 +3646,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\")]\n+        [InlineData(\"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n+        public void TestBase64Conversion(string testCase)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.ShouldBe(result);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{base64}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\r\n```",
              "createdAt": "2022-04-26T16:22:25Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3646,6 +3646,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\")]\n+        [InlineData(\"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n+        public void TestBase64Conversion(string testCase)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.ShouldBe(result);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitFromBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            original.ShouldBe(plaintext);\r\n```",
              "createdAt": "2022-04-26T16:22:58Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -3646,6 +3646,44 @@ public void PropertyFunctionHashCodeSameOnlyIfStringSame()\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"easycase\")]\n+        [InlineData(\"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\")]\n+        public void TestBase64Conversion(string testCase)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.Trim('=').All(c => char.IsLetterOrDigit(c) || c == '+' || c == '/').ShouldBeTrue();\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitToBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string intermediate = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertToBase64('{testCase}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            intermediate.ShouldBe(result);\n+        }\n+\n+        [Theory]\n+        [InlineData(\"easycase\", \"ZWFzeWNhc2U=\")]\n+        [InlineData(\"\", \"\")]\n+        [InlineData(\"\\\"\\n()\\tsdfIR$%#*;==\", \"IgooKQlzZGZJUiQlIyo7PT0=\")]\n+        public void TestExplicitFromBase64Conversion(string plaintext, string base64)\n+        {\n+            PropertyDictionary<ProjectPropertyInstance> pg = new();\n+            Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);\n+            string original = expander.ExpandPropertiesLeaveTypedAndEscaped($\"$([MSBuild]::ConvertFromBase64('{intermediate}'))\", ExpanderOptions.ExpandProperties, MockElementLocation.Instance) as string;\n+            original.ShouldBe(testCase);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}