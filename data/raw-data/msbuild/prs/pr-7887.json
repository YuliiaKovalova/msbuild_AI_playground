{
  "number": 7887,
  "title": "Reduce unnecessary allocations when accessing information about global properties",
  "body": "Fixes #7743\r\n\r\nCPS iterates over collections of properties to access information about them, specifically whether they are global properties or derived from the environment. The current implementation of IsGlobalProperty and IsEnvironmentProperty start by accessing the global dictionary. That call makes a copy of the dictionary before just accessing information, which impacts performance.\r\n\r\nThis gets more complicated because the global dictionary should not be modified from the outside. Based on our publicly exposed API, it should be an IDictionary, so we cannot return an ImmutableDictionary. Returning a readonly Dictionary still permits modifications, and a ReadOnlyDictionary doesn't implement IDictionary.\r\n\r\nThis attempts to circumvent the problem of returning a readonly dictionary that implements IDictionary by instead exposing a more efficient form of the few methods needed by CPS, specifically Contains, Count, and Enumerate. As CPS uses a custom ProjectLink, these new methods are exposed as overridable methods, and they're virtual to avoid making a breaking change. This permits performance wins without breaking current customers.\r\n",
  "state": "MERGED",
  "createdAt": "2022-08-16T00:35:38Z",
  "updatedAt": "2022-10-06T16:41:41Z",
  "closedAt": "2022-10-06T16:41:40Z",
  "mergedAt": "2022-10-06T16:41:40Z",
  "additions": 81,
  "deletions": 8,
  "changedFiles": 8,
  "headRefName": "more-efficient-global-property-reads",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0e0a3fafac5e32bfdb75ed74220f48433345b50f",
          "message": "Make global property accesses more efficient",
          "committedDate": "2022-08-16T00:34:46Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57f1584641f3d6c925119e1cce184136156cdaaf",
          "message": "Use virtual methods",
          "committedDate": "2022-08-31T15:59:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b60159101bf0df7b754f529d48bb59292e00838f",
          "message": "Add comments",
          "committedDate": "2022-09-14T19:40:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@lifengl, @adrianvmsft,\r\n\r\nThis change was for a perf issue arkalyanms raised a couple months ago. This change relies on the assumption that the GlobalProperties dictionary CPS accesses uses MSBuild's ProjImpl. In theory, you could use a different ProjectLink than that, in which case this wouldn't help, but then you'd control how GlobalProperties is accessed, so I don't think there'd be anything MSBuild can do.\r\n\r\nDoes this look like it resolves the problem arkalayanms mentioned? If you have a chance, could you try it out and see how much it helps? Thanks!",
        "createdAt": "2022-08-22T20:32:26Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "\ud83d\udc4d ",
        "createdAt": "2022-09-14T16:42:38Z",
        "author": {
          "login": "adrianvmsft"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like GlobalPropertiesContains/Count will cut the overhead to get a new copy of the dictionary, but I am not sure about GlobalPropertiesEnumerable, that seems to make another copy anyway?  Maybe copying to a list is faster than creating a dictionary?  If our goal is to improve on that, maybe you can create an array, and fill it, instead of using a list.",
              "createdAt": "2022-08-26T00:10:27Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2087,6 +2093,27 @@ public override bool IsDirty\n                 }\n             }\n \n+            public bool GlobalPropertiesContains(string key)\n+            {\n+                return _data.GlobalPropertiesDictionary.Contains(key);\n+            }\n+\n+            public int GlobalPropertiesCount()\n+            {\n+                return _data.GlobalPropertiesDictionary.Count;\n+            }\n+\n+            public IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()",
              "author": {
                "login": "lifengl"
              }
            },
            {
              "body": "I modified the Enumerable to use yield return. The uses don't seem like they need a fully instantiated object to me, though please do correct me if I'm wrong \ud83d\ude42\r\n\r\nI also pushed the switch to virtual methods. Does that look good to you?",
              "createdAt": "2022-08-31T16:00:43Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2087,6 +2093,27 @@ public override bool IsDirty\n                 }\n             }\n \n+            public bool GlobalPropertiesContains(string key)\n+            {\n+                return _data.GlobalPropertiesDictionary.Contains(key);\n+            }\n+\n+            public int GlobalPropertiesCount()\n+            {\n+                return _data.GlobalPropertiesDictionary.Count;\n+            }\n+\n+            public IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comment that these are default implementations to avoid breaks but an implementing class may wish to override for perf?",
              "createdAt": "2022-09-14T19:18:11Z",
              "path": "src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs",
              "diffHunk": "@@ -259,5 +259,11 @@ public abstract class ProjectLink\n         /// Called by the local project collection to indicate to this project that it is no longer loaded.\n         /// </summary>\n         public abstract void Unload();\n+\n+        public virtual bool GlobalPropertiesContains(string key) => GlobalProperties.ContainsKey(key);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point, and I should do that for our overrides, too.",
              "createdAt": "2022-09-14T19:22:37Z",
              "path": "src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs",
              "diffHunk": "@@ -259,5 +259,11 @@ public abstract class ProjectLink\n         /// Called by the local project collection to indicate to this project that it is no longer loaded.\n         /// </summary>\n         public abstract void Unload();\n+\n+        public virtual bool GlobalPropertiesContains(string key) => GlobalProperties.ContainsKey(key);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}