{
  "number": 6222,
  "title": "Ignore invalid import when expression empty",
  "body": "Fixes #6221\r\n\r\n### Context\r\nWhen the project load setting `IgnoreInvalidImports` is set, the caller expects imports that couldn't be loaded to just be ignored in a best effort attempt to load the project.  However, the code path of the project expression evaluating to an empty string was overlooked in #2720\r\n\r\n### Changes Made\r\nI've checked the `ProjectLoadSettings` in the evaluator when the project import expression evaluates to an empty string and logged an event and skipped the import\r\n\r\n### Testing\r\nI've added a unit test\r\n\r\n### Notes\r\nThe first commit is the implementation, the second commit is just a conversion to Shouldly\r\n",
  "state": "MERGED",
  "createdAt": "2021-03-03T22:10:24Z",
  "updatedAt": "2021-03-13T00:37:22Z",
  "closedAt": "2021-03-13T00:37:22Z",
  "mergedAt": "2021-03-13T00:37:22Z",
  "additions": 426,
  "deletions": 310,
  "changedFiles": 17,
  "headRefName": "ignore-invalid-import-when-expression-empty",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3e4843efc6d13af0299ca113d07f4fa619be67e3",
          "message": "Ignore an invalid import if the expression evaluates to an empty string",
          "committedDate": "2021-03-03T21:32:04Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c50ded1b2c038945d915e0c41a4e19d7deae71dd",
          "message": "Shouldly!",
          "committedDate": "2021-03-03T21:54:04Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ae361b2e0d99c56c53596c17ee2df5fbaa24f05",
          "message": "Move bitwise comparison inside the if",
          "committedDate": "2021-03-05T17:31:38Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nCommon case should be !String.IsNullOrWhiteSpace(importExpressionEscaped), so move this under that if?",
              "createdAt": "2021-03-05T17:08:12Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1927,17 +1927,45 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)\n         private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(string directoryOfImportingFile, ProjectImportElement importElement, string unescapedExpression,\n                                             bool throwOnFileNotExistsError, out List<ProjectRootElement> imports)\n         {\n+            imports = new List<ProjectRootElement>();\n+\n+            bool ignoreInvalidImports = _loadSettings.HasFlag(ProjectLoadSettings.IgnoreInvalidImports);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes good point.  I was going to use the variable `ignoreInvalidImports` later in this method but didn't end up doing that.  I'll move this down inside the `if`.  I'll also do the bitwise comparison myself as I just read that `Enum.HasFlag()` is slow :(\r\n\r\nhttps://stackoverflow.com/questions/7368652/what-is-it-that-makes-enum-hasflag-so-slow\r\n\r\nShould I fix the other two calls to `HasFlag()` in the evaluator?  The first one isn't called that much but the second one is on the hot path\r\n\r\n1. https://github.com/dotnet/msbuild/blob/master/src/Build/Evaluation/Evaluator.cs#L1768\r\n2. https://github.com/dotnet/msbuild/blob/master/src/Build/Evaluation/Evaluator.cs#L2400\r\n\r\nOr should we do that in a different change?",
              "createdAt": "2021-03-05T17:30:50Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1927,17 +1927,45 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)\n         private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(string directoryOfImportingFile, ProjectImportElement importElement, string unescapedExpression,\n                                             bool throwOnFileNotExistsError, out List<ProjectRootElement> imports)\n         {\n+            imports = new List<ProjectRootElement>();\n+\n+            bool ignoreInvalidImports = _loadSettings.HasFlag(ProjectLoadSettings.IgnoreInvalidImports);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Up to you\u2014I'm happy with this change as-is, but the change is straightforward enough that it seems unlikely something would go wrong.",
              "createdAt": "2021-03-05T17:47:16Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1927,17 +1927,45 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)\n         private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(string directoryOfImportingFile, ProjectImportElement importElement, string unescapedExpression,\n                                             bool throwOnFileNotExistsError, out List<ProjectRootElement> imports)\n         {\n+            imports = new List<ProjectRootElement>();\n+\n+            bool ignoreInvalidImports = _loadSettings.HasFlag(ProjectLoadSettings.IgnoreInvalidImports);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm going to do a separate change to get rid of the `HasFlag()` calls, just to be safe.  Feel free to merge.  Thanks!",
              "createdAt": "2021-03-05T18:09:06Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1927,17 +1927,45 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)\n         private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(string directoryOfImportingFile, ProjectImportElement importElement, string unescapedExpression,\n                                             bool throwOnFileNotExistsError, out List<ProjectRootElement> imports)\n         {\n+            imports = new List<ProjectRootElement>();\n+\n+            bool ignoreInvalidImports = _loadSettings.HasFlag(ProjectLoadSettings.IgnoreInvalidImports);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      }
    ]
  }
}