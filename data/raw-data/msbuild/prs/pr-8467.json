{
  "number": 8467,
  "title": "[LiveLogger] Fix for conhost.exe",
  "body": "Fixes #8455\r\n\r\n### Context\r\nLiveLogger is only enabled for terminal emulators that support VT100/ANSI escape sequences. On Windows, these are supported by default on Windows Terminal, but Console Host (the old terminal emulator) does not support all of them. Hence LiveLogger checks if the code is run on Windows Terminal via the `WT_SESSION` environment variable. \r\n\r\n### Changes Made\r\nAdded check for when `Environment.GetEnvironmentVariable(\"WT_SESSION\") == null`\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-16T19:45:47Z",
  "updatedAt": "2023-02-22T10:56:04Z",
  "closedAt": "2023-02-21T02:24:58Z",
  "mergedAt": "2023-02-21T02:24:58Z",
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "edvilme-ll-ansi-support",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "719670d7cb3b896b785bafd764465a1ca5db9961",
          "message": "Added check for  null environment variable",
          "committedDate": "2023-02-16T19:40:29Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac7a356cb5ded27f43e46ba9245fcbc784098075",
          "message": "Update src/MSBuild/XMake.cs\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-02-18T02:17:37Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Just an observation that `WT_SESSION` is not defined when launching with F5 in Visual Studio, despite the terminal being capable. With the change in this PR I have to add the variable explicitly in order to debug LiveLogger. My launchSettings.json:\r\n\r\n```json\r\n{\r\n  \"profiles\": {\r\n    \"Profile 1\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\src\\\\msbuild\\\\artifacts\\\\bin\\\\bootstrap\\\\net472\\\\MSBuild\\\\Current\\\\Bin\\\\amd64\\\\msbuild.exe\",\r\n      \"commandLineArgs\": \"/ll\",\r\n      \"workingDirectory\": \"C:\\\\temp\\\\SimpleWebApp\",\r\n      \"environmentVariables\": {\r\n        \"WT_SESSION\": \"abc\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```",
        "createdAt": "2023-02-20T16:28:11Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Just an observation that `WT_SESSION` is not defined when launching with F5 in Visual Studio, despite the terminal being capable. With the change in this PR I have to add the variable explicitly in order to debug LiveLogger. My launchSettings.json:\r\n> \r\n> ```json\r\n> {\r\n>   \"profiles\": {\r\n>     \"Profile 1\": {\r\n>       \"commandName\": \"Executable\",\r\n>       \"executablePath\": \"C:\\\\src\\\\msbuild\\\\artifacts\\\\bin\\\\bootstrap\\\\net472\\\\MSBuild\\\\Current\\\\Bin\\\\amd64\\\\msbuild.exe\",\r\n>       \"commandLineArgs\": \"/ll\",\r\n>       \"workingDirectory\": \"C:\\\\temp\\\\SimpleWebApp\",\r\n>       \"environmentVariables\": {\r\n>         \"WT_SESSION\": \"abc\"\r\n>       }\r\n>     }\r\n>   }\r\n> }\r\n> ```\r\n\r\nIs the LiveLogger supposed to be on in VS? I thought we'd decided we wanted it off.",
        "createdAt": "2023-02-20T19:01:40Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Is the LiveLogger supposed to be on in VS? I thought we'd decided we wanted it off.\r\n\r\nAdding to the list of items to clarify, thank you!\r\n\r\nHowever, running the .NET build of MSBuild under VS has the same issue. The terminal created by VS on F5 does not have `WT_SESSION` defined.",
        "createdAt": "2023-02-20T20:55:52Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The Internet seems to think that checking the result of `GetConsoleMode` for `ENABLE_VIRTUAL_TERMINAL_PROCESSING` may be a better way of detecting fancy-capable environments. ",
        "createdAt": "2023-02-20T21:08:30Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> The Internet seems to think that checking the result of `GetConsoleMode` for `ENABLE_VIRTUAL_TERMINAL_PROCESSING` may be a better way of detecting fancy-capable environments.\r\n\r\nthis snippet from pwsh looks relevant:\r\n\r\nhttps://github.com/SteveL-MSFT/PowerShell/blob/4c01dcc5d5672f4b0ccbac87fe756de01f487887/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L64-L85",
        "createdAt": "2023-02-21T22:41:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Comment moved to <https://github.com/dotnet/msbuild/issues/8481#issuecomment-1439816011>",
        "createdAt": "2023-02-22T10:52:53Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"WT_SESSION\")))\r\n```\r\n\r\nI find this simpler and often use it even if I think only one of those will show up just because we often realize we need both, and they're often intended to indicate the same thing \ud83d\ude42",
              "createdAt": "2023-02-16T21:46:19Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3444,7 +3444,7 @@ private static bool DoesEnvironmentSupportLiveLogger()\n             }\n             // If terminal is dumb\n             if (\n-                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable(\"WT_SESSION\") == \"\")\n+                (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && (Environment.GetEnvironmentVariable(\"WT_SESSION\") == \"\" || Environment.GetEnvironmentVariable(\"WT_SESSION\") == null))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}