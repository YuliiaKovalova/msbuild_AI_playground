{
  "number": 11175,
  "title": "VS Telemetry design documentation",
  "body": "Fixes #10947\r\n\r\n### Context\r\nWriteup of proposed telemetry implementation based on experimentation in #11084",
  "state": "MERGED",
  "createdAt": "2024-12-19T17:19:28Z",
  "updatedAt": "2025-04-02T13:40:27Z",
  "closedAt": "2025-04-02T13:40:26Z",
  "mergedAt": "2025-04-02T13:40:26Z",
  "additions": 198,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "otel-design",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dc06f8dca8e522b77e291ef1102e4487fa9ad732",
          "message": "write up",
          "committedDate": "2024-12-19T17:14:34Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c0605b098e29eb2d97ccd9c9465d1c213abdbf8",
          "message": "rename, add some details",
          "committedDate": "2024-12-20T15:56:22Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68ecf056fa933042635663259c1342aa37aae14b",
          "message": "update with comments",
          "committedDate": "2025-01-03T17:45:32Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f426477899d4dfdc95bc0749c9de141cfbf13be",
          "message": "update doc",
          "committedDate": "2025-01-28T16:05:47Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62532f66022ee6f1fe7db036fcc2fdc37ed7ab36",
          "message": "document differences between plans and implementation",
          "committedDate": "2025-04-02T13:21:17Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0aa8fb935eaf4a7f3adb32e55e7ff3caf7cfb738",
          "message": "move out of 'proposed' specs",
          "committedDate": "2025-04-02T13:22:41Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- Providing or/and documenting a method for creating a hook in Framework MSBuild\r\n```",
              "createdAt": "2024-12-23T14:05:11Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- If custom hooking solution will be used - document the security implications of hooking custom telemetry Exporters/Collectors in Framework\r\n```\r\n\r\nSince we plan to use AppDomainManager - we are using existing solution that is outside of our trust boundaries",
              "createdAt": "2024-12-23T14:11:21Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild\n+- document the security implications of hooking custom telemetry Exporters/Collectors in Framework",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "As discussed - we should not prevent ourselves to be able to add (in future versions):\r\n * different sampling rates for different namespaces/activities\r\n * ability to configure the overal and per-namespace sampling from server side (e.g. storing it in the .msbuild folder in user profile if different then default values set from server side - this would obviously have a delay of the default sample rate # of executions)",
              "createdAt": "2024-12-23T14:15:09Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild\n+- document the security implications of hooking custom telemetry Exporters/Collectors in Framework\n+- other security requirements (transportation, rate limiting, sanitization, data access) are implemented by VS Telemetry library or the backend\n+\n+### Data handling\n+\n+- Implement head [Sampling](https://opentelemetry.io/docs/concepts/sampling/) with the granularity of a MSBuild.exe invocation/VS instance.\n+- VS Data handle tail sampling in their infrastructure not to overwhelm storage with a lot of build events.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "More generaly - sample rate per Activity/namespace (higher even always or even lower or newer)",
              "createdAt": "2024-12-23T14:17:17Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild\n+- document the security implications of hooking custom telemetry Exporters/Collectors in Framework\n+- other security requirements (transportation, rate limiting, sanitization, data access) are implemented by VS Telemetry library or the backend\n+\n+### Data handling\n+\n+- Implement head [Sampling](https://opentelemetry.io/docs/concepts/sampling/) with the granularity of a MSBuild.exe invocation/VS instance.\n+- VS Data handle tail sampling in their infrastructure not to overwhelm storage with a lot of build events.\n+\n+#### Data points\n+\n+The data sent via VS OpenTelemetry is neither a subset neither a superset of what is sent to SDK telemetry and it is not a purpose of this design to unify them.\n+\n+##### Basic info\n+\n+- Build duration\n+- Host\n+- Build success/failure\n+- Version\n+- Target (hashed)\n+\n+##### Evnironment\n+\n+- SAC (Smart app control) enabled\n+\n+##### Features\n+\n+- BuildCheck enabled?\n+\n+The design allows for easy instrumentation of additional data points.\n+\n+## Core `dotnet build` scenario\n+\n+- Telemetry should not be collected via VS OpenTelemetry mechanism because it's already collected in sdk.\n+- There should be an opt in to initialize the ActivitySource to avoid degrading performance.\n+- [baronfel/otel-startup-hook: A .NET CLR Startup Hook that exports OpenTelemetry metrics via the OTLP Exporter to an OpenTelemetry Collector](https://github.com/baronfel/otel-startup-hook/) and similar enable collecting telemetry data locally by listening to the ActivitySource name defined in MSBuild.\n+\n+## Standalone MSBuild.exe scenario\n+\n+- Initialize and finalize in Xmake.cs\n+\t- ActivitySource, TracerProvider, VS Collector\n+\t\t- overhead of starting VS collector is fairly big (0.3s on Devbox)[JanProvaznik/VSCollectorBenchmarks](https://github.com/JanProvaznik/VSCollectorBenchmarks)\n+\t\t\t- head sampling should avoid initializing if not sampled\n+\n+## VS scenario\n+\n+- VS can call `BuildManager` in a thread unsafe way the telemetry implementation has to be mindful of [BuildManager instances acquire its own BuildTelemetry instance by rokonec \u00b7 Pull Request #8444 \u00b7 dotnet/msbuild](https://github.com/dotnet/msbuild/pull/8444)\n+\t- ensure no race conditions in initialization\n+\t- only 1 TracerProvider with VS defined processing should exist\n+- Visual Studio should be responsible for having a running collector, we don't want this overhead in MSBuild and eventually many components can use it\n+\n+## Implementation and MSBuild developer experience\n+\n+### Sampling\n+\n+- We need to sample before initalizing infrastructure to avoid overhead.\n+- Enables opt-in and opt-out for guaranteed sample or not sampled.\n+- nullable ActivitySource, using `?` when working with them, we can be initialized but not sampled -> it will not reinitialize but not collect telemetry.\n+\n+### Initialization at entrypoints\n+\n+- There are 2 entrypoints:\n+    - for VS in BuildManager.BeginBuild\n+    - for standalone in Xmake.cs Main\n+\n+### Exiting\n+\n+Force flush TracerProvider's exporter in BuildManager.EndBuild.\n+Dispose collector in Xmake.cs at the end of Main.\n+\n+### Configuration\n+\n+- Class that's responsible for configuring and initializing telemetry and handles optouts, holding tracer and collector.\n+- Wrapping source so that it has correct prefixes for VS backend to ingest.\n+\n+### Instrumenting\n+\n+2 ways of instrumenting:\n+\n+#### Instrument areas in code running in the main process\n+\n+```csharp\n+using (Activity? myActivity = OpenTelemetryManager.DefaultActivitySource?.StartActivity(TelemetryConstants.NameFromAConstantToAvoidAllocation))\n+{\n+// something happens here\n+\n+// add data to the trace\n+myActivity?.WithTag(\"SpecialEvent\",\"fail\")\n+}\n+```\n+\n+Interface for classes holding telemetry data\n+\n+```csharp\n+IActivityTelemetryDataHolder data = new SomeData();\n+...\n+myActivity?.WithTags(data);\n+```\n+\n+#### Add data to activity in EndBuild\n+\n+- this activity would always be created at the same point when sdk telemetry is sent in Core and we can add data to it\n+\n+## Looking ahead\n+\n+- Create a way of using a \"HighPrioActivitySource\" which would override sampling and initialize Collector in MSBuild.exe scenario/tracerprovider in VS.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We can just ballpark estimate some rates or possibly we can use some little statistic science behind the sample size determination: https://en.wikipedia.org/wiki/Sample_size_determination\r\n\r\nE.g. for proportion estimation (of fairly common occurence in the builds), with not very strict confidnece (let's say 95% is awesome for us now) and margin for error (5% is very acceptable for us) and quite high population size (let's estimate # of total daily build events to be between 10M and 100M [while in fact much more close to the uppor bound]), we would be very fine with the sampling rate of **1 from 26.000**\r\n\r\nSample table of sample size for proprtion hypothesis: https://www.research-advisors.com/images/subpage/SSTable.jpg\r\n\r\nFor more rare events (runaway builds, custom tasks etc.) we'd need to adjust apropriately to capture at least couple hundrets datapoints daily ... that should still allow for considerably small sampling rates and hence low impact on the observed builds.",
              "createdAt": "2024-12-23T16:21:10Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild\n+- document the security implications of hooking custom telemetry Exporters/Collectors in Framework\n+- other security requirements (transportation, rate limiting, sanitization, data access) are implemented by VS Telemetry library or the backend\n+\n+### Data handling\n+\n+- Implement head [Sampling](https://opentelemetry.io/docs/concepts/sampling/) with the granularity of a MSBuild.exe invocation/VS instance.\n+- VS Data handle tail sampling in their infrastructure not to overwhelm storage with a lot of build events.\n+\n+#### Data points\n+\n+The data sent via VS OpenTelemetry is neither a subset neither a superset of what is sent to SDK telemetry and it is not a purpose of this design to unify them.\n+\n+##### Basic info\n+\n+- Build duration\n+- Host\n+- Build success/failure\n+- Version\n+- Target (hashed)\n+\n+##### Evnironment\n+\n+- SAC (Smart app control) enabled\n+\n+##### Features\n+\n+- BuildCheck enabled?\n+\n+The design allows for easy instrumentation of additional data points.\n+\n+## Core `dotnet build` scenario\n+\n+- Telemetry should not be collected via VS OpenTelemetry mechanism because it's already collected in sdk.\n+- There should be an opt in to initialize the ActivitySource to avoid degrading performance.\n+- [baronfel/otel-startup-hook: A .NET CLR Startup Hook that exports OpenTelemetry metrics via the OTLP Exporter to an OpenTelemetry Collector](https://github.com/baronfel/otel-startup-hook/) and similar enable collecting telemetry data locally by listening to the ActivitySource name defined in MSBuild.\n+\n+## Standalone MSBuild.exe scenario\n+\n+- Initialize and finalize in Xmake.cs\n+\t- ActivitySource, TracerProvider, VS Collector\n+\t\t- overhead of starting VS collector is fairly big (0.3s on Devbox)[JanProvaznik/VSCollectorBenchmarks](https://github.com/JanProvaznik/VSCollectorBenchmarks)\n+\t\t\t- head sampling should avoid initializing if not sampled\n+\n+## VS scenario\n+\n+- VS can call `BuildManager` in a thread unsafe way the telemetry implementation has to be mindful of [BuildManager instances acquire its own BuildTelemetry instance by rokonec \u00b7 Pull Request #8444 \u00b7 dotnet/msbuild](https://github.com/dotnet/msbuild/pull/8444)\n+\t- ensure no race conditions in initialization\n+\t- only 1 TracerProvider with VS defined processing should exist\n+- Visual Studio should be responsible for having a running collector, we don't want this overhead in MSBuild and eventually many components can use it\n+\n+## Implementation and MSBuild developer experience\n+\n+### Sampling\n+\n+- We need to sample before initalizing infrastructure to avoid overhead.\n+- Enables opt-in and opt-out for guaranteed sample or not sampled.\n+- nullable ActivitySource, using `?` when working with them, we can be initialized but not sampled -> it will not reinitialize but not collect telemetry.\n+\n+### Initialization at entrypoints\n+\n+- There are 2 entrypoints:\n+    - for VS in BuildManager.BeginBuild\n+    - for standalone in Xmake.cs Main\n+\n+### Exiting\n+\n+Force flush TracerProvider's exporter in BuildManager.EndBuild.\n+Dispose collector in Xmake.cs at the end of Main.\n+\n+### Configuration\n+\n+- Class that's responsible for configuring and initializing telemetry and handles optouts, holding tracer and collector.\n+- Wrapping source so that it has correct prefixes for VS backend to ingest.\n+\n+### Instrumenting\n+\n+2 ways of instrumenting:\n+\n+#### Instrument areas in code running in the main process\n+\n+```csharp\n+using (Activity? myActivity = OpenTelemetryManager.DefaultActivitySource?.StartActivity(TelemetryConstants.NameFromAConstantToAvoidAllocation))\n+{\n+// something happens here\n+\n+// add data to the trace\n+myActivity?.WithTag(\"SpecialEvent\",\"fail\")\n+}\n+```\n+\n+Interface for classes holding telemetry data\n+\n+```csharp\n+IActivityTelemetryDataHolder data = new SomeData();\n+...\n+myActivity?.WithTags(data);\n+```\n+\n+#### Add data to activity in EndBuild\n+\n+- this activity would always be created at the same point when sdk telemetry is sent in Core and we can add data to it\n+\n+## Looking ahead\n+\n+- Create a way of using a \"HighPrioActivitySource\" which would override sampling and initialize Collector in MSBuild.exe scenario/tracerprovider in VS.\n+    - this would enable us to catch rare events\n+\n+## Uncertainties\n+\n+- Configuring tail sampling in VS telemetry server side infrastructure to not overflow them with data.\n+- How much head sampling.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. this might be as well a partial answer to some below open questions around perf - if we are not able to get the perf to be sufficient for regular executions, but still quite around 'human noticable threshold' (per various UX researches ~100ms) - we might just choose to pay the cost in very low amount of cases",
              "createdAt": "2024-12-23T16:26:30Z",
              "path": "documentation/specs/proposed/VS-OpenTelemetry.md",
              "diffHunk": "@@ -0,0 +1,138 @@\n+# Telemetry via OpenTelemetry design\n+\n+VS OTel provide packages compatible with ingesting data to their backend if we instrument it via OpenTelemetry traces (System.Diagnostics.Activity).\n+VS OTel packages are not open source so we need to conditionally include them in our build only for VS and MSBuild.exe\n+\n+[Onepager](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/telemetry-onepager.md)\n+\n+## Requirements\n+\n+### Performance\n+\n+- If not sampled, no infra initialization overhead.\n+- Avoid allocations when not sampled.\n+- Has to have no impact on Core without opting into tracing, small impact on Framework\n+\n+### Privacy\n+\n+- Hashing data points that could identify customers (e.g. names of targets)\n+- Opt out capability\n+\n+### Security\n+\n+- Providing a method for creating a hook in Framework MSBuild\n+- document the security implications of hooking custom telemetry Exporters/Collectors in Framework\n+- other security requirements (transportation, rate limiting, sanitization, data access) are implemented by VS Telemetry library or the backend\n+\n+### Data handling\n+\n+- Implement head [Sampling](https://opentelemetry.io/docs/concepts/sampling/) with the granularity of a MSBuild.exe invocation/VS instance.\n+- VS Data handle tail sampling in their infrastructure not to overwhelm storage with a lot of build events.\n+\n+#### Data points\n+\n+The data sent via VS OpenTelemetry is neither a subset neither a superset of what is sent to SDK telemetry and it is not a purpose of this design to unify them.\n+\n+##### Basic info\n+\n+- Build duration\n+- Host\n+- Build success/failure\n+- Version\n+- Target (hashed)\n+\n+##### Evnironment\n+\n+- SAC (Smart app control) enabled\n+\n+##### Features\n+\n+- BuildCheck enabled?\n+\n+The design allows for easy instrumentation of additional data points.\n+\n+## Core `dotnet build` scenario\n+\n+- Telemetry should not be collected via VS OpenTelemetry mechanism because it's already collected in sdk.\n+- There should be an opt in to initialize the ActivitySource to avoid degrading performance.\n+- [baronfel/otel-startup-hook: A .NET CLR Startup Hook that exports OpenTelemetry metrics via the OTLP Exporter to an OpenTelemetry Collector](https://github.com/baronfel/otel-startup-hook/) and similar enable collecting telemetry data locally by listening to the ActivitySource name defined in MSBuild.\n+\n+## Standalone MSBuild.exe scenario\n+\n+- Initialize and finalize in Xmake.cs\n+\t- ActivitySource, TracerProvider, VS Collector\n+\t\t- overhead of starting VS collector is fairly big (0.3s on Devbox)[JanProvaznik/VSCollectorBenchmarks](https://github.com/JanProvaznik/VSCollectorBenchmarks)\n+\t\t\t- head sampling should avoid initializing if not sampled\n+\n+## VS scenario\n+\n+- VS can call `BuildManager` in a thread unsafe way the telemetry implementation has to be mindful of [BuildManager instances acquire its own BuildTelemetry instance by rokonec \u00b7 Pull Request #8444 \u00b7 dotnet/msbuild](https://github.com/dotnet/msbuild/pull/8444)\n+\t- ensure no race conditions in initialization\n+\t- only 1 TracerProvider with VS defined processing should exist\n+- Visual Studio should be responsible for having a running collector, we don't want this overhead in MSBuild and eventually many components can use it\n+\n+## Implementation and MSBuild developer experience\n+\n+### Sampling\n+\n+- We need to sample before initalizing infrastructure to avoid overhead.\n+- Enables opt-in and opt-out for guaranteed sample or not sampled.\n+- nullable ActivitySource, using `?` when working with them, we can be initialized but not sampled -> it will not reinitialize but not collect telemetry.\n+\n+### Initialization at entrypoints\n+\n+- There are 2 entrypoints:\n+    - for VS in BuildManager.BeginBuild\n+    - for standalone in Xmake.cs Main\n+\n+### Exiting\n+\n+Force flush TracerProvider's exporter in BuildManager.EndBuild.\n+Dispose collector in Xmake.cs at the end of Main.\n+\n+### Configuration\n+\n+- Class that's responsible for configuring and initializing telemetry and handles optouts, holding tracer and collector.\n+- Wrapping source so that it has correct prefixes for VS backend to ingest.\n+\n+### Instrumenting\n+\n+2 ways of instrumenting:\n+\n+#### Instrument areas in code running in the main process\n+\n+```csharp\n+using (Activity? myActivity = OpenTelemetryManager.DefaultActivitySource?.StartActivity(TelemetryConstants.NameFromAConstantToAvoidAllocation))\n+{\n+// something happens here\n+\n+// add data to the trace\n+myActivity?.WithTag(\"SpecialEvent\",\"fail\")\n+}\n+```\n+\n+Interface for classes holding telemetry data\n+\n+```csharp\n+IActivityTelemetryDataHolder data = new SomeData();\n+...\n+myActivity?.WithTags(data);\n+```\n+\n+#### Add data to activity in EndBuild\n+\n+- this activity would always be created at the same point when sdk telemetry is sent in Core and we can add data to it\n+\n+## Looking ahead\n+\n+- Create a way of using a \"HighPrioActivitySource\" which would override sampling and initialize Collector in MSBuild.exe scenario/tracerprovider in VS.\n+    - this would enable us to catch rare events\n+\n+## Uncertainties\n+\n+- Configuring tail sampling in VS telemetry server side infrastructure to not overflow them with data.\n+- How much head sampling.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}