{
  "number": 9411,
  "title": "Log allowed environment vars case-insensitively",
  "body": "I was recently investigating a problem (https://github.com/jaredpar/complog/pull/73) where the issue was that `MSBuildSdksPath` was set incorrectly, so an SDK was being resolved incorrectly. I had initially ruled that out, because I knew that we should be logging environment variables that start with `MSBUILD`.\r\n\r\nWe were, but case-sensitively. Since the canonical case for some of our config environment variables is not all caps, we should change that.\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-09T20:36:18Z",
  "updatedAt": "2023-11-16T19:00:08Z",
  "closedAt": "2023-11-16T19:00:07Z",
  "mergedAt": "2023-11-16T19:00:07Z",
  "additions": 3,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "case-insensitive-binlog-env-allow-list",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "29bf4f0e200514104463f96e865073a26174497a",
          "message": "Log allowed environment vars case-insensitively\n\nI was recently investigating a problem where the issue was that\n`MSBuildSdksPath` was set incorrectly, so an SDK was being resolved\nincorrectly. I had initially ruled that out, because I knew that we\nshould be logging environment variables that start with `MSBUILD`.\n\nWe were, but case-sensitively. Since the canonical case for some of our\nconfig environment variables is not all caps, we should change that.",
          "committedDate": "2023-11-09T20:34:26Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI @KirillOsenkov - this is what you pointed out in recent viewer PR.\r\nI'll adjust in the next one that I'm about to start working on",
        "createdAt": "2023-11-15T08:47:16Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Actually this would all be faster as a regex, let me switch to that.",
              "createdAt": "2023-11-09T20:38:28Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -15,9 +15,9 @@ internal static partial class EnvironmentUtilities\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return propertyName.StartsWith(\"MSBUILD\", StringComparison.OrdinalIgnoreCase) ||\n+                propertyName.StartsWith(\"COMPLUS_\", StringComparison.OrdinalIgnoreCase) ||\n+                propertyName.StartsWith(\"DOTNET_\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did you pick a regex vs. using `StringComparison.InvariantCultureIgnoreCase`? My intuition would've been that it was fast but never actually measured that. ",
              "createdAt": "2023-11-09T21:16:10Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "`InvariantCultureIgnoreCase` or `OrdinalIgnoreCase` are indeed super fast, but we're looking for multiple strings here. Doing it with a (generated) regex means we can collapse the length checks and do it only once, and (depending on strings) potentially do other sneaky match operations.\r\n\r\nThis is very unlikely to matter here: it's a `StartsWith`, both needle and haystack are short strings, this isn't a super hot path. And since we have to keep it working for net472, there's a bunch of duplicated code, which I have ALREADY screwed up (I forgot `ExplicitCapture` for the net472 case), so there's a pretty good argument that I should go back to the first commit here.\r\n\r\nBut . . . new shiny.",
              "createdAt": "2023-11-09T21:31:42Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I've measured with a simple regex benchmark and the three `StartsWith` calls are much faster than even the new .NET 7+ regex.",
              "createdAt": "2023-11-14T11:42:54Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "What was your test like? Because I get\r\n\r\n| Method     | Runtime              | Mean      | Error     | StdDev    | Ratio |\r\n|----------- |--------------------- |----------:|----------:|----------:|------:|\r\n| Regex      | .NET 7.0             |  2.801 \u03bcs | 0.0052 \u03bcs | 0.0046 \u03bcs |  0.17 |\r\n| StartsWith | .NET 7.0             |  5.263 \u03bcs | 0.0131 \u03bcs | 0.0122 \u03bcs |  0.31 |\r\n| Regex      | .NET 8.0             |  1.937 \u03bcs | 0.0085 \u03bcs | 0.0079 \u03bcs |  0.11 |\r\n| StartsWith | .NET 8.0             |  2.754 \u03bcs | 0.0042 \u03bcs | 0.0038 \u03bcs |  0.16 |\r\n| Regex      | .NET Framework 4.7.2 |  7.766 \u03bcs | 0.0273 \u03bcs | 0.0255 \u03bcs |  0.46 |\r\n| StartsWith | .NET Framework 4.7.2 | 16.932 \u03bcs | 0.0454 \u03bcs | 0.0403 \u03bcs |  1.00 |\r\n\r\nwith\r\n\r\n```c#\r\npublic partial class StartsWithVsRegex\r\n{\r\n    private static ICollection EnvVars = Environment.GetEnvironmentVariables().Keys;\r\n\r\n    private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\r\n\r\n    private const RegexOptions Options = RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture;\r\n\r\n#if NET7_0_OR_GREATER\r\n    [GeneratedRegex(WellKnownEnvironmentPattern, Options)]\r\n    private static partial Regex WellKnownEnvironmentVariableName();\r\n#else\r\n    private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\r\n\r\n    private static readonly Regex s_envPropertyPattern = new Regex(WellKnownEnvironmentPattern, RegexOptions.Compiled | Options);\r\n#endif\r\n\r\n    public StartsWithVsRegex()\r\n    {\r\n    }\r\n\r\n    [Benchmark]\r\n    public bool Regex()\r\n    {\r\n        bool any_is_special = false;\r\n\r\n        foreach (string propertyName in EnvVars)\r\n        {\r\n            any_is_special |= WellKnownEnvironmentVariableName().IsMatch(propertyName);\r\n        }\r\n\r\n        return any_is_special;\r\n    }\r\n\r\n    [Benchmark(Baseline = true)]\r\n    public bool StartsWith()\r\n    {\r\n        bool any_is_special = false;\r\n\r\n        foreach (string propertyName in EnvVars)\r\n        {\r\n            any_is_special |= propertyName.StartsWith(\"MSBUILD\") ||\r\n            propertyName.StartsWith(\"COMPLUS_\") ||\r\n            propertyName.StartsWith(\"DOTNET_\");\r\n        }\r\n\r\n        return any_is_special;\r\n    }\r\n}\r\n```",
              "createdAt": "2023-11-14T17:27:09Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald for those benchmarks to be equivalent though shouldn't the `StartsWith` be using `StringComparison.InvariantCultureIgnoreCase`? ",
              "createdAt": "2023-11-14T18:11:43Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "Wow, this is really odd! Can you re-run your benchmark passing `StringComparison.OrdinalIgnoreCase` to `StartsWith`?",
              "createdAt": "2023-11-14T18:12:01Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Regex still seems faster on `net7.0` at least \r\n\r\n\r\n| Method                       | Mean     | Error     | StdDev    | Ratio |\r\n|----------------------------- |---------:|----------:|----------:|------:|\r\n| Regex                        | 2.851 us | 0.0151 us | 0.0134 us |  0.54 |\r\n| StartsWith                   | 5.289 us | 0.0259 us | 0.0243 us |  1.00 |\r\n| StartsWithExplicitComparison | 4.021 us | 0.0123 us | 0.0109 us |  0.76 |",
              "createdAt": "2023-11-14T18:18:19Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "Hmm (this is with `OrdinalIgnoreCase`)\r\n\r\n| Method     | Runtime              | Mean        | Error     | StdDev      | Ratio | RatioSD |\r\n|----------- |--------------------- |------------:|----------:|------------:|------:|--------:|\r\n| Regex      | .NET 7.0             |  2,699.4 ns |  35.35 ns |    33.06 ns |  0.57 |    0.01 |\r\n| StartsWith | .NET 7.0             |    649.8 ns |   8.38 ns |     7.84 ns |  0.14 |    0.00 |\r\n| Regex      | .NET 8.0             |  1,832.3 ns |  24.73 ns |    23.13 ns |  0.38 |    0.01 |\r\n| StartsWith | .NET 8.0             |    464.2 ns |   8.70 ns |     8.94 ns |  0.10 |    0.00 |\r\n| Regex      | .NET Framework 4.7.2 | 12,025.4 ns | 987.99 ns | 2,913.12 ns |  1.54 |    0.04 |\r\n| StartsWith | .NET Framework 4.7.2 |  4,781.2 ns |  36.74 ns |    30.68 ns |  1.00 |    0.00 |",
              "createdAt": "2023-11-14T18:18:40Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "In this table, \"exact\" is wrong, I meant \"culture-aware\"\r\n\r\n| Method              | Runtime              | Mean        | Error       | StdDev      | Median      | Ratio | RatioSD |\r\n|-------------------- |--------------------- |------------:|------------:|------------:|------------:|------:|--------:|\r\n| Regex               | .NET 7.0             |  2,750.5 ns |    34.01 ns |    31.81 ns |  2,746.6 ns |  0.36 |    0.09 |\r\n| StartsWithOrdinal   | .NET 7.0             |    656.7 ns |    11.52 ns |    10.77 ns |    653.6 ns |  0.09 |    0.02 |\r\n| StartsWithInvariant | .NET 7.0             |  4,123.3 ns |    65.16 ns |    60.95 ns |  4,127.0 ns |  0.54 |    0.14 |\r\n| StartsWithExact     | .NET 7.0             |  5,252.1 ns |    60.97 ns |    57.03 ns |  5,234.3 ns |  0.69 |    0.17 |\r\n| Regex               | .NET 8.0             |  3,784.8 ns |    75.29 ns |   107.98 ns |  3,805.7 ns |  0.47 |    0.09 |\r\n| StartsWithOrdinal   | .NET 8.0             |    907.6 ns |    43.74 ns |   128.98 ns |    955.4 ns |  0.10 |    0.01 |\r\n| StartsWithInvariant | .NET 8.0             |  3,741.5 ns |    21.72 ns |    20.32 ns |  3,746.6 ns |  0.49 |    0.13 |\r\n| StartsWithExact     | .NET 8.0             |  4,913.0 ns |   311.04 ns |   917.09 ns |  5,415.8 ns |  0.54 |    0.13 |\r\n| Regex               | .NET Framework 4.7.2 | 12,578.8 ns |   248.53 ns |   394.19 ns | 12,602.8 ns |  1.54 |    0.30 |\r\n| StartsWithOrdinal   | .NET Framework 4.7.2 |  9,265.1 ns |   419.67 ns | 1,237.40 ns |  9,202.5 ns |  1.00 |    0.00 |\r\n| StartsWithInvariant | .NET Framework 4.7.2 | 22,333.3 ns | 1,742.88 ns | 5,138.93 ns | 24,013.8 ns |  2.51 |    0.87 |\r\n| StartsWithExact     | .NET Framework 4.7.2 | 16,569.4 ns |   243.07 ns |   227.37 ns | 16,597.8 ns |  2.19 |    0.54 |",
              "createdAt": "2023-11-14T18:40:30Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This matches my benchmark where I used one fixed string for the needle. `StringComparison.OrdinalIgnoreCase` was faster than regex, even though it [regressed a bit in .NET 8](https://github.com/dotnet/runtime/issues/94713).",
              "createdAt": "2023-11-14T19:07:34Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I added \"Handrolled\" which is a lightly modified copy-paste of the .NET 8 regex generator's `TryMatchAtCurrentPosition` and which blows everything away\r\n\r\n| Method                    | Runtime              | Mean        | Error     | StdDev    | Ratio | RatioSD |\r\n|-------------------------- |--------------------- |------------:|----------:|----------:|------:|--------:|\r\n| Regex                     | .NET 8.0             |  1,850.4 ns |  19.01 ns |  17.78 ns |  0.37 |    0.01 |\r\n| StartsWithOrdinal         | .NET 8.0             |    467.5 ns |   6.62 ns |   6.19 ns |  0.09 |    0.00 |\r\n| StartsWithInvariant       | .NET 8.0             |  1,582.4 ns |  27.14 ns |  24.06 ns |  0.32 |    0.01 |\r\n| StartsWithCultureSpecific | .NET 8.0             |  2,395.2 ns |  21.98 ns |  20.56 ns |  0.48 |    0.01 |\r\n| Handrolled                | .NET 8.0             |    409.7 ns |   7.86 ns |   7.72 ns |  0.08 |    0.00 |\r\n| Regex                     | .NET Framework 4.7.2 |  7,186.8 ns | 133.12 ns | 124.52 ns |  1.43 |    0.04 |\r\n| StartsWithOrdinal         | .NET Framework 4.7.2 |  4,960.0 ns |  97.68 ns | 127.01 ns |  1.00 |    0.00 |\r\n| StartsWithInvariant       | .NET Framework 4.7.2 | 12,785.4 ns | 170.13 ns | 159.14 ns |  2.54 |    0.05 |\r\n| StartsWithCultureSpecific | .NET Framework 4.7.2 | 16,590.5 ns | 193.12 ns | 180.65 ns |  3.30 |    0.09 |\r\n| Handrolled                | .NET Framework 4.7.2 |  1,613.9 ns |  30.56 ns |  28.58 ns |  0.32 |    0.01 |\r\n\r\n<details>\r\n\r\n```c#\r\n        [Benchmark]\r\n        public bool Handrolled()\r\n        {\r\n            bool any_is_special = false;\r\n\r\n            foreach (string propertyName in EnvVars)\r\n            {\r\n                any_is_special |= HandrollMatch(propertyName);\r\n            }\r\n\r\n            return any_is_special;\r\n        }\r\n\r\n        private bool HandrollMatch(string input)\r\n        {\r\n            ReadOnlySpan<char> slice = input.AsSpan();\r\n\r\n            switch (slice[0])\r\n            {\r\n                case 'M' or 'm':\r\n                    if ((uint)slice.Length < 7 ||\r\n                        !slice.Slice(1).StartsWith(\"sbuild\".AsSpan(), StringComparison.OrdinalIgnoreCase)) // Match the string \"sbuild\" (ordinal case-insensitive)\r\n                    {\r\n                        return false; // The input didn't match.\r\n                    }\r\n\r\n                    return true;\r\n\r\n                case 'C' or 'c':\r\n                    if ((uint)slice.Length < 8 ||\r\n                        !slice.Slice(1).StartsWith(\"omplus_\".AsSpan(), StringComparison.OrdinalIgnoreCase)) // Match the string \"omplus_\" (ordinal case-insensitive)\r\n                    {\r\n                        return false; // The input didn't match.\r\n                    }\r\n\r\n                    return true;\r\n\r\n\r\n                case 'D' or 'd':\r\n                    if ((uint)slice.Length < 7 ||\r\n                        !slice.Slice(1).StartsWith(\"otnet_\".AsSpan(), StringComparison.OrdinalIgnoreCase)) // Match the string \"otnet_\" (ordinal case-insensitive)\r\n                    {\r\n                        return false; // The input didn't match.\r\n                    }\r\n\r\n                    return true;\r\n\r\n                default:\r\n                    return false; // The input didn't match.\r\n            }\r\n        }\r\n```\r\n\r\n</details>\r\n\r\nI'm pretty surprised by this result; I expected the generated/compiled regex to be basically equivalent to that. Maybe there's some missing optimization for `IsMatch` causing it to do a bunch of extra work?\r\n\r\nIn any case I'll go back to the three StartsWith calls; \"handrolled\" isn't worth the maintenance but might as well pick the best easy option since we all got sniped here :)",
              "createdAt": "2023-11-14T20:55:44Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "WOW\r\n\r\nI'm impressed by such a level of dedication to this code that's being called handful of times per build :-)",
              "createdAt": "2023-11-15T08:53:48Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "We are all nerds and we know it \ud83d\ude1b ",
              "createdAt": "2023-11-15T10:05:26Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -2,22 +2,38 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+#if NET7_0_OR_GREATER\n+using System.Diagnostics.CodeAnalysis;\n+#endif\n using System.Runtime.InteropServices;\n+using System.Text.RegularExpressions;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET7_0_OR_GREATER\n+        [StringSyntax(StringSyntaxAttribute.Regex)]\n+#endif\n+        private const string WellKnownEnvironmentPattern = @\"^(MSBUILD|COMPLUS_|DOTNET_)\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(WellKnownEnvironmentPattern, RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.ExplicitCapture)]\n+        private static partial Regex WellKnownEnvironmentVariableName();\n+#else\n+        private static Regex WellKnownEnvironmentVariableName() => s_envPropertyPattern;\n+\n+        private static readonly Regex s_envPropertyPattern = new(WellKnownEnvironmentPattern, RegexOptions.Compiled | RegexOptions.CultureInvariant | RegexOptions.IgnoreCase);\n+#endif\n+\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n \n         public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)\n         {\n-            return propertyName.StartsWith(\"MSBUILD\") ||\n-                propertyName.StartsWith(\"COMPLUS_\") ||\n-                propertyName.StartsWith(\"DOTNET_\");\n+            return WellKnownEnvironmentVariableName().IsMatch(propertyName);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}