{
  "number": 11806,
  "title": "Add struct enumerator for CopyOnWritePropertyDictionary",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-07T22:39:42Z",
  "updatedAt": "2025-05-13T17:45:18Z",
  "closedAt": "2025-05-12T15:07:36Z",
  "mergedAt": "2025-05-12T15:07:36Z",
  "additions": 59,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/CopyOnWritePropertyDictionary",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "60ae77e8d27b89f99abe48aa38fbe16e15a18dde",
          "message": "Add struct enumerator for CopyOnWritePropertyDictionary",
          "committedDate": "2025-05-07T22:33:24Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "71b03860034d3dd5fb29c12c77a607c755d2cdfe",
          "message": "Clarified a few things",
          "committedDate": "2025-05-07T22:51:23Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The GetEnumerator method defined in the Enumerator struct appears redundant given that IEnumerator<T> is already implemented. Consider removing it or adding a comment to clarify its purpose.\n```suggestion\n// Removed the redundant GetEnumerator method as it is unnecessary.\n```",
              "createdAt": "2025-05-07T22:40:24Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -366,5 +387,36 @@ public ICopyOnWritePropertyDictionary<T> DeepClone()\n         {\n             return new CopyOnWritePropertyDictionary<T>(this);\n         }\n+\n+        public struct Enumerator : IEnumerator<T>\n+        {\n+            private ImmutableDictionary<string, T>.Enumerator _dictionaryEnumerator;\n+            public Enumerator(CopyOnWritePropertyDictionary<T> dictionary)\n+            {\n+                _dictionaryEnumerator = dictionary._backing.GetEnumerator();\n+            }\n+\n+            public T Current { get; private set; }\n+\n+            readonly object IEnumerator.Current => Current;\n+\n+            public void Dispose() => _dictionaryEnumerator.Dispose();\n+\n+            public readonly Enumerator GetEnumerator() => this;",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The collection now exposes two different GetEnumerator implementations with distinct return types between the public method and explicit interface implementations. Consider adding documentation to clarify the intended usage scenarios for each enumerator.",
              "createdAt": "2025-05-07T22:40:25Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -137,12 +137,18 @@ public void Clear()\n         /// Gets an enumerator over all the properties in the collection\n         /// Enumeration is in undefined order\n         /// </summary>\n-        public IEnumerator<T> GetEnumerator() => _backing.Values.GetEnumerator();\n+        public ImmutableDictionary<string, T>.Enumerator GetEnumerator() => _backing.GetEnumerator();\n+\n+        /// <summary>\n+        /// Gets an enumerator over all the properties in the collection\n+        /// Enumeration is in undefined order\n+        /// </summary>\n+        IEnumerator<T> IEnumerable<T>.GetEnumerator() => new Enumerator(this);\n \n         /// <summary>\n         /// Get an enumerator over entries",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}