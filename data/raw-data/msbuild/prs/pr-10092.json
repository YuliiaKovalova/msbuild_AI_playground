{
  "number": 10092,
  "title": "Add new TargetBuiltReasons",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/9467\r\n\r\n### Context\r\nWhen building targets we only specify a reason when it has direct control over the flow. So some targets have no built reason at the end of the build and can get very confusing on large builds.\r\n\r\n### Changes Made\r\nAdded options for `TargetBuiltReason`: Initial target, entry target, default target.\r\nThese are added to `TargetSpecification` so they can be referenced in different points of the build.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-30T16:35:58Z",
  "updatedAt": "2024-08-07T10:10:41Z",
  "closedAt": "2024-06-28T13:32:56Z",
  "mergedAt": "2024-06-28T13:32:56Z",
  "additions": 178,
  "deletions": 100,
  "changedFiles": 9,
  "headRefName": "9467",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c2cd77f197b34ec494f88a3b7977c50ea5767b74",
          "message": "Sketch of TargetBuildReason having InitialTargets and DefaultTargets",
          "committedDate": "2024-04-26T09:32:29Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "150103938c21df8a0a83483bbb3e995e8dae31e2",
          "message": "Added EntryTarget reason",
          "committedDate": "2024-04-26T13:08:19Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adc802996671367e200c5305e02fa1d4617621c2",
          "message": "Added comments about the new TargetBuiltReason",
          "committedDate": "2024-04-26T18:02:22Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ebcb766b14c605f2a20614d2a6c9b3546538843",
          "message": "Added comment on new field",
          "committedDate": "2024-04-30T16:26:53Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf5a980f785e8db1aa9fad8868ec8c3fa4a6d6a3",
          "message": "Clear code",
          "committedDate": "2024-04-30T16:29:32Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f593f69413fa31cdb04612ed1bd562463b333d6",
          "message": "Addressed some PR comments",
          "committedDate": "2024-05-21T12:44:40Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f172c1a9c29437080d935b3752226fee16f501f",
          "message": "Changed TargetBuiltReason to be defined when getting all targets",
          "committedDate": "2024-05-28T19:32:05Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "91fbabd8d25ec905b9551beac054d878e803eff5",
          "message": "Merge main",
          "committedDate": "2024-05-28T19:49:20Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8965473d07025ef45d9060541eac2e903e8ab3c",
          "message": "Addressed PR comments",
          "committedDate": "2024-06-03T07:39:15Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00be0582503fe4e5d96ae32e047b7e8dfb4851e0",
          "message": "Fixed default targets always running",
          "committedDate": "2024-06-06T15:42:01Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bd99ada5e0499f0e305a9ecf9b65d1e02532b82",
          "message": "changed to using tuple names",
          "committedDate": "2024-06-20T12:57:15Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "993ffbc1c38ff99f6980e1698735c37380b9a5bb",
          "message": "Addressed comments",
          "committedDate": "2024-06-26T20:28:44Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eacd702d739f1b1ec8530f51f86f4677ac9ef48f",
          "message": "Addressed comments v2",
          "committedDate": "2024-06-26T21:08:18Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I believe we should test the case of explicit entry target (or implicit default target) and identical initial target - as then the same target should be executed twice - for 2 different reasons.\r\n\r\nNot sure I understand this. A target must be executed only once, for exactly one reason--even if it is put in the target stack multiple times for multiple reasons. Right?",
        "createdAt": "2024-05-01T14:39:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > I believe we should test the case of explicit entry target (or implicit default target) and identical initial target - as then the same target should be executed twice - for 2 different reasons.\r\n> \r\n> Not sure I understand this. A target must be executed only once, for exactly one reason--even if it is put in the target stack multiple times for multiple reasons. Right?\r\n\r\nI believe for InitialTargets we do not deduplicate this and we document it so as well - but will double check (afk now though). In general - target can execute multiple times if not properly input/output attributed, right? Or maybe I'm just confused :-)",
        "createdAt": "2024-05-01T18:25:04Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> In general - target can execute multiple times if not properly input/output attributed, right?\r\n\r\nWithin a single project instance in a single build, the engine should never run the target again, at most emitting `Target \"{0}\" skipped. Previously built successfully.` to the log.",
        "createdAt": "2024-05-01T18:45:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry - yes, you are correct - I was totally wrong on this.\r\nI still have some recollection that even for skipped we could set the BuiltReason. But I can be wrong again. @maridematte - please ignore my comment until I check this on my end with code at hand",
        "createdAt": "2024-05-01T19:08:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Seems like `TargetSkippedBuildEventArgs` has BuiltReason as well: https://github.com/dotnet/msbuild/blob/main/src/Framework/TargetSkippedEventArgs.cs#L102 It's being populated from the `TargetEntry` populated here. It's probably not used in the viewer - as viewer doesn't seem to display built reason for skipped targets (@KirillOsenkov ?). But even despite that it might not be bad idea to populate the information properly - we just need to pass a tupple list instead of a string list into the `BuildTargets`",
        "createdAt": "2024-05-02T12:28:35Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Reminds me of this case I think:\r\n![image](https://github.com/dotnet/msbuild/assets/679326/f230b7d3-2758-4dff-a4d6-8d4409a99b82)\r\n",
        "createdAt": "2024-05-04T01:40:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "It is indeed pretty elegant and simpler than I thought it would be!\r\n\r\nI filed a viewer issue to expose the TargetBuiltReason for skipped targets.\r\n\r\nWould be nice to check if we can pass through this information for skipped targets.\r\n\r\nJan, not sure what you mean by passing a tuple instead of a string list, can you link to the source code?",
        "createdAt": "2024-05-04T01:53:10Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Also, be very careful here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f7f0b1924904ec7f2792c0a7805a4d0e91ac8955/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L710\r\n\r\nWe should reason about this check very carefully, because now instead of None it could be something else. If the intent here was to check for \"anything else but AfterTargets\", the condition needs to be updated for the new enum values.\r\n\r\nNeed a lot of careful scrutiny here, because we might accidentally introduce a very bad regression.",
        "createdAt": "2024-05-04T01:56:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "`PushTargets` seems like a very non-trivial algorithm. I'd sleep better at night if it was covered by unit-tests. Wondering if we already have tests covering this method? \r\n\r\nWe need to trace the control flow in this method and carefully determine which branch of the if/else is (or should be) taken for each of the new enum values.",
        "createdAt": "2024-05-04T02:04:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "\r\n> Jan, not sure what you mean by passing a tuple instead of a string list, can you link to the source code?\r\n\r\n**tl;dr;:** Setting the reason should be responsibility of the code that requested the build (and hence knows the reason)\r\n\r\n\r\nBasically the `BuildTargets` is an internal contract and called from a single place in code (not considering the unit tests):\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f25414599dcb07202a9f8bfd8125d04a6e5c14be/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1210C21-L1210C31\r\n\r\nSo it should be very easy to transfer the responsibility of deciding about the build reason from the `BuildTargets` method, which actually doesn't have the knowledge (and the proposal now is just best guessing) to the caller (above) who is requesting the targets to be build and hence has the exact knowledge of the reason.\r\nIn such case the `BuildTargets` would accept e.g. `(string, BuiltReason)[] targets` instead of current `string[] targets` - which is easily accomodable on a caller side, removes the uncertainity on the callee side and is not breaking any contracts.\r\n\r\n(but we already agreed on this offline with @maridematte)\r\n\r\n",
        "createdAt": "2024-05-04T07:28:27Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-06-03T09:04:17Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-06-03T09:04:27Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I'd say use named tuples everywhere and pick the same names for consistency, e.g. `(string targetName, TargetBuiltReason builtReason)`\r\n\r\nOr maybe create a struct such as `internal record struct TargetInfo(string Name, TargetBuiltReason BuiltReason)` and use it everywhere instead (this way we can add more info to it in the future, such as ParentTarget, if needed).",
        "createdAt": "2024-06-19T19:49:16Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Otherwise I think it's good! Avoids changing any actual logic that might be a regression",
        "createdAt": "2024-06-19T19:50:17Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "maybe remove the empty line. As a rule in C# there shouldn't be two consecutive empty lines.",
              "createdAt": "2024-05-04T01:45:43Z",
              "path": "src/Framework/TargetBuiltReason.cs",
              "diffHunk": "@@ -28,6 +28,22 @@ public enum TargetBuiltReason\n         /// <summary>\n         /// The target was part of the parent's AfterTargets list.\n         /// </summary>\n-        AfterTargets\n+        AfterTargets,\n+\n+        /// <summary>\n+        /// The target was defined as an initial target of the project.\n+        /// </summary>\n+        InitialTarget,\n+",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would be nice to avoid having two lines of code both creating TargetEntry. I think it'll be better if you mutate the buildReason variable and pass it as an argument, so you can avoid duplicating lines 757 and 761.",
              "createdAt": "2024-05-04T01:49:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -737,7 +751,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n \n                 // Add to the list of targets to push.  We don't actually put it on the stack here because we could run into a circular dependency\n                 // during this loop, in which case the target stack would be out of whack.\n-                TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, buildReason, _componentHost, stopProcessingOnCompletion);\n+                TargetEntry newEntry;\n+                if (buildReason == TargetBuiltReason.None)\n+                {\n+                    newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, targetSpecification._targetBuiltReason, _componentHost, stopProcessingOnCompletion);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Pluralization should match the xml attributes. So DefaultTargets and InitialTargets like AfterTargets.\nAlso EntryTargets as that can be several (/t:a;b)",
              "createdAt": "2024-05-04T02:18:26Z",
              "path": "src/Framework/TargetBuiltReason.cs",
              "diffHunk": "@@ -28,6 +28,22 @@ public enum TargetBuiltReason\n         /// <summary>\n         /// The target was part of the parent's AfterTargets list.\n         /// </summary>\n-        AfterTargets\n+        AfterTargets,\n+\n+        /// <summary>\n+        /// The target was defined as an initial target of the project.\n+        /// </summary>\n+        InitialTarget,\n+\n+\n+        /// <summary>\n+        /// The target was the default target of the project\n+        /// </summary>\n+        DefaultTarget,",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "so, to clarify, all three new enum fields should be plural, right?",
              "createdAt": "2024-05-04T02:24:12Z",
              "path": "src/Framework/TargetBuiltReason.cs",
              "diffHunk": "@@ -28,6 +28,22 @@ public enum TargetBuiltReason\n         /// <summary>\n         /// The target was part of the parent's AfterTargets list.\n         /// </summary>\n-        AfterTargets\n+        AfterTargets,\n+\n+        /// <summary>\n+        /// The target was defined as an initial target of the project.\n+        /// </summary>\n+        InitialTarget,\n+\n+\n+        /// <summary>\n+        /// The target was the default target of the project\n+        /// </summary>\n+        DefaultTarget,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Yes",
              "createdAt": "2024-05-04T02:39:21Z",
              "path": "src/Framework/TargetBuiltReason.cs",
              "diffHunk": "@@ -28,6 +28,22 @@ public enum TargetBuiltReason\n         /// <summary>\n         /// The target was part of the parent's AfterTargets list.\n         /// </summary>\n-        AfterTargets\n+        AfterTargets,\n+\n+        /// <summary>\n+        /// The target was defined as an initial target of the project.\n+        /// </summary>\n+        InitialTarget,\n+\n+\n+        /// <summary>\n+        /// The target was the default target of the project\n+        /// </summary>\n+        DefaultTarget,",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If only the build reson differs here  let's replace this with a single call where only the build reason is conditioned (e.g. via ternary operator).\r\n\r\nThis way it'll be easier to read.",
              "createdAt": "2024-05-31T17:11:52Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -737,7 +737,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n \n                 // Add to the list of targets to push.  We don't actually put it on the stack here because we could run into a circular dependency\n                 // during this loop, in which case the target stack would be out of whack.\n-                TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, buildReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);\n+                TargetEntry newEntry;\n+                if (buildReason == TargetBuiltReason.None)\n+                {\n+                    newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, targetSpecification._targetBuiltReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);\n+                }\n+                else\n+                {\n+                    newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, buildReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);\n+                }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "you can do `(string name, TargetBuiltReason reason)` and then `target.reason` instead of `target.Item1`",
              "createdAt": "2024-06-19T19:40:33Z",
              "path": "src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs",
              "diffHunk": "@@ -356,16 +356,16 @@ internal void SetNewBuildRequests(FullyQualifiedBuildRequest[] requests)\n \n         #region ITargetBuilder Members\n \n-        public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, string[] targets, Lookup baseLookup, CancellationToken cancellationToken)\n+        public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, (string, TargetBuiltReason)[] targets, Lookup baseLookup, CancellationToken cancellationToken)\n         {\n             _requestBuilderCallback = callback;\n \n             if (cancellationToken.WaitHandle.WaitOne(1500))\n             {\n                 BuildResult result = new BuildResult(entry.Request);\n-                foreach (string target in targets)\n+                foreach ((string, TargetBuiltReason) target in targets)",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "consider using tuple variable names everywhere for consistency",
              "createdAt": "2024-06-19T19:41:37Z",
              "path": "src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs",
              "diffHunk": "@@ -388,9 +388,9 @@ public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, Buil\n                 if (cancellationToken.WaitHandle.WaitOne(1500))\n                 {\n                     BuildResult result = new BuildResult(entry.Request);\n-                    foreach (string target in targets)\n+                    foreach ((string, TargetBuiltReason) target in targets)\n                     {\n-                        result.AddResultsForTarget(target, BuildResultUtilities.GetEmptyFailingTargetResult());\n+                        result.AddResultsForTarget(target.Item1, BuildResultUtilities.GetEmptyFailingTargetResult());",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hyper-nit:\r\n```suggestion\r\n        EntryTargets,\r\n```",
              "createdAt": "2024-06-20T16:09:43Z",
              "path": "src/Framework/TargetBuiltReason.cs",
              "diffHunk": "@@ -28,6 +28,21 @@ public enum TargetBuiltReason\n         /// <summary>\n         /// The target was part of the parent's AfterTargets list.\n         /// </summary>\n-        AfterTargets\n+        AfterTargets,\n+\n+        /// <summary>\n+        /// The target was defined as an initial target of the project.\n+        /// </summary>\n+        InitialTargets,\n+\n+        /// <summary>\n+        /// The target was one of the default targets of the project.\n+        /// </summary>\n+        DefaultTargets,\n+\n+        /// <summary>\n+        /// The target was one of the targets explicitly called to be built.\n+        /// </summary>\n+        EntryTargets",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd like to avoid these new `List<(string, TargetBuiltReason)>` allocations, since this method allocated only the final list before. Can you add the new tuples in a loop instead of doing these `ConvertAll`s?",
              "createdAt": "2024-06-20T16:15:53Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -775,10 +775,12 @@ public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)\n                     \"Targets must be same as proxy targets\");\n             }\n \n-            List<string> initialTargets = _projectInitialTargets;\n-            List<string> nonInitialTargets = (request.Targets.Count == 0) ? _projectDefaultTargets : request.Targets;\n+            List<(string name, TargetBuiltReason reason)> initialTargets = _projectInitialTargets.ConvertAll(target => (target, TargetBuiltReason.InitialTargets));\n+            List<(string name, TargetBuiltReason reason)> nonInitialTargets = (request.Targets.Count == 0)\n+                ? _projectDefaultTargets.ConvertAll(target => (target, TargetBuiltReason.DefaultTargets))\n+                : request.Targets.ConvertAll(target => (target, TargetBuiltReason.EntryTargets));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This isn't 100% clear to me, comment details please?",
              "createdAt": "2024-06-20T16:20:23Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -737,7 +737,9 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n \n                 // Add to the list of targets to push.  We don't actually put it on the stack here because we could run into a circular dependency\n                 // during this loop, in which case the target stack would be out of whack.\n-                TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, buildReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);\n+                TargetBuiltReason entryReason = buildReason == TargetBuiltReason.None ? targetSpecification._targetBuiltReason : buildReason;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}