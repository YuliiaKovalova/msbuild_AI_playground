{
  "number": 8832,
  "title": "Reduce allocations in ConditionEvaluator.UpdateConditionedPropertiesTable",
  "body": "Fixes [AB#1824943](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1824943)\r\n\r\nIn order to parse the name of a property from an MSBuild expression, this method used a regular expression to parse a simple pattern, which results in significant amounts of allocations as identified by GCPauseWatson.\r\n\r\nThe actual pattern used is very simple and can be achieved regex.\r\n\r\nThis change extracts the parsing to a helper function and adds a unit test for it. I validated that the test passed with the prior implementation, then converted it to avoid regex allocations altogether.\r\n\r\nWhile at it I null annotated `ConditionEvaluator`. That was done in its own commit, if you want to review the changes separately.",
  "state": "MERGED",
  "createdAt": "2023-06-04T09:43:57Z",
  "updatedAt": "2023-06-08T21:08:12Z",
  "closedAt": "2023-06-08T14:41:27Z",
  "mergedAt": "2023-06-08T14:41:26Z",
  "additions": 88,
  "deletions": 43,
  "changedFiles": 2,
  "headRefName": "dev/drnoakes/fix-1824943-ConditionEvaluator-allocations",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e8d7e264c161f15897c9b16e0b6b9d375e9e8ac0",
          "message": "Null annotate ConditionEvaluator",
          "committedDate": "2023-06-04T11:27:19Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ee19ded92724eb4f034c798f08e93dff280c3aed",
          "message": "Reduce allocations in ConditionEvaluator.UpdateConditionedPropertiesTable\n\nIn order to parse the name of a property from an MSBuild expression, this method used a regular expression to parse a simple pattern, which results in significant amounts of allocations as identified by GCPauseWatson.\n\nThe actual pattern used is very simple and can be achieved regex.\n\nThis change extracts the parsing to a helper function and adds a unit test for it. I validated that the test passed with the prior implementation, then converted it to avoid regex allocations altogether.",
          "committedDate": "2023-06-04T11:42:13Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a3cb34fde44f262a5765095083b244a3956760c",
          "message": "Convert TryGetSingleProperty to use ROS<char>",
          "committedDate": "2023-06-07T13:33:12Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I know it currently achieves nothing but if the method returned `ReadOnlySpan<char>`, it would be more future-proof. At some point we will be able to make dictionary lookups without realizing string keys, for example.",
              "createdAt": "2023-06-06T07:55:38Z",
              "path": "src/Build/Evaluation/ConditionEvaluator.cs",
              "diffHunk": "@@ -120,6 +109,24 @@ internal static class ConditionEvaluator\n             }\n         }\n \n+        // Internal for testing purposes\n+        internal static bool TryGetSingleProperty(string input, int beginning, int length, [NotNullWhen(returnValue: true)] out string? propertyName)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good idea, thanks. I'll make that change in the next day or so.",
              "createdAt": "2023-06-06T08:58:31Z",
              "path": "src/Build/Evaluation/ConditionEvaluator.cs",
              "diffHunk": "@@ -120,6 +109,24 @@ internal static class ConditionEvaluator\n             }\n         }\n \n+        // Internal for testing purposes\n+        internal static bool TryGetSingleProperty(string input, int beginning, int length, [NotNullWhen(returnValue: true)] out string? propertyName)",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Done. The current callers don't benefit from this, but future ones might. There's no `IndexOfAny` for `ReadOnlySpan<char>` so I had to improvise a little. It's not too horrible.",
              "createdAt": "2023-06-07T13:34:23Z",
              "path": "src/Build/Evaluation/ConditionEvaluator.cs",
              "diffHunk": "@@ -120,6 +109,24 @@ internal static class ConditionEvaluator\n             }\n         }\n \n+        // Internal for testing purposes\n+        internal static bool TryGetSingleProperty(string input, int beginning, int length, [NotNullWhen(returnValue: true)] out string? propertyName)",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}