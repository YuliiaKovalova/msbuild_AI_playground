{
  "number": 8485,
  "title": "net35 task host properly handle isolated AppDomain tasks",
  "body": "Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1729428\r\n\r\n### Context\r\nChange https://github.com/dotnet/msbuild/pull/7387/files#diff-2295212a8e8b80807c0594f9e600d287e5a813c10326d71b4ac5ce907f0ecc42R45 have caused regression of not running specific net35 task in isolated AppDomain.\r\n\r\nIn our particular case of customer feedback issue, `UnregisterAssembly` task have kept some assemblies locked, because it need to load assemblies in order to unregister them, while prior this changes assembly files were released when `AppDomain` which loaded them have been deleted.\r\n\r\n### Changes Made\r\nFallback to old behavior handling detecting attributes from full types as oppose to reflection only types.\r\nChanges was based on changes of related PR ^.\r\n\r\n### Testing\r\nI have created repro. After fixes it no longer repros.\r\n\r\n### Notes\r\nConsequences of this error might be serious. Everyone with VS 17.3+ compiling and registering COM objects in net35 will experience it while rebuilding. We do not have multiple reports of this issue, AFAIK, but people might hesitate to report it, as obvious workarounds  exists (rebuild again, or use older VS 2019-).\r\n\r\n@rainersigwald  we still might consider to backport it and/or servicing it in VS 17.5\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-22T20:16:34Z",
  "updatedAt": "2023-03-07T06:42:03Z",
  "closedAt": "2023-03-07T06:42:03Z",
  "mergedAt": "2023-03-07T06:42:03Z",
  "additions": 8,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "rokonec/fix-app-domain-isolated",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9d758d37966deb289b6c12aa6fa5be0656339070",
          "message": "For net v3.5 fallback to old behavior handling HasLoadInSeparateAppDomainAttribute and HasSTAThreadAttribute",
          "committedDate": "2023-02-22T20:08:33Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72447535c1a7d87dc3f4fd7246bbe0091b453572",
          "message": "Comments calrification",
          "committedDate": "2023-02-23T13:02:35Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind I am positive it is the right fix. \r\nHere is how that `every other build failed` was happening:\r\n  1. rebuild, it builds an assembly which is registered as COM by RegisterAssembly, during that registration it creates a cache file in obj for example `obj\\some.csproj.UnmanagedRegistration.cache` for purpose of being able to clean it properly if needed\r\n  2. next rebuild, during clean it finds `obj\\some.csproj.UnmanagedRegistration.cache` which means it has to unregister assembly listed in that cache. This has to be done by `msbuildtaskhost` for it is net35 COM object. Task succeed, assembly is unregistered and cache file is deleted. However, when same build need to access the assembly file for any reason, copy mostly, the file is still locked and build failed.\r\n  3. next build, during clean it does NOT find  `obj\\some.csproj.UnmanagedRegistration.cache`  as it has been deleted by previous rebuild and proceed identical to ad 1.\r\n\r\nIn other words, that lock is not hold by previous build. The latter rebuild locks it itself.\r\n\r\nWhen the unregister assembly task runs properly in isolated AppDomain, when that domain is destroyed, all references to loaded assembly files is released and assembly file is no longer locked.\r\n\r\nTask host is actually dying every single build, but only after whole build is finished (failed or not).",
        "createdAt": "2023-02-23T01:25:01Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}