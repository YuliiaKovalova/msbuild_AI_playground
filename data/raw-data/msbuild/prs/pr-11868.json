{
  "number": 11868,
  "title": "Use Microsoft.IO.Redist in more places",
  "body": "Fixes issues @Erarndt pointed out in #11852 that regressed in #11448, as well as adding more uses of the more-efficient `Microsoft.IO.Redist`.",
  "state": "MERGED",
  "createdAt": "2025-05-19T17:58:59Z",
  "updatedAt": "2025-05-26T09:40:33Z",
  "closedAt": "2025-05-26T09:40:32Z",
  "mergedAt": "2025-05-26T09:40:31Z",
  "additions": 26,
  "deletions": 8,
  "changedFiles": 6,
  "headRefName": "exp/io-redist-in-expander",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3a8faf3c9e9bb3f993086319120d839fba6e808c",
          "message": "Use Microsoft.IO.Redist in Expander\n\nIn addition to the general improvements, this brings a\n`String.Contains(char)` overload that fixes the same issues as #11852.",
          "committedDate": "2025-05-19T17:57:24Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c2a375933ba2e0badff8b09a34b013e80406d70",
          "message": "Use string.Contains(char) more\n\nThis is a bit more efficient on core and uses the Microsoft.IO.Redist\nshim on Framework.",
          "committedDate": "2025-05-19T17:57:42Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2bd8198c3bcdce98bfa78e7e664177f3f2a3fc16",
          "message": "More IO.Redist",
          "committedDate": "2025-05-19T19:34:07Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "949d113fbcad8e0d40f264a10210b8e086fcbee4",
          "message": "Use Array.IndexOf instead of Contains\n\nPer some simple benchmarks this is always faster, at least for the small\narrays that are being used here.\n\n| Method       | Runtime              | Mean      | Error     | StdDev    | Ratio | RatioSD |\n|------------- |--------------------- |----------:|----------:|----------:|------:|--------:|\n| LinqContains | .NET 9.0             | 11.020 ns | 0.3929 ns | 1.1335 ns |  0.38 |    0.04 |\n| LinqContains | .NET Framework 4.7.2 | 29.373 ns | 0.5761 ns | 0.5916 ns |  1.00 |    0.03 |\n|              |                      |           |           |           |       |         |\n| ArrayIndexOf | .NET 9.0             |  9.736 ns | 0.6508 ns | 1.8984 ns |  0.85 |    0.17 |\n| ArrayIndexOf | .NET Framework 4.7.2 | 11.441 ns | 0.1499 ns | 0.1402 ns |  1.00 |    0.02 |\n\n```c#\n[MemoryDiagnoser]\npublic class Benchmarks\n{\n    internal static readonly Version Wave17_10 = new Version(17, 10);\n    internal static readonly Version Wave17_12 = new Version(17, 12);\n    internal static readonly Version Wave17_14 = new Version(17, 14);\n    internal static readonly Version[] AllWaves = { Wave17_10, Wave17_12, Wave17_14 };\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        // No setup needed for this benchmark\n    }\n\n    [Benchmark]\n    public bool LinqContains()\n    {\n        return AllWaves.Contains(Wave17_12);\n    }\n\n    [Benchmark]\n    public bool ArrayIndexOf()\n    {\n        return ContainsUsingIndexOf(AllWaves, Wave17_12);\n    }\n\n    private static bool ContainsUsingIndexOf<T>(T[] array, T value)\n    {\n        return Array.IndexOf(array, value) >= 0;\n    }\n}\n```",
          "committedDate": "2025-05-23T15:10:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Oh cool! TIL that MS.IO has some string extension methods (including `string.Contains(char)`) ",
        "createdAt": "2025-05-19T18:10:01Z",
        "author": {
          "login": "Erarndt"
        }
      },
      {
        "body": "I only found out when I added a private extension method that did the same thing and hit a conflict \ud83d\ude05",
        "createdAt": "2025-05-19T19:27:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Latest push is more cases I found by searching across the solution for the regex \r\n\r\n```regex\r\n\\.Contains\\('.'\r\n```",
        "createdAt": "2025-05-19T19:35:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Internal VS PR with all the Microsoft.IO moves passed perf DDRITs: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/637996.\r\n\r\nI wanted to double-check that since it might have caused `Microsoft.IO.Redist` to load earlier and thus caused a blip--but it looks like we're ok.",
        "createdAt": "2025-05-23T15:16:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Spoke too soon on the banning, looking.",
        "createdAt": "2025-05-23T15:30:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok some of the uses that popped up with a total ban of the API are harder to avoid so I'm not going to. Ready for review IMO.",
        "createdAt": "2025-05-23T18:24:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The preprocessor symbol `NET` may not be consistently defined across all SDK versions. Consider using official target-framework constants like `NET6_0_OR_GREATER`, `NET7_0`, `NETFRAMEWORK`, or `NETSTANDARD` for clearer intent and compatibility.\n```suggestion\n#if NET6_0_OR_GREATER\n```",
              "createdAt": "2025-05-19T18:00:04Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -7,7 +7,11 @@\n using System.Collections.Generic;\n using System.Diagnostics.CodeAnalysis;\n using System.Globalization;\n+#if NET",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}