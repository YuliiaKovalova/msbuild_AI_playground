{
  "number": 9623,
  "title": "Fix parsing GB18030",
  "body": "### Fixes \r\n[1921343](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1921343/)\r\n\r\n### Context\r\nXDocument.Load doesn't handle parsing GB18030 symbols and returns path like \ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1%EE%80%B8\u486b3\\\ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1%EE%80%B8\u486b3 instead of \ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1\ue038\u486b3\\\ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1\ue038\u486b3. It causes System.IO.DirectoryNotFoundException.\r\n\r\n### Changes Made\r\nUsing XmlReader for handling encoding issues.\r\n\r\n### Testing\r\nUT + manual\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-10T14:46:20Z",
  "updatedAt": "2024-01-11T15:31:57Z",
  "closedAt": "2024-01-11T15:31:57Z",
  "mergedAt": "2024-01-11T15:31:57Z",
  "additions": 38,
  "deletions": 6,
  "changedFiles": 4,
  "headRefName": "dev/ykovalova/fix_GB18030_parsing",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "be502339f238870a3475c16f8b1b0389d76d29b4",
          "message": "fix parsing GB18030",
          "committedDate": "2024-01-10T14:37:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e4aaa9ba66fe533c550468dd7cd64a305229bce",
          "message": "add  XDocument.Load(System.String) to banned API",
          "committedDate": "2024-01-11T07:46:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b32c570c4fb265d1107325c7632f71bd27a02264",
          "message": "address comments in test",
          "committedDate": "2024-01-11T07:51:12Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b8d208657dcb42a78a6f91296c44abb1c7a11b25",
          "message": "remore extra using",
          "committedDate": "2024-01-11T08:05:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "112a61ef0124553afff6fdd8191fd388a98e4fef",
          "message": "fix test failure",
          "committedDate": "2024-01-11T08:53:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "777db2e870a8e4eb2599cb85fc471ecf54c7aa18",
          "message": "add IgnoreWhitespace to TestAssemblyInfo",
          "committedDate": "2024-01-11T14:46:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Should we fix other usages of `XDocument.Load` as well?",
        "createdAt": "2024-01-10T15:02:24Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Should we fix other usages of `XDocument.Load` as well?\r\n\r\nIt is handled in the other production places already (we have 2 more only)\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/e2ece850-b43f-43be-90f5-ceeb57f551da)\r\n",
        "createdAt": "2024-01-10T15:06:22Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you ban this API in `src\\BannedSymbols.txt` so we never accidentally reintroduce it?",
              "createdAt": "2024-01-10T16:47:13Z",
              "path": "src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs",
              "diffHunk": "@@ -335,7 +336,12 @@ private XDocument LoadAppConfig(ITaskItem appConfigItem)\n             }\n             else\n             {\n-                document = XDocument.Load(appConfigItem.ItemSpec);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-01-11T07:48:14Z",
              "path": "src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs",
              "diffHunk": "@@ -335,7 +336,12 @@ private XDocument LoadAppConfig(ITaskItem appConfigItem)\n             }\n             else\n             {\n-                document = XDocument.Load(appConfigItem.ItemSpec);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You're creating a new TestEnvironment but using the class-level one. Should this be\r\n\r\n```suggestion\r\n                TransientTestFolder rootTestFolder = env.CreateFolder(); \r\n                TransientTestFolder testFolder = env.CreateFolder(Path.Combine(rootTestFolder.Path, \"\ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1\ue038\u486b3\"));\r\n                string appConfigContents = WriteAppConfigRuntimeSection(string.Empty, testFolder);\r\n                string outputAppConfigFile = env.ExpectFile(\".config\").Path;\r\n```\r\n\r\n?",
              "createdAt": "2024-01-10T16:51:02Z",
              "path": "src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs",
              "diffHunk": "@@ -259,6 +259,22 @@ public void AppConfigInvalidIfDependentAssemblyNodeIsEmpty()\n             redirectResults.Engine.AssertLogContains(\"MSB3835\");\n         }\n \n+        [Fact]\n+        public void AppConfigWhenFilePlacedInLocationWithGB18030Characters()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder rootTestFolder = _env.CreateFolder(); \n+                TransientTestFolder testFolder = _env.CreateFolder(Path.Combine(rootTestFolder.Path, \"\ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1\ue038\u486b3\"));\n+                string appConfigContents = WriteAppConfigRuntimeSection(string.Empty, testFolder);\n+                string outputAppConfigFile = _env.ExpectFile(\".config\").Path;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For encoding-specific things it's often a good idea to use Unicode escape sequences like\r\n\r\n```suggestion\r\n                TransientTestFolder testFolder = _env.CreateFolder(Path.Combine(rootTestFolder.Path, \"\\uD873\\uDD02\\u9FA8\\u82D8\\u722B\\u9EA4\\u03C5\\u33D1\\uE038\\u486B\\u0033\"));\r\n```\r\n\r\nThat way we never accidentally reencode the file and lose test applicability.",
              "createdAt": "2024-01-10T16:53:27Z",
              "path": "src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs",
              "diffHunk": "@@ -259,6 +259,22 @@ public void AppConfigInvalidIfDependentAssemblyNodeIsEmpty()\n             redirectResults.Engine.AssertLogContains(\"MSB3835\");\n         }\n \n+        [Fact]\n+        public void AppConfigWhenFilePlacedInLocationWithGB18030Characters()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder rootTestFolder = _env.CreateFolder(); \n+                TransientTestFolder testFolder = _env.CreateFolder(Path.Combine(rootTestFolder.Path, \"\ud873\udd02\u9fa8\u82d8\u722b\u9ea4\u03c5\u33d1\ue038\u486b3\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do we have IgnoreWhitespace here and not in the `testassemblyinfo.cs`?",
              "createdAt": "2024-01-11T14:40:43Z",
              "path": "src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs",
              "diffHunk": "@@ -335,7 +336,12 @@ private XDocument LoadAppConfig(ITaskItem appConfigItem)\n             }\n             else\n             {\n-                document = XDocument.Load(appConfigItem.ItemSpec);\n+                var xrs = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true, IgnoreWhitespace = true };",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}