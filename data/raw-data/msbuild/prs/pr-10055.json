{
  "number": 10055,
  "title": "Rendering message about build cancellation (Terminal Logger)",
  "body": "Fixes #8983\r\n\r\n### Context\r\nWhen you cancel command-line MSBuild, we send the cancellation signal through the API and also writes status to stdout. But it does it directly in XMake, and TL tends to immediately overwrite that message with status updates, so it's not obvious whether cancellation is in progress.\r\n\r\n### Changes Made\r\nAn event signaling cancellation was added to the new `IEventSource5`. Sources implementing v4 were updated to add support for new event and both terminal logger and console logger(s) are using this event to inform about cancellation.\r\n\r\n### Testing\r\nManual:\r\n![image](https://github.com/dotnet/msbuild/assets/12775388/48287b61-1037-4650-a95b-28b15d08e95e)\r\nand new unit tests were added.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-22T14:20:03Z",
  "updatedAt": "2024-06-25T11:09:30Z",
  "closedAt": "2024-06-25T11:09:29Z",
  "mergedAt": "2024-06-25T11:09:29Z",
  "additions": 240,
  "deletions": 101,
  "changedFiles": 45,
  "headRefName": "dev/mipavlik/terminallogger-build-cancellation",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7b5be1fb8f559c8a1815924b8bfbc7f7fee5ff4d",
          "message": "Rendering message about build canellation",
          "committedDate": "2024-04-22T14:16:38Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab7d408bfd7faaee21d61c185993ccdb27b1f0eb",
          "message": "Added new cancellation event",
          "committedDate": "2024-06-10T13:44:32Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "290b61fe3698bb48b81f9e4edb1c07afb09cf4d9",
          "message": "Update src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-14T08:58:29Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41cbc4e24b4490b83c8f2bcdb3ac4961767f0554",
          "message": "Cancellation message will show in quiet mode",
          "committedDate": "2024-06-14T09:13:59Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01c599cded535315b5b93c3712f37c77348402e0",
          "message": "Removed \"helpKeyword\" from the BuildCanceledEventArgs ctors",
          "committedDate": "2024-06-14T09:28:47Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d05e2449e1eee84bca611138346b62c32d46d8cd",
          "message": "Fixed typo",
          "committedDate": "2024-06-14T09:33:26Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f973e6edfd9706e78f9be61c1753f533866f6487",
          "message": "Removed whitespace",
          "committedDate": "2024-06-14T09:34:38Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e01f5329b457b3dbaff0b85dc14bac8524e2feff",
          "message": "Removed whitespace",
          "committedDate": "2024-06-14T09:36:37Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "78fcbe81fe13d45414d490f8c49a38b2f92b983f",
          "message": "Removed unnecessary header",
          "committedDate": "2024-06-14T09:44:17Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbe607f8615d7e70f0bab6900642548197db8934",
          "message": "Removed IEventSource5 and fixed some tests",
          "committedDate": "2024-06-17T12:05:09Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a8b7c1627c50c6a57b3a5f5dd552951560b13e2",
          "message": "Fixed comment and unwanted change",
          "committedDate": "2024-06-17T12:54:41Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ac936edb355e35a30615b0e1f8ce1dc5e9111bd",
          "message": "Fixed tests",
          "committedDate": "2024-06-17T14:18:36Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a98abc5b662671ff14fd9173eddda8212ac7ba7",
          "message": "Resolving comments",
          "committedDate": "2024-06-18T11:35:21Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "77a6f778e8725e385d63a945bbbe0473498f7c75",
          "message": "Removed unncessary WaitForLoggingToProcessEvents invocation.",
          "committedDate": "2024-06-18T11:49:50Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad41ea08472650b413507d0600d329abea5b651a",
          "message": "Fixing tests",
          "committedDate": "2024-06-18T13:08:17Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12f02b85681bc5afa55da145c3ffc6a6f29f22b0",
          "message": "Fixed test",
          "committedDate": "2024-06-20T07:04:31Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0979efb201d5fd67c053f9c5235e5c1f68e07f57",
          "message": "Removed \"cancellationMessageRendered\" field from loggers",
          "committedDate": "2024-06-24T12:57:55Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Follow-on question - it's always kind of bothered me that a cancelled build is considered `failed` for purposes of coloration/reporting. Do we know the reason why the build failed? Could we special-case the final build summary to say something like `Build [red]cancelled[/red] after {elapsed_time}` in that case to be more precise?",
        "createdAt": "2024-04-22T14:26:28Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I like having \"cancelled\" logging but it's \"failed\" because it didn't \"complete without errors\", which makes sense IMO.",
        "createdAt": "2024-04-22T14:53:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, you mentioned that you would like to have the \"build cancellation event\". Could you please elaborate? Would it be just a new event or it will be used also as an indication for loggers to stop (instead of cancellation token)? Token is still IMO expected way how to cancel :)",
        "createdAt": "2024-04-22T14:59:20Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I was thinking more or less of a new `BuildCancelledEventArgs` that the engine would raise to indicate to loggers to emit a message like this one. That could then be logged in with precise timing in the binlog too, which may be helpful for some analyses.",
        "createdAt": "2024-04-22T15:21:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It seems there is no infrastructure for emitting events where the context is overall build (or I didn't looked properly). If no one knows how/where to send the event without node/project/target/task context, then I propose to finish this issue with cancellation token and create new issue tracking the \"global events\" API.",
        "createdAt": "2024-04-24T11:39:18Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "^ @rainersigwald, @ladipro, @rokonec, do you agree?",
        "createdAt": "2024-04-25T07:38:52Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I would expect the new event to use something analogous to `BuildFinishedEventArgs`, which is also raised without project context. Hope I'm not misunderstanding or missing anything obvious.",
        "createdAt": "2024-04-25T09:53:26Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Good tip. It allowed me to discover `EngineLoggingServices`, which is not in placed in the same directory as the rest logging related types :)",
        "createdAt": "2024-04-25T18:16:33Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@rainersigwald, I believe it also fixes #9898. I'm not able to repro the busy indicator problem with these changes.",
        "createdAt": "2024-06-13T12:48:51Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we guaranteed to get here between the point the build is cancelled and the last time `DisplayNodes` is called?",
              "createdAt": "2024-04-22T15:03:11Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +949,17 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCancellationToken.IsCancellationRequested)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                Terminal.WriteLine(ResourceUtilities.GetResourceString(\"AbortingBuild\"));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Or rather: between build cancellation and logger shut down.",
              "createdAt": "2024-04-22T15:04:24Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +949,17 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCancellationToken.IsCancellationRequested)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                Terminal.WriteLine(ResourceUtilities.GetResourceString(\"AbortingBuild\"));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "There could be a small chance. I will walk the code once again, and I will probably add another check to `RenderBuildResult`.",
              "createdAt": "2024-04-22T15:15:48Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +949,17 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCancellationToken.IsCancellationRequested)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                Terminal.WriteLine(ResourceUtilities.GetResourceString(\"AbortingBuild\"));",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Resolving this comment as I switched to immediate message",
              "createdAt": "2024-06-18T12:18:28Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +949,17 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCancellationToken.IsCancellationRequested)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                Terminal.WriteLine(ResourceUtilities.GetResourceString(\"AbortingBuild\"));",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            /// Build Canceled Event\r\n```",
              "createdAt": "2024-06-13T21:56:34Z",
              "path": "src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs",
              "diffHunk": "@@ -715,6 +733,11 @@ internal sealed class RaiseEventHelper\n             /// </summary>\n             private static BuildFinishedEventArgs s_buildFinished = new BuildFinishedEventArgs(\"Message\", \"Keyword\", true);\n \n+            /// <summary>\n+            /// Build Finished Event",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this part true here? \"Canceled\" feels like a critical event to me. But maybe it doesn't get evented at all now in minimal verbosity?",
              "createdAt": "2024-06-13T21:58:27Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -420,6 +420,25 @@ public void LogBuildFinished(bool success)\n             WaitForLoggingToProcessEvents();\n         }\n \n+        /// <inheritdoc />\n+        public void LogBuildCanceled()\n+        {\n+            // If we're only logging critical events, don't risk causing all the resources to load by formatting\n+            // a string that won't get emitted anyway.\n+            string message = String.Empty;\n+            if (!OnlyLogCriticalEvents)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Specifically I'm concerned about losing the message in `-v:q` since before xmake.cs didn't care about verbosity. ",
              "createdAt": "2024-06-13T22:04:34Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -420,6 +420,25 @@ public void LogBuildFinished(bool success)\n             WaitForLoggingToProcessEvents();\n         }\n \n+        /// <inheritdoc />\n+        public void LogBuildCanceled()\n+        {\n+            // If we're only logging critical events, don't risk causing all the resources to load by formatting\n+            // a string that won't get emitted anyway.\n+            string message = String.Empty;\n+            if (!OnlyLogCriticalEvents)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The message was indeed lost in quiet mode. It's fixed now.",
              "createdAt": "2024-06-14T09:14:45Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -420,6 +420,25 @@ public void LogBuildFinished(bool success)\n             WaitForLoggingToProcessEvents();\n         }\n \n+        /// <inheritdoc />\n+        public void LogBuildCanceled()\n+        {\n+            // If we're only logging critical events, don't risk causing all the resources to load by formatting\n+            // a string that won't get emitted anyway.\n+            string message = String.Empty;\n+            if (!OnlyLogCriticalEvents)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need `helpKeyword` in these ctors?",
              "createdAt": "2024-06-13T21:59:29Z",
              "path": "src/Framework/BuildCanceledEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This class represents the event arguments for build canceled events.\n+    /// </summary>\n+    public sealed class BuildCanceledEventArgs : BuildStatusEventArgs\n+    {\n+        /// <summary>\n+        /// Constructor to initialize all parameters.\n+        /// Sender field cannot be set here and is assumed to be \"MSBuild\"\n+        /// </summary>\n+        /// <param name=\"message\">text message</param>\n+        /// <param name=\"helpKeyword\">help keyword </param>\n+        public BuildCanceledEventArgs(\n+            string? message,\n+            string? helpKeyword)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think we don't. I was trying to imitate `BuildFinishedEventArgs`, which also exposes `helpKeyword` in ctors and I doubt it's used. I will remove it from this event.",
              "createdAt": "2024-06-14T09:28:12Z",
              "path": "src/Framework/BuildCanceledEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This class represents the event arguments for build canceled events.\n+    /// </summary>\n+    public sealed class BuildCanceledEventArgs : BuildStatusEventArgs\n+    {\n+        /// <summary>\n+        /// Constructor to initialize all parameters.\n+        /// Sender field cannot be set here and is assumed to be \"MSBuild\"\n+        /// </summary>\n+        /// <param name=\"message\">text message</param>\n+        /// <param name=\"helpKeyword\">help keyword </param>\n+        public BuildCanceledEventArgs(\n+            string? message,\n+            string? helpKeyword)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For new code can we avoid this?",
              "createdAt": "2024-06-13T22:00:02Z",
              "path": "src/Framework/IEventSource5.cs",
              "diffHunk": "@@ -0,0 +1,20 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable disable",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    private BuildCanceledEventArgs? _buildCanceledEventArgs;\r\n```",
              "createdAt": "2024-06-13T22:06:37Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -207,6 +207,10 @@ public ProjectContext(BuildEventContext context)\n     /// </summary>\n     private bool _showCommandLine = false;\n \n+    private BuildCanceledEventArgs? _buildCanceledEvetnAgrs;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Fixed.",
              "createdAt": "2024-06-14T09:33:18Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -207,6 +207,10 @@ public ProjectContext(BuildEventContext context)\n     /// </summary>\n     private bool _showCommandLine = false;\n \n+    private BuildCanceledEventArgs? _buildCanceledEvetnAgrs;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why the early return? don't we want to watch the nodes cancel?",
              "createdAt": "2024-06-13T22:07:45Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +957,18 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCanceledEvetnAgrs != null)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                string message = _buildCanceledEvetnAgrs.Message ?? string.Empty;\n+                Terminal.WriteLine(message);\n+                _cancellationMessageRendered = true;\n+            }\n+\n+            return;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Offline sync: Use `RenderImmediateMessage`",
              "createdAt": "2024-06-14T14:44:05Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +957,18 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCanceledEvetnAgrs != null)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                string message = _buildCanceledEvetnAgrs.Message ?? string.Empty;\n+                Terminal.WriteLine(message);\n+                _cancellationMessageRendered = true;\n+            }\n+\n+            return;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Did you decide not to go to `RenderImmediateMessage`?",
              "createdAt": "2024-06-17T13:47:14Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +957,18 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCanceledEvetnAgrs != null)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                string message = _buildCanceledEvetnAgrs.Message ?? string.Empty;\n+                Terminal.WriteLine(message);\n+                _cancellationMessageRendered = true;\n+            }\n+\n+            return;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "No, I used `RenderImmediateMessage`",
              "createdAt": "2024-06-18T11:41:50Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -944,6 +957,18 @@ private void ThreadProc()\n     /// </summary>\n     internal void DisplayNodes()\n     {\n+        if (_buildCanceledEvetnAgrs != null)\n+        {\n+            if (!_cancellationMessageRendered)\n+            {\n+                string message = _buildCanceledEvetnAgrs.Message ?? string.Empty;\n+                Terminal.WriteLine(message);\n+                _cancellationMessageRendered = true;\n+            }\n+\n+            return;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: don't add this whitespace",
              "createdAt": "2024-06-13T22:08:50Z",
              "path": "src/Deprecated/Engine/Engine/EngineLoggingServices.cs",
              "diffHunk": "@@ -21,12 +21,12 @@ namespace Microsoft.Build.BuildEngine\n     /// services for tasks. This class allows for better encapsulation by making it clear when only\n     /// logging services are needed and not the rest of the engine data and methods. This class allows\n     /// us to provide different implementations of logging services for engine components that are\n-    /// either in-proc (engine process) or out-of-proc (node process).\n+    /// either in-proc (engine process) or out-of-proc (node process). ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Not sure how this happened. This is deprecated type :D Fixed.",
              "createdAt": "2024-06-14T09:41:14Z",
              "path": "src/Deprecated/Engine/Engine/EngineLoggingServices.cs",
              "diffHunk": "@@ -21,12 +21,12 @@ namespace Microsoft.Build.BuildEngine\n     /// services for tasks. This class allows for better encapsulation by making it clear when only\n     /// logging services are needed and not the rest of the engine data and methods. This class allows\n     /// us to provide different implementations of logging services for engine components that are\n-    /// either in-proc (engine process) or out-of-proc (node process).\n+    /// either in-proc (engine process) or out-of-proc (node process). ",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How does this get serialized into the binlog?",
              "createdAt": "2024-06-13T22:09:39Z",
              "path": "src/Framework/BuildCanceledEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This class represents the event arguments for build canceled events.\n+    /// </summary>\n+    public sealed class BuildCanceledEventArgs : BuildStatusEventArgs",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Offline sync: New issue was created - #10244",
              "createdAt": "2024-06-14T14:44:31Z",
              "path": "src/Framework/BuildCanceledEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This class represents the event arguments for build canceled events.\n+    /// </summary>\n+    public sealed class BuildCanceledEventArgs : BuildStatusEventArgs",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So this is undoubtedly the _right_ thing to do for this. However there is an easier way that has less downstream impact: a new BuildMessageEventArgs subclass that we just log and treat specially in the TerminalLogger. Did you consider that?",
              "createdAt": "2024-06-13T22:11:33Z",
              "path": "src/Framework/IEventSource5.cs",
              "diffHunk": "@@ -0,0 +1,20 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface defines the events raised by the build engine.\n+    /// Loggers use this interface to subscribe to the events they\n+    /// are interested in receiving.\n+    /// </summary>\n+    public interface IEventSource5 : IEventSource4",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I removed the v5.",
              "createdAt": "2024-06-18T11:42:26Z",
              "path": "src/Framework/IEventSource5.cs",
              "diffHunk": "@@ -0,0 +1,20 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface defines the events raised by the build engine.\n+    /// Loggers use this interface to subscribe to the events they\n+    /// are interested in receiving.\n+    /// </summary>\n+    public interface IEventSource5 : IEventSource4",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Oh - this code repetition is unfortunate. Not a problem of this PR - but we should remove it eventualy.",
              "createdAt": "2024-06-14T20:00:16Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -527,6 +544,48 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build\n             RaiseStatusEvent(sender, buildEvent);\n         }\n \n+        /// <summary>\n+        /// Raises a \"build canceled\" event to all registered loggers.\n+        /// </summary>\n+        /// <param name=\"sender\">sender of the event</param>\n+        /// <param name=\"buildEvent\">BuildCanceledEventArgs</param>\n+        /// <exception cref=\"LoggerException\">When EventHandler raises an logger exception the LoggerException is rethrown</exception>\n+        /// <exception cref=\"InternalLoggerException\">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>\n+        /// <exception cref=\"Exception\">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>\n+        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)\n+        {\n+            if (BuildCanceled != null)\n+            {\n+                try\n+                {\n+                    BuildCanceled(sender, buildEvent);\n+                }\n+                catch (LoggerException)\n+                {\n+                    // if a logger has failed politely, abort immediately\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+                    throw;\n+                }\n+                catch (Exception exception)\n+                {\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+\n+                    if (ExceptionHandling.IsCriticalException(exception))\n+                    {\n+                        throw;\n+                    }\n+\n+                    InternalLoggerException.Throw(exception, buildEvent, \"FatalErrorWhileLogging\", false);\n+                }\n+            }\n+\n+            RaiseStatusEvent(sender, buildEvent);\n+        }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Not only this part, but I wanted this PR to be focused on fixing the issue.",
              "createdAt": "2024-06-17T12:09:08Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -527,6 +544,48 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build\n             RaiseStatusEvent(sender, buildEvent);\n         }\n \n+        /// <summary>\n+        /// Raises a \"build canceled\" event to all registered loggers.\n+        /// </summary>\n+        /// <param name=\"sender\">sender of the event</param>\n+        /// <param name=\"buildEvent\">BuildCanceledEventArgs</param>\n+        /// <exception cref=\"LoggerException\">When EventHandler raises an logger exception the LoggerException is rethrown</exception>\n+        /// <exception cref=\"InternalLoggerException\">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>\n+        /// <exception cref=\"Exception\">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>\n+        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)\n+        {\n+            if (BuildCanceled != null)\n+            {\n+                try\n+                {\n+                    BuildCanceled(sender, buildEvent);\n+                }\n+                catch (LoggerException)\n+                {\n+                    // if a logger has failed politely, abort immediately\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+                    throw;\n+                }\n+                catch (Exception exception)\n+                {\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+\n+                    if (ExceptionHandling.IsCriticalException(exception))\n+                    {\n+                        throw;\n+                    }\n+\n+                    InternalLoggerException.Throw(exception, buildEvent, \"FatalErrorWhileLogging\", false);\n+                }\n+            }\n+\n+            RaiseStatusEvent(sender, buildEvent);\n+        }",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "For the Canceled event, what is the benefit of this special-case handling over letting it fall through to `RaiseBuildStatusEvent`?",
              "createdAt": "2024-06-17T13:44:40Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -527,6 +544,48 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build\n             RaiseStatusEvent(sender, buildEvent);\n         }\n \n+        /// <summary>\n+        /// Raises a \"build canceled\" event to all registered loggers.\n+        /// </summary>\n+        /// <param name=\"sender\">sender of the event</param>\n+        /// <param name=\"buildEvent\">BuildCanceledEventArgs</param>\n+        /// <exception cref=\"LoggerException\">When EventHandler raises an logger exception the LoggerException is rethrown</exception>\n+        /// <exception cref=\"InternalLoggerException\">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>\n+        /// <exception cref=\"Exception\">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>\n+        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)\n+        {\n+            if (BuildCanceled != null)\n+            {\n+                try\n+                {\n+                    BuildCanceled(sender, buildEvent);\n+                }\n+                catch (LoggerException)\n+                {\n+                    // if a logger has failed politely, abort immediately\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+                    throw;\n+                }\n+                catch (Exception exception)\n+                {\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+\n+                    if (ExceptionHandling.IsCriticalException(exception))\n+                    {\n+                        throw;\n+                    }\n+\n+                    InternalLoggerException.Throw(exception, buildEvent, \"FatalErrorWhileLogging\", false);\n+                }\n+            }\n+\n+            RaiseStatusEvent(sender, buildEvent);\n+        }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I modified the PR to use the simpler path and treat this event as a general status event.",
              "createdAt": "2024-06-18T11:38:29Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -527,6 +544,48 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build\n             RaiseStatusEvent(sender, buildEvent);\n         }\n \n+        /// <summary>\n+        /// Raises a \"build canceled\" event to all registered loggers.\n+        /// </summary>\n+        /// <param name=\"sender\">sender of the event</param>\n+        /// <param name=\"buildEvent\">BuildCanceledEventArgs</param>\n+        /// <exception cref=\"LoggerException\">When EventHandler raises an logger exception the LoggerException is rethrown</exception>\n+        /// <exception cref=\"InternalLoggerException\">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>\n+        /// <exception cref=\"Exception\">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>\n+        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)\n+        {\n+            if (BuildCanceled != null)\n+            {\n+                try\n+                {\n+                    BuildCanceled(sender, buildEvent);\n+                }\n+                catch (LoggerException)\n+                {\n+                    // if a logger has failed politely, abort immediately\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+                    throw;\n+                }\n+                catch (Exception exception)\n+                {\n+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n+                    // if a fellow logger is throwing in an event handler.\n+                    this.UnregisterAllEventHandlers();\n+\n+                    if (ExceptionHandling.IsCriticalException(exception))\n+                    {\n+                        throw;\n+                    }\n+\n+                    InternalLoggerException.Throw(exception, buildEvent, \"FatalErrorWhileLogging\", false);\n+                }\n+            }\n+\n+            RaiseStatusEvent(sender, buildEvent);\n+        }",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: The naming of the new event - it feels more as `CancelRequested` rather then `Canceled` based on usage here",
              "createdAt": "2024-06-14T20:11:16Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -781,6 +781,9 @@ public void CancelAllSubmissions()\n \n         private void CancelAllSubmissions(bool async)\n         {\n+            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;\n+            loggingService.LogBuildCanceled();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I'm following the existing pattern - Started, Finished, ... I would keep it that way for clarity.",
              "createdAt": "2024-06-17T12:11:17Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -781,6 +781,9 @@ public void CancelAllSubmissions()\n \n         private void CancelAllSubmissions(bool async)\n         {\n+            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;\n+            loggingService.LogBuildCanceled();",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this state realy needed in the logging infra (LoggingService and EventSourceSink)?\r\nIt feels that the logging infra responsibility should be to only transfer the events that have been logged. If there needs to be any resilience against multiple occurence of events - than it's likely a responsibility of a concrete logger.\r\n\r\nLet's imagine we have a bug occuring when cancel request is issued multiple times - it'd be good to see in the binlog what exactly happened - that there were multiple cancel requests.\r\n\r\nAppart from that - it would prevent bloating responsibilities of already bloated LoggingService (I know this wouldn't be a first state that's special case held in LoggingService - but let's not stick to that)",
              "createdAt": "2024-06-14T20:33:08Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -650,6 +655,16 @@ bool HaveLoggedBuildFinishedEvent\n             get;\n             set;\n         }\n+\n+        /// <summary>\n+        /// Has the sink logged the BuildCanceledEvent. This is important to know because we only want to log the build canceled event once\n+        /// </summary>\n+        bool HaveLoggedBuildCanceledEvent\n+        {\n+            get;\n+            set;\n+        }\n+",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I don't have strong opinion here. I would be more in favor of centralized implementation than copy similar code across multiple loggers, but it could be in form of some filter. Not familiar with the logging infra end-to-end, so I think we should discuss and cover this in different issue.\r\nI would like to (for example) see use of observer pattern instead of C# events (which would handle event duplicates easily), but the goal of this PR is to fix cancellation UX. Don't get me wrong, there are places that would deserve some refactoring and simplification, but I would really cover it separately.\r\n\r\ncc: @rainersigwald ",
              "createdAt": "2024-06-17T12:26:23Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -650,6 +655,16 @@ bool HaveLoggedBuildFinishedEvent\n             get;\n             set;\n         }\n+\n+        /// <summary>\n+        /// Has the sink logged the BuildCanceledEvent. This is important to know because we only want to log the build canceled event once\n+        /// </summary>\n+        bool HaveLoggedBuildCanceledEvent\n+        {\n+            get;\n+            set;\n+        }\n+",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "We decided that cancellation event doesn't need special treatment.",
              "createdAt": "2024-06-18T11:39:41Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -650,6 +655,16 @@ bool HaveLoggedBuildFinishedEvent\n             get;\n             set;\n         }\n+\n+        /// <summary>\n+        /// Has the sink logged the BuildCanceledEvent. This is important to know because we only want to log the build canceled event once\n+        /// </summary>\n+        bool HaveLoggedBuildCanceledEvent\n+        {\n+            get;\n+            set;\n+        }\n+",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is `string.Empty` the right default, or should we ensure that `BuildCanceledEventArgs.Message` is never empty?",
              "createdAt": "2024-06-17T13:39:51Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -1212,6 +1212,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)\n                     propertyOutputMap[evaluationKey] = value;\n                 }\n             }\n+            else if (e is BuildCanceledEventArgs buildCanceled)\n+            {\n+                Console.WriteLine(e.Message ?? string.Empty);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This was more for making nullability check happy. Now I ensure there will be a message in event ctor.",
              "createdAt": "2024-06-18T11:36:36Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -1212,6 +1212,10 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)\n                     propertyOutputMap[evaluationKey] = value;\n                 }\n             }\n+            else if (e is BuildCanceledEventArgs buildCanceled)\n+            {\n+                Console.WriteLine(e.Message ?? string.Empty);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                HaveLoggedBuildCanceledEvent = true;\r\n```\r\n\r\n. . . but I think the strictness around Started/Finished are special and don't apply here; there are some deeply unfortunate parts of the engine that care about logging events (instead of signaling stuff a more appropriate way), but nothing should care about cancelation that way.",
              "createdAt": "2024-06-17T13:43:20Z",
              "path": "src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs",
              "diffHunk": "@@ -145,6 +153,11 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)\n                 HaveLoggedBuildFinishedEvent = true;\n                 return;\n             }\n+            else if (buildEvent is BuildCanceledEventArgs)\n+            {\n+                HaveLoggedBuildFinishedEvent = true;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I removed this logic from all types.",
              "createdAt": "2024-06-18T11:37:00Z",
              "path": "src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs",
              "diffHunk": "@@ -145,6 +153,11 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)\n                 HaveLoggedBuildFinishedEvent = true;\n                 return;\n             }\n+            else if (buildEvent is BuildCanceledEventArgs)\n+            {\n+                HaveLoggedBuildFinishedEvent = true;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this required for cancellation? Does it provide meaningful guarantees across processes? If not I might expect the exact timing of the cancellation to be advisory, and maybe we don't need to block here?",
              "createdAt": "2024-06-17T13:46:20Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -420,6 +420,18 @@ public void LogBuildFinished(bool success)\n             WaitForLoggingToProcessEvents();\n         }\n \n+        /// <inheritdoc />\n+        public void LogBuildCanceled()\n+        {\n+            string message = ResourceUtilities.GetResourceString(\"AbortingBuild\"); \n+            BuildCanceledEventArgs buildEvent = new BuildCanceledEventArgs(message);\n+\n+            ProcessLoggingEvent(buildEvent);\n+\n+            // Make sure we process this event before going any further\n+            WaitForLoggingToProcessEvents();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think you are right. We don't need this for cancellation.",
              "createdAt": "2024-06-18T11:43:12Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -420,6 +420,18 @@ public void LogBuildFinished(bool success)\n             WaitForLoggingToProcessEvents();\n         }\n \n+        /// <inheritdoc />\n+        public void LogBuildCanceled()\n+        {\n+            string message = ResourceUtilities.GetResourceString(\"AbortingBuild\"); \n+            BuildCanceledEventArgs buildEvent = new BuildCanceledEventArgs(message);\n+\n+            ProcessLoggingEvent(buildEvent);\n+\n+            // Make sure we process this event before going any further\n+            WaitForLoggingToProcessEvents();",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the downside of rendering this multiple times? I am not sure whether it's worth keeping the bool around.",
              "createdAt": "2024-06-21T21:25:24Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -24,6 +24,8 @@ namespace Microsoft.Build.BackEnd.Logging\n     /// <remarks>This class is not thread safe.</remarks>\n     internal class ParallelConsoleLogger : BaseConsoleLogger\n     {\n+        private bool _cancellationMessageRendered;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I saw the message written twice when I pressed Ctrl+C. I don't remember details and I'm not able to repro it now, so it was probably fixed by different change. I will remove it from all loggers.",
              "createdAt": "2024-06-24T12:50:12Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -24,6 +24,8 @@ namespace Microsoft.Build.BackEnd.Logging\n     /// <remarks>This class is not thread safe.</remarks>\n     internal class ParallelConsoleLogger : BaseConsoleLogger\n     {\n+        private bool _cancellationMessageRendered;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks exactly the same as it did before, right? Just with a potential slight delay?",
              "createdAt": "2024-06-21T21:27:50Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -1212,6 +1214,11 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)\n                     propertyOutputMap[evaluationKey] = value;\n                 }\n             }\n+            else if (e is BuildCanceledEventArgs buildCanceled && !_cancellationMessageRendered)\n+            {\n+                _cancellationMessageRendered = true;\n+                Console.WriteLine(e.Message);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, it looks like before but there could be a slight delay.",
              "createdAt": "2024-06-24T13:31:27Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -1212,6 +1214,11 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)\n                     propertyOutputMap[evaluationKey] = value;\n                 }\n             }\n+            else if (e is BuildCanceledEventArgs buildCanceled && !_cancellationMessageRendered)\n+            {\n+                _cancellationMessageRendered = true;\n+                Console.WriteLine(e.Message);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}