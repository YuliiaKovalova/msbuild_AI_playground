{
  "number": 9997,
  "title": "Fix indentation of multiline messages in Terminal Logger.",
  "body": "Fixes #9996\r\n\r\n### Context\r\nThe multiline messages indentation processing implies that the message will appear in the structured view under the related project. That is not correct for the Quiet verbosity and for couple of other places, such as rendering the immediate message and cases when the project is not determined.\r\n\r\n### Changes Made\r\nMake the indentation dependent on where the message would be shown.\r\n\r\n### Testing\r\nUnit tests\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-11T12:11:47Z",
  "updatedAt": "2024-04-18T15:26:42Z",
  "closedAt": "2024-04-18T12:58:31Z",
  "mergedAt": "2024-04-18T12:58:31Z",
  "additions": 166,
  "deletions": 60,
  "changedFiles": 20,
  "headRefName": "fix-multy-line-msg-quiet-verbosity",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6cdc1601b64528f194bce6f9ed4ba0f0f1376148",
          "message": "Fix indentation",
          "committedDate": "2024-04-11T12:12:41Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "35ecbb087df665dc28773c80641970198b9e3aa9",
          "message": "Fix tests and address PR comments.",
          "committedDate": "2024-04-16T14:31:06Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This indentation could be declared as constant.",
              "createdAt": "2024-04-11T12:22:27Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -906,27 +896,17 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n     private void ErrorRaised(object sender, BuildErrorEventArgs e)\n     {\n         BuildEventContext? buildEventContext = e.BuildEventContext;\n-        string message = FormatEventMessage(\n-                category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n-                subcategory: e.Subcategory,\n-                message: e.Message,\n-                code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n-                file: HighlightFileName(e.File),\n-                lineNumber: e.LineNumber,\n-                endLineNumber: e.EndLineNumber,\n-                columnNumber: e.ColumnNumber,\n-                endColumnNumber: e.EndColumnNumber);\n-\n+        \n         if (buildEventContext is not null\n             && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)\n             && Verbosity > LoggerVerbosity.Quiet)\n         {\n-            project.AddBuildMessage(MessageSeverity.Error, message);\n+            project.AddBuildMessage(MessageSeverity.Error, FormatErrorMessage(e, $\"{Indentation}{Indentation}{Indentation}\"));",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This indentation could be declared as constant",
              "createdAt": "2024-04-11T12:23:13Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -858,32 +858,22 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n     private void WarningRaised(object sender, BuildWarningEventArgs e)\n     {\n         BuildEventContext? buildEventContext = e.BuildEventContext;\n-        string message = FormatEventMessage(\n-                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n-                subcategory: e.Subcategory,\n-                message: e.Message,\n-                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n-                file: HighlightFileName(e.File),\n-                lineNumber: e.LineNumber,\n-                endLineNumber: e.EndLineNumber,\n-                columnNumber: e.ColumnNumber,\n-                endColumnNumber: e.EndColumnNumber);\n \n         if (buildEventContext is not null\n             && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)\n             && Verbosity > LoggerVerbosity.Quiet)\n         {\n-            if (IsImmediateMessage(message))\n+            if (!String.IsNullOrEmpty(e.Message) && IsImmediateMessage(e.Message))\n             {\n-                RenderImmediateMessage(message);\n+                RenderImmediateMessage(FormatWarningMessage(e, Indentation));\n             }\n \n-            project.AddBuildMessage(MessageSeverity.Warning, message);\n+            project.AddBuildMessage(MessageSeverity.Warning, FormatWarningMessage(e, $\"{Indentation}{Indentation}{Indentation}\"));",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should those be colored as warning? Even if verbosity is set to e.g. diag?",
              "createdAt": "2024-04-13T06:34:53Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -858,32 +858,22 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n     private void WarningRaised(object sender, BuildWarningEventArgs e)\n     {\n         BuildEventContext? buildEventContext = e.BuildEventContext;\n-        string message = FormatEventMessage(\n-                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n-                subcategory: e.Subcategory,\n-                message: e.Message,\n-                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n-                file: HighlightFileName(e.File),\n-                lineNumber: e.LineNumber,\n-                endLineNumber: e.EndLineNumber,\n-                columnNumber: e.ColumnNumber,\n-                endColumnNumber: e.EndColumnNumber);\n \n         if (buildEventContext is not null\n             && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)\n             && Verbosity > LoggerVerbosity.Quiet)\n         {\n-            if (IsImmediateMessage(message))\n+            if (!String.IsNullOrEmpty(e.Message) && IsImmediateMessage(e.Message))\n             {\n-                RenderImmediateMessage(message);\n+                RenderImmediateMessage(FormatWarningMessage(e, Indentation));\n             }\n \n-            project.AddBuildMessage(MessageSeverity.Warning, message);\n+            project.AddBuildMessage(MessageSeverity.Warning, FormatWarningMessage(e, $\"{Indentation}{Indentation}{Indentation}\"));\n         }\n         else\n         {\n             // It is necessary to display warning messages reported by MSBuild, even if it's not tracked in _projects collection or the verbosity is Quiet.\n-            RenderImmediateMessage(message);\n+            RenderImmediateMessage(FormatWarningMessage(e, Indentation));",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Why wouldn't we want warning not to be formatted (including the coloring) as a warning in any verbosity?\r\n\r\nTo clarify, just in case, I did not change any behavior besides the indentation in this PR. this `message` was formatted as warning above as well.",
              "createdAt": "2024-04-16T13:11:04Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -858,32 +858,22 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n     private void WarningRaised(object sender, BuildWarningEventArgs e)\n     {\n         BuildEventContext? buildEventContext = e.BuildEventContext;\n-        string message = FormatEventMessage(\n-                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n-                subcategory: e.Subcategory,\n-                message: e.Message,\n-                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n-                file: HighlightFileName(e.File),\n-                lineNumber: e.LineNumber,\n-                endLineNumber: e.EndLineNumber,\n-                columnNumber: e.ColumnNumber,\n-                endColumnNumber: e.EndColumnNumber);\n \n         if (buildEventContext is not null\n             && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)\n             && Verbosity > LoggerVerbosity.Quiet)\n         {\n-            if (IsImmediateMessage(message))\n+            if (!String.IsNullOrEmpty(e.Message) && IsImmediateMessage(e.Message))\n             {\n-                RenderImmediateMessage(message);\n+                RenderImmediateMessage(FormatWarningMessage(e, Indentation));\n             }\n \n-            project.AddBuildMessage(MessageSeverity.Warning, message);\n+            project.AddBuildMessage(MessageSeverity.Warning, FormatWarningMessage(e, $\"{Indentation}{Indentation}{Indentation}\"));\n         }\n         else\n         {\n             // It is necessary to display warning messages reported by MSBuild, even if it's not tracked in _projects collection or the verbosity is Quiet.\n-            RenderImmediateMessage(message);\n+            RenderImmediateMessage(FormatWarningMessage(e, Indentation));",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Sorry - I mixed verbosity and severity here \ud83e\udd26 \r\nAll is good!",
              "createdAt": "2024-04-17T10:29:08Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -858,32 +858,22 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n     private void WarningRaised(object sender, BuildWarningEventArgs e)\n     {\n         BuildEventContext? buildEventContext = e.BuildEventContext;\n-        string message = FormatEventMessage(\n-                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n-                subcategory: e.Subcategory,\n-                message: e.Message,\n-                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n-                file: HighlightFileName(e.File),\n-                lineNumber: e.LineNumber,\n-                endLineNumber: e.EndLineNumber,\n-                columnNumber: e.ColumnNumber,\n-                endColumnNumber: e.EndColumnNumber);\n \n         if (buildEventContext is not null\n             && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)\n             && Verbosity > LoggerVerbosity.Quiet)\n         {\n-            if (IsImmediateMessage(message))\n+            if (!String.IsNullOrEmpty(e.Message) && IsImmediateMessage(e.Message))\n             {\n-                RenderImmediateMessage(message);\n+                RenderImmediateMessage(FormatWarningMessage(e, Indentation));\n             }\n \n-            project.AddBuildMessage(MessageSeverity.Warning, message);\n+            project.AddBuildMessage(MessageSeverity.Warning, FormatWarningMessage(e, $\"{Indentation}{Indentation}{Indentation}\"));\n         }\n         else\n         {\n             // It is necessary to display warning messages reported by MSBuild, even if it's not tracked in _projects collection or the verbosity is Quiet.\n-            RenderImmediateMessage(message);\n+            RenderImmediateMessage(FormatWarningMessage(e, Indentation));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can the common code be extracted here (as they differ only by category)?",
              "createdAt": "2024-04-13T06:37:22Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1070,6 +1050,36 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    private string FormatWarningMessage(BuildWarningEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }\n+\n+    private string FormatErrorMessage(BuildErrorEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "They differ by category, by color, but that we can also pass as a parameter to a single function, together with the category. And they also differ by the type - one is `BuildWarningEventArgs` and another is `BuildErrorEventArgs`. You would think that they have a common parent class with Subcategory and other properties for me to use in a common code, but no... So, I guess there is no simplification for that code.",
              "createdAt": "2024-04-16T12:56:25Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1070,6 +1050,36 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    private string FormatWarningMessage(BuildWarningEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }\n+\n+    private string FormatErrorMessage(BuildErrorEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Makes sense then",
              "createdAt": "2024-04-17T10:27:40Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1070,6 +1050,36 @@ private int NodeIndexForContext(BuildEventContext context)\n             : path;\n     }\n \n+    private string FormatWarningMessage(BuildWarningEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"warning\", TerminalColor.Yellow),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Yellow),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }\n+\n+    private string FormatErrorMessage(BuildErrorEventArgs e, string indent)\n+    {\n+        return FormatEventMessage(\n+                category: AnsiCodes.Colorize(\"error\", TerminalColor.Red),\n+                subcategory: e.Subcategory,\n+                message: e.Message,\n+                code: AnsiCodes.Colorize(e.Code, TerminalColor.Red),\n+                file: HighlightFileName(e.File),\n+                lineNumber: e.LineNumber,\n+                endLineNumber: e.EndLineNumber,\n+                columnNumber: e.ColumnNumber,\n+                endColumnNumber: e.EndColumnNumber,\n+                indent);\n+    }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}