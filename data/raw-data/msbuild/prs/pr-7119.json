{
  "number": 7119,
  "title": "Parse SolutionItems from the Solution File",
  "body": "Fixes #1708\r\n\r\n### Context\r\n\r\nThe solution file can contain a list of loose folders and files in a dedicated project section that are encoded as key/value lines, where the key and value are both the relative path from the solution file to the item.  This change adds a simple parser for these lines to the existing SolutionFile parser, following the established conventions of the surrounding code.\r\n\r\n### Changes Made\r\n\r\nA new section-parser was added to the ParseProject method in SolutionFile.\r\nA new backing List and public ReadOnlyList was added to the ProjectInSolution type, with an associated internal helper method to be used by the parser.\r\n\r\n### Testing\r\n\r\nThis logic has been in active use in the ionide/proj-info project for solution file parsing for several years now, and powers our solution explorer view:\r\n\r\n![image](https://user-images.githubusercontent.com/573979/144634976-f0c3b98c-f49b-44f3-a7f0-02ccc606fd81.png)\r\n\r\nIn the above image, you can see the `SolutionItems` virtual folder at the top of the solution tree, and it contains the two items from the MSBuild.sln's Project Section.  This is all extracted using this logic.\r\n\r\nThis is a very simple example, but it's been bulletproof for years now.  I couldn't find any existing testing for the solution file parser in this repo, but I'd be glad to add it if desired.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-12-03T16:13:23Z",
  "updatedAt": "2022-10-07T15:28:43Z",
  "closedAt": "2022-10-07T15:28:43Z",
  "mergedAt": null,
  "additions": 55,
  "deletions": 1,
  "changedFiles": 4,
  "headRefName": "solution-folder-files",
  "isDraft": true,
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9747ae74700bf9cfa29fa13a3d6bf2359012e34e",
          "message": "parse solution items from the solution file",
          "committedDate": "2021-12-03T17:09:42Z",
          "author": {
            "name": "Chet Husk",
            "email": "chusk3@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This looks great! Can you please cover the new public API with a test?",
        "createdAt": "2021-12-06T15:53:32Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Wait, before doing more work on this: Is this something we want to provide? What build impact does it have?",
        "createdAt": "2021-12-06T16:02:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald excellent questions - selfishly I want this functionality because there's not another semi-standardized parser of the solution file format that I'm aware of, and having this in a supported form a) codifies part of the solution file spec, and b) provides a model that third parties can use rather than re-invent the wheel. I suppose there's a risk to adding code to this parser, but we could mitigate that by adding testing of various real-world solution files as @ladipro requested?\r\n\r\n",
        "createdAt": "2021-12-06T16:09:25Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@Forgind, @rokonec, @ladipro and I talked this over in PR triage today and are still kinda torn. It makes sense to add functionality to \"the main public solution parser type that Microsoft has\", but it has some maintenance cost and doesn't directly help generate the metaproj, which is all MSBuild itself needs from the solution parser.\r\n\r\nI also talked to @KirillOsenkov about it briefly and he pointed out some things that our solution parser doesn't do that are important for some uses, like \"minimal change edits\" and \"roundtripping the file\". Not sure that's a _convincing_ reason to not do this, but if it means IDE-like things can't use our class anyway it may be a point in favor of \"leave it alone\".",
        "createdAt": "2021-12-06T23:34:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@baronfel, do you see a path for this to merge? Should we just close it?",
        "createdAt": "2022-10-06T21:29:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We can close it. Ionide's perfectly happy to keep using it's own derived parser and there's no one else clamoring for improvements to this area.",
        "createdAt": "2022-10-06T21:36:35Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe I'm misunderstanding this, but isn't there a \"RELATIVEPATH\" group?",
              "createdAt": "2021-12-06T04:41:23Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -845,6 +845,33 @@ private void ParseProject(string firstLine)\n                         line = ReadLine();\n                     }\n                 }\n+                else if (line.StartsWith(\"ProjectSection(SolutionItems)\", StringComparison.Ordinal))\n+                {\n+                    // Example section:\n+                    // ProjectSection(SolutionItems) = preProject\n+                    //   docs\\README.md = docs\\README.md\n+                    // EndProjectSection\n+\n+                    // We have a SolutionItems section.  Each subsequent line should identify\n+                    // a solution item.\n+                    line = ReadLine();\n+                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    {\n+                        proj.ProjectType = SolutionProjectType.SolutionFolder;\n+\n+                        // This should be a solution item, aka a file. The key and value should\n+                        // be the same, both are the relative path from the solution file to the\n+                        // solution item.\n+                        Match match = s_crackPropertyLine.Value.Match(line);\n+                        if (match.Success)\n+                        {\n+                            string relativeFilePath = match.Groups[\"PROPERTYNAME\"].Value.Trim();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, this is being matched against the same 'property line' regex that's used for all the other key/value lines, and so the group names remain consistent here.",
              "createdAt": "2021-12-06T04:55:48Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -845,6 +845,33 @@ private void ParseProject(string firstLine)\n                         line = ReadLine();\n                     }\n                 }\n+                else if (line.StartsWith(\"ProjectSection(SolutionItems)\", StringComparison.Ordinal))\n+                {\n+                    // Example section:\n+                    // ProjectSection(SolutionItems) = preProject\n+                    //   docs\\README.md = docs\\README.md\n+                    // EndProjectSection\n+\n+                    // We have a SolutionItems section.  Each subsequent line should identify\n+                    // a solution item.\n+                    line = ReadLine();\n+                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    {\n+                        proj.ProjectType = SolutionProjectType.SolutionFolder;\n+\n+                        // This should be a solution item, aka a file. The key and value should\n+                        // be the same, both are the relative path from the solution file to the\n+                        // solution item.\n+                        Match match = s_crackPropertyLine.Value.Match(line);\n+                        if (match.Success)\n+                        {\n+                            string relativeFilePath = match.Groups[\"PROPERTYNAME\"].Value.Trim();",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do we need an AsReadOnly version? Seems like _solutionItems is the source of truth, and I don't think this is expected to need to be thread-safe or anything.",
              "createdAt": "2021-12-06T04:42:12Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -110,6 +110,12 @@ public sealed class ProjectInSolution\n         private readonly Dictionary<string, ProjectConfigurationInSolution> _projectConfigurations;\n         private IReadOnlyDictionary<string, ProjectConfigurationInSolution> _projectConfigurationsReadOnly;\n \n+        /// <summary>\n+        /// A list of strings representing relative paths from the solution file to loose items.\n+        /// </summary>\n+        private readonly List<string> _solutionItems;\n+        private IReadOnlyList<string> _solutionItemsAsReadOnly;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I was mostly copying the existing Dependency list's implementation to prevent stylistic differences, since every codebase has different rules, etc.",
              "createdAt": "2021-12-06T04:56:36Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -110,6 +110,12 @@ public sealed class ProjectInSolution\n         private readonly Dictionary<string, ProjectConfigurationInSolution> _projectConfigurations;\n         private IReadOnlyDictionary<string, ProjectConfigurationInSolution> _projectConfigurationsReadOnly;\n \n+        /// <summary>\n+        /// A list of strings representing relative paths from the solution file to loose items.\n+        /// </summary>\n+        private readonly List<string> _solutionItems;\n+        private IReadOnlyList<string> _solutionItemsAsReadOnly;",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                    while (((line = ReadLine()) != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\r\n```\r\n\r\nSmall personal preference, but some others do it differently, so you should probably reject this.",
              "createdAt": "2021-12-06T04:43:12Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -845,6 +845,33 @@ private void ParseProject(string firstLine)\n                         line = ReadLine();\n                     }\n                 }\n+                else if (line.StartsWith(\"ProjectSection(SolutionItems)\", StringComparison.Ordinal))\n+                {\n+                    // Example section:\n+                    // ProjectSection(SolutionItems) = preProject\n+                    //   docs\\README.md = docs\\README.md\n+                    // EndProjectSection\n+\n+                    // We have a SolutionItems section.  Each subsequent line should identify\n+                    // a solution item.\n+                    line = ReadLine();\n+                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I see the logic in this line, and I agree with it as a refactor. This is another case of copying the existing patterns to lower reviewer overhead, etc, that's all.",
              "createdAt": "2021-12-06T15:34:42Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -845,6 +845,33 @@ private void ParseProject(string firstLine)\n                         line = ReadLine();\n                     }\n                 }\n+                else if (line.StartsWith(\"ProjectSection(SolutionItems)\", StringComparison.Ordinal))\n+                {\n+                    // Example section:\n+                    // ProjectSection(SolutionItems) = preProject\n+                    //   docs\\README.md = docs\\README.md\n+                    // EndProjectSection\n+\n+                    // We have a SolutionItems section.  Each subsequent line should identify\n+                    // a solution item.\n+                    line = ReadLine();\n+                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}