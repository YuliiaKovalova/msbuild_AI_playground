{
  "number": 10122,
  "title": "Allow extending common DependsOn properties",
  "body": "Fixes #9755\r\n\r\n### Context\r\nAllow extending common targets *DependsOn properties\r\nIt's a continuation of https://github.com/dotnet/msbuild/pull/4922 and https://github.com/dotnet/msbuild/issues/9703 - handling rest of the properties\r\n\r\n### Changes Made\r\nAll `*DependsOn` properties are defined in nondestructive way\r\n\r\n\r\n### Testing\r\nExisting test\r\n\r\n\r\n### Notes\r\n@ghogen - Once/If this is merged, I'd suggest the DependsOn properties to be prefered extension way over redefining targets from common target files (for https://github.com/MicrosoftDocs/visualstudio-docs-pr/pull/12564)\r\n\r\nDependencies that might possibly be usefull for powerusers to extend include:\r\n\r\n| `Property` | Added target will run before \u2026 |\r\n| ------- | -------- |\r\n| `BuildDependsOn` | The main build entry point |\r\n| `RebuildDependsOn` | The Rebuild |\r\n| `RunDependsOn` | The run the final build output (if it is a .EXE) |\r\n| `CompileDependsOn` | The compilation |\r\n| `CreateSatelliteAssembliesDependsOn` | The creation of the satellite assemblies |\r\n| `CleanDependsOn` | The Clean (Deleting of all intermediate and final build outputs) |\r\n| `PostBuildEventDependsOn` | The PostBuildEvent |\r\n| `PublishBuildDependsOn` | Build publishing |\r\n| `ResolveAssemblyReferencesDependsOn` | The 'RAR' target (Finding the transitive closure of dependencies for a given dependencies) |",
  "state": "CLOSED",
  "createdAt": "2024-05-10T06:49:04Z",
  "updatedAt": "2024-07-12T09:44:24Z",
  "closedAt": "2024-07-12T09:44:24Z",
  "mergedAt": null,
  "additions": 68,
  "deletions": 109,
  "changedFiles": 3,
  "headRefName": "proto/dependson-extending",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a8f2f419ea0b41d7a1c632f6641a36fc9995ebf7",
          "message": "Allow extending common DependsOn properties",
          "committedDate": "2024-05-10T06:32:04Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc0322f15f9f2e44d34b2289e9c109bc3d2b4f7b",
          "message": "Remove no-effect DependsOn props and change customizations to append",
          "committedDate": "2024-06-18T17:10:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks good to me!",
        "createdAt": "2024-06-04T08:28:13Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "\r\nThere is no strong consesus on value and even need for this change - so considering nonzero risk of the change - I'm rather pulling this out.\r\nThere were some minor changes that might still be valuable - extracting those to https://github.com/dotnet/msbuild/pull/10360",
        "createdAt": "2024-07-12T09:44:24Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we just delete this one?",
              "createdAt": "2024-06-10T14:54:10Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "While I wasn't able to find any incidence of this being overriden by users, the users might possibly be doing it in non-public codes.\r\n\r\nIf someone would override (or is overriding) the previously suggested way (explicit import of sdk.props and sdk.targets and then chaining it after the sdk.targets imports) - we'd be breaking that usage",
              "createdAt": "2024-06-11T08:09:22Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "How would deleting this line be a break? Before it explicitly unset the property, now it sets it to current value, I'm saying don't set it to anything.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2024-06-14T17:37:39Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh - you mean delete just the definition line, but keep using it in `DependsOnTargets` of `CreateManifestResourceNames` target?\r\n\r\nThat would be fine. Just probably going against the practice we are now trying to push - of not trying to use undefined properties.\r\n\r\n\r\nIf you meant removing it even from the `DependsOnTargets`, than it would break case where someone defines that property after explicitly importing sdk.targets.",
              "createdAt": "2024-06-14T18:12:28Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Ah: I meant just this line (and the others that don't do anything).\r\n\r\nIMO we should define properties in some different way, or maybe have a pattern-based exception for `*DependsOn` properties used in `DependsOnTargets` or something. Every line of XML has a (small!) cost and I'd rather tend to mimimalism.",
              "createdAt": "2024-06-14T18:41:12Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Makes sense - let's do that (both - deleting and special casing DependsOn in undefined read checks)",
              "createdAt": "2024-06-14T19:25:50Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I went all through those file and removed all no-op DependsOn",
              "createdAt": "2024-06-18T17:12:22Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -84,7 +84,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n \n     <PropertyGroup>\n-        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>\n+        <CreateManifestResourceNamesDependsOn>$(CreateManifestResourceNamesDependsOn)</CreateManifestResourceNamesDependsOn>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hm, this one scares me. It goes from \"no effect\" to \"move your targets to the VERY BEGINNING of the list\".",
              "createdAt": "2024-06-10T14:54:48Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "As a larger question: you chose to _prepend_ everywhere. Is that always right? I am suspicious.",
              "createdAt": "2024-06-10T14:56:52Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "My naive thinking was that the options in order from *least* preferred (from my point of view):\r\n\r\n1. Do nothing - let the situation as is\r\n2. Consider each of the DependsOn* property separately and decide whether to:\r\n   * Leave untouched (cannot be extended)\r\n   * Allow prepending\r\n   * Allow appending\r\n4. Perform a blanket fix and unify the behavior\r\n5. Perform a blanket fix and introduce prepend and append options (e.g. `DependsOn***Initial`, `DependsOn***Trialing`)\r\n\r\nThe **1** and **2** feel very unsystematic and source of confusion for users.\r\nThe 5 feels too overstretched to me - but I'm very eager to hear the specific concerns with the `BuildDependsOn`\r\n\r\nThe **4** goes inline with what we already had in targets plus what was previously fixed in 2 different rounds: https://github.com/dotnet/msbuild/pull/4922 and https://github.com/dotnet/msbuild/pull/9704 \r\nThis PR only makes it general so we do not have to discover and fix piece by piece. \r\n\r\nLet me know your concerns or alternate suggestions",
              "createdAt": "2024-06-11T07:55:51Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Friendly ping on this @rainersigwald \ud83d\ude09 ",
              "createdAt": "2024-06-14T17:28:49Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I think we have to think them through individually. Changes like this feel way worse to me than the existing behavior.",
              "createdAt": "2024-06-14T17:36:19Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ok having looked through the PR more I think the default should be to _append_ the previous value. That's generally more in keeping with what I expect is the primary expectation: \"run this new thing right before the X in XDependsOn\".\r\n\r\nIn the old explicit-import model users had flexibility either way though, so I'm kinda wondering whether this is the right thing to do at all.",
              "createdAt": "2024-06-14T17:45:16Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I need your help understanding the concern - by which I do not mean I disagree - I'm just genuinely confused.\r\n\r\nWith this change:\r\n * The explicit-import model can still be used and will remain identical to what the behavior was before (including the flexibility of usage of order)\r\n * The behavior of DependsOn properties will now be applied to all. Using the same mechanism (prepending) as was used for the other DependsOn properties in common targets, that were already authored to be nondestructive, and to all DependsOn properties in common targets, that were fixed in previous 2 approved and merged PRs.\r\n\r\n\r\nI believe the unification brings clarity and is an improvement, but if the change would feel degrading or dangerous - I'm definitely fine closing it. Concrete cases or reasons would help me understand that better",
              "createdAt": "2024-06-14T18:02:14Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "My question is whether prepending meets user expectations. If the user says\r\n\r\n```xml\r\n<BuildDependsOn>$(BuildDependsOn);MyCustomThing</BuildDependsOn>\r\n```\r\n\r\nin the body of their project, do they expect that `MyCustomThing` will be _the first target that runs in the whole build_? Because that's what this change will do.",
              "createdAt": "2024-06-14T18:43:07Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Understood.\r\n\r\nUnfortunately same concerns applies the other way around (`<BuildDependsOn>MyCustomThing;$(BuildDependsOn)</BuildDependsOn>` in user code, then extended by `<BuildDependsOn>CommonTargetEntries;$(BuildDependsOn)</BuildDependsOn>` in common targets doesn't lead to the custom target being the first thing to run). In both cases the previous behaavior was anyway ignored with the implicit import and in both cases it'll work as intended with explicit import.\r\n\r\nThat let me to keep the behavior in line what was already extendable or fixed before.\r\n\r\nHow about flipping everything to append (including the preexisting prepends)? It feels as OCD trigger if there'd be unjustified exceptions \ud83d\ude04 - so I'm trying to see if/how we can unify.",
              "createdAt": "2024-06-14T19:35:23Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yeah I'd say _in general_ append feels more like the general policy: it's more like what you'd get if you hooked the same target with `BeforeTargets`, which is what I'd generally recommend. But I am as usual scared of making a user-visible change like that :-/",
              "createdAt": "2024-06-14T19:54:55Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "OK - that is fair - let's go far appending the custom targets in all cases.\r\n@AArnott, @baronfel - would you have any concerns if I adjust the DependsOn* chaining from your fixes (#4922 and #9704) and put the user defined targets to the end of the list (instead to start)?",
              "createdAt": "2024-06-14T20:57:22Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It's hard to predict whether changing target order will break something. If it does, it can usually be corrected by adding another dependency to one of the targets in the list.\r\nI think the most important thing is that there is _some_ way for a user to prepend and append targets to the property's final value, for when ordering matters. Ideally, the built-in targets would be defined on the property in the .props area, so that the project file itself could simply choose whether to prepend or append. But if these properties have always been defined in .targets, then they have the initial say as to whether to append or prepend their own targets to what the project file may have given. If we can arrange code such that the built-in .targets have appended/prepended to these properties before `Directory.Build.targets` is imported then the user can choose to deliberately append/prepend to that at that point.\r\n\r\nI can't predict whether rearranging the ordering from my PR will break my use or anyone else's. My guess is it will *probably* be fine. Generally though, my default for property lists is to append by default, and prepend when needed, which is why I wrote the PR as I did.\r\n\r\nBTW, probably water under the bridge at this point as the precedent is set, but IMO using properties for this is wrong. In MSBuild, properties are scalars while items are vectors. A target's DependsOn attribute wants a vector, so why aren't we using items for these lists of targets? It also adds the ability to `Remove` items more conveniently than is required for properties. FWIW, when I define my own msbuild targets in my repos, I use msbuild items for this and they work great.",
              "createdAt": "2024-06-14T21:53:10Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "AArnott"
              }
            },
            {
              "body": "Thank you @AArnott and @rainersigwald for the perspective. I moved to the append pattern (including couple pre-existing cases). There will still remain to old-school way of explicit importing sdk imports and then prepending/appending as needed.\r\n\r\nIt's be great if you could have a second look and see if it feels as an improvement or rather as a risk with questionable benefits - so that we can decide whther to iterate on this or rather just close (no regrets :))\r\n\r\nThank you!",
              "createdAt": "2024-06-18T17:16:29Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -889,6 +889,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <BuildDependsOn>\n+      $(BuildDependsOn);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same here: just delete this?\r\n```suggestion\r\n```",
              "createdAt": "2024-06-14T17:38:31Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1119,7 +1123,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n-    <RunDependsOn></RunDependsOn>\n+    <RunDependsOn>$(RunDependsOn)</RunDependsOn>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2024-06-14T17:39:17Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1404,7 +1408,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n-    <PreBuildEventDependsOn></PreBuildEventDependsOn>\n+    <PreBuildEventDependsOn>$(PreBuildEventDependsOn)</PreBuildEventDependsOn>\n   </PropertyGroup>\n ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2024-06-14T17:39:43Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1433,7 +1437,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n-    <UnmanagedUnregistrationDependsOn></UnmanagedUnregistrationDependsOn>\n+    <UnmanagedUnregistrationDependsOn>$(UnmanagedUnregistrationDependsOn)</UnmanagedUnregistrationDependsOn>\n   </PropertyGroup>\n ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I'd swap this one.\r\n\r\n```suggestion\r\n    <GetTargetPathWithTargetPlatformMonikerDependsOn>$(GetTargetPathDependsOn);$(GetTargetPathWithTargetPlatformMonikerDependsOn)</GetTargetPathWithTargetPlatformMonikerDependsOn>\r\n```",
              "createdAt": "2024-06-14T17:40:18Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -2217,7 +2223,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n-    <GetTargetPathWithTargetPlatformMonikerDependsOn>$(GetTargetPathDependsOn)</GetTargetPathWithTargetPlatformMonikerDependsOn>\n+    <GetTargetPathWithTargetPlatformMonikerDependsOn>$(GetTargetPathWithTargetPlatformMonikerDependsOn);$(GetTargetPathDependsOn)</GetTargetPathWithTargetPlatformMonikerDependsOn>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc96",
              "createdAt": "2024-06-14T17:41:09Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -5898,7 +5916,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <DeploymentComputeClickOnceManifestInfoDependsOn>\n       CleanPublishFolder;\n       $(_RecursiveTargetForContentCopying);\n-      _DeploymentGenerateTrustInfo\n+      _DeploymentGenerateTrustInfo;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2024-06-14T17:41:17Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -5874,7 +5892,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n-    <PostBuildEventDependsOn></PostBuildEventDependsOn>\n+    <PostBuildEventDependsOn>$(PostBuildEventDependsOn)</PostBuildEventDependsOn>\n   </PropertyGroup>\n ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wonder about this one. Rebuild has such drastic effects, and the order of targets is absolutely critical. If a user were to want to add targets to Rebuild, whether their target runs as part of the clean phase or the subsequent build phase makes a *huge* difference. IMO positioning `$(RebuildDependsOn)` at the front of the list is arbitrary and as likely to be wrong as right, and therefore shouldn't be added at all. Let users inject their target as a dependent target to one of the more specific targets.",
              "createdAt": "2024-06-14T21:55:19Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -969,13 +971,15 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <_ProjectDefaultTargets Condition=\"'$(MSBuildProjectDefaultTargets)' == ''\">Build</_ProjectDefaultTargets>\n \n     <RebuildDependsOn>\n+      $(RebuildDependsOn);",
              "author": {
                "login": "AArnott"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Delete this line.",
              "createdAt": "2024-06-14T21:56:20Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1218,7 +1222,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <FrameworkDir Condition=\"'$(FrameworkDir)' == ''\">@(_TargetFramework40DirectoryItem)</FrameworkDir>\n     <TargetedFrameworkDir Condition=\"'$(TargetedFrameworkDir)' == ''\">@(_TargetedFrameworkDirectoryItem)</TargetedFrameworkDir>\n     <FrameworkSDKDir Condition=\"'$(FrameworkSDKDir)' == ''\">@(_TargetFrameworkSDKDirectoryItem)</FrameworkSDKDir>\n-    <GetFrameworkPathsDependsOn></GetFrameworkPathsDependsOn>\n+    <GetFrameworkPathsDependsOn>$(GetFrameworkPathsDependsOn)</GetFrameworkPathsDependsOn>",
              "author": {
                "login": "AArnott"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not as bad as `RebuildDependsOn`, but in the same concern area: whether a user target runs before or after `Compile` is likely super important, so to decide they go before it seems arbitrary.\r\nIf some or most of the sub-targets below have their own DependsOn properties, they would probably make better targets to tack on others to.",
              "createdAt": "2024-06-14T21:58:46Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -928,6 +929,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     -->\n   <PropertyGroup>\n     <CoreBuildDependsOn>\n+      $(CoreBuildDependsOn);",
              "author": {
                "login": "AArnott"
              }
            }
          ]
        }
      }
    ]
  }
}