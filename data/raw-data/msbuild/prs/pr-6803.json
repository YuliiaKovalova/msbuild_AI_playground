{
  "number": 6803,
  "title": "Expose LogTaskInputs to tasks",
  "body": "Fixes #6305\r\n\r\n### Context\r\n\r\nThe `LogTaskInputs` flag passed to MSBuild in `BuildParameters` can be used by tasks to optimize logging. When it's true, a task can omit its own duplicated logging of inputs.\r\n\r\n### Changes Made\r\n\r\n`LogTaskInputs` is plumbed through and exposed as `IsTaskInputLoggingEnabled` on `EngineServices` and also on `TaskLoggingHelper` for convenience. The RAR task is updated to use the new property.\r\n\r\n### Testing\r\n\r\n- New unit test.\r\n- Manual testing with and without `/v:diag` and inspecting the log.\r\n",
  "state": "MERGED",
  "createdAt": "2021-09-01T20:29:06Z",
  "updatedAt": "2021-09-13T11:44:37Z",
  "closedAt": "2021-09-13T11:44:37Z",
  "mergedAt": "2021-09-13T11:44:36Z",
  "additions": 133,
  "deletions": 6,
  "changedFiles": 13,
  "headRefName": "6305-expose-logtaskinputs",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e55d4360658472af409b3a91249c1bb415047a4b",
          "message": "Expose LogTaskInputs to tasks",
          "committedDate": "2021-09-01T15:05:06Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d9cbd5d8833270054014e73181e8d91ffa62589",
          "message": "Default IsTaskInputLoggingEnabled to false in old build engine",
          "committedDate": "2021-09-01T20:35:01Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95b3381aad42888e23a5861a5b485364012c3001",
          "message": "Bump EngineServices.Version",
          "committedDate": "2021-09-01T20:36:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fea997ea975de0e8b7842b8687c634df766c790f",
          "message": "Disable TaskHostFactory test on non-Framework (#5158)",
          "committedDate": "2021-09-02T10:29:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ef439b98700b09d30968e9cb0b300796c1882122",
          "message": "Revert EngineServices.Version bump",
          "committedDate": "2021-09-13T09:19:36Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why add a new variable here instead of just incrementing Version? are you trying to make it extra tough to accidentally have to changes that update the version to the same thing?",
              "createdAt": "2021-09-01T23:25:13Z",
              "path": "src/Framework/EngineServices.cs",
              "diffHunk": "@@ -20,11 +20,16 @@ public abstract class EngineServices\n         /// </summary>\n         public const int Version1 = 1;\n \n+        /// <summary>\n+        /// This version added the IsTaskInputLoggingEnabled property.\n+        /// </summary>\n+        public const int Version2 = 2;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I use named constants to basically keep a change log and have something formal to attach the comments to so they make it into the public documentation. It's just a convenience thing, trying to make it nicer for callers to use the class.",
              "createdAt": "2021-09-02T10:59:40Z",
              "path": "src/Framework/EngineServices.cs",
              "diffHunk": "@@ -20,11 +20,16 @@ public abstract class EngineServices\n         /// </summary>\n         public const int Version1 = 1;\n \n+        /// <summary>\n+        /// This version added the IsTaskInputLoggingEnabled property.\n+        /// </summary>\n+        public const int Version2 = 2;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "|| Traits.Instance.EscapeHatches.LogTaskInputs? Maybe || (Traits.Instance.EscapeHatches.LogTaskInputs && BuildEngine is not IBuildEngine 10)?",
              "createdAt": "2021-09-01T23:27:03Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -239,6 +239,12 @@ public virtual string GetResourceMessage(string resourceName)\n \n         #region Message logging methods\n \n+        /// <summary>\n+        /// Returns <see langword=\"true\"/> if the build is configured to log all task inputs.\n+        /// </summary>\n+        public bool IsTaskInputLoggingEnabled =>\n+            BuildEngine is IBuildEngine10 buildEngine10 && buildEngine10.EngineServices.IsTaskInputLoggingEnabled;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don\u2019t think escape hatch is needed here anymore. It doesn\u2019t work in other nodes anyway.",
              "createdAt": "2021-09-02T00:44:44Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -239,6 +239,12 @@ public virtual string GetResourceMessage(string resourceName)\n \n         #region Message logging methods\n \n+        /// <summary>\n+        /// Returns <see langword=\"true\"/> if the build is configured to log all task inputs.\n+        /// </summary>\n+        public bool IsTaskInputLoggingEnabled =>\n+            BuildEngine is IBuildEngine10 buildEngine10 && buildEngine10.EngineServices.IsTaskInputLoggingEnabled;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "This is basically saying that we're fine without the optimization in scenarios where `EngineServices` is not supported, which is primarily the .NET Framework 3.5 task host. I agree with Kirill that using the escape hatch here wouldn't work reliably. And it's unlikely that 3.5 tasks would want to take advantage of this new optimization, anyway.",
              "createdAt": "2021-09-02T10:52:58Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -239,6 +239,12 @@ public virtual string GetResourceMessage(string resourceName)\n \n         #region Message logging methods\n \n+        /// <summary>\n+        /// Returns <see langword=\"true\"/> if the build is configured to log all task inputs.\n+        /// </summary>\n+        public bool IsTaskInputLoggingEnabled =>\n+            BuildEngine is IBuildEngine10 buildEngine10 && buildEngine10.EngineServices.IsTaskInputLoggingEnabled;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How are we defining these versions? Is it one/release, or a new version for every change? I kinda expected this to collapse into `Version1` since that's \"the 17.0 version\".",
              "createdAt": "2021-09-02T18:47:17Z",
              "path": "ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -155,7 +155,9 @@ public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.L\n     public abstract partial class EngineServices\n     {\n         public const int Version1 = 1;\n+        public const int Version2 = 2;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> I kinda expected this to collapse into Version1 since that's \"the 17.0 version\".\r\n\r\nAha! You're right, it makes perfect sense for the granularity to be per-dot-release. Assuming this goes into 17.0 which I was not sure about since Preview5 has a high bar and this is not really a bug fix. I'll revert back to \"Version1\" if this kind of change is clear to land in 17.0. Thank you!",
              "createdAt": "2021-09-02T19:24:37Z",
              "path": "ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -155,7 +155,9 @@ public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.L\n     public abstract partial class EngineServices\n     {\n         public const int Version1 = 1;\n+        public const int Version2 = 2;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Reverted.",
              "createdAt": "2021-09-13T09:19:57Z",
              "path": "ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -155,7 +155,9 @@ public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.L\n     public abstract partial class EngineServices\n     {\n         public const int Version1 = 1;\n+        public const int Version2 = 2;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}