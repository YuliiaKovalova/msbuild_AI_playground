{
  "number": 11650,
  "title": "Add separate DeserializePacket() to INodePacketFactory",
  "body": "### Context\r\n\r\nMinimum change to get shared IPC added in #11546 recompiling again for #11383 (since the original PR was reverted).\r\n\r\n### Changes Made\r\n\r\n- Splits up `DeserializeAndRoutePacket()` in `PacketFactoryRecord` (private class)\r\n- Adds `DeserializePacket()` to `INodePacketFactory` and all implementations. Does not remove old method.\r\n- Adds ifdef's to shared pipe classes for compilation purposes\r\n\r\nNo behavior changes to MSBuild.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-04-01T05:56:33Z",
  "updatedAt": "2025-04-07T08:33:29Z",
  "closedAt": "2025-04-07T08:33:29Z",
  "mergedAt": "2025-04-07T08:33:29Z",
  "additions": 156,
  "deletions": 15,
  "changedFiles": 16,
  "headRefName": "dev/chcasta/ipc-cleanup-1",
  "isDraft": false,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "def23c98acb87bf46da45c29f0d88b81c833f100",
          "message": "Add separate DeserializePacket() to INodePacketFactory",
          "committedDate": "2025-04-01T18:15:50Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6b3f65a09778ed715491bdcfcfb924fc5e56f3d0",
          "message": "Add Microsoft.Bcl.AsyncInterfaces to pre-builts",
          "committedDate": "2025-04-05T00:33:49Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60e11f72321a7e0a90c97e02a3bb82ece4f9a4a9",
          "message": "Restore ValueTask",
          "committedDate": "2025-04-05T00:37:35Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "why? not sure if it applies here but wouldn't it potentially cause extra allocations in a quite hot path? https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/#valuetask-<tresult>-and-synchronous-completion",
              "createdAt": "2025-04-03T09:14:43Z",
              "path": "src/Shared/NodePipeBase.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ private int Read(byte[] buffer, int bytesToRead)\n         }\n \n #if !TASKHOST\n-        private async ValueTask<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)\n+        private async Task<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I mentioned here (https://github.com/dotnet/msbuild/pull/11383#issuecomment-2759731576), but I hit compile issues outside of `Microsoft.Build` since I don't believe we actually pull in `System.Threading.Tasks.Extensions` anywhere, and my attempts to fix it result (just referencing `System.Threading.Channels` in `Microsoft.Build.Tasks`) in additional pre-builts. Happy to switch back to ValueTask if there's an easy solution here.",
              "createdAt": "2025-04-03T17:35:21Z",
              "path": "src/Shared/NodePipeBase.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ private int Read(byte[] buffer, int bytesToRead)\n         }\n \n #if !TASKHOST\n-        private async ValueTask<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)\n+        private async Task<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)",
              "author": {
                "login": "ccastanedaucf"
              }
            },
            {
              "body": "I think adding `Microsoft.Bcl.AsyncInterfaces.9.0.*` to [sourcebuild baseline](https://github.com/dotnet/msbuild/blob/main/eng/SourceBuildPrebuiltBaseline.xml) should be fine. @MichaelSimons do you see any issue with that?",
              "createdAt": "2025-04-04T13:56:02Z",
              "path": "src/Shared/NodePipeBase.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ private int Read(byte[] buffer, int bytesToRead)\n         }\n \n #if !TASKHOST\n-        private async ValueTask<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)\n+        private async Task<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "If you are not declaring an explicit dependency on Microsoft.Bcl.AsyncInterfaces and it is coming in from System.Threading.Channels then it would be correct that it can be added to the prebuilt baseline.\r\n\r\nFYI, please utilize the @dotnet/source-build team for requests like this as it is monitored by more folks.",
              "createdAt": "2025-04-04T14:03:11Z",
              "path": "src/Shared/NodePipeBase.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ private int Read(byte[] buffer, int bytesToRead)\n         }\n \n #if !TASKHOST\n-        private async ValueTask<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)\n+        private async Task<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)",
              "author": {
                "login": "MichaelSimons"
              }
            },
            {
              "body": "Awesome - added the prebuilt, tested on the other PR w/ the channels reference, and it worked. Restored the `ValueTask` change.",
              "createdAt": "2025-04-05T01:42:05Z",
              "path": "src/Shared/NodePipeBase.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ private int Read(byte[] buffer, int bytesToRead)\n         }\n \n #if !TASKHOST\n-        private async ValueTask<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)\n+        private async Task<int> ReadAsync(byte[] buffer, int bytesToRead, CancellationToken cancellationToken)",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      }
    ]
  }
}