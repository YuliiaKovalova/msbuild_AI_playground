{
  "number": 9571,
  "title": "Log before unregistering Fixes #9455",
  "body": "Fixes #9455\r\n\r\n### Context\r\nIf we crash very early\u2014like in the midst of setting up the ProjectLoggingContext\u2014we have all the machinery set up to log information like that the build started, but then we unregister the relevant handlers before we actually log that we'd failed.\r\n\r\n### Changes Made\r\nDo not unregister handlers until shutdown\r\n\r\n### Testing\r\nI tested with the repro from #9455, and it now looks like this:\r\n```\r\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMSBUILD : error MSB4017:     Exception of type 'System.Exception' was thrown.\r\nMSBUILD : error MSB4017:        at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.ProjectStartedHandler(Object s\r\nender, ProjectStartedEventArgs e) in C:\\GitHub\\msbuild\\src\\Build\\Logging\\ParallelLogger\\ParallelConsoleLogger.cs:line 5\r\n86\r\nMSBUILD : error MSB4017:    at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.ProjectStartedHandler(Object\r\n sender, ProjectStartedEventArgs e) in C:\\GitHub\\msbuild\\src\\Build\\Definition\\ProjectCollection.cs:line 2342\r\nMSBUILD : error MSB4017:    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender,\r\nProjectStartedEventArgs buildEvent) in C:\\GitHub\\msbuild\\src\\Build\\BackEnd\\Components\\Logging\\EventSourceSink.cs:line 5\r\n33\r\n```\r\n\r\n(with a full stack trace).\r\n\r\nNotice that it finds the real exception\u2014just an ordinary System.Exception with no message in this case.\r\n\r\n### Notes\r\nI went directly against the advice of a comment to make this change. I tried to see what motivated that comment, but it came with the initial commit along with all the code next to it. Regardless, it does not make me feel good to do so. I don't understand why the comment should be true, but please do read it and let me know if this is a horrible idea.\r\n\r\nI also intentionally reused MSB4017 because this feels like the same exception, and I didn't want to confuse people. I just added some extra formatting around it. Like with going against the comment, I can find a new number if reviewers don't like that idea.",
  "state": "MERGED",
  "createdAt": "2023-12-21T22:07:08Z",
  "updatedAt": "2024-01-16T20:08:49Z",
  "closedAt": "2024-01-16T20:08:48Z",
  "mergedAt": "2024-01-16T20:08:48Z",
  "additions": 138,
  "deletions": 15,
  "changedFiles": 16,
  "headRefName": "log-before-unregistering",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "aec1188ada934314fec88d101b09c00274c85a44",
          "message": "Do not unregister the handler handling this exception",
          "committedDate": "2023-12-21T21:52:48Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26049577a8827827139749d72edb6d8c587761f9",
          "message": "We throw anyway; no need to unregister here",
          "committedDate": "2023-12-21T21:53:34Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "400c9e8ffd014381f015cde916dbc3d752dd638c",
          "message": "Get real exception",
          "committedDate": "2023-12-21T22:05:16Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d588b65dddde0023d299aeda18ff7885d404d921",
          "message": "Log error message + low pri stack",
          "committedDate": "2024-01-16T19:17:48Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we interrested in the innermost exception here? Or can we reuse https://github.com/dotnet/msbuild/blob/main/src/Shared/TaskLoggingHelper.cs#L511 ?",
              "createdAt": "2023-12-28T10:23:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I was originally thinking I could use its stack trace, too, but reusing code is very tempting...\r\n\r\nI'm fine with using the outermost exception's stack trace and the message from TaskLoggingHelper or keeping it as-is. Do you have a preference?",
              "createdAt": "2023-12-28T18:21:53Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Option 3 is modifying TaskLoggingHelper.GetInnerExceptionMessageString to also return the innermost exception's call stack. Then I could use both from that?",
              "createdAt": "2023-12-28T18:23:20Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I personally prefer as much diagnostic info as possible - so we should have `Exception.ToString` somewhere.\r\n\r\nUsers can sometime got scared by seeing stack traces - that's the reason why the current helper unwraps the messages only and the full `ToString()` version is logged just as a low-pri message. So you can probably follow that pattern. Though - in this specific case - when someone explicitly attaches additional logger that has issues - I personaly wouldn't mind even if the full `ToString()` is logged as error. Your choice then :-)",
              "createdAt": "2023-12-29T10:50:55Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@Forgind Just a ping to see if you are aware and plan to make changes.",
              "createdAt": "2024-01-12T16:54:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thanks for the ping\u2014I think I like reusing TaskLoggingHelper.GetInnerExceptionMessageString. I don't think the error should be super verbose, so I'm satisfied with leaving it there and logging a low-pri message afterwards with the full ToString.",
              "createdAt": "2024-01-16T19:17:21Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thank you @Forgind for the update",
              "createdAt": "2024-01-16T19:26:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -842,13 +842,25 @@ private async Task BuildAndReport()\n                 {\n                     // The build was likely cancelled. We do not need to log an error in this case.\n                 }\n-                else if (_projectLoggingContext is null)\n+                else if (ex is InternalLoggerException)\n                 {\n-                    _nodeLoggingContext.LogError(BuildEventFileInfo.Empty, \"UnhandledMSBuildError\", ex.ToString());\n+                    string realMessage = ex.Message;\n+                    Exception realEx = ex;\n+                    while (realEx.InnerException is not null)\n+                    {\n+                        realEx = realEx.InnerException;\n+                        realMessage = realEx.Message;\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}