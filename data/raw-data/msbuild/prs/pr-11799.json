{
  "number": 11799,
  "title": "Avoid intermediate array allocation when the collection is first created",
  "body": "In Framework, `List<T>.AddRange()` has a specialization for `ICollection<T>` where it allocates an intermediate array to copy the contents of the collection. It then copies the contents of the intermediate array to the inner list.\r\n\r\n    public void AddRange(IEnumerable<T> collection)\r\n    {\r\n        InsertRange(_size, collection);\r\n    }\r\n    ...\r\n    public void InsertRange(int index, IEnumerable<T> collection)\r\n    {\r\n        if (collection == null)\r\n        {\r\n            ThrowHelper.ThrowArgumentNullException(ExceptionArgument.collection);\r\n        }\r\n\r\n        if ((uint)index > (uint)_size)\r\n        {\r\n            ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.index, ExceptionResource.ArgumentOutOfRange_Index);\r\n        }\r\n\r\n        if (collection is ICollection<T> { Count: var count } collection2)\r\n        {\r\n            if (count > 0)\r\n            {\r\n                EnsureCapacity(_size + count);\r\n                if (index < _size)\r\n                {\r\n                    Array.Copy(_items, index, _items, index + count, _size - index);\r\n                }\r\n\r\n                if (this == collection2)\r\n                {\r\n                    Array.Copy(_items, 0, _items, index, index);\r\n                    Array.Copy(_items, index + count, _items, index * 2, _size - index);\r\n                }\r\n                else\r\n                {\r\n                    T[] array = new T[count]; // Intermediate array allocation here\r\n                    collection2.CopyTo(array, 0); // copying to the intermediate array\r\n                    array.CopyTo(_items, index); // copying from the intermediate array to the inner list\r\n                }\r\n\r\n                _size += count;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            using IEnumerator<T> enumerator = collection.GetEnumerator();\r\n            while (enumerator.MoveNext())\r\n            {\r\n                Insert(index++, enumerator.Current);\r\n            }\r\n        }\r\n\r\n        _version++;\r\n    }\r\n\r\nThe constructor just allocates the internal array and does the copy once\r\n\r\n    public List(IEnumerable<T> collection)\r\n    {\r\n        if (collection == null)\r\n        {\r\n            ThrowHelper.ThrowArgumentNullException(ExceptionArgument.collection);\r\n        }\r\n\r\n        if (collection is ICollection<T> { Count: var count } collection2)\r\n        {\r\n            if (count == 0)\r\n            {\r\n                _items = _emptyArray;\r\n                return;\r\n            }\r\n\r\n            _items = new T[count];\r\n            collection2.CopyTo(_items, 0);\r\n            _size = count;\r\n            return;\r\n        }\r\n\r\n        _size = 0;\r\n        _items = _emptyArray;\r\n        foreach (T item in collection)\r\n        {\r\n            Add(item);\r\n        }\r\n    }\r\n\r\nFixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-06T23:39:29Z",
  "updatedAt": "2025-05-13T17:44:57Z",
  "closedAt": "2025-05-07T09:12:28Z",
  "mergedAt": "2025-05-07T09:12:28Z",
  "additions": 17,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/lookup",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4d910b04079ea5eff96f755730a5751f0c671db8",
          "message": "Avoid intermediate array allocation when the collection is first created.",
          "committedDate": "2025-05-06T23:28:56Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de5ee67b3d1c91023530601ca5cf28c44895de1f",
          "message": "Update src/Build/BackEnd/Components/RequestBuilder/Lookup.cs\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>",
          "committedDate": "2025-05-07T08:26:08Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider adding a brief comment here to explain why the new List<ProjectItemInstance>(adds) constructor is used, highlighting that it avoids an intermediate array allocation.\n```suggestion\n                        {\n                            // Use the List<T>(IEnumerable<T>) constructor to avoid an intermediate array allocation.\n```",
              "createdAt": "2025-05-06T23:40:09Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/Lookup.cs",
              "diffHunk": "@@ -480,8 +480,14 @@ public ICollection<ProjectItemInstance> GetItems(string itemType)\n                     ICollection<ProjectItemInstance> adds = scope.Adds[itemType];\n                     if (adds.Count != 0)\n                     {\n-                        allAdds ??= new List<ProjectItemInstance>(adds.Count);\n-                        allAdds.AddRange(adds);\n+                        if (allAdds == null)\n+                        {",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider adding a comment here to document the rationale for using the new List<ProjectItemInstance>(removes) constructor to avoid unnecessary intermediate allocation.\n```suggestion\n                        {\n                            // Use the List<T>(IEnumerable<T>) constructor to initialize the list\n                            // directly from the collection, avoiding unnecessary intermediate allocations.\n```",
              "createdAt": "2025-05-06T23:40:09Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/Lookup.cs",
              "diffHunk": "@@ -491,8 +497,14 @@ public ICollection<ProjectItemInstance> GetItems(string itemType)\n                     ICollection<ProjectItemInstance> removes = scope.Removes[itemType];\n                     if (removes.Count != 0)\n                     {\n-                        allRemoves ??= new List<ProjectItemInstance>(removes.Count);\n-                        allRemoves.AddRange(removes);\n+                        if (allRemoves == null)\n+                        {",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}