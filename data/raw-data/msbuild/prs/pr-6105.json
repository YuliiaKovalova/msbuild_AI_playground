{
  "number": 6105,
  "title": "Support Common output via `BuildDir` and `PublishDir`",
  "body": "Fixes #3497\r\n\r\n### Context\r\nWe as devs want simplified singular root output path across build and publish. \r\n\r\n### Changes Made\r\nPromote `PublishDir` to `BuildDir` status\r\nUse `BuildDir` to initialize `MSBuildProjectExtensionsPath`\r\nUse `BuildDir` for mismatch warning instead of `BaseIntermediateOutputPath`\r\n\r\n### Testing\r\nTBD\r\n\r\n### Notes\r\nThis is just a concept of the new output paths behaviour using a new common directory to hold all the temporary build outputs. This is not the final implementation as this break previous behaviour. I'm still experimenting, whether to introduce a new property to split the behaviour, either within the targets or to a new targets file with an import switch. If we do favour the spilt, we can do it with #1686. The Sdk way easier since it also reduces duplicating the logic between .NET SDK and the Common targets.\r\n\r\n**Please hold up your reviews until it's out of draft.**",
  "state": "CLOSED",
  "createdAt": "2021-02-01T17:31:45Z",
  "updatedAt": "2022-04-21T04:51:49Z",
  "closedAt": "2022-04-21T04:51:49Z",
  "mergedAt": null,
  "additions": 194,
  "deletions": 160,
  "changedFiles": 8,
  "headRefName": "feature/build-dir",
  "isDraft": true,
  "author": {
    "login": "Nirmal4G"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "331481180160679570cf71640013522c5ebc4be1",
          "message": "Do use MSBuild's Path-specific property functions (Reverts #6245)\n\nThis reverts commit 0e4b0c243e197d451d2d24b7de050249acc81cd3.",
          "committedDate": "2021-11-05T13:02:23Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2d977552920b19ce694f8bc90895ee225824f39c",
          "message": "Format Comments in Common props, targets and tasks\n\nMake Common props, targets and tasks easier to read and understand.\n\nEnsure they follow consistent formatting\n\nE.g.: 2-space indent\n```xml\n  <!-- Single Line Comment Text -->\n  <!--\n    Multi Line Comment Text\n    Another Comment Text\n      Indented Comment Text\n  -->\n```",
          "committedDate": "2021-11-05T13:03:42Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b66ebe1737f1a242e211dd2059bfbafcf6832220",
          "message": "Miscellaneous refactors in Common props, targets and tasks\n\nMake Common props, targets and tasks easier to read and understand.\n\nin all files:\n - Fix improper leading and trailing spacing of strings within quotes.\n\nin 'Microsoft.Common.props':\n - Move 'BaseIntermediateOutputPath' logic out of 'MSBuildProjectExtensionsPath' block.\n\nin 'Microsoft.Common.CrossTargeting.targets':\n - Remove temporary import depending on 'CoreCrossTargetingTargetsPath' property.\n\nin 'Microsoft.Common.CurrentVersion.targets':\n - Add single quotes to property names in text.\n - Set 'ProjectPath' to the now available 'MSBuildProjectDirectory'.\n - Simplified condition logic wherever based on 'OutputType' property.\n - Use 'ConfigurationName' property instead of 'Configuration' property.",
          "committedDate": "2021-11-05T13:03:43Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f07a0ad2c8fddf3e56136dc80dfecb1b752eba6e",
          "message": "Support Common output via BuildDir and PublishDir\n\nPromote PublishDir to BuildDir status\nUse BuildDir to initialize MSBuildProjectExtensionsPath\nUse BuildDir for mismatch warning instead of BaseIntermediateOutputPath",
          "committedDate": "2021-11-05T13:03:44Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18060803519f3d344a9fbae198b5ff6bc56c676b",
          "message": "Append Project Name to build and publish\n\nWhen pointing build and publish outside of project directory, we need to check the same\nand append the project name to them so that the projects' outputs doesn't clash.\n\nThere are no property functions available to check if a path is a parent of another path.\nSo, we resort to using this hack until a suitable alternative is made available.",
          "committedDate": "2021-11-05T13:03:45Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e8f99ca6be2800b7af5ae91c5e25202528ab148",
          "message": "Move output paths' trailing slash and mismatch check its own target\n\nWe don't need to split them but this will become crowded as we add\noutput path features later. So, it is best to split them now.\n\nThe order of checking the OutputPath properties is now reversed,\nmeaning the early paths come first instead of the final path properties.\n\nThis leads to fail early for the path properties in the order of importance.",
          "committedDate": "2021-11-05T13:03:46Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3cc87c64301368c16b0061d1dfbacdb6390b83dc",
          "message": "Enable setting custom folder name for build & publish\n\nSetting custom build and publish folder names is now enabled via 'BuildDirName' and 'PublishDirName'.\nThe defaults are 'build' for build directory and 'publish' for publish directory.",
          "committedDate": "2021-11-05T13:03:47Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4136af887b0963017c1328af093e8b0507ed860",
          "message": "Flow new output paths changes into tests\n\n1. *BaseIntermediateOutputPath* -> *BuildDir*\n2. *ConfigurationAndPlatform* -> *OutputPaths*\n3. ProjectExtensionsPath: *obj* -> *ext*",
          "committedDate": "2021-11-05T13:03:48Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Note for reviewers:\r\nThe first five commits are cosmetic; the sixth is the relevant change. Skip to that one.",
        "createdAt": "2021-02-01T22:12:43Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Nirmal4G Can you remove the whitespace / formatting changes from this PR and submit them separately?  That will make it a lot easier to review the changes related to the output directory.",
        "createdAt": "2021-02-02T02:34:55Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@Nirmal4G Thanks for your work on this.\r\n\r\nWe try hard to avoid breaking changes in MSBuild.  That means we can't change the output paths used for projects that haven't set `BuildDir`.  It also means that `BaseIntermediateOutputPath` needs to work the same way as it does today, while in this PR it looks like you are replacing its functionality with `BuildDir`.\r\n\r\nWe will also need to decide whether `BuildDir` is the property name we want to use for this.  I think there were various suggestions, and previously my preference was `RootOutputPath`.  I'm warming up to `BuildDir` with this PR though.  Regardless, I don't think figuring out the name to use should block other progress on this PR.",
        "createdAt": "2021-02-02T02:54:02Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Actually, understanding this more, I don't think it really addresses #3497.  What that issue tracks is a way to set a common output path for multiple projects (ie in a solution/repo).  Then the project name would be automatically appended to that common output path (along with other components, such as `bin` or `obj`, the configuration, platform, TargetFramework, etc.  The way I think we can do that is here: https://github.com/dotnet/msbuild/issues/3497#issuecomment-570268502\r\n\r\nI think that's more useful than having a single property that allows you to override both the output and intermediate paths for a single project.",
        "createdAt": "2021-02-02T03:23:03Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Before I forget: please retarget to master.",
        "createdAt": "2021-02-04T00:39:39Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@dsplaisted \r\n\r\n> We try hard to avoid breaking changes in MSBuild. That means we can't change the output paths used for projects that haven't set `BuildDir`.\r\n\r\nI agree and I do have a solution, same as I did in #5238, we can use a property to switch to a new behaviour when `BuildDir` is set.\r\n\r\n> Then the project name would be automatically appended to that common output path\r\n\r\nThis, I wanted to ask. Do we want to append to `BuildDir` or each of the other paths that depend on (e.g.: `*OutputPath`s)?\r\n\r\n1. `build/<project-name>/{bin,obj,ext,...}/...`\r\n2. `build/{bin,obj,ext,...}/<project-name>/...`\r\n\r\nWhich directory structure do you prefer as the default?\r\n\r\n> It also means that `BaseIntermediateOutputPath` needs to work the same way as it does today\r\n\r\nI very much prefer if we remove the `MSBuildProjectExtensionsPath`'s dependency on `BaseIntermediateOutputPath`. Anything pre-build goes into the extensions path, so (along with central package versioning feature) caching them is a benefit on builds in the near future. It doesn't hurt to at least plan for it.\r\n\r\nBesides, the change I made just relaxes BIOP and not constrain it. So, there'll be no-breaking change on this part but we do have **previews** to check and confirm it.",
        "createdAt": "2021-02-05T19:48:06Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "To be clear, I'm against changing the default that `bin/` `obj/` folders are located in project roots. If there's an incredibly compelling argument for it I'm all ears, but I imagine this would break a whole lot of people.\r\n\r\nIf we're talking about simply allowing a user to set `BuildDir`, and `bin/` and `obj/` would be placed at whatever that location is, I see no problems there. \r\n\r\nI'm not sure what the benefit of adding an `ext/` to every build is?\r\n\r\n> Just like bin and obj, I've introduced ext folder to hold all the project restores, external tools hooking up with msbuild, etc... That way the outputs from these tools are kept separate, since, the pre-build events take a long time in the build process. This way, they are easy to include/copy/ignore in cache-enabled builds (e.g.: docker builds).\r\n\r\nWhere would these outputs go previously? in obj?",
        "createdAt": "2021-02-10T23:16:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> I'm against changing the default...If there's an incredibly compelling argument for it I'm all ears...\n\n#MeToo but yes there's a compelling argument to me is that having a sensible and standard output paths across different types of projects for variety of different use cases. _I'll create a proposal based on what I learn from this PR. We can have the discussion there._\n\n> Where would these outputs go previously? in obj?\n\nYes, currently but I do propose we move it to a separate folder **only** when under build directory.\n\n**All of this doesn't mean I want to remove existing behavior.**",
        "createdAt": "2021-02-17T08:19:46Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Closing this since I re-forked the repo, the branch ref to this PR was removed as well. I'll open a new PR soon.",
        "createdAt": "2022-04-21T04:51:49Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If you put `build\\` instead of `build`, it'll create one fewer string in the default case.\r\n\r\nAlso, is that the right default anyway? If we don't want people to have to change anything, and it's currently going to bin, I'd say the default should be empty\u2014that way, it wouldn't change behavior unless the user wants it to.\r\n\r\nI glanced at some of the test failures, and the top one was BothBaseOutputPathAndOutputPathWereNotSpecified saying it should be bin, not build\\bin.",
              "createdAt": "2021-02-01T22:23:43Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -142,6 +146,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <_OutputPathWasMissing Condition=\"'$(_OriginalPlatform)' != '' and '$(_OriginalConfiguration)' != '' and '$(OutputPath)' == ''\">true</_OutputPathWasMissing>\n     <!-- Check whether BaseOutputPath was specified -->\n     <BaseOutputPathWasSpecified Condition=\"'$(BaseOutputPath)' != ''\">true</BaseOutputPathWasSpecified>\n+    <!-- Initialize BuildDir when empty, to ensure build doesn't produce inconsistent paths -->\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I commented this in a different section and I'm seeing that we need to nail down what `BuildDir` is intended to be. https://github.com/dotnet/msbuild/issues/3497#issuecomment-570268502\r\n\r\nDaniel suggested that BaseOutputPath and BaseIntermediateOutputPath should be build off of BuildDir. So it sounds to me like BuildDir should just be (by default) the project directory. BOP and BIOP should just default to BuildDir/bin or BuildDir/obj.",
              "createdAt": "2021-02-02T23:00:00Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -142,6 +146,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <_OutputPathWasMissing Condition=\"'$(_OriginalPlatform)' != '' and '$(_OriginalConfiguration)' != '' and '$(OutputPath)' == ''\">true</_OutputPathWasMissing>\n     <!-- Check whether BaseOutputPath was specified -->\n     <BaseOutputPathWasSpecified Condition=\"'$(BaseOutputPath)' != ''\">true</BaseOutputPathWasSpecified>\n+    <!-- Initialize BuildDir when empty, to ensure build doesn't produce inconsistent paths -->\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "@Forgind\r\n> If you put `build\\` instead of `build`, it'll create one fewer string in the default case.\r\n\r\nTrue but didn't want to hardcode slashes.\r\n\r\n> If we don't want people to have to change anything\r\n\r\nThis is just one way of doing things, but if we do want to preserve older path spec... we can separate out the older logic and newer logic into a separate props/targets and switch between them with a property say, `UseNewOutputPaths`\r\n\r\n@BenVillalobos I thought of that too. My first iteration was the same but this one puts everything under a single folder under project root or solution root.\r\n\r\nOne of the things we can do with this, is, we can now delete build without publish and vice-versa which many seem to prefer. With this we can also do a force clean which just deletes `build` folder without us having to manually delete `bin`/`obj` folders.",
              "createdAt": "2021-02-05T18:36:09Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -142,6 +146,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <_OutputPathWasMissing Condition=\"'$(_OriginalPlatform)' != '' and '$(_OriginalConfiguration)' != '' and '$(OutputPath)' == ''\">true</_OutputPathWasMissing>\n     <!-- Check whether BaseOutputPath was specified -->\n     <BaseOutputPathWasSpecified Condition=\"'$(BaseOutputPath)' != ''\">true</BaseOutputPathWasSpecified>\n+    <!-- Initialize BuildDir when empty, to ensure build doesn't produce inconsistent paths -->\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this change? Seems like it would confuse people. Did you mean to make it $(BuildDir)app.publish?",
              "createdAt": "2021-02-01T22:29:44Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -476,7 +482,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n   <!-- Output location for publish target. -->\n   <PropertyGroup>\n-    <PublishDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(PublishDir)', '$(OutputPath)app.publish'))))</PublishDir>\n+    <PublishDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(PublishDir)', 'publish'))))</PublishDir>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No. This was intentional. Making publish a first-class citizen of the MSBuild process. So, I placed it in the root instead.\r\n\r\nI've wanted to ask, why the `app.` prefix? why not just `publish`?\r\n\r\nIs it because of the explorer's sorting that you wanted to make publish folder come first?",
              "createdAt": "2021-02-05T18:43:42Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -476,7 +482,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n   <!-- Output location for publish target. -->\n   <PropertyGroup>\n-    <PublishDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(PublishDir)', '$(OutputPath)app.publish'))))</PublishDir>\n+    <PublishDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(PublishDir)', 'publish'))))</PublishDir>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Where is _InitialBuildDir set?",
              "createdAt": "2021-02-01T22:44:54Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -839,17 +845,16 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <!--\n       Log a warning if:\n-        1. $(EnableBaseIntermediateOutputPathMismatchWarning) is 'true'\n-        2. $(BaseIntermediateOutputPath) was set in the body of a project after its default value was set in Microsoft.Common.props\n-        3. $(BaseIntermediateOutputPath) is not the same as $(MSBuildProjectExtensionsPath)\n+        1. $(EnableBuildDirMismatchWarning) is 'true'\n+        2. $(BuildDir) was set in the body of a project after its default value was set in Microsoft.Common.props\n+        3. $(BuildDir) is not the same as $(MSBuildProjectExtensionsPath)\n \n-      Similar to the error above, there are cases when users set $(BaseIntermediateOutputPath) in the body of their project and things build but only by coincidence.\n-      MSBuild does not know if $(BaseIntermediateOutputPath) changing would cause problems so tools like NuGet must set $(EnableBaseIntermediateOutputPathMismatchWarning)\n-      to 'true'.\n+      Similar to the error above, there are cases when users set $(BuildDir) in the body of their project and things build but only by coincidence.\n+      MSBuild does not know if $(BuildDir) changing would cause problems so tools like NuGet must set $(EnableBuildDirMismatchWarning) to 'true'.\n     -->\n-    <Warning Condition=\" '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' \"\n+    <Warning Condition=\" '$(EnableBuildDirMismatchWarning)' == 'true' And '$(_InitialBuildDir)' != '$(BuildDir)' And '$(BuildDir)' != '$(MSBuildProjectExtensionsPath)' \"",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Line 41 of src/Tasks/Microsoft.Common.props",
              "createdAt": "2021-02-02T23:00:21Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -839,17 +845,16 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <!--\n       Log a warning if:\n-        1. $(EnableBaseIntermediateOutputPathMismatchWarning) is 'true'\n-        2. $(BaseIntermediateOutputPath) was set in the body of a project after its default value was set in Microsoft.Common.props\n-        3. $(BaseIntermediateOutputPath) is not the same as $(MSBuildProjectExtensionsPath)\n+        1. $(EnableBuildDirMismatchWarning) is 'true'\n+        2. $(BuildDir) was set in the body of a project after its default value was set in Microsoft.Common.props\n+        3. $(BuildDir) is not the same as $(MSBuildProjectExtensionsPath)\n \n-      Similar to the error above, there are cases when users set $(BaseIntermediateOutputPath) in the body of their project and things build but only by coincidence.\n-      MSBuild does not know if $(BaseIntermediateOutputPath) changing would cause problems so tools like NuGet must set $(EnableBaseIntermediateOutputPathMismatchWarning)\n-      to 'true'.\n+      Similar to the error above, there are cases when users set $(BuildDir) in the body of their project and things build but only by coincidence.\n+      MSBuild does not know if $(BuildDir) changing would cause problems so tools like NuGet must set $(EnableBuildDirMismatchWarning) to 'true'.\n     -->\n-    <Warning Condition=\" '$(EnableBaseIntermediateOutputPathMismatchWarning)' == 'true' And '$(_InitialBaseIntermediateOutputPath)' != '$(BaseIntermediateOutputPath)' And '$(BaseIntermediateOutputPath)' != '$(MSBuildProjectExtensionsPath)' \"\n+    <Warning Condition=\" '$(EnableBuildDirMismatchWarning)' == 'true' And '$(_InitialBuildDir)' != '$(BuildDir)' And '$(BuildDir)' != '$(MSBuildProjectExtensionsPath)' \"",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd prefer just $(BuildDir)app.publish\\",
              "createdAt": "2021-02-01T22:45:29Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -5474,7 +5479,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <RemoveDir\n         Directories=\"$(PublishDir)\"\n-        Condition=\"'$(PublishDir)'=='$(OutputPath)app.publish\\' and Exists('$(PublishDir)')\"/>\n+        Condition=\"'$(PublishDir)' == '$([MSBuild]::EnsureTrailingSlash(`publish`))' and Exists('$(PublishDir)')\"/>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/6105#discussion_r571175158",
              "createdAt": "2021-02-05T18:46:41Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -5474,7 +5479,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     <RemoveDir\n         Directories=\"$(PublishDir)\"\n-        Condition=\"'$(PublishDir)'=='$(OutputPath)app.publish\\' and Exists('$(PublishDir)')\"/>\n+        Condition=\"'$(PublishDir)' == '$([MSBuild]::EnsureTrailingSlash(`publish`))' and Exists('$(PublishDir)')\"/>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If BaseIntermediateOutputPath and IntermediateOutputPath are to be constructed using BuildDir as the root and BuildDir has no value, wouldn't the default \"build\" mean our outputs are suddenly in a subfolder?\r\n\r\nprojectFolder/\r\n\tbuild/\r\n\t\tobj/\r\n\t\tbin/\r\ninstead of\r\n\r\nprojectFolder/\r\n\tobj/\r\n\tbin/",
              "createdAt": "2021-02-02T22:53:42Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -33,12 +33,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(DirectoryBuildPropsPath)\" Condition=\"'$(ImportDirectoryBuildProps)' == 'true' and exists('$(DirectoryBuildPropsPath)')\"/>\n \n   <!--\n-      The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets\n-      in order for the $(MSBuildProjectExtensionsPath) to use it as a default.\n+      The $(BuildDir) replaces $(BaseIntermediateOutputPath) to enable common root output path across multiple projects\n+      and for the $(MSBuildProjectExtensionsPath) to use it as a default.\n   -->\n   <PropertyGroup>\n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n-    <_InitialBaseIntermediateOutputPath>$(BaseIntermediateOutputPath)</_InitialBaseIntermediateOutputPath>\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yes and if we want to, we can keep existing behavior with a property switch.",
              "createdAt": "2021-02-05T18:48:36Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -33,12 +33,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(DirectoryBuildPropsPath)\" Condition=\"'$(ImportDirectoryBuildProps)' == 'true' and exists('$(DirectoryBuildPropsPath)')\"/>\n \n   <!--\n-      The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets\n-      in order for the $(MSBuildProjectExtensionsPath) to use it as a default.\n+      The $(BuildDir) replaces $(BaseIntermediateOutputPath) to enable common root output path across multiple projects\n+      and for the $(MSBuildProjectExtensionsPath) to use it as a default.\n   -->\n   <PropertyGroup>\n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n-    <_InitialBaseIntermediateOutputPath>$(BaseIntermediateOutputPath)</_InitialBaseIntermediateOutputPath>\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "I'm not a fan of placing these folders in a subfolder as a default with an opt out. What's the benefit of this?",
              "createdAt": "2021-02-10T23:14:13Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -33,12 +33,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(DirectoryBuildPropsPath)\" Condition=\"'$(ImportDirectoryBuildProps)' == 'true' and exists('$(DirectoryBuildPropsPath)')\"/>\n \n   <!--\n-      The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets\n-      in order for the $(MSBuildProjectExtensionsPath) to use it as a default.\n+      The $(BuildDir) replaces $(BaseIntermediateOutputPath) to enable common root output path across multiple projects\n+      and for the $(MSBuildProjectExtensionsPath) to use it as a default.\n   -->\n   <PropertyGroup>\n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n-    <_InitialBaseIntermediateOutputPath>$(BaseIntermediateOutputPath)</_InitialBaseIntermediateOutputPath>\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Last paragraph in https://github.com/dotnet/msbuild/pull/6105#discussion_r571171029",
              "createdAt": "2021-02-17T07:54:36Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -33,12 +33,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(DirectoryBuildPropsPath)\" Condition=\"'$(ImportDirectoryBuildProps)' == 'true' and exists('$(DirectoryBuildPropsPath)')\"/>\n \n   <!--\n-      The declaration of $(BaseIntermediateOutputPath) had to be moved up from Microsoft.Common.CurrentVersion.targets\n-      in order for the $(MSBuildProjectExtensionsPath) to use it as a default.\n+      The $(BuildDir) replaces $(BaseIntermediateOutputPath) to enable common root output path across multiple projects\n+      and for the $(MSBuildProjectExtensionsPath) to use it as a default.\n   -->\n   <PropertyGroup>\n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n-    <_InitialBaseIntermediateOutputPath>$(BaseIntermediateOutputPath)</_InitialBaseIntermediateOutputPath>\n+    <BuildDir>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BuildDir)', 'build'))))</BuildDir>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If someone overrides `BaseIntermediateOutputPath`, do we want that to be relative to `BuildDir`? I'm thinking of daniel's comment here: https://github.com/dotnet/msbuild/issues/3497#issuecomment-570268502",
              "createdAt": "2021-02-02T22:56:55Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -150,12 +156,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <Configuration Condition=\"'$(Configuration)' == ''\">Debug</Configuration>\n     <ConfigurationName Condition=\"'$(ConfigurationName)' == ''\">$(Configuration)</ConfigurationName>\n \n-    <BaseOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseOutputPath)', 'bin'))))</BaseOutputPath>\n+    <BaseOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseOutputPath)', '$(BuildDir)bin'))))</BaseOutputPath>\n     <OutputPath Condition=\"'$(OutputPath)' == '' and '$(PlatformName)' == 'AnyCPU'\">$([System.IO.Path]::Combine('$(BaseOutputPath)', '$(Configuration)'))</OutputPath>\n     <OutputPath Condition=\"'$(OutputPath)' == '' and '$(PlatformName)' != 'AnyCPU'\">$([System.IO.Path]::Combine('$(BaseOutputPath)', '$(PlatformName)', '$(Configuration)'))</OutputPath>\n     <OutputPath>$([MSBuild]::EnsureTrailingSlash('$(OutputPath)'))</OutputPath>\n \n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n+    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', '$(BuildDir)obj'))))</BaseIntermediateOutputPath>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "_That is still in progress._ For now, it just takes the value that the user entered but we could take the given path if it's not relative and append to build path if it is.\r\n\r\n```suggestion\r\n    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\r\n    <BaseIntermediateOutputPath Condition=\"'$(BuildDirWasSpecified)' == 'true' AND '$(BuildDir)' != ''\">$([System.IO.Path]::Combine('$(BuildDir)', '$(BaseIntermediateOutputPath)'))<BaseIntermediateOutputPath>\r\n```\r\n\r\nsame for other paths under build/publish folder!",
              "createdAt": "2021-02-05T19:03:31Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -150,12 +156,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <Configuration Condition=\"'$(Configuration)' == ''\">Debug</Configuration>\n     <ConfigurationName Condition=\"'$(ConfigurationName)' == ''\">$(Configuration)</ConfigurationName>\n \n-    <BaseOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseOutputPath)', 'bin'))))</BaseOutputPath>\n+    <BaseOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseOutputPath)', '$(BuildDir)bin'))))</BaseOutputPath>\n     <OutputPath Condition=\"'$(OutputPath)' == '' and '$(PlatformName)' == 'AnyCPU'\">$([System.IO.Path]::Combine('$(BaseOutputPath)', '$(Configuration)'))</OutputPath>\n     <OutputPath Condition=\"'$(OutputPath)' == '' and '$(PlatformName)' != 'AnyCPU'\">$([System.IO.Path]::Combine('$(BaseOutputPath)', '$(PlatformName)', '$(Configuration)'))</OutputPath>\n     <OutputPath>$([MSBuild]::EnsureTrailingSlash('$(OutputPath)'))</OutputPath>\n \n-    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', 'obj'))))</BaseIntermediateOutputPath>\n+    <BaseIntermediateOutputPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(BaseIntermediateOutputPath)', '$(BuildDir)obj'))))</BaseIntermediateOutputPath>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This was expecting the `obj` folder previously. I'm confused what `BuildDir` is supposed to represent exactly. \r\n\r\n```\r\n    BuildDir:\r\n    Indicates the final output location for the project or solution.\r\n    All the *OutpuPath properties should derive from this.\r\n```\r\n\r\nThis suggests to me that it would be bin, so this could break whatever takes a dependency on MSBuildProjectExtensionsPath and expects the obj directory.",
              "createdAt": "2021-02-02T23:02:31Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -49,10 +49,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.\n   -->\n   <PropertyGroup>\n-    <MSBuildProjectExtensionsPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(MSBuildProjectExtensionsPath)', '$(BaseIntermediateOutputPath)'))))</MSBuildProjectExtensionsPath>\n+    <MSBuildProjectExtensionsPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(MSBuildProjectExtensionsPath)', '$(BuildDir)'))))</MSBuildProjectExtensionsPath>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Ok, this is a mistake during rebase... silly me!!!\r\n\r\nIt was supposed to be...\r\n\r\n```suggestion\r\n    <MSBuildProjectExtensionsPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(MSBuildProjectExtensionsPath)', '$(BuildDir)ext'))))</MSBuildProjectExtensionsPath>\r\n```\r\n\r\n**Note**\r\nJust like `bin` and `obj`, I've introduced `ext` folder to hold all the project restores, external tools hooking up with msbuild, etc... That way the outputs from these tools are kept separate, since, the pre-build events take a long time in the build process. This way, they are easy to include/copy/ignore in cache-enabled builds (e.g.: docker builds).",
              "createdAt": "2021-02-05T19:22:10Z",
              "path": "src/Tasks/Microsoft.Common.props",
              "diffHunk": "@@ -49,10 +49,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       management system can write out multiple files but the order of the import is alphabetic because MSBuild sorts the list.\n   -->\n   <PropertyGroup>\n-    <MSBuildProjectExtensionsPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(MSBuildProjectExtensionsPath)', '$(BaseIntermediateOutputPath)'))))</MSBuildProjectExtensionsPath>\n+    <MSBuildProjectExtensionsPath>$([MSBuild]::EnsureTrailingSlash($([MSBuild]::ValueOrDefault('$(MSBuildProjectExtensionsPath)', '$(BuildDir)'))))</MSBuildProjectExtensionsPath>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}