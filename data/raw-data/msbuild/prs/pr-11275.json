{
  "number": 11275,
  "title": "Take steps to avoid threadpool starvation",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\nThere are a handful of areas where threadpool threads are unnecessarily blocked by synchronous work, or there is additional contention that can be avoided. The most egregious instance is the synchronous read in BuferedReadStream\r\n\r\n![image](https://github.com/user-attachments/assets/f8cdbb09-0182-4f22-a935-589daadb45ef)\r\n\r\nThe outer call to BeginRead() ends up calling BufferedReadStream.Read() which synchronously blocks when _innerStream.Read() is called. This results in a substantial amount of block time for threadpool threads.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-13T20:07:30Z",
  "updatedAt": "2025-05-13T17:44:08Z",
  "closedAt": "2025-02-26T09:41:16Z",
  "mergedAt": "2025-02-26T09:41:16Z",
  "additions": 84,
  "deletions": 90,
  "changedFiles": 7,
  "headRefName": "dev/erarndt/threadUtilization",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4bad82ed937cc2ca055e7d95bb00a3041da717d8",
          "message": "Take steps to avoid threadpool starvation",
          "committedDate": "2025-01-10T20:58:29Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a693f26552baeda10d1165cb1ee01995bc47cbc",
          "message": "Merge branch 'main' into dev/erarndt/threadUtilization",
          "committedDate": "2025-01-15T17:29:22Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56bee6bcf28ffd6ff19921f84c031fa19c6ad3b2",
          "message": "Move BufferedReadStream changes to separate PR",
          "committedDate": "2025-02-03T17:29:49Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "03be5e8a58c6b463831390adb38ae0903559f6f5",
          "message": "Merge branch 'main' into dev/erarndt/threadUtilization",
          "committedDate": "2025-02-21T14:16:56Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62c34ed9654fa8b44fa71870f415a94db6dc90a5",
          "message": "Change exceptions order.",
          "committedDate": "2025-02-25T12:29:04Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #11160",
        "createdAt": "2025-01-14T10:03:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2025-01-15T16:45:23Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nPull request contains merge conflicts.<br>\r\n\n</samp>",
        "createdAt": "2025-01-15T16:45:30Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I've pushed some tweaks involving channels and setting up a drain thread in a slightly different manner - the old construct of\r\n\"whenever we're sending a packet, we call DrainQueue\" was weird so this is my attempt to remove it.\r\nPlease let me know if this is fine, if it needs additional changes or if we want to revert it altogether for some reason I didn't foresee.",
        "createdAt": "2025-02-18T14:02:58Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I've removed my experimental changes for now. Let's aim to review & merge this, then return to it at a later date.",
        "createdAt": "2025-02-21T13:56:52Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I implemented the changes I suggested, @SimaTian please review again.",
        "createdAt": "2025-02-25T12:31:14Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there any advantage for a ConcurrentQueue as opposed to using Channel?\r\nI'm not saying that we should use channel - when I was researching this piece of code, I've stumbled onto it and it piqued my interest. Hence the question.",
              "createdAt": "2025-01-22T14:21:47Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -576,7 +575,7 @@ private enum ExitPacketState\n             /// <summary>\n             /// A queue used for enqueuing packets to write to the stream asynchronously.\n             /// </summary>\n-            private BlockingCollection<INodePacket> _packetWriteQueue = new BlockingCollection<INodePacket>();\n+            private ConcurrentQueue<INodePacket> _packetWriteQueue = new ConcurrentQueue<INodePacket>();",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I'm open to that option. I'm not familiar with the performance characteristics of Channel, so I can't comment on that.",
              "createdAt": "2025-01-29T20:44:41Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -576,7 +575,7 @@ private enum ExitPacketState\n             /// <summary>\n             /// A queue used for enqueuing packets to write to the stream asynchronously.\n             /// </summary>\n-            private BlockingCollection<INodePacket> _packetWriteQueue = new BlockingCollection<INodePacket>();\n+            private ConcurrentQueue<INodePacket> _packetWriteQueue = new ConcurrentQueue<INodePacket>();",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't it time to consider having a separate thread for the drain? with the \"new\" await, it should not even require a dedicated thread. (unless I'm grossly misunderstanding something)\r\n\r\nBuilding on the channel idea from previous comment:\r\nWe could set up a multi writer, one reader channel.\r\nThen have one thread to drain the channel\r\ne.g. while (await channelReader.WaitToReadAsync()) {doTheDraining()}",
              "createdAt": "2025-01-22T14:32:35Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -733,65 +732,63 @@ private void DrainPacketQueue()\n                 {",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Aside from that, the only place that is ever doing the Draining is this one:\r\n```\r\n public void SendData(INodePacket packet)\r\n {\r\n     if (IsExitPacket(packet))\r\n     {\r\n         _exitPacketState = ExitPacketState.ExitPacketQueued;\r\n     }\r\n     _packetWriteQueue.Add(packet);\r\n     DrainPacketQueue();\r\n }\r\n```\r\nit is also the only place that ever places packets into the Queue.\r\n\r\nsince we're already touching this place, I would like to take it further if possible.",
              "createdAt": "2025-01-22T14:37:35Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -733,65 +732,63 @@ private void DrainPacketQueue()\n                 {",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": " > cache the lookup in configCache which\r\nthis looks cut mid sentence, can you take a look please?",
              "createdAt": "2025-02-18T10:07:49Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1019,11 +1019,8 @@ private bool IsTraversalRequest(BuildRequest request)\n         private void AssignUnscheduledRequestsWithConfigurationCountLevelling(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n         {\n             // Assign requests but try to keep the same number of configurations on each node\n-            List<int> nodesByConfigurationCountAscending = new List<int>(_availableNodes.Keys);\n-            nodesByConfigurationCountAscending.Sort(delegate (int left, int right)\n-            {\n-                return Comparer<int>.Default.Compare(_schedulingData.GetConfigurationsCountByNode(left, true /* excludeTraversals */, _configCache), _schedulingData.GetConfigurationsCountByNode(right, true /* excludeTraversals */, _configCache));\n-            });\n+            // Use OrderBy to sort since it will cache the lookup in configCache which. This reduces the number of times we have to acquire the lock.",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "@Erarndt can you take a look at this comment please?\r\nIt looks incomplete. When ready, we can merge this one, everything else looks fine.",
              "createdAt": "2025-02-26T09:05:42Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1019,11 +1019,8 @@ private bool IsTraversalRequest(BuildRequest request)\n         private void AssignUnscheduledRequestsWithConfigurationCountLevelling(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n         {\n             // Assign requests but try to keep the same number of configurations on each node\n-            List<int> nodesByConfigurationCountAscending = new List<int>(_availableNodes.Keys);\n-            nodesByConfigurationCountAscending.Sort(delegate (int left, int right)\n-            {\n-                return Comparer<int>.Default.Compare(_schedulingData.GetConfigurationsCountByNode(left, true /* excludeTraversals */, _configCache), _schedulingData.GetConfigurationsCountByNode(right, true /* excludeTraversals */, _configCache));\n-            });\n+            // Use OrderBy to sort since it will cache the lookup in configCache which. This reduces the number of times we have to acquire the lock.",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@SimaTian Is there a need to query for the result code again? In some cases I was seeing lock contention from the underlying ConcurrentDictionary, so we should avoid duplicate lookups when possible.",
              "createdAt": "2025-02-18T18:05:09Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -334,7 +334,7 @@ private static bool CheckResults(BuildResult result, List<string> targets, bool\n                 {\n                     // If the result was a failure and we have not seen any skipped targets up to this point, then we conclude we do\n                     // have results for this request, and they indicate failure.\n-                    if (targetResult.ResultCode == TargetResultCode.Failure && (targetsMissingResults == null || targetsMissingResults.Count == 0))\n+                    if (result[target].ResultCode == TargetResultCode.Failure && (!checkTargetsMissingResults || !missingTargetFound))",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "Ah, I see what this is trying to do. We should split this up to avoid the double lookup.",
              "createdAt": "2025-02-18T18:08:20Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -334,7 +334,7 @@ private static bool CheckResults(BuildResult result, List<string> targets, bool\n                 {\n                     // If the result was a failure and we have not seen any skipped targets up to this point, then we conclude we do\n                     // have results for this request, and they indicate failure.\n-                    if (targetResult.ResultCode == TargetResultCode.Failure && (targetsMissingResults == null || targetsMissingResults.Count == 0))\n+                    if (result[target].ResultCode == TargetResultCode.Failure && (!checkTargetsMissingResults || !missingTargetFound))",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "This was actually just me resolving a merge conflict. I took the variant from main since it was newer.",
              "createdAt": "2025-02-19T08:20:09Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -334,7 +334,7 @@ private static bool CheckResults(BuildResult result, List<string> targets, bool\n                 {\n                     // If the result was a failure and we have not seen any skipped targets up to this point, then we conclude we do\n                     // have results for this request, and they indicate failure.\n-                    if (targetResult.ResultCode == TargetResultCode.Failure && (targetsMissingResults == null || targetsMissingResults.Count == 0))\n+                    if (result[target].ResultCode == TargetResultCode.Failure && (!checkTargetsMissingResults || !missingTargetFound))",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: That would not be a super early abort on the first byte anymore, so I suggest re-phrase. \r\n```suggestion\r\n                // Abort for connection attempts from ancient MSBuild.exes\r\n```",
              "createdAt": "2025-02-21T14:56:04Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -540,26 +540,20 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce\n             else\n #endif\n             {\n-                // Legacy approach with an early-abort for connection attempts from ancient MSBuild.exes\n-                for (int i = 0; i < bytes.Length; i++)\n+                int bytesRead = stream.Read(bytes, 0, bytes.Length);\n+                if (bytesRead != bytes.Length)\n                 {\n-                    int read = stream.ReadByte();\n-\n-                    if (read == -1)\n-                    {\n-                        // We've unexpectly reached end of stream.\n-                        // We are now in a bad state, disconnect on our end\n-                        throw new IOException(String.Format(CultureInfo.InvariantCulture, \"Unexpected end of stream while reading for handshake\"));\n-                    }\n-\n-                    bytes[i] = Convert.ToByte(read);\n+                    // We've unexpectly reached end of stream.\n+                    // We are now in a bad state, disconnect on our end\n+                    throw new IOException(String.Format(CultureInfo.InvariantCulture, \"Unexpected end of stream while reading for handshake\"));\n+                }\n \n-                    if (i == 0 && byteToAccept != null && byteToAccept != bytes[0])\n-                    {\n-                        stream.WriteIntForHandshake(0x0F0F0F0F);\n-                        stream.WriteIntForHandshake(0x0F0F0F0F);\n-                        throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture, \"Client: rejected old host. Received byte {0} instead of {1}.\", bytes[0], byteToAccept));\n-                    }\n+                // Legacy approach with an early-abort for connection attempts from ancient MSBuild.exes",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I suggest moving this throw above the \"Unexpected end of stream while reading for handshake\" one - I am not sure if it really matters, but this message is more specific and if both happens, we should prefer failing with it.",
              "createdAt": "2025-02-21T14:59:28Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -540,26 +540,20 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce\n             else\n #endif\n             {\n-                // Legacy approach with an early-abort for connection attempts from ancient MSBuild.exes\n-                for (int i = 0; i < bytes.Length; i++)\n+                int bytesRead = stream.Read(bytes, 0, bytes.Length);\n+                if (bytesRead != bytes.Length)\n                 {\n-                    int read = stream.ReadByte();\n-\n-                    if (read == -1)\n-                    {\n-                        // We've unexpectly reached end of stream.\n-                        // We are now in a bad state, disconnect on our end\n-                        throw new IOException(String.Format(CultureInfo.InvariantCulture, \"Unexpected end of stream while reading for handshake\"));\n-                    }\n-\n-                    bytes[i] = Convert.ToByte(read);\n+                    // We've unexpectly reached end of stream.\n+                    // We are now in a bad state, disconnect on our end\n+                    throw new IOException(String.Format(CultureInfo.InvariantCulture, \"Unexpected end of stream while reading for handshake\"));\n+                }\n \n-                    if (i == 0 && byteToAccept != null && byteToAccept != bytes[0])\n-                    {\n-                        stream.WriteIntForHandshake(0x0F0F0F0F);\n-                        stream.WriteIntForHandshake(0x0F0F0F0F);\n-                        throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture, \"Client: rejected old host. Received byte {0} instead of {1}.\", bytes[0], byteToAccept));\n-                    }\n+                // Legacy approach with an early-abort for connection attempts from ancient MSBuild.exes\n+                if (byteToAccept != null && byteToAccept != bytes[0])\n+                {\n+                    stream.WriteIntForHandshake(0x0F0F0F0F);\n+                    stream.WriteIntForHandshake(0x0F0F0F0F);\n+                    throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture, \"Client: rejected old host. Received byte {0} instead of {1}.\", bytes[0], byteToAccept));",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}