{
  "number": 9429,
  "title": "Fix issue with SHA256 instantiation",
  "body": "Fixes #9248\r\n\r\n### Context\r\nAfter the change from SHA256Managed -> SHA256 the instantiation was broken. SHA256 is an abstract class.\r\n\r\n### Changes Made\r\nGet back to SHA256Managed usage\r\n\r\n### Testing\r\nManual + UT for guarding the changes in signing.\r\nBefore:\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/199d84f6-6241-4e08-8d9e-62b12ccaee96)\r\n\r\nAfter:\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/8220247e-8810-41d5-8f23-63c335f6ea12)\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-16T13:48:33Z",
  "updatedAt": "2023-11-28T09:32:45Z",
  "closedAt": "2023-11-28T09:32:45Z",
  "mergedAt": "2023-11-28T09:32:45Z",
  "additions": 104,
  "deletions": 2,
  "changedFiles": 5,
  "headRefName": "dev/ykovalova/fix_SecurityUtilities.SignFile_netcore",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b448f65ff18555066fb9be8a09041583cb383f7b",
          "message": "fix issue with SHA256 instantiation",
          "committedDate": "2023-11-16T12:48:41Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58cb3f02304934829121334497240ee4a218be5b",
          "message": "remove extra changes",
          "committedDate": "2023-11-16T13:47:10Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "804c2f5c6c033dec9dd3b3ec44a57f90c34a959a",
          "message": "add unit test for guarding signing changes",
          "committedDate": "2023-11-16T15:49:48Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1f3e2e98716100a18c8ad68f501438b7464d9fe",
          "message": "add test resources",
          "committedDate": "2023-11-16T16:19:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2391766f5878f0e8e430bc429ad8de3315009a1e",
          "message": "fix review comments",
          "committedDate": "2023-11-20T10:09:05Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b84402a2a0855fc74f177076a0d99fc638e3e9f",
          "message": "fix test data",
          "committedDate": "2023-11-21T07:08:11Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3eb5c704f27cbf89b2d79860deb084d0cf7a557b",
          "message": "fallback to SHA256Managed",
          "committedDate": "2023-11-21T14:44:10Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "These suppressions bug me. Should we instead\r\n\r\n```suggestion\r\n            CryptoConfig.AddOID(Win32.szOID_NIST_sha256,\r\n                               Sha256DigestMethod);\r\n```\r\n\r\n?",
              "createdAt": "2023-11-16T20:16:59Z",
              "path": "src/Tasks/ManifestUtil/mansign2.cs",
              "diffHunk": "@@ -270,10 +270,14 @@ private void init()\n                                Sha256SignatureMethodUri);\n \n #if RUNTIME_TYPE_NETCORE\n-            CryptoConfig.AddAlgorithm(typeof(SHA256),\n+#pragma warning disable SYSLIB0021 // Type or member is obsolete\n+            // SHA256 can not be used since it is an abstract class.\n+            // CalculateHashValue internally calls CryptoConfig.CreateFromName and it causes instantiation problems.\n+            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),\n                                Sha256DigestMethod);\n+#pragma warning restore SYSLIB0021 // Type or member is obsolete",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "According to the finder, Reference.CalculateHashValue ends up calling CryptoConfig.CreateFromName to create the Algorithm object. From what I can tell, CreateFromName uses the mapping written to by AddAlgorithm [appNameHT mapping table] to create the Algorithm object. The AddOID writes to appOidHT mapping table which does not appear to be used by CreateFromName.\r\n\r\nIt would be good to try and confirm this though. ",
              "createdAt": "2023-11-17T05:12:59Z",
              "path": "src/Tasks/ManifestUtil/mansign2.cs",
              "diffHunk": "@@ -270,10 +270,14 @@ private void init()\n                                Sha256SignatureMethodUri);\n \n #if RUNTIME_TYPE_NETCORE\n-            CryptoConfig.AddAlgorithm(typeof(SHA256),\n+#pragma warning disable SYSLIB0021 // Type or member is obsolete\n+            // SHA256 can not be used since it is an abstract class.\n+            // CalculateHashValue internally calls CryptoConfig.CreateFromName and it causes instantiation problems.\n+            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),\n                                Sha256DigestMethod);\n+#pragma warning restore SYSLIB0021 // Type or member is obsolete",
              "author": {
                "login": "sujitnayak"
              }
            },
            {
              "body": "It didn't work, I have just noticed it.\r\nFalling back to \r\n```\r\nCryptoConfig.AddAlgorithm(typeof(SHA256Managed),\t\r\n                               Sha256DigestMethod); \r\n```\r\nusage",
              "createdAt": "2023-11-21T14:41:59Z",
              "path": "src/Tasks/ManifestUtil/mansign2.cs",
              "diffHunk": "@@ -270,10 +270,14 @@ private void init()\n                                Sha256SignatureMethodUri);\n \n #if RUNTIME_TYPE_NETCORE\n-            CryptoConfig.AddAlgorithm(typeof(SHA256),\n+#pragma warning disable SYSLIB0021 // Type or member is obsolete\n+            // SHA256 can not be used since it is an abstract class.\n+            // CalculateHashValue internally calls CryptoConfig.CreateFromName and it causes instantiation problems.\n+            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),\n                                Sha256DigestMethod);\n+#pragma warning restore SYSLIB0021 // Type or member is obsolete",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "@rainersigwald fyi",
              "createdAt": "2023-11-27T16:48:36Z",
              "path": "src/Tasks/ManifestUtil/mansign2.cs",
              "diffHunk": "@@ -270,10 +270,14 @@ private void init()\n                                Sha256SignatureMethodUri);\n \n #if RUNTIME_TYPE_NETCORE\n-            CryptoConfig.AddAlgorithm(typeof(SHA256),\n+#pragma warning disable SYSLIB0021 // Type or member is obsolete\n+            // SHA256 can not be used since it is an abstract class.\n+            // CalculateHashValue internally calls CryptoConfig.CreateFromName and it causes instantiation problems.\n+            CryptoConfig.AddAlgorithm(typeof(SHA256Managed),\n                                Sha256DigestMethod);\n+#pragma warning restore SYSLIB0021 // Type or member is obsolete",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "spelling nit:\r\n\r\n```suggestion\r\n            X509Certificate2 certificate = TestCertHelper.MockCertificate(pathToCertificate);\r\n```",
              "createdAt": "2023-11-16T20:26:48Z",
              "path": "src/Tasks.UnitTests/SecurityUtil_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Runtime.Versioning;\n+using System.Security.Cryptography;\n+using System.Security.Cryptography.X509Certificates;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    public class SecurityUtil_Tests\n+    {\n+        private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, \"TestResources\");\n+\n+        [WindowsOnlyFact]\n+        [SupportedOSPlatform(\"windows\")]\n+        public void SignFile_Success()\n+        {\n+            Uri timestampUrl = new(\"http://timestamp.comodoca.com/rfc3161\");\n+            string clickOnceManifest = Path.Combine(TestAssembliesPaths, \"ClickOnceProfile.pubxml\");\n+            string targetFrameworkVersion = Constants.TargetFrameworkVersion40;\n+            string targetFrameworkIdentifier = Constants.DotNetFrameworkIdentifier;\n+            bool disallowMansignTimestampFallback = false;\n+\n+            // the certificate was generated locally and does not contain any sensitive information\n+            string pathToCertificate = Path.Combine(TestAssembliesPaths, \"mycert.pfx\");\n+            X509Certificate2 cerfiticate = TestCertHelper.MockCertificate(pathToCertificate);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we're testing for .NET Core, I think target framework identifier should be DotNetCoreAppIdentifier.\r\nIf this test is for full FX, TargetFrameworkVersion 4.5 & higher only use SHA256.  TargetVersion40 will use SHA1 I think. ",
              "createdAt": "2023-11-17T05:32:53Z",
              "path": "src/Tasks.UnitTests/SecurityUtil_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Runtime.Versioning;\n+using System.Security.Cryptography;\n+using System.Security.Cryptography.X509Certificates;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    public class SecurityUtil_Tests\n+    {\n+        private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, \"TestResources\");\n+\n+        [WindowsOnlyFact]\n+        [SupportedOSPlatform(\"windows\")]\n+        public void SignFile_Success()\n+        {\n+            Uri timestampUrl = new(\"http://timestamp.comodoca.com/rfc3161\");\n+            string clickOnceManifest = Path.Combine(TestAssembliesPaths, \"ClickOnceProfile.pubxml\");\n+            string targetFrameworkVersion = Constants.TargetFrameworkVersion40;\n+            string targetFrameworkIdentifier = Constants.DotNetFrameworkIdentifier;",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "targetFrameworkIdentifier should be Constants.DotNetCoreAppIdentifier for .NET Core signing scenario..",
              "createdAt": "2023-11-21T05:53:38Z",
              "path": "src/Tasks.UnitTests/SecurityUtil_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Runtime.Versioning;\n+using System.Security.Cryptography;\n+using System.Security.Cryptography.X509Certificates;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    public class SecurityUtil_Tests\n+    {\n+        private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, \"TestResources\");\n+\n+        [WindowsOnlyFact]\n+        [SupportedOSPlatform(\"windows\")]\n+        public void SignFile_Success()\n+        {\n+            Uri timestampUrl = new(\"http://timestamp.comodoca.com/rfc3161\");\n+            string clickOnceManifest = Path.Combine(TestAssembliesPaths, \"ClickOnceProfile.pubxml\");\n+            string targetFrameworkVersion = \"v4.0\";\n+            string targetFrameworkIdentifier = Constants.DotNetFrameworkIdentifier;",
              "author": {
                "login": "sujitnayak"
              }
            },
            {
              "body": "Fixed. I hope I got you right; just wanted to cover .net framework case too.",
              "createdAt": "2023-11-21T07:09:36Z",
              "path": "src/Tasks.UnitTests/SecurityUtil_Tests.cs",
              "diffHunk": "@@ -0,0 +1,79 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Runtime.Versioning;\n+using System.Security.Cryptography;\n+using System.Security.Cryptography.X509Certificates;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    public class SecurityUtil_Tests\n+    {\n+        private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, \"TestResources\");\n+\n+        [WindowsOnlyFact]\n+        [SupportedOSPlatform(\"windows\")]\n+        public void SignFile_Success()\n+        {\n+            Uri timestampUrl = new(\"http://timestamp.comodoca.com/rfc3161\");\n+            string clickOnceManifest = Path.Combine(TestAssembliesPaths, \"ClickOnceProfile.pubxml\");\n+            string targetFrameworkVersion = \"v4.0\";\n+            string targetFrameworkIdentifier = Constants.DotNetFrameworkIdentifier;",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}