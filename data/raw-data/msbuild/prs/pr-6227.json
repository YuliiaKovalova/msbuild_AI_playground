{
  "number": 6227,
  "title": "Optimize EngineFileUtilities.GetFileList",
  "body": "Fixes #6061 \r\n\r\n### Context\r\n\r\n`EngineFileUtilities.GetFileList` has been identified as one of the performance bottlenecks when building .NET Core projects. Since this code is called as part of project evaluation, it directly impacts Visual Studio performance as well, especially solution load.\r\n\r\n### Changes Made\r\n\r\nTweaked the code under `GetFileList`:\r\n- Smarter order of wildcard checks to optimize for the common case.\r\n- Optimized hex number parsing and wildcard detection.\r\n\r\n### Testing\r\n\r\nExisting unit tests for correctness, ETL traces for performance.\r\n\r\nThis change together with #6151 is showing about 30% less time spent in this particular function when building a Hello World .NET Core project with the Framework version of MSBuild. It's an OK win for project evaluation perf but translates to less than 1 ms of total command line build time.\r\n\r\n### Notes\r\n\r\nThis PR is small but still recommended to be reviewed commit by commit.",
  "state": "MERGED",
  "createdAt": "2021-03-04T22:40:46Z",
  "updatedAt": "2021-03-11T23:55:07Z",
  "closedAt": "2021-03-11T23:55:07Z",
  "mergedAt": "2021-03-11T23:55:06Z",
  "additions": 69,
  "deletions": 70,
  "changedFiles": 4,
  "headRefName": "6061-optimize-GetFileListEscaped",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "99f5b6e2fcd1b6dc27dfb3c5e654f64641017e75",
          "message": "Remove unused parameter from GetFileListUnescaped",
          "committedDate": "2021-03-04T13:48:00Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4cdd49ea227602f2733c467625f6738f987ef3a5",
          "message": "Don't create empty excludeSpecsEscaped lists",
          "committedDate": "2021-03-04T13:49:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "372508113098cc1e8564ffb98a8d777e3b481913",
          "message": "Optimize the order of wildcard checks in BuildItemFragments",
          "committedDate": "2021-03-04T13:50:16Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "944c66acbc3d4ad00a2252adc8e65003aee2f26f",
          "message": "Optimize the order of wildcard checks in FilespecHasWildcards",
          "committedDate": "2021-03-09T10:38:16Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "554de4b26bb9fb67416dffe64d995bc754399915",
          "message": "Optimize hex number parsing in UnescapeAll",
          "committedDate": "2021-03-09T10:38:22Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f4f7c2b36b9d03f6c8955cfe36343ef1f5b9e3c",
          "message": "Optimize ContainsEscapedWildcards to do the work in one pass",
          "committedDate": "2021-03-09T10:38:22Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You took out the color from the original! But that's ok \ud83d\ude09",
              "createdAt": "2021-03-05T21:27:08Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -89,31 +87,21 @@ internal string[] GetFileListEscaped\n             bool forceEvaluate = false\n             )\n         {\n-            return GetFileList(directoryEscaped, filespecEscaped, true /* returnEscaped */, forceEvaluate, excludeSpecsEscaped);\n+            return GetFileList(directoryEscaped, filespecEscaped, returnEscaped: true, forceEvaluate, excludeSpecsEscaped);\n         }\n \n         internal static bool FilespecHasWildcards(string filespecEscaped)\n         {\n-            bool containsEscapedWildcards = EscapingUtilities.ContainsEscapedWildcards(filespecEscaped);\n-            bool containsRealWildcards = FileMatcher.HasWildcards(filespecEscaped);\n-\n-            if (containsEscapedWildcards && containsRealWildcards)\n-            {\n-                // Umm, this makes no sense.  The item's Include has both escaped wildcards and \n-                // real wildcards.  What does he want us to do?  Go to the file system and find\n-                // files that literally have '*' in their filename?  Well, that's not going to \n-                // happen because '*' is an illegal character to have in a filename.\n-\n-                return false;\n-            }\n-            else if (!containsEscapedWildcards && containsRealWildcards)\n-            {\n-                return true;\n-            }\n-            else\n+            if (!FileMatcher.HasWildcards(filespecEscaped))\n             {\n                 return false;\n             }\n+\n+            // If the item's Include has both escaped wildcards and  real wildcards, then it's",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nice!",
              "createdAt": "2021-03-05T21:45:21Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -85,18 +99,16 @@ internal static string UnescapeAll(string escapedString, bool trim = false)\n                 // for us to even consider doing anything with this.\n                 if (\n                         (indexOfPercent <= (escapedStringLength - 3)) &&\n-                        IsHexDigit(escapedString[indexOfPercent + 1]) &&\n-                        IsHexDigit(escapedString[indexOfPercent + 2])\n+                        TryDecodeHexDigit(escapedString[indexOfPercent + 1], out int digit1) &&\n+                        TryDecodeHexDigit(escapedString[indexOfPercent + 2], out int digit2)\n                     )\n                 {\n                     // First copy all the characters up to the current percent sign into\n                     // the destination.\n                     unescapedString.Append(escapedString, currentPosition, indexOfPercent - currentPosition);\n \n                     // Convert the %XX to an actual real character.\n-                    string hexString = escapedString.Substring(indexOfPercent + 1, 2);\n-                    char unescapedCharacter = (char)int.Parse(hexString, System.Globalization.NumberStyles.HexNumber,\n-                        CultureInfo.InvariantCulture);\n+                    char unescapedCharacter = (char)((digit1 << 4) + digit2);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why subtract 3 here?",
              "createdAt": "2021-03-05T21:54:34Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -226,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);\n+            while (index != -1)\n+            {\n+                if (escapedString[index + 1] == '2' && (escapedString[index + 2] == 'a' || escapedString[index + 2] == 'A'))\n+                {\n+                    // %2a or %2A\n+                    return true;\n+                }\n+                if (escapedString[index + 1] == '3' && (escapedString[index + 2] == 'f' || escapedString[index + 2] == 'F'))\n                 {\n-                    // It has either a '%2' or a '%3'.  This is looking very promising.\n-                    return\n-\n-                            (-1 != escapedString.IndexOf(\"%2a\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%2A\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3f\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3F\", StringComparison.Ordinal))\n-                        ;\n+                    // %3f or %3F\n+                    return true;\n                 }\n+                index = escapedString.IndexOf('%', index + 1, escapedString.Length - index - 3);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "We want something that looks like %3f or whatever, and that takes three characters. This means no need for verifying that there are enough characters afterwards.",
              "createdAt": "2021-03-06T01:54:27Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -226,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);\n+            while (index != -1)\n+            {\n+                if (escapedString[index + 1] == '2' && (escapedString[index + 2] == 'a' || escapedString[index + 2] == 'A'))\n+                {\n+                    // %2a or %2A\n+                    return true;\n+                }\n+                if (escapedString[index + 1] == '3' && (escapedString[index + 2] == 'f' || escapedString[index + 2] == 'F'))\n                 {\n-                    // It has either a '%2' or a '%3'.  This is looking very promising.\n-                    return\n-\n-                            (-1 != escapedString.IndexOf(\"%2a\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%2A\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3f\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3F\", StringComparison.Ordinal))\n-                        ;\n+                    // %3f or %3F\n+                    return true;\n                 }\n+                index = escapedString.IndexOf('%', index + 1, escapedString.Length - index - 3);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ah,  index + 1 means 1 less character to look at ;)",
              "createdAt": "2021-03-06T02:34:08Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -226,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);\n+            while (index != -1)\n+            {\n+                if (escapedString[index + 1] == '2' && (escapedString[index + 2] == 'a' || escapedString[index + 2] == 'A'))\n+                {\n+                    // %2a or %2A\n+                    return true;\n+                }\n+                if (escapedString[index + 1] == '3' && (escapedString[index + 2] == 'f' || escapedString[index + 2] == 'F'))\n                 {\n-                    // It has either a '%2' or a '%3'.  This is looking very promising.\n-                    return\n-\n-                            (-1 != escapedString.IndexOf(\"%2a\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%2A\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3f\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3F\", StringComparison.Ordinal))\n-                        ;\n+                    // %3f or %3F\n+                    return true;\n                 }\n+                index = escapedString.IndexOf('%', index + 1, escapedString.Length - index - 3);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Well, we also know that index is the index of a %, so using index instead would result in saying `index = index;` ad infinitum.",
              "createdAt": "2021-03-06T14:30:45Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -226,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);\n+            while (index != -1)\n+            {\n+                if (escapedString[index + 1] == '2' && (escapedString[index + 2] == 'a' || escapedString[index + 2] == 'A'))\n+                {\n+                    // %2a or %2A\n+                    return true;\n+                }\n+                if (escapedString[index + 1] == '3' && (escapedString[index + 2] == 'f' || escapedString[index + 2] == 'F'))\n                 {\n-                    // It has either a '%2' or a '%3'.  This is looking very promising.\n-                    return\n-\n-                            (-1 != escapedString.IndexOf(\"%2a\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%2A\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3f\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3F\", StringComparison.Ordinal))\n-                        ;\n+                    // %3f or %3F\n+                    return true;\n                 }\n+                index = escapedString.IndexOf('%', index + 1, escapedString.Length - index - 3);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I tweaked the expression to be more readable and added comments.",
              "createdAt": "2021-03-09T10:39:26Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -226,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);\n+            while (index != -1)\n+            {\n+                if (escapedString[index + 1] == '2' && (escapedString[index + 2] == 'a' || escapedString[index + 2] == 'A'))\n+                {\n+                    // %2a or %2A\n+                    return true;\n+                }\n+                if (escapedString[index + 1] == '3' && (escapedString[index + 2] == 'f' || escapedString[index + 2] == 'F'))\n                 {\n-                    // It has either a '%2' or a '%3'.  This is looking very promising.\n-                    return\n-\n-                            (-1 != escapedString.IndexOf(\"%2a\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%2A\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3f\", StringComparison.Ordinal)) ||\n-                            (-1 != escapedString.IndexOf(\"%3F\", StringComparison.Ordinal))\n-                        ;\n+                    // %3f or %3F\n+                    return true;\n                 }\n+                index = escapedString.IndexOf('%', index + 1, escapedString.Length - index - 3);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we have good test coverage here?",
              "createdAt": "2021-03-06T20:57:34Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -214,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "We certainly have [some](https://github.com/dotnet/msbuild/blob/0def9d13d74d075e62851630fe296bb019e401a1/src/Shared/UnitTests/EscapingUtilities_Tests.cs#L74-L85), though it wouldn't be bad to add a couple new cases.",
              "createdAt": "2021-03-08T15:49:21Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -214,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I have added a few more cases, thank you!",
              "createdAt": "2021-03-09T10:38:52Z",
              "path": "src/Shared/EscapingUtilities.cs",
              "diffHunk": "@@ -214,28 +226,26 @@ string unescapedString\n         /// </summary>\n         /// <param name=\"escapedString\"></param>\n         /// <returns></returns>\n-        internal static bool ContainsEscapedWildcards\n-            (\n-            string escapedString\n-            )\n+        internal static bool ContainsEscapedWildcards(string escapedString)\n         {\n-            if (-1 != escapedString.IndexOf('%'))\n+            if (escapedString.Length < 3)\n             {\n-                // It has a '%' sign.  We have promise.\n-                if (\n-                        (-1 != escapedString.IndexOf(\"%2\", StringComparison.Ordinal)) ||\n-                        (-1 != escapedString.IndexOf(\"%3\", StringComparison.Ordinal))\n-                    )\n+                return false;\n+            }\n+            int index = escapedString.IndexOf('%', 0, escapedString.Length - 2);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}