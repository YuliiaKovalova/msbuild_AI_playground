{
  "number": 9908,
  "title": "Log TaskParameterEvent for scalar parameters",
  "body": "Fixes #9827\r\n\r\n### Context\r\n\r\n`TaskParameterEvent` with `TaskParameterMessageKind.TaskInput` is currently used only for parameters that are lists. Parameters that are simple strings are logged as a specially formatted low-importance message.\r\n\r\nThe binlog viewer contains logic to recognize this special message and recover the Name and Value to be rendered in the viewer UI. Since we will use this event for analyzers, it would be unfortunate to add one more place with this suboptimal processing.\r\n\r\n### Changes Made\r\n\r\nUnified the logic in `TaskExecutionHost` to log all parameters as `TaskParameterEvent` with `TaskParameterMessageKind.TaskInput`. The change is under a change wave check.\r\n\r\n### Testing\r\n\r\n- Added a new unit test.\r\n- Compared diagnostic-level output with task parameter logging enabled with and without the change. No differences were found when passing null, empty, false, true, numeric, string, or stringified item list parameters.\r\n- Compared the appearance in binlog for the same sample values as above. No differences were observed.\r\n- Compared OrchardCore binlogs with and without the change. They're the same size and the only difference I found was in rendering the `SolutionConfigurationContents` parameter which is a string but the content _looks_ formatted so it was rendered incorrectly as a list of items.\r\n\r\n### Notes\r\n\r\nAs @KirillOsenkov pointed out in the issue, we don't really depend on the textual messages so we don't have to do any double-logging. The viewer can remove parsing the textual messages on its own schedule.",
  "state": "MERGED",
  "createdAt": "2024-03-22T15:50:38Z",
  "updatedAt": "2024-04-03T15:05:25Z",
  "closedAt": "2024-04-03T07:43:28Z",
  "mergedAt": "2024-04-03T07:43:28Z",
  "additions": 71,
  "deletions": 33,
  "changedFiles": 6,
  "headRefName": "9827-taskparameterevent",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "748844bd094dbcb8432ddf3876d68dd0259095f9",
          "message": "Log TaskParameterEvent for scalar parameters",
          "committedDate": "2024-03-22T15:15:19Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9f8b0fed353b7d4fdb19af45b99622c67acb409",
          "message": "Introduce change wave 17.12",
          "committedDate": "2024-03-25T10:14:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Let's check that the diag output for console loggers doesn't change, as well as let's see how it looks like in the binlog for null, empty string, numbers, booleans and such.\r\n\r\nWhat is the current behavior for scalar parameters that have the default value? (0, null, false)",
        "createdAt": "2024-03-22T22:01:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Done. No differences found with our textual logging (with task parameter logging enabled) or with the way it looks in the viewer. I have exported the tree as XML from the viewer and the `SolutionConfigurationContents` mismatch is still the only difference I've found.",
        "createdAt": "2024-03-25T12:12:41Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I am adding screenshots of `SolutionConfigurationContents` for completeness.\r\n\r\n**Before:**\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/6d0c6baa-e92a-4be4-ad1a-9963663ff480)\r\n\r\n**After:**\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/d476db77-81ce-4caf-bfeb-618f000029a2)\r\n\r\nBefore looks nicer but it's lying.",
        "createdAt": "2024-03-25T12:31:54Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Just a note that the viewer can't remove parsing textual messages because we still need to read all legacy binlogs.",
        "createdAt": "2024-04-03T15:05:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This will go into 17.11 so I'll introduce a new changewave and update this check to use it.",
              "createdAt": "2024-03-22T15:51:40Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Is it needed? I thought we create new changeways only for LTS releases (so next one would be 17.12)",
              "createdAt": "2024-03-24T19:57:48Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes, the new changewave should be labeled 17.12. I don't think 17.12 has been announced (and 16 made it only to 16.11 :smile:) but 17.11 is non-LTS so it's a reasonable assumption.",
              "createdAt": "2024-03-25T07:48:05Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ooooh - I thought we accumulate untill the next LTS.\r\nBut we actually should create one as soon as we are done with current LTS (even though next one is not yet known). Now I see we have it properly documented - https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves-Dev.md#change-wave-versioning - not sure why I was thinking we wait until we start working on the next LTS..\r\n\r\nFYI @f-alizada - as I misinformed you on this one. You should move your change under 17.12 as well - https://github.com/dotnet/msbuild/pull/9874/files#diff-854a463890211b66f6c60646fe5d85736e82b0daaa2152561a055b333db480a8R38 - Sorry for telling you otherwise!",
              "createdAt": "2024-03-25T12:10:04Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is just paranoia, right? The behavior of anything that's not `TaskParameterEvent` enlightened should be identical to what it was before?\r\n\r\n(To be clear I endorse and support paranoia!)",
              "createdAt": "2024-04-01T20:31:14Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> The behavior of anything that's not TaskParameterEvent enlightened should be identical to what it was before?\r\n\r\nThe PR is switching task parameter logging from a mix of text + structured to all structured. Technically it is a breaking change for anything that depends on the text logging, so the answer to your question is no. The potential break seems to be unlikely but not impossible.\r\n\r\nAn alternative approach would be to double-log for now, and remove the text logging some time later but it a) increases binlog size and b) makes the viewer show duplicated parameters so we would need to patch the viewer first, and wait some time before enabling double-logging.",
              "createdAt": "2024-04-02T08:49:03Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> Technically it is a breaking change for anything that depends on the text logging\r\n\r\nthis is what I don't understand. Does the message text of the new structured message not exactly match the prior textual message?",
              "createdAt": "2024-04-02T20:52:05Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, sorry, my statement is confusing. The new structured message converts to an identical string. So users won't see any difference in logs. The breaking potential applies only to loggers that depend on the exact type of the event. That's what you meant by _\"anything that's not TaskParameterEvent enlightened\"_, I get it now!",
              "createdAt": "2024-04-03T06:45:38Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I have merged the PR to unblock @f-alizada.",
              "createdAt": "2024-04-03T07:46:12Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1303,14 +1279,31 @@ private bool InternalSetTaskParameter(TaskPropertyInfo parameter, IList paramete\n \n             if (LogTaskInputs && !_taskLoggingContext.LoggingService.OnlyLogCriticalEvents)\n             {\n-                // If the type is a list, we already logged the parameters\n-                if (!(parameterValue is IList))\n+                IList parameterValueAsList = parameterValue as IList;\n+                bool legacyBehavior = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}