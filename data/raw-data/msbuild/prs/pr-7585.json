{
  "number": 7585,
  "title": "Workaround mismatch type resolving",
  "body": "Fixes #\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\r\n\r\n### Context\r\nRoot cause:\r\n- csproj requires lots of project properties, for this reason evaluation of project is started because project is considered dirty\r\n- however this evaluation throws which causes this project to stay dirty\r\n- above exception is somehow ignored by csproj and it proceeds with requesting more project properties each of those starting new evaluation in UI thread causing huge degradation in VS responsiveness\r\n \r\nWhy it throws?\r\n- when MSBuild interprets \\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.BuildDiagCommon.targets line #119 the type \"Microsoft.Build.Framework.ITaskItem[]\" is resolved from another already loaded version of Microsoft.Build.Framework assembly.\r\nthis causes type check mismatch and that ParameterType is rejected and throws  InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\r\n\r\n### Changes Made\r\nIf resolving type prefixes with known namespace used for Framework assembly, we load it from it.\r\n\r\n### Testing\r\nAfter changes I was not able to reproduce this issue anymore. There is still, about 3s UI delay it this scenario but it is way batter than it used to be.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-04-28T09:37:05Z",
  "updatedAt": "2022-04-28T19:48:42Z",
  "closedAt": "2022-04-28T19:48:42Z",
  "mergedAt": "2022-04-28T19:48:42Z",
  "additions": 44,
  "deletions": 37,
  "changedFiles": 1,
  "headRefName": "rokonec/get-type-mismatch",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fdc4b501f17117f6ce2a000bc31f0f641b4bb24c",
          "message": "Workaround mismatch type resolving",
          "committedDate": "2022-04-28T09:23:39Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a65a4fcc8f5b14b430b3637f0a8a1b2bee74b85f",
          "message": "Delete outdated comment",
          "committedDate": "2022-04-28T16:23:36Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this comment go with the line above?",
              "createdAt": "2022-04-28T14:20:58Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,42 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n+                        {\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                        }\n \n-                            ProjectErrorUtilities.VerifyThrowInvalidProject\n-                            (\n-                             paramType != null,\n-                             parameter.ParameterTypeLocation,\n-                             \"InvalidEvaluatedAttributeValue\",\n-                             expandedType,\n-                             parameter.ParameterType,\n-                             XMakeAttributes.parameterType,\n+                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Nope. It is dead comment. I will delete it.",
              "createdAt": "2022-04-28T16:22:56Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,42 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n+                        {\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                        }\n \n-                            ProjectErrorUtilities.VerifyThrowInvalidProject\n-                            (\n-                             paramType != null,\n-                             parameter.ParameterTypeLocation,\n-                             \"InvalidEvaluatedAttributeValue\",\n-                             expandedType,\n-                             parameter.ParameterType,\n-                             XMakeAttributes.parameterType,\n+                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2022-04-28T16:23:16Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,42 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n+                        {\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                        }\n \n-                            ProjectErrorUtilities.VerifyThrowInvalidProject\n-                            (\n-                             paramType != null,\n-                             parameter.ParameterTypeLocation,\n-                             \"InvalidEvaluatedAttributeValue\",\n-                             expandedType,\n-                             parameter.ParameterType,\n-                             XMakeAttributes.parameterType,\n+                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: labels for parameters instead of comments?",
              "createdAt": "2022-04-28T17:57:45Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I agree, but it has been copied from former code, and I did not aim that for refactoring",
              "createdAt": "2022-04-28T18:13:12Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When would we fail to find the full type but succeed with just this?",
              "createdAt": "2022-04-28T17:58:18Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Because I do not understand all usage patterns I included this fallback as a just-for-sure robustness code.\r\n\r\nIf the type which names begins with \"Microsoft.Build.Framework.\" would be defined in different assembly than `Microsoft.Build.Framework.dll`. Currently there is \"probably\" no such case but in future someone might decide to move some part from \"Microsoft.Build.Framework.dll\" to another or new assembly or some customer might decide to use our namespace when applying copy/paste task development.\r\n\r\nI prefer to keep as is.",
              "createdAt": "2022-04-28T18:18:40Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this really the only source of an ITaskItem? It's public, so I imagine someone has probably extended it at this point?",
              "createdAt": "2022-04-28T17:59:23Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n+                        {\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I am not sure if I follow. What is the concern in particular?\r\n`ITaskItem` is interface and we own it, so it is under our control if its definition will always be inside Framework assembly - unless we chose otherwise.\r\n\r\n",
              "createdAt": "2022-04-28T18:22:27Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n+                        {\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I'm wondering about `MyCustomTaskItem : ITaskItem`. MyCustomTaskItem is defined in MyCustomAssembly, but I think it's a valid task input, right?",
              "createdAt": "2022-04-28T19:25:07Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n+                        {\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It is sorta-kinda-just-barely possible to pass a custom `ITaskItem` back from a task and thread it through to another one, but I don't think that's relevant here, because this is about specifying the input types to a code task. I don't think it's legal to restrict an input property to `MyCustomTaskItem`, because MSBuild itself can't synthesize one. If you did have such a custom thing, you must either fully qualify the type name (so the first clause here would work) or have already made it available (so the first clause would work).",
              "createdAt": "2022-04-28T19:31:18Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))\n                         {\n-                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);\n+                            // This is workaround for internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1448821\n+                            // Visual Studio can load different version of Microsoft.Build.Framework.dll and non fully classified type could be resolved from it \n+                            // which cause InvalidProjectFileException with \"UnsupportedTaskParameterTypeError\" message.\n+                            // Another way to address this is to load types from compiled assembly - that would be more robust solution but also much more complex and risky code changes.\n+                            paramType = Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */) ??\n+                                        Type.GetType(expandedType);\n+                        }\n+                        else\n+                        {\n+                            paramType = Type.GetType(expandedType) ??\n+                                        Type.GetType(expandedType + \",\" + typeof(ITaskItem).GetTypeInfo().Assembly.FullName, false /* don't throw on error */, true /* case-insensitive */);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Understanding check:\r\nOnly M.B.Framework because this can only be parameters to a task, which are essentially basic types + ITaskItems, right?",
              "createdAt": "2022-04-28T18:00:03Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This check is addressing only particular bug, as commented above. However, we believe the probability that other Types from another assembly will hit the same problem is negligible. ",
              "createdAt": "2022-04-28T18:27:35Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1666,34 +1666,41 @@ internal bool TaskBodyEvaluated\n                         // Cannot have a null or empty name for the type after expansion.\n                         ProjectErrorUtilities.VerifyThrowInvalidProject\n                         (\n-                        !String.IsNullOrEmpty(expandedType),\n-                        parameter.ParameterTypeLocation,\n-                        \"InvalidEvaluatedAttributeValue\",\n-                        expandedType,\n-                        parameter.ParameterType,\n-                        XMakeAttributes.parameterType,\n-                        XMakeElements.usingTaskParameter\n+                            !String.IsNullOrEmpty(expandedType),\n+                            parameter.ParameterTypeLocation,\n+                            \"InvalidEvaluatedAttributeValue\",\n+                            expandedType,\n+                            parameter.ParameterType,\n+                            XMakeAttributes.parameterType,\n+                            XMakeElements.usingTaskParameter\n                         );\n \n-                        // Try and get the type directly \n-                        Type paramType = Type.GetType(expandedType);\n-\n-                        // The type could not be got directly try and see if the type can be found by appending the FrameworkAssemblyName to it.\n-                        if (paramType == null)\n+                        Type paramType;\n+                        if (expandedType.StartsWith(\"Microsoft.Build.Framework.\", StringComparison.OrdinalIgnoreCase) && !expandedType.Contains(\",\"))",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}