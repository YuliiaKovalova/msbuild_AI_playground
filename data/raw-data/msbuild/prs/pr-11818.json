{
  "number": 11818,
  "title": "Nullable annotate ResourceUtilities",
  "body": "And a few other things that fell out while I was doing so.\n",
  "state": "MERGED",
  "createdAt": "2025-05-09T20:10:33Z",
  "updatedAt": "2025-05-13T07:59:46Z",
  "closedAt": "2025-05-13T07:59:45Z",
  "mergedAt": "2025-05-13T07:59:45Z",
  "additions": 37,
  "deletions": 46,
  "changedFiles": 4,
  "headRefName": "nullable-resourceutils",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a461b6568d7ec66668dd2e45151d2e402cffc3fe",
          "message": "Nullable annotate ResourceUtilities\n\nAnd a few other things that fell out while I was doing so.",
          "committedDate": "2025-05-09T20:10:09Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider explicitly handling the null case for 'state' instead of relying solely on Debug.Assert and the null-forgiving operator, as Debug.Assert may not execute in production builds.\n```suggestion\n            if (state is null)\n            {\n                throw new ArgumentNullException(nameof(state), \"state cannot be null\");\n            }\n\n            errorCode = state[nameof(errorCode)];\n```",
              "createdAt": "2025-05-09T20:10:59Z",
              "path": "src/Framework/LoggerException.cs",
              "diffHunk": "@@ -112,18 +111,20 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont\n             info.AddValue(\"helpKeyword\", helpKeyword);\n         }\n \n-        protected override IDictionary<string, string> FlushCustomState()\n+        protected override IDictionary<string, string?> FlushCustomState()\n         {\n-            return new Dictionary<string, string>()\n+            return new Dictionary<string, string?>()\n             {\n                 { nameof(errorCode), errorCode },\n                 { nameof(helpKeyword), helpKeyword },\n             };\n         }\n \n-        protected override void InitializeCustomState(IDictionary<string, string> state)\n+        protected override void InitializeCustomState(IDictionary<string, string?>? state)\n         {\n-            errorCode = state[nameof(errorCode)];\n+            Debug.Assert(state is not null, \"state cannot be null\");\n+\n+            errorCode =  state![nameof(errorCode)];",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "This is safer than it was before since it adds the assert; I don't see a reason to slow things down at (release-mode) runtime.",
              "createdAt": "2025-05-12T16:16:38Z",
              "path": "src/Framework/LoggerException.cs",
              "diffHunk": "@@ -112,18 +111,20 @@ public override void GetObjectData(SerializationInfo info, StreamingContext cont\n             info.AddValue(\"helpKeyword\", helpKeyword);\n         }\n \n-        protected override IDictionary<string, string> FlushCustomState()\n+        protected override IDictionary<string, string?> FlushCustomState()\n         {\n-            return new Dictionary<string, string>()\n+            return new Dictionary<string, string?>()\n             {\n                 { nameof(errorCode), errorCode },\n                 { nameof(helpKeyword), helpKeyword },\n             };\n         }\n \n-        protected override void InitializeCustomState(IDictionary<string, string> state)\n+        protected override void InitializeCustomState(IDictionary<string, string?>? state)\n         {\n-            errorCode = state[nameof(errorCode)];\n+            Debug.Assert(state is not null, \"state cannot be null\");\n+\n+            errorCode =  state![nameof(errorCode)];",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}