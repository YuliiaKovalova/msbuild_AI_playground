{
  "number": 10018,
  "title": "BuildCheck does not run on restore",
  "body": "Fixes: https://github.com/dotnet/msbuild/issues/9747\r\n\r\n### Context\r\nWe currently run BuildCheck during the restore phase of the build, because of this we end up running BuildCheck twice per project. This PR disables BuildCheck during restore phase.\r\n\r\n### Changes Made\r\nAdded two check for the restore phase on the code.\r\n\r\nThe first one is on the `RequestBuilder`, it reads the global property `IsRestore` and creates a BuildCheck instance as necessary.\r\n\r\nThe second one is within the `BuildCheckConnectorLogger` so we do not start a new BuildCheck run because of received events. In this case I added a ` bool ` to  ` ProjectEvaluationStartedEventArgs` so we can have access to the ` IsRestore` variable within the logger. We skip all event messages until we get a ` ProjectFinishedEventArgs`, which signals the end of a build / the restore phase.\r\n\r\n### Tests\r\nAdded extra tests that only runs the restore target.\r\n\r\nReopened from https://github.com/dotnet/msbuild/pull/9907",
  "state": "CLOSED",
  "createdAt": "2024-04-16T16:42:20Z",
  "updatedAt": "2024-08-07T10:10:47Z",
  "closedAt": "2024-07-01T11:06:43Z",
  "mergedAt": null,
  "additions": 117,
  "deletions": 65,
  "changedFiles": 9,
  "headRefName": "9747",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5b33d8fe1855b718eecd899f461e8c09965fe881",
          "message": "First pass on disabling BuildCheck on restore",
          "committedDate": "2024-03-21T14:28:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "916d82279ba8086abd27bd490be27f72bf85ff99",
          "message": "BuildCheck doesn't run on restore",
          "committedDate": "2024-03-22T12:20:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8363efc971758137ce851340785da92d609d4d8d",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-09T18:09:30Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d223bc79dcb033f27e400597af7a890ee727624",
          "message": "Modified how logger registers isRestore",
          "committedDate": "2024-04-15T15:55:54Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f72913e220841a6397d437977f696e834c10aca4",
          "message": "Merge branch 'main' into 9747",
          "committedDate": "2024-04-16T15:36:36Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08b0cd1e7d4173d717205652f8ae1aa6ce80218c",
          "message": "Fixed merge errors",
          "committedDate": "2024-04-16T16:34:01Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "288adff49d18ca8524b410efb81a13da1b7014e5",
          "message": "Clean merge v2",
          "committedDate": "2024-04-16T16:40:14Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e3ea5ba9183e5db6d633a1e7e6fa1dce6387fb2f",
          "message": "Updated existing tests",
          "committedDate": "2024-04-18T16:47:31Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f19e200e8eaa46134986c01258b84eb06e771f01",
          "message": "Added test",
          "committedDate": "2024-04-18T17:17:40Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "15c61c8c343a3c8855257389bdcca3f518b7ed11",
          "message": "Fix failing tests",
          "committedDate": "2024-04-19T14:33:00Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b047dd461bc5497f177359aa635175aeb9460b50",
          "message": "Clean up merge, one again",
          "committedDate": "2024-04-19T14:59:30Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a014fdb0b82cefc55606672d1e8cf71bf001561c",
          "message": "changed case on test file",
          "committedDate": "2024-04-22T14:41:20Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0c84b0485dca2c831ae327bda6a30eb36f45d06",
          "message": "Solved merge conflicts",
          "committedDate": "2024-04-24T14:46:30Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8da2ae4a34206f7e9ab489643efe3621d7ce7132",
          "message": "Merge main",
          "committedDate": "2024-04-25T13:20:56Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f0c8c1964682153fcfa30db428ed616222c0c7d1",
          "message": "Reqorked on ConnectorLogger due changes",
          "committedDate": "2024-04-25T15:08:42Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5626302e27714563aece2819b60e0e1b0e4b0efd",
          "message": "Changed isRestore reset to project evaluation started",
          "committedDate": "2024-04-29T13:38:36Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39cadf82878cfa9896840d59bcdf0bed54df1d91",
          "message": "Added documentation",
          "committedDate": "2024-04-29T14:21:30Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "** UPDATE May/15 **\r\nAs decided collectively on a sync:\r\n * ~~Let's try to see if we can put the GlobalVariables to `BuildStartedEventArgs`~~ no - BuildStartedEventArgs are sent through logging infra way before we detect the fact that restore is requested\r\n * ~~Verify this covers tha case of `msbuild /t:restore`~~ Yes - https://github.com/dotnet/msbuild/pull/9748\r\n * ~~This will probably cause that case of `msbuild /t:restore;build` will completely skip analyzers for the build part - this is accepted and fine. Let's just verify the fact and if true let's put it in the BuildCheck doc, plus let's create item for an analyzer that detects and flags this anti-pattern ('/t:restore;<another-target>')~~  `/t:restore,build` wont be captured: https://github.com/dotnet/msbuild/pull/9748#issuecomment-1948601506 and buildcheck item for that already exists here: https://github.com/dotnet/msbuild/issues/9690\r\n * The way of skipping the analysis during the resote (boolean flag, vs null proxy) can be discussed later on",
        "createdAt": "2024-05-15T15:13:47Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks like a merge issue - I suspect git casing issue on windows (the file was renamed to BootStrapM**s**Build.props - lower 's' - in PR merged to main).\r\n\r\ntl;dr; just delete this",
              "createdAt": "2024-04-17T11:58:53Z",
              "path": "eng/BootStrapMSBuild.props",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to be merge leftover - this was changed on main",
              "createdAt": "2024-04-19T13:09:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -47,16 +58,41 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n                 return;\n             }\n \n+            if (!projectEvaluationStartedEventArgs.IsRestore)\n+            {\n             buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,\n                 projectEvaluationStartedEventArgs.ProjectFile!);\n         }\n-        else if (e is ProjectStartedEventArgs projectStartedEvent)\n+            else\n+            {\n+                isRestore = true;\n+            }\n+        }\n+        else if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)\n         {\n-            buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);\n+            if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(\".metaproj\") ?? false)\n+            {\n+                return;\n+            }\n+\n+            try\n+            {\n+                buildCheckManager.ProcessEvaluationFinishedEventArgs(\n+                    loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),\n+                    projectEvaluationFinishedEventArgs);\n+            }\n+            catch (Exception exception)\n+            {\n+                Debugger.Launch();\n+                Console.WriteLine(exception);\n+                throw;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Merge leftover - can be removed",
              "createdAt": "2024-04-19T13:10:09Z",
              "path": "src/Build/BuildCheck/Logging/BuildAnalysisLoggingContextExtensions.cs",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Merge leftover - can be removed",
              "createdAt": "2024-04-19T13:10:20Z",
              "path": "src/Build/BuildCheck/Logging/IBuildAnalysisLoggingContext.cs",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": ":cough:",
              "createdAt": "2024-04-26T20:29:47Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -485,8 +485,9 @@ MessageImportance MinimumRequiredMessageImportance\n         /// </summary>\n         /// <param name=\"eventContext\">The event context to use for logging</param>\n         /// <param name=\"projectFile\">Project file being built</param>\n+        /// <param name=\"isRestore\">Something for now</param>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is public API so doc comment please.",
              "createdAt": "2024-04-26T20:30:37Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,8 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand, since we have this, why we need the change to the evaluation-started event. Can you go over that again?",
              "createdAt": "2024-04-26T20:37:03Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1105,9 +1105,9 @@ private async Task<BuildResult> BuildProject()\n             ErrorUtilities.VerifyThrow(_targetBuilder != null, \"Target builder is null\");\n \n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n-\n-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;\n-            buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);\n+            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There are two points in BuildCheck that actually run the analyzer. One of them is through the `RequestBuilder` which works on the worker nodes. And through the `BuildCheckConnectorLogger` which runs on the main node. The modification to the evaluation-started event is to get information about the restore phase to the connector logger.",
              "createdAt": "2024-04-29T11:58:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1105,9 +1105,9 @@ private async Task<BuildResult> BuildProject()\n             ErrorUtilities.VerifyThrow(_targetBuilder != null, \"Target builder is null\");\n \n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n-\n-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;\n-            buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);\n+            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't make sense to me, won't there be a bunch of ProjectFinished events that will fire one after the other, causing the first one to unset this and the others to do check stuff?",
              "createdAt": "2024-04-26T22:00:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -60,12 +68,30 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent\n \n     private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n     {\n+        if (eventArgs.IsRestore)\n+        {\n+            isRestore = true;\n+            return;\n+        }\n+\n         if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n             _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);\n         }\n     }\n \n+    private void HandleProjectFinishedEvent(ProjectFinishedEventArgs projectFinishedEventArgs)\n+    {\n+        if (isRestore)\n+        {\n+            isRestore = false;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yeah, I figured that out after I ran this for a bit. I had hoped the event was just fired once. Is there an event that is fired at the end of the restore phase that I can use to to control the flow on the connector logger?",
              "createdAt": "2024-04-29T11:59:16Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -60,12 +68,30 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent\n \n     private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n     {\n+        if (eventArgs.IsRestore)\n+        {\n+            isRestore = true;\n+            return;\n+        }\n+\n         if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n             _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);\n         }\n     }\n \n+    private void HandleProjectFinishedEvent(ProjectFinishedEventArgs projectFinishedEventArgs)\n+    {\n+        if (isRestore)\n+        {\n+            isRestore = false;",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "If we are relying on the restore happen fully before the build - then the first `ProjectEvaluationStartedEventArgs` that is not marked with `IsRestore` denotes the start of the build after the restore.",
              "createdAt": "2024-04-29T13:03:28Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -60,12 +68,30 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent\n \n     private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n     {\n+        if (eventArgs.IsRestore)\n+        {\n+            isRestore = true;\n+            return;\n+        }\n+\n         if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n             _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);\n         }\n     }\n \n+    private void HandleProjectFinishedEvent(ProjectFinishedEventArgs projectFinishedEventArgs)\n+    {\n+        if (isRestore)\n+        {\n+            isRestore = false;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I changed the `isRestore`  reset to happen when we receive another `ProjectEvaluationStartedEventArgs` event.",
              "createdAt": "2024-04-29T19:18:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -60,12 +68,30 @@ private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEvent\n \n     private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n     {\n+        if (eventArgs.IsRestore)\n+        {\n+            isRestore = true;\n+            return;\n+        }\n+\n         if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n             _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);\n         }\n     }\n \n+    private void HandleProjectFinishedEvent(ProjectFinishedEventArgs projectFinishedEventArgs)\n+    {\n+        if (isRestore)\n+        {\n+            isRestore = false;",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Indentation",
              "createdAt": "2024-05-07T06:50:55Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -100,8 +118,22 @@ private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n     {\n         { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs) e) },\n         { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs) e) },\n-        { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n-        { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+        { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => \n+            {\n+                if (!isRestore)\n+                {\n+                _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it's worth considering keeping the property internal for now. It's needed only internally for the infra. For a public API I wonder if exposing all global build properties wouldn't be potentially more useful. But since it's generally hard to remove or update an API once shipped, I think I would vote for not exposing anything publicly for now.",
              "createdAt": "2024-05-07T06:59:44Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Actually - assuming that we also want to use this flag when replaying a binlog, we need to make a public surface change anyway. In other words, the new flag should likely be serialized. cc @JanKrivanek to confirm.",
              "createdAt": "2024-05-13T08:23:15Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "That's correct.\r\nBuildEventArgsWritter (and BuildEventArgsReader) need to be adjusted accordingly, plus the BinLogger version needs to be incremented https://github.com/dotnet/msbuild/blob/a8e224f80e753c4c52b6cc8a3a62c11780aff6d6/src/Build/Logging/BinaryLogger/BinaryLogger.cs#L81.\r\nThen we'll need to copy the identical change to the https://github.com/KirillOsenkov/MSBuildStructuredLog/blob/main/src/StructuredLogger/BinaryLogger/BuildEventArgsReader.cs (and preferrably BuildEventArgsWritter as well) - so that viewer is fine with the change (it'd grace handle skip the extra field, but would report it as unknown change).\r\n\r\n\r\nThe analogous change seem to have been forgotten for tracing: https://github.com/dotnet/msbuild/pull/10016#discussion_r1585521801, so alternatively we can have bothe of those changes be reflected in a single PR with single BinaryLogger version bump.\r\n\r\n\r\n",
              "createdAt": "2024-05-13T12:55:09Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "FYI @KirillOsenkov (just a heads up that same small changes will be comming. We should handle them proactively ourselves)",
              "createdAt": "2024-05-13T12:59:07Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Perhaps @JanKrivanek we should have a wiki page somewhere with a walkthrough of how to do BinaryLogger related changes? Including the viewer PR, version increments etc. Feel free to add to the wiki on the viewer repo or here, wherever it makes more sense for the team.",
              "createdAt": "2024-05-13T16:48:35Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Good idea - I'll find a time to do this",
              "createdAt": "2024-05-16T16:46:22Z",
              "path": "src/Framework/ProjectEvaluationStartedEventArgs.cs",
              "diffHunk": "@@ -30,5 +30,10 @@ public ProjectEvaluationStartedEventArgs(string? message, params object[]? messa\n         /// Gets or sets the full path of the project that started evaluation.\n         /// </summary>\n         public string? ProjectFile { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets is the project is currently on restore phase.\n+        /// </summary>\n+        public bool IsRestore { get; internal set; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We currently set the property only to `true` but it's not unconceivable that at some point someone would want to set it to `false` to mean \"we're not restoring\". For future proofing, would you consider parsing the value instead of just checking that the prop is defined?",
              "createdAt": "2024-05-07T07:09:02Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -626,7 +626,7 @@ private void Evaluate()\n                     }\n                 }\n \n-                _evaluationLoggingContext.LogProjectEvaluationStarted();\n+                _evaluationLoggingContext.LogProjectEvaluationStarted(_data.GlobalPropertiesDictionary[MSBuildConstants.MSBuildIsRestoring] is not null); ;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}