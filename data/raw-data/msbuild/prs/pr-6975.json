{
  "number": 6975,
  "title": "Spurious Windows test failure in FindOnPathSucceeds",
  "body": "Fixes #6869\r\n\r\n### Context\r\n\r\n`cmd.exe` full path retrieval from PATH environment variable and comparison in unit test was case sensitive.\r\n\r\n### Changes Made\r\n\r\nConverted `cmd.exe` full path to lowercase to repair case sensitivity for flaky unit test fact `FindOnPathSucceeds()` at `ToolTask_Tests.cs`\r\n\r\n### Testing\r\n\r\nDebugging, unit test run and code compiling.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-10-20T18:41:32Z",
  "updatedAt": "2021-10-21T13:07:19Z",
  "closedAt": "2021-10-21T13:07:19Z",
  "mergedAt": "2021-10-21T13:07:19Z",
  "additions": 4,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "bug/gh-6869",
  "isDraft": false,
  "author": {
    "login": "Adityanr"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "01eda9c5bdd2e6ded4f7aa00a81533df575625e3",
          "message": "Convert path to lowercase to repair flaky unit test fact FindOnPathSucceeds() at ToolTask_Tests.cs",
          "committedDate": "2021-10-20T18:37:35Z",
          "author": {
            "name": "Adityanr",
            "email": "48587119+Adityanr@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a35df793e6afdd5e585f7a987e57aeb155fa569b",
          "message": "toLower() to toUpperInvariant() fix",
          "committedDate": "2021-10-20T19:55:43Z",
          "author": {
            "name": "Adityanr",
            "email": "48587119+Adityanr@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f76629f5b4f892e9b69fa1e58825e238d083c892",
          "message": "pass linux and macos unit tests",
          "committedDate": "2021-10-20T20:19:16Z",
          "author": {
            "name": "Adityanr",
            "email": "48587119+Adityanr@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e2f62902658162f982cd7fba83325b11094f038",
          "message": "code refactored",
          "committedDate": "2021-10-20T21:06:42Z",
          "author": {
            "name": "Adityanr",
            "email": "48587119+Adityanr@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "comments resolved and tested locally. @rainersigwald ",
        "createdAt": "2021-10-20T19:56:21Z",
        "author": {
          "login": "Adityanr"
        }
      },
      {
        "body": "Hi. I added one small change as well, for linux and macOS unit tests to pass. Can you please approve that as well for CI if possible? @rainersigwald ",
        "createdAt": "2021-10-20T20:21:33Z",
        "author": {
          "login": "Adityanr"
        }
      },
      {
        "body": "> Shouldly supports case-insensitive comparison so I think this could also be:\r\n> \r\n> ```cs\r\n> cmdPath.ShouldBe(expectedCmdPath, Case.Insensitive);\r\n> ```\r\n> \r\n> in the Windows branch (with `expectedCmdPath` being the one path on Windows). Looks great with `ToUpperInvariant()` as well, thank you!\r\n\r\noh..thats actually much better...i'll watch out for that..thanks!",
        "createdAt": "2021-10-21T13:03:46Z",
        "author": {
          "login": "Adityanr"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is almost certainly fine for this case, but you should generally prefer to [normalize to uppercase][1] in cases where you can't use the [correct solution][2], which is \"use a case-insensitive comparer\". `Shouldly` doesn't offer a bring-your-own-comparer `ShouldBeOneOf` so I think this would be best as\r\n\r\n```suggestion\r\n                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System).ToUpperInvariant(), \"cmd.exe\") };\r\n```\r\n\r\n[1]: https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1308?view=vs-2019&redirectedfrom=MSDN&viewFallbackFrom=vs-2015\r\n[2]: https://github.com/dotnet/csharplang/issues/1321#issuecomment-366350143",
              "createdAt": "2021-10-20T19:30:05Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,7 +683,7 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System).ToLower(), \"cmd.exe\") };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "cool!...i'll commit the change then.",
              "createdAt": "2021-10-20T19:44:02Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,7 +683,7 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System).ToLower(), \"cmd.exe\") };",
              "author": {
                "login": "Adityanr"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The *nix changes made me realize that we should probably do the normalization only on Windows, so something like:\r\n\r\n```suggestion\r\n            string cmdPath = ToolTask.FindOnPath(shellName).ToUpperInvariant();\r\n            string normalizedCmdPath = NativeMethodsShared.IsWindows ? cmdPath.ToUpperInvariant() : cmdPath;\r\n\r\n            normalizedCmdPath.ShouldBeOneOf(expectedCmdPath);\r\n```\r\n\r\nSeem reasonable?",
              "createdAt": "2021-10-20T20:51:22Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,16 +683,16 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\").ToUpperInvariant() };\n                 shellName = \"cmd.exe\";\n             }\n             else\n             {\n-                expectedCmdPath = new[] { \"/bin/sh\", \"/usr/bin/sh\" };\n+                expectedCmdPath = new[] { \"/bin/sh\".ToUpperInvariant(), \"/usr/bin/sh\".ToUpperInvariant() };\n                 shellName = \"sh\";\n             }\n \n-            string cmdPath = ToolTask.FindOnPath(shellName);\n+            string cmdPath = ToolTask.FindOnPath(shellName).ToUpperInvariant();\n \n             cmdPath.ShouldBeOneOf(expectedCmdPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "will it be better if `cmdPath ` is declared outside and then initialised within the if condition then, just like `expectedCmdPath` ? @rainersigwald ",
              "createdAt": "2021-10-20T20:58:09Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,16 +683,16 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\").ToUpperInvariant() };\n                 shellName = \"cmd.exe\";\n             }\n             else\n             {\n-                expectedCmdPath = new[] { \"/bin/sh\", \"/usr/bin/sh\" };\n+                expectedCmdPath = new[] { \"/bin/sh\".ToUpperInvariant(), \"/usr/bin/sh\".ToUpperInvariant() };\n                 shellName = \"sh\";\n             }\n \n-            string cmdPath = ToolTask.FindOnPath(shellName);\n+            string cmdPath = ToolTask.FindOnPath(shellName).ToUpperInvariant();\n \n             cmdPath.ShouldBeOneOf(expectedCmdPath);",
              "author": {
                "login": "Adityanr"
              }
            },
            {
              "body": "oh yeah, that'd totally make sense",
              "createdAt": "2021-10-20T21:02:21Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,16 +683,16 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\").ToUpperInvariant() };\n                 shellName = \"cmd.exe\";\n             }\n             else\n             {\n-                expectedCmdPath = new[] { \"/bin/sh\", \"/usr/bin/sh\" };\n+                expectedCmdPath = new[] { \"/bin/sh\".ToUpperInvariant(), \"/usr/bin/sh\".ToUpperInvariant() };\n                 shellName = \"sh\";\n             }\n \n-            string cmdPath = ToolTask.FindOnPath(shellName);\n+            string cmdPath = ToolTask.FindOnPath(shellName).ToUpperInvariant();\n \n             cmdPath.ShouldBeOneOf(expectedCmdPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "cool, i'll commit the change then.",
              "createdAt": "2021-10-20T21:03:10Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -683,16 +683,16 @@ public void FindOnPathSucceeds()\n             string shellName;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\") };\n+                expectedCmdPath = new[] { Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"cmd.exe\").ToUpperInvariant() };\n                 shellName = \"cmd.exe\";\n             }\n             else\n             {\n-                expectedCmdPath = new[] { \"/bin/sh\", \"/usr/bin/sh\" };\n+                expectedCmdPath = new[] { \"/bin/sh\".ToUpperInvariant(), \"/usr/bin/sh\".ToUpperInvariant() };\n                 shellName = \"sh\";\n             }\n \n-            string cmdPath = ToolTask.FindOnPath(shellName);\n+            string cmdPath = ToolTask.FindOnPath(shellName).ToUpperInvariant();\n \n             cmdPath.ShouldBeOneOf(expectedCmdPath);",
              "author": {
                "login": "Adityanr"
              }
            }
          ]
        }
      }
    ]
  }
}