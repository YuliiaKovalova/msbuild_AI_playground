{
  "number": 10087,
  "title": "Fix AfterTarget parent",
  "body": "Fixes https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/762\r\n\r\n### Context\r\nOn a specific edge case, where a target is an after target of the build's entry target, the parent target does not show.\r\n\r\nUsing the example from the issue\r\n![image](https://github.com/dotnet/msbuild/assets/10743736/47a32680-483f-4a4a-bff6-118b601929a9)\r\n\r\nTarget1 is the entry target for the build.\r\nTarget4 is an after target from target1.\r\nSince target1 is the entry point, the parent of target4 is registered as null.\r\n\r\n### Changes Made\r\nWhen pushing after targets to the stack, we currently register the parent of the parent. The change will register just the parent.\r\n\r\n### Notes\r\nIn the code there is a comment that explicitly states that we are pushing the parent of the parent. We are not sure of the historical reason for this, but it does not make a lot of sense. This PR is to run all the tests and just check if things don't break.",
  "state": "CLOSED",
  "createdAt": "2024-04-29T21:14:11Z",
  "updatedAt": "2024-08-07T10:10:45Z",
  "closedAt": "2024-05-15T14:31:20Z",
  "mergedAt": null,
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "afterTargets",
  "isDraft": true,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d107f7b4c04c632f5c36a22b35801c92af188417",
          "message": "Changed after target parent from the parent of the parent",
          "committedDate": "2024-04-29T21:09:46Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The reasoning and fix looks good to me.\r\nThere are some failing tests related to the AfteTargets - let's see if we can nail those as well",
        "createdAt": "2024-04-30T12:45:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I think we need to (unfortunately) be extremely careful here as well. ParentEntry is not only used to log the parent target, but also to indicate which parent is waiting for our target to complete, before it proceeds. It encodes a causality DAG, so if we change the ParentEntry some targets might suddenly proceed when they should wait, or other such horrors.\r\n\r\nSee the references to ParentEntry:\r\nhttps://ref12.io/?rightProjectId=Microsoft.Build&leftSymbolId=d3k4tcrf1uhe&file=BackEnd%5cComponents%5cRequestBuilder%5cTargetEntry.cs&line=289&leftMode=references&rightMode=file\r\n\r\nI'd say to be safe we should separate the concept of \"which target is waiting on us to complete\" vs. \"which target caused us to build\".\r\n\r\nAlso note that this circularity check here also relies on the parentTargetEntry:\r\nhttps://github.com/dotnet/msbuild/blob/f7f0b1924904ec7f2792c0a7805a4d0e91ac8955/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L712-L715",
        "createdAt": "2024-05-04T02:14:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Closing this PR, as this fix is not viable. It changes target build behaviour and creates bugs within the error logging for targets.",
        "createdAt": "2024-05-15T14:34:17Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}