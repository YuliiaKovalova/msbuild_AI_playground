{
  "number": 7342,
  "title": "Fix dotnet/msbuild#5884: Add EnsureSingleQuoted and EnsureDoubleQuoted",
  "body": "Fixes #5884\r\n\r\n### Context\r\nChanges to FileUtilies to add methods to support quoting.\r\n\r\n### Changes Made\r\nAdd `EnsureSingleQuoted` and `EnsureDoubleQuoted` methods to FileUtilies. (`EnsureSingleQuoted` and `EnsureDoubleQuoted` are implemented by a common `EnsureQuoted` method.) Add unit tests for both methods.\r\n\r\n### Testing\r\nRan `./build.sh --test`\r\n\r\n### Notes\r\nAt the time of creating this pull request there is an ongoing discussion in the issue about the appropriate behavior for these methods. My hope is that working code will add constructively to the discussion.",
  "state": "MERGED",
  "createdAt": "2022-01-27T14:23:24Z",
  "updatedAt": "2022-02-15T18:06:00Z",
  "closedAt": "2022-02-15T17:55:51Z",
  "mergedAt": "2022-02-15T17:55:50Z",
  "additions": 93,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "EnsureSingleQuoted",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "315af8f451f3631f655e0fd4286dcdfdf0b93efb",
          "message": "Fix dotnet/msbuild#5884: Add EnsureSingleQuoted and EnsureDoubleQuoted",
          "committedDate": "2022-01-27T13:57:23Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9123e2c43fc30a311ee4d4cfb0573919acc3f908",
          "message": "Merge branch 'dotnet:main' into EnsureSingleQuoted",
          "committedDate": "2022-01-27T17:49:10Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6ce8aa6524e0dd0005a8dbcbad7c41b2916da8f",
          "message": "Fix dotnet/msbuild#5884: change method names",
          "committedDate": "2022-01-27T20:23:36Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7bcc29cb199ddbe00038853fcb4bcad46ea0ebd6",
          "message": "Fix dotnet/msbuild#5884: Update EnsureQuotes method\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-01-27T20:57:36Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "78ec42722b57635fa4845816caa6c8e75d592246",
          "message": "Fix dotnet/msbuild#5884: add usage of EnsureDoubleQuotes",
          "committedDate": "2022-01-28T00:51:12Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d82adfb6b60988236af26dafe75183d5ab9df572",
          "message": "Fix dotnet/msbuild#5884: update doc comments",
          "committedDate": "2022-01-28T02:43:09Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff5205ba91ec7b9a249eadce6f3c251b015c76aa",
          "message": "Merge branch 'dotnet:main' into EnsureSingleQuoted",
          "committedDate": "2022-01-28T13:15:41Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c3ba44e3eba9a65bfca556b97ba6e0413aad024",
          "message": "Merge branch 'dotnet:main' into EnsureSingleQuoted",
          "committedDate": "2022-01-31T15:18:06Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a781099e3766c3c30f4b3336e5b126221c33d66d",
          "message": "Fix dotnet/msbuild#5884: remove extra parentheses",
          "committedDate": "2022-01-31T15:24:40Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1fe8f7e624372fda32843b59632ac6ba76f4fc2d",
          "message": "Merge branch 'dotnet:main' into EnsureSingleQuoted",
          "committedDate": "2022-02-01T15:53:03Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f17e6fe506b86ef6a9f91da09aba434b889e654e",
          "message": "Merge branch 'dotnet:main' into EnsureSingleQuoted",
          "committedDate": "2022-02-05T18:53:14Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "https://github.com/dotnet/msbuild/blob/main/src/Utilities/CommandLineBuilder.cs#L289 looks to be a worthwhile place to use this new method. If only to have at least one non-test path that runs this logic. cc @jrdodds",
        "createdAt": "2022-01-31T16:51:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks @jrdodds!",
        "createdAt": "2022-02-15T17:56:00Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                else if (path.Length == 1 || (path[0] != targetQuote || path[path.Length - 1] != targetQuote))\r\n```\r\n\r\nWe'd already verified that path.Length was > 1, and this makes it a bit cleaner",
              "createdAt": "2022-01-27T19:24:46Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)\n+        {\n+            return EnsureQuoted(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuoted(string path)\n+        {\n+            return EnsureQuoted(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes shoud be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuoted(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path.Length > 1 && (path[0] != targetQuote || path[path.Length - 1] != targetQuote)))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@Forgind Alternatively I could remove the enclosing `if (!string.IsNullOrEmpty(path))` test.",
              "createdAt": "2022-01-27T19:41:20Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)\n+        {\n+            return EnsureQuoted(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuoted(string path)\n+        {\n+            return EnsureQuoted(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes shoud be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuoted(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path.Length > 1 && (path[0] != targetQuote || path[path.Length - 1] != targetQuote)))",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "That'd work for me, but make sure you handle null correctly.",
              "createdAt": "2022-01-27T19:47:37Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)\n+        {\n+            return EnsureQuoted(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuoted(string path)\n+        {\n+            return EnsureQuoted(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes shoud be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuoted(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path.Length > 1 && (path[0] != targetQuote || path[path.Length - 1] != targetQuote)))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "oh - right. Was thinking of the empty string case.",
              "createdAt": "2022-01-27T20:53:13Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)\n+        {\n+            return EnsureQuoted(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuoted(string path)\n+        {\n+            return EnsureQuoted(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes shoud be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuoted(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path.Length > 1 && (path[0] != targetQuote || path[path.Length - 1] != targetQuote)))",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know there was some confusion around names for this. I'll throw out EnsureSingleQuotes/EnsureDoubleQuotes but won't block on it.",
              "createdAt": "2022-01-27T19:25:33Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'll make the name change. `Quotes` is more consistent with the other methods than 'Quoted'. Thanks",
              "createdAt": "2022-01-27T19:44:17Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuoted(string path)",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We can avoid this char if we use `MSBuildConstants.SingleQuoteChar[0]`. Though it apparently doesn't have a `doubleQuoteChar`? We can add one in `Shared/Constants.cs` in this PR and use it in Evaluator since it creates a  `private static readonly char[] s_doubleQuoteChar = { '\"' };`\r\n\r\nIf you'd rather avoid that, I can create an `up-for-grabs` issue for it.",
              "createdAt": "2022-01-27T21:44:58Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "The fields in `MSBuildConstants` are char arrays. The comment says `// One-time allocations to avoid implicit allocations for Split(), Trim().` which makes sense. There is a memory and performance cost to recreating a char array on every use. But that isn't true for a char literal. I don't think that it makes sense to make a change to use `MSBuildConstants.SingleQuoteChar[0]`. Additionally there are char literals all over the codebase.",
              "createdAt": "2022-01-28T00:20:20Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Yes, the code in `ExecMSBuild`:\r\n```\r\n    msbuildParameters = \"\\\"\" + pathToMsBuildExe + \"\\\"\" + \" \" + msbuildParameters;\r\n```\r\ncould be changed to:\r\n```\r\n    msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + \" \" + msbuildParameters;\r\n```\r\n\r\nI'l add that change.",
              "createdAt": "2022-01-28T00:31:22Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Done",
              "createdAt": "2022-01-28T00:53:21Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Avoid param and returns tags with no content?",
              "createdAt": "2022-01-28T02:08:56Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "I'll make a change to add content to the tags. Thanks for catching that.",
              "createdAt": "2022-01-28T02:29:59Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Done",
              "createdAt": "2022-01-28T02:43:42Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This check could perhaps be omitted.",
              "createdAt": "2022-01-28T02:10:12Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "The `string.IsNullOrEmpty` test? This check can't be omitted without rewriting the enclosed `if` statements. Both `if` statements depend on the null check and the second `if` statement depends on the empty check.",
              "createdAt": "2022-01-28T02:36:24Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <returns></returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\"></param>\n+        /// <param name=\"isSingleQuote\">indicates if single or double quotes should be used</param>\n+        /// <returns></returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can drop one set of parentheses.",
              "createdAt": "2022-01-31T14:50:34Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <param name=\"isSingleQuote\">Indicates if single or double quotes should be used</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path[0] != targetQuote || path[path.Length - 1] != targetQuote))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Made the change. Thanks",
              "createdAt": "2022-01-31T15:25:22Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -243,6 +243,58 @@ internal static string EnsureNoTrailingSlash(string path)\n             return path;\n         }\n \n+        /// <summary>\n+        /// Ensures the path is enclosed within single quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureSingleQuotes(string path)\n+        {\n+            return EnsureQuotes(path);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within double quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureDoubleQuotes(string path)\n+        {\n+            return EnsureQuotes(path, isSingleQuote: false);\n+        }\n+\n+        /// <summary>\n+        /// Ensures the path is enclosed within quotes.\n+        /// </summary>\n+        /// <param name=\"path\">The path to check.</param>\n+        /// <param name=\"isSingleQuote\">Indicates if single or double quotes should be used</param>\n+        /// <returns>The path enclosed by quotes.</returns>\n+        internal static string EnsureQuotes(string path, bool isSingleQuote = true)\n+        {\n+            path = FixFilePath(path);\n+\n+            const char singleQuote = '\\'';\n+            const char doubleQuote = '\\\"';\n+            var targetQuote = isSingleQuote ? singleQuote : doubleQuote;\n+            var convertQuote = isSingleQuote ? doubleQuote : singleQuote;\n+\n+            if (!string.IsNullOrEmpty(path))\n+            {\n+                // Special case: convert the quotes.\n+                if (path.Length > 1 && path[0] == convertQuote && path[path.Length - 1] == convertQuote)\n+                {\n+                    path = $\"{targetQuote}{path.Substring(1, path.Length - 2)}{targetQuote}\";\n+                }\n+                // Enclose the path in a set of the 'target' quote unless the string is already quoted with the 'target' quotes.\n+                else if (path.Length == 1 || (path[0] != targetQuote || path[path.Length - 1] != targetQuote))",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}