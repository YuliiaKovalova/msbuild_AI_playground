{
  "number": 8110,
  "title": "Fix CodeQL bug about a zip slip",
  "body": "Fixes [AB#1645160](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1645160)\r\n\r\n### Context\r\nWe should check whether a zip archive is attempting to unzip into a parent directory, as that would be a security risk.\r\n\r\n### Changes Made\r\nFail if the user is attempting to unzip to a location the user has not given them permission to unzip to.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-11-01T21:08:26Z",
  "updatedAt": "2022-11-04T18:46:59Z",
  "closedAt": "2022-11-04T18:46:58Z",
  "mergedAt": "2022-11-04T18:46:58Z",
  "additions": 74,
  "deletions": 1,
  "changedFiles": 15,
  "headRefName": "fix-unzip",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d979ef9de63ee90472d6a7537b9e4a837be2d6d2",
          "message": "Fix CodeQL bug",
          "committedDate": "2022-11-01T21:02:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74495beecdb9141476f4ba1f791d1135ab976b2c",
          "message": "Remove slash",
          "committedDate": "2022-11-01T21:37:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a56b89d849624b0c8c0d1d1204a77766b99c2c34",
          "message": "Move line outside loop",
          "committedDate": "2022-11-02T18:25:11Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you pull this to outside the loop?",
              "createdAt": "2022-11-01T21:10:48Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -164,7 +164,11 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n                     continue;\n                 }\n \n-                FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationPath = Path.GetFullPath(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory.FullName + Path.DirectorySeparatorChar);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The documentation seemed to want each ZipArchiveEntry checked individually, presumably because even if one entry is at a good path, the next could be at `..\\..\\..\\...`, so I don't think so.",
              "createdAt": "2022-11-01T21:36:25Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -164,7 +164,11 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n                     continue;\n                 }\n \n-                FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationPath = Path.GetFullPath(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory.FullName + Path.DirectorySeparatorChar);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`fullDestinationDirectoryPath` will be identical for each pass through the loop, so I'd rather compute it only once. `fullDestinationPath` will vary and must be computed for each file.",
              "createdAt": "2022-11-02T12:53:58Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -164,7 +164,11 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n                     continue;\n                 }\n \n-                FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationPath = Path.GetFullPath(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory.FullName + Path.DirectorySeparatorChar);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, yeah, good point. I can do that.",
              "createdAt": "2022-11-02T15:17:14Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -164,7 +164,11 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector\n                     continue;\n                 }\n \n-                FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationPath = Path.GetFullPath(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));\n+                string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory.FullName + Path.DirectorySeparatorChar);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n  <data name=\"Unzip.ZipSlipExploit\">\r\n```",
              "createdAt": "2022-11-01T21:10:58Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -2832,6 +2832,9 @@\n   <data name=\"Unzip.DidNotUnzipBecauseOfFilter\">\n     <value>Did not unzip file \"{0}\" because it didn't match the include filter or because it matched the exclude filter.</value>\n   </data>\n+  <data name=\"Unzip.ZipSlipExploit\">\\",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "\ud83e\udd26\u200d\u2642\ufe0f",
              "createdAt": "2022-11-01T21:34:13Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -2832,6 +2832,9 @@\n   <data name=\"Unzip.DidNotUnzipBecauseOfFilter\">\n     <value>Did not unzip file \"{0}\" because it didn't match the include filter or because it matched the exclude filter.</value>\n   </data>\n+  <data name=\"Unzip.ZipSlipExploit\">\\",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Check that FullName doesn't already end in DirectorySeperatorChar, having two runs the risk of upsetting some file systems",
              "createdAt": "2022-11-04T18:23:43Z",
              "path": "src/Tasks/Unzip.cs",
              "diffHunk": "@@ -156,6 +156,8 @@ public override bool Execute()\n         /// <param name=\"destinationDirectory\">The <see cref=\"DirectoryInfo\"/> to extract files to.</param>\n         private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirectory)\n         {\n+            string fullDestinationDirectoryPath = Path.GetFullPath(destinationDirectory.FullName + Path.DirectorySeparatorChar);",
              "author": {
                "login": "blowdart"
              }
            }
          ]
        }
      }
    ]
  }
}