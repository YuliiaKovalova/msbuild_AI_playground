{
  "number": 8308,
  "title": "Sort paths descendingly by depth",
  "body": "Fixes [#8288](https://github.com/dotnet/msbuild/issues/8228)\r\n\r\n### Context\r\nThere's a bug in the cleanup logic here. Specifically, it creates the source and dest files, and at the end of the test, it calls Helpers.DeleteFiles(sourceFile, destFile); That method loops through each file and deletes it if it exists, then deletes the directory containing it if it's empty...but when we delete the source file, the directory isn't empty; it has the destination folder/file. When we delete the destination file, its folder just contains the destination file, so we delete that. Afterwards, the source folder never gets deleted. That means we can't write to it. Mentioned in https://github.com/dotnet/msbuild/pull/8211#discussion_r1040269656\r\n\r\n### Changes Made\r\nSort paths descendingly by depth, it will delete sub folder/file at first.\r\n\r\nTest locally",
  "state": "MERGED",
  "createdAt": "2023-01-13T08:20:44Z",
  "updatedAt": "2023-01-19T08:01:09Z",
  "closedAt": "2023-01-19T08:01:07Z",
  "mergedAt": "2023-01-19T08:01:07Z",
  "additions": 5,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "jennybai/issue8228",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "831ea68729f4c3f23ad3eddf574669cedf8220cd",
          "message": "Sort paths descendingly by depth",
          "committedDate": "2023-01-13T08:16:28Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "084c10a0be904b945356858fd2d439162aabbf4c",
          "message": "Update comment",
          "committedDate": "2023-01-13T12:38:59Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "012739062909d27ee9eed124ead7d46d00d94784",
          "message": "Refector the sort function",
          "committedDate": "2023-01-16T09:59:19Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00fc1c5a41a6b1a4732d7a9b5c24dee31f8b009f",
          "message": "Merge branch 'jennybai/issue8228' of https://github.com/dotnet/msbuild into jennybai/issue8228",
          "committedDate": "2023-01-16T10:04:32Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f137e0a06207ded4050034a858ae3de908459fd",
          "message": "Add getfullpath in case of the relative and absolute paths are mixed together",
          "committedDate": "2023-01-18T06:19:59Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nitpick: the `NormalizeForPathComparison` is probably needed only for trimming the trailing slashes (as it's unlikely there will be mismatched slashes here - as rest of the function would not work either), and triming of trailing slash would not be needed if we'd ignore empty results\r\n\r\n```suggestion\r\n                                       x.Split(Path.DirectorySeparatorChar, StringSplitOptions.RemoveEmptyEntries).Length);\r\n```\r\n\r\nAlternatively we can just sort by the path length - though the depth of nessting might vary here, it will still ensure we are deleting content of subdir before moving to parent dir (as the subdir substring will always be of a same length).",
              "createdAt": "2023-01-13T14:21:29Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "On this codepath it doesn't matter, since it's test cleanup, but `string.Split` is very allocatey. Here, to count slashes in the string, the code has to allocate (for each path):\r\n\r\n1. A string for every path element.\r\n2. An array to hold pointers to those strings\r\n\r\nAnd all that becomes garbage at the end of the line, since it's no longer reachable after `Length` returns.\r\n\r\nAgain, this would be important in a hot codepath and isn't very important here: none of the allocated things will be on the large-object heap, so they'll get collected in the next gen0 collection, which is fast. But our codebase does have many areas where this kind of thing matters so it's good to think about.",
              "createdAt": "2023-01-13T14:57:52Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> Alternatively we can just sort by the path length - though the depth of nessting might vary here, it will still ensure we are deleting content of subdir before moving to parent dir (as the subdir substring will always be of a same length).\r\n\r\n Sorting by the path length. There is one condition that parent file name is much longer than the subfolder and name together.\r\n\r\n> nitpick: the `NormalizeForPathComparison` is probably needed only for trimming the trailing slashes (as it's unlikely there will be mismatched slashes here - as rest of the function would not work either), and triming of trailing slash would not be needed if we'd ignore empty results\r\n\r\nUse this function NormalizeForPathComparison since the ToPlatformSlash() in it.  It will normalize the slashes.  I think \r\n x.ToPlatformSlash().Split(Path.DirectorySeparatorChar,StringSplitOptions.RemoveEmptyEntries).Length);\r\nwill be better.\r\n",
              "createdAt": "2023-01-16T04:43:39Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "> There is one condition that parent file name is much longer than the subfolder and name together.\r\n\r\nRight - but this can only happen for _unrelated_ paths, correct?\r\nE.g. `C:\\loooooooongpath`, `C:\\a\\b\\c.txt`, `C:\\a\\b\\d.txt` - here there is no harm to process the `C:\\loooooooongpath` last. We only need to make sure to process all subpaths for particular path before the path itself (to make sure it's empty) - and that will allways happen, as related paths have common prefix and hence subpaths must be longer then prents (unless we are using soft/hard links - but then all other path comparing approachs are doomed).\r\nOr is there specific scenario where we'll fail to delete something when comparing just based on lengths?",
              "createdAt": "2023-01-16T07:44:52Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yeah. We can sort by file directory length.  I'm thinking the file path including file name.  Have updated.",
              "createdAt": "2023-01-16T10:05:34Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "I was actually thinking about the full path, including the filename, as well\r\n\r\n```\r\nvar pathsSortedByDepth = paths.OrderByDescending(x => x.Length);\r\n```\r\n\r\nIs there a scenario where content of the directory would not be deleted before moving to parent directory (unless relative and absolute paths are mixed together)?",
              "createdAt": "2023-01-16T13:50:01Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> I was actually thinking about the full path, including the filename, as well\r\n\r\nIf including filename\uff0c parent filename length are greater than subfolder name+ filename length.  \r\n\r\n> Is there a scenario where content of the directory would not be deleted before moving to parent directory (unless relative and absolute paths are mixed together)?\r\n\r\nIn case of relative path, we can get full path and count directory length next. Like Path.GetDirectoryName(Path.GetFullPath(x)).length. ",
              "createdAt": "2023-01-17T02:37:38Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -1817,7 +1817,12 @@ private static string[] SplitPathIntoFragments(string path)\n         /// </summary>\n         internal static void DeleteFiles(params string[] paths)\n         {\n-            foreach (string path in paths)\n+            // When we delete the file directory which has the sub folder/file firstly, it will not be delected since not empty.\n+            // So sort paths descendingly by depth, it will delete sub folder/file at first.\n+            var pathsSortedByDepth = paths.OrderByDescending(x =>\n+                                       x.NormalizeForPathComparison().Split(Path.DirectorySeparatorChar).Length);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}