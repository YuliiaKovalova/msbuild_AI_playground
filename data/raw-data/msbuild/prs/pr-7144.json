{
  "number": 7144,
  "title": "Add ProjectImportInstance to ProjectInstance",
  "body": "This is PR for API design discussion.\r\n\r\n### Context\r\n\r\nCurrently, It is not possible with a `ProjectInstance` to infer what were the timestamps of the imports, while the information is known and can be valuable for a build server.\r\n\r\n### Changes Made\r\n\r\n- Added `ProjectImportInstance` that has a `FullPath` to the import file and a `LastWriteTimeWhenRead`\r\n- Added `ProjectInstance.Imports` that return a list of `ProjectImportInstance`\r\n\r\n### Notes\r\n\r\nThis PR is missing:\r\n- Shipped API txt changes (not sure how to make them work)\r\n- Some comments missing\r\n- Tests (best place to add them?)",
  "state": "CLOSED",
  "createdAt": "2021-12-11T16:37:14Z",
  "updatedAt": "2023-09-19T18:06:55Z",
  "closedAt": "2023-09-19T18:06:54Z",
  "mergedAt": null,
  "additions": 70,
  "deletions": 0,
  "changedFiles": 6,
  "headRefName": "add-project-import-instance",
  "isDraft": false,
  "author": {
    "login": "xoofx"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e4cc9778d6cb8aa9473a496d67f1df434cd274b4",
          "message": "Add ProjectImportInstance to ProjectInstance",
          "committedDate": "2021-12-11T16:32:34Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre_mutel@live.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e43cb1c4c674bbfc343b408c4db8e4a6dc3fc93",
          "message": "Add tests and PublicAPI.Shipped.txt",
          "committedDate": "2021-12-13T07:20:44Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre_mutel@live.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e07614b44dea7317a19079d50275cf79ef99b90",
          "message": "Fix API Unshipped",
          "committedDate": "2021-12-14T04:50:52Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre_mutel@live.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26ddd42671f4fd23df2c44d0c03caae607a49048",
          "message": "Fix PublicAPI/netstandard for Microsoft.Build",
          "committedDate": "2021-12-14T17:57:16Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre@unity3d.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> * Shipped API txt changes (not sure how to make them work)\r\n\r\nDid you try just building? I don't know if it works for shipped API txt changes. If not, [here's](https://github.com/dotnet/msbuild/pull/7139/commits/7c0ec511457b47e60451abeb5592650e66a95b60) an example of the changes made, and you can presumably make them manually pretty fast.\r\n\r\n> * Tests (best place to add them?)\r\n\r\nMaybe ProjectInstance_Tests?",
        "createdAt": "2021-12-13T04:06:13Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind i have added the tests and the changes to `PublicAPI.Shipped.txt` but the CI fails on them. If I add them locally also in UnShipped, it will give me a warning locally that API are duplicated. Not sure to follow how does this work?",
        "createdAt": "2021-12-13T07:25:56Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Team triage: Can you clarify how knowing the timestamps for imports helps when building with a build server? How were you planning to call this?\r\n\r\nIf you use the public API surface analyzer, it should fix the API appropriately. It's probably easiest to directly revert the change to the shipped API and use that; otherwise, you can move the changes from Shipped to Unshipped. (Shipped is updated at release time per [this doc](https://github.com/dotnet/msbuild/blob/main/documentation/release.md)).",
        "createdAt": "2021-12-13T16:11:43Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Team triage: Can you clarify how knowing the timestamps for imports helps when building with a build server? How were you planning to call this?\r\n\r\nFor a specific configuration/target, If all imports (including the csproj) are not changed, we can assume many invariants, e.g like project references or that we don't need to run restore (if a previous restore was successful).\r\nWhen instantiating a `ProjectInstance` and using it to freeze this knowledge, we don't know for a `ProjectInstance` which versions for all the targets/props files were actually used to build it.\r\n\r\n> If you use the public API surface analyzer\r\n\r\nOh, so you mean that Unshipped should be updated automatically by the analyzer? So far, I have been filling this info manually... Pretty sure that I tried also to only modify UnShipped and the CI was still complaining on another PR. Will try again.",
        "createdAt": "2021-12-13T20:51:16Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> Oh, so you mean that Unshipped should be updated automatically by the analyzer?\r\n\r\nThe analyzer has a code fix action that should do The Right Thing. If you select \"fix all in solution\" I suspect it'll resolve your problems.\r\n\r\n\r\n\r\n> For a specific configuration/target, If all imports (including the csproj) are not changed, we can assume many invariants, e.g like project references or that we don't need to run restore (if a previous restore was successful).\r\n\r\nUnfortunately I don't think either of these is true. A change in a referenced project can impact both ProjectReference items returned from NuGet assets and the output of NuGet restore in a project without any changes to files imported in the current project.",
        "createdAt": "2021-12-13T21:52:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The analyzer has a code fix action that should do The Right Thing. If you select \"fix all in solution\" I suspect it'll resolve your problems.\r\n\r\noops, gonna try that, thanks! \ud83d\udc4d \r\n\r\n> Unfortunately I don't think either of these is true. A change in a referenced project can impact both ProjectReference items returned from NuGet assets and the output of NuGet restore in a project without any changes to files imported in the current project.\r\n\r\nIndeed a change in a referenced project can impact a referencing project, but a build server has this knowledge of transitive projects as well, exactly like VS is loading one solution and keeps its state in sync with what's happening on the disk.",
        "createdAt": "2021-12-14T04:45:44Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> Pretty sure that I tried also to only modify UnShipped and the CI was still complaining on another PR. Will try again.\r\n\r\nSo my last commit is using the fix with Roslyn and modifies UnShipped API, all new APIs should be part of it, but the CI is still failing for me. Thoughts?",
        "createdAt": "2021-12-14T05:07:52Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> > Pretty sure that I tried also to only modify UnShipped and the CI was still complaining on another PR. Will try again.\r\n> \r\n> So my last commit is using the fix with Roslyn and modifies UnShipped API, all new APIs should be part of it, but the CI is still failing for me. Thoughts?\r\n\r\nIt looks right as far as I can tell. Probably a long shot, but maybe there's a bug with structs? I'm curious whether it would pass if you'd declared a public class ProjectImportInstance.",
        "createdAt": "2021-12-14T17:18:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The problem is that we have two public interfaces: netcore/netstandard and .NET 4.7.2. It looks like the update was applied only to one. There's a tooling problem that VS only applies the fixer to one TF per project, but doing \"fix all in solution\" should work around that. Did you by chance use \"fix all in project\"?",
        "createdAt": "2021-12-14T17:35:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The problem is that we have two public interfaces: netcore/netstandard and .NET 4.7.2. It looks like the update was applied only to one. There's a tooling problem that VS only applies the fixer to one TF per project, but doing \"fix all in solution\" should work around that. Did you by chance use \"fix all in project\"?\r\n\r\nOh... that could explain... actually, the project in VS only has the folder `PublicAPI\\net` and not `PublicAPI\\netstandard`, so the fix was only applied to `net` but not `netstandard`.\r\nHm... so why the folder `PublicAPI\\netstandard` is not included in `Microsoft.Build`? Gonna check...",
        "createdAt": "2021-12-14T17:42:49Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "That's because of dotnet/project-system#935.",
        "createdAt": "2021-12-14T17:52:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That's because of dotnet/project-system#935.\r\n\r\nD'oh, that's exactly this issue. I have added the API manually to `PublicAPI\\netstandard` copied from `PublicAPI\\net`. Hopefully it should fix the issue. I will apply this to my other PRs.",
        "createdAt": "2021-12-14T17:58:27Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "We've let this sit for too long. Closing, since it'll need to be reevaluated in the context of other cache-plugin changes (the newest attempt will I believe cover a superset of the inputs).",
        "createdAt": "2023-09-19T18:06:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}