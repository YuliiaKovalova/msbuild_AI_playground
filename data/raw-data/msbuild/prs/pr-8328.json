{
  "number": 8328,
  "title": "Skip symlink tests when symlinks cannot be created",
  "body": "### Context\r\n\r\nTests currently don't pass on a clean Windows machine in a non-admin command prompt. Even on Win11 with developer mode enabled (and on a Microsoft DevBox VM, no less), the OS refuses to create symlinks unless the process runs elevated.\r\n\r\n### Changes Made\r\n\r\nMade the affected tests detect the ability to create symlinks and skip if the `kernel32!CreateSymbolicLink` call is failing.\r\n\r\n### Testing\r\n\r\nUnit tests in admin and non-admin command prompts.\r\n\r\n### Notes\r\n\r\nAs much as I would like to have maximum possible coverage by running the tests unconditionally, I believe that a good developer experience is more important here. Specifically I do not want to require contributors to run elevated or jump through hoops to make the OS cooperate. This is a niche functionality anyway.",
  "state": "MERGED",
  "createdAt": "2023-01-20T13:16:19Z",
  "updatedAt": "2023-02-12T03:18:18Z",
  "closedAt": "2023-02-12T03:18:18Z",
  "mergedAt": "2023-02-12T03:18:17Z",
  "additions": 66,
  "deletions": 8,
  "changedFiles": 8,
  "headRefName": "green-tests-without-symlinks",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f019c072a087ef3b1c37b9d7820eda2f23bcfe56",
          "message": "Skip symlink tests when symlinks cannot be created",
          "committedDate": "2023-02-08T09:08:18Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d391e1e65f2487bc18124615eb9e6a8e7007c55",
          "message": "PR feedback: Use a custom Fact attribute",
          "committedDate": "2023-02-08T09:11:34Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2bc352155dda07041e392c28faa6bc2ad588f349",
          "message": "Add back deleted line",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "723a4128abf04960f05b0baf624d8899d695b34c",
          "message": "Add RequiresSymbolicLinksFactAttribute.cs",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "727d6bd978e79eea43ed4ac4706d088ffb3866f6",
          "message": "Add comments",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "69063187d4c3674475090b37aacc87847f8ed578",
          "message": "Decorate DoNotFollowRecursiveSymlinks with the new CA as well",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9fc20fef43882be33b11dbf92700a213d64861e7",
          "message": "PR feedback: Better Skip message",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28d03710161284f730d9879ceca953f849526628",
          "message": "Run unconditionally in AzDO CI",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "93788be81a256431b1ea59fbe28bddef391abab4",
          "message": "Rename DumpExceptionToFileShouldWriteInTempPathByDefault -> DumpExceptionToFileShouldWriteInDebugDumpPath",
          "committedDate": "2023-02-08T09:11:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2aefe1a23acc1e7aec04e446b430a861f98b825",
          "message": "Fix copyright header (catch up with IDE0073)",
          "committedDate": "2023-02-08T09:11:39Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #8212 although I don't see `DoNotFollowRecursiveSymlinks` failing on my machine.",
        "createdAt": "2023-01-20T13:21:39Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Just hit same issue with `BinaryLoggerShouldEmbedSymlinkFilesViaTaskOutput`",
        "createdAt": "2023-01-20T14:07:18Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "> Just hit same issue with `BinaryLoggerShouldEmbedSymlinkFilesViaTaskOutput`\r\n\r\nThis case is addressed in this PR.",
        "createdAt": "2023-01-20T14:10:06Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Even on Win11 with developer mode enabled (and on a Microsoft DevBox VM, no less)\r\n\r\nAre you sure this was the case? On my devbox developer mode was off and turning it on fixed symlink creation.\r\n\r\nI know @Forgind had strong opinions about this.",
        "createdAt": "2023-01-20T16:12:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/12206368/213749779-5701e03b-9f00-4716-adcf-d8b16602b0c8.png)\r\n\r\nAnd I rebooted after that just in case. Is this the developer mode you have enabled or am I off?",
        "createdAt": "2023-01-20T16:21:17Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Weird, yeah, that was it. I didn't have to reboot:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/213750950-cfd52be0-2247-40c8-8e7f-eaa4a28f9686.png)\r\n",
        "createdAt": "2023-01-20T16:24:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Aha! We're looking at an actual code bug \ud83e\udd26 \r\n\r\nhttps://github.com/dotnet/msbuild/blob/5a635cf1218a5d7836114de1e392e7613d569675/src/Framework/NativeMethods.cs#L1051\r\n\r\nWin11 does not identify itself as Major == 11 on desktop. This changes things a bit. I'll bring this PR to Monday's review call.",
        "createdAt": "2023-01-20T18:07:05Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Aha! We're looking at an actual code bug \ud83e\udd26\r\n> \r\n> https://github.com/dotnet/msbuild/blob/5a635cf1218a5d7836114de1e392e7613d569675/src/Framework/NativeMethods.cs#L1051\r\n> \r\n> Win11 does not identify itself as Major == 11 on desktop. This changes things a bit. I'll bring this PR to Monday's review call.\r\n\r\nI copied that from:\r\nhttps://github.com/dotnet/runtime/blob/861a886730cd0925ea4e75084d80c2730857b1ff/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.CreateSymbolicLink.cs#L43\r\n\r\nAs I understand it, Win11 initially shipped as 10.0.22000, which means it should be caught by the second case. The first case was to ensure future windows versions are also included.\r\n\r\nWas the second case not firing for you? If so, we may need to reach out to runtime folks. I definitely agree we want users to be able to build MSBuild and run tests and see them succeed without doing anything special with their machines, but I also want good test coverage, and I'm a bit uncomfortable with skipping those tests, primarily because no one looks at skipped tests. We were essentially skipping them before, and we didn't realize we had a serious product bug for years.",
        "createdAt": "2023-01-20T21:19:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I misspoke, Windows pretends to be `6.2.9200.0` when running these tests. So nothing to do with Win11 (as you wrote, the Build check should catch it), the relevant test executable just needs to mark itself as \"Win10+ compatible\" for this condition to work. I am planning to work on a fix on Monday.",
        "createdAt": "2023-01-20T21:31:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I misspoke, Windows pretends to be `6.2.9200.0` when running these tests. So nothing to do with Win11 (as you wrote, the Build check should catch it), the relevant test executable just needs to mark itself as \"Win10+ compatible\" for this condition to work. I am planning to work on a fix on Monday.\r\n\r\nThat makes much more sense, thanks for clarifying. And that sounds like a PR that would resolve the problem and make me feel much more comfortable \ud83d\ude42",
        "createdAt": "2023-01-20T21:32:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "With the fix we still won't have tests that work out of the box, which I think is a downer. We should document it at the very least, analogous to how we ask developers to enable Windows long path support.",
        "createdAt": "2023-01-20T21:36:41Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "That makes me think I should get back to the system state test pr. That would ideally help with messaging around why tests are failing.\r\n\r\nAR-May brought up the point that that only helps if the first test you look at is the new test. I don't think this is possible, but it would be amazing if we could have SystemState_Tests that validate that your computer is set up the way we want it to be, and each has a specific set of tests associated with it such that if the SystemState_Test passes, those tests should pass. If the SystemState_Test fails, it fails noisily but with a very clear error, then automatically causes you to skip any dependent tests.\r\n\r\nMy original idea was that if you're having trouble figuring out a test, you might skip past it and look at the SystemState_Test, then realize what was really wrong. That's a lot easier but also a worse UI. It seems like the general problem of \"I want to build MSBuild and run tests on a fresh machine\" has gotten a lot more attention lately, so maybe it could be worth investing more in something like the skip-if-test-fails idea.",
        "createdAt": "2023-01-20T22:42:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> With the fix we still won't have tests that work out of the box, which I think is a downer. We should document it at the very least, analogous to how we ask developers to enable Windows long path support.\r\n\r\ndocumented here:\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md?plain=1#L28-L30\r\n",
        "createdAt": "2023-01-23T07:41:03Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This has conflicts now and also will conflict with #8378\r\n\r\nI think it's otherwise good to go, though; is that true?",
        "createdAt": "2023-02-07T23:22:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> This has conflicts now and also will conflict with #8378\r\n> \r\n> I think it's otherwise good to go, though; is that true?\r\n\r\nI have resolved the conflicts. This should be good to merge. Thank you!",
        "createdAt": "2023-02-08T10:50:20Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can it be the case when symbolic link can be created for one file but not for another file?\r\nThe solution with custom fact attribute may be as:\r\n```\r\n    public class SupportsSymbolicLinksFactAttribute : FactAttribute\r\n    {\r\n        public SupportsSymbolicLinksFactAttribute ()\r\n        {\r\n           if (!NativeMethodsShared.IsWindows)\r\n            {\r\n                return;\r\n            }\r\n\r\n            string symlinkFile = FileUtilities.GetTemporaryFile();\r\n            string sourceFile = FileUtilities.GetTemporaryFile();\r\n            string errorMessage = null;\r\n            if (NativeMethodsShared.MakeSymbolicLink(symlinkFile, sourceFile, ref errorMessage))\r\n            {\r\n                File.Delete(symlinkFile);\r\n                return;\r\n            }\r\n            this.Skip = \"This test requires support of symbolic link to be run.\";\r\n        }\r\n    }\r\n\r\n```\r\n",
              "createdAt": "2023-01-20T14:20:55Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2464,5 +2472,22 @@ internal override void ErrorIfLinkFailedCheck()\n         {\n             base.ErrorIfLinkFailedCheck();\n         }\n+\n+        private bool IsSymlinkingSupported(string sourceFile)\n+        {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                return true;\n+            }\n+\n+            string symlinkFile = FileUtilities.GetTemporaryFile();\n+            string errorMessage = null;\n+            if (NativeMethodsShared.MakeSymbolicLink(symlinkFile, sourceFile, ref errorMessage))\n+            {\n+                File.Delete(symlinkFile);\n+                return true;\n+            }\n+            return false;\n+        }",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "Yes, this would be much cleaner. Let me try it..",
              "createdAt": "2023-01-20T14:25:57Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2464,5 +2472,22 @@ internal override void ErrorIfLinkFailedCheck()\n         {\n             base.ErrorIfLinkFailedCheck();\n         }\n+\n+        private bool IsSymlinkingSupported(string sourceFile)\n+        {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                return true;\n+            }\n+\n+            string symlinkFile = FileUtilities.GetTemporaryFile();\n+            string errorMessage = null;\n+            if (NativeMethodsShared.MakeSymbolicLink(symlinkFile, sourceFile, ref errorMessage))\n+            {\n+                File.Delete(symlinkFile);\n+                return true;\n+            }\n+            return false;\n+        }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Seems to be working. Thank you!",
              "createdAt": "2023-01-20T15:08:37Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2464,5 +2472,22 @@ internal override void ErrorIfLinkFailedCheck()\n         {\n             base.ErrorIfLinkFailedCheck();\n         }\n+\n+        private bool IsSymlinkingSupported(string sourceFile)\n+        {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                return true;\n+            }\n+\n+            string symlinkFile = FileUtilities.GetTemporaryFile();\n+            string errorMessage = null;\n+            if (NativeMethodsShared.MakeSymbolicLink(symlinkFile, sourceFile, ref errorMessage))\n+            {\n+                File.Delete(symlinkFile);\n+                return true;\n+            }\n+            return false;\n+        }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd make this more actionable. Something like \"Missing rights to create symbolic links. Need to be run elevated or under development mode (https://learn.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development)\"",
              "createdAt": "2023-01-20T15:37:26Z",
              "path": "src/UnitTests.Shared/RequiresSymbolicLinksFactAttribute.cs",
              "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.IO;\n+\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    /// <summary>\n+    /// A custom <see cref=\"FactAttribute\"/> that skips the test if the OS doesn't support creating symlinks.\n+    /// </summary>\n+    public sealed class RequiresSymbolicLinksFactAttribute : FactAttribute\n+    {\n+        public RequiresSymbolicLinksFactAttribute()\n+        {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                return;\n+            }\n+\n+            // In Windows, a process can create symlinks only if it has sufficient permissions.\n+            // We simply try to create one and if it fails we skip the test.\n+            string sourceFile = FileUtilities.GetTemporaryFile();\n+            string destinationFile = FileUtilities.GetTemporaryFile();\n+            try\n+            {\n+                File.Create(sourceFile).Dispose();\n+\n+                string? errorMessage = null;\n+                if (!NativeMethodsShared.MakeSymbolicLink(destinationFile, sourceFile, ref errorMessage))\n+                {\n+                    Skip = \"This test requires symbolic link support to run.\";",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Done, thank you!",
              "createdAt": "2023-01-30T15:11:38Z",
              "path": "src/UnitTests.Shared/RequiresSymbolicLinksFactAttribute.cs",
              "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.IO;\n+\n+using Microsoft.Build.Shared;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    /// <summary>\n+    /// A custom <see cref=\"FactAttribute\"/> that skips the test if the OS doesn't support creating symlinks.\n+    /// </summary>\n+    public sealed class RequiresSymbolicLinksFactAttribute : FactAttribute\n+    {\n+        public RequiresSymbolicLinksFactAttribute()\n+        {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                return;\n+            }\n+\n+            // In Windows, a process can create symlinks only if it has sufficient permissions.\n+            // We simply try to create one and if it fails we skip the test.\n+            string sourceFile = FileUtilities.GetTemporaryFile();\n+            string destinationFile = FileUtilities.GetTemporaryFile();\n+            try\n+            {\n+                File.Create(sourceFile).Dispose();\n+\n+                string? errorMessage = null;\n+                if (!NativeMethodsShared.MakeSymbolicLink(destinationFile, sourceFile, ref errorMessage))\n+                {\n+                    Skip = \"This test requires symbolic link support to run.\";",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f ",
              "createdAt": "2023-01-23T16:37:38Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1041,7 +1041,7 @@ internal static MemoryStatus GetMemoryStatus()\n         return null;\n     }\n \n-    internal static bool MakeSymbolicLink(string newFileName, string exitingFileName, ref string errorMessage)\n+    internal static bool MakeSymbolicLink(string newFileName, string existingFileName, ref string errorMessage)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This part looks a little sketchy...if the test is verifying that we write to temp by default, shouldn't we verify that we write to temp by default rather than DebugDumpPath, which could be Temp but could be something else?\r\n\r\nIn practice, I seem to recall the order or priority was MSBUILDDEBUGPATH > current directory > temp. I imagine the test runner is always in a protected directory, so is this hardening the test against running as an admin?",
              "createdAt": "2023-01-24T19:43:05Z",
              "path": "src/Build.UnitTests/BackEnd/DebugUtils_tests.cs",
              "diffHunk": "@@ -17,21 +17,22 @@ public class DebugUtils_Tests\n         [Fact]\n         public void DumpExceptionToFileShouldWriteInTempPathByDefault()\n         {\n-            Directory.GetFiles(Path.GetTempPath(), \"MSBuild_*failure.txt\").ShouldBeEmpty();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "What's happening here is some other test changes the environment before this test runs. We can't really undo these global changes (state is held in readonly statics in many places) so as a mitigation we decided to update this test to be more agnostic. @rokonec hit the same issue with this very test in one of his PRs and this update was authored by him.",
              "createdAt": "2023-01-30T15:07:17Z",
              "path": "src/Build.UnitTests/BackEnd/DebugUtils_tests.cs",
              "diffHunk": "@@ -17,21 +17,22 @@ public class DebugUtils_Tests\n         [Fact]\n         public void DumpExceptionToFileShouldWriteInTempPathByDefault()\n         {\n-            Directory.GetFiles(Path.GetTempPath(), \"MSBuild_*failure.txt\").ShouldBeEmpty();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I will change the name, though, `DumpExceptionToFileShouldWriteInTempPathByDefault` does not match the implementation anymore.",
              "createdAt": "2023-01-30T15:08:14Z",
              "path": "src/Build.UnitTests/BackEnd/DebugUtils_tests.cs",
              "diffHunk": "@@ -17,21 +17,22 @@ public class DebugUtils_Tests\n         [Fact]\n         public void DumpExceptionToFileShouldWriteInTempPathByDefault()\n         {\n-            Directory.GetFiles(Path.GetTempPath(), \"MSBuild_*failure.txt\").ShouldBeEmpty();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "So the real problem is that DebugDumpPath is cached over that rewriting. I'd say that test should be modified to not affect the environment long-term, but I'm sure someone else could reintroduce the same problem. It'd be nice to be able to verify that DebugDumpPath was in temp when it was first created, but I can't think of a way to do that at the moment, so this is probably the best we can do.",
              "createdAt": "2023-01-30T15:56:27Z",
              "path": "src/Build.UnitTests/BackEnd/DebugUtils_tests.cs",
              "diffHunk": "@@ -17,21 +17,22 @@ public class DebugUtils_Tests\n         [Fact]\n         public void DumpExceptionToFileShouldWriteInTempPathByDefault()\n         {\n-            Directory.GetFiles(Path.GetTempPath(), \"MSBuild_*failure.txt\").ShouldBeEmpty();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}