{
  "number": 6891,
  "title": "[RAR] Stop removing from file cache just because an assembly is cached in process",
  "body": "Fixes #6844\r\n\r\n### Context\r\nRAR has several caches, including a process-wide cache and a (serialized) file cache. Previously, we had the process cache take priority (if it was up-to-date) and removed from the serialized cache, believing that meant some other process had taken \"ownership\" of serializing the assembly, but that doesn't actually make sense because that other process could be the same process currently looking at this assembly, and even if it were another process, that other process could have removed it from its own file cache. This removes that flawed logic so that we always write to the file cache any information we have. This improves incremental build times.\r\n\r\n### Changes Made\r\nStopped removing from file cache when process-wide cache has information.\r\n\r\n### Testing\r\nTried without this change and noted that the first few attempted cache lookups all missed. Tried with this change without killing processes and noted that they were cache hits; tried with this change after killing processes, and they were still cache hits.\r\n\r\nAlso noted that without this change, there were 0 things in the instanceLocalFileStateCache at the beginning of the first RAR execution. After it, there were 122.\r\n\r\nAll tests conducted with Ocelot repo.\r\n\r\n### Notes\r\nI actually mentioned that I didn't think it made sense to have this code here in the \"questions\" section of my RAR pre-caching document [here](https://microsoft-my.sharepoint.com/:w:/p/nmytelka/EfJOiPG6XPJMsDQ12Nk5-HIBm957qVk2DPB0R5XSpRx1RA?e=6bVaU6) but never looked into it more. Ah, well.",
  "state": "MERGED",
  "createdAt": "2021-09-26T15:58:10Z",
  "updatedAt": "2021-12-08T21:20:56Z",
  "closedAt": "2021-10-13T19:12:37Z",
  "mergedAt": "2021-10-13T19:12:36Z",
  "additions": 5,
  "deletions": 15,
  "changedFiles": 2,
  "headRefName": "stop-removing-from-filestatecache",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f07a49ff9b2326fd275e06b29073011410f939bb",
          "message": "Stop removing from file state cache\n\nThis was causing numerous unnecessary cache misses.",
          "committedDate": "2021-09-26T15:51:09Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e7c6ea9ef7d62c365d7b826455a29b90567f8ee",
          "message": "Tiny clarity tweak",
          "committedDate": "2021-09-26T15:51:17Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a970a3df29daa7d2a29a845d092543b36e61b83e",
          "message": "Add to file cache",
          "committedDate": "2021-10-01T15:54:48Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "49e92636b4406f8147acaebe952f0a38289f57a4",
          "message": "Update src/Tasks/SystemState.cs",
          "committedDate": "2021-10-01T18:29:19Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "749a96228c6dff19533a9c2707299261a05d3769",
          "message": "Change comments",
          "committedDate": "2021-10-04T16:26:46Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a89a8c5d80d7762d866bd2fc850b1f2b6bd35e9a",
          "message": "Merge branch 'stop-removing-from-filestatecache' of https://github.com/Forgind/msbuild into stop-removing-from-filestatecache",
          "committedDate": "2021-10-04T16:26:50Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "One extra thought I had:\r\nWith a lot of dlls, serialization cost can be significant. If everything is already in the process cache, this is just wasted time. What would you think of not reading in a state file by default (or giving an option to not read one in?) and only doing so if we find an assembly that isn't in the process cache? Then, if RAR finishes without having read anything in, we don't write anything either.\r\n\r\nSo ComputeFileStateFromCachesAndDisk would look more like:\r\n```\r\nIs it in the process cache? Is the process cache up-to-date?\r\nIf so, return it.\r\nElse, have we already deserialized an instanceLocalFileStateCache?\r\nIf so, check whether it's up-to-date and act accordingly.\r\nElse, deserialize it, check if it has the assembly and is up-to-date and act accordingly.\r\n```\r\n\r\nAnd we'd remove ReadStateFile and modify WriteStateFile to only write anything if _cache is not null and dirty.\r\n\r\nAdvantage: Less serialization and deserialization, assuming most of the projects use the same assemblies.\r\nDisadvantage: Less deterministic\r\n\r\nNote: May also be a bit less relevant with a RARaaS node if it is only expected to read in a state file cache once per build but would be more relevant if the RARaaS node reads in a state file for every RAR execution.\r\n\r\nThoughts?",
        "createdAt": "2021-10-07T17:52:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I like the idea of lazy load state file once it is needed. The change seems to be simple and safe.",
        "createdAt": "2021-10-11T15:08:19Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Hmm, on the other hand I think it is still slightly sub-optimal. Currently it is still indeterministic. For example imagine m=1 build with identical project A and B. If project A is build first cache for project B will be empty because process wide cache will be filled by project A.\r\nI would recommend to have flow like:\r\n``` \r\nIF in-process-cache\r\n  IF not in-instance-cache\r\n    update-instance-cache(cached-item)\r\n  return cached-item\r\n```\r\n\r\n",
              "createdAt": "2021-09-27T18:43:11Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Please consider to remeasure perf after above changes as it might make amount of serialized data considerably bigger. But even if it is slightly slower I would still prefer correctness and deterministic behavior.",
              "createdAt": "2021-09-27T18:46:58Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I slightly prefer not adding it to the instance cache if it's in the process cache. You're right that after A built and added foo to its process cache, B wouldn't add it, which might make it slower if B builds before A next time, but if we have a nice, deterministic build, A should still build before before B, which means it should have foo in its process cache again and avoid any loss. This is especially true with RARaaS. There is still some cost to serializing and deserializing information, and it would be nice to avoid doing that when not necessary.",
              "createdAt": "2021-09-27T22:51:02Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Even though our build graph is deterministic, the actual execution isn't and projects are build on more less random node. Additionally VS does not build solution but just projects, so if only inputs of projects B changed VS builds just project B. This non deterministic behavior where content of persistent cache depends on content of cross-build-process-wide cache does not sounds right to me.",
              "createdAt": "2021-09-29T11:19:06Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "The bad case here is just re-resolving a reference that we would have re-resolved with current behavior anyway\u2014and afterwards, it can no longer be an issue for this assembly\u2014so if we miss some cases, I'm not too worried about it. You're right that they can build on another process, but a lot of people use the same assemblies over and over again, so there's a decent chance most or all of the requisite assembly information is already in the cache anyway because of having built some other project that needed them.",
              "createdAt": "2021-09-29T14:51:50Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I measured total RAR time when building Ocelot with no live processes for each of noChange, currentChange, and addingMissingAssembliesToInstanceCache, once each without file caches and more with. Results:\r\nAdd missing files to instance cache: 10569.28 (no caches); 3276.099 (with cache)\r\nDo not remove from instance cache: 9586.759 (no caches); 3264.925 (with cache)\r\nCurrent version of MSBuild: 8569.355 (no caches); 6372.939\r\n\r\nFor the first run, writing all the files instead of just the ones a particular execution had had to figure out made the first version noticeably slower than the others. (I'm surprised there was so much of a difference between the version in this PR and main, but ah, well.) For incremental build, at least for what I ran, the difference seemed to be suspiciously huge, but I ran it several times, and it seemed pretty consistent. I'd appreciate a quick check on that anyway, since it does seem too good to be true. Anyway, the difference between adding everything to the instance cache versus just not removing anything seemed pretty small. I imagine that's a balance between slightly better cache performance and extra serializing/deserializing. Note that I was running a multiproc build for all tests.\r\n\r\nFrom these results, keeping the PR as-is sounds optimal.",
              "createdAt": "2021-09-30T22:51:24Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Scenario which concerns me most is `hot rebuild`. That is either two rebuilds in max 15 minutes apart or more often rebuild max 15 minutes after incremental build. These scenarios are, IMHO, quite common as many developers, rightfully so, use rebuild as first remedy if something is fishy. Rebuild in such use cases will delete all caches, and since most of the data are in process-wide cache from previous builds it will create either very small cache file or none at all.\r\n\r\nAlso I believe that most common dev scenario is cold incremental - incremental build more apart than 15 minutes when there are no longer warm MSBuild  nodes.\r\n\r\nI have measured it on orchard code. I have very fast SSD so on slower more common discs differences are expected to be bigger.\r\n![image](https://user-images.githubusercontent.com/25249058/135605111-2b2a2367-9416-4cb2-98b8-0a4bcc7d63d6.png)\r\nScenario R - I - R - CI (rebuild, incremental, rebuild, cold incremental)  is where it is most noticeable. CI was measured by killing MSBuild processes before running incremental build.\r\n\r\nRaw data:\r\nScenario | Type | RAR | Build | Cache size | Files\r\n-- | -- | -- | -- | -- | --\r\nR | no remove | 22644 | 34590 | 11755 | 338\r\nR - I - I | no remove | 9640 | 6380 | 12363 | 345\r\nR - I - CI | no remove | 12881 | 11020 | 14812 | 348\r\nR - I - R - CI | no remove | 18461 | 12990 | 12636 | 349\r\nR | old | 21872 | 37880 | 11614 | 337\r\nR - I - I | old | 8648 | 6670 | 4989 | 341\r\nR - I - CI | old | 20660 | 12420 | 11638 | 349\r\nR - I - R - CI | old | 19820 | 13110 | 11876 | 348\r\nR | add | 21684 | 34880 | 38105 | 353\r\nR - I - I | add | 8451 | 6630 | 38105 | 353\r\nR - I - CI | add | 11508 | 11840 | 38105 | 353\r\nR - I - R - CI | add | 10996 | 12270 | 38105 | 353\r\n\r\nAs you can see on disc cache size (in kB) in `old` and `no-remove` is non deterministic but quite smaller (1 third). I value determinism in build processes - if not too costly.\r\n\r\nData shows that either solution is better than current one. Please feel free to pick one and proceed.",
              "createdAt": "2021-10-01T10:53:31Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "My data suggested they were similar, but I didn't test all the scenarios you did, and add looks better than no remove for that, so I'll switch to add. Thanks for your help with this!",
              "createdAt": "2021-10-01T15:53:26Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Now I'm curious if I should check for the instance cache being up to date or just set it...but that sounds like a microoptimization, so I'm not going to worry about it.",
              "createdAt": "2021-10-01T15:55:30Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,6 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please set `isDirty = true;` here to force its cache file saving.",
              "createdAt": "2021-10-01T17:20:01Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,10 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {\n-                // If a FileState already exists in this instance cache due to deserialization, remove it;\n-                // another instance has taken responsibility for serialization, and keeping this would\n-                // result in multiple instances serializing the same data to disk\n-                if (isCachedInInstance)\n+                if (!isInstanceFileStateUpToDate)\n                 {\n-                    instanceLocalFileStateCache.Remove(path);\n-                    isDirty = true;\n+                    instanceLocalFileStateCache[path] = cachedProcessFileState;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "```suggestion\r\n                    instanceLocalFileStateCache[path] = cachedProcessFileState;\r\n                    isDirty = true;\r\n```",
              "createdAt": "2021-10-01T18:29:16Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,10 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {\n-                // If a FileState already exists in this instance cache due to deserialization, remove it;\n-                // another instance has taken responsibility for serialization, and keeping this would\n-                // result in multiple instances serializing the same data to disk\n-                if (isCachedInInstance)\n+                if (!isInstanceFileStateUpToDate)\n                 {\n-                    instanceLocalFileStateCache.Remove(path);\n-                    isDirty = true;\n+                    instanceLocalFileStateCache[path] = cachedProcessFileState;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is this comment still valid?",
              "createdAt": "2021-10-04T09:02:03Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -366,15 +366,11 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)\n             // If the process-wide cache contains an up-to-date FileState, always use it\n             if (isProcessFileStateUpToDate)\n             {\n-                // If a FileState already exists in this instance cache due to deserialization, remove it;\n-                // another instance has taken responsibility for serialization, and keeping this would\n-                // result in multiple instances serializing the same data to disk\n-                if (isCachedInInstance)\n+                if (!isInstanceFileStateUpToDate)\n                 {\n-                    instanceLocalFileStateCache.Remove(path);\n+                    instanceLocalFileStateCache[path] = cachedProcessFileState;\n                     isDirty = true;\n                 }\n-\n                 return cachedProcessFileState;\n             }\n             // If the process-wide FileState is missing or out-of-date, this instance owns serialization;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}