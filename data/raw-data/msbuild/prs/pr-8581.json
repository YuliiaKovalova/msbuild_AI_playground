{
  "number": 8581,
  "title": "Log item self-expansion",
  "body": "Fixes #8527\r\n\r\n### Context\r\nSelf referencing item metadata in an item definition within the target leads to possible unintended expansion (and cross-applying of pre-existing item instances).\r\n\r\nThis behavior is not a bug - it's the implication of the target batching feature - but might be confusing. So detection and warning is added here\r\n\r\n### Changes Made\r\nA self reference (qualified or unqualified) of metadata within the item defeiniton (which is within a target) is detected and high importance message is issued.\r\n\r\n### Testing\r\nTests added for a warning case and for a non-warning case (self-referencing metadata outside of target context)\r\n\r\n### Doc\r\nhttps://github.com/MicrosoftDocs/visualstudio-docs-pr/pull/11034\r\n\r\n### Possible impact\r\nIt's unfortunately hard to obtain data on prevalence of this pattern due to limitations of available code searches (github search doesn't support '@' sign and no escaping option; SourceGraph, grep.app doesn't support regex lookaheads). So I cannot quantify (I'll try again later on).\r\nBut there are some sparse evidence of usage:\r\n\r\n- https://github.com/JeremyAnsel/JeremyAnsel.HLSL.Targets/blob/master/JeremyAnsel.HLSL.Targets/JeremyAnsel.HLSL.Targets/JeremyAnsel.HLSL.Targets.csproj#L49\r\n- https://github.com/neuecc/MessagePack-CSharp/blob/master/src/MessagePack.MSBuild.Tasks/MessagePack.MSBuild.Tasks.csproj#L35\r\n- https://github.com/dotnet/aspnetcore/blob/main/eng/AfterSigning.targets#L22\r\n\r\nall of those seem to be doing something else then intended (the variable part of path is empty, so it gets just the base directory), but they do not break.\r\n\r\n**tl;dr;:** ~~unless we are able to better quantify, we might resort to demote the warning to a message~~ Demoted to Message severity",
  "state": "MERGED",
  "createdAt": "2023-03-21T11:08:19Z",
  "updatedAt": "2023-04-14T04:06:28Z",
  "closedAt": "2023-04-14T04:06:27Z",
  "mergedAt": "2023-04-14T04:06:27Z",
  "additions": 285,
  "deletions": 13,
  "changedFiles": 24,
  "headRefName": "proto/item-expansion-warn",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Feature: Warning Waves",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "88762322bfa5a9a5ba5b99a481067a8db5b2bf9a",
          "message": "Add warning for suspicious item metadata self-reference",
          "committedDate": "2023-03-20T17:26:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "100b1d65241d8becf08e08e6599d72691ddf3ead",
          "message": "Add warning, improve wordings and styling",
          "committedDate": "2023-03-21T11:04:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "305bd78fcf57602de23e3b56c34e5d2d21ab2ca5",
          "message": "Allow referring to unqualified metadata of other item",
          "committedDate": "2023-03-21T14:42:02Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12d2ac65f963d1f1c83661ad6290c97b9ab97367",
          "message": "Fix styling",
          "committedDate": "2023-03-21T15:55:25Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53f3e84729e39a2f33b48d95369699376f6723c6",
          "message": "Normalize paths in test to acomodate nix tests runs",
          "committedDate": "2023-03-21T17:11:11Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a1218a66d85520cbc7501d0085c0e9ce5360c4b",
          "message": "Demote the warning to message",
          "committedDate": "2023-03-30T13:32:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ffbf154b310661a146eed2f1372bd8682923e85",
          "message": "Update src/Build/Resources/Strings.resx\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-04-04T08:52:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf0b3c1084232102b7e175c77c25957064ac7051",
          "message": "Reflect PR suggestions",
          "committedDate": "2023-04-04T12:48:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "acf36f2213a64d2b250a615f267fce762bb35a0e",
          "message": "Add localized resources",
          "committedDate": "2023-04-04T12:53:49Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "244d675211e1201d4b583fac356813bd5df6fb9d",
          "message": "Rename type for clarity",
          "committedDate": "2023-04-04T12:53:58Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "186416bfed3add334015e71e825d12b68152d699",
          "message": "Merge branch 'main' into proto/item-expansion-warn",
          "committedDate": "2023-04-04T12:55:34Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a700bd821268c0fa7276dffef6f3e454c62eb53",
          "message": "Fix formatting",
          "committedDate": "2023-04-04T15:11:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a703ba7392a3abcea01a19256593ac1d7c9988d",
          "message": "Remove nullable disable",
          "committedDate": "2023-04-05T06:52:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5658f6579c053a531fa1cea6b6aa5be5a77426ef",
          "message": "Change message link to aka.ms",
          "committedDate": "2023-04-12T14:10:01Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure there's a better way to do this, but I do have to say it looks weird to be |'ing something with \"ExpandAll\"",
              "createdAt": "2023-03-31T20:49:42Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -184,7 +184,20 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke\n \n                 if (condition)\n                 {\n-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);\n+                    ExpanderOptions expanderOptions = ExpanderOptions.ExpandAll;\n+                    ElementLocation location = metadataInstance.Location;\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) &&\n+                        // If multiple buckets were expanded - we do not want to repeat same error for same metadatum on a same line\n+                        bucket.BucketSequenceNumber == 0 &&\n+                        // Referring to unqualified metadata of other item (transform) is fine.\n+                        child.Include.IndexOf(\"@(\", StringComparison.Ordinal) == -1)\n+                    {\n+                        expanderOptions |= ExpanderOptions.WarnOnItemMetadataSelfReference;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`ExpandOptions` already prior this mix the 'what to expand' wit the 'how the expansion should occur'. `ExpandAll` is cumulation only of the first group. https://github.com/dotnet/msbuild/blob/da690cf2cfaa20131a4dfe1f77bf10203c34de7d/src/Build/Evaluation/Expander.cs#L109",
              "createdAt": "2023-04-04T08:36:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -184,7 +184,20 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke\n \n                 if (condition)\n                 {\n-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);\n+                    ExpanderOptions expanderOptions = ExpanderOptions.ExpandAll;\n+                    ElementLocation location = metadataInstance.Location;\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) &&\n+                        // If multiple buckets were expanded - we do not want to repeat same error for same metadatum on a same line\n+                        bucket.BucketSequenceNumber == 0 &&\n+                        // Referring to unqualified metadata of other item (transform) is fine.\n+                        child.Include.IndexOf(\"@(\", StringComparison.Ordinal) == -1)\n+                    {\n+                        expanderOptions |= ExpanderOptions.WarnOnItemMetadataSelfReference;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It seems weird for a \"ProjectItemDefinition\" to be an \"IItemMetadata\"...it's possible some restructruing would help clarify that?",
              "createdAt": "2023-03-31T20:52:38Z",
              "path": "src/Build/Definition/ProjectItemDefinition.cs",
              "diffHunk": "@@ -26,7 +26,7 @@ namespace Microsoft.Build.Evaluation\n     /// ProjectMetadataElement, and these can be added, removed, and modified.\n     /// </remarks>\n     [DebuggerDisplay(\"{_itemType} #Metadata={MetadataCount}\")]\n-    public class ProjectItemDefinition : IKeyed, IMetadataTable, IItemDefinition<ProjectMetadata>, IProjectMetadataParent\n+    public class ProjectItemDefinition : IKeyed, IMetadataTable, IItemDefinition<ProjectMetadata>, IProjectMetadataParent, IItemMetadata",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry if I misunderstood here. I renamed the interface for clarity (`IItemMetadata` -> `IItemTypeDefinition`) - hope this is adressing the concern.",
              "createdAt": "2023-04-04T12:54:53Z",
              "path": "src/Build/Definition/ProjectItemDefinition.cs",
              "diffHunk": "@@ -26,7 +26,7 @@ namespace Microsoft.Build.Evaluation\n     /// ProjectMetadataElement, and these can be added, removed, and modified.\n     /// </remarks>\n     [DebuggerDisplay(\"{_itemType} #Metadata={MetadataCount}\")]\n-    public class ProjectItemDefinition : IKeyed, IMetadataTable, IItemDefinition<ProjectMetadata>, IProjectMetadataParent\n+    public class ProjectItemDefinition : IKeyed, IMetadataTable, IItemDefinition<ProjectMetadata>, IProjectMetadataParent, IItemMetadata",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>MSB4120: Item '{0}' definition within target references itself via (qualified or unqualified) metadatum '{1}'. This can lead to unintended expansion and cross-applying of pre-existing items. More info: https://learn.microsoft.com/visualstudio/msbuild/msbuild-batching#item-batching-on-self-referencing-metadata</value>\r\n```\r\n\r\nPossibly an opportunity to use HelpLink?",
              "createdAt": "2023-03-31T20:58:18Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1983,4 +1983,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"NodeReused\" xml:space=\"preserve\">\n     <value>Reusing node {0} (PID: {1}).</value>\n   </data>\n-</root>\n\\ No newline at end of file\n+  <data name=\"ItemReferencingSelfInTarget\" xml:space=\"preserve\">\n+    <value>MSB4120: Item '{0}' definition within target is referencing self via metadata '{1}' (qualified or unqualified). This can lead to unintended expansion and cross-applying of pre-existing items. More info: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching#item-batching-on-self-referencing-metadata</value>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Unfortunately HelpLink is currently only supported by Warnings and Errors (and it actually doesn't seem to be populated by any of our code other than tests). So it would likely got lost - I prefer keeping it in the message  ",
              "createdAt": "2023-04-04T08:52:39Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1983,4 +1983,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"NodeReused\" xml:space=\"preserve\">\n     <value>Reusing node {0} (PID: {1}).</value>\n   </data>\n-</root>\n\\ No newline at end of file\n+  <data name=\"ItemReferencingSelfInTarget\" xml:space=\"preserve\">\n+    <value>MSB4120: Item '{0}' definition within target is referencing self via metadata '{1}' (qualified or unqualified). This can lead to unintended expansion and cross-applying of pre-existing items. More info: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching#item-batching-on-self-referencing-metadata</value>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this never logs a warning anymore, we might want to rename the ExpanderOptions, and since adding a message isn't a breaking change, we probably don't need this anymore.\r\n\r\n(And if you think we still need the changewave, please it to the doc!)",
              "createdAt": "2023-03-31T21:00:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -184,7 +184,20 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke\n \n                 if (condition)\n                 {\n-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);\n+                    ExpanderOptions expanderOptions = ExpanderOptions.ExpandAll;\n+                    ElementLocation location = metadataInstance.Location;\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) &&",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks for reminding to document!\r\n\r\nI'd still prefer to be defensive - as the changewave guards not only the logging, but as well the heavy-lifting to detect the situation",
              "createdAt": "2023-04-04T08:58:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -184,7 +184,20 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke\n \n                 if (condition)\n                 {\n-                    string evaluatedValue = bucket.Expander.ExpandIntoStringLeaveEscaped(metadataInstance.Value, ExpanderOptions.ExpandAll, metadataInstance.Location, loggingContext);\n+                    ExpanderOptions expanderOptions = ExpanderOptions.ExpandAll;\n+                    ElementLocation location = metadataInstance.Location;\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) &&",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can probably make these a little cleaner with TestEnvironment. It does the cleanup for you automatically when it's disposed.",
              "createdAt": "2023-03-31T21:02:27Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -772,6 +772,138 @@ public void ItemsIncludeExcludePathsCombinations()\n             }\n         }\n \n+        /// <summary>\n+        /// Referring to an item outside of target leads to 'naturally expected' reference to the item being processed.\n+        ///  No expansion occurs.\n+        /// </summary>\n+        [Fact]\n+        public void ItemsRecursionOutsideTarget()\n+        {\n+            string projectFile = null;\n+\n+            try",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is English-specific so will fail on non-English systems. Can you get it from the resource directly?",
              "createdAt": "2023-03-31T21:03:11Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -772,6 +772,138 @@ public void ItemsIncludeExcludePathsCombinations()\n             }\n         }\n \n+        /// <summary>\n+        /// Referring to an item outside of target leads to 'naturally expected' reference to the item being processed.\n+        ///  No expansion occurs.\n+        /// </summary>\n+        [Fact]\n+        public void ItemsRecursionOutsideTarget()\n+        {\n+            string projectFile = null;\n+\n+            try\n+            {\n+                projectFile = ObjectModelHelpers.CreateTempFileOnDisk(\"\"\"\n+                    <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>\n+                     <ItemGroup>\n+                        <iout1 Include='a/b.foo' TargetPath='%(Filename)%(Extension)' />\n+                        <iout1 Include='c/d.foo' TargetPath='%(Filename)%(Extension)' />\n+                        <iout1 Include='g/h.foo' TargetPath='%(Filename)%(Extension)' />\n+                      </ItemGroup>\n+                      <Target Name='a'>\n+                        <Message Text=\"iout1=[@(iout1)]\" Importance='High' />\n+                        <Message Text=\"iout1-target-paths=[@(iout1->'%(TargetPath)')]\" Importance='High' />\n+                      </Target>\n+                    </Project>\n+                \"\"\");\n+\n+                MockLogger logger = new MockLogger(_testOutput);\n+                ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile, logger);\n+\n+                Console.WriteLine(logger.FullLog);\n+\n+                logger.AssertLogContains(\"iout1=[a/b.foo;c/d.foo;g/h.foo]\");\n+                logger.AssertLogContains(\"iout1-target-paths=[b.foo;d.foo;h.foo]\");\n+            }\n+            finally\n+            {\n+                File.Delete(projectFile);\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Referring to an item within target leads to item expansion which might be unintended behavior - hence warning.\n+        /// </summary>\n+        [Fact]\n+        public void ItemsRecursionWithinTarget()\n+        {\n+            string projectFile = null;\n+\n+            try\n+            {\n+                // TargetPath=\"@(iin1->'%(Filename)')\" is intentionally allowed - as it explicitly indicates expansion\n+                projectFile = ObjectModelHelpers.CreateTempFileOnDisk(\"\"\"\n+                    <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>\n+                      <Target Name='a'>\n+                        <ItemGroup>\n+                          <iin1 Include='a/b.foo' TargetPath='%(Filename)%(Extension)' />\n+                          <iin1 Include='c/d.foo' TargetPath='%(Filename)%(Extension)' />\n+                          <iin1 Include='g/h.foo' TargetPath='%(Filename)%(Extension)' />\n+                        </ItemGroup>\n+                        <Message Text=\"iin1=[@(iin1)]\" Importance='High' />\n+                        <Message Text=\"iin1-target-paths=[@(iin1->'%(TargetPath)')]\" Importance='High' />\n+                      </Target>\n+                    </Project>\n+                \"\"\");\n+\n+                MockLogger logger = new MockLogger(_testOutput);\n+                ObjectModelHelpers.BuildTempProjectFileExpectSuccess(projectFile, logger);\n+\n+                Console.WriteLine(logger.FullLog);\n+\n+                logger.AssertLogDoesntContain(\"iin1=[a/b.foo;c/d.foo;g/h.foo]\");\n+                logger.AssertLogDoesntContain(\"iin1-target-paths=[b.foo;d.foo;h.foo]\");\n+                logger.AssertLogContains(\"iin1=[a/b.foo;c/d.foo;g/h.foo;g/h.foo]\");\n+                logger.AssertLogContains(\"iin1-target-paths=[;b.foo;b.foo;d.foo]\");\n+\n+                logger.AssertLogContains(\"MSB4120: Item 'iin1' definition within target is referencing self via metadata 'Extension' (qualified or unqualified). This can lead to unintended expansion and cross-applying of pre-existing items\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nDo you need to disable nullable here?",
              "createdAt": "2023-04-04T18:50:20Z",
              "path": "src/Build/Evaluation/IItemTypeDefinition.cs",
              "diffHunk": "@@ -0,0 +1,13 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable disable",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Removed",
              "createdAt": "2023-04-05T06:52:24Z",
              "path": "src/Build/Evaluation/IItemTypeDefinition.cs",
              "diffHunk": "@@ -0,0 +1,13 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable disable",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}