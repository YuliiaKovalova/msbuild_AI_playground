{
  "number": 7877,
  "title": "Help Standalone MSBuild Find Its Family",
  "body": "### Customer Impact\r\nCoreXT is blocked because MSBuild can no longer discover itself when in \"standalone\" mode and in a non-SDK scenario.\r\n\r\n### Testing\r\n- [x] Injecting into the SDK\r\n- [x] Injecting into VS\r\n\t- Injected & ran build.cmd in this repo\r\n- [x] Decide if this should merge into the SDK\r\n\t- Doesn't matter, it'll flow eventually (this change doesn't affect the SDK)\r\n- [x] 17.3 version should increment\r\n- [x] @dfederm test the CoreXT scenario\r\n\r\n### Risk\r\nLow, code change is for non-VS code path and only affects MSBuild's that exist in an `amd64/` or `arm64/` directory, which does not affect the SDK scenario.\r\n\r\n### Code Reviewers\r\nForgind\r\ndfederm\r\n\r\n### Description of fix\r\nIn the non-VS scenario, MSBuild will properly set the \"root\" folder when it's in the `amd64/` or `arm64/` directory, _before_ trying to find the `amd64`/`arm64` exe's.",
  "state": "MERGED",
  "createdAt": "2022-08-11T15:32:56Z",
  "updatedAt": "2022-08-15T16:56:49Z",
  "closedAt": "2022-08-15T16:56:48Z",
  "mergedAt": "2022-08-15T16:56:48Z",
  "additions": 11,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "fx-buildenvhelper",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-consider"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bfb18121c4f7cea96a485ef304f4872defafc0e7",
          "message": "Help standalone MSBuild find its family",
          "committedDate": "2022-08-11T19:14:19Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "066e757cdb3b246fb7f8b7d71f11d97ad8c779b7",
          "message": "Check folder path when setting the root in non-VS mode",
          "committedDate": "2022-08-11T19:14:25Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31bc44c5ae2145e4ec6926e09718af0810ddba66",
          "message": "Use string.equals to more closely match prev logic",
          "committedDate": "2022-08-11T19:14:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f34d188de164041c1faab52b0315643c7e026831",
          "message": "amd64 msbuild is set to current dir if not found\n\nThis is to mimic the behavior prior to to the arm64\nchanges that modified this logic. That logic would set\nthe amd64 dir to the current directory. Then, if we couldn't\nfind it, it wouldnt bother setting it to null or empty.",
          "committedDate": "2022-08-11T19:14:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "362d18ee63f88daa05ecd233b897a4cffe66a04c",
          "message": "Increment version",
          "committedDate": "2022-08-11T22:55:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Will inject bits into a local SDK and my own VS to verify this works. Then I'll go ahead and merge tomorrow. cc @dfederm for testing the corext scenario",
        "createdAt": "2022-08-11T22:56:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Tested this by injecting bits into a downloaded 6.0.4 SDK. Ran dotnet build of our sln and it went fine.\r\nAlso tested by injecting into VS and running build.cmd / rebuilding all projects in msbuild.sln",
        "createdAt": "2022-08-12T22:15:06Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos gave me some private bits to test with for CoreXT (the primary broken scenario this change is fixing) and it does indeed fix the issue.",
        "createdAt": "2022-08-12T22:42:31Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "As mentioned in Teams, `MSBuildToolsDirectoryRoot` would still be wrong due to line 538 above.\r\n\r\nThe previous logic used:\r\n```\r\n            // Check to see if our current folder is 'amd64'\r\n            bool runningInAmd64 = string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase);\r\n            bool runningInARM64 = string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase);\r\n```\r\n\r\nAnd effectively used that to determine whether it needed to use the parent directory or not instead of checking if it's VS and checking the current process's arch.",
              "createdAt": "2022-08-11T15:42:18Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -552,7 +552,7 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n             }\n \n-            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)\n+            if (MSBuildToolsDirectoryRoot != null)\n             {\n                 // Calculate potential paths to other architecture MSBuild.exe\n                 var potentialAmd64FromX86 = FileUtilities.CombinePaths(MSBuildToolsDirectoryRoot, \"amd64\", msBuildExeName);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider case-insensitive comparisons? At least on Windows.",
              "createdAt": "2022-08-11T15:54:01Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,15 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (currentToolsDirectory.Name == \"amd64\" || currentToolsDirectory.Name == \"arm64\")",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "```suggestion\r\n                if (string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase)\r\n                    || string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase))\r\n```",
              "createdAt": "2022-08-11T15:55:29Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,15 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (currentToolsDirectory.Name == \"amd64\" || currentToolsDirectory.Name == \"arm64\")",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I seem to recall `f => File.Exists(f)` is more performant than `File.Exists`. Don't care that much.",
              "createdAt": "2022-08-11T18:31:03Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -563,8 +570,8 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n                 var existsCheck = mode == BuildEnvironmentMode.VisualStudio ? new Func<string, bool>(_ => true) : File.Exists;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you explain taking out the VS check here?",
              "createdAt": "2022-08-11T18:39:59Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,16 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase) ||\n+                    string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    MSBuildToolsDirectoryRoot = currentToolsDirectory.Parent?.FullName;\n+                }\n             }\n \n-            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)\n+            if (MSBuildToolsDirectoryRoot != null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We mistakenly put this in because we only considered two scenarios:\r\n1. VS\r\n2. SDK\r\n\r\nIn the sdk scenario, there is no arm64/ or amd64/ folder. The VS scenario however needs to dig a little bit to find the others.\r\n\r\nWhat we didn't realize is that the corext scenario also needed this logic.",
              "createdAt": "2022-08-11T19:11:10Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,16 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase) ||\n+                    string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    MSBuildToolsDirectoryRoot = currentToolsDirectory.Parent?.FullName;\n+                }\n             }\n \n-            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)\n+            if (MSBuildToolsDirectoryRoot != null)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "So should this say mode != BuildEnvironmentMode.SDK then?",
              "createdAt": "2022-08-11T19:27:32Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,16 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase) ||\n+                    string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    MSBuildToolsDirectoryRoot = currentToolsDirectory.Parent?.FullName;\n+                }\n             }\n \n-            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)\n+            if (MSBuildToolsDirectoryRoot != null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "If there was one, yep! This change should be minimal though, since we're servicing",
              "createdAt": "2022-08-11T19:46:21Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -550,9 +550,16 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n             {\n                 // In the .NET SDK, there's one copy of MSBuild.dll and it's in the root folder.\n                 MSBuildToolsDirectoryRoot = CurrentMSBuildToolsDirectory;\n+\n+                // If we're standalone, we might not be in the SDK. Rely on folder paths at this point.\n+                if (string.Equals(currentToolsDirectory.Name, \"amd64\", StringComparison.OrdinalIgnoreCase) ||\n+                    string.Equals(currentToolsDirectory.Name, \"arm64\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    MSBuildToolsDirectoryRoot = currentToolsDirectory.Parent?.FullName;\n+                }\n             }\n \n-            if (mode == BuildEnvironmentMode.VisualStudio && MSBuildToolsDirectoryRoot != null)\n+            if (MSBuildToolsDirectoryRoot != null)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Thanks for remembering \ud83d\ude42",
              "createdAt": "2022-08-15T15:35:00Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -2,7 +2,7 @@\n <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->\n <Project>\n   <PropertyGroup>\n-    <VersionPrefix>17.3.0</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n+    <VersionPrefix>17.3.1</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}