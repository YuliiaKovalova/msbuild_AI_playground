{
  "number": 10494,
  "title": "Fix internal error of outOfProc BuildCheck execution",
  "body": "Fixes #10176\r\n\r\n### Context\r\nWhen BuildCheck was run in scope of out of pross execution, using BuildContext form the event was causing error `\"ContextID {0} should have been in the ID-to-project file mapping but wasn't!\".`\r\n\r\n### Changes Made\r\nJan's assumption was correct here:\r\nhttps://github.com/dotnet/msbuild/issues/10176#issuecomment-2142664255\r\nLoggingService on the receiving side doesn't have `_projectFileMap` populated, so on the attempt to read from it, exception was thrown.\r\n\r\nIn the changes, I provide `projectPath `for all `BuildCheckEvents `and fill the map with the needed data in `AnalysisLoggingContext `(ContextID to projectPath)\r\n\r\n### Testing\r\nThe existing test was covering this gap\r\nhttps://github.com/dotnet/msbuild/blob/6bc91d5e2d3d8a199fdbe367ed015b55daf57046/src/BuildCheck.UnitTests/EndToEndTests.cs#L40\r\n\r\nOnce I removed workaround https://github.com/dotnet/msbuild/pull/10184/commits/bff8a4ea049f8c2c1ac7a84a9cb1e1c8a902c87d, it failed.\r\n",
  "state": "CLOSED",
  "createdAt": "2024-08-07T12:26:46Z",
  "updatedAt": "2024-08-08T08:06:24Z",
  "closedAt": "2024-08-07T15:57:06Z",
  "mergedAt": null,
  "additions": 112,
  "deletions": 59,
  "changedFiles": 16,
  "headRefName": "dev/ykovalova/display_env_value_on_verbose_only",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d2c8d2f485faa7363040e83e251b668d28e54b09",
          "message": "remove value reporting",
          "committedDate": "2024-08-06T12:28:47Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "295aaf3c52e1a4cc3c375932dfa26e91e78075c8",
          "message": "adjust the rule text based on custom configuration",
          "committedDate": "2024-08-06T14:45:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "687abc1bd75f96b096405190850dcc9b137113da",
          "message": "Merge branch 'main' into dev/ykovalova/display_env_value_on_verbose_only",
          "committedDate": "2024-08-06T16:37:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99060f0d03dcb557c867b0627bee93c22634d696",
          "message": "add test coverage for custom config in NoEnvironmentVariablePropertyAnalyzer",
          "committedDate": "2024-08-06T17:20:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e40b75a3df83b70e73a51ed372ad2db8e5a83900",
          "message": "fix review comment related to message formatting",
          "committedDate": "2024-08-07T07:48:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a50c410691ad31ccdda5609dad67898e47711ebb",
          "message": "fix BuildContext for out of process buildcheck execution",
          "committedDate": "2024-08-07T12:10:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd927a9073ee6daaabb14752618bfb4256cf22c1",
          "message": "merge",
          "committedDate": "2024-08-07T12:11:19Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "869771c172d9dc32a609ea7f084bd91e966a2a79",
          "message": "fix the tests - respect error severity",
          "committedDate": "2024-08-07T14:25:50Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25434c5c7f3095ddc770c36800699ffe350f247c",
          "message": "fix test",
          "committedDate": "2024-08-07T14:56:34Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I have better idea!",
        "createdAt": "2024-08-07T15:57:06Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's keep the naming and comment consistent with the https://github.com/dotnet/msbuild/blob/6bc91d5e2d3d8a199fdbe367ed015b55daf57046/src/Build/BuildCheck/OM/BuildCheckDataContext.cs#L30-L33\r\n\r\n(as that's where the data should come from)",
              "createdAt": "2024-08-07T15:17:37Z",
              "path": "src/Build/BuildCheck/API/BuildCheckResult.cs",
              "diffHunk": "@@ -44,6 +42,11 @@ internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)\n     /// </summary>\n     public ElementLocation Location { get; }\n \n+    /// <summary>\n+    /// Gets project file path where the finding was reported.\n+    /// </summary>\n+    public string ProjectFile { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably do this only for `ProjectStartedEventArgs` - as after that one, all other events for that build request should contain the known ProjectContextId, that we'd check unnecesarily",
              "createdAt": "2024-08-07T15:20:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -39,4 +41,25 @@ public void DispatchAsCommentFromText(MessageImportance importance, string messa\n     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n         => loggingService\n             .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);\n+\n+    private bool ShouldUpdateProjectFileMap(BuildEventArgs buildEvent) => buildEvent.BuildEventContext != null &&\n+               buildEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId &&\n+               !loggingService.ProjectFileMap.ContainsKey(buildEvent.BuildEventContext.ProjectContextId);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It feels that the three methods should be merged together and perform the least expensive checks first (e.g. now we look into dictionary, and only then try to extract the file from event - that we extract only for specific event types - so we should probably frontload the type check)",
              "createdAt": "2024-08-07T15:22:49Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -39,4 +41,25 @@ public void DispatchAsCommentFromText(MessageImportance importance, string messa\n     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n         => loggingService\n             .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);\n+\n+    private bool ShouldUpdateProjectFileMap(BuildEventArgs buildEvent) => buildEvent.BuildEventContext != null &&\n+               buildEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId &&\n+               !loggingService.ProjectFileMap.ContainsKey(buildEvent.BuildEventContext.ProjectContextId);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do we support only those event types?",
              "createdAt": "2024-08-07T15:23:18Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -39,4 +41,25 @@ public void DispatchAsCommentFromText(MessageImportance importance, string messa\n     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n         => loggingService\n             .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);\n+\n+    private bool ShouldUpdateProjectFileMap(BuildEventArgs buildEvent) => buildEvent.BuildEventContext != null &&\n+               buildEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId &&\n+               !loggingService.ProjectFileMap.ContainsKey(buildEvent.BuildEventContext.ProjectContextId);\n+\n+    private void UpdateProjectFileMap(BuildEventArgs buildEvent)\n+    {\n+        string file = GetFileFromBuildEvent(buildEvent);\n+        if (!string.IsNullOrEmpty(file))\n+        {\n+            loggingService.ProjectFileMap[buildEvent.BuildEventContext!.ProjectContextId] = file;\n+        }\n+    }\n+\n+    private string GetFileFromBuildEvent(BuildEventArgs buildEvent) => buildEvent switch",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "because project file can be defined only in these events (and inherited from them) https://github.com/dotnet/msbuild/blob/6bc91d5e2d3d8a199fdbe367ed015b55daf57046/src/Build/BackEnd/Components/Logging/LoggingService.cs#L1198",
              "createdAt": "2024-08-07T15:31:33Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -39,4 +41,25 @@ public void DispatchAsCommentFromText(MessageImportance importance, string messa\n     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n         => loggingService\n             .LogErrorFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);\n+\n+    private bool ShouldUpdateProjectFileMap(BuildEventArgs buildEvent) => buildEvent.BuildEventContext != null &&\n+               buildEvent.BuildEventContext.ProjectContextId != BuildEventContext.InvalidProjectContextId &&\n+               !loggingService.ProjectFileMap.ContainsKey(buildEvent.BuildEventContext.ProjectContextId);\n+\n+    private void UpdateProjectFileMap(BuildEventArgs buildEvent)\n+    {\n+        string file = GetFileFromBuildEvent(buildEvent);\n+        if (!string.IsNullOrEmpty(file))\n+        {\n+            loggingService.ProjectFileMap[buildEvent.BuildEventContext!.ProjectContextId] = file;\n+        }\n+    }\n+\n+    private string GetFileFromBuildEvent(BuildEventArgs buildEvent) => buildEvent switch",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}