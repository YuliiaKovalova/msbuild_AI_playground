{
  "number": 6769,
  "title": "Block Execution of GetType() in Evaluation",
  "body": "Stop allowing execution of `GetType()`. This can lead to calling methods that really should not be called during evaluation.",
  "state": "MERGED",
  "createdAt": "2021-08-18T01:22:39Z",
  "updatedAt": "2021-12-29T18:54:42Z",
  "closedAt": "2021-08-23T20:19:43Z",
  "mergedAt": "2021-08-23T20:19:43Z",
  "additions": 42,
  "deletions": 4,
  "changedFiles": 4,
  "headRefName": "reject-gettype-property",
  "isDraft": false,
  "author": {
    "login": "AndyGerlicher"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "be92f497b581d50835a3c40911dc477dad06a687",
          "message": "Block Execution of GetType() in Evaluation\n\nStop allowing execution of GetType. This can lead to a lot of methods\navailable that should not be called during evaluation.",
          "committedDate": "2021-08-18T02:26:06Z",
          "author": {
            "name": "Andy Gerlicher",
            "email": "angerlic@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9fbd47faef9591ea40a319e64cf851385362b498",
          "message": "Avoid using GetType in a unit test",
          "committedDate": "2021-08-18T02:53:28Z",
          "author": {
            "name": "Andy Gerlicher",
            "email": "angerlic@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "\ud83e\udd23 ",
        "createdAt": "2021-08-18T01:29:56Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> \ud83e\udd23\r\n\r\n@jeffkl  Thought you might appreciate this \ud83d\ude04 \r\n\r\n```\r\nd:\\src\\CBT.Core\\src>d:\\src\\msbuild.fork\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\MSBuild.exe dirs.proj\r\nMicrosoft (R) Build Engine version 17.0.0-dev-21417-01+be92f497b for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 8/17/2021 7:31:33 PM.\r\nProject \"d:\\src\\CBT.Core\\src\\dirs.proj\" on node 1 (default targets).\r\nd:\\src\\CBT.Core\\.build\\CBT\\build.props(72,26): error MSB4185: The function \"GetType\" on type \"System.String\" is not available\r\n for execution as an MSBuild property function. [d:\\src\\CBT.Core\\src\\dirs.proj]\r\nDone Building Project \"d:\\src\\CBT.Core\\src\\dirs.proj\" (default targets) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"d:\\src\\CBT.Core\\src\\dirs.proj\" (default target) (1) ->\r\n  d:\\src\\CBT.Core\\.build\\CBT\\build.props(72,26): error MSB4185: The function \"GetType\" on type \"System.String\" is not availab\r\nle for execution as an MSBuild property function. [d:\\src\\CBT.Core\\src\\dirs.proj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.50\r\n```",
        "createdAt": "2021-08-18T02:33:57Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I think we decided to take it as long as it made it in for preview 4 to give time for feedback given it was not particularly safe to do this. I don't think there's a good way of finding out if people are calling this already and how often.",
        "createdAt": "2021-08-19T22:08:30Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "Can ya'll take a quick look through these queries to see if any critical areas are impacted (eg CBT):\r\nhttps://github.com/search?q=%22gettype%28%29%22+extension%3Aprops&type=Code\r\nhttps://github.com/search?q=%22gettype%28%29%22+extension%3Atargets&type=Code\r\n\r\nLooks like a handful of impacted customers but not many.",
        "createdAt": "2021-08-19T22:11:37Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "Those links look fine. I did a spot check of `.csproj` as well and didn't see anything, although it's harder as GetType is common to have as a file/project name.",
        "createdAt": "2021-08-19T22:24:51Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Breaking change documentation for this is here: https://docs.microsoft.com/dotnet/core/compatibility/sdk/6.0/calling-gettype-property-functions",
        "createdAt": "2021-12-29T18:54:42Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is needed because the type of the object in my test was `System.String` and in `#DEBUG` it thought it was an invalid `ToString()` call on a resource. That ended up throwing _another_ invalid project exception which caused a stack overflow.",
              "createdAt": "2021-08-18T01:25:05Z",
              "path": "src/Shared/ResourceUtilities.cs",
              "diffHunk": "@@ -231,12 +231,14 @@ internal static string FormatString(string unformatted, params object[] args)\n                 // FormatResourceString calls ToString() which returns the full name of the type!\n                 foreach (object param in args)\n                 {\n-                    // Check it has a real implementation of ToString()\n+                    // Check it has a real implementation of ToString() and the type is not actually System.String\n                     if (param != null)\n                     {\n-                        if (String.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal))",
              "author": {
                "login": "AndyGerlicher"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we modify the message to mention that there's a way to enable all methods with  `Traits.Instance.EnableAllPropertyFunctions`? It would be less painful for customers this way.",
              "createdAt": "2021-08-20T23:39:39Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3352,6 +3352,12 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,\n                     }\n                     else\n                     {\n+                        // Check that the function that we're going to call is valid to call\n+                        if (!IsInstanceMethodAvailable(_methodMethodName))\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"InvalidFunctionMethodUnavailable\", _methodMethodName, _receiverType.FullName);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}