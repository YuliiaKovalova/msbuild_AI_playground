{
  "number": 6533,
  "title": "Normalize RAR output paths",
  "body": "Fixes #6501\r\n\r\n### Context\r\nRAR can output paths not in their canonical forms. This allows for there to be multiple identical paths, only distinguished by extra directory separator characters, for example, which can lead to duplicate work or failing to find paths in a cache.\r\n\r\n### Changes Made\r\nThis normalizes all paths output by RAR, ensuring any given path is in its canonical form.\r\n\r\n### Testing\r\nTo follow.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-07T21:16:32Z",
  "updatedAt": "2021-07-19T19:22:01Z",
  "closedAt": "2021-07-19T19:22:01Z",
  "mergedAt": "2021-07-19T19:22:01Z",
  "additions": 18,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "dedup-rar-paths",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d47bf262ed5b4b7ba516c3189cb3b52b455ab703",
          "message": "Normalize a different way",
          "committedDate": "2021-07-09T17:43:30Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8daaeb4a678d2ad8937d25fe6fb2b0297d8cdddf",
          "message": "Add comment + put under change wave",
          "committedDate": "2021-07-09T17:58:35Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fae8a6f4f903bce742673202f651f8e53a00442c",
          "message": "Fix missing Reference issue\n\nSome references can be resolved later. I'd initially missed it because References wasn't invoked directly, but rather a Reference was retrieved then later modified. I believe this is the only place that happens, however. The first check essentially checks whether it has already been resolved, and the second place where the ChangeWave was enabled ensures it is canonicalized.",
          "committedDate": "2021-07-09T23:04:28Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed55465317fd1611bbb6c9eb945aeaebaabac17a",
          "message": "Expose simple path normalization method",
          "committedDate": "2021-07-12T18:07:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eecf857abd1fa956dd6745d681edcd6feeb5656a",
          "message": "Add changed fields",
          "committedDate": "2021-07-13T15:54:44Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "So I made tests pass and looked at what the outputs look like. It looks correct as far as paths having been converted to full, normalized paths, but it does look a little odd. I'm wondering if I should have a somewhat simpler \"remove extra slashes and `folderName\\..` bits\" call instead.\r\n\r\nAlso, this looks like a breaking change to me. I routed all the normalization through a single function, so it's really easy to add a change wave. I think I should. Opposition?",
        "createdAt": "2021-06-07T22:03:20Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I got a little carried away with various cleanup things in ReferenceTable. If it were just one or two changes, I'd push for them to stay in this PR. With this many, though, I'm fining moving them all to a separate PR to make this cleaner. Fair warning, though: that might lead to more random changes \ud83d\ude42\r\n\r\nAlso, the last is maybe questionable.",
        "createdAt": "2021-07-08T00:14:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yes, please reduce this PR to just the change needed.",
        "createdAt": "2021-07-09T14:53:45Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "None of the normalization should run more than once per RAR execution except FilesWritten and UnresolvedAssemblyConflicts, which run once per access. My hunch is that that isn't an issue, but if it is, I'm happy to cache it so we only do that once.",
              "createdAt": "2021-06-07T21:19:39Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -993,7 +993,7 @@ public ITaskItem[] SuggestedRedirects\n         public ITaskItem[] FilesWritten\n         {\n             set { /*Do Nothing, Inputs not Allowed*/ }\n-            get { return _filesWritten.ToArray(); }\n+            get { return ReferenceTable.NormalizeAsArray(_filesWritten); }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Let's cache it. Everything about RAR is a huge perf bottleneck.",
              "createdAt": "2021-06-07T23:52:10Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -993,7 +993,7 @@ public ITaskItem[] SuggestedRedirects\n         public ITaskItem[] FilesWritten\n         {\n             set { /*Do Nothing, Inputs not Allowed*/ }\n-            get { return _filesWritten.ToArray(); }\n+            get { return ReferenceTable.NormalizeAsArray(_filesWritten); }",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd try to avoid unnecessary allocations here as it's a hot path. I'd pre-allocate the final array, and the `for` over each item and fill it in (to even avoid the allocation for the foreach iterator).",
              "createdAt": "2021-06-07T23:50:49Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2687,6 +2687,15 @@ internal void GetReferenceItems\n             copyLocalFiles = copyLocalItems.ToArray();\n         }\n \n+        internal static ITaskItem[] NormalizeAsArray(List<ITaskItem> items)\n+        {\n+            return items.Select(ti =>\n+            {\n+                ti.ItemSpec = FileUtilities.NormalizePath(ti.ItemSpec);\n+                return ti;\n+            }).ToArray();",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Alternatively, an IEqualityComparer<T> that ignores trailing directory separators canbe used.",
              "createdAt": "2021-06-08T10:37:39Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2687,6 +2687,15 @@ internal void GetReferenceItems\n             copyLocalFiles = copyLocalItems.ToArray();\n         }\n \n+        internal static ITaskItem[] NormalizeAsArray(List<ITaskItem> items)\n+        {\n+            return items.Select(ti =>\n+            {\n+                ti.ItemSpec = FileUtilities.NormalizePath(ti.ItemSpec);\n+                return ti;\n+            }).ToArray();",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "That would miss that C:\\\\\\\\\\\\foo is the same as C:\\foo",
              "createdAt": "2021-06-08T14:15:10Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2687,6 +2687,15 @@ internal void GetReferenceItems\n             copyLocalFiles = copyLocalItems.ToArray();\n         }\n \n+        internal static ITaskItem[] NormalizeAsArray(List<ITaskItem> items)\n+        {\n+            return items.Select(ti =>\n+            {\n+                ti.ItemSpec = FileUtilities.NormalizePath(ti.ItemSpec);\n+                return ti;\n+            }).ToArray();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this only accessed once? because if it is read twice or more, we'll do the work every time.",
              "createdAt": "2021-06-07T23:51:34Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1021,7 +1021,7 @@ public String DependsOnNETStandard\n         /// been outputted in MSB3277. Otherwise empty.\n         /// </summary>\n         [Output]\n-        public ITaskItem[] UnresolvedAssemblyConflicts => _unresolvedConflicts.ToArray();\n+        public ITaskItem[] UnresolvedAssemblyConflicts => ReferenceTable.NormalizeAsArray(_unresolvedConflicts);",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "It could be accessed many times, depending on the user's use case. I can cache it.",
              "createdAt": "2021-06-08T00:40:53Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1021,7 +1021,7 @@ public String DependsOnNETStandard\n         /// been outputted in MSB3277. Otherwise empty.\n         /// </summary>\n         [Output]\n-        public ITaskItem[] UnresolvedAssemblyConflicts => _unresolvedConflicts.ToArray();\n+        public ITaskItem[] UnresolvedAssemblyConflicts => ReferenceTable.NormalizeAsArray(_unresolvedConflicts);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        internal static ITaskItem[] NormalizePathsAsArray(List<ITaskItem> items)\r\n```\r\n\r\nOR even simpler...\r\n\r\n```suggestion\r\n        internal static ITaskItem[] NormalizePaths(List<ITaskItem> items)\r\n```\r\n\r\nHow about this?",
              "createdAt": "2021-06-15T02:26:21Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2687,6 +2687,17 @@ internal void GetReferenceItems\n             copyLocalFiles = copyLocalItems.ToArray();\n         }\n \n+        internal static ITaskItem[] NormalizeAsArray(List<ITaskItem> items)",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "I don't know if you saw, but I took the middle suggestion. I do want to mention \"Array,\" since otherwise it would be very non-obvious (without looking at its return type) that it's returning an array instead of just normalizing it.",
              "createdAt": "2021-06-18T23:16:02Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2687,6 +2687,17 @@ internal void GetReferenceItems\n             copyLocalFiles = copyLocalItems.ToArray();\n         }\n \n+        internal static ITaskItem[] NormalizeAsArray(List<ITaskItem> items)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "??",
              "createdAt": "2021-06-15T21:48:43Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs",
              "diffHunk": "@@ -64,7 +64,7 @@ public void ConflictBetweenNonCopyLocalDependencies()\n             Assert.True(ContainsItem(t.ResolvedDependencyFiles, s_myLibraries_V2_GDllPath));\n \n             Assert.Single(t.SuggestedRedirects);\n-            Assert.True(ContainsItem(t.SuggestedRedirects, @\"D, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\")); // \"Expected to find suggested redirect, but didn't\"\n+            Assert.True(ContainsItem(t.SuggestedRedirects, @$\"{\"D\"}, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\")); // \"Expected to find suggested redirect, but didn't\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I can undo this one. An earlier version required a legitimate test change but no more.",
              "createdAt": "2021-06-16T05:58:46Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/SuggestedRedirects.cs",
              "diffHunk": "@@ -64,7 +64,7 @@ public void ConflictBetweenNonCopyLocalDependencies()\n             Assert.True(ContainsItem(t.ResolvedDependencyFiles, s_myLibraries_V2_GDllPath));\n \n             Assert.Single(t.SuggestedRedirects);\n-            Assert.True(ContainsItem(t.SuggestedRedirects, @\"D, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\")); // \"Expected to find suggested redirect, but didn't\"\n+            Assert.True(ContainsItem(t.SuggestedRedirects, @$\"{\"D\"}, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\")); // \"Expected to find suggested redirect, but didn't\"",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we be concerned that we're changing the sort order here?",
              "createdAt": "2021-06-15T21:50:06Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);\n+            serializationAssemblyFiles = NormalizePathsAsArray(serializationAssemblyItems);\n+            scatterFiles = NormalizePathsAsArray(scatterItems);\n \n              // Sort for stable outputs. (These came from a dictionary, which has undefined enumeration order.)\n             Array.Sort(primaryFiles, TaskItemSpecFilenameComparer.GenericComparer);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "From the comment, I don't _think_ so. The comment and the sort have been there since the initial (GitHub) code commit, but it sounds like it's important that if you run RAR twice, the order is the same, but not so important what that order actually is. This maintains that there is a correct ordering, albeit reordering it slightly.",
              "createdAt": "2021-06-16T18:53:27Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);\n+            serializationAssemblyFiles = NormalizePathsAsArray(serializationAssemblyItems);\n+            scatterFiles = NormalizePathsAsArray(scatterItems);\n \n              // Sort for stable outputs. (These came from a dictionary, which has undefined enumeration order.)\n             Array.Sort(primaryFiles, TaskItemSpecFilenameComparer.GenericComparer);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This condition surprises me. Is a length change the only way it can be invalidated?\r\n\r\nWhat is the reason to do this caching rather than just do it? This field will be read once on task completion in the normal case, right?",
              "createdAt": "2021-06-15T21:51:40Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -986,14 +987,23 @@ public ITaskItem[] SuggestedRedirects\n         /// </summary>\n         private List<ITaskItem> _filesWritten = new List<ITaskItem>();\n \n+        private ITaskItem[] _filesWrittenArray = null;\n+\n         /// <summary>\n         /// The names of all files written to disk.\n         /// </summary>\n         [Output]\n         public ITaskItem[] FilesWritten\n         {\n             set { /*Do Nothing, Inputs not Allowed*/ }\n-            get { return _filesWritten.ToArray(); }\n+            get\n+            {\n+                if (_filesWrittenArray?.Length != _filesWritten.Count)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I originally had it without the caching but was told I should change it. See https://github.com/dotnet/msbuild/pull/6533#discussion_r646947771\r\n\r\nHaving a length check was probably a bad plan. It would be quite expensive to do a proper check, though, so I think I should just remove the caching here.",
              "createdAt": "2021-06-16T05:57:36Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -986,14 +987,23 @@ public ITaskItem[] SuggestedRedirects\n         /// </summary>\n         private List<ITaskItem> _filesWritten = new List<ITaskItem>();\n \n+        private ITaskItem[] _filesWrittenArray = null;\n+\n         /// <summary>\n         /// The names of all files written to disk.\n         /// </summary>\n         [Output]\n         public ITaskItem[] FilesWritten\n         {\n             set { /*Do Nothing, Inputs not Allowed*/ }\n-            get { return _filesWritten.ToArray(); }\n+            get\n+            {\n+                if (_filesWrittenArray?.Length != _filesWritten.Count)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, let's remove it, unless there are in-code accesses to these getters. The engine itself should access them only once/task invocation.",
              "createdAt": "2021-06-16T16:52:45Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -986,14 +987,23 @@ public ITaskItem[] SuggestedRedirects\n         /// </summary>\n         private List<ITaskItem> _filesWritten = new List<ITaskItem>();\n \n+        private ITaskItem[] _filesWrittenArray = null;\n+\n         /// <summary>\n         /// The names of all files written to disk.\n         /// </summary>\n         [Output]\n         public ITaskItem[] FilesWritten\n         {\n             set { /*Do Nothing, Inputs not Allowed*/ }\n-            get { return _filesWritten.ToArray(); }\n+            get\n+            {\n+                if (_filesWrittenArray?.Length != _filesWritten.Count)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these changes related? Can you separate them out?",
              "createdAt": "2021-06-15T21:52:46Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2456,17 +2475,21 @@ out _copyLocalFiles\n                     bool useNetStandard = false;\n                     foreach (var reference in dependencyTable.References.Keys)\n                     {\n-                        if (string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))\n+                        if (!useSystemRuntime && string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "They are separated out into their own commit.",
              "createdAt": "2021-06-16T05:53:24Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2456,17 +2475,21 @@ out _copyLocalFiles\n                     bool useNetStandard = false;\n                     foreach (var reference in dependencyTable.References.Keys)\n                     {\n-                        if (string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))\n+                        if (!useSystemRuntime && string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "ok, can you rebase and squash then if you want to preserve that commit?",
              "createdAt": "2021-06-16T16:53:02Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2456,17 +2475,21 @@ out _copyLocalFiles\n                     bool useNetStandard = false;\n                     foreach (var reference in dependencyTable.References.Keys)\n                     {\n-                        if (string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))\n+                        if (!useSystemRuntime && string.Equals(SystemRuntimeAssemblyName, reference.Name, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Look at how hard it would be to move the normalization to the input layer (so that it gets put in the cache).",
              "createdAt": "2021-06-21T15:34:47Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "After looking at this bit, I don't think this is an easy change because in addition to finding canonical forms for all input paths, we would have to find canonical forms for dependencies, and that would get complicated.",
              "createdAt": "2021-07-07T18:32:37Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think you should normalize _task_ inputs, but the inputs to the cache--the outputs of the task, but at the layer where they're created, not at output time.",
              "createdAt": "2021-07-07T18:37:42Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, that clarifies things, thank you. Now I'm back to \"seems like a good move, but I have no idea how hard that is.\"",
              "createdAt": "2021-07-07T18:57:53Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ok, I _think_ the newest changes should be equivalent, but I'm not at all confident.\r\n\r\nIt seems like the only way anything is added to References is via that one AddReference method. I'm also looking to see if I can move it any earlier. At worst, this is cleaner.",
              "createdAt": "2021-07-07T23:35:34Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Important part of the change is:\r\nhttps://github.com/dotnet/msbuild/pull/6533/commits/8ed6c4bdde868c1e24be3b3c279ac633a51d07bf",
              "createdAt": "2021-07-07T23:36:44Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2667,12 +2667,12 @@ internal void GetReferenceItems\n                 }\n             }\n \n-            primaryFiles = primaryItems.ToArray();\n-            dependencyFiles = dependencyItems.ToArray();\n-            relatedFiles = relatedItems.ToArray();\n-            satelliteFiles = satelliteItems.ToArray();\n-            serializationAssemblyFiles = serializationAssemblyItems.ToArray();\n-            scatterFiles = scatterItems.ToArray();\n+            primaryFiles = NormalizePathsAsArray(primaryItems);\n+            dependencyFiles = NormalizePathsAsArray(dependencyItems);\n+            relatedFiles = NormalizePathsAsArray(relatedItems);\n+            satelliteFiles = NormalizePathsAsArray(satelliteItems);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "comment reasoning please -- \"Saves effort and makes deduplication possible downstream\" or something like that?\r\n\r\nAlso changewave it? I don't know why it would cause problems but . . .",
              "createdAt": "2021-07-09T17:48:54Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -407,6 +407,7 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen\n                 }\n             }\n \n+            reference.FullPath = FileUtilities.NormalizePath(reference.FullPath);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Setting the `FullPath` prop has a side-effect of re-running the `IsWinMDFile` check. Do you think it would be worth optimizing? Perhaps by introducing a \"NormalizeFullPath\" method on `Reference`.",
              "createdAt": "2021-07-12T15:32:18Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -407,6 +407,12 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen\n                 }\n             }\n \n+            if (reference.FullPath.Length > 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))\n+            {\n+                // Saves effort and makes deduplication possible downstream\n+                reference.FullPath = FileUtilities.NormalizePath(reference.FullPath);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sounds reasonable to me! I only did it in one case because the other case had previously set FullPath explicitly, so it was intentionally running the check.",
              "createdAt": "2021-07-12T18:08:01Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -407,6 +407,12 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen\n                 }\n             }\n \n+            if (reference.FullPath.Length > 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))\n+            {\n+                // Saves effort and makes deduplication possible downstream\n+                reference.FullPath = FileUtilities.NormalizePath(reference.FullPath);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thank you! I'm curious about these statements:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d150e93ff1f8828bb8b0b5fda64f4582d61a7e73/src/Tasks/AssemblyDependency/Reference.cs#L491-L493\r\n\r\nThey were executed in the previous version. Now you set only `_fullPath` and leave these fields unchanged. Intentional?\r\n\r\n",
              "createdAt": "2021-07-13T07:39:08Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -407,6 +407,12 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen\n                 }\n             }\n \n+            if (reference.FullPath.Length > 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))\n+            {\n+                // Saves effort and makes deduplication possible downstream\n+                reference.FullPath = FileUtilities.NormalizePath(reference.FullPath);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I don't think _fileNameWithoutExtension should care, and I added the other two. Looking through the rest of the method, if the _fullPath was not null or empty before, this shouldn't make it null or empty, so I think that should be unchanged. Whether something is a winmd file or not also shouldn't care if the path is normalized or not.",
              "createdAt": "2021-07-13T15:58:44Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -407,6 +407,12 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen\n                 }\n             }\n \n+            if (reference.FullPath.Length > 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))\n+            {\n+                // Saves effort and makes deduplication possible downstream\n+                reference.FullPath = FileUtilities.NormalizePath(reference.FullPath);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}