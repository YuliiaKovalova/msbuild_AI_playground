{
  "number": 5718,
  "title": "Create ProjectImports.zip in memory instead of on disk",
  "body": "Fixes #5383 \r\n\r\nThe behavior of /bl with Embed (which is the default) is such that it will create a zip file named msbuild.ProjectImports.zip next to the binlog, and when the build completes it will embed the zip into the binlog and delete the binlog.\r\n\r\nThis poses a problem for some processes (which can be called as part of a build) that expect all files in the local directory to be accessible. Since MSBuild is holding open this ProjectImports.zip file, a process like React Native's `react-native bundle` command will fail the build due to sharing violations.\r\n\r\nHow tested: Validated with a simple setup of 2 csproj, the first includes the second. Verified that the resulting binlog still includes the imported projects. I changed the closing logic a little because ZipArchive requires to be closed before the data gets flushed to the stream.",
  "state": "MERGED",
  "createdAt": "2020-09-05T09:55:47Z",
  "updatedAt": "2023-01-14T12:23:01Z",
  "closedAt": "2020-09-11T15:47:38Z",
  "mergedAt": "2020-09-11T15:47:38Z",
  "additions": 45,
  "deletions": 28,
  "changedFiles": 2,
  "headRefName": "master",
  "isDraft": false,
  "author": {
    "login": "asklar"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "770532bef5234c21a0fd167493198603ba8646ba",
          "message": "Don't create a ProjectImports.zip file on disk when using /bl with embed",
          "committedDate": "2020-09-05T09:50:23Z",
          "author": {
            "name": "Alexander Sklar",
            "email": "asklar@winse.microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ce661e07eec7fb08452318c76253023d961fce8",
          "message": "Merge branch 'master' of https://github.com/asklar/msbuild",
          "committedDate": "2020-09-05T09:51:13Z",
          "author": {
            "name": "Alexander Sklar",
            "email": "asklar@winse.microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6402a8662c68854798ad957c8eb70b0aba5e8ba",
          "message": "Update src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2020-09-08T19:16:12Z",
          "author": {
            "name": "Alexander Sklar",
            "email": "asklar@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "92ba84eada25930151ada123de907d7a3713deb3",
          "message": "Update src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
          "committedDate": "2020-09-08T19:27:33Z",
          "author": {
            "name": "Alexander Sklar",
            "email": "asklar@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5718) <br/>All CLA requirements met.",
        "createdAt": "2020-09-05T09:56:04Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5718) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5718) before we can accept your contribution.<br/><br/>:x: asklar [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5718)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=5718) it.</sub>",
        "createdAt": "2020-09-05T09:56:04Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "CC @KirillOsenkov ",
        "createdAt": "2020-09-05T10:00:14Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "I did some research on binlogs of various sizes and the zip archive size didn't exceed 2.5 MB, so I think there's no need to worry about increased memory consumption, it's negligible.\r\n\r\nWhen I initially wrote this I had no idea how large this archive is going to be in practice for people's builds, but fortunately it looks like those fears were unfounded now that we have a large collection of real-life binlogs (largest I have is 3.2GB with 2.5 MB archive size).",
        "createdAt": "2020-09-05T22:10:07Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@asklar you'll need to sign the agreement here:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/92314224-08c6e800-ef8a-11ea-8e4a-7591c008017d.png)\r\n",
        "createdAt": "2020-09-05T22:11:16Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "thanks @KirillOsenkov I signed it yesterday, it looks like the check has a race condition where it shows unsigned _and_ signed too? :)\r\n\r\n![image](https://user-images.githubusercontent.com/22989529/92314286-8f7bc500-ef8a-11ea-897c-95345a57cc93.png)\r\n",
        "createdAt": "2020-09-05T22:15:04Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "@rainersigwald I'm trying to find which version of msbuild / VS included my change, I couldn't find it in the notes for any release, could you help me?",
        "createdAt": "2021-10-24T10:13:39Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "From the tags on the commit https://github.com/dotnet/msbuild/commit/ec61b6fdf48021fca3e94d12ded473b25ca5db9b it looks like it first appeared in 16.8.",
        "createdAt": "2021-10-25T14:09:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                return Array.Empty<byte>;\r\n```\r\n\r\n?",
              "createdAt": "2020-09-08T19:09:54Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -15,10 +15,30 @@ namespace Microsoft.Build.Logging\n     /// </summary>\n     internal class ProjectImportsCollector\n     {\n-        private FileStream _fileStream;\n+        private Stream _stream;\n+        public byte[] GetAllBytes()\n+        {\n+            if (_stream == null)\n+            {\n+                return new byte[0];",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                return Array.Empty<byte>();\r\n```",
              "createdAt": "2020-09-08T19:27:25Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -15,10 +15,30 @@ namespace Microsoft.Build.Logging\n     /// </summary>\n     internal class ProjectImportsCollector\n     {\n-        private FileStream _fileStream;\n+        private Stream _stream;\n+        public byte[] GetAllBytes()\n+        {\n+            if (_stream == null)\n+            {\n+                return Array.Empty<byte>;",
              "author": {
                "login": "asklar"
              }
            },
            {
              "body": "\ud83d\ude05",
              "createdAt": "2020-09-08T19:33:57Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -15,10 +15,30 @@ namespace Microsoft.Build.Logging\n     /// </summary>\n     internal class ProjectImportsCollector\n     {\n-        private FileStream _fileStream;\n+        private Stream _stream;\n+        public byte[] GetAllBytes()\n+        {\n+            if (_stream == null)\n+            {\n+                return Array.Empty<byte>;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\n```suggestion\r\n            if (projectImportsCollector != null && CollectProjectImports == ProjectImportsCollectionMode.Embed)\r\n```",
              "createdAt": "2020-09-10T18:35:20Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -175,20 +175,11 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I think that would be wrong - we want to go into the if so that we call Close on 178 even for ZipFile not just for Embed",
              "createdAt": "2020-09-10T18:55:32Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -175,20 +175,11 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)",
              "author": {
                "login": "asklar"
              }
            },
            {
              "body": "Oh you're completely right. Whoops!",
              "createdAt": "2020-09-10T19:24:58Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -175,20 +175,11 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "_Super_ nit:\r\n```suggestion\r\n        public void Close(bool closeStream = false)\r\n```\r\nPassing a parameter to enable something rather than disable something makes more sense in my opinion.",
              "createdAt": "2020-09-10T18:47:38Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -169,7 +195,7 @@ private static string CalculateArchivePath(string filePath)\n             return archivePath;\n         }\n \n-        public void Close()\n+        public void Close(bool closeStream = true)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "The name of the function is Close so the expectation is that by default it will close and release all resources, so from that angle I think it makes sense to make the `false` case be the special one. Also changing the default means changing the call sites that don't pass closeStream to now pass `true` :)",
              "createdAt": "2020-09-10T19:32:52Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -169,7 +195,7 @@ private static string CalculateArchivePath(string filePath)\n             return archivePath;\n         }\n \n-        public void Close()\n+        public void Close(bool closeStream = true)",
              "author": {
                "login": "asklar"
              }
            }
          ]
        }
      }
    ]
  }
}