{
  "number": 7245,
  "title": "Add solution parser documentation",
  "body": "# Added a new doc called \"solution-parser\"\r\n\r\n### This doc describes expression expansion, build requests and solution file parsing\r\n\r\n\r\n### This commit added a single doc to documentation folder",
  "state": "MERGED",
  "createdAt": "2022-01-10T18:32:00Z",
  "updatedAt": "2023-01-05T08:48:22Z",
  "closedAt": "2022-02-18T21:54:28Z",
  "mergedAt": "2022-02-18T21:54:28Z",
  "additions": 59,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "docs/solution-parser",
  "isDraft": false,
  "author": {
    "login": "dbelik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9165ad5be4a2798d7129555e4b5ecf1ceeffda91",
          "message": "Add \"solution-parser\" doc",
          "committedDate": "2022-01-10T17:55:49Z",
          "author": {
            "name": "dbelik",
            "email": "dbelik"
          }
        }
      },
      {
        "commit": {
          "oid": "d04bb614f4ace5b2a126c8c2ddca218137902740",
          "message": "Replace list bullets with dashes",
          "committedDate": "2022-01-10T18:20:06Z",
          "author": {
            "name": "dbelik",
            "email": "dbelik"
          }
        }
      },
      {
        "commit": {
          "oid": "2896cf63a8e999cf58cff3a698b6be54aba06871",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-01-15T09:38:06Z",
          "author": {
            "name": "Denis Belik",
            "email": "71658215+dbelik@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb29c0f69b11a4f106aae223c10e15be4d949457",
          "message": "Update solution-parser.md",
          "committedDate": "2022-01-15T10:41:06Z",
          "author": {
            "name": "Denis Belik",
            "email": "71658215+dbelik@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29dbb5ec0346a0463a943fc7e3abf733a254789d",
          "message": "Merge branch 'docs/solution-parser' of https://github.com/dbelik/msbuild into dbelik-docs",
          "committedDate": "2022-02-16T17:14:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75f499c83be50b2c592eb413d3073d54722a3345",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dbelik-docs",
          "committedDate": "2022-02-16T17:14:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a11fd85dfba872da04495eed49ecec7a56f10a27",
          "message": "Move to Contributions folder",
          "committedDate": "2022-02-16T17:14:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7245) <br/>All CLA requirements met.",
        "createdAt": "2022-01-10T18:32:14Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7245) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7245) before we can accept your contribution.<br/><br/>:x: dbelik [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7245)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=7245) it.</sub>",
        "createdAt": "2022-01-10T18:32:14Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Thanks @dbelik! Sorry it took a while to get this in \ud83d\ude42",
        "createdAt": "2022-02-18T21:54:44Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThe `Expander` class is used to expand a value from an expression, which can be a function invocation. These expressions (or embedded properties) have the form \"$(Property)\".\r\n```",
              "createdAt": "2022-01-15T00:37:05Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`Expander` handles intrinsic functions, which is a list of built-in functions.\r\n```\r\n\r\nIt _is_ implemented as a bunch of ifs, but I would love for there to be some beautiful way to make that not true, and I don't think that's important for documentation.",
              "createdAt": "2022-01-15T00:38:02Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nMSBuild defines an initial set of properties like `MSBuildFrameworkToolsPath32`, `MSBuildFrameworkToolsPath`, etc.\r\n```\r\n\r\n\"a built-in set\" rather than \"an initial set\"? Unsure which is better.",
              "createdAt": "2022-01-15T00:39:04Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "local what?",
              "createdAt": "2022-01-15T00:40:42Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "[ToolsetDefinitionLocations ](https://github.com/dotnet/msbuild/blob/main/src/Build/Definition/ProjectCollection.cs#L40) lists all available toolset configuration locations. Local means that it reads configuration from current exe path. Should've just called it current exe path \ud83d\ude04 ",
              "createdAt": "2022-01-15T10:39:03Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.",
              "author": {
                "login": "dbelik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- Checks that the current build manager's state is idle;\r\n- Initializes the logging service;\r\n```",
              "createdAt": "2022-01-15T00:41:21Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAfter this setup, `MSBuild` creates build request data from project files or project instances. Data for build requests are stored in `BuildRequestData` objects.\r\n```",
              "createdAt": "2022-01-15T00:41:59Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAfter build data for a request have been prepared, `MSBuild` executes the build. It may execute restore and/or a graph build instead depending on the configuration. It executes the build in the `ExecuteBuild` function, which pends the build request, creating an instance of `BuildSubmission` that represents the build submission.\r\n```",
              "createdAt": "2022-01-15T00:45:41Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAll build submissions are stored in a dictionary in the `BuildManager` class. Then they are added to the work queue.\r\n```",
              "createdAt": "2022-01-15T00:46:10Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThe work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\r\ncreates `BuildRequestBlocker` (blocker) that\u2019s handled in the `HandleNewRequest` function that handles new requests coming from nodes. This function iterates over all build requests in blocker and, for a solution build, loads the solution to the configuration.\r\n```",
              "createdAt": "2022-01-15T00:47:35Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nLater, it parses the solution file to generate a solution wrapper using methods from the `SolutionFile` class. First, the parser parses the file header, which should only contain solution file format version.\r\n```",
              "createdAt": "2022-01-15T00:48:48Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAfter that, it parses all remaining lines. Each such line should start with one of the following strings:\r\n```",
              "createdAt": "2022-01-15T00:49:17Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`ParseProject` parses the first line containing the Project Type GUID, Project name, Relative Path, and Project GUID. Each project type is hardcoded (as defined in `SolutionFile`). Then it parses all project dependencies. After a project has been parsed, it\u2019s added to the list of parsed projects.\r\n```",
              "createdAt": "2022-01-15T00:50:19Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`GlobalSection(SolutionConfigurationPlatforms)` parses the global configuration, such as `Debug|Any CPU = Debug|Any CPU`. It adds these configurations to the solution configuration list.\r\n```",
              "createdAt": "2022-01-15T00:50:46Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as `GlobalSection(ProjectConfigurationPlatforms)`, but it's the global configuration for projects. It adds these configurations to the raw project configuration list.\r\n```",
              "createdAt": "2022-01-15T00:51:35Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.\n+\n+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as\n+previous, but it\u2019s global configuration for projects. It adds these\n+configurations to raw project configuration list.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`GlobalSection(NestedProjects)` finds parent projects for each given project. It stores the parent GUID in nested projects.\r\n```",
              "createdAt": "2022-01-15T00:51:57Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.\n+\n+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as\n+previous, but it\u2019s global configuration for projects. It adds these\n+configurations to raw project configuration list.\n+\n+`GlobalSection(NestedProjects)` finds parent projects to each given project.\n+It stores parent GUID in nested projects.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAfter parsing the solution file, MSBuild processes the project configuration section, updating the project configuration section parsed from a previous solution file.\r\n```",
              "createdAt": "2022-01-15T00:53:02Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.\n+\n+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as\n+previous, but it\u2019s global configuration for projects. It adds these\n+configurations to raw project configuration list.\n+\n+`GlobalSection(NestedProjects)` finds parent projects to each given project.\n+It stores parent GUID in nested projects.\n+\n+After solution file has been parsed, it processes project configuration section.\n+It updates project configuration from earlier parsed solution file.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThen `MSBuild` generates an MSBuild project file from the list of projects and dependencies collected from the solution file.\r\n```",
              "createdAt": "2022-01-15T00:54:07Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.\n+\n+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as\n+previous, but it\u2019s global configuration for projects. It adds these\n+configurations to raw project configuration list.\n+\n+`GlobalSection(NestedProjects)` finds parent projects to each given project.\n+It stores parent GUID in nested projects.\n+\n+After solution file has been parsed, it processes project configuration section.\n+It updates project configuration from earlier parsed solution file.\n+\n+### Solution project generation\n+\n+Then `MSBuild` generates MSBuild project file from a list of projects\n+and dependencies collected from solution file.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWhile generating the MSBuild wrapper project for a solution file, `MSBuild` first collects an ordered list of actual projects then creates a traversal project instance and adds some XML to it. Then it emits a solution metaproject (if it was specified) from that traversal project. It does not write this project to disk unless specified. Finally, it builds the metaproject.\r\n```",
              "createdAt": "2022-01-15T00:58:03Z",
              "path": "documentation/solution-parser.md",
              "diffHunk": "@@ -0,0 +1,91 @@\n+# Solution Parser\n+\n+## Expander\n+\n+`Expander` class is used to expand value from an expression, which can\n+be function invocation. These expression (or embedded properties)\n+have form - \"$(property)\".\n+\n+`Expander` handles intrinsic functions, which is a list of built-in functions\n+(bunch of ifs).\n+\n+MSBuild defines initial set of properties, like `MSBuildFrameworkToolsPath32`,\n+`MSBuildFrameworkToolsPath`, etc.\n+\n+Tools configuration can come from configuration file, registry and local.\n+\n+## Building\n+\n+Function `BeginBuild` prepares `BuildManager` to receive build requests, which:\n+- Attaches debugger;\n+- Checks that current build manager's state is idle;\n+- Initializes logging service;\n+- Initializes caches;\n+- Registers packet handlers.\n+\n+After this setup, `MSBuild` creates build request data from project\n+files or project instances. Data for build requests is stored in `BuildRequestData` class.\n+\n+After build data for request has been prepared, `MSBuild` executes build (notice that\n+it can also execute restore and graphbuild depending on configuration). It executes\n+build in `ExecuteBuild` function. This function pends build request, which creates\n+an instance of `BuildSubmission` that represent build submission.\n+\n+All build submissions are stored in dictionary in `BuildManager` class. Then\n+they are added to the work queue.\n+\n+## Execution\n+\n+Work queue dispatches build submissions. Function `IssueBuildSubmissionToSchedulerImpl`\n+creates `BuildRequestBlocker` (blocker) that\u2019s handled in `HandleNewRequest` function\n+that handles new requests coming from nodes.\n+This function iterates over all build requests in blocker and, if\n+request is building a solution then it loads this solution to configuration.\n+\n+### Solution file parser\n+\n+Later, it parses solution file to generate solution wrapper using `SolutionFile` class.\n+Parser function first parser file header, which should only contain solution\n+file format version.\n+\n+After that, it parses all remaining lines. Each such line should start with\n+one of the following strings:\n+- `Project(` - calls `ParseProject`\n+- `GlobalSection(NestedProject)` - calls `ParseNestedProjects`\n+- `GlobalSection(SolutionConfigurationPlatforms)` - calls `ParseSolutionConfiguration`\n+- `GlobalSection(ProjectConfigurationPlatforms)` - calls `ProjectConfigurationPlatforms`\n+- `VisualStudioVersion` - calls `ParseVisualStudioVersion`\n+\n+`ParseProject` parses first line which contains Project Type GUID,\n+Project name, Relative Path, Project GUID. Each project type is hardcoded (defined\n+in `SolutionFile`). Then it parses all project dependencies. After project has\n+been parsed, it\u2019s added to project list.\n+\n+`GlobalSection(SolutionConfigurationPlatforms)` parses global configuration,\n+such as lines `Debug|Any CPU = Debug|Any CPU`. It adds these configurations\n+to solution configuration list.\n+\n+`GlobalSection(ProjectConfigurationPlatforms)` works pretty much the same as\n+previous, but it\u2019s global configuration for projects. It adds these\n+configurations to raw project configuration list.\n+\n+`GlobalSection(NestedProjects)` finds parent projects to each given project.\n+It stores parent GUID in nested projects.\n+\n+After solution file has been parsed, it processes project configuration section.\n+It updates project configuration from earlier parsed solution file.\n+\n+### Solution project generation\n+\n+Then `MSBuild` generates MSBuild project file from a list of projects\n+and dependencies collected from solution file.\n+\n+While generating MSBuild wrapper project for solution file, `MSBuild` first\n+collects an ordered list of actual projects. Then it creates traversal\n+project instance and adds some XML to this instance. Then it emits\n+metaproject (if it was specified) from traversal project. Then it builds\n+project instance.\n+\n+`MSBuild` initializes that project instance by setting a bunch of\n+fields and then evaluates project data.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}