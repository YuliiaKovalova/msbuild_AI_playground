{
  "number": 8157,
  "title": "Fix Copy with UseSymbolicLinksIfPossible = true",
  "body": "### Changes Made\r\nFix symlink creation\r\n\r\n### Testing\r\nI tried creating a symlink with this, and it succeeded, both in the unit test and in the wild. I also tweaked the unit test to verify that the reparse point is not 0 for the created file. I removed the early exit if the user doesn't have the expected permission.\r\n\r\n### Notes\r\nOnce both this and #8149 are merged, we should modify the test in #8149 to use this to create a symlink on windows.",
  "state": "MERGED",
  "createdAt": "2022-11-11T23:07:10Z",
  "updatedAt": "2022-11-23T03:09:53Z",
  "closedAt": "2022-11-23T03:09:53Z",
  "mergedAt": "2022-11-23T03:09:53Z",
  "additions": 54,
  "deletions": 60,
  "changedFiles": 2,
  "headRefName": "fix-copy-symlink",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "af1e231ba5f33dc899034ad2e9d18da658249602",
          "message": "Properly create symlinks",
          "committedDate": "2022-11-11T23:04:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ae501b658b2a5f70c93c8de49505cb2bfd9b744",
          "message": "Fix test",
          "committedDate": "2022-11-11T23:04:05Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a72d4c2d8b05d36a739310d30255f98f398547e",
          "message": "Version test and use good name",
          "committedDate": "2022-11-14T23:32:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65dab9781cb345d90c258de627354f502ef768d5",
          "message": "Add osVersion",
          "committedDate": "2022-11-15T00:56:41Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e189ec90d7fab9a5fe480c5290761406d577d9eb",
          "message": "Add &&",
          "committedDate": "2022-11-15T00:59:43Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "903295b807417d23a2d86733b1652d2cda82cf8e",
          "message": "Remove version check",
          "committedDate": "2022-11-22T00:55:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c4aec9b039785b85c1a958e3b5c6a969067fc64",
          "message": "Update src/Tasks.UnitTests/Copy_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-23T00:21:56Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be a named constant (enum value) like `SymbolicLink.File`.",
              "createdAt": "2022-11-14T15:44:25Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -833,7 +833,14 @@ internal static bool MakeSymbolicLink(string newFileName, string exitingFileName\n             bool symbolicLinkCreated;\n             if (NativeMethodsShared.IsWindows)\n             {\n-                symbolicLinkCreated = CreateSymbolicLink(newFileName, exitingFileName, SymbolicLink.File);\n+                Version osVersion = Environment.OSVersion.Version;\n+                SymbolicLink flags = SymbolicLink.File;\n+                if (osVersion.Major >= 11 || (osVersion.Major == 10 && osVersion.Build >= 14972))\n+                {\n+                    flags |= (SymbolicLink)0x2;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wish we also had tests for the fallback-to-copy behavior but we didn't have them before so oh well.",
              "createdAt": "2022-11-14T16:16:52Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2397,77 +2397,63 @@ public CopySymbolicLink_Tests(ITestOutputHelper testOutputHelper)\n         [Fact]\n         public void CopyToDestinationFolderWithSymbolicLinkCheck()\n         {\n-            var isPrivileged = true;\n-\n-            if (NativeMethodsShared.IsWindows)\n-            {\n-                if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))\n-                {\n-                    isPrivileged = false;\n-                    Assert.True(true, \"It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges\");\n-                }\n-            }\n-\n-            if (isPrivileged)\n+            string sourceFile = FileUtilities.GetTemporaryFile();\n+            string temp = Path.GetTempPath();\n+            string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n+            string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n+            try\n             {\n-                string sourceFile = FileUtilities.GetTemporaryFile();\n-                string temp = Path.GetTempPath();\n-                string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n-                string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n-                try\n-                {\n-                    File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n-\n-                    // Don't create the dest folder, let task do that\n+                File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n \n-                    ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n+                // Don't create the dest folder, let task do that\n+                ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n \n-                    var me = new MockEngine(true);\n-                    var t = new Copy\n-                    {\n-                        RetryDelayMilliseconds = 1,  // speed up tests!\n-                        BuildEngine = me,\n-                        SourceFiles = sourceFiles,\n-                        DestinationFolder = new TaskItem(destFolder),\n-                        SkipUnchangedFiles = true,\n-                        UseSymboliclinksIfPossible = true\n-                    };\n+                var me = new MockEngine(true);\n+                var t = new Copy\n+                {\n+                    RetryDelayMilliseconds = 1,  // speed up tests!\n+                    BuildEngine = me,\n+                    SourceFiles = sourceFiles,\n+                    DestinationFolder = new TaskItem(destFolder),\n+                    SkipUnchangedFiles = true,\n+                    UseSymboliclinksIfPossible = true\n+                };\n \n-                    bool success = t.Execute();\n+                bool success = t.Execute();\n \n-                    Assert.True(success); // \"success\"\n-                    Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True(success); // \"success\"\n+                Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True((File.GetAttributes(destFile) & FileAttributes.ReparsePoint) != 0);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This seems reasonable, but it also seems like a hard test to write. Either you can create symlinks or you can't. You mentioned there's a limit to how many symlinks you can create for a given file; looking online, it looks like that number is 31. I can try to make 32 symlinks, but that sounds like an unwieldy and somewhat expensive test. Up to you.",
              "createdAt": "2022-11-14T23:28:03Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2397,77 +2397,63 @@ public CopySymbolicLink_Tests(ITestOutputHelper testOutputHelper)\n         [Fact]\n         public void CopyToDestinationFolderWithSymbolicLinkCheck()\n         {\n-            var isPrivileged = true;\n-\n-            if (NativeMethodsShared.IsWindows)\n-            {\n-                if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))\n-                {\n-                    isPrivileged = false;\n-                    Assert.True(true, \"It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges\");\n-                }\n-            }\n-\n-            if (isPrivileged)\n+            string sourceFile = FileUtilities.GetTemporaryFile();\n+            string temp = Path.GetTempPath();\n+            string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n+            string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n+            try\n             {\n-                string sourceFile = FileUtilities.GetTemporaryFile();\n-                string temp = Path.GetTempPath();\n-                string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n-                string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n-                try\n-                {\n-                    File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n-\n-                    // Don't create the dest folder, let task do that\n+                File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n \n-                    ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n+                // Don't create the dest folder, let task do that\n+                ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n \n-                    var me = new MockEngine(true);\n-                    var t = new Copy\n-                    {\n-                        RetryDelayMilliseconds = 1,  // speed up tests!\n-                        BuildEngine = me,\n-                        SourceFiles = sourceFiles,\n-                        DestinationFolder = new TaskItem(destFolder),\n-                        SkipUnchangedFiles = true,\n-                        UseSymboliclinksIfPossible = true\n-                    };\n+                var me = new MockEngine(true);\n+                var t = new Copy\n+                {\n+                    RetryDelayMilliseconds = 1,  // speed up tests!\n+                    BuildEngine = me,\n+                    SourceFiles = sourceFiles,\n+                    DestinationFolder = new TaskItem(destFolder),\n+                    SkipUnchangedFiles = true,\n+                    UseSymboliclinksIfPossible = true\n+                };\n \n-                    bool success = t.Execute();\n+                bool success = t.Execute();\n \n-                    Assert.True(success); // \"success\"\n-                    Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True(success); // \"success\"\n+                Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True((File.GetAttributes(destFile) & FileAttributes.ReparsePoint) != 0);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "delete this check; put check in other system configuration tests",
              "createdAt": "2022-11-21T16:52:11Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2397,77 +2397,71 @@ public CopySymbolicLink_Tests(ITestOutputHelper testOutputHelper)\n         [Fact]\n         public void CopyToDestinationFolderWithSymbolicLinkCheck()\n         {\n-            var isPrivileged = true;\n-\n-            if (NativeMethodsShared.IsWindows)\n+            Version osVersion = Environment.OSVersion.Version;\n+            if (NativeMethodsShared.IsWindows && osVersion.Major < 11 && (osVersion.Major < 10 || osVersion.Build < 14972))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                Assert.True((File.GetAttributes(destFile) & FileAttributes.ReparsePoint) != 0, \"File was copied but is not a symlink\");\r\n```",
              "createdAt": "2022-11-22T15:59:30Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2397,77 +2397,63 @@ public CopySymbolicLink_Tests(ITestOutputHelper testOutputHelper)\n         [Fact]\n         public void CopyToDestinationFolderWithSymbolicLinkCheck()\n         {\n-            var isPrivileged = true;\n-\n-            if (NativeMethodsShared.IsWindows)\n-            {\n-                if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid, null)))\n-                {\n-                    isPrivileged = false;\n-                    Assert.True(true, \"It seems that you don't have the permission to create symbolic links. Try to run this test again with higher privileges\");\n-                }\n-            }\n-\n-            if (isPrivileged)\n+            string sourceFile = FileUtilities.GetTemporaryFile();\n+            string temp = Path.GetTempPath();\n+            string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n+            string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n+            try\n             {\n-                string sourceFile = FileUtilities.GetTemporaryFile();\n-                string temp = Path.GetTempPath();\n-                string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n-                string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n-                try\n-                {\n-                    File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n-\n-                    // Don't create the dest folder, let task do that\n+                File.WriteAllText(sourceFile, \"This is a source temp file.\"); // HIGHCHAR: Test writes in UTF8 without preamble.\n \n-                    ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n+                // Don't create the dest folder, let task do that\n+                ITaskItem[] sourceFiles = { new TaskItem(sourceFile) };\n \n-                    var me = new MockEngine(true);\n-                    var t = new Copy\n-                    {\n-                        RetryDelayMilliseconds = 1,  // speed up tests!\n-                        BuildEngine = me,\n-                        SourceFiles = sourceFiles,\n-                        DestinationFolder = new TaskItem(destFolder),\n-                        SkipUnchangedFiles = true,\n-                        UseSymboliclinksIfPossible = true\n-                    };\n+                var me = new MockEngine(true);\n+                var t = new Copy\n+                {\n+                    RetryDelayMilliseconds = 1,  // speed up tests!\n+                    BuildEngine = me,\n+                    SourceFiles = sourceFiles,\n+                    DestinationFolder = new TaskItem(destFolder),\n+                    SkipUnchangedFiles = true,\n+                    UseSymboliclinksIfPossible = true\n+                };\n \n-                    bool success = t.Execute();\n+                bool success = t.Execute();\n \n-                    Assert.True(success); // \"success\"\n-                    Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True(success); // \"success\"\n+                Assert.True(File.Exists(destFile)); // \"destination exists\"\n+                Assert.True((File.GetAttributes(destFile) & FileAttributes.ReparsePoint) != 0);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}