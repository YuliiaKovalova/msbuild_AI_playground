{
  "number": 7054,
  "title": "Replace O(N^2) with O(N)",
  "body": "### Context\r\n\r\nNoticed this while browsing code.\r\n\r\n### Changes Made\r\n\r\nThis loop verifies all items in one list are present in another. Previously this involved `ArrayList.Contains`, which is O(N). As this happened in a loop, the time complexity comes out to O(N^2). Using a `HashSet<>.Contains` instead allows O(1) lookup within the loop, leading to an overall complexity of O(N).\r\n\r\n### Testing\r\n\r\nUnit tests.",
  "state": "MERGED",
  "createdAt": "2021-11-22T05:53:35Z",
  "updatedAt": "2021-12-01T02:07:26Z",
  "closedAt": "2021-11-29T17:54:19Z",
  "mergedAt": "2021-11-29T17:54:19Z",
  "additions": 2,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "dev/drnoakes/algorithmic-complexity",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "96c2ec4558ccfd6abf7e16826732dde8db9bc979",
          "message": "Replace O(N^2) with O(N)\n\nThis loop verifies all items in one list are present in another. Previously this involved ArrayList.Contains, which is O(N). As this happened in a loop, the time complexity comes out to O(N^2). Using a HashSet<> instead allows O(1) loopup within the loop, leading to an overall complexity of O(N).",
          "committedDate": "2021-11-22T05:50:49Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f983448330d0ae204a4797ca24984ea067d391f3",
          "message": "Use explicit ordinal comparer",
          "committedDate": "2021-11-25T02:15:20Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "A block comment over all of `Deprecated` is not a bad idea at all. @drewnoakes, did you find this by observing a problem, or is this a more proactive change? If the latter, since it's in the zombie can't-quite-get-rid-of-it code I'm more hesitant to change it . . . but also this is super contained and already done.",
        "createdAt": "2021-11-22T17:19:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I've been poking about in the MSBuild code to learn more about it. I ended up in this class by walking references, then saw this. I missed that it was in deprecated code, or wouldn't have filed this. I'm fine with this being closed if you prefer.",
        "createdAt": "2021-11-22T21:01:25Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we've generally used a pattern of explicitly specifying string comparers (so nobody has to remember whether it's ordinal)",
              "createdAt": "2021-11-22T21:50:38Z",
              "path": "src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs",
              "diffHunk": "@@ -100,7 +100,7 @@ internal override bool IsEquivalent(CacheEntry other)\n                     return false;\n                 }\n \n-                ArrayList otherEntryMetadataNames = new ArrayList(otherEntry.BuildItems[i].GetAllCustomMetadataNames());\n+                HashSet<string> otherEntryMetadataNames = new HashSet<string>(otherEntry.BuildItems[i].GetAllCustomMetadataNames());",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "`StringComparer.Ordinal` added.",
              "createdAt": "2021-11-25T02:15:49Z",
              "path": "src/Deprecated/Engine/Caching/BuildItemCacheEntry.cs",
              "diffHunk": "@@ -100,7 +100,7 @@ internal override bool IsEquivalent(CacheEntry other)\n                     return false;\n                 }\n \n-                ArrayList otherEntryMetadataNames = new ArrayList(otherEntry.BuildItems[i].GetAllCustomMetadataNames());\n+                HashSet<string> otherEntryMetadataNames = new HashSet<string>(otherEntry.BuildItems[i].GetAllCustomMetadataNames());",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}