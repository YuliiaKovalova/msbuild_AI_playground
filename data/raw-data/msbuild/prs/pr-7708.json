{
  "number": 7708,
  "title": "Avoid building dwproj",
  "body": "Mitigates #2064\r\n\r\n### Context\r\nThis is an alternate way to fix the same problem. This is incomplete: it would still need to replace \"dwproj\" with the !projectsKnownToBeMSBuild and add a warning.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-06-15T18:34:36Z",
  "updatedAt": "2022-09-23T09:14:52Z",
  "closedAt": "2022-09-23T09:04:11Z",
  "mergedAt": "2022-09-23T09:04:11Z",
  "additions": 58,
  "deletions": 6,
  "changedFiles": 3,
  "headRefName": "ignore-weirdproj2",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6c19e01c2f78e59e037f7468eb36fd5fae46ed49",
          "message": "Verify extension is not dwproj",
          "committedDate": "2022-06-27T22:22:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51c6ba3d23de517caee531a9a73c3c1355f48d0b",
          "message": "Try to hit proposed API",
          "committedDate": "2022-08-10T23:10:33Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6587c11680dd98cca6c8a1d682fd62682e7aa14",
          "message": "Revert unnecessary added usings",
          "committedDate": "2022-08-16T17:22:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cad516c01c9ea7d956554ede4bc1e316e481bc8e",
          "message": "Small cleanup",
          "committedDate": "2022-08-25T19:35:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efd21dc405d37e4f84a6a592f00f0ef165d573c5",
          "message": "Add change wave",
          "committedDate": "2022-09-06T17:57:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9846a686947ab25d8f8c6b84c072fffed42b9c4e",
          "message": "Merge branch 'main' into ignore-weirdproj2",
          "committedDate": "2022-09-06T18:02:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Move this into CanBuildDirectly (see special casing thing for rptproj)",
        "createdAt": "2022-06-20T15:29:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I realized ^ doesn't help. It'd still require changes in other places, and we already know that we \"can't directly build\" dwproj.",
        "createdAt": "2022-06-20T23:33:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Instead of hard coding un-supported file extensions, we could generally accept the `*.*{0,7}proj` pattern since the longest file extension I came across is `.msbuildproj`! Also, can we also white-list known extensions in `msbuild.exe.config` via settings or maybe a json options file?",
        "createdAt": "2022-06-26T09:19:04Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Instead of hard coding un-supported file extensions, we could generally accept the `*.*{0,7}proj` pattern since the longest file extension I came across is `.msbuildproj`!\r\n\r\nThere are some extensions that would match that that are not MSBuild project extensions. The main point of this is to not treat .dwproj as an MSBuild project type despite the extension.\r\n\r\n> Also, can we also white-list known extensions in `msbuild.exe.config` via settings or maybe a json options file?\r\n\r\nOr perhaps in an environment variable, though that can make it harder to nail down what went wrong if something goes wrong. I can bring this up today.",
        "createdAt": "2022-06-27T14:54:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind What I was saying is that we could allow the pattern as a generic filter in the MSBuild source but blacklist the non-msbuild extensions in app settings so that simple change could easily fix any issues like this, instead of changing the binary.\r\n\r\n> perhaps in an environment variable, though that can make it harder to nail down what went wrong if something goes wrong. I can bring this up today.\r\n\r\nenv var is a bad idea but a user config similar to git config for MSBuild is not a bad one. There are only few behaviours that you can hardcode it and control via env vars. I like the new feature guard in MSBuild but the feature additions are slow since there's not an easy way to revert certain behavior without using env var or via Propeties in the project files.",
        "createdAt": "2022-06-28T06:38:35Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "We already have logic in SolutionProjectGenerator that skips over anything that doesn't look at all like an MSBuild project; dwproj looks just enough like one that that part gets confused. The advantage of an env var approach is that it's easy to implement on our side. Using a user config is harder and seems a bit pointless, since you as the user can add (and check in) a target for your solution that removes any unwanted project types, so if the user has to do anything at all complicated, it's too much.",
        "createdAt": "2022-06-28T13:57:03Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind we spoke about this after standup today. The constraints we're balancing are\r\n\r\n* ease of implementation\r\n* correctness of dwproj detection\r\n* performance impact on all other MSBuild users\r\n\r\nThe solution we landed on balances these fairly well: MSBuild should skip the project if the extension is .dwproj AND the contents of the dwproj file contains a Project top-level node with Children that are not valid for MSBuild Projects. Specifically, if the children of the top-level `Project` node are any other than the ones described in [the docs](https://docs.microsoft.com/en-us/visualstudio/msbuild/project-element-msbuild?view=vs-2022#child-elements). In this way we can prevent non-dwproj users from having any perf impact from the check, while not blocking efforts of the dwproj team to potentially msbuildify in the future. This is a bit more effort, but since we're not cramming to make this in for 17.3 we can afford to do it right.",
        "createdAt": "2022-06-29T18:36:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "As an aside, the test failures here are a known flakiness issue. I can rerun them 'til they pass if we decide this is finished; short of that, I'm leaving them.",
        "createdAt": "2022-08-11T17:46:44Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Thoughts from PR review: I feel like the solution here can be simpler than creating a new exception type to throw. by checking further up the stack \"did that fail to parse? is this a dwproj? Log an error for that!\"\r\n\r\n@forgind mentioned that passing info further up the stack would require changing a lot of function params to include some out param, which isn't great.",
        "createdAt": "2022-08-15T16:17:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "RoslynCodeTaskFactory_Tests.InlineTaskWithAssembly failed (presumed flakily). Will watch for future flakiness.",
        "createdAt": "2022-08-23T18:56:02Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Are there any more robust checks we could apply, like \"defines a namespace for `http://schemas.microsoft.com/DataWarehouse/Designer/1.0`\"?",
              "createdAt": "2022-06-27T22:27:16Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -342,7 +342,7 @@ internal bool CanBeMSBuildProjectFile(out string errorMessage)\n                     // not an MSBuild file. It will however have ToolsVersion=\"2.0\" which is not supported with an empty\n                     // schema. This is not a great solution, but it should cover the customer reported issue. See:\n                     // https://github.com/dotnet/msbuild/issues/2064\n-                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\")\n+                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\" && !Path.GetExtension(AbsolutePath).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Basically I'd like to future-proof against \"we have a new version of dwproj tooling and dwproj is an msbuild project now\" which has happened with other project types.",
              "createdAt": "2022-06-27T22:27:53Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -342,7 +342,7 @@ internal bool CanBeMSBuildProjectFile(out string errorMessage)\n                     // not an MSBuild file. It will however have ToolsVersion=\"2.0\" which is not supported with an empty\n                     // schema. This is not a great solution, but it should cover the customer reported issue. See:\n                     // https://github.com/dotnet/msbuild/issues/2064\n-                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\")\n+                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\" && !Path.GetExtension(AbsolutePath).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm not sure that's really more future-proof. If the format for dwproj changes, and it no longer defines that namespace (or doesn't do whatever else we would do to check if it's msbuild-y), #2064 would come back unexpectedly. Of note, it would come back for a lot of people all at once. If dwproj switches to being msbuild-y, we would be wrong with the check here, but that's more of an expected issue, which should make it easier to debug. If it becomes msbuild-y without changing the thing we look at, we'd have the same issue as with this extension check.\r\n\r\nAn alternative could be to check for both dwproj _and_ make sure there are at least some unexpected child elements under the project element. That would probably be the most robust, but it would also lead to confusing cases with MSBuild mostly working for dwproj but not always giving proper error messages. This version seems easiest for us to debug and fix if dwproj becomes msbuild-y.",
              "createdAt": "2022-06-27T22:44:54Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -342,7 +342,7 @@ internal bool CanBeMSBuildProjectFile(out string errorMessage)\n                     // not an MSBuild file. It will however have ToolsVersion=\"2.0\" which is not supported with an empty\n                     // schema. This is not a great solution, but it should cover the customer reported issue. See:\n                     // https://github.com/dotnet/msbuild/issues/2064\n-                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\")\n+                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\" && !Path.GetExtension(AbsolutePath).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I do not understand your concern here:\r\n\r\n> If the format for dwproj changes, and it no longer defines that namespace (or doesn't do whatever else we would do to check if it's msbuild-y), #2064 would come back unexpectedly. Of note, it would come back for a lot of people all at once.\r\n\r\nYes, there are future changes that could break our detection. But how is that different from today?\r\n\r\n> If dwproj switches to being msbuild-y, we would be wrong with the check here, but that's more of an expected issue, which should make it easier to debug.\r\n\r\nIt would mean though that the owners of dwproj couldn't make forward progress without getting an MSBuild change, and at that time wouldn't the change need to be what I'm asking for here, since there would be the possibility of encountering old and new dwproj files?\r\n\r\n> An alternative could be to check for both dwproj _and_ make sure there are at least some unexpected child elements under the project element. That would probably be the most robust, but it would also lead to confusing cases with MSBuild mostly working for dwproj but not always giving proper error messages.\r\n\r\nI don't understand this concern, can you please elaborate?\r\n\r\nI would be fine scoping the check to only the extension dwproj.\r\n",
              "createdAt": "2022-06-29T16:21:44Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -342,7 +342,7 @@ internal bool CanBeMSBuildProjectFile(out string errorMessage)\n                     // not an MSBuild file. It will however have ToolsVersion=\"2.0\" which is not supported with an empty\n                     // schema. This is not a great solution, but it should cover the customer reported issue. See:\n                     // https://github.com/dotnet/msbuild/issues/2064\n-                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\")\n+                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\" && !Path.GetExtension(AbsolutePath).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The two proposals here are:\r\n1. Explicitly check for a dwproj extension\r\n2. Check for something that indicates that this is a dwproj without checking the extension explicitly.\r\n\r\nThe two problems we want to avoid are:\r\n1. We think something is not an MSBuild project, but it is.\r\n2. We think something is an MSBuild project, but it is not.\r\n\r\nIf there is a future change to cause one of those problems, I want it to be as obvious as possible. \"I upgrade my .dwproj to a new version that can now be built by MSBuild, whereas the previous version could not be\" is a place where it's obvious the user should verify that MSBuild can handle that, whereas \"I updated from schemas.microsoft.com/.../1.0 to 1.1\" (with dwproj still not MSBuild-y) makes it seem like the problem is probably with the new schema, which would lead users down the wrong path.\r\n\r\nIt is true that with an explicit extension check, there is nothing the user can do to indicate to MSBuild that their dwproj is buildable. On the other hand, if we check for something optional, the user can decide not to set it, and we would be wrong again without dwproj changing anything. If we check for something required, the user can't remove it anyway, so it doesn't help.\r\n\r\nIf dwproj switches to being MSBuild-y, you are correct that we would have to have something other than the extension we can look at. However, at that point, we would have to talk with the owners to see what they are willing to commit to. Arbitrarily choosing something makes us liable to being broken. Engaging them in a discussion about it now constrains them with no added value unless they decide to make dwproj MSBuild-y. They haven't done that for years, and I see no reason to assume that's about to change.",
              "createdAt": "2022-06-29T17:08:43Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -342,7 +342,7 @@ internal bool CanBeMSBuildProjectFile(out string errorMessage)\n                     // not an MSBuild file. It will however have ToolsVersion=\"2.0\" which is not supported with an empty\n                     // schema. This is not a great solution, but it should cover the customer reported issue. See:\n                     // https://github.com/dotnet/msbuild/issues/2064\n-                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\")\n+                    if (emptyNamespace && !projectElementInvalid && mainProjectElement.GetAttribute(\"ToolsVersion\") != \"2.0\" && !Path.GetExtension(AbsolutePath).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why throw rather than just returning `false`?",
              "createdAt": "2022-08-11T01:17:42Z",
              "path": "src/Build/Xml/ProjectXmlUtilities.cs",
              "diffHunk": "@@ -68,13 +78,37 @@ internal static void ThrowProjectInvalidChildElement(string name, string parentN\n         /// <returns>True when the namespace is in the MSBuild namespace or no namespace.</returns>\n         internal static bool VerifyValidProjectNamespace(XmlElementWithLocation element)\n         {\n-            return\n-                // Prefix must be empty\n-                element.Prefix.Length == 0 &&\n+            if (element.Prefix.Length != 0)\n+            {\n+                return false;\n+            }\n+            else if (string.Equals(element.NamespaceURI, XMakeAttributes.defaultXmlNamespace, StringComparison.OrdinalIgnoreCase))\n+            {\n+                return true;\n+            }\n+            else if (string.IsNullOrEmpty(element.NamespaceURI))\n+            {\n+                if (Path.GetExtension(element.Location.File).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    bool validMSBuildProject = true;\n+                    foreach (XmlNode child in element.ChildNodes)\n+                    {\n+                        if (child.Name.Equals(\"Database\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            validMSBuildProject = false;\n+                            throw new UnbuildableProjectType(element.Location.File);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Returning false just make it throw an InvalidProjectFileException without useful information that would let you diagnose it as a dwproj. This is an efficient means for skipping up to a place where we can return a useful warning without getting other, less useful errors.",
              "createdAt": "2022-08-11T17:44:48Z",
              "path": "src/Build/Xml/ProjectXmlUtilities.cs",
              "diffHunk": "@@ -68,13 +78,37 @@ internal static void ThrowProjectInvalidChildElement(string name, string parentN\n         /// <returns>True when the namespace is in the MSBuild namespace or no namespace.</returns>\n         internal static bool VerifyValidProjectNamespace(XmlElementWithLocation element)\n         {\n-            return\n-                // Prefix must be empty\n-                element.Prefix.Length == 0 &&\n+            if (element.Prefix.Length != 0)\n+            {\n+                return false;\n+            }\n+            else if (string.Equals(element.NamespaceURI, XMakeAttributes.defaultXmlNamespace, StringComparison.OrdinalIgnoreCase))\n+            {\n+                return true;\n+            }\n+            else if (string.IsNullOrEmpty(element.NamespaceURI))\n+            {\n+                if (Path.GetExtension(element.Location.File).Equals(\".dwproj\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    bool validMSBuildProject = true;\n+                    foreach (XmlNode child in element.ChildNodes)\n+                    {\n+                        if (child.Name.Equals(\"Database\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            validMSBuildProject = false;\n+                            throw new UnbuildableProjectType(element.Location.File);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't look right to me. What does it do for metaprojects that are created for solution build order dependencies?",
              "createdAt": "2022-08-24T20:15:54Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1086,6 +1087,7 @@ private void AddProjectReference(ProjectInstance traversalProject, ProjectInstan\n                 item.SetMetadata(\"ToolsVersion\", traversalProject.ToolsVersion);\n                 item.SetMetadata(\"SkipNonexistentProjects\", \"Build\"); // Instruct the MSBuild task to try to build even though the file doesn't exist on disk.\n                 item.SetMetadata(\"AdditionalProperties\", GetPropertiesMetadataForProjectReference(traversalProject, SolutionConfigurationAndPlatformProperties));\n+                item.SetMetadata(\"BuildableProject\", \"False\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}