{
  "number": 8974,
  "title": "Make TaskRegistry tasks ordering deterministic (FIFO)",
  "body": "Changes extracted #8861\r\n\r\n### Context\r\nTaskRegistry tasks order depended on implicit ordering of tasks in internal Dictionary. This can manifest only when there are multiple tasks with same name registered and task invoking doesn't specify any parameters (arch, fw) - but then it can lead to hard to investigate bugs, so worth fixing\r\n\r\n### Changes Made\r\nAdded order id to task registrations, and use it for sorting fetched matches.\r\n\r\n### Testing\r\nExisting tests",
  "state": "MERGED",
  "createdAt": "2023-06-28T16:20:45Z",
  "updatedAt": "2023-07-14T14:02:23Z",
  "closedAt": "2023-07-14T14:01:59Z",
  "mergedAt": "2023-07-14T14:01:58Z",
  "additions": 57,
  "deletions": 51,
  "changedFiles": 2,
  "headRefName": "proto/TaskRegistryOrdering",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c141b2e59925e7d5ff08464b0994cd506a2de799",
          "message": "Make TaskRegistry tasks ordering deterministic (FIFO)",
          "committedDate": "2023-06-28T16:16:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "213d0c0a22fd73b150fa045c1cd9589b7725c125",
          "message": "Make the tasks sequence counter an instance of TaskRegistry",
          "committedDate": "2023-06-29T18:10:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "79152b8462e1bed11b422f80d94555ec45c510ea",
          "message": "No-op change to kick cla bot",
          "committedDate": "2023-06-30T12:19:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@ladipro - assigning you as one of the reviewers, as you've already reviewed this thoroughly as part of #8861",
        "createdAt": "2023-06-28T16:21:50Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2023-06-29T19:29:51Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-06-29T19:30:00Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I'm having a very hard time understanding the implications of this. What's the user bug that could result? Can you craft a project to show that bug?",
        "createdAt": "2023-06-30T16:23:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I'm having a very hard time understanding the implications of this. \r\n\r\nThis can be considered future proofing only.\r\n\r\n> What's the user bug that could result? \r\n\r\nUnexpected Task being executed (would multiple tasks with same name be registered - which we do e.g. for `GenerateResource`)\r\n\r\n> Can you craft a project to show that bug?\r\n\r\nLuckily not.\r\nWe rely on implicit ordering of KeyValuePairs returned from dictionary. We use `Dictionary<K,P>`. We only insert, never delete (AFAIK). This exact usage pattern currently give us _unguaranteed_ ordering by insertions.\r\nThis is thanks to Dictionary enumerator: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs#L1385-L1408, returning the entries in the internal order, that during insertions with no collisions happen to be increasing only (regardless of actual hash values): https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/Dictionary.cs#L572-L606\r\n\r\nThis is very internal detail that can change in future BCL, and as well which is not held by other dictionary implementations: `ConcurrentDictionary`, `ImmutableDictionary` - we may get sneakingly broken when moving to those (this is how the problem was discovered).\r\n\r\n",
        "createdAt": "2023-07-07T15:18:36Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Can you combine this with #9032 and run an experimental VS insertion just to check on unexpected perf gotchas?\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/484352\r\n\r\n\r\nI wanted to combine with https://github.com/dotnet/msbuild/pull/8928 as well - but could not easily restore the branch (`git push origin 137e466b34c8c7ae6bfb3d489e78fb42599bb594:refs/heads/bug/1824802.guard-TaskFactoryWrapper-dictionaries` from the clone of the work didn't work as the commit sha seems to be completely gone) - so that one will go sometime later",
        "createdAt": "2023-07-14T09:37:45Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Can this exp insertion outcome be interpreted as OK?:\r\n\r\n```\r\n##[warning][VS SDK Restore PR test] Pipeline run failed. \r\n##[warning]See the originating test pipeline to investigate: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8075133&view=results\r\n##[debug][DD-VS-PR-DDRIT] No test pipeline failures\r\n```\r\n\r\nThe DDRIT passed - which is probably the main thing we wanted.\r\nThe VS SDK restore is failing with `error: NU1102: Unable to find package Microsoft.Build.Framework with version (>= 17.8.0-preview-23364-02)` - which I guess is expected case for experimental insertion that (probably) doesn't push packages - isn't it?",
        "createdAt": "2023-07-14T13:53:45Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek exactly correct--symbol check and VSSDK test failures are expected for experimental insertions (because we don't publish those symbols or packages, because they're an experiment). Usually perf DDRITs are the reason to run one.",
        "createdAt": "2023-07-14T14:00:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm still not convinced this is correct.\r\n1. If multiple threads race to update `s_nextRegistrationOrderId`, the value we end up may be smaller than `copy?.Count`. Could be fixed with a lock or an `Interlocked.CompareExchange` loop.\r\n2. In https://github.com/dotnet/msbuild/pull/8861#discussion_r1232155528 you wrote that we assume tasks are not moved between processes. Are you sure this is true? It looks like `ProjectInstance` can be sent to an OOP node and if `_translateEntireState` is true, the task registry is moved as well.",
              "createdAt": "2023-06-29T09:17:31Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1794,6 +1788,8 @@ public void Translate(ITranslator translator)\n             if (translator.Mode == TranslationDirection.ReadFromStream)\n             {\n                 _taskRegistrations = (Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>>)copy;\n+                // Ensure that mutations of the deserialized task registry are getting unique order ids.\n+                s_nextRegistrationOrderId = Math.Max(s_nextRegistrationOrderId, copy?.Count ?? 0);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I meant that tasks are not moved from one task registry to another (already filled) one - it's only send with the whole owning TaskRegistry.\r\nBut let me make the intent more clear and less error prone by making the counter and instance owned by TaskRegistry",
              "createdAt": "2023-06-29T16:00:00Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1794,6 +1788,8 @@ public void Translate(ITranslator translator)\n             if (translator.Mode == TranslationDirection.ReadFromStream)\n             {\n                 _taskRegistrations = (Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>>)copy;\n+                // Ensure that mutations of the deserialized task registry are getting unique order ids.\n+                s_nextRegistrationOrderId = Math.Max(s_nextRegistrationOrderId, copy?.Count ?? 0);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Done\r\n@ladipro - do you want to have a second look?\r\nI've made the sequence counter an instance of TaskRegistry and made it part of the serialization payload as you've originaly suggested on the previous PR - it seems to be the least confusing and most future proof option.\r\nBtw. the `Interlocked` is not even needed - as the access to `RegisterTask` is serialized (if it would not, then there is no guarantee that the order of registration calls is same as the actual order of the instantiations). But I'm keeping it as it's more selfdescriptive. But very open to oposing thoughts.",
              "createdAt": "2023-06-29T18:15:45Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1794,6 +1788,8 @@ public void Translate(ITranslator translator)\n             if (translator.Mode == TranslationDirection.ReadFromStream)\n             {\n                 _taskRegistrations = (Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>>)copy;\n+                // Ensure that mutations of the deserialized task registry are getting unique order ids.\n+                s_nextRegistrationOrderId = Math.Max(s_nextRegistrationOrderId, copy?.Count ?? 0);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you, I like it!",
              "createdAt": "2023-06-30T08:04:46Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1794,6 +1788,8 @@ public void Translate(ITranslator translator)\n             if (translator.Mode == TranslationDirection.ReadFromStream)\n             {\n                 _taskRegistrations = (Dictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>>)copy;\n+                // Ensure that mutations of the deserialized task registry are getting unique order ids.\n+                s_nextRegistrationOrderId = Math.Max(s_nextRegistrationOrderId, copy?.Count ?? 0);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}