{
  "number": 11779,
  "title": "Avoid some smaller allocations in ItemGroupintrinsicTask",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-01T20:50:17Z",
  "updatedAt": "2025-05-13T17:44:39Z",
  "closedAt": "2025-05-13T15:22:37Z",
  "mergedAt": "2025-05-13T15:22:37Z",
  "additions": 97,
  "deletions": 8,
  "changedFiles": 3,
  "headRefName": "dev/erarndt/ItemGroupintrinsicTaskAllocations",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cf1cb7ea9fcfad848d5e30eb9b7b8a06f6c7730b",
          "message": "Avoid some smaller allocations in ItemGroupintrinsicTask",
          "committedDate": "2025-05-01T20:49:46Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f29eba746e479b44a0bfcc8caeb29f60d903b15",
          "message": "PR feedback",
          "committedDate": "2025-05-06T23:23:47Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9949bfdf34ddb8e3b7c17c975a7b7f14d52408bc",
          "message": "Apply suggestions from code review\r\n\r\nSome naming tweaks.",
          "committedDate": "2025-05-09T13:21:01Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "0c855190cab480c85778c1262a57376d9ab7bf37",
          "message": "fixed one final typo",
          "committedDate": "2025-05-13T14:34:27Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've attempted the suggested naming fixes in the github UI. If I messed up, I will have to clone into VS to fix properly.\r\nOtherwise I hope we can merge.",
        "createdAt": "2025-05-09T13:22:09Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Iterating directly over item.MetadataNames while removing items with RemoveMetadata might modify the collection during enumeration, potentially causing runtime exceptions. Consider materializing the list before iterating (e.g. item.MetadataNames.ToList()).\n```suggestion\n                    foreach (var metadataName in item.MetadataNames.ToList())\n```",
              "createdAt": "2025-05-01T20:50:54Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "Now this is a fair point. However after some digging I've found this gem:\r\n```\r\n        /// <summary>\r\n        /// Returns all the metadata names on this item.\r\n        /// Includes names from any applicable item definitions.\r\n        /// Includes names of built-in metadata.\r\n        /// </summary>\r\n        /// <comment>\r\n        /// Computed, not necessarily fast.\r\n        /// </comment>\r\n        public ICollection<string> MetadataNames\r\n        {\r\n            get { return new ReadOnlyCollection<string>(_taskItem.MetadataNames.Cast<string>()); }\r\n        }\r\n```\r\nSo we're actually iterating over a new collection and so removing the metadata from the underlying item via RemoveMetadata is fine in this instance.\r\nHowever this begs a question: wouldn't it be more effective to iterate over the underlying connection directly (if that is possible) and create only a subset to remove (which should be smaller or in worst case whole collection) like we did before?\r\n",
              "createdAt": "2025-05-02T08:48:35Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "If that is not feasible, I think a comment explaining why this sort of \"iterating over a collection while also removing from under it\" would be helpful in this case.",
              "createdAt": "2025-05-02T08:49:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "So, it gets even better than that. Look at what the implementation of the `MetadataNames` property is:\r\n\r\n            public ICollection MetadataNames\r\n            {\r\n                get\r\n                {\r\n                    ICopyOnWritePropertyDictionary<ProjectMetadataInstance> metadataCollection = MetadataCollection;\r\n\r\n                    List<string> names = new List<string>(capacity: metadataCollection.Count + FileUtilities.ItemSpecModifiers.All.Length);\r\n\r\n                    foreach (ProjectMetadataInstance metadatum in (IEnumerable<ProjectMetadataInstance>)metadataCollection)\r\n                    {\r\n                        names.Add(metadatum.Name);\r\n                    }\r\n\r\n                    names.AddRange(FileUtilities.ItemSpecModifiers.All);\r\n\r\n                    return names;\r\n                }\r\n            }\r\n\r\nThe `ReadOnlyCollection` implementation is actually an MSBuild specific collection defined in `Microsoft.Build.Collections`.\r\n\r\nI'll take a look and see what makes sense to change. Depending on usage there's a chance there would need to be a ton of changes to change this pattern.",
              "createdAt": "2025-05-02T17:16:47Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Modifying item.MetadataNames within the loop may lead to collection modification issues. It is recommended to iterate over a copy of the collection (using item.MetadataNames.ToList()) to ensure safe removal.\n```suggestion\n                    foreach (var metadataName in item.MetadataNames.ToList())\n```",
              "createdAt": "2025-05-01T20:50:54Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)\n                     {\n-                        item.RemoveMetadata(metadataName);\n+                        if (!keepMetadata.Contains(metadataName))\n+                        {\n+                            item.RemoveMetadata(metadataName);\n+                        }\n                     }\n                 }\n             }\n             else if (removeMetadata != null)\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => removeMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "See the above comment, same case.",
              "createdAt": "2025-05-02T08:49:51Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -486,21 +486,25 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)\n                     {\n-                        item.RemoveMetadata(metadataName);\n+                        if (!keepMetadata.Contains(metadataName))\n+                        {\n+                            item.RemoveMetadata(metadataName);\n+                        }\n                     }\n                 }\n             }\n             else if (removeMetadata != null)\n             {\n                 foreach (var item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => removeMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    foreach (var metadataName in item.MetadataNames)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    foreach (string metadataName in item.EnumerableMetadataNames)\r\n```",
              "createdAt": "2025-05-07T08:33:53Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -482,23 +482,56 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             }\n \n             // Filter the metadata as appropriate\n+            List<string> metadataToRemove = null;\n             if (keepMetadata != null)\n             {\n-                foreach (var item in items)\n+                foreach (ProjectItemInstance item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    if (metadataToRemove == null)\n+                    {\n+                        metadataToRemove = new List<string>();\n+                    }\n+                    else\n+                    {\n+                        metadataToRemove.Clear();\n+                    }\n+\n+                    foreach (string metadataName in item.EnumerableMeatadataNames)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    foreach (string metadataName in item.EnumerableMetadataNames)\r\n```",
              "createdAt": "2025-05-07T08:34:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -482,23 +482,56 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             }\n \n             // Filter the metadata as appropriate\n+            List<string> metadataToRemove = null;\n             if (keepMetadata != null)\n             {\n-                foreach (var item in items)\n+                foreach (ProjectItemInstance item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => !keepMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    if (metadataToRemove == null)\n+                    {\n+                        metadataToRemove = new List<string>();\n+                    }\n+                    else\n+                    {\n+                        metadataToRemove.Clear();\n+                    }\n+\n+                    foreach (string metadataName in item.EnumerableMeatadataNames)\n+                    {\n+                        if (!keepMetadata.Contains(metadataName))\n+                        {\n+                            metadataToRemove.Add(metadataName);\n+                        }\n+                    }\n+\n+                    foreach(string metadataName in metadataToRemove)\n                     {\n                         item.RemoveMetadata(metadataName);\n                     }\n                 }\n             }\n             else if (removeMetadata != null)\n             {\n-                foreach (var item in items)\n+                foreach (ProjectItemInstance item in items)\n                 {\n-                    var metadataToRemove = item.MetadataNames.Where(name => removeMetadata.Contains(name));\n-                    foreach (var metadataName in metadataToRemove)\n+                    if (metadataToRemove == null)\n+                    {\n+                        metadataToRemove = new List<string>();\n+                    }\n+                    else\n+                    {\n+                        metadataToRemove.Clear();\n+                    }\n+\n+                    foreach (string metadataName in item.EnumerableMeatadataNames)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        internal TaskItem.MetadataNamesEnumerable EnumerableMetadataNames => _taskItem.EnumerableMetadatNames;\r\n```",
              "createdAt": "2025-05-07T08:34:23Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -285,6 +285,8 @@ public ICollection<string> MetadataNames\n             get { return new ReadOnlyCollection<string>(_taskItem.MetadataNames.Cast<string>()); }\n         }\n \n+        internal TaskItem.MetadatanamesEnumerable EnumerableMeatadataNames => _taskItem.EnumerableMetadatNames;",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                                foreach (var metadataName in filteredItem.EnumerableMetadataNames)\r\n```",
              "createdAt": "2025-05-07T08:34:55Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -827,7 +827,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject\n                                 // any extant metadata.\n                                 // UNDONE: This could be achieved at lower GC cost by applying\n                                 // the metadata filter at DeepClone time above.\n-                                foreach (var metadataName in filteredItem.MetadataNames)\n+                                foreach (var metadataName in filteredItem.EnumerableMeatadataNames)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `EnumerableMetadatNames` -> `EnumerableMetadataNames`",
              "createdAt": "2025-05-07T09:05:49Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -957,6 +959,8 @@ public ICollection MetadataNames\n                 }\n             }\n \n+            public MetadatanamesEnumerable EnumerableMetadatNames => new MetadatanamesEnumerable(this);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "```suggestion\r\n            public MetadataNamesEnumerable EnumerableMetadataNames => new MetadataNamesEnumerable(this);\r\n```",
              "createdAt": "2025-05-09T13:17:43Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -957,6 +959,8 @@ public ICollection MetadataNames\n                 }\n             }\n \n+            public MetadatanamesEnumerable EnumerableMetadatNames => new MetadatanamesEnumerable(this);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Ah, yeah. That's a silly typo. Good catch",
              "createdAt": "2025-05-09T20:58:38Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -957,6 +959,8 @@ public ICollection MetadataNames\n                 }\n             }\n \n+            public MetadatanamesEnumerable EnumerableMetadatNames => new MetadatanamesEnumerable(this);",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `MetadatanamesEnumerable` -> `MetadataNamesEnumerable`",
              "createdAt": "2025-05-07T09:21:43Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1961,6 +1965,58 @@ private ProjectMetadataInstance GetItemDefinitionMetadata(string metadataName)\n                 return null;\n             }\n \n+            internal readonly struct MetadatanamesEnumerable",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "```suggestion\r\n            internal readonly struct MetadataNamesEnumerable\r\n```",
              "createdAt": "2025-05-09T13:18:38Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1961,6 +1965,58 @@ private ProjectMetadataInstance GetItemDefinitionMetadata(string metadataName)\n                 return null;\n             }\n \n+            internal readonly struct MetadatanamesEnumerable",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                public MetadataNamesEnumerable(TaskItem taskItem) => _item = taskItem;\r\n```",
              "createdAt": "2025-05-09T13:18:59Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1961,6 +1965,58 @@ private ProjectMetadataInstance GetItemDefinitionMetadata(string metadataName)\n                 return null;\n             }\n \n+            internal readonly struct MetadatanamesEnumerable\n+            {\n+                private readonly TaskItem _item;\n+\n+                public MetadatanamesEnumerable(TaskItem taskItem) => _item = taskItem;",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}