{
  "number": 11942,
  "title": "remove some closures as well as boxing from enumerator",
  "body": "Fixes # Captures that lead to allocations.\r\n\r\n### Context\r\nBased on a trace was able to see that allocations from captures that were from using linq without the correct context.\r\n\r\n### Changes Made\r\nManually created a list instead of using the where clause to create one.\r\nAlso moved over to grabbing the underlying struct enumerator when possible to avoid boxing.\r\n\r\n### Testing\r\n\r\nLooked at the dll in ILSPY to verify change in closures.\r\n\r\nBefore. (Display Class shows a capture)\r\n![image](https://github.com/user-attachments/assets/272679f2-ea1a-4d56-990e-1f9fdb9776bd)\r\n\r\nAfter (no more DisplayClass)\r\n![image](https://github.com/user-attachments/assets/905775a6-4de9-4550-b281-55812ab2d1f8)\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-06-02T23:13:26Z",
  "updatedAt": "2025-06-02T23:30:15Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 27,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "users/tevinstanley/applymetadatamodificationsallocations",
  "isDraft": false,
  "author": {
    "login": "ttstanley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7251f89d3c7cf1c2ef2ec18935628dc6a394eeb4",
          "message": "remove some closures as well as boxing from enumerator",
          "committedDate": "2025-06-02T22:33:34Z",
          "author": {
            "name": "Tevin Stanley",
            "email": "tevinstanley@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Fix typo in the comment: change 'enumertor' to 'enumerator'.\n```suggestion\n                // Perf: Avoid boxing when possible by getting the underlying struct enumerator if available.\n```",
              "createdAt": "2025-06-02T23:30:14Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/Lookup.cs",
              "diffHunk": "@@ -858,7 +858,33 @@ private static void ApplyMetadataModificationsToItem(MetadataModifications modif\n             // or if keepOnlySpecified == true and there is no entry for that name.\n             if (modificationsToApply.KeepOnlySpecified)\n             {\n-                List<string> metadataToRemove = new List<string>(itemToModify.Metadata.Where(m => modificationsToApply[m.Name].Remove).Select(m => m.Name));\n+\n+                // Perf: Avoid boxing when possible by getting the underlying struct enumertor if available.",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Pre-allocate the list with an initial capacity using `itemToModify.Metadata.Count` (e.g., `new List<string>(itemToModify.Metadata.Count)`) to reduce potential reallocations.\n```suggestion\n                    metadataToRemove = new List<string>(itemToModify.Metadata.Count);\n```",
              "createdAt": "2025-06-02T23:30:15Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/Lookup.cs",
              "diffHunk": "@@ -858,7 +858,33 @@ private static void ApplyMetadataModificationsToItem(MetadataModifications modif\n             // or if keepOnlySpecified == true and there is no entry for that name.\n             if (modificationsToApply.KeepOnlySpecified)\n             {\n-                List<string> metadataToRemove = new List<string>(itemToModify.Metadata.Where(m => modificationsToApply[m.Name].Remove).Select(m => m.Name));\n+\n+                // Perf: Avoid boxing when possible by getting the underlying struct enumertor if available.\n+                List<string> metadataToRemove;\n+                if (itemToModify.Metadata is CopyOnWritePropertyDictionary<ProjectMetadataInstance> copyOnWritePropertyMetadata)\n+                {\n+                    metadataToRemove = new List<string>(copyOnWritePropertyMetadata.Count);\n+                    foreach (var m in copyOnWritePropertyMetadata)\n+                    {\n+                        string name = m.Value.Name;\n+                        if (modificationsToApply[name].Remove)\n+                        {\n+                            metadataToRemove.Add(name);\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    metadataToRemove = new List<string>();",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}