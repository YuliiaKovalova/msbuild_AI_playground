{
  "number": 9489,
  "title": "Make FNV hash compatible across endianness",
  "body": "### Context\r\nhttps://github.com/dotnet/msbuild/pull/9387#discussion_r1410414249\r\nCurrent FNV hashing (introduced in #9387) is dependent on endian-ness.\r\n\r\n### Changes Made\r\nRemoved the span version of hashing - as it doesn't bring any benefits and is endian-ness dependent\r\n\r\n### Perf testing\r\n\r\n| Method                   | Runtime    | StrLength | Mean             | Error         | StdDev        |\r\n|------------------------- |------------|---------- |-----------------:|--------------:|--------------:|\r\n| ComputeHash64_Span       | .NET 8.0   | 10        |         9.876 ns |     0.0483 ns |     0.0403 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 10        |         8.067 ns |     0.0588 ns |     0.0550 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 10        |        26.883 ns |     0.1432 ns |     0.1269 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 10        |        10.654 ns |     0.0881 ns |     0.0824 ns |\r\n| ComputeHash64_Span       | .NET 8.0   | 100       |       155.327 ns |     1.1980 ns |     1.0620 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 100       |       149.432 ns |     0.1521 ns |     0.1348 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 100       |       181.392 ns |     2.6582 ns |     2.3564 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 100       |       155.239 ns |     0.7283 ns |     0.6456 ns |\r\n| ComputeHash64_Span       | .NET 8.0   | 1000      |     1,633.550 ns |     2.5869 ns |     2.1602 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 1000      |     1,625.889 ns |     1.1307 ns |     1.0023 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 1000      |     1,683.154 ns |    10.6791 ns |     9.9893 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 1000      |     1,637.241 ns |     3.0075 ns |     2.8132 ns |\r\n| ComputeHash64_Span       | .NET 8.0   | 10000     |    16,693.668 ns |    90.8291 ns |    80.5176 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 10000     |    16,301.102 ns |    66.2687 ns |    61.9877 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 10000     |    16,596.230 ns |    68.7995 ns |    64.3551 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 10000     |    16,413.434 ns |    63.6246 ns |    59.5145 ns |\r\n| ComputeHash64_Span       | .NET 8.0   | 100000    |   164,662.715 ns |   588.7268 ns |   550.6954 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 100000    |   174,713.916 ns | 1,744.7746 ns | 2,502.3036 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 100000    |   172,695.281 ns | 3,451.7767 ns | 4,239.0918 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 100000    |   165,095.489 ns |   520.5961 ns |   461.4949 ns |\r\n| ComputeHash64_Span       | .NET 8.0   | 1000000   | 1,644,626.828 ns | 8,012.8957 ns | 7,103.2233 ns |\r\n| ComputeHash64_Compatible | .NET 8.0   | 1000000   | 1,632,366.042 ns | 5,566.6398 ns | 5,207.0384 ns |\r\n| ComputeHash64_Span       | .NET 4.7.2 | 1000000   | 1,660,009.049 ns | 5,599.0299 ns | 5,237.3361 ns |\r\n| ComputeHash64_Compatible | .NET 4.7.2 | 1000000   | 1,642,601.532 ns | 7,044.1614 ns | 5,882.1938 ns |\r\n\r\n(\".NET Framework 4.7.2\" shortened to \".NET 4.7.2\" for the content brevity)\r\n\r\nThe test harness:\r\n\r\n```csharp\r\npublic class Benchmarks\r\n{\r\n    [Params(10, 100, 1000, 10000, 100000, 1000000)]\r\n    public int StrLength;\r\n    private string _str;\r\n\r\n    [GlobalSetup]\r\n    public void Setup()\r\n    {\r\n        _str = CreateRandomBase64String(StrLength);\r\n    }\r\n\r\n    // 64 bit FNV prime and offset basis for FNV-1a.\r\n    private const long fnvPrimeA64Bit = 1099511628211;\r\n    private const long fnvOffsetBasisA64Bit = unchecked((long)14695981039346656037);\r\n\r\n    [Benchmark]\r\n    public long ComputeHash64_Span()\r\n    {\r\n        string text = _str;\r\n\r\n        long hash = fnvOffsetBasisA64Bit;\r\n\r\n        ReadOnlySpan<byte> span = MemoryMarshal.Cast<char, byte>(text.AsSpan());\r\n        foreach (byte b in span)\r\n        {\r\n            hash = unchecked((hash ^ b) * fnvPrimeA64Bit);\r\n        }\r\n\r\n        return hash;\r\n    }\r\n\r\n    [Benchmark]\r\n    public long ComputeHash64_Compatible()\r\n    {\r\n        string text = _str;\r\n\r\n        long hash = fnvOffsetBasisA64Bit;\r\n        unchecked\r\n        {\r\n            for (int i = 0; i < text.Length; i++)\r\n            {\r\n                char ch = text[i];\r\n                byte b = (byte)ch;\r\n                hash ^= b;\r\n                hash *= fnvPrimeA64Bit;\r\n\r\n                b = (byte)(ch >> 8);\r\n                hash ^= b;\r\n                hash *= fnvPrimeA64Bit;\r\n            }\r\n        }\r\n\r\n        return hash;\r\n    }\r\n\r\n    public static string CreateRandomBase64String(int length)\r\n    {\r\n        const int eachStringCharEncodesBites = 6; // 2^6 = 64\r\n        const int eachByteHasBits = 8;\r\n        const double bytesNumNeededForSingleStringChar = eachStringCharEncodesBites / (double)eachByteHasBits;\r\n\r\n        int randomBytesNeeded = (int)Math.Ceiling(length * bytesNumNeededForSingleStringChar);\r\n\r\n        byte[] randomBytes = new byte[randomBytesNeeded];\r\n        new Random().NextBytes(randomBytes);\r\n        //Base64: A-Z a-z 0-9 +, /, =\r\n        var randomBase64String = Convert.ToBase64String(randomBytes);\r\n        return randomBase64String.Substring(0, length);\r\n    }\r\n}\r\n```\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-12-04T11:46:04Z",
  "updatedAt": "2024-02-08T13:50:54Z",
  "closedAt": "2024-02-08T13:50:54Z",
  "mergedAt": null,
  "additions": 3,
  "deletions": 18,
  "changedFiles": 1,
  "headRefName": "proto/endian-compat-hashing",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [
    "do-not-merge"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "89e6be8300c544b5563e1a156f53b38efaf340b4",
          "message": "Make FNV hash compatible across endianness",
          "committedDate": "2023-12-04T11:43:11Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI: @KalleOlaviNiemitalo, @uweigand - thank you for all the input!",
        "createdAt": "2023-12-04T11:47:35Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "What runtime were those results from? I'd expect `Span` to be beneficial only on netcore.",
        "createdAt": "2023-12-04T17:20:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah - I forgot to mention that - good point!\r\n\r\nYes - those were for NET 8.0 only. 3.5 need to use the 'compatible' version anyways. The 4.7.2 can use the Span version, but it as well perform slightly worse (overall the numbers were quite similar - ~~but let me run both scenarios and ammend the numbers for documentation purposes~~ amended)",
        "createdAt": "2023-12-04T18:01:17Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Since the compatible version seems to be faster anyway, this change seems reasonable, but what does that have to do with endianness? It seems like the span version and the not-span version do the same thing...",
        "createdAt": "2023-12-22T20:35:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Since the compatible version seems to be faster anyway, this change seems reasonable, but what does that have to do with endianness? It seems like the span version and the not-span version do the same thing...\r\n\r\nCasting byte ptr to char ptr leads to proper reordering of bytes (if needed) in memory by runtime (so that they are Little Endian, regardless of the actual storage arch)\r\nWhen using the span version - we are basically handling the bytes on our own - so getting them in order as they are actually stored.\r\n\r\nhttps://github.com/dotnet/msbuild/pull/9387#discussion_r1410414249 has more details ",
        "createdAt": "2023-12-22T20:44:36Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> > Since the compatible version seems to be faster anyway, this change seems reasonable, but what does that have to do with endianness? It seems like the span version and the not-span version do the same thing...\r\n> \r\n> Casting byte ptr to char ptr leads to proper reordering of bytes (if needed) in memory by runtime (so that they are Little Endian, regardless of the actual storage arch) When using the span version - we are basically handling the bytes on our own - so getting them in order as they are actually stored.\r\n> \r\n> [#9387 (comment)](https://github.com/dotnet/msbuild/pull/9387#discussion_r1410414249) has more details\r\n\r\nThanks for the explanation! Sorry I didn't follow that link before \ud83d\ude42\r\n\r\nLooks like there's a conflict.",
        "createdAt": "2023-12-23T00:36:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We also have an Fnv1a implementation in the binlog writer:\r\nhttps://github.com/dotnet/msbuild/blob/10f2f328089ccbc9f0c60cba527fbfe90d8294ff/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L1314-L1342\r\n\r\nSee my analysis here:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/String-Hashing\r\n\r\nWould be interesting to add this hash implementation to my benchmarks and compare:\r\nhttps://github.com/KirillOsenkov/Benchmarks/blob/main/src/Tests/StringHash.Fnv.cs\r\nhttps://github.com/KirillOsenkov/Benchmarks/blob/f2c45821c2cf7243b040d2c1db5904bab8134cf8/src/Tests/StringHash.cs#L73",
        "createdAt": "2024-01-09T03:05:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> We also have an Fnv1a implementation in the binlog writer:\r\n> \r\n> https://github.com/dotnet/msbuild/blob/10f2f328089ccbc9f0c60cba527fbfe90d8294ff/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L1314-L1342\r\n> \r\n> See my analysis here: https://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/String-Hashing\r\n> \r\n> Would be interesting to add this hash implementation to my benchmarks and compare: https://github.com/KirillOsenkov/Benchmarks/blob/main/src/Tests/StringHash.Fnv.cs https://github.com/KirillOsenkov/Benchmarks/blob/f2c45821c2cf7243b040d2c1db5904bab8134cf8/src/Tests/StringHash.cs#L73\r\n\r\nYeah - I 'borrowed' that one (`ComputeHash64Fast`)  :-) and quoted the source (your analysis):\r\n\r\nhttps://github.com/dotnet/msbuild/pull/9489/files#diff-ed2e36ca70a3a73e4379cf4470aa8f4f492b961eabfaa15127b21efcff6706f1R58\r\n\r\nOther than the `Span` usage the implementations are identical. However the `Span` usage didn't provide any significant benefit and required coditional compilation for .NET 3.5 - hence was pulled out.\r\n\r\nNote though that currently this work is on waiting banch till the #9572 is fixed.",
        "createdAt": "2024-01-09T11:46:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "[Blocking issue](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1937630) in CPS.",
        "createdAt": "2024-01-12T08:16:19Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Superseded by https://github.com/dotnet/msbuild/pull/9721",
        "createdAt": "2024-02-08T13:50:54Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}