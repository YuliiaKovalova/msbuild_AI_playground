{
  "number": 8149,
  "title": "Add tests for user's system configuration",
  "body": "Currently includes verifying long paths are enabled and they can create symlinks. As more issues come up, we should add to this list.",
  "state": "CLOSED",
  "createdAt": "2022-11-09T21:27:02Z",
  "updatedAt": "2023-06-02T16:48:51Z",
  "closedAt": "2023-06-02T16:48:50Z",
  "mergedAt": null,
  "additions": 83,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "test-environment",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "adbcd3baa59b7b0f8b5dde346196617385f9377b",
          "message": "Add tests for user's system configuration\n\nCurrently includes verifying long paths are enabled and they can create symlinks. As more issues come up, we should add to this list.",
          "committedDate": "2022-11-09T21:26:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ecbed196d0667de5c6b99cbe9ed68c4fb44f0711",
          "message": "Add messages",
          "committedDate": "2022-11-11T17:36:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d106d9733d49fa7fd72c4a32a86effab917f99b",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into test-environment",
          "committedDate": "2022-11-23T19:36:25Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c6386cf92890a8285c152b00572f6a95e5b9684b",
          "message": "Use method from Tasks.NativeMethods",
          "committedDate": "2022-11-23T19:38:43Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Why do we need tests to check user's system configuration? ",
        "createdAt": "2022-11-10T17:36:47Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> Why do we need tests to check user's system configuration?\r\n\r\nJust because we've had some issues reported recently that ended up not actually being product or test bugs but rather than a user had a different system configuration than expected. This should hopefully give us clearer errors when something like that happens: \"you should enable long paths\" instead of \"some random test broke\"",
        "createdAt": "2022-11-10T21:30:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > Why do we need tests to check user's system configuration?\r\n> \r\n> Just because we've had some issues reported recently that ended up not actually being product or test bugs but rather than a user had a different system configuration than expected. This should hopefully give us clearer errors when something like that happens: \"you should enable long paths\" instead of \"some random test broke\"\r\n\r\nWhy not to fix these tests, if there are not many of them? Together with adding the system configuration tests or instead. The rule \"some random test is broken; we look at the system configuration test and see that it is broken too => all is ok\" seems a bit complicated to me. I would rather prefer \"tests are passing\" or \"tests are not passing.\" \r\n\r\nAlso, the failing system configuration test does not tell me to fix the configuration to achieve better test coverage or passing tests. I would indeed prefer, if the tests stayed, to have the words \"you should enable long paths\" somewhere there in the test output.",
        "createdAt": "2022-11-11T10:00:58Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "What does \"fix these tests\" mean in this context? For some tests to actually test the thing they're testing, they require your system to be set up in a particular way. You as the user should fix your system to align with their expectations; the only change I could make to the tests would be adding these checks before running the rest of the test. Having a few designated \"SystemSetup\" tests gives you better errors without requiring patches for all tests that require long paths/symlinks. (There is currently only one symlink test, but I think it's fine to put these tests together.) The idea isn't that you look at these tests and determine that everything is fine but rather than after noticing these test failures, you change your configuration and try running all the tests again.\r\n\r\nAdding messages is a good idea. Added that.",
        "createdAt": "2022-11-11T17:52:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "My one concern with the latest version of this is that it'd be nice to actually use MakeSymbolicLink from Task's NativeMethods.cs, but I'm not sure there's a clean way to do that; I'd rather not have Framework reference Tasks.",
        "createdAt": "2022-11-23T19:39:47Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Revert to just do on core",
        "createdAt": "2022-12-05T16:22:35Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> What does \"fix these tests\" mean in this context? For some tests to actually test the thing they're testing, they require your system to be set up in a particular way. You as the user should fix your system to align with their expectations; the only change I could make to the tests would be adding these checks before running the rest of the test.\r\n\r\nYes, by \"fixing the test\" I meant to have these checks before the tests and fail with readable message of what to do to fix the failure in the test. \r\n\r\nIt would be a bit worse perf to repeat the check, but it would save user the confusion of a lot of different tests failing. I easily could start investigation of failed tests not from the system configuration tests but from other tests. And it would cost me some time. \r\n\r\nAlternatively, some message in the affected tests pointing me to check the system configuration tests first could do the trick of redirecting me to the proper test to look at.",
        "createdAt": "2022-12-08T17:21:38Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@Forgind Do you still plan to update this? `MakeSymbolicLink` already exists now in Build.Framework, the permission check can probably reuse functionality from `RequiresSymbolicLinksFactAttribute`",
        "createdAt": "2023-06-02T12:10:39Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> @Forgind Do you still plan to update this? `MakeSymbolicLink` already exists now in Build.Framework, the permission check can probably reuse functionality from `RequiresSymbolicLinksFactAttribute`\r\n\r\nActually, I think the REquiresSymbolicLinksFactAttribute kinda supersedes this, as it's a cleaner way to prevent \"user's system doesn't support creating symlinks\" from failing tests. There could be some value still in the long paths check or other aspects of a user's configuration I hadn't yet added, but short of strong signal that those are causing pain and confusion, I'd probably not make a change like this...I only started this for the symbolic link check. So I think we can close this, at least for now. Thanks for the reminder!",
        "createdAt": "2023-06-02T16:48:50Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why limit this to NETCOREAPP? we support creating symlinks with full-framework msbuild.",
              "createdAt": "2022-11-09T23:16:35Z",
              "path": "src/Framework.UnitTests/SystemSetup_Tests.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class SystemSetup_Tests\n+    {\n+        [Fact]\n+        public void VerifyLongPaths()\n+        {\n+            NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000);\n+        }\n+\n+#if NETCOREAPP",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The only test I know of that requires creating a symlink is core-specific. Also, File/Directory.CreateSymbolicLink are only available on core.",
              "createdAt": "2022-11-09T23:29:32Z",
              "path": "src/Framework.UnitTests/SystemSetup_Tests.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class SystemSetup_Tests\n+    {\n+        [Fact]\n+        public void VerifyLongPaths()\n+        {\n+            NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000);\n+        }\n+\n+#if NETCOREAPP",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Check out https://github.com/dotnet/msbuild/blob/15b127d2445d6b68429f1c31d9ff98fe4e1e728c/src/Tasks.UnitTests/Copy_Tests.cs#L2386-L2409",
              "createdAt": "2022-11-10T16:20:08Z",
              "path": "src/Framework.UnitTests/SystemSetup_Tests.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class SystemSetup_Tests\n+    {\n+        [Fact]\n+        public void VerifyLongPaths()\n+        {\n+            NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000);\n+        }\n+\n+#if NETCOREAPP",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's entirely nonobvious from that test, but it doesn't create a symlink.\r\n\r\nFirst off, it has a test to make sure you have the right privileges. If you don't, it fails with Assert.True(true, ...)...so it doesn't actually fail.\r\n\r\nThen it tries to make a symlink but actually just copies the file. I tried verifying that `(File.GetAttributes(destFile) & FileAttributes.ReparsePoint) != 0`, but that failed. Then I tried breaking shortly after the copy. I modified the file I found at destFile, saved it, and opened sourceFile, and it was unchanged.\r\n\r\nI also looked into how to make a symlink on .NET Framework, since I'd agree that it's better to create real symlinks anyway. It sounds like that requires p/invoking into some system call. We try to do that in exactly one place\u2014in the Copy task, as suggested by the test. I looked into why that was failing, and if I understand it right, you need admin privileges to use that particular system call, so that code path isn't normally getting exercised properly.\r\n\r\nThat is a separate issue. If File.CreateSymbolicLink doesn't require as high privileges as the p/invoke, I think we should consider #ifdeffing that in. For now, since we don't actually have any tests on framework that depend on making symlinks without admin privileges, I'd leave this PR as-is. (Note that when rokonec didn't have privileges to make symlinks, he only saw one test fail.)",
              "createdAt": "2022-11-11T00:11:55Z",
              "path": "src/Framework.UnitTests/SystemSetup_Tests.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class SystemSetup_Tests\n+    {\n+        [Fact]\n+        public void VerifyLongPaths()\n+        {\n+            NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000);\n+        }\n+\n+#if NETCOREAPP",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "We talked offline. It's easier to test the functionality of creating symlinks on Core, and it's not fatal to have the check only there since we generally run tests on multiple TFs it should still fail in, for example `build -test`.",
              "createdAt": "2022-11-11T19:03:32Z",
              "path": "src/Framework.UnitTests/SystemSetup_Tests.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public sealed class SystemSetup_Tests\n+    {\n+        [Fact]\n+        public void VerifyLongPaths()\n+        {\n+            NativeMethodsShared.MaxPath.ShouldBeGreaterThan(10000);\n+        }\n+\n+#if NETCOREAPP",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}