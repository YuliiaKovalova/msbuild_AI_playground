{
  "number": 6049,
  "title": "Fix null reference error on ResolveAssemblyReference",
  "body": "### Context\r\nNull reference error when ReferenceVersions are not set, introduced in https://github.com/dotnet/msbuild/pull/5990\r\n\r\n### Testing\r\nBug repros with https://github.com/dotnet/sdk/pull/15430. These changes were tested with that PR and fix the issue.",
  "state": "MERGED",
  "createdAt": "2021-01-20T21:55:36Z",
  "updatedAt": "2021-01-26T18:54:08Z",
  "closedAt": "2021-01-26T18:53:43Z",
  "mergedAt": "2021-01-26T18:53:43Z",
  "additions": 2,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "RARNullRef",
  "isDraft": false,
  "author": {
    "login": "sfoslund"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4d64f08b85c15e445391678d0ecd52804f6ed991",
          "message": "Fix null reference error on ResolveAssemblyReference",
          "committedDate": "2021-01-20T21:52:20Z",
          "author": {
            "name": "Sarah Oslund",
            "email": "sfoslund@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks @Forgind @BenVillalobos! I have a SDK PR depending on this that I'm hoping to get in by the end of the week so if you can merge this whenever your builds are working that would be great, thanks!",
        "createdAt": "2021-01-21T00:42:31Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "> Worth adding a test for this, that would have caught the exception?\r\n\r\nI don't have a deep understanding of RAR so I'm not sure how I would write a test for this within your infrastructure. However, the issue is repro'ed in several SDK tests now that we are enabling `OutputUnresolvedAssemblyConflicts`, so there is test coverage downstream. \r\n\r\nIf anyone wants to take a deeper look into how this happens, I've provided Nathan a binlog with the error.",
        "createdAt": "2021-01-21T16:40:50Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": ">  However, the issue is repro'ed in several SDK tests now that we are enabling OutputUnresolvedAssemblyConflicts, so there is test coverage downstream.\r\n\r\nSince RAR is a pain to think about, downstream coverage sounds good enough to me :)",
        "createdAt": "2021-01-21T19:14:55Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be better to pass an empty string rather than null if `ReferenceVersion` is null?",
              "createdAt": "2021-01-20T23:53:08Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1024,8 +1024,8 @@ List<Exception> generalResolutionExceptions\n                                 {\n                                     { \"logMessage\", output },\n                                     { \"logMessageDetails\", details },\n-                                    { \"victorVersionNumber\", victor.ReferenceVersion.ToString() },\n-                                    { \"victimVersionNumber\", conflictCandidate.ReferenceVersion.ToString() }\n+                                    { \"victorVersionNumber\", victor.ReferenceVersion?.ToString() },",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It doesn't seem to effect the outcome, does it? Either way there isn't a value for the metadata on this item.",
              "createdAt": "2021-01-20T23:58:41Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1024,8 +1024,8 @@ List<Exception> generalResolutionExceptions\n                                 {\n                                     { \"logMessage\", output },\n                                     { \"logMessageDetails\", details },\n-                                    { \"victorVersionNumber\", victor.ReferenceVersion.ToString() },\n-                                    { \"victimVersionNumber\", conflictCandidate.ReferenceVersion.ToString() }\n+                                    { \"victorVersionNumber\", victor.ReferenceVersion?.ToString() },",
              "author": {
                "login": "sfoslund"
              }
            },
            {
              "body": "I wasn't sure how it would ultimately was used, so I looked into it. Looks like it null checks anyway. LGTM\r\n\r\n```c#\r\n            /// <summary>\r\n            /// Returns the escaped value of the requested metadata name.\r\n            /// </summary>\r\n            string ITaskItem2.GetMetadataValueEscaped(string metadataName)\r\n            {\r\n                ErrorUtilities.VerifyThrowArgumentNull(metadataName, nameof(metadataName));\r\n\r\n                string metadataValue = null;\r\n\r\n                if (FileUtilities.ItemSpecModifiers.IsDerivableItemSpecModifier(metadataName))\r\n                {\r\n                    // FileUtilities.GetItemSpecModifier is expecting escaped data, which we assume we already are.\r\n                    // Passing in a null for currentDirectory indicates we are already in the correct current directory\r\n                    metadataValue = FileUtilities.ItemSpecModifiers.GetItemSpecModifier(null, _escapedItemSpec, _escapedDefiningProject, metadataName, ref _fullPath);\r\n                }\r\n                else if (_customEscapedMetadata != null)\r\n                {\r\n                    _customEscapedMetadata.TryGetValue(metadataName, out metadataValue);\r\n                }\r\n\r\n                return metadataValue ?? String.Empty;\r\n            }\r\n```",
              "createdAt": "2021-01-21T00:35:21Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1024,8 +1024,8 @@ List<Exception> generalResolutionExceptions\n                                 {\n                                     { \"logMessage\", output },\n                                     { \"logMessageDetails\", details },\n-                                    { \"victorVersionNumber\", victor.ReferenceVersion.ToString() },\n-                                    { \"victimVersionNumber\", conflictCandidate.ReferenceVersion.ToString() }\n+                                    { \"victorVersionNumber\", victor.ReferenceVersion?.ToString() },",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I'm confused\u2014what does this code have to do with this PR?",
              "createdAt": "2021-01-21T00:38:46Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1024,8 +1024,8 @@ List<Exception> generalResolutionExceptions\n                                 {\n                                     { \"logMessage\", output },\n                                     { \"logMessageDetails\", details },\n-                                    { \"victorVersionNumber\", victor.ReferenceVersion.ToString() },\n-                                    { \"victimVersionNumber\", conflictCandidate.ReferenceVersion.ToString() }\n+                                    { \"victorVersionNumber\", victor.ReferenceVersion?.ToString() },",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}