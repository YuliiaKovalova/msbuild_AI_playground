{
  "number": 5894,
  "title": "Extra processes",
  "body": "Looked for places that looked like they might be impeding node connections and made sure nodes die if they failed to connect to anything. Might fix [AB#1040783](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1040783).",
  "state": "CLOSED",
  "createdAt": "2020-11-18T19:26:22Z",
  "updatedAt": "2021-03-31T17:00:44Z",
  "closedAt": "2021-03-31T17:00:44Z",
  "mergedAt": null,
  "additions": 35,
  "deletions": 24,
  "changedFiles": 5,
  "headRefName": "extra-processes",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8d1651fc8b27a02b3bf9727649f7b3415ae30331",
          "message": "Increase connection timeout",
          "committedDate": "2020-10-07T19:42:59Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "470c4fcc63698a63372f2754e363775b39c7fa3c",
          "message": "Log specialNode",
          "committedDate": "2020-10-07T19:43:06Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7a731a36f9aa249dc42026fb756665d15482151",
          "message": "Add timeout for request builder shutdown",
          "committedDate": "2020-11-18T19:07:40Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2feda70163fc1d6a03c30e2e2e8a2cdfb715f21",
          "message": "Refactoring",
          "committedDate": "2020-11-18T19:07:56Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "67ed2ba8ae60bf49216bbf74b03acd0eec07510e",
          "message": "Kill this process if unnecessary",
          "committedDate": "2020-11-18T19:08:06Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9228a81c29f3288ebb94eb673e84b149c5faf24c",
          "message": "Fix comment and revert timeout increase",
          "committedDate": "2020-11-18T19:11:05Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0ee0b7f93f6950eac09fe0b542d99ea63f0a3c4",
          "message": "Merge https://github.com/dotnet/msbuild into extra-processes",
          "committedDate": "2020-11-18T19:17:26Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05abb1ec598d8a4f2d264d8fb4d9930733bcea22",
          "message": "Only fail when the connection fails",
          "committedDate": "2020-11-19T17:31:33Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Killing a process outright is the #1 reason this is currently a draft. It seems like there's a problem in which processes might time out and not die, so this would try to enforce their death. I'm not sure what's supposedly killing them, so if there's a bug there, fixing it would be better. That's sorta a placeholder until I find out what's best.",
        "createdAt": "2020-11-20T03:07:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "TIL our repo's first issue was a troll issue \ud83d\udc40",
        "createdAt": "2020-11-20T03:19:22Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// The shutdown timeout for the request builder in milliseconds.\r\n```\r\nI'd suggest applying this to each variable that stores an \"amount of time\", or appending `// 90 seconds` as other similar vars have done.",
              "createdAt": "2020-11-20T02:30:26Z",
              "path": "src/Build/BackEnd/BuildManager/BuildParameters.cs",
              "diffHunk": "@@ -48,7 +48,7 @@ public class BuildParameters : ITranslatable\n         /// <summary>\n         /// The shutdown timeout for the request builder.",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: easier to read this way in my opinion. I haven't seen this c# feature before, so I'd like to say that this suggested syntax is the way we do it \ud83d\ude42 maybe with the `when` being indented a tab?\r\n```suggestion\r\n                catch (AggregateException e)\r\n                when (e.Flatten().InnerExceptions.All(ex => (ex is TaskCanceledException || ex is OperationCanceledException)))\r\n```\r\n\r\nEither way, nice cleanup here.",
              "createdAt": "2020-11-20T02:33:35Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -265,19 +265,10 @@ public void WaitForCancelCompletion()\n                 {\n                     taskCleanedUp = _requestTask.Wait(BuildParameters.RequestBuilderShutdownTimeout);\n                 }\n-                catch (AggregateException e)\n+                catch (AggregateException e) when (e.Flatten().InnerExceptions.All(ex => (ex is TaskCanceledException || ex is OperationCanceledException)))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "We actually have a lot of examples with when on the same line as the catch. See BuildManager line 1134, 1139, 1165, 1353, and 1362 or BuildRequestEngine line 283, for example. Also, I like it slightly better on one line.",
              "createdAt": "2021-01-25T23:32:01Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -265,19 +265,10 @@ public void WaitForCancelCompletion()\n                 {\n                     taskCleanedUp = _requestTask.Wait(BuildParameters.RequestBuilderShutdownTimeout);\n                 }\n-                catch (AggregateException e)\n+                catch (AggregateException e) when (e.Flatten().InnerExceptions.All(ex => (ex is TaskCanceledException || ex is OperationCanceledException)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This potentially exposes a path that didn't happen previously (`parentProcessId == 0 && childParentProcessId == 0). What are the chances of this happening? What would even happen if it did?",
              "createdAt": "2020-11-20T02:38:15Z",
              "path": "src/Shared/NativeMethodsShared.cs",
              "diffHunk": "@@ -1310,14 +1310,11 @@ internal static int GetParentProcessId(int processId)\n                         if (possibleChildProcess.StartTime > parentStartTime)\n                         {\n                             int childParentProcessId = GetParentProcessId(possibleChildProcess.Id);\n-                            if (childParentProcessId != 0)\n+                            if (parentProcessId == childParentProcessId)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I _believe_ that should never happen. PID 0 is reserved for child processes, that is, the only way to have a pid of 0 is to fork another process, at which point one of the two processes that executes the next code has a pid of 0 to indicate child and the other has a real pid. That means we should never have to worry about them both being 0 unless I'm misunderstanding this, since it's subtle, and I'm slightly hazy.",
              "createdAt": "2020-11-20T03:04:29Z",
              "path": "src/Shared/NativeMethodsShared.cs",
              "diffHunk": "@@ -1310,14 +1310,11 @@ internal static int GetParentProcessId(int processId)\n                         if (possibleChildProcess.StartTime > parentStartTime)\n                         {\n                             int childParentProcessId = GetParentProcessId(possibleChildProcess.Id);\n-                            if (childParentProcessId != 0)\n+                            if (parentProcessId == childParentProcessId)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}