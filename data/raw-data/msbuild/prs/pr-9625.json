{
  "number": 9625,
  "title": "Checking for VS pathing when import not found",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/8967\r\n\r\n### Context\r\nUsers sometimes use different distributions to build projects, however some files available in the VS distribution are not available with `dotnet build`. It used to throw a \"File not found\" error, but now it is switched to \"this imported project is in a VS distribution\".\r\n\r\nAn example message is: ` error MSB4278: The imported project $(MSBuildE\r\nxtensionsPath)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\DSLTools\\Microsoft.DslTools.settings.targets is from the\r\nVisual Studio distribution of MSBuild. Build with MSBuild.exe in a Developer Command Prompt.`\r\n\r\n### Changes Made\r\nBefore throwing a `invalidProject` error for file not found, check the path of the file if it is within Visual Studio. If it is, throw new error instead.\r\n\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-10T17:27:30Z",
  "updatedAt": "2024-08-07T10:10:50Z",
  "closedAt": "2024-02-14T14:38:08Z",
  "mergedAt": "2024-02-14T14:38:08Z",
  "additions": 110,
  "deletions": 1,
  "changedFiles": 17,
  "headRefName": "8967",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cabc900f645d1b536d36ef65f2272a307ffe2043",
          "message": "Checking for VS pathing when import not found",
          "committedDate": "2024-01-10T17:18:38Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7f9f823247850690fd5928a0a42208f18d6ec94c",
          "message": "Added test",
          "committedDate": "2024-01-15T21:53:14Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "845797322eb7e31d46aa83b45b56165a2365a8d0",
          "message": "Adjusted test name",
          "committedDate": "2024-01-15T22:00:42Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e8dfba13625356f3c406bde2ce65e1110c07a42",
          "message": "Added unix style path comparison",
          "committedDate": "2024-01-17T17:08:56Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f30dff4e0b44a0c877a089fe95ecee184c14b1fd",
          "message": "Added separator for pathing",
          "committedDate": "2024-01-19T12:08:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c2d50295c8374fef96ea4f91a23e832c063aca51",
          "message": "Addressed PR comments",
          "committedDate": "2024-02-08T20:14:06Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06d7dbea2cf7fa6b81b4818b8302943ef49cee01",
          "message": "added conditional to function",
          "committedDate": "2024-02-13T12:05:16Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ec6870c1afdcad91a0427af03d5c4ccc60bd713",
          "message": "updated the message",
          "committedDate": "2024-02-13T17:24:00Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "07665ecdc9d332a3151b2f6611272fb44257015b",
          "message": "Adjusted test",
          "committedDate": "2024-02-14T12:59:11Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "781a9aeb3b062d998f515753c9a7ca6a1247c11e",
          "message": "changed test again",
          "committedDate": "2024-02-14T13:11:00Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`OrdinalIgnoreCase`?",
              "createdAt": "2024-01-10T17:43:34Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2640,6 +2644,14 @@ private void SetAllProjectsProperty()\n                     mayBeReserved: false);\n             }\n         }\n+\n+        private void VerifyVSDistributionPath(string path, ElementLocation importLocationInProject)\n+        {\n+            if (path.Contains(\"Microsoft\\\\VisualStudio\"))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I imagine this is only relevant on Windows? If so, Microsoft/VisualStudio would be unusual.\r\n\r\nEither way, you should be able to use Path.DirectorySeparatorChar",
              "createdAt": "2024-01-18T18:57:13Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2640,6 +2644,15 @@ private void SetAllProjectsProperty()\n                     mayBeReserved: false);\n             }\n         }\n+\n+        private void VerifyVSDistributionPath(string path, ElementLocation importLocationInProject)\n+        {\n+            if (path.IndexOf(\"Microsoft\\\\VisualStudio\", StringComparison.OrdinalIgnoreCase) >= 0\n+                || path.IndexOf(\"Microsoft/VisualStudio\", StringComparison.OrdinalIgnoreCase) >= 0)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Please undo this, @maridematte. `Path.DirectorySeparatorChar` will only have a single value at runtime, so this doesn't do what the prior version did and check for either slash direction in the import. The way you've implemented it it'll also [allocate a string every time through the method](https://sharplab.io/#v2:EYLgHgbALAPgAgJgIwFgBQcAMACOSB0AkgPIDc6cAzLgtgMLYDe62ru1wA9pwDbYCyACgDKAFwBOASwB2Ac2wBnAJRMWbdXADsiotIAmAUzDEAZoIAkAIgCGCvScYAFa6IAW+ACKTxBgMajOcQBPYQMAB2txF0C6V0iAXzAggC9LABpsMSk5Ok4AWwipBU5pfGJxPRlrHkJZaUCDOlsDFQA+AF5sTHI0dXj0eKA=) (here in an error case that's hardly fatal, but it's still unnecessary).\r\n\r\nThe optimal check would be to use the fixed strings + a flexible single-char check for the slash, but again: error case. So I like the two `IndexOf`s fine.",
              "createdAt": "2024-01-23T21:26:15Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2640,6 +2644,15 @@ private void SetAllProjectsProperty()\n                     mayBeReserved: false);\n             }\n         }\n+\n+        private void VerifyVSDistributionPath(string path, ElementLocation importLocationInProject)\n+        {\n+            if (path.IndexOf(\"Microsoft\\\\VisualStudio\", StringComparison.OrdinalIgnoreCase) >= 0\n+                || path.IndexOf(\"Microsoft/VisualStudio\", StringComparison.OrdinalIgnoreCase) >= 0)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this be conditional on being in .NET Core MSBuild? In Framework MSBuild if an import like this fails it's likely a missing VS workload or extension--which I guess we could also have a nice error for, too . . .",
              "createdAt": "2024-01-23T21:27:20Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2640,6 +2644,14 @@ private void SetAllProjectsProperty()\n                     mayBeReserved: false);\n             }\n         }\n+\n+        private void VerifyVSDistributionPath(string path, ElementLocation importLocationInProject)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@baronfel, @ghogen, thoughts on this message that's trying to help people who build VS-only projects from `dotnet build` or similar?",
              "createdAt": "2024-01-23T21:28:22Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -527,6 +527,10 @@\n     <value>MSB4019: The imported project \"{0}\" was not found. Confirm that the expression in the Import declaration \"{1}\" is correct, and that the file exists on disk.</value>\n     <comment>{StrBegin=\"MSB4019: \"}LOCALIZATION: &lt;Import&gt; should not be localized.</comment>\n   </data>\n+  <data name=\"ImportedProjectFromVSDistribution\" xml:space=\"preserve\">\n+    <value>MSB4278: The imported project {0} is from the Visual Studio distribution of MSBuild. Build with MSBuild.exe in a Developer Command Prompt. </value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "```suggestion\r\n    <value>MSB4278: The imported project {0} does not exist and appears to be part of Visual Studio. This project may require MSBuild.exe and fail to build in the dotnet CLI.</value>\r\n```",
              "createdAt": "2024-01-23T21:32:29Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -527,6 +527,10 @@\n     <value>MSB4019: The imported project \"{0}\" was not found. Confirm that the expression in the Import declaration \"{1}\" is correct, and that the file exists on disk.</value>\n     <comment>{StrBegin=\"MSB4019: \"}LOCALIZATION: &lt;Import&gt; should not be localized.</comment>\n   </data>\n+  <data name=\"ImportedProjectFromVSDistribution\" xml:space=\"preserve\">\n+    <value>MSB4278: The imported project {0} is from the Visual Studio distribution of MSBuild. Build with MSBuild.exe in a Developer Command Prompt. </value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This probably has to be conditional on core . . . this should do it\r\n```suggestion\r\n        [DotNetOnlyFact(\"Tests .NET SDK-only error\")]\r\n```",
              "createdAt": "2024-02-08T20:58:45Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -914,6 +914,44 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()\n             }\n         }\n \n+        [Fact]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "style nit: I'd put the `#if` in the method itself and rely on the JIT to skip the call to an empty method, just so this doesn't have to be repeated.\r\n\r\nOr make the method `[Conditional]` on a new `FEATURE_GUIDE_TO_VS_ON_UNSUPPORTED_PROJECTS` or something, that'd be succinct but require defining the feature.",
              "createdAt": "2024-02-08T21:06:43Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2304,6 +2304,10 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)\n                                 continue;\n                             }\n \n+#if !FEATURE_VISUALSTUDIOSETUP",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would still like @baronfel input on this wording (when possible, which can be after check-in).",
              "createdAt": "2024-02-08T21:07:27Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -527,6 +527,10 @@\n     <value>MSB4019: The imported project \"{0}\" was not found. Confirm that the expression in the Import declaration \"{1}\" is correct, and that the file exists on disk.</value>\n     <comment>{StrBegin=\"MSB4019: \"}LOCALIZATION: &lt;Import&gt; should not be localized.</comment>\n   </data>\n+  <data name=\"ImportedProjectFromVSDistribution\" xml:space=\"preserve\">\n+    <value>MSB4278: The imported project {0} does not exist and appears to be part of Visual Studio. This project may require MSBuild.exe and fail to build in the dotnet CLI. </value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm struggling a bit with the term 'project' here. I know it's technically correct (every `Import` imports an MSBuild project file, we just assign specific semantics to ones like D.B.props, D.B.targets, .csproj, etc) but I don't think users think of these files in terms of being 'projects'. So I think we need a better term here (and TBH in other places where we reference 'project', like in 'ImportedProjectNotFound` directly above.\r\n\r\n```suggestion\r\n    <value>MSB4278: The imported file {0} does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </value>\r\n```",
              "createdAt": "2024-02-13T16:56:13Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -527,6 +527,10 @@\n     <value>MSB4019: The imported project \"{0}\" was not found. Confirm that the expression in the Import declaration \"{1}\" is correct, and that the file exists on disk.</value>\n     <comment>{StrBegin=\"MSB4019: \"}LOCALIZATION: &lt;Import&gt; should not be localized.</comment>\n   </data>\n+  <data name=\"ImportedProjectFromVSDistribution\" xml:space=\"preserve\">\n+    <value>MSB4278: The imported project {0} does not exist and appears to be part of Visual Studio. This project may require MSBuild.exe and fail to build in the dotnet CLI. </value>",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>MSB4278: The imported file \"{0}\" does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </value>\r\n```",
              "createdAt": "2024-02-13T17:42:48Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -527,6 +527,10 @@\n     <value>MSB4019: The imported project \"{0}\" was not found. Confirm that the expression in the Import declaration \"{1}\" is correct, and that the file exists on disk.</value>\n     <comment>{StrBegin=\"MSB4019: \"}LOCALIZATION: &lt;Import&gt; should not be localized.</comment>\n   </data>\n+  <data name=\"ImportedProjectFromVSDistribution\" xml:space=\"preserve\">\n+    <value>MSB4278: The imported file {0} does not exist and appears to be part of a Visual Studio component. This file may require MSBuild.exe in order to be imported successfully, and so may fail to build in the dotnet CLI. </value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For new and updated test code, try to prefer using `TestEnvironment` to write files (it handles cleanup too).",
              "createdAt": "2024-02-13T17:44:53Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -914,6 +914,44 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()\n             }\n         }\n \n+        [DotNetOnlyFact(\"Tests .NET SDK-only error\")]\n+        public void ImportWithVSPathThrowsCorrectError()\n+        {\n+            InvalidProjectFileException ex = Assert.Throws<InvalidProjectFileException>(() =>\n+            {\n+                string projectPath = null;\n+                string importPath = null;\n+\n+                try\n+                {\n+                    // Does not matter that the file or folder does not exist, we are checking for the VS pathing here\n+                    importPath = \"path\\\\that\\\\does\\\\not\\\\exist\\\\Microsoft\\\\VisualStudio\\\\FileName.txt\";\n+                    projectPath = FileUtilities.GetTemporaryFileName();\n+\n+                    string import = ObjectModelHelpers.CleanupFileContents(@\"\n+                            <Project ToolsVersion=\"\"msbuilddefaulttoolsversion\"\" xmlns='msbuildnamespace' >\n+                            </Project>\n+                        \");\n+\n+                    File.WriteAllText(projectPath, import);\n+\n+                    string content = ObjectModelHelpers.CleanupFileContents(@\"\n+                            <Project ToolsVersion=\"\"msbuilddefaulttoolsversion\"\" xmlns='msbuildnamespace' >\n+                                <Import Project='\" + importPath + @\"'/>\n+                            </Project>\n+                        \");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What uses the file at `projectPath` after it's written?",
              "createdAt": "2024-02-13T17:45:38Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -914,6 +914,44 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()\n             }\n         }\n \n+        [DotNetOnlyFact(\"Tests .NET SDK-only error\")]\n+        public void ImportWithVSPathThrowsCorrectError()\n+        {\n+            InvalidProjectFileException ex = Assert.Throws<InvalidProjectFileException>(() =>\n+            {\n+                string projectPath = null;\n+                string importPath = null;\n+\n+                try\n+                {\n+                    // Does not matter that the file or folder does not exist, we are checking for the VS pathing here\n+                    importPath = \"path\\\\that\\\\does\\\\not\\\\exist\\\\Microsoft\\\\VisualStudio\\\\FileName.txt\";\n+                    projectPath = FileUtilities.GetTemporaryFileName();\n+\n+                    string import = ObjectModelHelpers.CleanupFileContents(@\"\n+                            <Project ToolsVersion=\"\"msbuilddefaulttoolsversion\"\" xmlns='msbuildnamespace' >\n+                            </Project>\n+                        \");\n+\n+                    File.WriteAllText(projectPath, import);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I just checked and nothing really. I removed that file from the test as it doesnt make sense having it.",
              "createdAt": "2024-02-14T13:00:13Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -914,6 +914,44 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()\n             }\n         }\n \n+        [DotNetOnlyFact(\"Tests .NET SDK-only error\")]\n+        public void ImportWithVSPathThrowsCorrectError()\n+        {\n+            InvalidProjectFileException ex = Assert.Throws<InvalidProjectFileException>(() =>\n+            {\n+                string projectPath = null;\n+                string importPath = null;\n+\n+                try\n+                {\n+                    // Does not matter that the file or folder does not exist, we are checking for the VS pathing here\n+                    importPath = \"path\\\\that\\\\does\\\\not\\\\exist\\\\Microsoft\\\\VisualStudio\\\\FileName.txt\";\n+                    projectPath = FileUtilities.GetTemporaryFileName();\n+\n+                    string import = ObjectModelHelpers.CleanupFileContents(@\"\n+                            <Project ToolsVersion=\"\"msbuilddefaulttoolsversion\"\" xmlns='msbuildnamespace' >\n+                            </Project>\n+                        \");\n+\n+                    File.WriteAllText(projectPath, import);",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: scope the lambda for the exception down to _just_ the line you expect to throw, so that you don't get a false-positive hit if some other line throws (here that's unlikely to be a problem since you only call into the API proper once, but it's a good rule to follow).",
              "createdAt": "2024-02-13T17:48:27Z",
              "path": "src/Build.UnitTests/Evaluation/Evaluator_Tests.cs",
              "diffHunk": "@@ -914,6 +914,44 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()\n             }\n         }\n \n+        [DotNetOnlyFact(\"Tests .NET SDK-only error\")]\n+        public void ImportWithVSPathThrowsCorrectError()\n+        {\n+            InvalidProjectFileException ex = Assert.Throws<InvalidProjectFileException>(() =>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}