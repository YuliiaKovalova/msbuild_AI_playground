{
  "number": 9022,
  "title": "17.7.1 merges",
  "body": "Combination of #8971, #8885, #8847, and #8978.",
  "state": "MERGED",
  "createdAt": "2023-07-12T19:48:24Z",
  "updatedAt": "2023-07-26T11:53:09Z",
  "closedAt": "2023-07-12T21:26:20Z",
  "mergedAt": "2023-07-12T21:26:20Z",
  "additions": 465,
  "deletions": 165,
  "changedFiles": 36,
  "headRefName": "vs17.7",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8ebc5caa25ecb7e5fee9d2abc4175abbdc01a8a7",
          "message": "Backward-compatibility with KeyValuePair<string, string> metadata items (#8870)\n\nBackport #8870 to vs17.7.",
          "committedDate": "2023-07-12T18:33:55Z",
          "author": {
            "name": "Jon Hynes",
            "email": "jonh@datarg.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4cf11b497f1b2e3a4c504e8b525dbb5529764941",
          "message": "Fix binlog OOM embedding files\n\nFixes #8595 by storing the embedded-file zip in a temporary directory\n(instead of memory or binlog target directory) to avoid problems with\nfile watchers.",
          "committedDate": "2023-07-12T18:39:43Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f2a020879c7a7f1f7c2f95beb4952b97412dcac",
          "message": "Avoid boxing when enumerating project xml children\n\nIn a recent profile of a graph construction, it was observed that a\nlarge amount of boxing was happening for\nProjectElementSiblingEnumerable. This change simplifies how xml children\nare enumerated by adding an internal ChildrenEnumerable property which\ndirectly exposes the ProjectElementSiblingEnumerable which should avoid\nboxing, at least in some code paths (the public API makes it hard to\navoid everywhere...).\n\nAdditionally, a very common usage of enumerating children was to do\nChildren.OfType<T> and wrap it in a ReadOnlyCollection<T>, so I\nintroduced a GetChildrenOfType (and GetChildrenReversedOfType) method\nwhich exposes an ICollection<T> which does the same thing but without\nthe boxing of ProjectElementSiblingEnumerable and without the OfType\nclass. It's just 1 collection allocation.",
          "committedDate": "2023-07-12T18:48:57Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "657005a80eabcbdd9b96f307f2f746861702a69b",
          "message": "Removing sln level turn off of setplatform feature\n\nCurrently we turn off dynamic platform resolution for a whole solution\nif a single project in the solution is assigned a configuration. This is\nproblematic as some projects are outside of the scope of the solution\nbut still have certain targets that run on them that are architecture\nspecific. These projects will build as the wrong architecture because no\nconfiguration is defined and no platform negotiation takes place.\n\nI removed the conditional that turns platform negotiation off on a sln\nlevel. The logic to turn this off on a project level is already in place\nthrough checking is a projectreference has setplatform appended to it.\nThis will make sure no projects with configurations defined will be\nnegotiated for as MSbuild adds setplatform metadata to projectreferences\nwith configurations.",
          "committedDate": "2023-07-12T18:55:00Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "971bf70db73ebd5d5e1dde5eb27b8265be9f3169",
          "message": "Merge branches 'dev/mipavlik/fix-binlog-outofmemory', 'perf-xml-child-enumeration', 'backport/pr-8870-to-vs17.7' and 'dev/michaelshea/sln' into vs17.7",
          "committedDate": "2023-07-12T18:59:33Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-07-12T19:48:29Z",
        "author": null
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Note that `stream.Length` is `long` while the original code was writing down `int`. These are serialized differently and thus this breaks the binary format:\r\n```csharp\r\n        private void Write(int value)\r\n        {\r\n            BinaryWriterExtensions.Write7BitEncodedInt(binaryWriter, value);\r\n        }\r\n\r\n        private void Write(long value)\r\n        {\r\n            binaryWriter.Write(value);\r\n        }\r\n```",
              "createdAt": "2023-07-23T15:21:39Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -218,6 +218,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n             Write(bytes);\n         }\n \n+        public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n+        {\n+            // write the blob directly to the underlying writer,\n+            // bypassing the memory stream\n+            using var redirection = RedirectWritesToOriginalWriter();\n+\n+            Write(kind);\n+            Write(stream.Length);",
              "author": {
                "login": "filipnavara"
              }
            },
            {
              "body": "Bad design on my part, should have named the overloads differently. Thanks so much for spotting this!",
              "createdAt": "2023-07-25T02:07:34Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -218,6 +218,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n             Write(bytes);\n         }\n \n+        public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n+        {\n+            // write the blob directly to the underlying writer,\n+            // bypassing the memory stream\n+            using var redirection = RedirectWritesToOriginalWriter();\n+\n+            Write(kind);\n+            Write(stream.Length);",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Original `BinaryWriter` also utilizes a lot of overloads. Your design just follows that, but it's easy to miss this type of bug.",
              "createdAt": "2023-07-26T11:53:09Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -218,6 +218,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n             Write(bytes);\n         }\n \n+        public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n+        {\n+            // write the blob directly to the underlying writer,\n+            // bypassing the memory stream\n+            using var redirection = RedirectWritesToOriginalWriter();\n+\n+            Write(kind);\n+            Write(stream.Length);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}