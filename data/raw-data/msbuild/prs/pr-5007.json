{
  "number": 5007,
  "title": "Read switches from any _MSBUILD_ env var",
  "body": "Fixes https://github.com/microsoft/msbuild/issues/5005 \r\n\r\n(In case you believe this is worthwhile.)",
  "state": "CLOSED",
  "createdAt": "2019-12-26T23:07:22Z",
  "updatedAt": "2021-08-10T23:03:48Z",
  "closedAt": "2021-08-10T15:10:01Z",
  "mergedAt": null,
  "additions": 78,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "msbuildenvvar",
  "isDraft": false,
  "author": {
    "login": "danmoseley"
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview 2"
  },
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "60abb84b6b2322f3f2cd61a5dfa29284546244ef",
          "message": "Read switches from any _MSBUILD_ env var",
          "committedDate": "2019-12-26T23:04:25Z",
          "author": {
            "name": "danmosemsft",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea3c235d5dacc567df1a55c8fc194e3d7b44b5b1",
          "message": "another case",
          "committedDate": "2019-12-26T23:07:13Z",
          "author": {
            "name": "danmosemsft",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c119248b40ecd6f86aad35b2fea690fe66fd8291",
          "message": "Test for response file",
          "committedDate": "2019-12-26T23:20:37Z",
          "author": {
            "name": "danmosemsft",
            "email": "danmose@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Sounds good to me. Do you think it would be better to be able to parse values without `/p:`? That is, `p1=v1 p2=\"v2a v2b\"` instead of `/p:p1=v1 /p:p2=\"v2a v2b\"`.",
        "createdAt": "2019-12-28T00:42:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Why can't you use a [directory.build.rsp](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-response-files?view=vs-2019#directorybuildrsp) file to achieve the same thing?",
        "createdAt": "2019-12-31T19:05:21Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "You could put it in a .gitignore, but otherwise it would still close up the git diff. Also, it might be useful in a remote environment if you send the code there, then want to modify the build without adding an extra pre-build step.",
        "createdAt": "2019-12-31T19:22:46Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Why can't you use a directory.build.rsp file to achieve the same thing?\r\n\r\nAs @Forgind suggested, sometimes it's easier to control the command line than the machine content, and it also is non persistent/doesn't show in the diff. (There might even be one in the repo already). Just another option.\r\n\r\n> Do you think it would be better to be able to parse values without /p:? That is, p1=v1 p2=\"v2a v2b\" instead of /p:p1=v1 /p:p2=\"v2a v2b\".\r\n\r\nI'm not sure I follow -- in my use case, I wanted to add a logger. So it needs to accept arbitrary parameters -- exactly the same as a .rsp file.",
        "createdAt": "2019-12-31T19:35:56Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> I'm not sure I follow -- in my use case, I wanted to add a logger. So it needs to accept arbitrary parameters -- exactly the same as a .rsp file.\r\n\r\nIt probably isn't worth it. I was wondering if you could check each switch as it comes in and automatically append `/p:` if necessary. It would slightly reduce typing for future users, but it would add significantly to the complexity.",
        "createdAt": "2019-12-31T21:45:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Worried this might hurt debug-ability. If a build is crashing due to an environment switch, there'd be little trace of it. You'd have to look in the msbuild log, in a *root* project's property list (the env var will leak into the msbuild properties). This is very indirect, and I can easily see how people might waste hours on this (I know I would :)).",
        "createdAt": "2019-12-31T21:57:07Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "True. I know someone who did exactly that recently. He wasn't happy.",
        "createdAt": "2019-12-31T22:00:18Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": ">  You'd have to look in the msbuild log, in a root project's property list (the env var will leak into the msbuild properties). \r\n\r\nGood point. Couldn't the same occur with the existing directory.build.rsp mechanism though? Assuming the directory.build.rsp is already committed so it doesn't show up as a diff. Although, perhaps it would have gone through CI.\r\n\r\nAlso, arguably this applies to the myriad MSBUILD* environment variables.",
        "createdAt": "2020-01-02T19:13:14Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I suppose if `_MSBUILD_` is being picked up, it could write a line prominently to stdout/console.What do you think?\r\n\r\nI actually didn't know about `directory.build.rsp` - I assume that doesn't apply when you're building in VS, as there's no command line parser - does it cause discrepancies between VS and msbuild.exe builds?",
        "createdAt": "2020-01-02T19:15:17Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> I assume that doesn't apply when you're building in VS, as there's no command line parser - does it cause discrepancies between VS and msbuild.exe builds? \r\n\r\nIt gets read only in msbuild.exe, so build manager based builds wouldn't get it.\r\n\r\n>it could write a line prominently to stdout/console.What do you think?\r\n\r\nYea, I like that idea. In general, I think it would help debugging if msbuild printed all the sources it loaded cmd line args from (including directory.build.rsp, msbuild.rsp, cmd line rsps, etc) and in what order. Biggest caveat that I see here is that MSBuild.exe cannot easily log build events, as there's no `LoggingService` at that point. I wouldn't be opposed to changing that, since it would help with other things, like logging the command line arguments. But I guess stdout printing would also be a good enough solution.\r\n",
        "createdAt": "2020-01-02T21:02:34Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Regarding logging these command line switches, looks like @KirillOsenkov started working on it in #5026. After he's done with that PR, you could reuse the logic to log command line args sources and their order.",
        "createdAt": "2020-01-03T00:22:21Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Team triage: closing for now to pick up more discussion. This implementation looks good and should be the basis of the feature if we decide to take it in the future (except for adding logging). More details: https://github.com/microsoft/msbuild/issues/5005#issuecomment-591084947\r\n\r\nIf reopening this PR, add logging using the deferred mechanism introduced in #5055.",
        "createdAt": "2020-02-25T21:43:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I strongly think we should do this. @mikestall recently requested a way to add /bl when the MSBuild command line was buried deep in the system and not easily accessible.",
        "createdAt": "2021-03-08T20:33:51Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@danmoseley would you like to pick this up? Or should me or someone from the team adopt this PR and land it?",
        "createdAt": "2021-03-08T20:35:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Related: Is there a way to read switches from properties? I had someone say they couldn't generate a real binlog because their project created a Project object and called Build on it. There was no obvious command line, and I didn't see an overload for adding one.",
        "createdAt": "2021-03-08T20:37:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@KirillOsenkov thanks for asking. I don't plan to pick this up again. You are welcome to, and I still think it would be valuable . Feel free to close this PR or repurpose it.",
        "createdAt": "2021-03-08T21:04:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@marcpopMSFT did you want to put this into 16.10?",
        "createdAt": "2021-03-10T16:22:09Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@KathleenDollard this needs PM input.",
        "createdAt": "2021-03-10T18:30:39Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "@KirillOsenkov, what do you think still needs to be done? This looks pretty complete to me. I made a couple modifications (not pushed yet) that resolve the compile error and add a unit test case, but it looks otherwise good to me.",
        "createdAt": "2021-03-12T17:57:10Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Just add a logging message at the beginning of the build like Rainer says: https://github.com/dotnet/msbuild/pull/5007#issuecomment-591085041\r\n\r\nUsing the additional command-line arguments \u201c***\u201d specified in the  `_MSBUILD_` environment variable.\r\n\r\nProbably in the same place that warns about single-core build or logs the binlog file name.",
        "createdAt": "2021-03-12T18:13:36Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "We had a discussion with the engineering system team and there are some concerns.  The recommendation is to hold off until @rainersigwald is back and then get together to talk through what folks are trying to achieve with this variable to determine if this is the right path forward.  The concerns were around reliability since customers could become reliant on that variable for the builds to work and be consistent which is the top issue facing internal builds.",
        "createdAt": "2021-03-15T17:08:11Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "https://github.com/danmoseley/msbuild/pull/1",
        "createdAt": "2021-04-26T15:38:37Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Just curious, are you planning to continue with this? I can't forget it as when I look at my list of PR's it's been there since 2019 ..!",
        "createdAt": "2021-08-10T05:02:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "rainersigwald said he was going to reach out to you, KirillOsenkov, and someone else to discuss it. @rainersigwald, has that happened yet?",
        "createdAt": "2021-08-10T14:55:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I still don't think this is worth the prospect of additional hard-to-debug complexity.",
        "createdAt": "2021-08-10T15:10:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald could you say a little more? My change was very simple and localized. I know it would be valuable to me. Did this grow into a more complex proposal? ",
        "createdAt": "2021-08-10T17:06:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I\u2019d love to see this happen too, and if someone is setting that env var, they know what they\u2019re doing. We\u2019ll be logging the var and the extra arguments anyway. It\u2019s just like an .rsp file.",
        "createdAt": "2021-08-10T17:14:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I primarily need it to inject /bl in a build where msbuild is launched indirectly from some blackbox system, like cake, nuke etc. Without this, and without modifying the blackbox system, you\u2019re just out of luck.",
        "createdAt": "2021-08-10T17:16:31Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Feel free to give the env var a scarier name",
        "createdAt": "2021-08-10T17:17:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I primarily need it to inject /bl in a build where msbuild is launched indirectly from some blackbox system, like cake, nuke etc. Without this, and without modifying the blackbox system, you\u2019re just out of luck.\r\n\r\n@KirillOsenkov Now you can inject a binlogger in the BuildManager by setting `MSBuildDebugEngine`: https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/BuildManager/BuildManager.cs#L524\r\nNot quite the full power of this PR though.",
        "createdAt": "2021-08-10T17:35:15Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I like the idea of being able to easily get a binlog (or whatever) when debugging in an unfamiliar environment. I am concerned about this becoming a bugbear we have to constantly check on when debugging \"works on my machine\" type scenarios.\r\n\r\nThe `MSBuildDebugEngine` stuff sidesteps this by affecting only logging which I'm prepared to treat as \"safe\".\r\n\r\nDoes anyone have a use case for the environment-variable feature _besides_ logging?",
        "createdAt": "2021-08-10T17:42:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I like to add `/flp9;v=d` but I may be an old timer and I should get with the `/bl` program.\r\n\r\nMy other scenarios are eg\r\n*  `/pp:pp%random%.txt`\r\n*  `/p:foo=bar` (where foo might be MyDumpExtraInfo property or ForcePassingOptimizedFlagToCsc or PathToSomeLocalTaskDllThatFeedsToAUsingTask or something)\r\n",
        "createdAt": "2021-08-10T18:29:15Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Also, it's easier to remember `__MSBUILD__` (not least it follows existing pattern for CL etc) than it is to know to set both `MSBuildDebugEngine=1 `and `MSBuildDebugProcessName=msbuild.exe` (actually, is it dotnet.exe?)",
        "createdAt": "2021-08-10T18:33:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Also, it's easier to remember `__MSBUILD__` (not least it follows existing pattern for CL etc) than it is to know to set both `MSBuildDebugEngine=1 `and `MSBuildDebugProcessName=msbuild.exe` (actually, is it dotnet.exe?)\r\n\r\nNot necessary to set `MSBuildDebugProcessName`, if it's empty it just fallbacks to checking `MSBuildDebugEngine`. MSBuildDebugProcessName is there when debugging a complicated multi proc app that calls msbuild from different processes (like VS) and you want to restrict logs to only one of the differently named processes",
        "createdAt": "2021-08-10T21:50:43Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> I am concerned about this becoming a bugbear we have to constantly check on when debugging \"works on my machine\" type scenarios.\r\n\r\nIf it's fully logged, would it be much different to a regular command line flag? These can already come from an nth-nested response file. ",
        "createdAt": "2021-08-10T23:03:47Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}