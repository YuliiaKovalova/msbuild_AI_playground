{
  "number": 10124,
  "title": "Change the random generation method",
  "body": "\r\n### Context\r\nChanging the usage of the Random to RandomNumberGenerator, to align with the codebase ",
  "state": "CLOSED",
  "createdAt": "2024-05-10T14:36:17Z",
  "updatedAt": "2024-06-14T10:03:46Z",
  "closedAt": "2024-05-10T16:25:03Z",
  "mergedAt": null,
  "additions": 6,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "dev/f-alizada/change-random-generator",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "43bb01d9392dc7149add73ca2474cde785b37499",
          "message": "Change the random generation method",
          "committedDate": "2024-05-10T14:29:35Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f7c512870c2d34a29b5bea931ee77b20ae66971",
          "message": "Update comment",
          "committedDate": "2024-05-10T15:32:02Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": ">  but this whole thing seems pretty heavyweight when we could do something like\r\n\r\nWe've discouraged using `Guid.NewGuid()` as a source of cryptographic randomness. Though .NET today largely does use cryptographic random values in `Guid`, that is not really the purpose of GUID. If you need a crypto RNG, use a crypto RNG.",
        "createdAt": "2024-05-10T15:42:56Z",
        "author": {
          "login": "vcsjones"
        }
      },
      {
        "body": "> This is fine, but this whole thing seems pretty heavyweight when we could do something like https://sharplab.io/#v2:EYLgHgbALAPgAgJgIwFgBQcAMACOSB0AIgJYCGA5gHYD2AzgC7EDGtA3OunAMy4LYDC2AN7psY3Dzw4AsgApiletgA2AU0rl6ACwCUw0eMMAVAE6kmq/AEFatVSfqy1G7dgA82Lgh3s0hw3AA7NgA4gCuxAAm+AByqgDu4VGyOvhG1ADK9CYK5LIARDH5qRlhwFKymAA0Kuqaur6GAL7oTUA\r\n\r\nAFAIK the individual parts of guids have different distributions (there is a part derived from machine uuid as well I believe - so effectively constant on a single machine) - so the substrings of particular length might not serve the purpose well.",
        "createdAt": "2024-05-10T15:43:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This is used in one place to disambiguate a filename. I would love to delete the code entirely and use a non-cryptographic semi-random thing in its place.",
        "createdAt": "2024-05-10T15:44:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing the PR:  Since the System.Random used for the filename. Thank you for all the comments and reviews",
        "createdAt": "2024-05-10T16:25:04Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "for what it's worth, if you are x-targeting to .NET Core, you can switch out `Random random = new();` for `Random.Shared` for a little more convenience/efficiency.",
        "createdAt": "2024-05-10T19:37:29Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Update doc comment above",
              "createdAt": "2024-05-10T15:03:42Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -17,15 +18,16 @@ internal static class StringUtils\n     internal static string GenerateRandomString(int length)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a performance advantage in holding one of these in a static (or thread static)? I don't know, but some implementations of such things generate a block and then return it in pieces as requested. Or pull expensive entropy to start up. @vcsjones  ?",
              "createdAt": "2024-05-10T15:09:47Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -17,15 +18,16 @@ internal static class StringUtils\n     internal static string GenerateRandomString(int length)\n     {\n         // Base64, 2^6 = 64\n+        using var rng = RandomNumberGenerator.Create();",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "`RandomNumberGenerator` was never documented as thread-safe, even though in all practical cases, it is thread-safe when used with `RandomNumberGenerator.Create()`. Practically speaking, it would work fine to pull this up to a static, even in .NET Framework.\r\n\r\nWe've made significant investments in the RandomNumberGenerator for .NET (Core). If you want to avoid the allocation for the modern .NET, you can do something like\r\n\r\n```C#\r\nbyte[] randomBytes;\r\n\r\n#if NET\r\n  randomBytes = RandomNumberGenerator.GetBytes(randomBytesNeeded);\r\n#else\r\n  randomBytes = new byte[randomBytesNeeded];\r\n  using var rng = RandomNumberGenerator.Create();\r\n  rng.GetBytes(randomBytes);\r\n#endif\r\n```",
              "createdAt": "2024-05-10T15:40:31Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -17,15 +18,16 @@ internal static class StringUtils\n     internal static string GenerateRandomString(int length)\n     {\n         // Base64, 2^6 = 64\n+        using var rng = RandomNumberGenerator.Create();",
              "author": {
                "login": "vcsjones"
              }
            },
            {
              "body": "Thank you for suggestions.\r\n\r\nWe're currently using this utility to create name of a build binary log file - so simpler code is preference",
              "createdAt": "2024-05-10T15:46:17Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -17,15 +18,16 @@ internal static class StringUtils\n     internal static string GenerateRandomString(int length)\n     {\n         // Base64, 2^6 = 64\n+        using var rng = RandomNumberGenerator.Create();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}