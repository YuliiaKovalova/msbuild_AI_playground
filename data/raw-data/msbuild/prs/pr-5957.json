{
  "number": 5957,
  "title": "HasLoggedError Respects MSBuildWarningsAsErrors",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/5511\r\n\r\n## Context\r\nCustom tasks have a `Log.HasLoggedErrors` property that does not respect thrown warnings that are listed under `MSBuildWarningsAsErrors`.\r\n\r\n## The Solution\r\nBefore logging the warning, check if the warning code is listed under `MSBuildWarningsAsErrors`. If so, log as an error instead.\r\n\r\n## Notes\r\nSome comments I wrote as I was investigating this, in all its unformatted glory\r\n```\r\n            // LoggingContext has no idea if LoggingService actually interpreted the warning as an error, and logged it as so.\r\n            // It's a problem because TaskBuilder checks _THIS FILE'S _HASLOGGEDERRORS_ boolean to see if it logged errors.\r\n            // But loggingservice does not expose this info!\r\n\r\n            //doesn't work if the submission had already logged an error. unless we count the number of logged errors.\r\n\r\n            // Another problem is you need the warning code. Okay we can get that from resourceutilities.\r\n\r\n            // The fix: Have LoggingContext see if what we were about to log as an warning is actually an error.\r\n            // Prev code path: LogWarning -> _loggingService.LogWarning -> LoggingService.RouteBuildEvent \"Oh should we ACTUALLY log it as an error? -> Replace with error args.\r\n            // New code path: LogWarning \"oh wait actually log it as an error\" -> _loggingService.LogWarning -> RouteBuildEvent -> LoggingService.RouteBuildEvent -> log.\r\n```\r\n\r\n## To-Do\r\n- [ ] See if this works locally\r\n- [ ] Tests",
  "state": "CLOSED",
  "createdAt": "2020-12-10T22:07:13Z",
  "updatedAt": "2021-01-15T03:01:29Z",
  "closedAt": "2021-01-15T03:01:29Z",
  "mergedAt": null,
  "additions": 50,
  "deletions": 3,
  "changedFiles": 4,
  "headRefName": "hasloggedwarning-respect-warningsaserrors",
  "isDraft": true,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "df6bd417a9aeb7adf001b6b3023530ebffce67d5",
          "message": "LoggingContext tracks HasLoggedError if logging a WarnAsError",
          "committedDate": "2021-01-11T20:18:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e26da57cc870b535ae4925d88335e1d50c93ad5b",
          "message": "Improve comments",
          "committedDate": "2021-01-11T20:18:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00d5fc8a0f51ce26b15028bfd785d49913633023",
          "message": "Add null check",
          "committedDate": "2021-01-11T20:18:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ca078665ac7b1f545a539fce88ee79a6a15dca0d",
          "message": "Check length, return properly",
          "committedDate": "2021-01-11T20:18:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1acd05c3af1629d57278b28f6c871aeab36c3cf",
          "message": "Add warning->error check for taskhost",
          "committedDate": "2021-01-11T20:18:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Note to self: Look over warningsaserror tests and figure out when the collections I'm checking aren't null.\r\n\r\nIt looks like LoggingContext should be able to determine on its own that a warning its about to log should actually be an error.",
        "createdAt": "2020-12-23T01:37:27Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Correctly fixing this is proving to be quite difficult.\r\n\r\nThe warnings in the repro are logging from a Task, which logs to a TaskLoggingHelper, which logs a warning through a BuildEngine. The BuildEngine (through TaskHost.cs) tells a loggingcontext's LoggingService that it's logged a warning. The problem is a TaskLoggingHelper has no idea that when it logs a warning it's actually being logged as an error.\r\n\r\nFunny thing is this problem also exists for LoggingContext. I solved that by exposing the `ShouldLogWarningAsError` method through the `ILoggingService` interface. Once again, I can't easily see a way to do this for a TaskLoggingHelper.\r\n\r\nThinking out loud: could we create an IBuildEngine8 that had an event called `LoggedError`, that a tasklogginghelper can subscribe to and set its own `HasLoggedError` to true?\r\n\r\nOther questions I've thought up while investigating this:\r\nLoggingService is used by many logging contexts, but is this one loggingservice per project? per build?\r\n\r\nHave Tasks _never_ correctly respected Log.HasLoggedError when we throw a warning and that warning is included in MSBuildWarningsAsErrors? \r\n\r\nNote to self: see the PR that introduced it: https://github.com/dotnet/msbuild/pull/1928",
        "createdAt": "2021-01-12T02:30:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The PR that introduced warning-as-error is #1355--#1928 extended it to allow the project level properties.\r\n\r\nSince that's done in the logging infrastructure rather than at the point of logging, I think that's the problem. Unfortunately I don't know if there's an easy way to move it. Can you investigate that angle? Is the warning-as-errors stuff available in TaskHost and if not how hard would it be to get it there?\r\n\r\nI don't think we should attack the problem for TaskLoggingHelper alone--if you attack it at the IBuildEngine API layer, it'll work for everything, not just tasks that use the helper classes.",
        "createdAt": "2021-01-12T16:39:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry, undrafted by accident.",
        "createdAt": "2021-01-12T16:40:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing in favor of: https://github.com/dotnet/msbuild/pull/6040",
        "createdAt": "2021-01-15T03:01:29Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}