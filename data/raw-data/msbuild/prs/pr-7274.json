{
  "number": 7274,
  "title": "SA1509 Opening braces should not be preceded by blank line",
  "body": "Relates to #7174\r\nhttps://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1509.md",
  "state": "MERGED",
  "createdAt": "2022-01-12T08:35:09Z",
  "updatedAt": "2022-01-24T11:38:25Z",
  "closedAt": "2022-01-24T09:39:15Z",
  "mergedAt": "2022-01-24T09:39:15Z",
  "additions": 17,
  "deletions": 23,
  "changedFiles": 7,
  "headRefName": "SA1509",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ae409e92c4bf8650d08dd3398d090cac872f6240",
          "message": "SA1509 Opening braces should not be preceded by blank line",
          "committedDate": "2022-01-12T08:34:37Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "694db9585b7a92df5aca96a93e0fe2dad1ad1e7b",
          "message": "Remove braces and additional refactor",
          "committedDate": "2022-01-18T22:24:05Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "When the braces are used only as a code block - so no class, method body, conditional, loop, etc. - I actually think that an empty line can help. Is it possible that the rule is not working as intended?",
              "createdAt": "2022-01-12T13:15:26Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "cc @sharwell",
              "createdAt": "2022-01-12T13:17:17Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I don't disagree, but I also don't see the point of using braces as a code block; I'd prefer to just remove the braces.",
              "createdAt": "2022-01-12T18:29:46Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I see what you mean, but I don't understand why anyone would add braces around code like this? Are we able to just remove them?",
              "createdAt": "2022-01-12T21:40:04Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "There are some niche uses for code blocks. It's nice to be able to reuse variable names sometimes:\r\n\r\n```C#\r\n{\r\n    int x = 42;\r\n    // ...\r\n}\r\n{\r\n    string x = \"hello\";\r\n    // ...\r\n}\r\n```\r\n\r\nAnd the scope applies to `using` also, so I can imagine favoring code like this:\r\n\r\n```C#\r\n{\r\n    using var x = new Resource();\r\n    using var y = new Resource();\r\n    using var z = new Resource();\r\n    // ...\r\n}\r\n```\r\n\r\nover:\r\n\r\n```C#\r\nusing (var x = new Resource())\r\n{\r\n    using (var y = new Resource())\r\n    {\r\n        using (var z = new Resource())\r\n        {\r\n          // ...\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nBut I guess it's generally avoidable. In this case I would vote for just removing it.",
              "createdAt": "2022-01-13T07:56:28Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I have also seen code blocks used in ifdef scenarios:\r\n```C#\r\n#if CONDITIONAL_THINGY\r\n  if (this || that)\r\n#endif\r\n\r\n  {\r\n    Thingy1();\r\n    Thingy2();\r\n  }\r\n```\r\nBut in this particular case I also vote for removing the code block.",
              "createdAt": "2022-01-13T08:43:26Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "@rokonec in your example the braces don't have a blank line before hand. So it wouldn't trigger the rule.\r\n\r\nThis rule is about a blank line before open braces.",
              "createdAt": "2022-01-13T11:36:59Z",
              "path": "src/Tasks.UnitTests/XslTransformation_Tests.cs",
              "diffHunk": "@@ -864,7 +864,6 @@ public void CompiledDllWithTwoTypes()\n             string doubleTypePath = Path.Combine(dir, \"double.dll\");\n \n             CompileDoubleType(doubleTypePath);\n-",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      }
    ]
  }
}