{
  "number": 11638,
  "title": "Fix TaskParameterTaskItem serialization perf",
  "body": "### Fixes\r\n\r\nFixes several hotspots I found while profiling RAR service serialization.\r\n\r\n### Changes Made\r\n\r\n- Fix effectively doubling the work in the write direction, where `TaskParameterTaskItem` is created to wrap an existing TaskItem, but then of its metadata is parsed one again right before serialization\r\n- Use `MSBuildNameIgnoreCaseComparer.Default` (by moving it into Framework`\r\n- Avoid additional call to retrieve value when enumerating dictionary returned by `ITaskItem2.CloneCustomMetadataEscaped()`. If this is a `Utilities.TaskItem` coming back from a task, doing an accessor check is non-negligible overhead due to `CopyOnWriteDictionary`.\r\n- SImplify translation logic. Prefer unidirectional `ITranslator` APIs over manually checking each direction or reimplementing methods, and let `TaskParameterTaskItem` handle its own serialization.\r\n\r\nA bunch of small improvements but they add up. Since the out of proc TaskHost is the only piece currently using this, here's some profiles off my RAR service builds.\r\n\r\n#### `TaskParameterTaskItem.CopyMetadataTo()`\r\n\r\nThis is often hit by `ReferenceTable.SetItemMetadata` in RAR. This fix here was to use `IMetadataContainer.ImportMetadata()` bulk set, since `ImmutableDictionary` performs better when operations are batched.\r\n\r\nBefore:\r\n![image](https://github.com/user-attachments/assets/6c2d7dd4-0201-4af5-b981-629f2787c9ca)\r\nAfter:\r\n![image](https://github.com/user-attachments/assets/540c6871-976d-43b3-80e0-4cde76a72263)\r\n\r\n#### Double `ITaskItem` parsing\r\n\r\nEssentially when in the write direction the old code would construct a `TaskParameterTaskItem`, but later cast it to ITaskItem and parse everything out again. You can see this here where `CloneCustomMetadataEscaped()` is hit even though by this point we've already extracted the external `TaskItem` to our own instance.\r\n\r\nBefore:\r\n![image](https://github.com/user-attachments/assets/9aa83498-b939-4533-baaa-a550c22b88ec)\r\nAfter:\r\n![image](https://github.com/user-attachments/assets/870ff852-a912-460a-8dd2-b5a5fb207c2c)\r\n\r\n#### `ItemSpec` unescaped value caching\r\n\r\nAdded a simple cache around `ItemSpec` property accesses. Might be worth porting this into `ProjectItemInstance.TaskItem` and `Utilities.TaskItem` since this is hit very often. \r\n\r\nI'm showing this one as a backtrace to show where this is hit.\r\n\r\nBefore:\r\n![image](https://github.com/user-attachments/assets/1e6d3312-77dc-4bee-953f-a8dc991d8fe3)\r\nAfter:\r\n![image](https://github.com/user-attachments/assets/f278b1db-65de-477f-8c74-8329bec70884)\r\n\r\nThis actually appears to just no-op most of the time since most of the time is spent in String.IndexOf():\r\n![image](https://github.com/user-attachments/assets/09f9e51f-6526-4380-8a6e-f5f6a4680d86)\r\n",
  "state": "OPEN",
  "createdAt": "2025-03-27T13:30:44Z",
  "updatedAt": "2025-05-15T21:39:37Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 139,
  "deletions": 233,
  "changedFiles": 8,
  "headRefName": "dev/chcasta/prop-perf-2",
  "isDraft": false,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2454856e12dfa637c9e68ad7612004c48ee8cea8",
          "message": "Fix TaskParameterTaskItem serialization perf",
          "committedDate": "2025-03-28T00:57:28Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6fc533ac46a654b64e41ce7a02da035743980c3a",
          "message": "Fix typo (accidentaly lookup)",
          "committedDate": "2025-03-28T00:57:28Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98c7a5566935cddf952e66795892f40a602a6a92",
          "message": "Match ITaskItem / ITaskItem2 copy-from behavior",
          "committedDate": "2025-03-28T00:57:28Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5944fb6be499d69804d3ebe759edad24d4e5c659",
          "message": "Use IMetadataContainer bulk-set on CopyMetadataTo (for RAR ReferenceTable)",
          "committedDate": "2025-03-28T00:57:28Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57f0123b0d371afd8a099c1df875abec1bab23f1",
          "message": "Remove old files",
          "committedDate": "2025-03-28T01:42:41Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "518515679b6cc47cebada2d674f7ca9630afd2b5",
          "message": "Temporarily cache unescaped ItemSpec when accessed by tasks",
          "committedDate": "2025-03-28T04:53:47Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "lol probably broke something while pulling this out of my RAR branch, will check UT failures later today",
        "createdAt": "2025-03-27T15:06:45Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "Updated with profile traces now that I've fully isolated it from other perf stuff. Tests passing so should be good to go \ud83d\udc4d",
        "createdAt": "2025-03-28T04:38:41Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "Quite large change to parse out so I'm not 100% sure I didn't miss something, however overall I like it.\r\nIt get's rid of a bunch of code, which is nice.\r\nIt has a performance benefit which is even nicer.\r\nIt passes tests, which is good.\r\n\r\nSince it is only being used by TaskHost(and eventually RAR caching), I'm voting for.",
        "createdAt": "2025-05-15T14:05:48Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Tbh not sure why `IMetadataContainer` is conditioned out of the taskhost beside the extra source file (compiles fine with it), but I've kept it here anyways.",
              "createdAt": "2025-03-28T05:08:46Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -891,6 +763,25 @@ public void CopyMetadataTo(ITaskItem destinationItem)\n                 // between items, and need to know the source item where the metadata came from\n                 string originalItemSpec = destinationItem.GetMetadata(\"OriginalItemSpec\");\n \n+#if !TASKHOST",
              "author": {
                "login": "ccastanedaucf"
              }
            },
            {
              "body": "Removing the `#if` would be nice since it reduces complexity somewhat. However it is tiny enough change and we don't care much about TaskHost (since it's there mostly for back compatibility)\r\nSo I would say your call and as such I'm fine with either way - if you didn't point it out, I wouldn't have noticed.\r\n\r\nNow that I wrote the comment, there is the question if having an extra source file would beep on some radar somewhere and make someone unhappy. ",
              "createdAt": "2025-05-15T14:01:54Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -891,6 +763,25 @@ public void CopyMetadataTo(ITaskItem destinationItem)\n                 // between items, and need to know the source item where the metadata came from\n                 string originalItemSpec = destinationItem.GetMetadata(\"OriginalItemSpec\");\n \n+#if !TASKHOST",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I'll just leave it as-is for this change, maybe come back to it later",
              "createdAt": "2025-05-15T21:39:37Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -891,6 +763,25 @@ public void CopyMetadataTo(ITaskItem destinationItem)\n                 // between items, and need to know the source item where the metadata came from\n                 string originalItemSpec = destinationItem.GetMetadata(\"OriginalItemSpec\");\n \n+#if !TASKHOST",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Based on that profile showing `SetMetadata(\"OrignalItemSpec\")` adding still time under here, maybe worth joining it into the `IEnumerable` to avoid immediately copying a new `ImmutableDictionary` right after this block - haven't checked to see if `IEnumerable.Concat()` or spread operator works efficiently or ends up allocating a collection. Otherwise a local function + `yield return` would work",
              "createdAt": "2025-03-28T05:16:42Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -891,6 +763,25 @@ public void CopyMetadataTo(ITaskItem destinationItem)\n                 // between items, and need to know the source item where the metadata came from\n                 string originalItemSpec = destinationItem.GetMetadata(\"OriginalItemSpec\");\n \n+#if !TASKHOST\n+                if (_customEscapedMetadata != null && destinationItem is IMetadataContainer destinationItemAsMetadataContainer)\n+                {\n+                    // The destination implements IMetadataContainer so we can use the ImportMetadata bulk-set operation.\n+                    IEnumerable<KeyValuePair<string, string>> metadataToImport = _customEscapedMetadata\n+                        .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Key)));\n+\n+#if FEATURE_APPDOMAIN\n+                    if (!AppDomain.CurrentDomain.IsDefaultAppDomain())\n+                    {\n+                        // Linq is not serializable so materialize the collection before making the call.\n+                        metadataToImport = metadataToImport.ToList();\n+                    }\n+#endif\n+\n+                    destinationItemAsMetadataContainer.ImportMetadata(metadataToImport);",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I tip my hat off to you, this one is beautiful to see.",
              "createdAt": "2025-05-15T13:55:57Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -278,225 +280,39 @@ public override object InitializeLifetimeService()\n         /// </summary>\n         internal static TaskParameter FactoryForDeserialization(ITranslator translator)\n         {\n-            TaskParameter taskParameter = new TaskParameter();\n+            TaskParameter taskParameter = new();\n             taskParameter.Translate(translator);\n             return taskParameter;\n         }\n \n-        /// <summary>\n-        /// Creates a new ITaskItem with the contents of the old one.\n-        /// </summary>\n-        private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)\n-        {\n-            ITaskItem2 copyFromAsITaskItem2 = copyFrom as ITaskItem2;\n-            string escapedItemSpec;\n-            string escapedDefiningProject;\n-            Dictionary<string, string> escapedMetadata;\n-            if (copyFromAsITaskItem2 != null)\n-            {\n-                escapedItemSpec = copyFromAsITaskItem2.EvaluatedIncludeEscaped;\n-                escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);\n-                IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();\n-\n-                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;\n-                if (escapedMetadata is null)\n-                {\n-                    escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n-                    foreach (object key in nonGenericEscapedMetadata.Keys)\n-                    {\n-                        escapedMetadata[(string)key] = (string)nonGenericEscapedMetadata[key] ?? String.Empty;\n-                    }\n-                }\n-            }\n-            else\n-            {\n-                // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that\n-                // CloneCustomMetadata, GetMetadata, & ItemSpec returns unescaped values, and\n-                // TaskParameterTaskItem's constructor expects escaped values, so escaping them all\n-                // is the closest approximation to correct we can get.\n-                escapedItemSpec = EscapingUtilities.Escape(copyFrom.ItemSpec);\n-\n-                escapedDefiningProject = EscapingUtilities.EscapeWithCaching(copyFrom.GetMetadata(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath));\n-\n-                IDictionary customMetadata = copyFrom.CloneCustomMetadata();\n-                escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n-\n-                if (customMetadata?.Count > 0)\n-                {\n-                    foreach (string key in customMetadata.Keys)\n-                    {\n-                        escapedMetadata.Add(key, EscapingUtilities.Escape((string)customMetadata[key] ?? String.Empty));\n-                    }\n-                }\n-            }\n-\n-            TaskParameterTaskItem taskItem = new TaskParameterTaskItem(escapedItemSpec, escapedDefiningProject, escapedMetadata);\n-            return taskItem;\n-        }\n-\n         /// <summary>\n         /// Serialize / deserialize this item.\n         /// </summary>\n         private void TranslateITaskItemArray(ITranslator translator)\n         {\n-            if (!TranslateNullable(translator, _wrappedParameter))\n-            {\n-                return;\n-            }\n+            ITaskItem[] wrappedItems = (ITaskItem[])_wrappedParameter;\n+            int length = wrappedItems?.Length ?? 0;\n+            translator.Translate(ref length);\n+            wrappedItems ??= new ITaskItem[length];\n \n-            if (translator.Mode == TranslationDirection.WriteToStream)\n+            for (int i = 0; i < wrappedItems.Length; i++)\n             {\n-                ITaskItem[] wrappedItems = (ITaskItem[])_wrappedParameter;\n-\n-                int length = wrappedItems.Length;\n-                translator.Translate(ref length);\n-\n-                foreach (ITaskItem wrappedItem in wrappedItems)\n-                {\n-                    WriteITaskItem(translator, wrappedItem);\n-                }\n+                TaskParameterTaskItem taskItem = (TaskParameterTaskItem)wrappedItems[i];\n+                translator.Translate(ref taskItem, TaskParameterTaskItem.FactoryForDeserialization);\n+                wrappedItems[i] = taskItem;\n             }\n-            else\n-            {\n-                int length = 0;\n-                translator.Translate(ref length);\n-                ITaskItem[] wrappedItems = new ITaskItem[length];\n \n-                for (int i = 0; i < length; i++)\n-                {\n-                    ReadITaskItem(translator, ref wrappedItems[i]);\n-                }\n-\n-                _wrappedParameter = wrappedItems;\n-            }\n+            _wrappedParameter = wrappedItems;\n         }\n \n         /// <summary>\n         /// Serialize / deserialize this item.\n         /// </summary>\n         private void TranslateITaskItem(ITranslator translator)\n         {",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I was nervous about this comment, however then I scrolled back and found out that you're not the culprit. \r\nIf it held before, I suppose it will hold even now.",
              "createdAt": "2025-05-15T13:57:19Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -749,16 +566,58 @@ private class TaskParameterTaskItem :\n             /// </summary>\n             private string _fullPath;\n \n+            // Although we preserve escaped state for engine purposes, tasks most commonly request the unescaped ItemSpec value.\n+            // Keep a cache which is lazily populated and invalidated any time the unescaped ItemSpec is requested.\n+            private ItemSpecCache _itemSpecCache;\n+\n             /// <summary>\n             /// Constructor for serialization\n             /// </summary>\n-            public TaskParameterTaskItem(string escapedItemSpec, string escapedDefiningProject, Dictionary<string, string> escapedMetadata)\n+            internal TaskParameterTaskItem(ITaskItem copyFrom)\n             {\n-                ErrorUtilities.VerifyThrowInternalNull(escapedItemSpec);\n+                if (copyFrom is ITaskItem2 copyFromAsITaskItem2)\n+                {\n+                    _escapedItemSpec = copyFromAsITaskItem2.EvaluatedIncludeEscaped;\n+                    _escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);\n+\n+                    IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();\n+                    _customEscapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;\n+\n+                    if (_customEscapedMetadata is null)\n+                    {\n+                        _customEscapedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);\n+                        foreach (DictionaryEntry entry in nonGenericEscapedMetadata)\n+                        {\n+                            _customEscapedMetadata[(string)entry.Key] = (string)entry.Value ?? string.Empty;\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yeah every other internal ITaskItem implementation has a similar fallback and implements ITaskItem2 / IMetadataContainer which all operate on escaped values. So I assume this is for the case when an external task passes us their own legacy task item implementation.",
              "createdAt": "2025-05-15T21:34:58Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -749,16 +566,58 @@ private class TaskParameterTaskItem :\n             /// </summary>\n             private string _fullPath;\n \n+            // Although we preserve escaped state for engine purposes, tasks most commonly request the unescaped ItemSpec value.\n+            // Keep a cache which is lazily populated and invalidated any time the unescaped ItemSpec is requested.\n+            private ItemSpecCache _itemSpecCache;\n+\n             /// <summary>\n             /// Constructor for serialization\n             /// </summary>\n-            public TaskParameterTaskItem(string escapedItemSpec, string escapedDefiningProject, Dictionary<string, string> escapedMetadata)\n+            internal TaskParameterTaskItem(ITaskItem copyFrom)\n             {\n-                ErrorUtilities.VerifyThrowInternalNull(escapedItemSpec);\n+                if (copyFrom is ITaskItem2 copyFromAsITaskItem2)\n+                {\n+                    _escapedItemSpec = copyFromAsITaskItem2.EvaluatedIncludeEscaped;\n+                    _escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);\n+\n+                    IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();\n+                    _customEscapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;\n+\n+                    if (_customEscapedMetadata is null)\n+                    {\n+                        _customEscapedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);\n+                        foreach (DictionaryEntry entry in nonGenericEscapedMetadata)\n+                        {\n+                            _customEscapedMetadata[(string)entry.Key] = (string)entry.Value ?? string.Empty;\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    // If we don't have ITaskItem2 to fall back on, we have to make do with the fact that",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      }
    ]
  }
}