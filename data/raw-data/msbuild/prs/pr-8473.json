{
  "number": 8473,
  "title": "Fix Mac ARM64 unit tests.",
  "body": "Fixes #7576\r\n\r\n### Context\r\nUnit tests on MAC M1 machine fails. More precisely, those are unit tests related to task host. \r\nIt happens because unit tests do not use bootstrap version of MSBuild to perform tests. So, there is no \"arm64\" folder and path `MSBuildToolsDirectoryArm64` ends up being null. \r\n\r\n### Changes Made\r\nDefaulted `MSBuildToolsDirectoryArm64` to `CurrentMSBuildToolsDirectory`, as it is done in case of amd64 machine.\r\n\r\n### Testing\r\nUnit tests",
  "state": "MERGED",
  "createdAt": "2023-02-20T13:57:16Z",
  "updatedAt": "2023-03-01T04:14:28Z",
  "closedAt": "2023-03-01T04:14:27Z",
  "mergedAt": "2023-03-01T04:14:27Z",
  "additions": 6,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "fix-unit-tests-arm64",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a82dbaf5689f44ce46f9b10c128f048bbafbf9e2",
          "message": "Fix arm64 unit tests.",
          "committedDate": "2023-02-20T13:47:26Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bfedf89d4b50835a77588f99822b0745a5fd739a",
          "message": "Apply fix only to .NET Core MSBuild.",
          "committedDate": "2023-02-28T17:59:19Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "77a870873e6cf1ec18d937d8223112c4c0e335bf",
          "message": "Update src/Shared/BuildEnvironmentHelper.cs with comments\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-02-28T18:34:37Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "We always ship the amd64 subdirectory but arm64 is present only on ARM64 machines, which kind of justifies the two cases being different. Are you sure that this change has no product impact?",
        "createdAt": "2023-02-22T13:51:28Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I've tried building the following on a regular Intel machine and while it fails spectacularly, this change doesn't seem to make a difference.\r\n\r\n```xml\r\n<Project>\r\n  <UsingTask TaskName=\"Message\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" Architecture=\"arm64\" />\r\n  <Target Name=\"Build\">\r\n    <Message />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2023-02-22T13:53:54Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> We always ship the amd64 subdirectory but arm64 is present only on ARM64 machines, which kind of justifies the two cases being different. Are you sure that this change has no product impact?\r\n\r\nThat was the intention here.\r\n\r\nI'm a bit surprised we're hitting this case on macOS netcore tests, since we don't generally support cross-arch anything on netcore. What's the proximate cause of the failures?",
        "createdAt": "2023-02-22T16:57:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I've tried building the following on a regular Intel machine and while it fails spectacularly, this change doesn't seem to make a difference.\r\n> \r\n> ```\r\n> <Project>\r\n>   <UsingTask TaskName=\"Message\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" Architecture=\"arm64\" />\r\n>   <Target Name=\"Build\">\r\n>     <Message />\r\n>   </Target>\r\n> </Project>\r\n> ```\r\n\r\nYes, it currently should not make a difference indeed. We do not have any null checks on the variable that I changed, and it is used when we already determined that we are on arm64 machine.",
        "createdAt": "2023-02-23T21:18:12Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> We always ship the amd64 subdirectory but arm64 is present only on ARM64 machines, which kind of justifies the two cases being different. Are you sure that this change has no product impact?\r\n\r\nWell, the question I asked myself here is \"if the amd64 folder always there, why we even need the default on the previous line for amd64 case? We will hit only one case in this if statement, don't it?\". \r\n\r\nAnd one answer that I found is the case of unit tests. When we build unit test assemblies, we do not form any folders in the output folder and do not put binaries accordingly to them. It is just common bin folder and every binary there. And for arm64 case the problem is the same - we have arm64 binaries in a common bin folder, not in a separate \"arm64\" folder.  \r\n\r\nSo, i do not think this change will change the behavior. But to make it even safer, I might put my change in ifdef that triggers only when we build unit tests. ",
        "createdAt": "2023-02-23T21:26:58Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this change should apply only to .NET Core MSBuild, to prevent a problem where:\r\n\r\n1. On an amd64 VS installation (no arm64 folder)\r\n2. UsingTask specifies that a task should run in arm64\r\n\r\nWith this, I'm worried that we will silently run the task in amd64 instead of correctly failing with a \"we don't have arm64\" error.",
              "createdAt": "2023-02-27T17:07:01Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -599,7 +599,7 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n \n                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;\n                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"amd64\") : CurrentMSBuildToolsDirectory;\n-                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : null;\n+                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : CurrentMSBuildToolsDirectory;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This wouldn't apply the same way to x86, because that's \"always\" available in a VS installation.",
              "createdAt": "2023-02-27T17:07:42Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -599,7 +599,7 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n \n                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;\n                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"amd64\") : CurrentMSBuildToolsDirectory;\n-                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : null;\n+                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : CurrentMSBuildToolsDirectory;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Seem reasonable?\r\n\r\n```suggestion\r\n                // Fall back to \"current\" for any architecture since .NET SDK doesn't\r\n                // support cross-arch task invocations.\r\n                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : CurrentMSBuildToolsDirectory;\r\n```",
              "createdAt": "2023-02-28T18:18:32Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -599,7 +599,11 @@ public BuildEnvironment(BuildEnvironmentMode mode, string currentMSBuildExePath,\n \n                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;\n                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"amd64\") : CurrentMSBuildToolsDirectory;\n+#if RUNTIME_TYPE_NETCORE\n+                MSBuildToolsDirectoryArm64 = existsCheck(potentialARM64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, \"arm64\") : CurrentMSBuildToolsDirectory;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}