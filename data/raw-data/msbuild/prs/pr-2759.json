{
  "number": 2759,
  "title": "Skip dependee RAR resolvers for externally resolved references",
  "body": "Depends on #2716.\r\n\r\nWhenever RAR tries to resolve a reference, it first looks for [winmd, dll, exe] files in all the dependee directories before using the input search paths. However, if a reference is marked as being resolved externally, RAR should not make assumptions and just use the provided search paths.\r\n\r\nThis shaves off about 500ms of total RAR time in Roslyn.",
  "state": "MERGED",
  "createdAt": "2017-11-29T01:03:01Z",
  "updatedAt": "2020-12-30T22:51:50Z",
  "closedAt": "2017-12-11T22:20:26Z",
  "mergedAt": "2017-12-11T22:20:26Z",
  "additions": 302,
  "deletions": 128,
  "changedFiles": 5,
  "headRefName": "skipResolversForNugetReferences",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f70b65775f7c6b06b9619ce03f1c2ca90160f46",
          "message": "Fix IO count off by one",
          "committedDate": "2017-12-08T22:59:23Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "212ca53ed7543a71764c545a55123f6b2eb07a96",
          "message": "Add tests",
          "committedDate": "2017-12-08T22:59:23Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c3a5dcf63d969529009362974f7b7bccc0646ab",
          "message": "Skip dependee resolvers when ref is external",
          "committedDate": "2017-12-08T22:59:23Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39712fb6fcec43a00ec2f1dd1a7c0190ce662ed3",
          "message": "Fix test\n\n- disambiguate results between the two rar simulation modes\n- provide explicit thresholds",
          "committedDate": "2017-12-08T23:01:52Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7a8756c798173e25829bd23692a9d3f33fde4840",
          "message": "fixup",
          "committedDate": "2017-12-08T23:02:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a0dacd3bab22c5eaca7471b0d5e6e54c7861f18",
          "message": "Extract test body so it can be shared between tests",
          "committedDate": "2017-12-08T23:02:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd36ea61d0082d08dadea74431fb849c3c5a8ea2",
          "message": "fix whitespace",
          "committedDate": "2017-12-08T23:02:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@nguerrera ",
        "createdAt": "2017-11-29T01:03:26Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I've rebased this on master, ready to review / merge.",
        "createdAt": "2017-11-30T23:46:50Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test this please",
        "createdAt": "2017-12-06T19:14:34Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\"ExternallyResolved\", \"true\"",
              "createdAt": "2017-11-29T01:04:45Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Perf.cs",
              "diffHunk": "@@ -8,21 +15,116 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests\n     /// </summary>\n     public sealed class Perf : ResolveAssemblyReferenceTestFixture\n     {\n-        [Fact]\n+        [Theory]\n         [Trait(\"Category\", \"mono-osx-failing\")]\n         [Trait(\"Category\", \"mono-windows-failing\")]\n-        public void AutoUnifyUsesMinimumIO()\n+        [InlineData(RARSimulationMode.LoadProject, 1)]\n+        [InlineData(RARSimulationMode.BuildProject, 2)]\n+        public void AutoUnifyUsesMinimumIO(RARSimulationMode rarSimulationMode, int ioThreshold)\n         {\n             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n             // times out the object used for remoting console writes.  Adding a write in the middle of\n             // keeps remoting from timing out the object.\n             Console.WriteLine(\"Performing Perf.AutoUnifyUsesMinimumIO() test\");\n \n-            // Manually instantiate a test fixture and run it.\n-            VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify t = new VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify();\n-            t.StartIOMonitoring();\n-            t.Exists();\n-            t.StopIOMonitoringAndAssert_Minimal_IOUse();\n+            StronglyNamedDependencyAutoUnify t = new StronglyNamedDependencyAutoUnify();\n+\n+            try\n+            {\n+                // Manually instantiate a test fixture and run it.\n+                t.StartIOMonitoring();\n+                t.Exists(rarSimulationMode);\n+            }\n+            finally\n+            {\n+                t.StopIOMonitoringAndAssert_Minimal_IOUse(ioThreshold);\n+            }\n+        }\n+\n+        [Fact]\n+        public void DependeeDirectoryIsProbedForDependency()\n+        {\n+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n+            // times out the object used for remoting console writes.  Adding a write in the middle of\n+            // keeps remoting from timing out the object.\n+            Console.WriteLine(\"Performing Perf.DependeeDirectoryIsProbedForDependency() test\");\n+\n+            try\n+            {\n+                StartIOMonitoring();\n+\n+                MockEngine engine = new MockEngine();\n+\n+                ITaskItem[] assemblyNames =\n+                {\n+                    new TaskItem(@\"C:\\DependsOnNuget\\A.dll\"), // depends on N, version 1.0.0.0\n+                    new TaskItem(@\"C:\\NugetCache\\N\\lib\\N.dll\") // version 2.0.0.0\n+                };\n+\n+                ResolveAssemblyReference t = new ResolveAssemblyReference();\n+\n+                t.BuildEngine = engine;\n+                t.Assemblies = assemblyNames;\n+                t.SearchPaths = new[] { \"{RawFileName}\" };\n+                t.AutoUnify = true;\n+\n+                bool succeeded = Execute(t);\n+\n+                Assert.True(succeeded);\n+                ;\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.winmd\"].ShouldBe(1);\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.dll\"].ShouldBe(1);\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.exe\"].ShouldBe(1);\n+            }\n+            finally\n+            {\n+                StopIOMonitoring();\n+            }\n+        }\n+\n+        [Fact]\n+        public void DependeeDirectoryShouldNotBeProbedForDependencyWhenDependencyResolvedExternally()\n+        {\n+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n+            // times out the object used for remoting console writes.  Adding a write in the middle of\n+            // keeps remoting from timing out the object.\n+            Console.WriteLine(\"Performing Perf.DependeeDirectoryIsProbedForDependency() test\");\n+\n+            try\n+            {\n+                StartIOMonitoring();\n+\n+                MockEngine engine = new MockEngine();\n+\n+                ITaskItem[] assemblyNames =\n+                {\n+                    new TaskItem(@\"C:\\DependsOnNuget\\A.dll\"), // depends on N, version 1.0.0.0\n+                    new TaskItem(@\"C:\\NugetCache\\N\\lib\\N.dll\", // version 2.0.0.0\n+                        new Dictionary<string, string>\n+                        {\n+                            {\"FindDependencies\", \"false\"}",
              "author": {
                "login": "nguerrera"
              }
            },
            {
              "body": "Ah, forgot about that one :)",
              "createdAt": "2017-11-29T01:08:46Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Perf.cs",
              "diffHunk": "@@ -8,21 +15,116 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests\n     /// </summary>\n     public sealed class Perf : ResolveAssemblyReferenceTestFixture\n     {\n-        [Fact]\n+        [Theory]\n         [Trait(\"Category\", \"mono-osx-failing\")]\n         [Trait(\"Category\", \"mono-windows-failing\")]\n-        public void AutoUnifyUsesMinimumIO()\n+        [InlineData(RARSimulationMode.LoadProject, 1)]\n+        [InlineData(RARSimulationMode.BuildProject, 2)]\n+        public void AutoUnifyUsesMinimumIO(RARSimulationMode rarSimulationMode, int ioThreshold)\n         {\n             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n             // times out the object used for remoting console writes.  Adding a write in the middle of\n             // keeps remoting from timing out the object.\n             Console.WriteLine(\"Performing Perf.AutoUnifyUsesMinimumIO() test\");\n \n-            // Manually instantiate a test fixture and run it.\n-            VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify t = new VersioningAndUnification.AutoUnify.StronglyNamedDependencyAutoUnify();\n-            t.StartIOMonitoring();\n-            t.Exists();\n-            t.StopIOMonitoringAndAssert_Minimal_IOUse();\n+            StronglyNamedDependencyAutoUnify t = new StronglyNamedDependencyAutoUnify();\n+\n+            try\n+            {\n+                // Manually instantiate a test fixture and run it.\n+                t.StartIOMonitoring();\n+                t.Exists(rarSimulationMode);\n+            }\n+            finally\n+            {\n+                t.StopIOMonitoringAndAssert_Minimal_IOUse(ioThreshold);\n+            }\n+        }\n+\n+        [Fact]\n+        public void DependeeDirectoryIsProbedForDependency()\n+        {\n+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n+            // times out the object used for remoting console writes.  Adding a write in the middle of\n+            // keeps remoting from timing out the object.\n+            Console.WriteLine(\"Performing Perf.DependeeDirectoryIsProbedForDependency() test\");\n+\n+            try\n+            {\n+                StartIOMonitoring();\n+\n+                MockEngine engine = new MockEngine();\n+\n+                ITaskItem[] assemblyNames =\n+                {\n+                    new TaskItem(@\"C:\\DependsOnNuget\\A.dll\"), // depends on N, version 1.0.0.0\n+                    new TaskItem(@\"C:\\NugetCache\\N\\lib\\N.dll\") // version 2.0.0.0\n+                };\n+\n+                ResolveAssemblyReference t = new ResolveAssemblyReference();\n+\n+                t.BuildEngine = engine;\n+                t.Assemblies = assemblyNames;\n+                t.SearchPaths = new[] { \"{RawFileName}\" };\n+                t.AutoUnify = true;\n+\n+                bool succeeded = Execute(t);\n+\n+                Assert.True(succeeded);\n+                ;\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.winmd\"].ShouldBe(1);\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.dll\"].ShouldBe(1);\n+                uniqueFileExists[@\"C:\\DependsOnNuget\\N.exe\"].ShouldBe(1);\n+            }\n+            finally\n+            {\n+                StopIOMonitoring();\n+            }\n+        }\n+\n+        [Fact]\n+        public void DependeeDirectoryShouldNotBeProbedForDependencyWhenDependencyResolvedExternally()\n+        {\n+            // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting\n+            // times out the object used for remoting console writes.  Adding a write in the middle of\n+            // keeps remoting from timing out the object.\n+            Console.WriteLine(\"Performing Perf.DependeeDirectoryIsProbedForDependency() test\");\n+\n+            try\n+            {\n+                StartIOMonitoring();\n+\n+                MockEngine engine = new MockEngine();\n+\n+                ITaskItem[] assemblyNames =\n+                {\n+                    new TaskItem(@\"C:\\DependsOnNuget\\A.dll\"), // depends on N, version 1.0.0.0\n+                    new TaskItem(@\"C:\\NugetCache\\N\\lib\\N.dll\", // version 2.0.0.0\n+                        new Dictionary<string, string>\n+                        {\n+                            {\"FindDependencies\", \"false\"}",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}