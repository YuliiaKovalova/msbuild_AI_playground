{
  "number": 10223,
  "title": "Log Registry LongPathsEnabled in v:diagnostic",
  "body": "Fixes #10151 \r\n\r\n### Context\r\nIn v:diagnostic at the start of build we want to record whether LongPaths are enabled which is stored in the Registry.\r\n\r\n### Changes Made\r\nAdd a low importance message for LongPathsEnabled in XMake\r\n\r\n### Testing\r\nManually tested that changing the registry variable is reflected in the log.\r\n\r\n### Notes\r\nKISS, just a one of message at the start of build",
  "state": "MERGED",
  "createdAt": "2024-06-11T14:36:46Z",
  "updatedAt": "2024-06-18T14:25:08Z",
  "closedAt": "2024-06-18T14:25:08Z",
  "mergedAt": "2024-06-18T14:25:08Z",
  "additions": 337,
  "deletions": 7,
  "changedFiles": 16,
  "headRefName": "dev/janpro/log_registry_environment",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "05b02735cb2ba5f72871511bf336552d6349b615",
          "message": "Add a message for LongPathsEnabled",
          "committedDate": "2024-06-12T10:32:10Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da735b752f8c5b9a9d68269a2b53236354e2d90c",
          "message": "refactor LongPathsEnabled logic to a ternary enum",
          "committedDate": "2024-06-12T15:04:08Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "32a3bdf48da6c7e39948463d9a70bb62e938d23e",
          "message": "Elaborate and comment the resource string\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-14T08:06:39Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janpro@janpro.dev"
          }
        }
      },
      {
        "commit": {
          "oid": "c84e3777e71616fb7e3fd5c684e4e05e5825cc8a",
          "message": "translations",
          "committedDate": "2024-06-14T08:55:41Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0331db7f9001457a9244b613c03df328669911a1",
          "message": "add state for registry not set",
          "committedDate": "2024-06-18T12:17:23Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4da53a8da6fcfa236646a09c6c8bda44fa292f94",
          "message": "deduplicate",
          "committedDate": "2024-06-18T13:11:11Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @KirillOsenkov - we've got a new kind of source for env-var-like data, how would you like us to approach adding BinLog support for this? A new sibling folder for the current Environment Variables? Something different? \r\n\r\n@JanProvaznik if @KirillOsenkov can get you a design would you be interested in contributing the matching visualization of this new data to the viewer?",
        "createdAt": "2024-06-11T14:39:20Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I'd like to propose the simplest possible approaches: \r\n\r\n1. Just write it as a message\r\n2. Write it _as_ an environment variable, in the env var block.\r\n\r\nI don't know how much we'd benefit from better structure.",
        "createdAt": "2024-06-11T14:43:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Agreed, just log a message next to MSBuild path and version.",
        "createdAt": "2024-06-11T15:19:10Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Reverted and simply Added a log message in XMake next to messages for e.g. Version/ExePath if on Windows.\r\nI tested it manually.",
        "createdAt": "2024-06-12T10:37:05Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "Agreed it would be useful to distinguish four cases: non-windows/not-set/set-to-false and set-to-true",
        "createdAt": "2024-06-17T19:22:06Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I'd rather see \"true\"/\"false\" in the logs\r\n\r\n```suggestion\r\n                        NativeMethodsShared.TryIsLongPathsEnabledRegistry()),\r\n```\r\n```suggestion\r\n                        NativeMethodsShared.TryIsLongPathsEnabledRegistry() ? 1 : 0),\r\n```",
              "createdAt": "2024-06-12T13:34:24Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1749,6 +1749,16 @@ private static List<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLo\n                     MessageImportance.Low),\n             };\n \n+            if (NativeMethodsShared.IsWindows)\n+            {\n+                messages.Add(\n+                    new BuildManager.DeferredBuildMessage(\n+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n+                        \"LongPathsEnabled\",\n+                        NativeMethodsShared.TryIsLongPathsEnabledRegistry() ? 1 : 0),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In .NET, the `Try` prefix is a convention for a method whose return value is a bool that indicates success or failure, for example\r\n\r\n```c#\r\nclass Int32\r\n{\r\n    bool TryParse(string? s, out int result)\r\n}\r\n```\r\n\r\nThe expectation is that the caller checks the return value to learn whether the out param has a good value in it or not.\r\n\r\nSo I'd rather avoid `Try` prefixes in cases that aren't like that.",
              "createdAt": "2024-06-12T13:34:54Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -594,17 +594,19 @@ private static void SetMaxPath()\n         }\n     }\n \n-    internal static bool IsMaxPathLegacyWindows()\n+    internal static bool TryIsLongPathsEnabledRegistry()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Actually I'm not sure I understand this refactor in general. In `Xmake.cs` you're already wrapping the logging in an `IsWindows` call, could you use the result of `IsLongPathsEnabledRegistry()` instead?",
              "createdAt": "2024-06-12T13:36:59Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -594,17 +594,19 @@ private static void SetMaxPath()\n         }\n     }\n \n-    internal static bool IsMaxPathLegacyWindows()\n+    internal static bool TryIsLongPathsEnabledRegistry()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The point was that I wanted 2 things:\r\n1. If we're on Windows display the value of the registry.\r\n2. If we're somewhere else don't display anything.\r\nI refactored it with an enum to clarify and removed the Try: https://github.com/dotnet/msbuild/pull/10223/commits/da735b752f8c5b9a9d68269a2b53236354e2d90c",
              "createdAt": "2024-06-12T15:10:02Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -594,17 +594,19 @@ private static void SetMaxPath()\n         }\n     }\n \n-    internal static bool IsMaxPathLegacyWindows()\n+    internal static bool TryIsLongPathsEnabledRegistry()",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a good place to put this, but I have sometimes wanted it for VS scenarios/binlogs too. I wonder if we should consider logging it in BuildManager instead.\r\n\r\n(This isn't blocking: it's a huge improvement as it is)",
              "createdAt": "2024-06-12T13:46:32Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1749,6 +1749,16 @@ private static List<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLo\n                     MessageImportance.Low),\n             };\n \n+            if (NativeMethodsShared.IsWindows)\n+            {\n+                messages.Add(\n+                    new BuildManager.DeferredBuildMessage(",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A minor rephrase, and it's usually a good idea to explain the parameters to the localizers (otherwise you can get very weird translations when they have to guess what kind of thing might go in that spot):\r\n\r\n```suggestion\r\n    <value>Windows LongPathsEnabled registry key = {0}</value>\r\n    \r\n    <comment>\"Windows\" is the OS, \"LongPathsEnabled\" should not be localized, and {0} will be boolean true/false</comment>\r\n```",
              "createdAt": "2024-06-12T13:48:22Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1661,6 +1661,9 @@\n     <value>succeeded: {0}</value>\n     <comment>{0} whole number</comment>\n   </data>\n+  <data name=\"LongPathsEnabled\" xml:space=\"preserve\">\n+    <value>LongPathsEnabled = {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a bit missleading - we are not logging value from registry here. How about something like `\"Based on registry settings the LongPaths feature is {0}.\"`? (while logging the enum value \"enabled\"/\"disabled\")",
              "createdAt": "2024-06-17T18:59:31Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1661,6 +1661,11 @@\n     <value>succeeded: {0}</value>\n     <comment>{0} whole number</comment>\n   </data>\n+  <data name=\"LongPathsEnabled\" xml:space=\"preserve\">\n+    <value>Windows LongPathsEnabled registry key = {0}</value>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Accidental repetition",
              "createdAt": "2024-06-18T12:37:53Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1752,11 +1752,13 @@ private static List<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLo\n             NativeMethodsShared.LongPathsStatus longPaths = NativeMethodsShared.IsLongPathsEnabled();\n             if (longPaths != NativeMethodsShared.LongPathsStatus.NotApplicable)\n             {\n+                string resourceString = \"LongPaths_\" + longPaths.ToString();\n                 messages.Add(\n                     new BuildManager.DeferredBuildMessage(\n                         ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n-                        \"LongPathsEnabled\",\n-                        longPaths == NativeMethodsShared.LongPathsStatus.Enabled),\n+                            \"LongPaths\",\n+                            ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n+                                \"LongPaths_\" + longPaths.ToString())),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}