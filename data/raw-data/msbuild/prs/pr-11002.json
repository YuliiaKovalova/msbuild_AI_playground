{
  "number": 11002,
  "title": "Drafts of build scenario and persistent-problems docs",
  "body": "",
  "state": "OPEN",
  "createdAt": "2024-11-19T23:35:12Z",
  "updatedAt": "2025-05-05T15:22:45Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 84,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "scenario-docs",
  "isDraft": true,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "55f6acf6ad01c7f7e60f591b121c2bf3f75e3b95",
          "message": "Drafts of build scenario and hot-problems docs",
          "committedDate": "2024-11-19T23:34:26Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e916ea4b651886a24ce3386cd5168319bff3475f",
          "message": "Added quick main user table",
          "committedDate": "2025-05-05T15:22:43Z",
          "author": {
            "name": "Chet Husk",
            "email": "baronfel@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This 2 sentences are bit loaded - I needed to reread this 3 times to fully understand.\r\nI feel it might be helpful to add a sample of some common target copy target (e.g. `_CopyOutOfDateSourceItemsToOutputDirectory`) and explain parts of it (\"No inputs and outputs to the target itself; the target depends on targets that find out what should be copied and what not; and the Copy tasks checks what is unchanged\")",
              "createdAt": "2024-12-03T06:34:11Z",
              "path": "documentation/Persistent-Problems.md",
              "diffHunk": "@@ -0,0 +1,19 @@\n+# Builds suck\n+\n+No build is ever fast enough, reliable enough, or does everything you want.\n+\n+MSBuild-driven builds are no exception.\n+\n+## Evaluation\n+\n+*Every* [batch build]() (absent a higher-order build system) must evaluate every project in the scope of the build. IDEs can cache evaluation and act as a higher-order builds sytem but important IDE scenarios like \u201cfirst load after a repo clone\u201d are dominated by evaluation.\n+\n+## ResolveAssemblyReferences\n+\n+When build is invoked, most targets can be skipped as up to date, but `ResolveAssemblyReferences` (RAR) and some of its prerequisites like `ResolvePackageAssets` cannot, because their role is to produced data used within the build to compute the compiler command line. Since they don't have concrete file outputs and their file inputs can be difficult to express (it\u2019s the closure of all referenced assemblies), MSBuild's standard up-to-date check mechanisms can't apply.\n+\n+## Copy\n+\n+The amount of time spent copying files in a build can be surprising. Efficient copy-on-write filesystems can help dramatically (we now have this on all major operating systems via `clonefile` on [Linux]() and [macOS]() and the [Windows 11 24H2+ Dev Drive]()).\n+\n+As an implementation detail of MSBuild's common copies, the targets are generally not incremental, in favor of fine-grained incrementality within the Copy task itself. This means that Copy task time can be nonzero even on a fully up-to-date build.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This behavior is at least in part because we don't have some other process/component that tracks inputs/outputs and have to recreate the Copy sources/destinations every build, right? We on-demand compute the up-to-date check and that can be expensive. Theoretically at least with MSBuild Server we could hang that bookeeping on the server node and _potentially_ track Copy inputs/outputs more cleanly?",
              "createdAt": "2024-12-04T20:24:52Z",
              "path": "documentation/Persistent-Problems.md",
              "diffHunk": "@@ -0,0 +1,19 @@\n+# Builds suck\n+\n+No build is ever fast enough, reliable enough, or does everything you want.\n+\n+MSBuild-driven builds are no exception.\n+\n+## Evaluation\n+\n+*Every* [batch build]() (absent a higher-order build system) must evaluate every project in the scope of the build. IDEs can cache evaluation and act as a higher-order builds sytem but important IDE scenarios like \u201cfirst load after a repo clone\u201d are dominated by evaluation.\n+\n+## ResolveAssemblyReferences\n+\n+When build is invoked, most targets can be skipped as up to date, but `ResolveAssemblyReferences` (RAR) and some of its prerequisites like `ResolvePackageAssets` cannot, because their role is to produced data used within the build to compute the compiler command line. Since they don't have concrete file outputs and their file inputs can be difficult to express (it\u2019s the closure of all referenced assemblies), MSBuild's standard up-to-date check mechanisms can't apply.\n+\n+## Copy\n+\n+The amount of time spent copying files in a build can be surprising. Efficient copy-on-write filesystems can help dramatically (we now have this on all major operating systems via `clonefile` on [Linux]() and [macOS]() and the [Windows 11 24H2+ Dev Drive]()).\n+\n+As an implementation detail of MSBuild's common copies, the targets are generally not incremental, in favor of fine-grained incrementality within the Copy task itself. This means that Copy task time can be nonzero even on a fully up-to-date build.",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok, I lol'd \ud83e\udd23 ",
              "createdAt": "2024-12-04T20:22:39Z",
              "path": "documentation/Persistent-Problems.md",
              "diffHunk": "@@ -0,0 +1,19 @@\n+# Builds suck",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "No major comments - just glad to have this written down as a reference!",
              "createdAt": "2024-12-04T20:25:14Z",
              "path": "documentation/Build-Scenarios.md",
              "diffHunk": "@@ -0,0 +1,51 @@\n+# Build Scenarios",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}