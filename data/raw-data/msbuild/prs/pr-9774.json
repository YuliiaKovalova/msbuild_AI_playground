{
  "number": 9774,
  "title": "[Documentation] Move the env variables to the separate file",
  "body": "### Context\r\nContinue the documentation of environment variables activity. Step move the already documented env vars into newly created file\r\n\r\n### Changes Made\r\nPopulate file with env vars with already documented variables. Link the file documentation/wiki/MSBuild-Tips-&-Tricks.md to documentation/wiki/MSBuild-Environment-Variables.md",
  "state": "MERGED",
  "createdAt": "2024-02-23T10:13:04Z",
  "updatedAt": "2024-06-14T10:04:28Z",
  "closedAt": "2024-03-25T11:36:22Z",
  "mergedAt": "2024-03-25T11:36:22Z",
  "additions": 38,
  "deletions": 32,
  "changedFiles": 2,
  "headRefName": "dev/f-alizada/move-env-variables-to-doc",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f8ddf86f3d614cbc71dc0805bbe10a3ad693bc6",
          "message": "Move the env variables to the separate file",
          "committedDate": "2024-02-23T10:09:10Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6944c9a11484c8212973ee32c5cd11ce74e42480",
          "message": "Address PR comments",
          "committedDate": "2024-02-26T11:44:49Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e206e858397825d39e5c3de86e816209e38ba3c",
          "message": "Fix",
          "committedDate": "2024-02-26T11:49:01Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86ee9a5b9145e20d7439a41dbfe2abcf128a79aa",
          "message": "Update the doc",
          "committedDate": "2024-02-29T08:47:47Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "46c62008cd0855dc671b06aff7aa171deb364863",
          "message": "Merge branch 'main' into dev/f-alizada/move-env-variables-to-doc",
          "committedDate": "2024-03-05T08:38:13Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b365fb35c6569d549e101ca3cc8016f060935e01",
          "message": "Merge branch 'main' into dev/f-alizada/move-env-variables-to-doc",
          "committedDate": "2024-03-06T11:53:24Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fee44dcc1304d306dad5726736d96fb74c4b9a0e",
          "message": "Address PR comments, add more links from tipcs and tricks",
          "committedDate": "2024-03-06T13:56:17Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d5b53f109869515ee3c969b4f8376a59e9e4440",
          "message": "Merge branch 'main' into dev/f-alizada/move-env-variables-to-doc",
          "committedDate": "2024-03-25T10:36:46Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nSome of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own risk.\r\n```",
              "createdAt": "2024-02-23T16:03:53Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Addressed thank you!",
              "createdAt": "2024-02-26T11:46:45Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Kinda want to be opinionated about some of these.\r\n\r\n```suggestion\r\n   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger). If you need this level of detail you are generally served better with a binary log than the text log.\r\n```",
              "createdAt": "2024-02-23T16:05:17Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Added thank you ",
              "createdAt": "2024-02-26T11:47:13Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   * Save the generated .proj file for the .sln that is used to build the solution. The generated files are emitted into a binary log by default and their presence on disk can break subsequent builds.\r\n```",
              "createdAt": "2024-02-23T16:06:11Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Added thank you ",
              "createdAt": "2024-02-26T11:50:20Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is another one where users shouldn't need it after @surayya-MS's #9746.",
              "createdAt": "2024-02-23T16:07:25Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you! \r\nSince the env variable is supported from the code base, resolving the comment.\r\n@surayya-MS @rainersigwald do you think we should file a item to start removing the support of the mentioned env var? ",
              "createdAt": "2024-03-25T11:27:56Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   * Set this to not leave MSBuild processes behind (see `/nr:false`, but the environment variable is useful to also set this for Visual Studio for example).\r\n```",
              "createdAt": "2024-02-23T16:07:45Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "updated, thank you! ",
              "createdAt": "2024-02-26T11:49:50Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   * Setting the value of 2 allows for manually attaching a debugger to a process ID. This can work better on non-Windows operating systems.\r\n```",
              "createdAt": "2024-02-23T16:08:04Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+* `MSBUILDLOGASYNC=1`\n+   * Enable asynchronous logging.\n+* `MSBUILDDEBUGONSTART=1`\n+   * Launch debugger on build start.\n+   * Setting the value of 2 allows for manually attaching a debugger to a process ID.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated thank you ",
              "createdAt": "2024-02-26T11:50:04Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+* `MSBUILDLOGASYNC=1`\n+   * Enable asynchronous logging.\n+* `MSBUILDDEBUGONSTART=1`\n+   * Launch debugger on build start.\n+   * Setting the value of 2 allows for manually attaching a debugger to a process ID.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n  * The value of the environment variable is a list of regular expressions, separated by semicolon (;).\r\n  * Using this environment variable all but guarantees builds will break; it is intended as an evaluation-time performance improvement in very limited scenarios only.\r\n```",
              "createdAt": "2024-02-23T16:09:22Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+* `MSBUILDLOGASYNC=1`\n+   * Enable asynchronous logging.\n+* `MSBUILDDEBUGONSTART=1`\n+   * Launch debugger on build start.\n+   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n+* `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n \n-### MsBuildSkipEagerWildCardEvaluationRegexes\n-\n-If specified, overrides the default behavior of glob expansion. \n-\n-During glob expansion, if the path with wildcards that is being processed matches one of the regular expressions provided in the [environment variable](#msbuildskipeagerwildcardevaluationregexes), the path is not processed (expanded). \n-\n-The value of the envvironment variable is a list of regular expressions, separated by semilcon (;).\n\\ No newline at end of file\n+* `MsBuildSkipEagerWildCardEvaluationRegexes`\n+  *  If specified, overrides the default behavior of glob expansion. During glob expansion, if the path with wildcards that is being processed matches one of the regular expressions provided in the [environment variable](#msbuildskipeagerwildcardevaluationregexes), the path is not processed (expanded). \n+  * The value of the envvironment variable is a list of regular expressions, separated by semilcon (;).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated thank you ",
              "createdAt": "2024-02-26T11:48:16Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+* `MSBUILDTARGETOUTPUTLOGGING=1`\n+   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n+* `MSBUILDLOGTASKINPUTS=1`\n+   * Log task inputs (not needed if there are any diagnostic loggers already).\n+ * `MSBUILDEMITSOLUTION=1`\n+   * Save the generated .proj file for the .sln that is used to build the solution.\n+* `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+* `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n+   * In ResolveAssemblyReference task, log verbose search results.\n+* `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n+   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n+* `MSBUILDDISABLENODEREUSE=1`\n+   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+* `MSBUILDLOGASYNC=1`\n+   * Enable asynchronous logging.\n+* `MSBUILDDEBUGONSTART=1`\n+   * Launch debugger on build start.\n+   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n+* `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n \n-### MsBuildSkipEagerWildCardEvaluationRegexes\n-\n-If specified, overrides the default behavior of glob expansion. \n-\n-During glob expansion, if the path with wildcards that is being processed matches one of the regular expressions provided in the [environment variable](#msbuildskipeagerwildcardevaluationregexes), the path is not processed (expanded). \n-\n-The value of the envvironment variable is a list of regular expressions, separated by semilcon (;).\n\\ No newline at end of file\n+* `MsBuildSkipEagerWildCardEvaluationRegexes`\n+  *  If specified, overrides the default behavior of glob expansion. During glob expansion, if the path with wildcards that is being processed matches one of the regular expressions provided in the [environment variable](#msbuildskipeagerwildcardevaluationregexes), the path is not processed (expanded). \n+  * The value of the envvironment variable is a list of regular expressions, separated by semilcon (;).",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I might leave the two most useful ones, `MSBuildDebugEngine` and `MSBUILDDEBUGONSTART` here (redundantly).",
              "createdAt": "2024-02-23T16:10:14Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -14,29 +14,7 @@ See the [MSBuild Command-Line Reference](https://learn.microsoft.com/visualstudi\n \n # Environment Variables\n \n- * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n- * `MSBUILDTARGETOUTPUTLOGGING=1`\n-   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n- * `MSBUILDLOGTASKINPUTS=1`\n-   * Log task inputs (not needed if there are any diagnostic loggers already).\n- * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n- * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n- * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n-   * In ResolveAssemblyReference task, log verbose search results.\n- * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n-   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n- * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n- * `MSBUILDLOGASYNC=1`\n-   * Enable asynchronous logging.\n- * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n-   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n- * `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n+The list of environment variables could be found [here](./MSBuild-Environment-Variables.md)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "In order not to duplicate the documentation shall we instead  attach the links to the: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md in this file, what do you think? ",
              "createdAt": "2024-02-26T11:57:38Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -14,29 +14,7 @@ See the [MSBuild Command-Line Reference](https://learn.microsoft.com/visualstudi\n \n # Environment Variables\n \n- * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n- * `MSBUILDTARGETOUTPUTLOGGING=1`\n-   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n- * `MSBUILDLOGTASKINPUTS=1`\n-   * Log task inputs (not needed if there are any diagnostic loggers already).\n- * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n- * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n- * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n-   * In ResolveAssemblyReference task, log verbose search results.\n- * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n-   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n- * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n- * `MSBUILDLOGASYNC=1`\n-   * Enable asynchronous logging.\n- * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n-   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n- * `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n+The list of environment variables could be found [here](./MSBuild-Environment-Variables.md)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Yeah that's a good idea. As long as it's pretty easy to go from \"tip and tricks\" to \"instructions to collect binlogs\" I'm happy :)",
              "createdAt": "2024-03-04T14:26:16Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -14,29 +14,7 @@ See the [MSBuild Command-Line Reference](https://learn.microsoft.com/visualstudi\n \n # Environment Variables\n \n- * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n- * `MSBUILDTARGETOUTPUTLOGGING=1`\n-   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n- * `MSBUILDLOGTASKINPUTS=1`\n-   * Log task inputs (not needed if there are any diagnostic loggers already).\n- * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n- * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n- * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n-   * In ResolveAssemblyReference task, log verbose search results.\n- * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n-   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n- * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n- * `MSBUILDLOGASYNC=1`\n-   * Enable asynchronous logging.\n- * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n-   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n- * `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n+The list of environment variables could be found [here](./MSBuild-Environment-Variables.md)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Links to building msbuild added to the tips and tricks file, and reference to actual capturing binary logs is linked as well  in the Command Line switches section. ",
              "createdAt": "2024-03-06T13:58:31Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -14,29 +14,7 @@ See the [MSBuild Command-Line Reference](https://learn.microsoft.com/visualstudi\n \n # Environment Variables\n \n- * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n- * `MSBUILDTARGETOUTPUTLOGGING=1`\n-   * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n- * `MSBUILDLOGTASKINPUTS=1`\n-   * Log task inputs (not needed if there are any diagnostic loggers already).\n- * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n- * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n- * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n-   * In ResolveAssemblyReference task, log verbose search results.\n- * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n-   * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n- * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n- * `MSBUILDLOGASYNC=1`\n-   * Enable asynchronous logging.\n- * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n-   * Setting the value of 2 allows for manually attaching a debugger to a process ID.\n- * `MSBUILDDEBUGSCHEDULER=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-   * Dumps scheduler state at specified directory (`MSBUILDDEBUGSCHEDULER` is implied by `MSBuildDebugEngine`).\n+The list of environment variables could be found [here](./MSBuild-Environment-Variables.md)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nSome of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.\r\n```\r\n\r\nPossibly we might want to explicitly mention that combining varibles might be risky as well",
              "createdAt": "2024-02-23T20:03:46Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Updated thank you ",
              "createdAt": "2024-02-26T11:49:17Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We might want to link \"more details on capturing binary logs\" linking to https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Providing-Binary-Logs.md here",
              "createdAt": "2024-02-23T20:06:48Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Added :) ",
              "createdAt": "2024-02-26T11:50:52Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n \n+* `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`1` works better on Windows; `2` works better elsewhere.",
              "createdAt": "2024-02-26T15:14:12Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,32 +1,32 @@\n # MSBuild environment variables list\n \n This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n-Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.\n \n * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio. More details on [capturing binary logs](./Providing-Binary-Logs.md)\n * `MSBUILDTARGETOUTPUTLOGGING=1`\n    * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n * `MSBUILDLOGTASKINPUTS=1`\n    * Log task inputs (not needed if there are any diagnostic loggers already).\n  * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n+   * Save the generated .proj file for the .sln that is used to build the solution. The generated files are emitted into a binary log by default and their presence on disk can break subsequent builds.\n * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/). If you need this level of detail you are generally served better with a binary log than the text log.\n * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n    * In ResolveAssemblyReference task, log verbose search results.\n * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n    * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+   * Set this to not leave MSBuild processes behind (see `/nr:false`, but the environment variable is useful to also set this for Visual Studio for example).\n * `MSBUILDLOGASYNC=1`\n    * Enable asynchronous logging.\n * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n+   * Launch debugger on build start. This can work better on non-Windows operating systems.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated, could you please take a look? ",
              "createdAt": "2024-02-29T08:50:09Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,32 +1,32 @@\n # MSBuild environment variables list\n \n This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n-Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.\n \n * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio. More details on [capturing binary logs](./Providing-Binary-Logs.md)\n * `MSBUILDTARGETOUTPUTLOGGING=1`\n    * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n * `MSBUILDLOGTASKINPUTS=1`\n    * Log task inputs (not needed if there are any diagnostic loggers already).\n  * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n+   * Save the generated .proj file for the .sln that is used to build the solution. The generated files are emitted into a binary log by default and their presence on disk can break subsequent builds.\n * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/). If you need this level of detail you are generally served better with a binary log than the text log.\n * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n    * In ResolveAssemblyReference task, log verbose search results.\n * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n    * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+   * Set this to not leave MSBuild processes behind (see `/nr:false`, but the environment variable is useful to also set this for Visual Studio for example).\n * `MSBUILDLOGASYNC=1`\n    * Enable asynchronous logging.\n * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n+   * Launch debugger on build start. This can work better on non-Windows operating systems.",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Resolving based on the recent review",
              "createdAt": "2024-03-06T13:39:48Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,32 +1,32 @@\n # MSBuild environment variables list\n \n This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n-Some of the env variables listed here are unsupported, meaning there is no guarantee that variable will be respected in upcoming release, so please use at your own riks.\n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.\n \n * `MSBuildDebugEngine=1` & `MSBUILDDEBUGPATH=<DIRECTORY>`\n-  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio.\n+  * Set this to cause any MSBuild invocation launched within this environment to emit binary logs and additional debugging information to `<DIRECTORY>`. Useful when debugging build or evaluation issues when you can't directly influence the MSBuild invocation, such as in Visual Studio. More details on [capturing binary logs](./Providing-Binary-Logs.md)\n * `MSBUILDTARGETOUTPUTLOGGING=1`\n    * Set this to enable [printing all target outputs to the log](https://learn.microsoft.com/archive/blogs/msbuild/displaying-target-output-items-using-the-console-logger).\n * `MSBUILDLOGTASKINPUTS=1`\n    * Log task inputs (not needed if there are any diagnostic loggers already).\n  * `MSBUILDEMITSOLUTION=1`\n-   * Save the generated .proj file for the .sln that is used to build the solution.\n+   * Save the generated .proj file for the .sln that is used to build the solution. The generated files are emitted into a binary log by default and their presence on disk can break subsequent builds.\n * `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`\n-   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/).\n+   * Enable [additional property functions](https://devblogs.microsoft.com/visualstudio/msbuild-property-functions/). If you need this level of detail you are generally served better with a binary log than the text log.\n * `MSBUILDLOGVERBOSERARSEARCHRESULTS=1`\n    * In ResolveAssemblyReference task, log verbose search results.\n * `MSBUILDLOGCODETASKFACTORYOUTPUT=1`\n    * Dump generated code for task to a <GUID>.txt file in the TEMP directory\n * `MSBUILDDISABLENODEREUSE=1`\n-   * Set this to not leave MSBuild processes behind (see `/nr:false` above, but the environment variable is useful to also set this for Visual Studio for example).\n+   * Set this to not leave MSBuild processes behind (see `/nr:false`, but the environment variable is useful to also set this for Visual Studio for example).\n * `MSBUILDLOGASYNC=1`\n    * Enable asynchronous logging.\n * `MSBUILDDEBUGONSTART=1`\n-   * Launch debugger on build start.\n+   * Launch debugger on build start. This can work better on non-Windows operating systems.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n\r\nSome of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.\r\n```",
              "createdAt": "2024-03-04T14:27:09Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is updated, thank you :) ",
              "createdAt": "2024-03-07T09:25:55Z",
              "path": "documentation/wiki/MSBuild-Environment-Variables.md",
              "diffHunk": "@@ -1,12 +1,32 @@\n-# MSBuild environment variables\n+# MSBuild environment variables list\n \n-- [MsBuildSkipEagerWildCardEvaluationRegexes](#msbuildskipeagerwildcardevaluationregexes)\n+This document describes the environment variables that are respected in MSBuild, its purpose and usage. \n+Some of the env variables listed here are unsupported, meaning there is no guarantee that variable or a specific combination of multiple variables will be respected in upcoming release, so please use at your own risk.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}