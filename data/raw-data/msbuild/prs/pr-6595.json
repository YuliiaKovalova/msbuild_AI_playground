{
  "number": 6595,
  "title": "Enable Microsoft.CodeAnalysis.Collections",
  "body": "Closes #6601 \r\n\r\nReview commit-by-commit highly recommended. Please use a normal merge commit (no squash merge), as this pull request was carefully constructed and validated as distinct changes.",
  "state": "MERGED",
  "createdAt": "2021-06-18T17:58:02Z",
  "updatedAt": "2021-08-23T16:27:34Z",
  "closedAt": "2021-08-23T16:26:54Z",
  "mergedAt": "2021-08-23T16:26:53Z",
  "additions": 178,
  "deletions": 9894,
  "changedFiles": 23,
  "headRefName": "roslyn-collections",
  "isDraft": false,
  "author": {
    "login": "sharwell"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a66a243f7f63e6af3cea083bccc2f224310aa631",
          "message": "Use default XlfLanguages",
          "committedDate": "2021-07-30T18:10:08Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1cd160dbd39718ac7bade9cdd1f1a84eef40493",
          "message": "Add reference to Microsoft.CodeAnalysis.Collections (source package)",
          "committedDate": "2021-07-30T18:10:12Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c85cd99adb5d5d20693b2aa33fba6cf7c41aea6e",
          "message": "Use ImmutableSegmentedList<T> where appropriate\n\nCloses #6601",
          "committedDate": "2021-07-30T21:02:36Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff10b9f151192d956cf38412c1530f0762a391e1",
          "message": "Merge remote-tracking branch 'dotnet/main' into roslyn-collections",
          "committedDate": "2021-08-17T15:04:24Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "PR Triage:\r\nDo you have any performance measurements from before and after this PR?\r\nDid you profile both command line builds and builds from within Visual Studio?\r\nAnd is it correct to say this switches to using ImmutableSegmentList but doesn't use other data structures?\r\n\r\nBecause this is a new dependency from us on Roslyn, we need to make sure we have the right policies in place for keeping it up to date, especially around releases.",
        "createdAt": "2021-08-09T16:06:21Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Do you have any performance measurements from before and after this PR?\r\n\r\nI don't. Performance for these collections is much closer to `List<T>` than `ImmutableList<T>`, so I would not expect a measurable difference in practice, and certainly not a regression of the original issue that led to removal on `ImmutableList<T>` on this path.\r\n\r\nNote that in an ideal world, #6598 would have directly converted from `ImmutableList<T>` to `ImmutableSegmentedList<T>`, but the collections were not implemented in time to complete this.\r\n\r\n> Did you profile both command line builds and builds from within Visual Studio?\r\n\r\nI haven't done any profiling outside of some micro-benchmarking of the `SegmentedList<T>` indexer in https://github.com/dotnet/roslyn/blob/58c4cceb4aa4fe5212b59307603898fa3c6b8bee/src/Tools/IdeCoreBenchmarks/SegmentedArrayBenchmarks_Indexer.cs.\r\n\r\n> And is it correct to say this switches to using `ImmutableSegmentList<T>` but doesn't use other data structures?\r\n\r\n`ImmutableSegmentedList<T>` has some dependencies on other collections defined in the same package, but it would be correct to say that not all collections in the package are used. It would not be surprising to see other collections change over time (uses that particularly benefit are immutable lists/dictionaries created from empty and then not mutated after creation).\r\n\r\n> Because this is a new dependency from us on Roslyn, we need to make sure we have the right policies in place for keeping it up to date, especially around releases.\r\n\r\nThis is strictly a source package, so the version of these collections shipping with Roslyn does not directly impact the code shipping in this project.",
        "createdAt": "2021-08-09T18:29:32Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "> Can you link an overview of the new collections, their intended use cases, perf characteristics? Genuinely interested, thank you!\r\n\r\nMost of the documentation is included directly as documentation comments on the types themselves.\r\n\r\n| BCL | MS.CA.Collections | Notes |\r\n| --- | --- | --- |\r\n| `T[]` | `SegmentedArray<T>` | Negligible difference in scenarios where LOH needs to be avoided |\r\n| `List<T>` | `SegmentedList<T>` | Negligible difference in scenarios where LOH needs to be avoided |\r\n| `Dictionary<TKey, TValue>` | `SegmentedDictionary<TKey, TValue>` | https://github.com/dotnet/roslyn/pull/54574 Negligible difference in scenarios where LOH needs to be avoided |\r\n| `HashSet<T>` | `SegmentedHashSet<T>` | Negligible difference in scenarios where LOH needs to be avoided |\r\n| `ImmutableList<T>` | `ImmutableSegmentedList<T>` | Reads O(log n)&rarr;O(1); mutations O(log n)&rarr;O(n) |\r\n| `ImmutableDictionary<TKey, TValue>` | `ImmutableSegmentedDictionary<TKey, TValue>` | Reads O(log n)&rarr;O(1); mutations O(log n)&rarr;O(n) |\r\n| `ImmutableHashSet<T>` | `ImmutableSegmentedHashSet<T>` | https://github.com/dotnet/roslyn/pull/54719 Reads O(log n)&rarr;O(1); mutations O(log n)&rarr;O(n) |\r\n\r\n* The mutable collections are primarily suited for cases where transient collections larger than the LOH threshold are created and then collected in Gen 0 or Gen 1 GC.\r\n* The immutable collections are primarily suited for cases where an immutable collection is _created from empty_ and then stored in a location where it will be _read but not mutated_. The mutation performance is notably impacted for everything except small collections, but every other characteristic (storage density, locality, access times) are all substantially improved.\r\n\r\nThere are a few other subtleties, like the fact that the immutable wrappers are all value types which avoids allocations in a few edge cases.",
        "createdAt": "2021-08-17T14:53:17Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "@ladipro I'll also answer a couple of questions you didn't specifically ask:\r\n\r\n* What chance will we need bug fixes?\r\n\r\n    We've needed bug fixes a few times. These almost always centered around differences in JIT behavior between .NET Framework and .NET Core with only a performance impact (#52218, #52757), but we did hit one case where an internal algorithm had a correctness bug (https://github.com/dotnet/roslyn/commit/b42470f3926fa6bb995e9e7343e2565ba3b52b1c).\r\n\r\n* What about other fixes?\r\n\r\n    There are several cases where we know optimizations are possible, but have not yet been implemented. Most of these center around improving mutation performance of the immutable collections, which is currently O(n) but could be improved in most cases to O(1) with a large constant (not to exceed O(n)). There are a bunch of TODO comments for known cases, e.g. https://github.com/dotnet/roslyn/blob/7d7bf0cc73e335390d73c9de6d7afd1e49605c9d/src/Dependencies/Collections/ImmutableSegmentedList%601.cs#L150-L151.\r\n\r\n    Typically these would be implemented on an as-needed basis, which means MSBuild would probably be aware of the need to upgrade prior to that update existing.",
        "createdAt": "2021-08-17T15:21:55Z",
        "author": {
          "login": "sharwell"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcad I need to figure out why this is needed and add it to the documentation steps in https://github.com/dotnet/roslyn/issues/49991",
              "createdAt": "2021-07-30T21:10:49Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -104,6 +104,16 @@\n              Visible=\"false\" Pack=\"false\"/>\n   </ItemGroup>\n \n+  <Target Name=\"SetResourceProperties\" BeforeTargets=\"_GetEmbeddedResourcesWithSourceGeneration\">\n+    <ItemGroup>\n+      <EmbeddedResource Update=\"@(EmbeddedResource)\" Condition=\"'%(EmbeddedResource.NuGetPackageId)' == 'Microsoft.CodeAnalysis.Collections' AND '%(FileName)' == 'Strings'\">\n+        <GenerateSource>true</GenerateSource>\n+        <Generator>MSBuild:_GenerateResxSource</Generator>\n+        <ClassName>Microsoft.CodeAnalysis.Collections.SR</ClassName>\n+      </EmbeddedResource>\n+    </ItemGroup>\n+  </Target>",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd  I need to add this to the documentation steps in https://github.com/dotnet/roslyn/issues/49991",
              "createdAt": "2021-07-30T21:11:20Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": "Stupid question: If the code always requires this prop, can it be specified in the package (in Microsoft.CodeAnalysis.Collections.targets?)",
              "createdAt": "2021-08-17T08:07:29Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This is certainly not the way I'd hope this would go. Once https://github.com/dotnet/roslyn/issues/52893 is implemented we can quickly deal with this.",
              "createdAt": "2021-07-30T21:12:53Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <CreateTlb>true</CreateTlb>\n     <IsPackable>true</IsPackable>\n     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>\n     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>\n     <ApplyNgenOptimization Condition=\"'$(TargetFramework)' == '$(FullFrameworkTFM)'\">partial</ApplyNgenOptimization>\n+\n+    <!--\n+      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections\n+      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from\n+      an imported package. This suppression should be removed if/when the project is migrated to enable nullable\n+      reference types.\n+    -->\n+    <NoWarn>$(NoWarn),CS8632</NoWarn>",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is checking for `strings.resx` files, but I noticed we also have a `strings.shared.resx` file.\r\n\r\n![image](https://user-images.githubusercontent.com/4691428/128908204-dcf58acf-6821-4b3a-919d-68618e4c1388.png)\r\n\r\nIs `strings.shared.resx` relevant for this?",
              "createdAt": "2021-08-10T17:45:11Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -104,6 +104,16 @@\n              Visible=\"false\" Pack=\"false\"/>\n   </ItemGroup>\n \n+  <Target Name=\"SetResourceProperties\" BeforeTargets=\"_GetEmbeddedResourcesWithSourceGeneration\">\n+    <ItemGroup>\n+      <EmbeddedResource Update=\"@(EmbeddedResource)\" Condition=\"'%(EmbeddedResource.NuGetPackageId)' == 'Microsoft.CodeAnalysis.Collections' AND '%(FileName)' == 'Strings'\">",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I don't believe Strings.shared.resx is part of this NuGet package.",
              "createdAt": "2021-08-10T18:42:57Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -104,6 +104,16 @@\n              Visible=\"false\" Pack=\"false\"/>\n   </ItemGroup>\n \n+  <Target Name=\"SetResourceProperties\" BeforeTargets=\"_GetEmbeddedResourcesWithSourceGeneration\">\n+    <ItemGroup>\n+      <EmbeddedResource Update=\"@(EmbeddedResource)\" Condition=\"'%(EmbeddedResource.NuGetPackageId)' == 'Microsoft.CodeAnalysis.Collections' AND '%(FileName)' == 'Strings'\">",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`NoWarn` is a semicolon-delimited list.",
              "createdAt": "2021-08-10T17:49:02Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <CreateTlb>true</CreateTlb>\n     <IsPackable>true</IsPackable>\n     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>\n     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>\n     <ApplyNgenOptimization Condition=\"'$(TargetFramework)' == '$(FullFrameworkTFM)'\">partial</ApplyNgenOptimization>\n+\n+    <!--\n+      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections\n+      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from\n+      an imported package. This suppression should be removed if/when the project is migrated to enable nullable\n+      reference types.\n+    -->\n+    <NoWarn>$(NoWarn),CS8632</NoWarn>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I'm pretty sure it's always supported both, but it's documented as comma-delimited.\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/128916667-cb06a414-c05d-4c22-9f73-5c5aadfdaa81.png)\r\n",
              "createdAt": "2021-08-10T18:41:01Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <CreateTlb>true</CreateTlb>\n     <IsPackable>true</IsPackable>\n     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>\n     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>\n     <ApplyNgenOptimization Condition=\"'$(TargetFramework)' == '$(FullFrameworkTFM)'\">partial</ApplyNgenOptimization>\n+\n+    <!--\n+      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections\n+      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from\n+      an imported package. This suppression should be removed if/when the project is migrated to enable nullable\n+      reference types.\n+    -->\n+    <NoWarn>$(NoWarn),CS8632</NoWarn>",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": ">  but it's documented as comma-delimited\r\n\r\nI had no idea \ud83e\udd2f I judged based off of the value of `NoWarn` in a random binlog (which looked to be entirely semicolon-delimited)",
              "createdAt": "2021-08-10T21:32:31Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -1,14 +1,27 @@\n \ufeff<Project Sdk=\"Microsoft.NET.Sdk\">\n   <PropertyGroup>\n     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>\n+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <CreateTlb>true</CreateTlb>\n     <IsPackable>true</IsPackable>\n     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>\n     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>\n     <ApplyNgenOptimization Condition=\"'$(TargetFramework)' == '$(FullFrameworkTFM)'\">partial</ApplyNgenOptimization>\n+\n+    <!--\n+      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections\n+      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from\n+      an imported package. This suppression should be removed if/when the project is migrated to enable nullable\n+      reference types.\n+    -->\n+    <NoWarn>$(NoWarn),CS8632</NoWarn>",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}