{
  "number": 7703,
  "title": "Avoid loading ConfigurationManager on .NET 6",
  "body": "### Context\r\n\r\nAfter we updated System.Configuration.ConfigurationManager to 6.0, it broke some API consumers that use MSBuildLocator because they deploy the old ConfigurationManager.dll, which prevents loading the new one even from the SDK directory.\r\n\r\n### Changes Made\r\n\r\n This mitigates the problem by avoiding JITing a method that needs ConfigurationManager types on codepaths that won't use it (by moving the calls into a separate method).\r\n\r\n### Testing\r\n\r\nValidated that this makes the changes from dotnet/upgrade-assistant#1162 unnecessary (but harmless).\r\n",
  "state": "MERGED",
  "createdAt": "2022-06-14T17:24:32Z",
  "updatedAt": "2022-06-22T19:32:26Z",
  "closedAt": "2022-06-22T19:32:25Z",
  "mergedAt": "2022-06-22T19:32:25Z",
  "additions": 17,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "mitigate-configurationmanager-update",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.3"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "360fb2407b21f135e3906adee628860ebfd206be",
          "message": "Avoid loading ConfigurationManager on .NET 6\n\nAfter we updated System.Configuration.ConfigurationManager to 6.0, it\nbroke some API consumers that use MSBuildLocator because they deploy the\nold ConfigurationManager.dll, which prevents loading the new one even\nfrom the SDK directory. This mitigates the problem by avoiding JITing a\nmethod that needs ConfigurationManager types on codepaths that won't use\nit (by moving the calls into a separate method).",
          "committedDate": "2022-06-14T17:15:58Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3c0736d64933bf91743bbe469caa0480a7d34e0",
          "message": "Mark no-inline",
          "committedDate": "2022-06-14T18:48:27Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You will probably need to tell the compiler not to inline this otherwise optimized builds could still load the types. Can you set method attributes on local functions?\r\n```c#\r\n[MethodImplAttribute(MethodImplOptions.NoInlining)] \r\n```",
              "createdAt": "2022-06-14T17:44:50Z",
              "path": "src/Build/Definition/ToolsetReader.cs",
              "diffHunk": "@@ -128,10 +128,21 @@ ToolsetDefinitionLocations locations\n                     configurationReader = new ToolsetConfigurationReader(environmentProperties, globalProperties);\n                 }\n \n-                // Accumulation of properties is okay in the config file because it's deterministically ordered\n-                defaultToolsVersionFromConfiguration = configurationReader.ReadToolsets(toolsets, globalProperties,\n-                    initialProperties, true /* accumulate properties */, out overrideTasksPathFromConfiguration,\n-                    out defaultOverrideToolsVersionFromConfiguration);\n+                ReadConfigToolset();\n+\n+                // This is isolated into its own function in order to isolate loading of\n+                // System.Configuration.ConfigurationManager.dll to codepaths that really\n+                // need it as a way of mitigating the need to update references to that\n+                // assembly in API consumers.\n+                //\n+                // https://github.com/microsoft/MSBuildLocator/issues/159",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I couldn't find a way to make it fail without this, but it's a good idea. Especially since I didn't test crossgenning.",
              "createdAt": "2022-06-14T18:50:57Z",
              "path": "src/Build/Definition/ToolsetReader.cs",
              "diffHunk": "@@ -128,10 +128,21 @@ ToolsetDefinitionLocations locations\n                     configurationReader = new ToolsetConfigurationReader(environmentProperties, globalProperties);\n                 }\n \n-                // Accumulation of properties is okay in the config file because it's deterministically ordered\n-                defaultToolsVersionFromConfiguration = configurationReader.ReadToolsets(toolsets, globalProperties,\n-                    initialProperties, true /* accumulate properties */, out overrideTasksPathFromConfiguration,\n-                    out defaultOverrideToolsVersionFromConfiguration);\n+                ReadConfigToolset();\n+\n+                // This is isolated into its own function in order to isolate loading of\n+                // System.Configuration.ConfigurationManager.dll to codepaths that really\n+                // need it as a way of mitigating the need to update references to that\n+                // assembly in API consumers.\n+                //\n+                // https://github.com/microsoft/MSBuildLocator/issues/159",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}