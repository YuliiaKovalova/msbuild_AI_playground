{
  "number": 9853,
  "title": "Initial version of Analyzers specs",
  "body": "Fixes #9895\r\n\r\n### Context\r\n\r\nInitial draft of specs (external and internal design) fpr Analyzers (AKA BuildCheck) feature.\r\nShould as well serve as supportive materials for reviewing https://github.com/dotnet/msbuild/pull/9735",
  "state": "MERGED",
  "createdAt": "2024-03-12T13:48:15Z",
  "updatedAt": "2024-04-11T09:34:01Z",
  "closedAt": "2024-04-11T09:33:57Z",
  "mergedAt": "2024-04-11T09:33:57Z",
  "additions": 485,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "doc/analyzers",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "968c0037993df53a9910695ccba376efe0a09906",
          "message": "Initial draft of specs",
          "committedDate": "2024-03-12T13:44:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b523fe934fd40b554f7bb72ff7cc1ba3fc70c450",
          "message": "Clarify",
          "committedDate": "2024-03-13T14:00:57Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aeb92c6148a4d6a66e334c2933f899c89bc02cd5",
          "message": "Clarify configuration section",
          "committedDate": "2024-03-14T15:25:05Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b2376cfa9661f14f4155f00a641e5f768864ca31",
          "message": "Improve wording",
          "committedDate": "2024-03-14T15:30:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c38e806c1dc14c1f65c072f6fb5a05606327f46b",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>\nCo-authored-by: Chet Husk <baronfel@users.noreply.github.com>",
          "committedDate": "2024-03-15T19:32:58Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbccee4b6dca3bbe8c6e4e74cb89fb5dd98397f6",
          "message": "Rework based on PR feedback",
          "committedDate": "2024-03-15T21:26:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff567bdd1e419a60bc368d3c3c1829c691e0d297",
          "message": "PR review meeting feedback",
          "committedDate": "2024-03-18T17:17:52Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d041ff8d8d8312e63544469826ff15e243f53856",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-03-18T17:19:11Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08b368082c6ee21854f12c0581fcad21cab0b122",
          "message": "Update based on PR feedback",
          "committedDate": "2024-03-18T18:03:15Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25ae8718fd9a41ca7628e1b81686ad1c55a3a742",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-03-19T13:28:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7465f2de2ee35cfaed235774d623f970d0857cb9",
          "message": "Reflecting PR comments",
          "committedDate": "2024-03-19T14:54:16Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4154d1410a67576c87472981808a7b3e75eb302",
          "message": "Add planned inbox checks",
          "committedDate": "2024-03-19T16:52:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5b63572eb0382f98d4d8159364e8377a525fa04",
          "message": "Sample code formatting",
          "committedDate": "2024-03-19T16:57:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7e02166645affd15a5b47d33f1bd8a9f3ac9f24",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Ladi Prosek <ladi.prosek@gmail.com>",
          "committedDate": "2024-03-27T10:48:06Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af29bdad47ee076d95f07d9d280fabde50f022d9",
          "message": "Reflecting PR comments",
          "committedDate": "2024-03-27T12:51:15Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41922db06f38a8adc999f4a8d2bf1e5bbc0bc3d2",
          "message": "Reflecting PR comments",
          "committedDate": "2024-03-27T12:52:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "815eae8b904436885fc31ed3d1b89c7c5b89d9d4",
          "message": "Fix typos",
          "committedDate": "2024-03-27T12:56:45Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10746e13e55c987a4deb5f9b5486b027b7ec5aa7",
          "message": "Reflect PR comments",
          "committedDate": "2024-03-27T16:35:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23bc707d75309296390977565bd8a2055825325e",
          "message": "Update BuildCheck-Architecture.md",
          "committedDate": "2024-04-04T10:20:34Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60c5844544ce2a1b65f780adb2c1d701a59cac3f",
          "message": "Reflect on PR comments",
          "committedDate": "2024-04-04T17:25:04Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d4f76bac8fb2454e1e6f866d5133630f902c82d8",
          "message": "Add explicit mention of possibility to fail the build",
          "committedDate": "2024-04-04T17:40:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd26a984b033ead2a7c520e76e533e6ee2c6c01a",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-04-05T13:30:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "529d3d836c1df9ff2ddcfe2bb4b82e58824435d6",
          "message": "Reflected PR comments",
          "committedDate": "2024-04-05T13:37:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "90d89aa1e287031013fc84dd2dde409e4a3d31cf",
          "message": "Merge branch 'doc/analyzers' of https://github.com/JanKrivanek/msbuild into doc/analyzers",
          "committedDate": "2024-04-05T13:37:22Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42e26988db5ee10f983c99ac88d9834931b43239",
          "message": "Update documentation/specs/proposed/BuildCheck-Architecture.md\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2024-04-11T09:15:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2024-04-10T12:03:19Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-04-10T12:03:28Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this section also mention plans to have (some of) the in-box analyzers run by default?",
              "createdAt": "2024-03-14T14:10:47Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks like it should be a requirement. I would rather not include an analyzer if we can't make its reports be high-quality (have good locations). Is this out-of-scope because we don't believe we can be both fast and have precise locations?",
              "createdAt": "2024-03-14T14:20:09Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'm very split on this.\r\n\r\nYes - it feels we should have only the top quality reports. On the other hand I do not think it should be something in power of stopping the whole feature from shipping.\r\n\r\nOne reason is that locations are not part of BuildEventArgs contracts - so there is nontrivial amount of work behind surfacing them in API (without exposing the distributed nature of the build).\r\n\r\nOther reason is that there might be some very valuable analyses (e.g. double writes, especially if we'd employ I/O tracking) where corelating precise location might be preventing introducing such analyser.\r\n\r\n\r\nHow about that being a non-goal? :-)",
              "createdAt": "2024-03-15T10:35:29Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@ladipro does this wording sound better? https://github.com/JanKrivanek/msbuild/blob/doc/analyzers/documentation/specs/proposed/BuildCheck.md?plain=1#L64",
              "createdAt": "2024-03-18T18:04:46Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yes, thank you for making the change!",
              "createdAt": "2024-03-26T13:58:44Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure what's exactly meant by this. Presumably one `.editorconfig` at repo root would apply to all projects. ",
              "createdAt": "2024-03-14T15:04:40Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files)\n+* Simplified authoring experience via dedicated reference assembly\n+* Restore phase analysis\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.)\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond scope of single project built (means for sharing data would be provided).\n+* ETW for analyzers\n+* Attributing `.editorconfig` configurations to .sln files\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file)\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'll specify better.\r\n\r\nThe idea is, we won't support this:\r\n\r\n```\r\n# I expect this to apply to all projects within my solution, but not to projects which are not part of the solution\r\n[MySpecialSolutionWithJustSubsetOfProjects.sln]\r\nmsbuild_analyzer.BC0101.IsEnabled=true\r\nmsbuild_analyzer.BC0101.Severity=warning\r\n```",
              "createdAt": "2024-03-15T10:38:03Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files)\n+* Simplified authoring experience via dedicated reference assembly\n+* Restore phase analysis\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.)\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond scope of single project built (means for sharing data would be provided).\n+* ETW for analyzers\n+* Attributing `.editorconfig` configurations to .sln files\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file)\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ideally this data would be declared somewhere else so we don't have to load the analyzer assembly and instantiate the class just to see that none of the rules are enabled and the analyzer is not needed. Likely not a v1 feature, though.",
              "createdAt": "2024-03-14T15:25:17Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,352 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Errors and warning in logger, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted then\n+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers with equal data access as built-in\n+* All inbox analyzers reports have precise location(s) of issues\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files)\n+* Simplified authoring experience via dedicated reference assembly\n+* Restore phase analysis\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.)\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond scope of single project built (means for sharing data would be provided).\n+* ETW for analyzers\n+* Attributing `.editorconfig` configurations to .sln files\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file)\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### Sample configuration\n+(TBD)\n+\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you refresh my memory about the gap in data between custom and in-box analyzers?",
              "createdAt": "2024-03-14T15:42:56Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "IMO we need a third category:\r\n\r\n* Engine analyses/diagnostics enabled in the same way as BuildChecks\r\n* In-box analyzers that use the public API surface\r\n* Third-party analyzers.",
              "createdAt": "2024-03-14T16:24:08Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@baronfel as Rainer mentioned - this is just to aid us some extra agility without sacrificing stability of public API. We are alowing ourselves to use data that we're not yet ready to expose publically (or that will need to be sourced and abstracted differently for public API).\r\n\r\nI'll specify better",
              "createdAt": "2024-03-15T15:10:08Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nFindings - reports - of analyzers will be output as build messages/warnings/errors, and the message/warnings/error code should help distinguish BuildCheck produced reports from regular build errors/warnings.\r\n```",
              "createdAt": "2024-03-14T15:43:59Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the technical driver for this constraint?",
              "createdAt": "2024-03-14T15:46:33Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "While Rule is a unit of configuration, the analyzer is the unit of execution - analyzer is being fed with data from the infrastructure.\r\nIf the infrastructure is supposed to pre-filter data being fed into the analyzer, then it applies to the whole analyzer.\r\n\r\n\r\nThe alternative design is that the analyzer would need to decide by itself what data to accept and what data to filter out - then the analyzer could do that separately per each rule. However this way the infrastructure wouldn't be able to give any guarantees about corectness of the outputs.",
              "createdAt": "2024-03-14T20:45:35Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This as well means that multiple rules should be grouped into single analyzer with care.",
              "createdAt": "2024-03-14T20:47:20Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nUsers are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling (including built-in and third-party C# analyzers) leveraging `.editorconfig` files.\r\n```",
              "createdAt": "2024-03-14T16:12:10Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nA solid set of in-the-box analyzers is provided by MSBuild and the .NET SDK, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\r\n```",
              "createdAt": "2024-03-14T16:13:14Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Opt out or opt in? I feel perf DDRITs will require opt-in . . .",
              "createdAt": "2024-03-14T16:13:46Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So very intitialy (pre-release) - the analyzers will be opt-in.\r\n\r\nIn some mature state the analyzers will be opt-out.\r\n\r\nThe big question is when we switch between those two modes - V1 / V2? Current wishfull thinking is V1.\r\n\r\nI'll try to mention and discuss this more explicitly in the doc",
              "createdAt": "2024-03-14T20:52:54Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please don't use MSB prefix in examples, we want people to do something distinct (so we don't get blamed :-P).",
              "createdAt": "2024-03-14T16:15:00Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good catch.\r\n\r\n100%",
              "createdAt": "2024-03-14T20:53:28Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd move this section above the initial scope stuff I think.",
              "createdAt": "2024-03-14T16:16:32Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I prefer to have the scope first now - as that's where I want most attention of initial readers (to get early feedback if something important is not properly considered).\r\n\r\nWe can rearange once this becomes more of a user doc.",
              "createdAt": "2024-03-18T17:16:06Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the double reporting intentional? Feels like it could be a won't-fix bug for v1 but doesn't seem like something we intentionally want.",
              "createdAt": "2024-03-14T16:17:30Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "My wording obviously needs some tweaking here :-)\r\n\r\nAs the message I wanted to transfer was what you pointed out - \"not intended, but possibly not high priority for addressing in v1\"",
              "createdAt": "2024-03-14T20:55:26Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "As a rule there's no \"unpack action\" in modern NuGet beyond \"unzip to packages folder\", I'd drop that part.",
              "createdAt": "2024-03-14T16:18:51Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah OK.\r\n\r\nBtw. there still can be custom build target doing a similar thing I suppose.. but probably not that doesn't need to be mentioned, as project folder locvation is already mentioned above..",
              "createdAt": "2024-03-14T20:57:29Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How would we detect this?",
              "createdAt": "2024-03-14T16:19:22Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I do not have strong answer now :-) but if it's easy - let's do that, if not - it's not a goal.\r\n\r\nAnyway - I expect the detection being alongside of collecting all configurations with `msbuild_analyzer` prefix and then checking if the following tag doesn't start with `MSB`",
              "createdAt": "2024-03-14T20:59:58Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Oh NON goals \ud83e\udd26\ud83c\udffb ignore this one",
              "createdAt": "2024-03-14T21:26:19Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we computing the set of analyzers similar to the mechanisms that already exist in the SDK? I.E `Analyzer` MSBuild Items that get computed up to a certain point? If so, the answer for 'local analyzer' development/usage would be to manually create an `Analyzer` MSbuild item with the correct metadata. Is that right?",
              "createdAt": "2024-03-14T16:21:00Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Unfortunately we have the chicken-egg problem here - we need to learn about analyzer much sooner.\r\nThat's why the magic intrinsic function has been defined for this purpose. With `PackageReference` we can count on the eraly import of the build assets within the package. With `ProjectReference` (or `Reference`) there is no similar mechanism (# packages-projects substitutability :-))\r\n\r\nSo different tricks will need to be used here",
              "createdAt": "2024-03-14T20:50:51Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n* Opt-out of analysis on code-level (something like C# `#pragma warning disable`, but within msbuild xml files).\r\n```",
              "createdAt": "2024-03-14T16:26:09Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nDifferent rules of a single analyzer can have different enablement status configured.\r\n```",
              "createdAt": "2024-03-14T16:27:04Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "IMO move this up to the top of this section, I wanted it immediately to provide context for the details.",
              "createdAt": "2024-03-14T16:28:06Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the `msbuild_analyzer` prefix required? Should it be `buildcheck` now?",
              "createdAt": "2024-03-14T16:28:51Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I agree.\r\n\r\n@maridematte FYI",
              "createdAt": "2024-03-14T21:00:58Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nEach rule has a severity, even if multiple rules are defined in a single analyzer. The rule can have different severities for different projects within a single build session.\r\n```",
              "createdAt": "2024-03-14T16:30:46Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the right level of configuration here? I was thinking of this as something that the analyzer/rule declared, rather than something end-user configurable. But I'm not sure that's right!",
              "createdAt": "2024-03-14T16:32:01Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's both - analyzer provides defualt, user can override.\r\n\r\nIf during the authoring we find out there might be rules where user-overriding is not desired - let's then think about selectively preventing",
              "createdAt": "2024-03-14T21:02:29Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So this is \"include NuGet-delivered logic but not SDK-delivered logic\"? What's the use case for that?",
              "createdAt": "2024-03-14T16:32:55Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm still unsure if we need this.\r\n\r\nBut I was thinking about a scenario of local development loop of package - where devs still might need to go the nuget roundtrip. But there might be a better answers to that possibly (e.g. additional development root location?)",
              "createdAt": "2024-03-14T21:04:24Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nTo author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed BuildCheck OM focused on build analysis.\r\n```",
              "createdAt": "2024-03-14T16:34:13Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this `<a>` seems to confuse GH markdown rendering",
              "createdAt": "2024-03-14T16:36:40Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThe data provided in callbacks for registered actions will allow the analyzer to submit reports for its rules. A single callback can lead to multiple reports being generated.\r\n```",
              "createdAt": "2024-03-14T16:37:34Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nA single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\r\n```",
              "createdAt": "2024-03-14T16:38:26Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you expand on this? Is it identifier, long name/description? Are there loc options?",
              "createdAt": "2024-03-14T16:47:06Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Current proposal: https://github.com/dotnet/msbuild/pull/9735/files#diff-ffa5a8cc14988d03c021f4d451517d358aa148a11ef06068db7298ec7ceac914R24-R49\r\n\r\nBut it is in high need of deeper thinking through and revisiting: https://github.com/dotnet/msbuild/issues/9823\r\n\r\nLocalization is a great point! I need to put it into out of scope section :-)",
              "createdAt": "2024-03-15T21:01:59Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded default is used (`severity: message, enabled: false`).\r\n```",
              "createdAt": "2024-03-14T16:47:51Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// The default severity of the result for the rule. May be overridden by user configuration.\r\n```",
              "createdAt": "2024-03-14T16:48:45Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// If no rule within the analyzer is enabled, the whole analyzer will not be run.\r\n```",
              "createdAt": "2024-03-14T16:49:10Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why nullable?",
              "createdAt": "2024-03-14T16:49:27Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "All the configs are optional now.\r\n\r\nhttps://github.com/JanKrivanek/msbuild/blob/c38e806c1dc14c1f65c072f6fb5a05606327f46b/documentation/specs/proposed/BuildCheck.md?plain=1#L304\r\n\r\nThough it is very much not a strong need nor opinion - we can change this.",
              "createdAt": "2024-03-15T21:07:44Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure I understand the \"forward compatible\" thing here. Can you give an example of when it wouldn't be and what would happen?",
              "createdAt": "2024-03-14T16:51:04Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Bad wording - it needs rephrasing.\r\nI meant fwd compatible from the point of view of the packaged analyzer.\r\nBasicaly If pacakge is authored against V-X of the API, shipped and then some user tries to load it within a build exposing V-(X+1) API, this could possibly lead to issues in loading the anlyzer (our infra should properly handle this - issue warning and ignore the analyzer), as it'd try to reference nonexistent contracts.",
              "createdAt": "2024-03-15T21:13:29Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n<PackageReference Include=\"Contoso.BuildChecks\" Version=\"1.2.3\" />\r\n```",
              "createdAt": "2024-03-14T16:52:30Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'd actuall keep this as `Analyzers`.\r\nOriginaly I wanted to choose a codename to distinguish the infra (now BuildCheck) and the actual checks (now still analyzers)",
              "createdAt": "2024-03-15T21:17:07Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Hm, I envisioned renaming all of the related concepts. I think that is more consistent, less confusing, and more ~Google~Bingable. Let's discuss :)",
              "createdAt": "2024-03-18T14:34:33Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "+1 for a single name here. Aliasing and/or subtle distinctions create confusion and dilute the concept's \"branding\".",
              "createdAt": "2024-03-18T22:57:20Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Understood.\r\n\r\nLet's rename (Build)Analyzer -> BuildCheck\r\n\r\nEntering item for this - will happen soon",
              "createdAt": "2024-03-19T14:55:52Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=56961654",
              "createdAt": "2024-03-19T14:57:19Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+      + [Sample configuration](#sample-configuration)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+\n+# Terminology\n+\n+* **Analyzer** \u2013 unit of execution (single implementing class), can host multiple rules. \n+* **Rule** \u2013 Single violation type, with single unique code (`\u201cMSB123: Redefining built-in target\u201d`). \n+* **Report** \u2013 Output from Analyzer informing about violating particular rule.\n+* **CodeFix** \u2013 Violation remedy suggestion. Not yet applicable for MSBuild.\n+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules\n+\n+\n+# North Star / Longer-term vision\n+\n+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing \u2013 so that users can choose whether the build analysis will happen as part of the build or as a separate process.\n+\n+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.\n+\n+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n+\n+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).\n+\n+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.\n+\n+\n+# Scope of initial iteration\n+\n+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section. Following is a quick overview.\n+\n+**In scope**\n+* Inbox (build-in) analyzers that run during the build execution.\n+* Inbox analyzers that run when replaying binlog.\n+* Custom authored analyzers, delivered via nuget.\n+* Analyzers reports (errors, warnings, messages) are in logger output, VS error window.\n+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.\n+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md))) or other agreed mechanism for controling increasing strictness between .NET versions.\n+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.\n+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).\n+* Standards of `.editorconfig`s will be observed. \n+* Simplified authoring experience via template and doc.\n+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront.\n+* Opt-in reporting of time spent via specific analyzers and infra overall.\n+* Collect touched `.editorconfg`s into binlog embedded files.\n+* Possibility to opt-out from analysis - the perf should not be impacted when done so.\n+* Team collects performance impact numbers on a set of benchmark builds with the inbox analyzers enabled.\n+\n+**Non Goals, but subject for consideration**\n+* Custom anlyzer in a local project (source codes) or a binary.\n+* Bulk configuration of multiple rules (based on prefixes).\n+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).\n+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs\n+* Rich information in VS error window.\n+\n+\n+**Out of scope**\n+* Custom analyzers has equal data access as the inbox analyzers.\n+* All inbox analyzers reports have precise location(s) of issues.\n+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* Simplified authoring experience via dedicated reference assembly.\n+* Restore phase analysis.\n+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.).\n+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond a scope of a single project built (means for sharing data would be provided).\n+* ETW for analyzers.\n+* Attributing `.editorconfig` configurations to .sln files.\n+* Attributing `.editorconfig` configurations to lower granularity than whole projects.\n+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file).\n+ \n+\n+# User Experience\n+\n+## Running / UX\n+\n+### Inbox Analyzers\n+\n+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)\n+\n+### Live Build\n+\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+\n+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.\n+\n+### Binlog Replay mode\n+\n+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:\n+\n+```bash\n+> dotnet build msbuild.binlog /analyze\n+```\n+\n+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.\n+\n+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports \u2013 as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.\n+\n+For this reason we will consider following modes (all are non-goals):\n+* Ability to specify skipping all binlog stored reports\n+* Ability to specify skipping of the stored .editorconfig files\n+* Ability to specify single replay-time .editorconfig file and it\u2019s precedence (only the specified, specified as most significant, specified as least significant)\n+\n+## Configuration\n+\n+There will be 3 mechanisms of configuring the analyzers and rules:\n+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* `.editorconfig` file\n+\n+For the `.editorconfig` file configuration, following will apply:\n+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.\n+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won\u2019t be considered.\n+* `.editorconfig` files packaged within nuget packages won\u2019t be considered (unless the unpack action will place them alongside the referencing project).\n+\n+Non-Goals (but might be considered):\n+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.\n+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.\n+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.\n+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).\n+\n+Out of scope for configuration:\n+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).\n+* lower granularity of `.editorconfig` settings other than whole projects.\n+* attributing configuration to a .sln file and expecting it will apply to all contained projects.\n+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing \u2013 each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions \u2013 so authors are advised not to take hard dependency on single instance policy).\n+\n+### User Configurable Options\n+\n+Initial version of BuildCheck plans a limited set of options configurable by user (via `.editorconfig`) by which users can override default configuration of individual analyzer rules.\n+\n+#### Enablement\n+\n+Boolean option `IsEnabled` will be available to allow users to disable/enable particualr rule.\n+\n+Different rules of a single analyzer can have different enabledment status configured.\n+\n+If all the rules from a single analyzer are disabled - analyzer won't be given any data for such configured part of the build (specific project or a whoe build). If analyzer have some rules enabled and some disabled - it will be still fed with data, but the reports will be post-filtered.\n+\n+Same rule can have different enablement status for different projects.\n+\n+#### Severity\n+\n+Option `Severity` with following values will be available:\n+\n+* `Message`\n+* `Warning`\n+* `Error`\n+\n+Configuration will dictate transformation of the analyzer report to particular build output type (message, warning or error).\n+\n+Different rules of a single analyzer can have different severities configured. Same rule can have different severities for different projects.\n+\n+#### Scope of Analysis\n+\n+Option `EvaluationAnalysisScope` with following possible options will be avaialable:\n+* `AnalyzedProjectOnly` - Only the data from currently analyzed project will be sent to the analyzer. Imports will be discarded.\n+* `AnalyzedProjectWithImportsFromCurrentWorkTree` - Only the data from currently analyzed project and imports from files under the entry project or solution will be sent to the analyzer. Other imports will be discarded.\n+* `AnalyzedProjectWithImportsWithoutSdks` - Imports from SDKs will not be sent to the analyzer. Other imports will be sent.\n+* `AnalyzedProjectWithAllImports` - All data will be sent to the analyzer.\n+\n+All rules of a single analyzer must have the `EvaluationAnalysisScope` configured to a same value. If any rule from the analyzer have the value configured differently - a warning will be issued during the build and analyzer will be deregistered.\n+\n+Same rule can have `EvaluationAnalysisScope` configured to different values for different projects.\n+\n+BuildCheck might not be able to guarantee to properly filter the data with this distinction for all [registration types](#RegisterActions) - in case an explicit value is attempted to be configured (either [from the analyzer code](#BuildAnalyzerConfiguration) or from `.editorconfig` file) for an analyzer that has a subscription to unfilterable data - a warning will be issued during the build and analyzer will be deregistered.\n+\n+### Sample configuration\n+\n+```\n+[*.csproj]\n+msbuild_analyzer.BC0101.IsEnabled=true\n+msbuild_analyzer.BC0101.Severity=warning\n+\n+msbuild_analyzer.COND0543.IsEnabled=false\n+msbuild_analyzer.COND0543.Severity=Error\n+msbuild_analyzer.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly\n+msbuild_analyzer.COND0543.CustomSwitch=QWERTY\n+```\n+\n+## Analyzers and Rules Identification\n+\n+**TBD**\n+\n+* Recommended and reserved prefixes\n+* Short vs descriptive names\n+* Rules categories\n+* Ability to use prefixes during configuration\n+\n+\n+## Custom Analyzers Authoring\n+\n+### Implementation\n+\n+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.\n+\n+#### Analyzer declaration\n+\n+Simplified proposal:\n+\n+```csharp\n+public abstract class BuildAnalyzer : IDisposable\n+{\n+    /// <summary>\n+    /// Friendly name of the analyzer.\n+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.\n+    /// </summary>\n+    public abstract string FriendlyName { get; }\n+\n+    /// <summary>\n+    /// Single or multiple rules supported by the analyzer.\n+    /// </summary>\n+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }\n+\n+    /// <summary>\n+    /// Optional initialization of the analyzer.\n+    /// </summary>\n+    /// <param name=\"configurationContext\">\n+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig\n+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.\n+    /// </param>\n+    public abstract void Initialize(ConfigurationContext configurationContext);\n+\n+    /// <summary>\n+    /// \n+    /// </summary>\n+    /// <param name=\"context\"></param>\n+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);\n+\n+    public virtual void Dispose()\n+    { }\n+}\n+```\n+\n+<a name=\"RegisterActions\" />The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. \n+\n+Sample of how registrations might look like:\n+\n+```csharp\n+public interface IBuildCheckRegistrationContext\n+{\n+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);\n+\n+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);\n+\n+    // ...\n+}\n+```\n+\n+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.\n+\n+Any analyzer will be allowed to produce reports only for Rules that it declared in it\u2019s `SupportedRules` definition.\n+\n+#### Rules declaration\n+\n+Single analyzer can declare support of multiple rules \u2013 since it might produce reports for those on top of same input data \u2013 and for efficiency reasons a single processing of data might be needed.\n+\n+Simplified proposal of definition of a single rule:\n+\n+```csharp\n+public class BuildAnalyzerRule\n+{\n+    // Identification/Description fields\n+\n+    /// <summary>\n+    /// The default configuration - overridable by the user via .editorconfig.\n+    /// If no user specified configuration is provided, this default will be used.\n+    /// </summary>\n+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }\n+}\n+```\n+\n+<a name=\"BuildAnalyzerConfiguration\" />Each rule will supply its default configuration (mainly enablement and report severity) \u2013 those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).\n+\n+#### Standardized configuration declaration\n+\n+Proposal of configuration specification:\n+\n+```csharp\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    /// <summary>\n+    /// This applies only to specific events, that can distinguish whether they are directly inferred from\n+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.\n+    ///\n+    /// If not supported by the data source - then the setting is ignored\n+    /// </summary>\n+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }\n+\n+    /// <summary>\n+    /// The severity of the result for the rule.\n+    /// </summary>\n+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }\n+\n+    /// <summary>\n+    /// Whether the analyzer rule is enabled.\n+    /// If all rules within the analyzer are not enabled, it will not be run.\n+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.\n+    /// </summary>\n+    public bool? IsEnabled { get; internal init; }\n+}\n+```\n+\n+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure \u2013 they are invisible to the actual analyzers.\n+\n+#### Custom configuration declaration\n+\n+However if user will specify additional \u2013 unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration \u2013 those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:\n+\n+```csharp\n+/// <summary>\n+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)\n+/// </summary>\n+public class ConfigurationContext\n+{\n+    /// <summary>\n+    /// Custom configuration data - per each rule that has some specified.\n+    /// </summary>\n+    public CustomConfigurationData[] CustomConfigurationData { get; init; }\n+}\n+```\n+\n+This can allow creation of extendable checks \u2013 e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable \u2013 so the user of the check can tune the behavior to their needs.\n+\n+More details on configuration are in [Configuration](#configuration) section.\n+\n+\n+#### Compatibility\n+\n+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):\n+\n+```csharp\n+var availability = Features.CheckFeatureAvailability(\"BuildCheck.Beta\");\n+```\n+\n+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.\n+\n+\n+### Testing and Debugging\n+\n+**TBD**\n+\n+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.\n+\n+At the same time we aim to provide mocks providing the BuildCheck context data \u2013 this work is however a non-goal.\n+\n+### Packaging\n+\n+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).\n+\n+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).\n+\n+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.\n+\n+**TBD** - dotnet new sample on initiating the development.\n+\n+## Acquisition of custom analyzers\n+\n+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).\n+\n+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. \n+\n+```xml\n+<PackageReference Include=\"Contoso.Analyzers\" Version=\"1.2.3\" />",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Meta-comment: as a .NET dev, the term \"analyzers\" suggests to me that this is static analysis on the XML language itself, however that's not the case. Consider coming up with a different name to avoid overloading the term. That would also keep the name free for any future static analysis of MSBuild's language.",
              "createdAt": "2024-03-14T22:34:47Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "This is a good point showing that we might need to have a short section on the actual OM and plans for that. As static analysis should actually be a subset - not a distinct set - of our analyses.\r\n\r\nIn any case - 'Analyzers' is mentioned as that's how we used to refere to the feature - so the reader know it's still same thing\r\n",
              "createdAt": "2024-03-15T15:14:00Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yeah responding to similar feedback we renamed and now the different name is \"BuildCheck\".",
              "createdAt": "2024-03-15T15:15:43Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,405 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWe want to get some benefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\r\n```",
              "createdAt": "2024-03-15T21:40:02Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand this idea but since it's not high pri right now that's ok.",
              "createdAt": "2024-03-15T21:44:28Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I tried to add more details to the whole description of the distributed model (lines 49 - 54) - please try to have a look if it is more comprehensible now.",
              "createdAt": "2024-03-18T18:03:03Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd like to be clear here that we're going to have a mapping OM from the source to the things that are exposed to plugins.",
              "createdAt": "2024-03-18T14:37:17Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n* Apart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\r\n```",
              "createdAt": "2024-03-18T14:37:51Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure I understand this, can you elaborate?\r\n\r\nThe flow is evaluation->special event->load analyzer DLL and call its `Register` method, right?",
              "createdAt": "2024-03-18T14:39:04Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We actually want to allow only the BuildEventArgs sourcing analyzers - so the anlyzer should only be loaded on the main node. So it goes evaluation->special event-> _collect the data from the event and send via special crafted BuildEventArgs->Receive the event on main node and give it to BuildCheck there->_ load analyzer DLL and call its Register method\r\n\r\nI'll try to specifiy better in the doc",
              "createdAt": "2024-03-18T17:27:06Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How does this play into the discovery-during-evaluation mechanism?",
              "createdAt": "2024-03-18T14:39:33Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "BuildCheck will either need to replay couple events to the newly loaded analyzer, or buffer couple events during initial evaluation (most likely the former is prefered - as we'll most comonly load majority of cusom analyzers during the first project build).\r\n\r\nI'll add the info",
              "createdAt": "2024-03-18T17:44:40Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will issue an error and then be deregistered for the rest of the build.\r\n```",
              "createdAt": "2024-03-18T14:40:12Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build\n+    * On entrypoint node the information is sourced from `ProjectEvaluationStartedEventArgs`\n+    * On worker node this is received from `RequestBuilder.BuildProject`\n+* `BuildCheckManager` calls Configuration module and gets information for all analyzers in it's registry\n+    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will be deregistered for the rest of the build.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    * Global configuration issue (communicated via `BuildCheckConfigurationException`) will issue an error and then entirely disable BuildCheck.\r\n```",
              "createdAt": "2024-03-18T14:40:44Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build\n+    * On entrypoint node the information is sourced from `ProjectEvaluationStartedEventArgs`\n+    * On worker node this is received from `RequestBuilder.BuildProject`\n+* `BuildCheckManager` calls Configuration module and gets information for all analyzers in it's registry\n+    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will be deregistered for the rest of the build.\n+    * Global configuration issue (communicated via `BuildCheckConfigurationException`) will lead to defuncting whole BuildCheck.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This totally makes sense but reading it I can think of one potential problem: if analyzers take time, we're likely to see events related to a specific project _after_ that project's final BuildFinishedEvent. That may confuse some logging, so  we should be super clear about it.",
              "createdAt": "2024-03-18T14:41:46Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build\n+    * On entrypoint node the information is sourced from `ProjectEvaluationStartedEventArgs`\n+    * On worker node this is received from `RequestBuilder.BuildProject`\n+* `BuildCheckManager` calls Configuration module and gets information for all analyzers in it's registry\n+    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will be deregistered for the rest of the build.\n+    * Global configuration issue (communicated via `BuildCheckConfigurationException`) will lead to defuncting whole BuildCheck.\n+* `BuildCheckManager` instantiates all newly enabled analyzers and updates configuration for all allready instantiated analyzers.\n+* At that point of time analyzers are prepared for receiving data and performing their work. MSBuild will start calling `BuildCheckManager` callbacks (mostly pumping `BuildEventArgs`), passed data will be transalted into BuildCheck OM and passed to analyzers.\n+* Analyzers may decide to report results of their findings (via `BuildCopDataContext.ReportResult`), the infrastructure will then perform post-processing (filter out reports for `Rule`s that are disabled, set the severity based on configuration) and send the result via the standard MSBuild logging infrastructure.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Mentioned in the doc.\r\n\r\nWe might need to do some signalling and waiting before `ProjectFinishedEventArgs` and `BuildFinishedEventArgs`",
              "createdAt": "2024-03-18T17:56:36Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable funneling data from worker nodes BuildChecks to the entrypoint node BuildCheck - namely:\n+    * Acquisition module will be able to communicated to the entrypoint node that particular analyzer should be loaded and instantiated\n+    * Tracing module will be able to send partitioned stats and aggregate them together\n+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in entrypoint node).\n+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).\n+* Communication from main to worker node between BuildCheck infra modules is not planned.\n+\n+## Analyzers Lifecycle\n+\n+Planned model:\n+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)\n+    * For inbox analyzers - this happens on startup.\n+    * For custom analyzers - this happens on connecting `ILogger` instance in entrypoint node receives acquistion event (`BuildCheckAcquisitionEventArgs`).\n+* `BuildCheckManager` receives info about new project starting to be build\n+    * On entrypoint node the information is sourced from `ProjectEvaluationStartedEventArgs`\n+    * On worker node this is received from `RequestBuilder.BuildProject`\n+* `BuildCheckManager` calls Configuration module and gets information for all analyzers in it's registry\n+    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will be deregistered for the rest of the build.\n+    * Global configuration issue (communicated via `BuildCheckConfigurationException`) will lead to defuncting whole BuildCheck.\n+* `BuildCheckManager` instantiates all newly enabled analyzers and updates configuration for all allready instantiated analyzers.\n+* At that point of time analyzers are prepared for receiving data and performing their work. MSBuild will start calling `BuildCheckManager` callbacks (mostly pumping `BuildEventArgs`), passed data will be transalted into BuildCheck OM and passed to analyzers.\n+* Analyzers may decide to report results of their findings (via `BuildCopDataContext.ReportResult`), the infrastructure will then perform post-processing (filter out reports for `Rule`s that are disabled, set the severity based on configuration) and send the result via the standard MSBuild logging infrastructure.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nPreviously known as \"warning waves\" and \"MSBuild Analyzers\"\r\n```",
              "createdAt": "2024-03-18T14:43:00Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,420 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "GitHub markdown does a ToC automatically so you can skip manually maintaining it :)\r\n\r\n```suggestion\r\n```",
              "createdAt": "2024-03-18T14:45:43Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,420 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh good point!\r\nRemoving both ToCs",
              "createdAt": "2024-03-18T17:16:47Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -0,0 +1,420 @@\n+\n+# BuildCheck - Design Spec\n+\n+AKA MSBuild Analyzers\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+# Table of Contents\n+\n+- [Terminology](#terminology)\n+- [North Star / Longer-term vision](#north-star-longer-term-vision)\n+- [Scope of initial iteration](#scope-of-initial-iteration)\n+- [User Experience](#user-experience)\n+   * [Running / UX](#running-ux)\n+      + [Inbox Analyzers](#inbox-analyzers)\n+      + [Live Build](#live-build)\n+      + [Binlog Replay mode](#binlog-replay-mode)\n+   * [Configuration](#configuration)\n+      + [Sample configuration](#sample-configuration)\n+      + [User Configurable Options](#user-configurable-options)\n+         - [Enablement](#enablement)\n+         - [Severity](#severity)\n+         - [Scope of Analysis](#scope-of-analysis)\n+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)\n+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)\n+      + [Implementation](#implementation)\n+         - [Analyzer declaration](#analyzer-declaration)\n+         - [Rules declaration](#rules-declaration)\n+         - [Standardized configuration declaration](#standardized-configuration-declaration)\n+         - [Custom configuration declaration](#custom-configuration-declaration)\n+         - [Compatibility](#compatibility)\n+      + [Testing and Debugging](#testing-and-debugging)\n+      + [Packaging](#packaging)\n+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)\n+\n+\n+",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "GitHub markdown does a ToC automatically so you can skip manually maintaining it :)\r\n\r\n```suggestion\r\n```",
              "createdAt": "2024-03-18T14:46:14Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+# Table of Contents\n+\n+- [Infrastructure and Execution](#infrastructure-and-execution)\n+   * [Data Source](#data-source)\n+   * [Execution Modes](#execution-modes)\n+   * [Live Mode Hosting](#live-mode-hosting)\n+   * [Handling the Distributed Model](#handling-the-distributed-model)\n+   * [Analyzers Lifecycle](#analyzers-lifecycle)\n+- [Configuration](#configuration)\n+- [Acquisition](#acquisition)\n+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)\n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThe actual OM exposed to users will be translating/mapping/proxying the underlying MSBuild OM and hence the implementation details and actual extent of the data (whether internal or public) will be hidden.\r\n```",
              "createdAt": "2024-03-18T21:33:14Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,88 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+The actuall OM exposed to users will be translating/mapping/proxying the underlying MSBuild OM snd hence the implementation details and actual extent of the data (whether internal or public) will be hidden.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nPrerequisites: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\r\n```",
              "createdAt": "2024-03-18T21:34:19Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,88 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+The actuall OM exposed to users will be translating/mapping/proxying the underlying MSBuild OM snd hence the implementation details and actual extent of the data (whether internal or public) will be hidden.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it being an `ILogger` relevant to user buildchecks? Or is it an implementation detail, and the key is \"we get the information and we pass it to the analyzers running in the scheduler node\"?",
              "createdAt": "2024-03-18T21:36:51Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,88 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+The actuall OM exposed to users will be translating/mapping/proxying the underlying MSBuild OM snd hence the implementation details and actual extent of the data (whether internal or public) will be hidden.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some benefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable communicating information from worker nodes BuildCheck module to the entrypoint node BuildCheck module - namely:",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Correct - it's an implementation detail.\r\nBut it feels as an important detail for the dev document - it implies how we are going to obtain the data, what type (BuildEventArgs) and that they are going to be distributed in serial manner.",
              "createdAt": "2024-03-19T13:31:29Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -0,0 +1,88 @@\n+\n+# BuildCheck - Architecture and Implementation Spec\n+\n+This is an internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).\n+\n+# Areas of Ownership\n+\n+| Area     |      Owner     |\n+|----------|:-------------|\n+| PM                  | @baronfel |\n+| Advisory/Leadership | @rainersigwald |\n+| Infrastructure      | @jankrivanek |\n+| Configuration       | @f-alizada   |\n+| Custom Analyzers    | @YuliiaKovalova |\n+| Inbox Analyzers     | @ladipro |\n+| Replay Mode         | @surayya-MS |\n+| Tracing             | @maridematte |\n+| Perf Advisory       | @AR-May |\n+\n+\n+# Infrastructure and Execution\n+\n+## Data Source\n+\n+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.\n+\n+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.\n+\n+The actuall OM exposed to users will be translating/mapping/proxying the underlying MSBuild OM snd hence the implementation details and actual extent of the data (whether internal or public) will be hidden.\n+\n+## Execution Modes\n+\n+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.\n+\n+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.\n+\n+## Live Mode Hosting\n+\n+Prerequisity: [MSBuild Nodes Orchestration](../../wiki/Nodes-Orchestration.md#orchestration)\n+\n+The BuildCheck infrastructure will be prepared to be available concurrently within the `entrypoint node` as well as in the additional `worker nodes`. There are 2 reasons for this:\n+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.\n+* Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)\n+\n+## Handling the Distributed Model\n+\n+We want to get some benefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just entrypoint node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).\n+\n+How we'll internally handle the distributed model:\n+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a entrypoint node with inproc worker node as well.\n+* Entrypoint node will have an MSBuild `ILogger` registered that will enable communicating information from worker nodes BuildCheck module to the entrypoint node BuildCheck module - namely:",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}