{
  "number": 9240,
  "title": "Copy task errors when copying a non existent file on itself",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/9148\r\n\r\n### Context\r\nDuring the copy task, if the origin and destination file have the same path (are the same file), and that file does not exist, we do not get an error and the task succeeds. It was decided that an error should be thrown instead.\r\n\r\n### Changes Made\r\nIn the Copy Task, I added a check for file existence if the file paths are the same. The process now throws an error if the file does not exist.\r\n\r\n### Testing\r\nAdded a unit test for the case\r\n",
  "state": "CLOSED",
  "createdAt": "2023-09-20T12:16:58Z",
  "updatedAt": "2024-01-10T13:38:09Z",
  "closedAt": "2023-11-07T13:57:14Z",
  "mergedAt": null,
  "additions": 35,
  "deletions": 3,
  "changedFiles": 3,
  "headRefName": "8924",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "71a23f79bd24389d7d529bd5812d4f596cddf6e8",
          "message": "Removed tests using TranslateDotNet",
          "committedDate": "2023-07-12T13:51:56Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc7e14785ccc54c43004fd8f8340496884cdbfaa",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into 8924",
          "committedDate": "2023-07-12T13:52:51Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f48c7be7581a09b6cd71d5a5de53e30fe7609dd",
          "message": "Add verification for file existence",
          "committedDate": "2023-09-17T23:05:21Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "15a524593d1d53b3f9836fafebbe9ccd8c72aae1",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into 8924",
          "committedDate": "2023-09-17T23:05:27Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23ba487b925b10d839bec90b84c0acc959874701",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into 8924",
          "committedDate": "2023-09-19T08:45:07Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abc733cff04053de0bed056117afcd4c9933ffa1",
          "message": "Added unit test",
          "committedDate": "2023-09-19T22:31:07Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b334e43b45849c38fd0cc22e2b677994485c18e8",
          "message": "Added an exist condition to copy task files",
          "committedDate": "2023-09-27T00:52:06Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d8c3104bc7f3587ef3cb3f5fbff467ada5c0cfe",
          "message": "Adressed PR comment",
          "committedDate": "2023-09-27T10:14:44Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c41044fd30a89e3442a71e47791364379542691d",
          "message": "Solved merge conflict",
          "committedDate": "2023-09-27T11:26:14Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12f4295023265fe6a07f507d6e33655bd70041dc",
          "message": "Added another condition on file copy",
          "committedDate": "2023-09-27T12:29:22Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider removing comment or replace",
              "createdAt": "2023-09-25T12:25:45Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,36 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        /// <summary>",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It might not be failing for now, but can we pls add Condition for `ProjectRuntimeConfigFileName` as well",
              "createdAt": "2023-09-27T11:59:15Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -257,9 +257,9 @@\n        that reference this one. -->\n   <Target Name=\"AddRuntimeDependenciesToContent\" Condition=\" '$(TargetFrameworkIdentifier)' == '.NETCoreApp'\" BeforeTargets=\"GetCopyToOutputDirectoryItems\">\n     <ItemGroup>\n-      <ContentWithTargetPath Include=\"$(ProjectDepsFilePath)\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"$(ProjectDepsFileName)\" />\n+      <ContentWithTargetPath Include=\"$(ProjectDepsFilePath)\" Condition=\"Exists('$(ProjectDepsFilePath)')\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"$(ProjectDepsFileName)\" />\n \n-      <ContentWithTargetPath Include=\"$(ProjectRuntimeConfigFilePath)\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"$(ProjectRuntimeConfigFileName)\" />\n+      <ContentWithTargetPath Include=\"$(ProjectRuntimeConfigFilePath)\" Condition=\"Exists('$(ProjectRuntimeConfigFilePath)')\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"$(ProjectRuntimeConfigFileName)\" />\n       <ContentWithTargetPath Include=\"$(ProjectRuntimeConfigDevFilePath)\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"$([System.IO.Path]::GetFileName('$(ProjectRuntimeConfigDevFilePath)'))\" />",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably as well assert on presence of 'MSB3030' (\"Could not copy the file \"{0}\" because it was not found.\")",
              "createdAt": "2023-10-05T12:51:31Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)\n+        {\n+            string temp = Path.GetTempPath();\n+            string file = Path.Combine(temp, \"FileThatDoesNotExist\");\n+\n+            var engine = new MockEngine(_testOutputHelper);\n+            var t = new Copy\n+            {\n+                RetryDelayMilliseconds = 1, // speed up tests!\n+                BuildEngine = engine,\n+                SourceFiles = new ITaskItem[] { new TaskItem(file) },\n+                DestinationFiles = new ITaskItem[] { new TaskItem(file) },\n+                SkipUnchangedFiles = false,\n+                UseHardlinksIfPossible = isUseHardLinks,\n+                UseSymboliclinksIfPossible = isUseSymbolicLinks,\n+            };\n+\n+            bool success = t.Execute();\n+\n+            Assert.False(success);\n+\n+            ((MockEngine)t.BuildEngine).AssertLogDoesntContain(\"MSB3026\"); // Didn't do retries, nothing to do",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "would a hypothetical `AssertLogDoesntContainAnyMSBCodes()` be useful",
              "createdAt": "2023-10-06T22:25:30Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)\n+        {\n+            string temp = Path.GetTempPath();\n+            string file = Path.Combine(temp, \"FileThatDoesNotExist\");\n+\n+            var engine = new MockEngine(_testOutputHelper);\n+            var t = new Copy\n+            {\n+                RetryDelayMilliseconds = 1, // speed up tests!\n+                BuildEngine = engine,\n+                SourceFiles = new ITaskItem[] { new TaskItem(file) },\n+                DestinationFiles = new ITaskItem[] { new TaskItem(file) },\n+                SkipUnchangedFiles = false,\n+                UseHardlinksIfPossible = isUseHardLinks,\n+                UseSymboliclinksIfPossible = isUseSymbolicLinks,\n+            };\n+\n+            bool success = t.Execute();\n+\n+            Assert.False(success);\n+\n+            ((MockEngine)t.BuildEngine).AssertLogDoesntContain(\"MSB3026\"); // Didn't do retries, nothing to do",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "`AssertLogDoesntContainAnyMSBCodes(List<string>? except = null)` or `AssertLogContainsOnlyMSBCodes(List<string>? allowedCodes = null)`",
              "createdAt": "2023-10-09T09:45:25Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)\n+        {\n+            string temp = Path.GetTempPath();\n+            string file = Path.Combine(temp, \"FileThatDoesNotExist\");\n+\n+            var engine = new MockEngine(_testOutputHelper);\n+            var t = new Copy\n+            {\n+                RetryDelayMilliseconds = 1, // speed up tests!\n+                BuildEngine = engine,\n+                SourceFiles = new ITaskItem[] { new TaskItem(file) },\n+                DestinationFiles = new ITaskItem[] { new TaskItem(file) },\n+                SkipUnchangedFiles = false,\n+                UseHardlinksIfPossible = isUseHardLinks,\n+                UseSymboliclinksIfPossible = isUseSymbolicLinks,\n+            };\n+\n+            bool success = t.Execute();\n+\n+            Assert.False(success);\n+\n+            ((MockEngine)t.BuildEngine).AssertLogDoesntContain(\"MSB3026\"); // Didn't do retries, nothing to do",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Isn't part of the point of this that MSB3030 _should_ show up?",
              "createdAt": "2023-10-11T21:18:42Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)\n+        {\n+            string temp = Path.GetTempPath();\n+            string file = Path.Combine(temp, \"FileThatDoesNotExist\");\n+\n+            var engine = new MockEngine(_testOutputHelper);\n+            var t = new Copy\n+            {\n+                RetryDelayMilliseconds = 1, // speed up tests!\n+                BuildEngine = engine,\n+                SourceFiles = new ITaskItem[] { new TaskItem(file) },\n+                DestinationFiles = new ITaskItem[] { new TaskItem(file) },\n+                SkipUnchangedFiles = false,\n+                UseHardlinksIfPossible = isUseHardLinks,\n+                UseSymboliclinksIfPossible = isUseSymbolicLinks,\n+            };\n+\n+            bool success = t.Execute();\n+\n+            Assert.False(success);\n+\n+            ((MockEngine)t.BuildEngine).AssertLogDoesntContain(\"MSB3026\"); // Didn't do retries, nothing to do",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes - I meant we should assert that the code *is* present.",
              "createdAt": "2023-10-12T09:01:53Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)\n+        {\n+            string temp = Path.GetTempPath();\n+            string file = Path.Combine(temp, \"FileThatDoesNotExist\");\n+\n+            var engine = new MockEngine(_testOutputHelper);\n+            var t = new Copy\n+            {\n+                RetryDelayMilliseconds = 1, // speed up tests!\n+                BuildEngine = engine,\n+                SourceFiles = new ITaskItem[] { new TaskItem(file) },\n+                DestinationFiles = new ITaskItem[] { new TaskItem(file) },\n+                SkipUnchangedFiles = false,\n+                UseHardlinksIfPossible = isUseHardLinks,\n+                UseSymboliclinksIfPossible = isUseSymbolicLinks,\n+            };\n+\n+            bool success = t.Execute();\n+\n+            Assert.False(success);\n+\n+            ((MockEngine)t.BuildEngine).AssertLogDoesntContain(\"MSB3026\"); // Didn't do retries, nothing to do",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This behavior doesn't care if you're using hard links or symlinks or neither, right? Why do you need to run it four times?\r\n\r\nAlso:\r\n```suggestion\r\n        public void CopyNonexistentFileOntoItselfThrows(bool isUseHardLinks, bool isUseSymbolicLinks)\r\n```",
              "createdAt": "2023-10-06T21:19:53Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -1406,6 +1406,32 @@ public void CopyFileOnItself2(bool isUseHardLinks, bool isUseSymbolicLinks)\n             }\n         }\n \n+        [Theory]\n+        [MemberData(nameof(GetHardLinksSymLinks))]\n+        public void CopyFileItselfNonExistentFile(bool isUseHardLinks, bool isUseSymbolicLinks)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}