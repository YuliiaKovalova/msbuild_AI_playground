{
  "number": 10272,
  "title": "Nullable annotations for ErrorUtilities",
  "body": "This will help with using these from new code that's nullable-\naware. The biggest helpful bit is the `[NotNull]` ones that let the\ncompiler know to assume that parameter is non-null in the rest\nof the method, which should eliminate the need for some `!`s\nafter calling `VerifyThrowArgumentNull(whatever)`.\n",
  "state": "MERGED",
  "createdAt": "2024-06-19T20:35:06Z",
  "updatedAt": "2024-06-20T15:30:32Z",
  "closedAt": "2024-06-20T15:30:32Z",
  "mergedAt": "2024-06-20T15:30:32Z",
  "additions": 71,
  "deletions": 103,
  "changedFiles": 4,
  "headRefName": "nullable-errorutilities",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "157805bc8e3a0f38ed62b7d7eda1ac43a3bfa82f",
          "message": "Framework copy too",
          "committedDate": "2024-06-19T21:04:38Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@surayya-MS I decided to do this after seeing some of the silliness you had to do in #10127.",
        "createdAt": "2024-06-19T20:36:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-06-20T14:08:27Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-06-20T14:08:37Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "These tests were the only uses of the method so I deleted them and the method.",
              "createdAt": "2024-06-19T21:10:06Z",
              "path": "src/Shared/UnitTests/ErrorUtilities_Tests.cs",
              "diffHunk": "@@ -70,38 +70,5 @@ public void VerifyThrow4True()\n             // This shouldn't throw.\n             ErrorUtilities.VerifyThrow(true, \"{0}{1}{2}{3}\", \"a\", \"b\", \"c\", \"d\");\n         }\n-\n-        [Fact]\n-        public void VerifyThrowArgumentArraysSameLength1()\n-        {\n-            Assert.Throws<ArgumentNullException>(() =>\n-            {\n-                ErrorUtilities.VerifyThrowArgumentArraysSameLength(null, new string[1], string.Empty, string.Empty);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Curiosity: Why add the `DoesNotReturn` attribute? What is the difference?",
              "createdAt": "2024-06-20T13:48:27Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -242,15 +244,16 @@ internal static void VerifyThrow(bool condition, string unformattedMessage, obje\n         /// </summary>\n         /// <param name=\"resourceName\">Resource to use in the exception</param>\n         /// <param name=\"args\">Formatting args.</param>\n-        internal static void ThrowInvalidOperation(string resourceName, params object[] args)\n+        [DoesNotReturn]",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "This allows the compiler to do analysis where given\r\n\r\n```C#\r\nif (someObject is null)\r\n{\r\n    ThrowInvalidOperation(\"foo\");\r\n}\r\n\r\nsomeObject.SomeMethod();\r\n```\r\n\r\nIt knows that `someObject` is not null in that last line, because if it was this method would have thrown.",
              "createdAt": "2024-06-20T14:13:31Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -242,15 +244,16 @@ internal static void VerifyThrow(bool condition, string unformattedMessage, obje\n         /// </summary>\n         /// <param name=\"resourceName\">Resource to use in the exception</param>\n         /// <param name=\"args\">Formatting args.</param>\n-        internal static void ThrowInvalidOperation(string resourceName, params object[] args)\n+        [DoesNotReturn]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}