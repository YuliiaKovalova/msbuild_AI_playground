{
  "number": 7040,
  "title": "Improve globbing performance",
  "body": "### Context\r\n\r\nTraces of devenv during build showed a lot of CPS activity related to glob evaluation. Investigation of the code showed a few opportunities to eliminate some allocations and reduce work during construction and matching.\r\n\r\n### Changes Made\r\n\r\n- Eliminate allocation of `CompositeGlob` wrapper for zero or one child (seems very common)\r\n- Eliminate enumerator allocation in `CompositeGlob.IsMatch`\r\n- Eliminate array allocation when constructing `CompositeGlob`\r\n- Eliminate array allocation when constructing `MSBuildGlobWithGaps`\r\n- Fix `CompositeGlob(IEnumerable<>)` ctor optimisation (missing `else` block)\r\n- Make struct readonly\r\n- Use pattern matching\r\n- Typos & documentation\r\n\r\n### Testing\r\n\r\n- Unit tests\r\n\r\n### Notes\r\n\r\nThis is probably easiest to review one commit at a time.",
  "state": "MERGED",
  "createdAt": "2021-11-16T01:54:50Z",
  "updatedAt": "2021-11-19T03:52:47Z",
  "closedAt": "2021-11-16T23:58:56Z",
  "mergedAt": "2021-11-16T23:58:56Z",
  "additions": 202,
  "deletions": 51,
  "changedFiles": 14,
  "headRefName": "dev/drnoakes/globbing-perf",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bc56e8d602f5572bafbbbd26d4e6eafd02d6683d",
          "message": "Use pattern matching",
          "committedDate": "2021-11-15T23:22:09Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f181bae5dbc4a6841fb2f89bd3a1c45058b5500",
          "message": "Add missing 'else'",
          "committedDate": "2021-11-15T23:22:09Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "79c45ab5f24ca8208eaf03ba1369a55d2e23d5b8",
          "message": "Eliminate allocation in CompositeGlob.IsMatch\n\nImmutableArray<> has a non-allocating enumerator which is used within ImmutableArrayExtensions.Any. By changing the declared type from IEnumerable<> to ImmutableArray<> the non-allocating extension method is used.",
          "committedDate": "2021-11-16T01:50:11Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c456c28a1c46e485ed41b1342fcfab7f0f3f73b",
          "message": "Use readonly struct",
          "committedDate": "2021-11-16T01:50:11Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1cd10137b3bd2bf993e69b3b42a09e326d5ffbeb",
          "message": "Fix typos",
          "committedDate": "2021-11-16T01:50:11Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6cfcea49eafd5b9a187b50e9784d3504ca95aa05",
          "message": "Avoid params array creation\n\nThe only use of the params constructor (outside of test code) passed two args. By adding a dedicated constructor of this arity, all temporary allocations are eliminated.",
          "committedDate": "2021-11-16T01:50:11Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b95c45d1f3f1ce9eeb43afaf35be75654ac7ebef",
          "message": "Avoid redundant wrapper glob instances\n\nAdds a `CompositeGlob.Create` factory method that can avoid allocating redundant `CompositeGlob` instances in certain cases:\n\n- When only a single child glob exists, returns it directly. This is the most common case, and where the bulk of benefit here is seen.\n- When no child glob exists, return a singleton instance of `NeverMatchingGlob`.\n\nRemoving these redundant layers in glob hierarchies means fewer allocations during construction, and less pointer chasing and fewer virtual calls during matching.",
          "committedDate": "2021-11-16T01:50:12Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50b74d225e9a3b64049a6b53caf8b752916a2f29",
          "message": "Make code clearer via switch expression",
          "committedDate": "2021-11-16T01:50:12Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df6ab012f68d4070917b56dd1b6e6f66e6844aae",
          "message": "Add API doc to CompositeGlob class",
          "committedDate": "2021-11-16T01:50:12Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "536145c36c827fe7a5dfbc2ed4bdc4a3a8b8a743",
          "message": "Avoid params array allocation\n\nAll internal constructors of `MSBuildGlobWithGaps` that passed `gaps` had a single instance. The params facility was essentially unused and creating avoidable allocations.\n\nThis commit adds an overload that prevents these allocations, and avoids calling into `CompositeGlob`, further reducing the runtime cost of this constructor.",
          "committedDate": "2021-11-16T01:50:13Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d95b42482425e1e6a5e87cebdc251139eaa3a7a1",
          "message": "Optimise glob construction when single item\n\nIn cases where a single item exists, avoid allocation of an enumerable and enumerator and construct the glob directly.",
          "committedDate": "2021-11-16T01:50:13Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "No, I don't. The trace is from someone else, so I wouldn't have an apples-to-apples comparison. I can create one if necessary. Is there some kind of automation that can produce this during CI? That would be handy.",
        "createdAt": "2021-11-16T12:47:01Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "I don't think there's relevant automation unfortunately. It's definitely not necessary, just a nice-to-have.",
        "createdAt": "2021-11-16T13:29:32Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Making something readonly probably counts as a breaking change?\r\n\r\nMy understanding is that making a struct `readonly` is not a breaking change, so long as none of the members themselves are changed. The previous type was immutable. I just added the modifier to the type.\r\n\r\nFrom https://blog.paranoidcoding.com/2019/03/27/readonly-struct-breaking-change.html\r\n\r\n> One question that frequently comes up with readonly struct though is whether or not this is a breaking change? The short answer is no. This is a very safe change to make. Adding readonly is not a source breaking change for consumers: it is still recognized by older compilers, it doesn\u2019t cause overload resolution changes, it can be used in other struct types, etc \u2026 The only effect it has is that it allows the compiler to elide defensive copies in a number of cases.",
        "createdAt": "2021-11-16T22:38:49Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Sounds good to me!",
        "createdAt": "2021-11-16T23:37:48Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f ",
              "createdAt": "2021-11-16T16:40:39Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2604,17 +2604,13 @@ private GlobResult BuildGlobResultFromIncludeItem(ProjectItemElement itemElement\n \n             private static IMSBuildGlob CreateIncludeGlobWithGaps(IMSBuildGlob includeGlob, IMSBuildGlob excludeGlob, IMSBuildGlob removeGlob)\n             {\n-                if (excludeGlob == null)\n+                return (excludeGlob, removeGlob) switch",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ToImmutableArray already does that check for you: https://source.dot.net/#System.Collections.Immutable/System/Collections/Immutable/ImmutableArray.cs,7ec519665e45a686,references",
              "createdAt": "2021-11-17T21:00:34Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -5,33 +5,30 @@\n using System.Collections.Generic;\n using System.Collections.Immutable;\n using System.Linq;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.Globbing\n {\n     /// <summary>\n-    ///     A Composite glob\n+    ///     A composite glob that returns a match for an input if any of its\n+    ///     inner globs match the input (disjunction).\n     /// </summary>\n     public class CompositeGlob : IMSBuildGlob\n     {\n+        private readonly ImmutableArray<IMSBuildGlob> _globs;\n+\n         /// <summary>\n         /// The direct children of this composite\n         /// </summary>\n-        public IEnumerable<IMSBuildGlob> Globs { get; }\n+        public IEnumerable<IMSBuildGlob> Globs => _globs;\n \n         /// <summary>\n         ///     Constructor\n         /// </summary>\n         /// <param name=\"globs\">Children globs. Input gets shallow cloned</param>\n         public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n-        {\n-            // ImmutableArray also does this check, but copied it here just in case they remove it\n-            if (globs is ImmutableArray<IMSBuildGlob>)\n-            {\n-                Globs = (ImmutableArray<IMSBuildGlob>)globs;\n-            }\n-\n-            Globs = globs.ToImmutableArray();\n-        }\n+            : this(globs is ImmutableArray<IMSBuildGlob> immutableGlobs ? immutableGlobs : globs.ToImmutableArray())",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Thanks. The old code called this out but explained it as \"in case they remove that\". Then again the old code's attempt to optimise didn't work anyway. I'll file a follow up PR that removes it.\r\n\r\nThat said, there's no code in this repo that uses this overload any more. I would remove it, but it's public.",
              "createdAt": "2021-11-19T03:03:24Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -5,33 +5,30 @@\n using System.Collections.Generic;\n using System.Collections.Immutable;\n using System.Linq;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.Globbing\n {\n     /// <summary>\n-    ///     A Composite glob\n+    ///     A composite glob that returns a match for an input if any of its\n+    ///     inner globs match the input (disjunction).\n     /// </summary>\n     public class CompositeGlob : IMSBuildGlob\n     {\n+        private readonly ImmutableArray<IMSBuildGlob> _globs;\n+\n         /// <summary>\n         /// The direct children of this composite\n         /// </summary>\n-        public IEnumerable<IMSBuildGlob> Globs { get; }\n+        public IEnumerable<IMSBuildGlob> Globs => _globs;\n \n         /// <summary>\n         ///     Constructor\n         /// </summary>\n         /// <param name=\"globs\">Children globs. Input gets shallow cloned</param>\n         public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n-        {\n-            // ImmutableArray also does this check, but copied it here just in case they remove it\n-            if (globs is ImmutableArray<IMSBuildGlob>)\n-            {\n-                Globs = (ImmutableArray<IMSBuildGlob>)globs;\n-            }\n-\n-            Globs = globs.ToImmutableArray();\n-        }\n+            : this(globs is ImmutableArray<IMSBuildGlob> immutableGlobs ? immutableGlobs : globs.ToImmutableArray())",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ImmutableArray.Create(globs) would be the API to use here, as it avoids all the runtime checks for interfaces of the `IEnumerable<T>` overload",
              "createdAt": "2021-11-17T21:05:26Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -40,13 +37,114 @@ public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n         public CompositeGlob(params IMSBuildGlob[] globs) : this(globs.ToImmutableArray())",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Great point, and thanks &mdash; I'll use this in future. Again, I'll file a follow up PR that changes this.\r\n\r\nThis constructor is only used in test code in this repository. I would remove it, but it's public.",
              "createdAt": "2021-11-19T03:04:24Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -40,13 +37,114 @@ public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n         public CompositeGlob(params IMSBuildGlob[] globs) : this(globs.ToImmutableArray())",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is probably called often, wouldn't it make sense to avoid allocations of the closure here?",
              "createdAt": "2021-11-17T21:06:16Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -40,13 +37,114 @@ public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n         public CompositeGlob(params IMSBuildGlob[] globs) : this(globs.ToImmutableArray())\n         {}\n \n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"glob1\">First child glob.</param>\n+        /// <param name=\"glob2\">Second child glob.</param>\n+        internal CompositeGlob(IMSBuildGlob glob1, IMSBuildGlob glob2)\n+            : this(ImmutableArray.Create(glob1, glob2))\n+        {}\n+\n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"globs\">Children globs.</param>\n+        private CompositeGlob(ImmutableArray<IMSBuildGlob> globs)\n+        {\n+            _globs = globs;\n+        }\n+\n         /// <inheritdoc />\n         public bool IsMatch(string stringToMatch)\n         {\n             // Threadpools are a scarce resource in Visual Studio, do not use them.\n             //return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));\n \n-            return Globs.Any(g => g.IsMatch(stringToMatch));\n+            return _globs.Any(g => g.IsMatch(stringToMatch));",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Absolutely.",
              "createdAt": "2021-11-19T03:04:57Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -40,13 +37,114 @@ public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n         public CompositeGlob(params IMSBuildGlob[] globs) : this(globs.ToImmutableArray())\n         {}\n \n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"glob1\">First child glob.</param>\n+        /// <param name=\"glob2\">Second child glob.</param>\n+        internal CompositeGlob(IMSBuildGlob glob1, IMSBuildGlob glob2)\n+            : this(ImmutableArray.Create(glob1, glob2))\n+        {}\n+\n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"globs\">Children globs.</param>\n+        private CompositeGlob(ImmutableArray<IMSBuildGlob> globs)\n+        {\n+            _globs = globs;\n+        }\n+\n         /// <inheritdoc />\n         public bool IsMatch(string stringToMatch)\n         {\n             // Threadpools are a scarce resource in Visual Studio, do not use them.\n             //return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));\n \n-            return Globs.Any(g => g.IsMatch(stringToMatch));\n+            return _globs.Any(g => g.IsMatch(stringToMatch));",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "#7052",
              "createdAt": "2021-11-19T03:52:47Z",
              "path": "src/Build/Globbing/CompositeGlob.cs",
              "diffHunk": "@@ -40,13 +37,114 @@ public CompositeGlob(IEnumerable<IMSBuildGlob> globs)\n         public CompositeGlob(params IMSBuildGlob[] globs) : this(globs.ToImmutableArray())\n         {}\n \n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"glob1\">First child glob.</param>\n+        /// <param name=\"glob2\">Second child glob.</param>\n+        internal CompositeGlob(IMSBuildGlob glob1, IMSBuildGlob glob2)\n+            : this(ImmutableArray.Create(glob1, glob2))\n+        {}\n+\n+        /// <summary>\n+        ///     Constructor\n+        /// </summary>\n+        /// <param name=\"globs\">Children globs.</param>\n+        private CompositeGlob(ImmutableArray<IMSBuildGlob> globs)\n+        {\n+            _globs = globs;\n+        }\n+\n         /// <inheritdoc />\n         public bool IsMatch(string stringToMatch)\n         {\n             // Threadpools are a scarce resource in Visual Studio, do not use them.\n             //return Globs.AsParallel().Any(g => g.IsMatch(stringToMatch));\n \n-            return Globs.Any(g => g.IsMatch(stringToMatch));\n+            return _globs.Any(g => g.IsMatch(stringToMatch));",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}