{
  "number": 11049,
  "title": "Buildcheck - ProjectImported OM fixes",
  "body": "Fixes #10960, #10935\r\n\r\n### Context\r\n * ProjectImported OM wasn't properly propagated if binlog wasn't specified\r\n * ProjectImported OM should only be handled in single threaded context of main node logger\r\n\r\n### Testing\r\nPreexisting tests\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-28T16:49:58Z",
  "updatedAt": "2024-12-09T12:40:24Z",
  "closedAt": "2024-12-09T12:40:23Z",
  "mergedAt": "2024-12-09T12:40:23Z",
  "additions": 30,
  "deletions": 23,
  "changedFiles": 4,
  "headRefName": "buildcheck/importsargs-fixes",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f1096adfef74c6ec4d9149c64e0f258db1c0ece5",
          "message": "Fix the ProjectImported event concurrency model",
          "committedDate": "2024-11-28T16:31:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7377346c631badff948ece6664b278047433f2e",
          "message": "Make sure projectimported is properly propagated to buildcheck api",
          "committedDate": "2024-11-28T16:32:19Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33f46f0533aeb8aaa4574c6d23354deea734974b",
          "message": "Remove redundant check",
          "committedDate": "2024-11-28T16:41:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3ac17906d02c110bfe75ef0be7547874b6e4246",
          "message": "Remove double record",
          "committedDate": "2024-11-28T16:52:16Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4fe774c228763e67f3df12e374a0d3e2bed6d8ef",
          "message": "Clarify comments",
          "committedDate": "2024-12-05T16:37:52Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why are we removing the `if (importedProjects.Contains(originalProjectFile))` check please?\r\nIf we always add to the imported projects, we don't need the originalProjectsFile and the method almost loses it's meaning.",
              "createdAt": "2024-12-03T12:24:47Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -620,15 +628,10 @@ public void StartProjectRequest(ICheckContext checkContext, string projectFullPa\n         /// <param name=\"newImportedProjectFile\">The path of the newly imported project file.</param>\n         private void PropagateImport(int evaluationId, string originalProjectFile, string newImportedProjectFile)\n         {\n-            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId, out HashSet<string>? importedProjects))\n+            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId,\n+                    out HashSet<string>? importedProjects))\n             {\n-                lock (importedProjects)\n-                {\n-                    if (importedProjects.Contains(originalProjectFile))\n-                    {\n-                        importedProjects.Add(newImportedProjectFile);\n-                    }\n-                }\n+                importedProjects.Add(newImportedProjectFile);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The method had just quite confusing pre-existing naming and comment - I've fixed that.\r\n\r\nIn short - we are just adding to a lookup of all imported logic, that is keyed by the project file that is importing the logic",
              "createdAt": "2024-12-05T16:32:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -620,15 +628,10 @@ public void StartProjectRequest(ICheckContext checkContext, string projectFullPa\n         /// <param name=\"newImportedProjectFile\">The path of the newly imported project file.</param>\n         private void PropagateImport(int evaluationId, string originalProjectFile, string newImportedProjectFile)\n         {\n-            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId, out HashSet<string>? importedProjects))\n+            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId,\n+                    out HashSet<string>? importedProjects))\n             {\n-                lock (importedProjects)\n-                {\n-                    if (importedProjects.Contains(originalProjectFile))\n-                    {\n-                        importedProjects.Add(newImportedProjectFile);\n-                    }\n-                }\n+                importedProjects.Add(newImportedProjectFile);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I couldn't find my answer in the infrastructure so I'm sorry but I will go ahead and ask.\r\nWhere do we guarantee that our events are synchronous please? Can't the logger get hit by two separate events, that will require handling at the same time? Or are these enqueued so the synchronization is guaranteed?\r\n(The core of my question is that I see event, I think async. So this sentence goes against my intuition.)",
              "createdAt": "2024-12-03T12:43:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -503,8 +501,8 @@ public void FinalizeProcessing(LoggingContext loggingContext)\n \n         private readonly ConcurrentDictionary<int, string> _projectsByInstanceId = new();\n         private readonly ConcurrentDictionary<int, string> _projectsByEvaluationId = new();\n-\n-        private readonly ConcurrentDictionary<int, HashSet<string>> _deferredProjectEvalIdToImportedProjects = new();\n+        // We are receiving project imported data only from the logger events - hence always in a single threaded context",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Good question indeed!\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/wiki/Logging-Internals.md -> ProcessLoggingEvent\r\n\r\n```\r\nEnsures isolated delivery - as in synchronous mode it locks, in asynchronous mode it enqueues and delivers from the queue via single thread\r\n```",
              "createdAt": "2024-12-05T16:34:11Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -503,8 +501,8 @@ public void FinalizeProcessing(LoggingContext loggingContext)\n \n         private readonly ConcurrentDictionary<int, string> _projectsByInstanceId = new();\n         private readonly ConcurrentDictionary<int, string> _projectsByEvaluationId = new();\n-\n-        private readonly ConcurrentDictionary<int, HashSet<string>> _deferredProjectEvalIdToImportedProjects = new();\n+        // We are receiving project imported data only from the logger events - hence always in a single threaded context",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Added to the comment.",
              "createdAt": "2024-12-05T16:37:28Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -503,8 +501,8 @@ public void FinalizeProcessing(LoggingContext loggingContext)\n \n         private readonly ConcurrentDictionary<int, string> _projectsByInstanceId = new();\n         private readonly ConcurrentDictionary<int, string> _projectsByEvaluationId = new();\n-\n-        private readonly ConcurrentDictionary<int, HashSet<string>> _deferredProjectEvalIdToImportedProjects = new();\n+        // We are receiving project imported data only from the logger events - hence always in a single threaded context",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why are the two `ProcessProjectEvaluationStarted` functions kept here? I see on the `IBuildCheckManager` that only the new one is on the interface.",
              "createdAt": "2024-12-03T12:58:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -571,12 +569,22 @@ public void ProjectFirstEncountered(\n             SetupChecksForNewProject(projectFullPath, checkContext);\n         }\n \n+        public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Good question! The `BuildCheckManagerProvider` implements `IBuildCheckManager`, but as well `IBuildEngineDataRouter` - the two methods come from the to interfaces -> later is for 'worker node inproc' events delivery, former for 'via logging service' events delivery",
              "createdAt": "2024-12-05T16:36:57Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -571,12 +569,22 @@ public void ProjectFirstEncountered(\n             SetupChecksForNewProject(projectFullPath, checkContext);\n         }\n \n+        public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same as befor, do we need this extra function when it does not exist in the interface.",
              "createdAt": "2024-12-03T13:01:31Z",
              "path": "src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs",
              "diffHunk": "@@ -61,6 +61,10 @@ public void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, I\n     }\n \n     public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Same as above",
              "createdAt": "2024-12-05T16:37:11Z",
              "path": "src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs",
              "diffHunk": "@@ -61,6 +61,10 @@ public void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, I\n     }\n \n     public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}