{
  "number": 6468,
  "title": "Make cache queries parallel",
  "body": "Can review the commits individually.  Ignore whitespace helps.\r\n\r\n### Context\r\nThe project cache was being queried serially. Oops.\r\nThis is because the monolithic BuildManager._syncLock was being held during the cache query, thus serializing all access.\r\n\r\n### Changes Made\r\nImplements the 2nd option from the design doc: https://gist.github.com/cdmihai/0955cb217b2cbd66e18c89b20bf68319#2-reuse-how-the-buildmanager-offloads-parallel-work-to-build-nodes\r\n\r\n- Reverted code of ExecuteSubmission to what it was before project cache plugins.\r\n- Changed ExecuteSubmission to either issue a cache request or a build request (until now it only issues build requests)\r\n- The cache request is sent to the ProjectCacheService which submits it to the thread pool. This achieves parallelization of cache requests\r\n- Each cache request, on its own thread:\r\n  - evaluates the project if necessary\r\n  - does the cache query\r\n- When a cache request finishes in the ProjectCacheService it is posted back on the BuildManager work queue thread and is handled by either skipping the build or doing a real build.\r\n\r\nDesign time builds were a pain to get right this time. Previously design time builds were easy to deal with because the BuildManager detected them early enough. Now they get detected later in the project cache service. The build manager detects this and shuts the cache service off when design time builds are detected.\r\n\r\n### Testing\r\nAdded a parallel stress test. This should be a good test to both ensure the cache is queried in parallel and to stress test the concurrency in the engine.\r\n\r\n### Risk assessment\r\nThis should make the non project cache logic less risky than it was before, since I took the project cache logic out of BuildManager and moved it to the ProjectCacheService.",
  "state": "MERGED",
  "createdAt": "2021-05-20T16:31:43Z",
  "updatedAt": "2021-06-02T08:16:27Z",
  "closedAt": "2021-06-01T21:26:53Z",
  "mergedAt": "2021-06-01T21:26:53Z",
  "additions": 791,
  "deletions": 349,
  "changedFiles": 6,
  "headRefName": "parallel_cache_queries",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7d9f0c3413d4a7e69713cf77afc0ac14f5c550bb",
          "message": "Check for serialized run",
          "committedDate": "2021-05-27T21:12:12Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5859985bba254cc5994a90369749a227d04e7118",
          "message": "Revert ExecuteSubmission prior to project cache introduction",
          "committedDate": "2021-05-27T21:12:12Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25604fb0479780acc6e7e65f831d5fe667576018",
          "message": "Extract out common code",
          "committedDate": "2021-05-27T21:12:12Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c624bdb48765fa8f61204d560dcbcaf33c1941c",
          "message": "BuildManager offloads work to ProjectCacheService threads",
          "committedDate": "2021-05-27T21:12:12Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da5e2e525450c0b47a141222fd264cf84f2334f2",
          "message": "Handle design time builds",
          "committedDate": "2021-05-27T21:13:45Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab2c28278f18079e0738de36b5a9453ba48c8337",
          "message": "Add build request",
          "committedDate": "2021-05-27T21:13:48Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "820545cb246aba0d1d526f6f486d9b907dfec965",
          "message": "Disable test that disables the inproc node",
          "committedDate": "2021-05-28T01:27:19Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1166c52d41c8a9c64e8e8826e52e641f7837c7f",
          "message": "Add comment",
          "committedDate": "2021-06-01T03:01:49Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e29c8cb23b0a1aab4a435fb7f97e8680ec129816",
          "message": "Replace non-deterministic test with a test that hangs when the cache is not queried in parallel",
          "committedDate": "2021-06-01T03:04:49Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2021-06-01T16:46:04Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-06-01T16:46:14Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems like it could be flaky. Odds of getting them back in order by random chance seem small but it's possible right?",
              "createdAt": "2021-05-28T16:39:16Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -1149,6 +1163,54 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()\n             StringShouldContainSubstring(logger.FullLog, $\"{nameof(AssemblyMockCache)}: EndBuildAsync\", expectedOccurrences: 1);\n         }\n \n+        [Theory]\n+        [InlineData(false, false)]\n+        [InlineData(true, true)]\n+        public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousLogging, bool disableInprocNode)\n+        {\n+            var referenceNumbers = Enumerable.Range(2, NativeMethodsShared.GetLogicalCoreCount() * 2).ToArray();\n+\n+            var testData = new GraphCacheResponse(\n+                new Dictionary<int, int[]>\n+                {\n+                    {1, referenceNumbers}\n+                },\n+                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())\n+            );\n+\n+            var graph = testData.CreateGraph(_env);\n+            var cache = new InstanceMockCache(testData, TimeSpan.FromMilliseconds(50));\n+\n+            using var buildSession = new Helpers.BuildManagerSession(_env, new BuildParameters()\n+            {\n+                MaxNodeCount = NativeMethodsShared.GetLogicalCoreCount(),\n+                ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(\n+                    cache,\n+                    entryPoints: null,\n+                    graph),\n+                UseSynchronousLogging = useSynchronousLogging,\n+                DisableInProcNode = disableInprocNode\n+            });\n+\n+            var graphResult = buildSession.BuildGraph(graph);\n+\n+            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+            cache.QueryStartStops.Count.ShouldBe(graph.ProjectNodes.Count * 2);\n+\n+            // Iterate through the ordered list of cache query starts and stops and verify they are out of order.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, there is a chance they will all be in order, but I think it's so small we won't see it in practice. However, why take the chance? :) I'll look into rewriting the test to use a new mock cache implementation that delays responses until multiple threads ping it.\r\n\r\nOTOH I'd still keep this as a stress test which just asserts successful termination to help us detect concurrency issues.",
              "createdAt": "2021-05-31T21:31:30Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -1149,6 +1163,54 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()\n             StringShouldContainSubstring(logger.FullLog, $\"{nameof(AssemblyMockCache)}: EndBuildAsync\", expectedOccurrences: 1);\n         }\n \n+        [Theory]\n+        [InlineData(false, false)]\n+        [InlineData(true, true)]\n+        public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousLogging, bool disableInprocNode)\n+        {\n+            var referenceNumbers = Enumerable.Range(2, NativeMethodsShared.GetLogicalCoreCount() * 2).ToArray();\n+\n+            var testData = new GraphCacheResponse(\n+                new Dictionary<int, int[]>\n+                {\n+                    {1, referenceNumbers}\n+                },\n+                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())\n+            );\n+\n+            var graph = testData.CreateGraph(_env);\n+            var cache = new InstanceMockCache(testData, TimeSpan.FromMilliseconds(50));\n+\n+            using var buildSession = new Helpers.BuildManagerSession(_env, new BuildParameters()\n+            {\n+                MaxNodeCount = NativeMethodsShared.GetLogicalCoreCount(),\n+                ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(\n+                    cache,\n+                    entryPoints: null,\n+                    graph),\n+                UseSynchronousLogging = useSynchronousLogging,\n+                DisableInProcNode = disableInprocNode\n+            });\n+\n+            var graphResult = buildSession.BuildGraph(graph);\n+\n+            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+            cache.QueryStartStops.Count.ShouldBe(graph.ProjectNodes.Count * 2);\n+\n+            // Iterate through the ordered list of cache query starts and stops and verify they are out of order.",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "@rainersigwald I replaced the potentially non-deterministic test with a test that hangs if the build manager queries the cache sequentially. Not sure which option is better, probably the hanging one because it won't hang as long as the code does not regress :)",
              "createdAt": "2021-06-01T03:06:33Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -1149,6 +1163,54 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()\n             StringShouldContainSubstring(logger.FullLog, $\"{nameof(AssemblyMockCache)}: EndBuildAsync\", expectedOccurrences: 1);\n         }\n \n+        [Theory]\n+        [InlineData(false, false)]\n+        [InlineData(true, true)]\n+        public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousLogging, bool disableInprocNode)\n+        {\n+            var referenceNumbers = Enumerable.Range(2, NativeMethodsShared.GetLogicalCoreCount() * 2).ToArray();\n+\n+            var testData = new GraphCacheResponse(\n+                new Dictionary<int, int[]>\n+                {\n+                    {1, referenceNumbers}\n+                },\n+                referenceNumbers.ToDictionary(k => k, k => GraphCacheResponse.SuccessfulProxyTargetResult())\n+            );\n+\n+            var graph = testData.CreateGraph(_env);\n+            var cache = new InstanceMockCache(testData, TimeSpan.FromMilliseconds(50));\n+\n+            using var buildSession = new Helpers.BuildManagerSession(_env, new BuildParameters()\n+            {\n+                MaxNodeCount = NativeMethodsShared.GetLogicalCoreCount(),\n+                ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(\n+                    cache,\n+                    entryPoints: null,\n+                    graph),\n+                UseSynchronousLogging = useSynchronousLogging,\n+                DisableInProcNode = disableInprocNode\n+            });\n+\n+            var graphResult = buildSession.BuildGraph(graph);\n+\n+            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+            cache.QueryStartStops.Count.ShouldBe(graph.ProjectNodes.Count * 2);\n+\n+            // Iterate through the ordered list of cache query starts and stops and verify they are out of order.",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did this move in addition to being extracted?",
              "createdAt": "2021-05-28T16:42:00Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1103,27 +1091,8 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n                         return;\n                     }\n \n-                    // Submit the build request.\n-                    _workQueue.Post(\n-                        () =>\n-                        {\n-                            try\n-                            {\n-                                IssueBuildSubmissionToScheduler(submission, allowMainThreadBuild);\n-                            }\n-                            catch (BuildAbortedException bae)\n-                            {\n-                                // We were canceled before we got issued by the work queue.\n-                                var result = new BuildResult(submission.BuildRequest, bae);\n-                                submission.CompleteResults(result);\n-                                submission.CompleteLogging(true);\n-                                CheckSubmissionCompletenessAndRemove(submission);\n-                            }\n-                            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n-                            {\n-                                HandleExecuteSubmissionException(submission, ex);\n-                            }\n-                        });\n+                    AddBuildRequestToSubmission(submission, newConfiguration.ConfigurationId);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It was in preparation for the next phase, handling cache requests (looking at all diffs makes it more clear). Cache requests do not need a build request set on their submission. Build submissions that undergo cache requests have a build request set on them only after their cache result is posted back to the BM (real build request for cache misses, proxy build requests for cache hits)",
              "createdAt": "2021-05-31T21:52:01Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1103,27 +1091,8 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n                         return;\n                     }\n \n-                    // Submit the build request.\n-                    _workQueue.Post(\n-                        () =>\n-                        {\n-                            try\n-                            {\n-                                IssueBuildSubmissionToScheduler(submission, allowMainThreadBuild);\n-                            }\n-                            catch (BuildAbortedException bae)\n-                            {\n-                                // We were canceled before we got issued by the work queue.\n-                                var result = new BuildResult(submission.BuildRequest, bae);\n-                                submission.CompleteResults(result);\n-                                submission.CompleteLogging(true);\n-                                CheckSubmissionCompletenessAndRemove(submission);\n-                            }\n-                            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n-                            {\n-                                HandleExecuteSubmissionException(submission, ex);\n-                            }\n-                        });\n+                    AddBuildRequestToSubmission(submission, newConfiguration.ConfigurationId);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Under what circumstances are the projects _not_ loaded?",
              "createdAt": "2021-05-28T21:20:49Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -148,9 +184,112 @@ IEnumerable<Type> GetTypes<T>(Assembly assembly)\n         private static readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();\n #endif\n \n-        public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest)\n+        public void PostCacheRequest(CacheRequest cacheRequest)\n+        {\n+            Task.Run(async () =>\n+            {\n+                try\n+                {\n+                    var cacheResult = await ProcessCacheRequest(cacheRequest);\n+                    _buildManager.PostCacheResult(cacheRequest, cacheResult);\n+                }\n+                catch (Exception e)\n+                {\n+                    _buildManager.PostCacheResult(cacheRequest, CacheResult.IndicateException(e));\n+                }\n+            }, _cancellationToken);\n+\n+            async Task<CacheResult> ProcessCacheRequest(CacheRequest request)\n+            {\n+                EvaluateProjectIfNecessary(request);\n+                if (DesignTimeBuildsDetected)\n+                {\n+                    throw new NotImplementedException();\n+                    // The BuildManager should disable the cache after the first query that finds\n+                    // a design time build.\n+                    return CacheResult.IndicateNonCacheHit(CacheResultType.CacheNotApplicable);\n+                }\n+\n+                if (_projectCacheDescriptor.VsWorkaround)\n+                {\n+                    // TODO: remove after we change VS to set the cache descriptor via build parameters.\n+                    await LateInitializePluginForVsWorkaround(request);\n+                }\n+\n+                return await GetCacheResultAsync(cacheRequest.Submission.BuildRequestData);\n+            }\n+\n+            void EvaluateProjectIfNecessary(CacheRequest request)\n+            {\n+                // TODO: only do this if the project cache requests evaluation. QB needs evaluations, but the Anybuild implementation\n+                // TODO: might not need them, so no point evaluating if it's not necessary. As a caveat, evaluations would still be optimal\n+                // TODO: when proxy builds are issued by the plugin ( scheduled on the inproc node, no point re-evaluating on out-of-proc nodes).\n+                lock (request.Configuration)\n+                {\n+                    if (!request.Configuration.IsLoaded)\n+                    {\n+                        request.Configuration.LoadProjectIntoConfiguration(",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Whenever a build submission is issued to the build manager whose BuildRequestData is path based. VS does this for normal builds as it builds projects bottom up in dependency order and _some_ design time builds.\r\n\r\nStatic graph based builds guarantee all their issued BuildRequestDatas are project instances based because all nodes reference their ProjectInstance.",
              "createdAt": "2021-05-31T21:41:41Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -148,9 +184,112 @@ IEnumerable<Type> GetTypes<T>(Assembly assembly)\n         private static readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();\n #endif\n \n-        public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest)\n+        public void PostCacheRequest(CacheRequest cacheRequest)\n+        {\n+            Task.Run(async () =>\n+            {\n+                try\n+                {\n+                    var cacheResult = await ProcessCacheRequest(cacheRequest);\n+                    _buildManager.PostCacheResult(cacheRequest, cacheResult);\n+                }\n+                catch (Exception e)\n+                {\n+                    _buildManager.PostCacheResult(cacheRequest, CacheResult.IndicateException(e));\n+                }\n+            }, _cancellationToken);\n+\n+            async Task<CacheResult> ProcessCacheRequest(CacheRequest request)\n+            {\n+                EvaluateProjectIfNecessary(request);\n+                if (DesignTimeBuildsDetected)\n+                {\n+                    throw new NotImplementedException();\n+                    // The BuildManager should disable the cache after the first query that finds\n+                    // a design time build.\n+                    return CacheResult.IndicateNonCacheHit(CacheResultType.CacheNotApplicable);\n+                }\n+\n+                if (_projectCacheDescriptor.VsWorkaround)\n+                {\n+                    // TODO: remove after we change VS to set the cache descriptor via build parameters.\n+                    await LateInitializePluginForVsWorkaround(request);\n+                }\n+\n+                return await GetCacheResultAsync(cacheRequest.Submission.BuildRequestData);\n+            }\n+\n+            void EvaluateProjectIfNecessary(CacheRequest request)\n+            {\n+                // TODO: only do this if the project cache requests evaluation. QB needs evaluations, but the Anybuild implementation\n+                // TODO: might not need them, so no point evaluating if it's not necessary. As a caveat, evaluations would still be optimal\n+                // TODO: when proxy builds are issued by the plugin ( scheduled on the inproc node, no point re-evaluating on out-of-proc nodes).\n+                lock (request.Configuration)\n+                {\n+                    if (!request.Configuration.IsLoaded)\n+                    {\n+                        request.Configuration.LoadProjectIntoConfiguration(",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}