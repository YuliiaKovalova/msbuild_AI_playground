{
  "number": 11232,
  "title": "Add line/column information to invalid project exception",
  "body": "Fixes #https://github.com/dotnet/msbuild/issues/11156\r\n\r\n### Context\r\nDue to serializer.OpenAsync(FullPath, CancellationToken.None).**Result**; usage, AggregateException was thrown with full callstack attached **without** location information:\r\n![{82D7BB4A-77B4-4AE5-8997-48E4F943A72B}](https://github.com/user-attachments/assets/7139042c-ee50-4bd9-aa22-7adda05e6f8f)\r\n\r\n\r\n### Changes Made\r\nSwitch to .GetAwaiter().GetResult(); to preserve original SolutionException that contains ElementLocation data.\r\n![image](https://github.com/user-attachments/assets/35227f5c-c885-44b3-b9ea-8b083547b7c6)\r\n### Testing\r\nManual.\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-07T12:03:17Z",
  "updatedAt": "2025-01-07T14:11:44Z",
  "closedAt": "2025-01-07T14:11:44Z",
  "mergedAt": "2025-01-07T14:11:44Z",
  "additions": 21,
  "deletions": 13,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/improve_solutionException_handling",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a8fa5cb1dd269c6848c5d1e6c32074e25ca59ff5",
          "message": "add line/column to invalid project expection",
          "committedDate": "2025-01-07T11:57:12Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9247ac2ff57279f65033cb065ff8292539ca8e6d",
          "message": "return a callstack to the exception",
          "committedDate": "2025-01-07T13:35:08Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we keep the whole exception with stack trace here? (`solutionEx.ToString()`)",
              "createdAt": "2025-01-07T13:11:55Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -302,28 +302,36 @@ internal void ParseUsingNewParser()\n         {\n             ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(FullPath);\n \n-            if (serializer != null)\n+            if (serializer == null)\n+            {\n+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                    new BuildEventFileInfo(FullPath),\n+                    $\"InvalidProjectFile\",\n+                    $\"No solution serializer was found for {FullPath}\");\n+            }\n+            else\n             {\n                 try\n                 {\n-                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).Result;\n+                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).GetAwaiter().GetResult();\n                     ReadSolutionModel(solutionModel);\n                 }\n+                catch (SolutionException solutionEx)\n+                {\n+                    var errorLocation = ElementLocation.Create(FullPath, solutionEx.Line ?? 0, solutionEx.Column ?? 0);\n+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                        new BuildEventFileInfo(errorLocation),\n+                        \"InvalidProjectFile\",\n+                        solutionEx.Message);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It would make sense to have the two exception cases do the same thing (tostring or message), I don't have strong opinions which.",
              "createdAt": "2025-01-07T13:29:26Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -302,28 +302,36 @@ internal void ParseUsingNewParser()\n         {\n             ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(FullPath);\n \n-            if (serializer != null)\n+            if (serializer == null)\n+            {\n+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                    new BuildEventFileInfo(FullPath),\n+                    $\"InvalidProjectFile\",\n+                    $\"No solution serializer was found for {FullPath}\");\n+            }\n+            else\n             {\n                 try\n                 {\n-                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).Result;\n+                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).GetAwaiter().GetResult();\n                     ReadSolutionModel(solutionModel);\n                 }\n+                catch (SolutionException solutionEx)\n+                {\n+                    var errorLocation = ElementLocation.Create(FullPath, solutionEx.Line ?? 0, solutionEx.Column ?? 0);\n+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                        new BuildEventFileInfo(errorLocation),\n+                        \"InvalidProjectFile\",\n+                        solutionEx.Message);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "It looked unactionable to me that's why I sticked to message\r\n![{C49C3815-7BDB-4795-AEDE-D16F23AE72B2}](https://github.com/user-attachments/assets/ce39f5cc-a64b-4657-84d9-473325871d64)\r\n\r\n\r\nI am not very opinionated, can return callstack :)\r\n ",
              "createdAt": "2025-01-07T13:31:31Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -302,28 +302,36 @@ internal void ParseUsingNewParser()\n         {\n             ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(FullPath);\n \n-            if (serializer != null)\n+            if (serializer == null)\n+            {\n+                ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                    new BuildEventFileInfo(FullPath),\n+                    $\"InvalidProjectFile\",\n+                    $\"No solution serializer was found for {FullPath}\");\n+            }\n+            else\n             {\n                 try\n                 {\n-                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).Result;\n+                    SolutionModel solutionModel = serializer.OpenAsync(FullPath, CancellationToken.None).GetAwaiter().GetResult();\n                     ReadSolutionModel(solutionModel);\n                 }\n+                catch (SolutionException solutionEx)\n+                {\n+                    var errorLocation = ElementLocation.Create(FullPath, solutionEx.Line ?? 0, solutionEx.Column ?? 0);\n+                    ProjectFileErrorUtilities.ThrowInvalidProjectFile(\n+                        new BuildEventFileInfo(errorLocation),\n+                        \"InvalidProjectFile\",\n+                        solutionEx.Message);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}