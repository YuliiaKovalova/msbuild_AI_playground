{
  "number": 9590,
  "title": "TargetEntry optimizations for Results",
  "body": "### Context\r\n@jeffkl has a case with potentially thousands of items that would all go into one bucket in the Returns. MSBuild is deduplicating it, but so is NuGet, which is wasteful, so he will likely stop using Returns. This change will save him a small amount of allocations, but it would save a ton of allocations if he were to keep using it, since it will no longer need to repeatedly reallocate the HashSet, and it won't need to allocate as many Lists. It will still save one List's worth of allocations on every single Target that doesn't have a Returns.\r\n\r\n### Changes Made\r\nEffectively making List allocations lazier and taking advantage of ToList to avoid doing as many (duplicated) collection operations.\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-04T01:09:22Z",
  "updatedAt": "2024-02-01T00:40:05Z",
  "closedAt": "2024-02-01T00:40:04Z",
  "mergedAt": "2024-02-01T00:40:04Z",
  "additions": 28,
  "deletions": 14,
  "changedFiles": 1,
  "headRefName": "targetResults-optimizations",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0a9384ce64d592f19bdc4691ba295959f96cd77c",
          "message": "Optimize one-bucket case",
          "committedDate": "2024-01-04T01:03:32Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c54614c7e8f6d0256ef8ad0000043ba7ac113545",
          "message": "Optimize no-Returns case",
          "committedDate": "2024-01-04T01:04:44Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "113d2d3618cd8dd82ee00c68a03c0073d0998b60",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Jeff Kluge <jeffkl@microsoft.com>",
          "committedDate": "2024-01-04T17:02:48Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "863b65b854ffef6a355fdb3ea9bd8767b38fc52a",
          "message": "Give targetOutputItems an initial value",
          "committedDate": "2024-01-26T01:07:30Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                                    // As an optimization, use the results for the first bucket and if there are no more buckets to process, only a single list is allocated.\r\n                                    targetOutputItems = bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation).ToList();\r\n```\r\n\r\nA comment would probably be good here.",
              "createdAt": "2024-01-04T16:33:54Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -624,24 +625,32 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                         {\n                             foreach (ItemBucket bucket in batchingBuckets)\n                             {\n-                                targetOutputItems.AddRange(bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation));\n+                                if (targetOutputItems is null)\n+                                {\n+                                    targetOutputItems = bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation).ToList();",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                            // Optimize for only one bucket by initializing the HashSet<T> with the first one's items in case there are a lot of items, it won't need to be resized.\r\n                            if (batchingBuckets.Count == 1)\r\n```\r\n\r\nJust adding a comment for clarity to the reader.",
              "createdAt": "2024-01-04T16:36:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -624,24 +625,32 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                         {\n                             foreach (ItemBucket bucket in batchingBuckets)\n                             {\n-                                targetOutputItems.AddRange(bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation));\n+                                if (targetOutputItems is null)\n+                                {\n+                                    targetOutputItems = bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation).ToList();\n+                                }\n+                                else\n+                                {\n+                                    targetOutputItems.AddRange(bucket.Expander.ExpandIntoTaskItemsLeaveEscaped(targetReturns, ExpanderOptions.ExpandAll, targetReturnsLocation));\n+                                }\n                             }\n                         }\n                         else\n                         {\n-                            HashSet<TaskItem> addedItems = new HashSet<TaskItem>();\n-                            foreach (ItemBucket bucket in batchingBuckets)\n+                            if (batchingBuckets.Count == 1)",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcaf ",
              "createdAt": "2024-01-04T16:36:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -652,7 +661,7 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                     targetLoggingContext?.LogTargetBatchFinished(projectFullPath, targetSuccess, targetOutputItems?.Count > 0 ? targetOutputItems : null);\n                 }\n \n-                _targetResult = new TargetResult(targetOutputItems.ToArray(), aggregateResult, targetLoggingContext?.BuildEventContext);\n+                _targetResult = new TargetResult(targetOutputItems?.ToArray() ?? Array.Empty<TaskItem>(), aggregateResult, targetLoggingContext?.BuildEventContext);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think eliminating one list allocation per target will be measurable, but it makes code little better.\r\nI think the code can be safer if we initialize it to `Array.Empty<TaskItem>()` as oppose to null and we don't need to handle null here or future elsewhere.",
              "createdAt": "2024-01-24T14:44:42Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -652,7 +663,7 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                     targetLoggingContext?.LogTargetBatchFinished(projectFullPath, targetSuccess, targetOutputItems?.Count > 0 ? targetOutputItems : null);\n                 }\n \n-                _targetResult = new TargetResult(targetOutputItems.ToArray(), aggregateResult, targetLoggingContext?.BuildEventContext);\n+                _targetResult = new TargetResult(targetOutputItems?.ToArray() ?? Array.Empty<TaskItem>(), aggregateResult, targetLoggingContext?.BuildEventContext);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "It's a little more complicated because targetOutputItems is a List, and there's no allocation-free variant of that, but I can make targetOutputItems an array with Array.Empty<TaskItem> then initialize a List if we're keeping dupes and not if we're using a HashSet, and that's probably safer.",
              "createdAt": "2024-01-26T01:08:32Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -652,7 +663,7 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                     targetLoggingContext?.LogTargetBatchFinished(projectFullPath, targetSuccess, targetOutputItems?.Count > 0 ? targetOutputItems : null);\n                 }\n \n-                _targetResult = new TargetResult(targetOutputItems.ToArray(), aggregateResult, targetLoggingContext?.BuildEventContext);\n+                _targetResult = new TargetResult(targetOutputItems?.ToArray() ?? Array.Empty<TaskItem>(), aggregateResult, targetLoggingContext?.BuildEventContext);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a way to loop through the buckets and get a count to pass to the list ctor or directly allocate a right-sized array or HashSet? That would help all codepaths here and simplify the code, too.",
              "createdAt": "2024-01-24T15:47:55Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -624,24 +625,34 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                         {\n                             foreach (ItemBucket bucket in batchingBuckets)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I believe that was something jeffkl and I investigated, but bucket.Expander.ExpandIntoTaskItemsLeaveEscaped returns an unknown number of items. Either we immediately add those to an object combining the results (as we currently do) or we have to throw away the results and recalculate them later, which would be more expensive. We could also have an object that retains a pointer to each of the expanded item lists, but that would require holding onto all those lists for the duration of the for loop, which is tough on gc.",
              "createdAt": "2024-01-26T01:02:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -624,24 +625,34 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                         {\n                             foreach (ItemBucket bucket in batchingBuckets)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}