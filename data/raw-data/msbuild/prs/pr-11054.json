{
  "number": 11054,
  "title": "AvoidCopyAlways Check",
  "body": "Fixes #7654\r\n\r\n### Context\r\nAdding a check validating that `Always` is not being used for `CopyToOutputDirectory` metadata. Or that the `SkipUnchangedFilesOnCopyAlways` property is set to `True` to avoid unnecessary copying.\r\n\r\n### Testing\r\nTailored tests added - covering as well the #11052",
  "state": "MERGED",
  "createdAt": "2024-11-29T19:34:07Z",
  "updatedAt": "2024-12-11T08:14:14Z",
  "closedAt": "2024-12-10T19:24:32Z",
  "mergedAt": "2024-12-10T19:24:32Z",
  "additions": 488,
  "deletions": 44,
  "changedFiles": 31,
  "headRefName": "proto/copyalways-check",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0956b020b01015be9eeaadad4389182b1ee47ede",
          "message": "Support Copy=IfDifferent",
          "committedDate": "2024-11-29T14:08:05Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39ee4c95a6fc8ba2f9d8b7dcb37f36c8dd8f5cdd",
          "message": "Format",
          "committedDate": "2024-11-29T15:31:06Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9c446ab9441fb40b9cd5059274d9a481152ee6f7",
          "message": "Update xsd",
          "committedDate": "2024-11-29T16:34:56Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf1d6c1429ece31eba33ef98ae666b03e58953bc",
          "message": "Introduce CopyAlwaysCheck",
          "committedDate": "2024-11-29T16:58:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6858b2ade2d95f7f3e4219b7fef81add9c2d8a90",
          "message": "Add tests and documentation",
          "committedDate": "2024-11-29T19:24:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a486f96f8a564cabb9bfc78d1035ed12ac2ef64",
          "message": "Fix test assertation",
          "committedDate": "2024-11-30T09:21:58Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4955e34b010cd138609d5b5b6b66c8a6e8f94aab",
          "message": "Apply SkipUnchangedFilesOnCopyAlways to all projects in the test",
          "committedDate": "2024-12-02T15:28:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83099b945c4d4e7526f8b75bca600d22b629055f",
          "message": "Fix test to work properly on unix OSes not updating AccessTime on writes",
          "committedDate": "2024-12-04T15:26:05Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94dba52b8a5be7a57217b74a87876280872ccb9c",
          "message": "Fix tests",
          "committedDate": "2024-12-04T16:24:17Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af953f9a8b8ec2a124d02c433d89f157699c9c62",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-12-04T18:35:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f343d8ee753f4589130f306bc65fe5a3570631bb",
          "message": "Apply suggestions",
          "committedDate": "2024-12-04T18:47:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "159e0f6ab594bd7a9bff07c33950a905a9343efb",
          "message": "Merge branch 'proto/copyalways-check' of https://github.com/dotnet/msbuild into proto/copyalways-check",
          "committedDate": "2024-12-04T18:47:19Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "349057b5b485b7a5b8f43a09860337dbbfaebc22",
          "message": "Merge branch 'main' into proto/copyalways-check",
          "committedDate": "2024-12-05T16:44:22Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94bf467070ecd232ade2faa27c03bc943dc4bffe",
          "message": "Fix merge issue",
          "committedDate": "2024-12-05T18:51:44Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: sort this section alphabetically?",
              "createdAt": "2024-12-02T22:48:16Z",
              "path": "src/Shared/Constants.cs",
              "diffHunk": "@@ -245,6 +247,10 @@ internal static class ItemMetadataNames\n     /// </summary>\n     internal static class ItemNames\n     {\n-        internal const string reference = \"Reference\";\n+        internal const string Reference = \"Reference\";\n+        internal const string EmbeddedResource = \"EmbeddedResource\";\n+        internal const string Compile = \"Compile\";\n+        internal const string Content = \"Content\";\n+        internal const string None = \"None\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n\"Avoid specifying 'Always' for 'CopyToOutputDirectory' as this can lead to unnecessary copy operations during build. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\r\n```",
              "createdAt": "2024-12-02T22:49:51Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -76,7 +77,36 @@ Examples:\n \n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n- \n+\n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) can take the values:\r\n```",
              "createdAt": "2024-12-02T22:51:02Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -76,7 +77,36 @@ Examples:\n \n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n- \n+\n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\n+\n+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) has following recognized values:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n`Always` is not recommended, as it causes the files to be copied in every build, even when the destination file content is identical to the source.\r\n```",
              "createdAt": "2024-12-02T22:52:44Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -76,7 +77,36 @@ Examples:\n \n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n- \n+\n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\n+\n+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) has following recognized values:\n+ * `Never`\n+ * `Always`\n+ * `PreserveNewest`\n+ * `IfDifferent`\n+\n+The `Always` is not recommended - as it causes the files to be copied always - even if unnecesary.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nBefore the introduction of `IfDifferent`, `Always` was needed to work around cases where the destination file could have changed between builds (e.g. an asset that can be changed during test run, but needs to be reset by the build). `IfDifferent` preserves this behavior without unnecessary copying.\r\n```",
              "createdAt": "2024-12-02T22:54:16Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -76,7 +77,36 @@ Examples:\n \n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n- \n+\n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\n+\n+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) has following recognized values:\n+ * `Never`\n+ * `Always`\n+ * `PreserveNewest`\n+ * `IfDifferent`\n+\n+The `Always` is not recommended - as it causes the files to be copied always - even if unnecesary.\n+\n+This might have been historicaly needed to workaround cases where the destination file could have changed between builds (e.g. a case of asset that can be changed during test run, but needs to be rest by the build). A `IfDifferent` value is currently offered to efficiently cover such scenario.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nIn order to avoid the need to change copy metadata for a large number of items, it's now possible to specify the `SkipUnchangedFilesOnCopyAlways` property in order to flip all copy behavior of `CopyToOutputDirectory=Always` to behave identically to `CopyToOutputDirectory=IfDifferent`:\r\n```",
              "createdAt": "2024-12-02T22:56:48Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -76,7 +77,36 @@ Examples:\n \n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n- \n+\n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\n+\n+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) has following recognized values:\n+ * `Never`\n+ * `Always`\n+ * `PreserveNewest`\n+ * `IfDifferent`\n+\n+The `Always` is not recommended - as it causes the files to be copied always - even if unnecesary.\n+\n+This might have been historicaly needed to workaround cases where the destination file could have changed between builds (e.g. a case of asset that can be changed during test run, but needs to be rest by the build). A `IfDifferent` value is currently offered to efficiently cover such scenario.\n+\n+In order to avoid a need for change all copy metada, it's now possible to specify `SkipUnchangedFilesOnCopyAlways` property with a value of `'True'` in order to flip all copy behavior of `CopyToOutputDirectory=Always` to behave identicaly as `CopyToOutputDirectory=IfDifferent`:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this feels like something that we should provide in the Check API layer, not per-check.",
              "createdAt": "2024-12-02T22:59:44Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/issues/11085",
              "createdAt": "2024-12-04T18:46:33Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Can we add a comment to this with the issue so we can remember to fix it when we get to that issue.",
              "createdAt": "2024-12-09T11:52:02Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "I added explicit comment to bug to search all the checks - not to rely on comments than can get stale or be frogotten",
              "createdAt": "2024-12-10T16:38:28Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "?",
              "createdAt": "2024-12-02T23:00:58Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.\n+        // We want to do the same prevention for both registered actions: EvaluatedPropertiesAction and EvaluatedItemsAction.\n+        //  To avoid the need to have separate hashset for each of those functions - we use a single one and we use the fact that\n+        //  both functions are always called after each other (EvaluatedPropertiesAction first, then EvaluatedItemsAction),\n+        //  so this function just checks the hashset (not to prevent execution of EvaluatedItemsAction) and EvaluatedItemsAction\n+        //  updates the hashset.\n+        if (_projectsSeen.Contains(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        context.Data.EvaluatedProperties.TryGetValue(\"SkipUnchangedFilesOnCopyAlways\", out string? skipUnchanged);\n+\n+        if (skipUnchanged.IsMSBuildTrueString())\n+        {\n+            // Now we know that copy logic is optimized - so we do not need to check items. Avoiding the items check by inserting into lookup.\n+            _projectsSeen.Add(context.Data.ProjectFilePath);\n+        }\n+    }\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.\n+        if (!_projectsSeen.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfTypes([ItemNames.Content, ItemNames.Compile, ItemNames.None, ItemNames.EmbeddedResource]))\n+        {\n+            // itemData.Type\n+            // itemData.EvaluatedInclude",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: can we link to an issue here? deeplinking a project feels bad to me.",
              "createdAt": "2024-12-02T23:02:02Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.\n+        // We want to do the same prevention for both registered actions: EvaluatedPropertiesAction and EvaluatedItemsAction.\n+        //  To avoid the need to have separate hashset for each of those functions - we use a single one and we use the fact that\n+        //  both functions are always called after each other (EvaluatedPropertiesAction first, then EvaluatedItemsAction),\n+        //  so this function just checks the hashset (not to prevent execution of EvaluatedItemsAction) and EvaluatedItemsAction\n+        //  updates the hashset.\n+        if (_projectsSeen.Contains(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        context.Data.EvaluatedProperties.TryGetValue(\"SkipUnchangedFilesOnCopyAlways\", out string? skipUnchanged);\n+\n+        if (skipUnchanged.IsMSBuildTrueString())\n+        {\n+            // Now we know that copy logic is optimized - so we do not need to check items. Avoiding the items check by inserting into lookup.\n+            _projectsSeen.Add(context.Data.ProjectFilePath);\n+        }\n+    }\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)\n+        //  for this reason we use a hashset with already seen projects.\n+        if (!_projectsSeen.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfTypes([ItemNames.Content, ItemNames.Compile, ItemNames.None, ItemNames.EmbeddedResource]))\n+        {\n+            // itemData.Type\n+            // itemData.EvaluatedInclude\n+\n+            foreach (KeyValuePair<string, string> keyValuePair in itemData.EnumerateMetadata())\n+            {\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.copyToOutputDirectory))\n+                {\n+                    if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Value, ItemMetadataNames.copyAlways))\n+                    {\n+                        // Project {0} specifies '{0}' item '{1}', ...\n+                        context.ReportResult(BuildCheckResult.Create(\n+                            SupportedRule,\n+                            // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please update with the final text since I proposed edits in the .md",
              "createdAt": "2024-12-02T23:03:13Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -2176,11 +2176,19 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   </data>\n   <data name=\"BuildCheck_BC0105_Title\" xml:space=\"preserve\">\n     <value>It is recommended to specify explicit 'Culture' metadata, or 'WithCulture=false' metadata with 'EmbeddedResource' item in order to avoid wrong or nondeterministic culture estimation.</value>\n-\t<comment>Terms in quotes are not to be translated.</comment>\n+\t  <comment>Terms in quotes are not to be translated.</comment>\n   </data>\n   <data name=\"BuildCheck_BC0105_MessageFmt\" xml:space=\"preserve\">\n     <value>Project {0} specifies 'EmbeddedResource' item '{1}', that has possibly a culture denoting extension ('{2}'), but explicit 'Culture' nor 'WithCulture=false' metadata are not specified.</value>\n-\t<comment>Terms in quotes are not to be translated.</comment>\n+\t  <comment>Terms in quotes are not to be translated.</comment>\n+  </data>\n+  <data name=\"BuildCheck_BC0106_Title\" xml:space=\"preserve\">\n+    <value>It is recommended to avoid specifying 'Always' value of metadata 'CopyToOutputDirectory' as this can lead to unnecessary build performance degradation. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "given that it is not recommended; should it be listed last?",
              "createdAt": "2024-12-10T18:01:17Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -78,6 +79,36 @@ Examples:\n <a name=\"RespectAlreadyAssignedItemCulture\"></a>\n **Note:** In Full Framework version of MSBuild (msbuild.exe, Visual Studio) and in .NET SDK prior 9.0 a global or project specific property `RespectAlreadyAssignedItemCulture` needs to be set to `'true'` in order for the explicit `Culture` metadata to be respected. Otherwise the explicit culture will be overwritten by MSBuild engine and if different from the extension - a `MSB3002` warning is emitted (`\"MSB3002: Explicitly set culture \"{0}\" for item \"{1}\" was overwritten with inferred culture \"{2}\", because 'RespectAlreadyAssignedItemCulture' property was not set.\"`)\n \n+<a name=\"BC0106\"></a>\n+## BC0106 - CopyToOutputDirectory='Always' should be avoided.\n+\n+\"Avoid specifying 'Always' for 'CopyToOutputDirectory' as this can lead to unnecessary copy operations during build. Use 'PreserveNewest' or 'IfDifferent' metadata value, or set the 'SkipUnchangedFilesOnCopyAlways' property to true to employ more effective copying.\"\n+\n+[`CopyToOutputDirectory` metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items) can take the values:\n+ * `Never`\n+ * `Always`\n+ * `PreserveNewest`\n+ * `IfDifferent`\n+\n+`Always` is not recommended, as it causes the files to be copied in every build, even when the destination file content is identical to the source.",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "bodyless inherited method; by design?",
              "createdAt": "2024-12-10T18:04:28Z",
              "path": "src/Build/BuildCheck/Checks/CopyAlwaysCheck.cs",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+internal class CopyAlwaysCheck : Check\n+{\n+    private const string RuleId = \"BC0106\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"AvoidCopyAlways\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0106_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.CopyAlwaysCheck\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      }
    ]
  }
}