{
  "number": 11535,
  "title": "Load `before/after.{solutionName}.sln.targets` for .`slnx`",
  "body": "Fixes #11288\r\n\r\n### Context\r\nsee the issue description #11288\r\n\r\n### Changes Made\r\n1. Load `before/after.{solutionName}.sln.targets` for .`slnx`\r\n2. Added test checking that targets from these files are included in the project for `.sln` and `.slnx`\r\n\r\n### Testing\r\nAdded tests, tested manually\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-03-04T13:52:45Z",
  "updatedAt": "2025-05-06T15:42:56Z",
  "closedAt": "2025-03-07T20:56:03Z",
  "mergedAt": "2025-03-07T20:56:03Z",
  "additions": 53,
  "deletions": 10,
  "changedFiles": 3,
  "headRefName": "after.sln.targets-slnx",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "535096b459f16aa19d9f1de27bcb159a4d2a2587",
          "message": "load before/after.{solutionName}.sln.targets for .slnx;\nadded test checking that targets from these files are included in the project",
          "committedDate": "2025-03-04T13:49:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e8ff2193d1485484bfcc2ce59a544040a7b9836b",
          "message": "Merge branch 'main' into after.sln.targets-slnx",
          "committedDate": "2025-03-07T17:39:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bf8397f158484f465b45c6157795d846ab40bbd",
          "message": "Merge branch 'main' into after.sln.targets-slnx",
          "committedDate": "2025-03-07T17:41:45Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/backport to vs17.14",
        "createdAt": "2025-03-11T12:54:16Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Started backporting to _vs17.14_: https://github.com/dotnet/msbuild/actions/runs/13788521939",
        "createdAt": "2025-03-11T12:54:29Z",
        "author": {
          "login": "github-actions"
        }
      },
      {
        "body": "@maridematte an error occurred while backporting to \"vs17.14\", please check the run log for details!\n\nError: @maridematte is not a repo collaborator, backporting is not allowed. If you're a collaborator please make sure your dotnet team membership visibility is set to Public on https://github.com/orgs/dotnet/people?query=maridematte",
        "createdAt": "2025-03-11T12:54:51Z",
        "author": {
          "login": "github-actions"
        }
      },
      {
        "body": "/backport to vs17.14",
        "createdAt": "2025-03-11T13:09:48Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Started backporting to _vs17.14_: https://github.com/dotnet/msbuild/actions/runs/13788840485",
        "createdAt": "2025-03-11T13:09:59Z",
        "author": {
          "login": "github-actions"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Does the file version here have a big impact? I do not know a lot about the difference between versions.",
              "createdAt": "2025-03-05T14:50:10Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -57,28 +57,64 @@ public void Dispose()\n         /// Test that if a before.{sln}>.targets or after.{sln}.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n         /// </summary>\n         [Theory]\n-        [InlineData(\"before.MySln.sln.targets\")]\n-        [InlineData(\"after.MySln.sln.targets\")]\n-        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n-        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", false)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", true)]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name, bool convertToSlnx)\n         {\n             using (TestEnvironment testEnvironment = TestEnvironment.Create())\n             {\n                 TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n-                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n-                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n-                    @\"<Project>\n-                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n-                        </Target>\n-                      </Project>\");\n-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", solutionFileContents);\n+                string solutionPath = convertToSlnx ? SolutionFile_NewParser_Tests.ConvertToSlnx(sln.Path) : sln.Path;\n+                testEnvironment.CreateFile(folder, name,\n+                      \"\"\"\n+                      <Project>\n+                          <Target Name=\"TestTarget\" />\n+                      </Project>\n+                      \"\"\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(solutionPath), null, null, _buildEventContext, CreateMockLoggingService());\n                 instances.ShouldHaveSingleItem();\n                 instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(string.Empty);\n                 MockLogger logger = new MockLogger(output);\n                 instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n             }\n         }\n \n+        /// <summary>\n+        /// Test that targets in before.{sln}.targets and after.{sln}.targets files are included in the project.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        public void SolutionProjectIncludesBeforeAndAfterTargets(string name, bool convertToSlnx)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "I think this is required for empty solution files, and 12.00 is the latest .sln version",
              "createdAt": "2025-03-05T17:53:34Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -57,28 +57,64 @@ public void Dispose()\n         /// Test that if a before.{sln}>.targets or after.{sln}.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n         /// </summary>\n         [Theory]\n-        [InlineData(\"before.MySln.sln.targets\")]\n-        [InlineData(\"after.MySln.sln.targets\")]\n-        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n-        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", false)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", true)]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name, bool convertToSlnx)\n         {\n             using (TestEnvironment testEnvironment = TestEnvironment.Create())\n             {\n                 TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n-                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n-                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n-                    @\"<Project>\n-                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n-                        </Target>\n-                      </Project>\");\n-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", solutionFileContents);\n+                string solutionPath = convertToSlnx ? SolutionFile_NewParser_Tests.ConvertToSlnx(sln.Path) : sln.Path;\n+                testEnvironment.CreateFile(folder, name,\n+                      \"\"\"\n+                      <Project>\n+                          <Target Name=\"TestTarget\" />\n+                      </Project>\n+                      \"\"\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(solutionPath), null, null, _buildEventContext, CreateMockLoggingService());\n                 instances.ShouldHaveSingleItem();\n                 instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(string.Empty);\n                 MockLogger logger = new MockLogger(output);\n                 instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n             }\n         }\n \n+        /// <summary>\n+        /// Test that targets in before.{sln}.targets and after.{sln}.targets files are included in the project.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        public void SolutionProjectIncludesBeforeAndAfterTargets(string name, bool convertToSlnx)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "yes, exactly as @edvilme says",
              "createdAt": "2025-03-07T07:27:38Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -57,28 +57,64 @@ public void Dispose()\n         /// Test that if a before.{sln}>.targets or after.{sln}.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n         /// </summary>\n         [Theory]\n-        [InlineData(\"before.MySln.sln.targets\")]\n-        [InlineData(\"after.MySln.sln.targets\")]\n-        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n-        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", false)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", true)]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name, bool convertToSlnx)\n         {\n             using (TestEnvironment testEnvironment = TestEnvironment.Create())\n             {\n                 TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n-                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n-                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n-                    @\"<Project>\n-                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n-                        </Target>\n-                      </Project>\");\n-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", solutionFileContents);\n+                string solutionPath = convertToSlnx ? SolutionFile_NewParser_Tests.ConvertToSlnx(sln.Path) : sln.Path;\n+                testEnvironment.CreateFile(folder, name,\n+                      \"\"\"\n+                      <Project>\n+                          <Target Name=\"TestTarget\" />\n+                      </Project>\n+                      \"\"\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(solutionPath), null, null, _buildEventContext, CreateMockLoggingService());\n                 instances.ShouldHaveSingleItem();\n                 instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(string.Empty);\n                 MockLogger logger = new MockLogger(output);\n                 instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n             }\n         }\n \n+        /// <summary>\n+        /// Test that targets in before.{sln}.targets and after.{sln}.targets files are included in the project.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        public void SolutionProjectIncludesBeforeAndAfterTargets(string name, bool convertToSlnx)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "For more context, changing the version in this PR doesn't matter. But we are bringing back parsing .sln with `SolutionPersistence` in [other PR](https://github.com/dotnet/msbuild/pull/11538). For the new parser the latest version is 12.00. If it is higher they throw an exception. In our old MSBuild parser we don't care about the version.",
              "createdAt": "2025-03-07T10:04:03Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -57,28 +57,64 @@ public void Dispose()\n         /// Test that if a before.{sln}>.targets or after.{sln}.targets file has one of the default targets (Build, Clean, etc.) that it includes only the user-defined target.\n         /// </summary>\n         [Theory]\n-        [InlineData(\"before.MySln.sln.targets\")]\n-        [InlineData(\"after.MySln.sln.targets\")]\n-        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\")]\n-        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", false)]\n+        [InlineData(\"name.that.does.Not.Affect.The.Build.targets\", true)]\n+        public void SolutionProjectIgnoresDuplicateDefaultTargets(string name, bool convertToSlnx)\n         {\n             using (TestEnvironment testEnvironment = TestEnvironment.Create())\n             {\n                 TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n-                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", @\"Microsoft Visual Studio Solution File, Format Version 16.00\");\n-                TransientTestFile targetsFile = testEnvironment.CreateFile(folder, name,\n-                    @\"<Project>\n-                        <Target Name=\"\"Build\"\" AfterTargets=\"\"NonsenseTarget\"\">\n-                        </Target>\n-                      </Project>\");\n-                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";\n+                TransientTestFile sln = testEnvironment.CreateFile(folder, \"MySln.sln\", solutionFileContents);\n+                string solutionPath = convertToSlnx ? SolutionFile_NewParser_Tests.ConvertToSlnx(sln.Path) : sln.Path;\n+                testEnvironment.CreateFile(folder, name,\n+                      \"\"\"\n+                      <Project>\n+                          <Target Name=\"TestTarget\" />\n+                      </Project>\n+                      \"\"\");\n+                ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(solutionPath), null, null, _buildEventContext, CreateMockLoggingService());\n                 instances.ShouldHaveSingleItem();\n                 instances[0].Targets[\"Build\"].AfterTargets.ShouldBe(string.Empty);\n                 MockLogger logger = new MockLogger(output);\n                 instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();\n             }\n         }\n \n+        /// <summary>\n+        /// Test that targets in before.{sln}.targets and after.{sln}.targets files are included in the project.\n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"before.MySln.sln.targets\", false)]\n+        [InlineData(\"before.MySln.sln.targets\", true)]\n+        [InlineData(\"after.MySln.sln.targets\", false)]\n+        [InlineData(\"after.MySln.sln.targets\", true)]\n+        public void SolutionProjectIncludesBeforeAndAfterTargets(string name, bool convertToSlnx)\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                string solutionFileContents = \"Microsoft Visual Studio Solution File, Format Version 12.00\";",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}