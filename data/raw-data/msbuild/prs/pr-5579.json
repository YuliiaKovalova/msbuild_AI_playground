{
  "number": 5579,
  "title": "Optimize 'string.Compare' call",
  "body": "Fixes #5578 ",
  "state": "MERGED",
  "createdAt": "2020-08-02T00:13:45Z",
  "updatedAt": "2021-12-29T22:52:14Z",
  "closedAt": "2020-08-05T22:19:12Z",
  "mergedAt": "2020-08-05T22:19:12Z",
  "additions": 665,
  "deletions": 668,
  "changedFiles": 102,
  "headRefName": "5578-optimize-string-compare",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1309a5f961a356043a893a7757da76a1cbbf5237",
          "message": "Optimize 'string.Compare' call",
          "committedDate": "2020-08-02T00:12:35Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "lachlan@expert1.com.au"
          }
        }
      },
      {
        "commit": {
          "oid": "04585157ab6647a4f94935f6cc2b99f3885cb8b8",
          "message": "Merge branch 'master' into 5578-optimize-string-compare",
          "committedDate": "2020-08-03T21:42:14Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I gave up on marking all the extra parentheses pretty fast this time. I know it all came in before you touched it, but it does bother me slightly. Same with sometimes using String. and sometimes using string.\r\n\r\nI think I'll do a separate issue to remove extra parenthesis and add in ones that should be there. That way the review is specific.",
        "createdAt": "2020-08-02T21:39:49Z",
        "author": {
          "login": "elachlan"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nextra parens",
              "createdAt": "2020-08-02T17:52:58Z",
              "path": "src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs",
              "diffHunk": "@@ -532,7 +532,7 @@ public void ValidXmlXmlReaderCache()\n         public void LoadCommonTargets()\n         {\n             ProjectCollection projectCollection = new ProjectCollection();\n-            string toolsPath = projectCollection.Toolsets.Where(toolset => (string.Compare(toolset.ToolsVersion, ObjectModelHelpers.MSBuildDefaultToolsVersion, StringComparison.OrdinalIgnoreCase) == 0)).First().ToolsPath;\n+            string toolsPath = projectCollection.Toolsets.Where(toolset => (string.Equals(toolset.ToolsVersion, ObjectModelHelpers.MSBuildDefaultToolsVersion, StringComparison.OrdinalIgnoreCase))).First().ToolsPath;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "lot of extra parens",
              "createdAt": "2020-08-02T17:53:54Z",
              "path": "src/Deprecated/Engine/Resources/Constants.cs",
              "diffHunk": "@@ -45,16 +45,16 @@ internal static bool IsReservedProperty(string property)\n         {\n             return \n                 (\n-                    (String.Compare(property, projectDirectory, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, projectFile, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, projectExtension, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, projectFullPath, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, projectName, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, binPath, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, toolsPath, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, projectDefaultTargets, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, programFiles32, StringComparison.OrdinalIgnoreCase) == 0) ||\n-                    (String.Compare(property, assemblyVersion, StringComparison.OrdinalIgnoreCase) == 0)\n+                    (String.Equals(property, projectDirectory, StringComparison.OrdinalIgnoreCase)) ||",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:54:04Z",
              "path": "src/Deprecated/Engine/Introspector/TargetInProgressState.cs",
              "diffHunk": "@@ -582,7 +582,7 @@ public override bool Equals(object obj)\n                 if (other != null)\n                 {\n                     if (other.projectId == projectId && other.nodeId == nodeId &&\n-                        (String.Compare(other.name, name, StringComparison.OrdinalIgnoreCase) == 0))\n+                        (String.Equals(other.name, name, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:54:13Z",
              "path": "src/Deprecated/Engine/Engine/Project.cs",
              "diffHunk": "@@ -4175,7 +4175,7 @@ private XmlDocument LoadImportedProject(Import import)\n             // also prevents the same file from being imported twice, even it it's not a\n             // circular dependency, but that's fine -- no good reason to do that anyway.\n             if ((this.imports[import.EvaluatedProjectPath] != null) ||\n-                (string.Compare(this.FullFileName, import.EvaluatedProjectPath, StringComparison.OrdinalIgnoreCase) == 0))\n+                (string.Equals(this.FullFileName, import.EvaluatedProjectPath, StringComparison.OrdinalIgnoreCase)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}