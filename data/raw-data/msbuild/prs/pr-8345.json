{
  "number": 8345,
  "title": "New Trace overloads without array allocation and boxing",
  "body": "Fixes #7815\r\n\r\n### Context\r\n`CommunicationUtilities.Trace method` uses `String.Format` with array of arguments. Allocation of this array happens even when the tracing is not enabled.\r\n\r\n### Changes Made\r\nAdded new overloads avoiding array allocation and boxing for max 3 arguments.\r\n\r\n### Testing\r\nTraces are written to file when tracing is enabled.\r\n\r\n### Notes\r\nIt's difficult to precisely measure allocation savings in this case (expectations are low), but complexity of the added code code is low.",
  "state": "MERGED",
  "createdAt": "2023-01-24T10:29:45Z",
  "updatedAt": "2023-02-12T02:42:33Z",
  "closedAt": "2023-02-12T02:42:32Z",
  "mergedAt": "2023-02-12T02:42:32Z",
  "additions": 105,
  "deletions": 32,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/comm-trace-optimization",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c9f1a962b202a25bd7abbd8c01547aa33ed212c7",
          "message": "New Trace overloads without array allocation and boxing",
          "committedDate": "2023-01-24T10:22:42Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26623c11c56e51a349c8e61c7282761c7c65209d",
          "message": "Update src/Shared/CommunicationsUtilities.cs\n\nCo-authored-by: Ladi Prosek <laprosek@microsoft.com>",
          "committedDate": "2023-02-07T15:14:38Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eab3abde0669996061b5b0ad042615461650ce73",
          "message": "Removed ToString() calls to enable custom formatting",
          "committedDate": "2023-02-08T10:16:23Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d56c3ff7bd01cd18363ec5885ddedb50055478b4",
          "message": "Merge branch 'dev/mipavlik/comm-trace-optimization' of https://github.com/dotnet/msbuild into dev/mipavlik/comm-trace-optimization",
          "committedDate": "2023-02-08T10:16:42Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "220db86e45d9ac56369cd45782cd23958bf007e0",
          "message": "Reverted automatic formatting change",
          "committedDate": "2023-02-08T10:18:09Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6201fcbcee5706a600dd1da417ee8c0e40cf63d9",
          "message": "Simplified overload without nodeId parameter.",
          "committedDate": "2023-02-08T11:57:15Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Yeah, I learned that when I asked about Array.Empty<T>: https://github.com/dotnet/runtime/pull/32365",
        "createdAt": "2023-01-29T18:33:45Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "> Don't MSBuild-y things get ngen'd? Why would any methods be jitted?\r\n\r\nI don't think NGEN will precompile every combination used by callers from different assemblies. But I might be wrong :)",
        "createdAt": "2023-02-08T10:28:52Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> > Don't MSBuild-y things get ngen'd? Why would any methods be jitted?\r\n> \r\n> I don't think NGEN will precompile every combination used by callers from different assemblies. But I might be wrong :)\r\n\r\nI *think* we should be OK because the type arguments used for these methods are all statically known and there are no cross-assembly dependencies like calling `M<X>` from assembly `A`, where `M<>` is defined in assembly `B` and `X` in assembly `C`.",
        "createdAt": "2023-02-08T11:04:04Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I want to raise awareness that there are costs for generic methods in this context (extra JIT, possibly multiple JITted methods for each T held in memory, etc).\r\n\r\nIt's probably not that big of a deal, but can have costs that are harder to pin down.\r\n\r\nAny reason for not using an `object` parameter instead (i.e. many primitives that would box passed as the arg?",
              "createdAt": "2023-01-25T00:47:55Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "My understanding is that avoiding boxing is an explicit goal of this PR. I think I'd also favor generics over boxing in the no-tracing case.",
              "createdAt": "2023-01-30T14:04:07Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The main motivator was that these methods are called even when the tracing is disabled. I wanted to prevent allocation of ```object[]``` and boxing of value types. These overloads are short, and when T is value type, it's usually ```int```. I'm not sure that CLR is JITing this method for every T. I believe there is one compiled method for any reference type and specialized variations just for value types.",
              "createdAt": "2023-02-07T15:06:35Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The JIT should be smart enough to inline this if it were just `Trace(nodeId: -1, format, arg0)`",
              "createdAt": "2023-01-25T00:48:53Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Yes, this can remove some lines. Thanks for suggestion. Originally, I tried to move ```nodeId``` and make it optional, but overload with ```params object[]``` was preferred by compiler in cases where I wanted to invoke different method :)",
              "createdAt": "2023-02-08T12:36:09Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think calling `ToString` on arguments is desired here. The format string may control how the values should be formatted (decimal places, date-time format, alignment, ..) so argument types should be preserved.\r\n\r\n```suggestion\r\n                TraceCore(nodeId: -1, string.Format(format, arg0));\r\n```\r\n\r\nMay not make a difference with current usage patterns but why not be future-proof (especially if it's actually less code!)",
              "createdAt": "2023-01-30T13:57:42Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The `ToString()` is to avoid boxing `arg0`, but you are right that it might mess with number formatting like `{0:x}`",
              "createdAt": "2023-01-30T20:37:22Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Yep, if tracing is enabled I think we're fine with boxing. The cost is negligible compared to string formatting and I/O. Also, if it hypothetically mattered, I'm not sure if it really is cheaper.\r\n\r\n1. With `ToString` (on a value type). Some formatting calculation + string allocation.\r\n2. Without `ToString` (passing a value type). Boxing + formatting calculation in `string.Format`.\r\n\r\nThere's an allocation is both cases.",
              "createdAt": "2023-01-31T07:45:12Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good point. These calls are behind check.",
              "createdAt": "2023-02-07T15:14:32Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Unresolving this to ask: should this apply to all the `ToString` calls that are new in this PR? I think the reasoning that the format string could eventually contain something type-specific (like float precision) applies elsewhere.",
              "createdAt": "2023-02-07T15:27:49Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It was probably \"resolved\" when I committed suggestion. I removed rest of these invocations in new commit.",
              "createdAt": "2023-02-08T10:23:16Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -665,12 +665,78 @@ internal static int GetIntegerVariableOrDefault(string environmentVariable, int\n             return defaultValue;\n         }\n \n+        /// <summary>\n+        /// Writes trace information to a log file\n+        /// </summary>\n+        internal static void Trace<T>(string format, T arg0)\n+        {\n+            if (s_trace)\n+            {\n+                TraceCore(nodeId: -1, string.Format(format, arg0.ToString()));",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why unindent this?",
              "createdAt": "2023-02-07T23:10:53Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -608,7 +608,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string archi\n             switch (clrVersion)\n             {\n                 case 0:\n-                    // Not a taskhost, runtime must match\n+                // Not a taskhost, runtime must match",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It was automatic formatting change. I don't know why the formatter did that just for this case, but I reverted it. ",
              "createdAt": "2023-02-08T10:19:43Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -608,7 +608,7 @@ internal static HandshakeOptions GetHandshakeOptions(bool taskHost, string archi\n             switch (clrVersion)\n             {\n                 case 0:\n-                    // Not a taskhost, runtime must match\n+                // Not a taskhost, runtime must match",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}