{
  "number": 10914,
  "title": "Error handling for failures on registered actions for Custom Checks",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/10522\r\n\r\n### Context\r\nSecond PR for that issue. This PR covers the cases in a Custom Check where there is an exception while registering actions, and when running said actions.\r\nSince actions are individuals, we do not deregister the whole analyzer when one fails.\r\n\r\nIt has been decided to expose these errors are warnings instead to not break the build where they show up.\r\n\r\n### Changes Made\r\nAdded some try catch statements so errors do not break builds. Messages have been added to each case for more detail as we do not preserve anything else from the exception.\r\n\r\n### Testing\r\nReenabled unit test and added the previously commented out cases.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-10-30T17:49:16Z",
  "updatedAt": "2025-03-10T15:05:15Z",
  "closedAt": "2024-11-11T10:08:47Z",
  "mergedAt": "2024-11-11T10:08:47Z",
  "additions": 62,
  "deletions": 23,
  "changedFiles": 5,
  "headRefName": "10522",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e0c26fe5200df5915f5c4e85003661e7cbd6c674",
          "message": "Added error handling when registering actions",
          "committedDate": "2024-10-30T15:05:12Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cec0cff7bb48c0c7f9ab31e821791815abd43690",
          "message": "Added error handling when running registered actions",
          "committedDate": "2024-10-30T17:38:28Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ca2052641afd8bd2e5eb666a8dd9a47f6ee7a08",
          "message": "Removed unecessary imports",
          "committedDate": "2024-10-30T17:46:45Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2de3d7846d98f4af62e5f555516d2e090f6253f",
          "message": "PR comments and better handling on error in actions",
          "committedDate": "2024-11-07T18:15:42Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abef18f8c0e328f62829f08bb94246f0a26f3f6d",
          "message": "Addressed PR comments",
          "committedDate": "2024-11-08T15:29:07Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "551a947d11f0c7e060fd851ba56ee579ef458f82",
          "message": "fix build",
          "committedDate": "2024-11-08T15:47:03Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Prefer the `BuildCheckConfigurationException` that takes the innerExcpetion argument - not to loose the original stack of the problem",
              "createdAt": "2024-10-31T13:01:57Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -272,7 +272,15 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr\n                 // Create the wrapper and register to central context\n                 wrapper.StartNewProject(projectFullPath, configurations, userEditorConfigs);\n                 var wrappedContext = new CheckRegistrationContext(wrapper, _buildCheckCentralContext);\n-                check.RegisterActions(wrappedContext);\n+                try\n+                {\n+                    check.RegisterActions(wrappedContext);\n+                }\n+                catch (Exception e)\n+                {\n+                    throw new BuildCheckConfigurationException(",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I did not add it before because we already lose the exception, since we log it as a warning. But adding just in case for the future.",
              "createdAt": "2024-11-07T18:17:18Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -272,7 +272,15 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr\n                 // Create the wrapper and register to central context\n                 wrapper.StartNewProject(projectFullPath, configurations, userEditorConfigs);\n                 var wrappedContext = new CheckRegistrationContext(wrapper, _buildCheckCentralContext);\n-                check.RegisterActions(wrappedContext);\n+                try\n+                {\n+                    check.RegisterActions(wrappedContext);\n+                }\n+                catch (Exception e)\n+                {\n+                    throw new BuildCheckConfigurationException(",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's scope the try/catch just to the calling of callback - the creation of the context should not throw.\r\n\r\nWe should as well deregister the check upon it experiencing unhandled error. The `BuildCheckCentralContext` already has a convenient callback for that (`_removeThrottledChecks`) - it just need to be adjusted to take the reason message for the deregistration - and then the same callbeck can be used to remove throttled checks (`checkCallback.Item1.IsThrottled == true`) and checks that receive exception here",
              "createdAt": "2024-10-31T13:10:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs",
              "diffHunk": "@@ -219,15 +220,26 @@ private void RunRegisteredActions<T>(\n             // Here we might want to check the configPerRule[0].EvaluationsCheckScope - if the input data supports that\n             // The decision and implementation depends on the outcome of the investigation tracked in:\n             // https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57851137\n-\n-            BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(\n-                checkCallback.Item1,\n-                checkContext,\n-                configPerRule,\n-                resultHandler,\n-                checkData);\n-\n-            checkCallback.Item2(context);\n+            try\n+            {\n+                BuildCheckDataContext<T> context = new BuildCheckDataContext<T>(\n+                    checkCallback.Item1,\n+                    checkContext,\n+                    configPerRule,\n+                    resultHandler,\n+                    checkData);\n+\n+                checkCallback.Item2(context);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    throw new BuildCheckConfigurationException(message, e);\r\n```\r\n\r\nLet`s not lose the info",
              "createdAt": "2024-11-08T11:27:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -272,7 +272,22 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr\n                 // Create the wrapper and register to central context\n                 wrapper.StartNewProject(projectFullPath, configurations, userEditorConfigs);\n                 var wrappedContext = new CheckRegistrationContext(wrapper, _buildCheckCentralContext);\n-                check.RegisterActions(wrappedContext);\n+                try\n+                {\n+                    check.RegisterActions(wrappedContext);\n+                }\n+                catch (Exception e)\n+                {\n+                    string message = $\"The check '{check.FriendlyName}' failed to register actions with the following message: '{e.Message}'\";\n+                    if (e.InnerException is null)\n+                    {\n+                        throw new BuildCheckConfigurationException(message);\n+                    }\n+                    else\n+                    {\n+                        throw new BuildCheckConfigurationException(message, e.InnerException);\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`RemoveChecks` and `RemoveThrottledChecks` both are removing checks that are matching some condition - can we unify those?",
              "createdAt": "2024-11-08T11:32:09Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -340,6 +355,19 @@ public void RemoveThrottledChecks(ICheckContext checkContext)\n             }\n         }\n \n+        public void RemoveChecks(List<CheckWrapper> checkToRemove, ICheckContext checkContext)\n+        {\n+            foreach (CheckWrapper check in checkToRemove)\n+            {\n+                var checkFactory = _checkRegistry.Find(c => c.MaterializedCheck == check);\n+                if (checkFactory is not null)\n+                {\n+                    checkContext.DispatchAsCommentFromText(MessageImportance.High, $\"Dismounting check '{check.Check.FriendlyName}'\");\n+                    RemoveCheck(checkFactory);\n+                }\n+            }\n+        }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's put the reason - something like 'Dismounting check 'xyz' due to unhandled exception thrown by the check.'",
              "createdAt": "2024-11-08T11:33:40Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -340,6 +355,19 @@ public void RemoveThrottledChecks(ICheckContext checkContext)\n             }\n         }\n \n+        public void RemoveChecks(List<CheckWrapper> checkToRemove, ICheckContext checkContext)\n+        {\n+            foreach (CheckWrapper check in checkToRemove)\n+            {\n+                var checkFactory = _checkRegistry.Find(c => c.MaterializedCheck == check);\n+                if (checkFactory is not null)\n+                {\n+                    checkContext.DispatchAsCommentFromText(MessageImportance.High, $\"Dismounting check '{check.Check.FriendlyName}'\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's allocate this only when we experience error.\r\n\r\nWe can be processing large amounts of data events (e.g. for property reads/writes - those might be very frequent) and in majority of builds there should be no exceptions during processing.",
              "createdAt": "2024-11-08T11:35:57Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs",
              "diffHunk": "@@ -189,6 +196,7 @@ private void RunRegisteredActions<T>(\n     where T : CheckData\n     {\n         string projectFullPath = checkData.ProjectFilePath;\n+        List<CheckWrapper> checksToRemove = [];",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}