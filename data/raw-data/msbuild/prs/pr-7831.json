{
  "number": 7831,
  "title": "Simplify exception handling for graph builds",
  "body": "Just some cleanup and simplification in the exception handling for graph builds.\r\n\r\nFunctionally here are the differences:\r\n* `ParallelWorkSet` now throws an aggregate exception containing all exceptions instead of just the first exception that gets thrown.\r\n* `ParallelWorkSet` tasks no longer go away when they throw. They're caught and added to a list used in the point above.\r\n* `BuildManager` now properly logs invalid project errors for *each* invalid project (due to the help of the points above). Previously it was attempting to catch the agg exception which was never thrown and also the way it was in the catch effectively made it unreachable in the first place.\r\n* `GraphBuildResult` now exposes the `CircularDependencyException` via the `Exception` field instead of `Exception` being null while `CircularDependency` was true.",
  "state": "MERGED",
  "createdAt": "2022-07-15T19:24:37Z",
  "updatedAt": "2022-07-16T05:30:46Z",
  "closedAt": "2022-07-16T02:10:11Z",
  "mergedAt": "2022-07-16T02:10:11Z",
  "additions": 171,
  "deletions": 147,
  "changedFiles": 8,
  "headRefName": "cleanup-graph-exception-handling",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3a0b58e898ade8e3bf7668345ebde054ee627a50",
          "message": "Simplify exception handling for graph builds",
          "committedDate": "2022-07-15T19:19:08Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56737a1880db8793ecd14788186ad2750adf61a7",
          "message": "Fix UT",
          "committedDate": "2022-07-15T19:55:18Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1223c9a6b4c9ca2567f7546a0592ebee6dbfb384",
          "message": "More UT fixes",
          "committedDate": "2022-07-15T20:02:38Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf45f58f7d3e610470a93cee961ba242851acb65",
          "message": "Don't dump stack for CircularDependencyException in XMake.cs",
          "committedDate": "2022-07-15T20:28:59Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Compare before and after when there are multiple invalid projects in the graph:\r\n\r\n```\r\nC:\\Users\\David\\Code\\tmp>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" a.proj /graph\r\nMicrosoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 7/15/2022 1:52:16 PM.\r\nC:\\Users\\David\\Code\\tmp\\d.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\n\r\nBuild FAILED.\r\n\r\n  C:\\Users\\David\\Code\\tmp\\d.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.02\r\n\r\nC:\\Users\\David\\Code\\tmp>C:\\Users\\David\\Code\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\msbuild.exe a.proj /graph\r\nMSBuild version 17.4.0-dev-22365-01+1223c9a6b for .NET Framework\r\nBuild started 7/15/2022 1:52:22 PM.\r\nC:\\Users\\David\\Code\\tmp\\c.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\nC:\\Users\\David\\Code\\tmp\\d.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\n\r\nBuild FAILED.\r\n\r\n  C:\\Users\\David\\Code\\tmp\\c.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\n  C:\\Users\\David\\Code\\tmp\\d.proj(1,1): error MSB4068: The element <ProjectWhat> is unrecognized, or not supported in this context.\r\n\r\n    0 Warning(s)\r\n    2 Error(s)\r\n\r\nTime Elapsed 00:00:00.25\r\n```",
        "createdAt": "2022-07-15T20:53:30Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Two questions:\r\nDoes this get the right line number, column number, etc.? Maybe have to use one of the constructors with more parameters?\r\nDoesn't this mean we aren't retaining if this has already been logged?",
              "createdAt": "2022-07-15T19:55:54Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1723,19 +1723,35 @@ private void WaitForAllLoggingServiceEventsToBeProcessed()\n         /// </summary>\n         private void HandleSubmissionException(GraphBuildSubmission submission, Exception ex)\n         {\n-            if (ex is InvalidProjectFileException projectException)\n+            if (ex is AggregateException ae)\n             {\n-                if (!projectException.HasBeenLogged)\n+                // If there's exactly 1, just flatten it\n+                if (ae.InnerExceptions.Count == 1)\n                 {\n-                    BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-                    ((IBuildComponentHost)this).LoggingService.LogInvalidProjectFileError(buildEventContext, projectException);\n-                    projectException.HasBeenLogged = true;\n+                    ex = ae.InnerExceptions[0];\n+                }\n+                else\n+                {\n+                    // Log each InvalidProjectFileException encountered during ProjectGraph creation\n+                    foreach (Exception innerException in ae.InnerExceptions)\n+                    {\n+                        if (innerException is InvalidProjectFileException innerProjectException)\n+                        {\n+                            LogInvalidProjectFileError(innerProjectException);\n+                        }\n+                    }\n                 }\n             }\n \n-            ex = ex is AggregateException ae && ae.InnerExceptions.Count == 1\n-                ? ae.InnerExceptions.First()\n-                : ex;\n+            if (ex is InvalidProjectFileException projectException)\n+            {\n+                LogInvalidProjectFileError(projectException);\n+            }\n+\n+            if (ex is CircularDependencyException)\n+            {\n+                LogInvalidProjectFileError(new InvalidProjectFileException(ex.Message, ex));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "After the latest iteration, it looks like this:\r\n\r\n```\r\nMSBuild version 17.4.0-dev-22365-01+1223c9a6b for .NET Framework\r\nBuild started 7/15/2022 1:28:30 PM.\r\nMSBUILD : error : MSB4251: There is a circular dependency involving the following projects:\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\a.proj ->\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\b.proj ->\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\a.proj\r\n\r\nBuild FAILED.\r\n\r\n  MSBUILD : error : MSB4251: There is a circular dependency involving the following projects:\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\a.proj ->\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\b.proj ->\r\nMSBUILD : error : C:\\Users\\David\\Code\\tmp\\a.proj\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.25\r\n```\r\n\r\nI don't think there are line numbers to give really since this isn't like non-graph builds where the circular dependency comes from a specific `<MSBuild>` task call. I guess in a graph build it comes from a `<ProjectReference>`, but we don't really keep the xml elements around to figure out where those are.",
              "createdAt": "2022-07-15T20:31:26Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1723,19 +1723,35 @@ private void WaitForAllLoggingServiceEventsToBeProcessed()\n         /// </summary>\n         private void HandleSubmissionException(GraphBuildSubmission submission, Exception ex)\n         {\n-            if (ex is InvalidProjectFileException projectException)\n+            if (ex is AggregateException ae)\n             {\n-                if (!projectException.HasBeenLogged)\n+                // If there's exactly 1, just flatten it\n+                if (ae.InnerExceptions.Count == 1)\n                 {\n-                    BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-                    ((IBuildComponentHost)this).LoggingService.LogInvalidProjectFileError(buildEventContext, projectException);\n-                    projectException.HasBeenLogged = true;\n+                    ex = ae.InnerExceptions[0];\n+                }\n+                else\n+                {\n+                    // Log each InvalidProjectFileException encountered during ProjectGraph creation\n+                    foreach (Exception innerException in ae.InnerExceptions)\n+                    {\n+                        if (innerException is InvalidProjectFileException innerProjectException)\n+                        {\n+                            LogInvalidProjectFileError(innerProjectException);\n+                        }\n+                    }\n                 }\n             }\n \n-            ex = ex is AggregateException ae && ae.InnerExceptions.Count == 1\n-                ? ae.InnerExceptions.First()\n-                : ex;\n+            if (ex is InvalidProjectFileException projectException)\n+            {\n+                LogInvalidProjectFileError(projectException);\n+            }\n+\n+            if (ex is CircularDependencyException)\n+            {\n+                LogInvalidProjectFileError(new InvalidProjectFileException(ex.Message, ex));",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Compare with today's pretty awful behavior:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 7/15/2022 1:43:31 PM.\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.03\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nMicrosoft.Build.Exceptions.CircularDependencyException: MSB4251: There is a circular dependency involving the following projects:\r\nC:\\Users\\David\\Code\\tmp\\a.proj ->\r\nC:\\Users\\David\\Code\\tmp\\b.proj ->\r\nC:\\Users\\David\\Code\\tmp\\a.proj\r\n   at Microsoft.Build.Graph.GraphBuilder.<DetectCycles>g__VisitNode|32_0(ProjectGraphNode node, IDictionary`2 nodeState)\r\n   at Microsoft.Build.Graph.GraphBuilder.DetectCycles(IReadOnlyCollection`1 entryPointNodes, ProjectInterpretation projectInterpretation, Dictionary`2 allParsedProjects)\r\n   at Microsoft.Build.Graph.GraphBuilder.BuildGraph()\r\n   at Microsoft.Build.Graph.ProjectGraph..ctor(IEnumerable`1 entryPoints, ProjectCollection projectCollection, ProjectInstanceFactoryFunc projectInstanceFactory, Int32 degreeOfParallelism, CancellationToken cancellationToken)\r\n   at Microsoft.Build.Execution.BuildManager.ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\r\n   at Microsoft.Build.Execution.BuildManager.<>c__DisplayClass85_0.<ExecuteSubmission>b__0()\r\n\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nMicrosoft.Build.Exceptions.CircularDependencyException: MSB4251: There is a circular dependency involving the following projects:\r\nC:\\Users\\David\\Code\\tmp\\a.proj ->\r\nC:\\Users\\David\\Code\\tmp\\b.proj ->\r\nC:\\Users\\David\\Code\\tmp\\a.proj\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Boolean needToValidateProject, String schemaFile, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsNotAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, Boolean isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache, String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n\r\nUnhandled Exception: Microsoft.Build.Exceptions.CircularDependencyException: MSB4251: There is a circular dependency involving the following projects:\r\nC:\\Users\\David\\Code\\tmp\\a.proj ->\r\nC:\\Users\\David\\Code\\tmp\\b.proj ->\r\nC:\\Users\\David\\Code\\tmp\\a.proj\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Boolean needToValidateProject, String schemaFile, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsNotAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, Boolean isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache, String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main()\r\n```",
              "createdAt": "2022-07-15T20:47:21Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1723,19 +1723,35 @@ private void WaitForAllLoggingServiceEventsToBeProcessed()\n         /// </summary>\n         private void HandleSubmissionException(GraphBuildSubmission submission, Exception ex)\n         {\n-            if (ex is InvalidProjectFileException projectException)\n+            if (ex is AggregateException ae)\n             {\n-                if (!projectException.HasBeenLogged)\n+                // If there's exactly 1, just flatten it\n+                if (ae.InnerExceptions.Count == 1)\n                 {\n-                    BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-                    ((IBuildComponentHost)this).LoggingService.LogInvalidProjectFileError(buildEventContext, projectException);\n-                    projectException.HasBeenLogged = true;\n+                    ex = ae.InnerExceptions[0];\n+                }\n+                else\n+                {\n+                    // Log each InvalidProjectFileException encountered during ProjectGraph creation\n+                    foreach (Exception innerException in ae.InnerExceptions)\n+                    {\n+                        if (innerException is InvalidProjectFileException innerProjectException)\n+                        {\n+                            LogInvalidProjectFileError(innerProjectException);\n+                        }\n+                    }\n                 }\n             }\n \n-            ex = ex is AggregateException ae && ae.InnerExceptions.Count == 1\n-                ? ae.InnerExceptions.First()\n-                : ex;\n+            if (ex is InvalidProjectFileException projectException)\n+            {\n+                LogInvalidProjectFileError(projectException);\n+            }\n+\n+            if (ex is CircularDependencyException)\n+            {\n+                LogInvalidProjectFileError(new InvalidProjectFileException(ex.Message, ex));",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f",
              "createdAt": "2022-07-15T20:05:16Z",
              "path": "src/Build.UnitTests/Graph/ParallelWorkSet_Tests.cs",
              "diffHunk": "@@ -55,7 +54,7 @@ public void GivenExceptionsOnCompletionThread_CompletesAndThrowsException()\n                         WorkFunc = () => throw new Exception()\n                     }\n                 },\n-                ShouldExpectException = true\n+                NumExpectedExceptions = 3",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you assert the ordering here? The previous version seemed to assert project2 was always first.",
              "createdAt": "2022-07-15T20:06:24Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4211,30 +4211,40 @@ public void GraphBuildInvalid()\n         {\n             string project1 = _env.CreateFile(\".proj\").Path;\n             string project2 = _env.CreateFile(\".proj\").Path;\n+            string project3 = _env.CreateFile(\".proj\").Path;\n \n             File.WriteAllText(project1, CleanupFileContents($@\"\n <Project>\n   <ItemGroup>\n     <ProjectReferenceTargets Include='Build' Targets='Build' />\n     <ProjectReference Include='{project2}' />\n+    <ProjectReference Include='{project3}' />\n   </ItemGroup>\n   <Target Name='Build'>\n-    <MsBuild Projects='{project2}' Targets='Build' />\n+    <MsBuild Projects='@(ProjectReference)' Targets='Build' />\n   </Target>\n </Project>\n \"));\n             File.WriteAllText(project2, CleanupFileContents(@\"\n <Project>\n   <WellThisIsntValid>\n </Project>\n+\"));\n+            File.WriteAllText(project3, CleanupFileContents(@\"\n+<Project>\n+  <WellThisIsntValid>\n+</Project>\n \"));\n \n             var data = new GraphBuildRequestData(new ProjectGraphEntryPoint(project1), Array.Empty<string>());\n \n             GraphBuildResult result = _buildManager.Build(_parameters, data);\n-            result.OverallResult.ShouldBe(BuildResultCode.Failure);\n-            result.Exception.ShouldBeOfType<InvalidProjectFileException>()\n-                .ProjectFile.ShouldBe(project2);\n+            result.ShouldHaveFailed();\n+\n+            AggregateException aggException = result.Exception.ShouldBeOfType<AggregateException>();\n+            aggException.InnerExceptions.Count.ShouldBe(2);\n+            aggException.InnerExceptions[0].ShouldBeOfType<InvalidProjectFileException>().ProjectFile.ShouldBeOneOf(project2, project3);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Oh, because there was no project3. Never mind.",
              "createdAt": "2022-07-15T20:06:47Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4211,30 +4211,40 @@ public void GraphBuildInvalid()\n         {\n             string project1 = _env.CreateFile(\".proj\").Path;\n             string project2 = _env.CreateFile(\".proj\").Path;\n+            string project3 = _env.CreateFile(\".proj\").Path;\n \n             File.WriteAllText(project1, CleanupFileContents($@\"\n <Project>\n   <ItemGroup>\n     <ProjectReferenceTargets Include='Build' Targets='Build' />\n     <ProjectReference Include='{project2}' />\n+    <ProjectReference Include='{project3}' />\n   </ItemGroup>\n   <Target Name='Build'>\n-    <MsBuild Projects='{project2}' Targets='Build' />\n+    <MsBuild Projects='@(ProjectReference)' Targets='Build' />\n   </Target>\n </Project>\n \"));\n             File.WriteAllText(project2, CleanupFileContents(@\"\n <Project>\n   <WellThisIsntValid>\n </Project>\n+\"));\n+            File.WriteAllText(project3, CleanupFileContents(@\"\n+<Project>\n+  <WellThisIsntValid>\n+</Project>\n \"));\n \n             var data = new GraphBuildRequestData(new ProjectGraphEntryPoint(project1), Array.Empty<string>());\n \n             GraphBuildResult result = _buildManager.Build(_parameters, data);\n-            result.OverallResult.ShouldBe(BuildResultCode.Failure);\n-            result.Exception.ShouldBeOfType<InvalidProjectFileException>()\n-                .ProjectFile.ShouldBe(project2);\n+            result.ShouldHaveFailed();\n+\n+            AggregateException aggException = result.Exception.ShouldBeOfType<AggregateException>();\n+            aggException.InnerExceptions.Count.ShouldBe(2);\n+            aggException.InnerExceptions[0].ShouldBeOfType<InvalidProjectFileException>().ProjectFile.ShouldBeOneOf(project2, project3);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException || innerException is CircularDependencyException))\r\n```\r\n?",
              "createdAt": "2022-07-15T20:30:52Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1296,7 +1296,8 @@ string[] commandLine\n \n                         // InvalidProjectFileExceptions and its aggregates have already been logged.\n                         if (exception is not InvalidProjectFileException\n-                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException)))\n+                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It actually has to be `&& exception is not CircularDependencyException`",
              "createdAt": "2022-07-15T20:32:12Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1296,7 +1296,8 @@ string[] commandLine\n \n                         // InvalidProjectFileExceptions and its aggregates have already been logged.\n                         if (exception is not InvalidProjectFileException\n-                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException)))\n+                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException))",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "You already added that one; I meant within the AggregateException. I imagine it's ok if it's an aggregation of InvalidProjectFileExceptions and CircularDependencyExceptions, right?",
              "createdAt": "2022-07-15T20:36:36Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1296,7 +1296,8 @@ string[] commandLine\n \n                         // InvalidProjectFileExceptions and its aggregates have already been logged.\n                         if (exception is not InvalidProjectFileException\n-                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException)))\n+                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think a `InvalidProjectFileException` and `CircularDependencyException` are both possible at the same time. I think all projects are evaluated and then as a separate pass the edges are added and that's where circular dependencies are detected. The 1st pass would error with `InvalidProjectFileException`s",
              "createdAt": "2022-07-15T20:46:22Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1296,7 +1296,8 @@ string[] commandLine\n \n                         // InvalidProjectFileExceptions and its aggregates have already been logged.\n                         if (exception is not InvalidProjectFileException\n-                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException)))\n+                            && !(exception is AggregateException aggregateException && aggregateException.InnerExceptions.All(innerException => innerException is InvalidProjectFileException))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}