{
  "number": 10920,
  "title": "migrate VS insertion release pipelines",
  "body": "### Fixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/2224557\r\n### Context\r\nour VS insertion pipelines should use 1ES template\r\n\r\n### Changes Made\r\nnew pipelines vs-insertion.yml, vs-insertion-experimental.yml - they will replace Release pipelines - main/ vs1x.y/ experimental\r\n\r\n\r\n### Testing\r\nmanual in AzDO, but the final usability has to be tested in merged state",
  "state": "MERGED",
  "createdAt": "2024-11-01T11:23:14Z",
  "updatedAt": "2024-11-06T09:36:08Z",
  "closedAt": "2024-11-06T09:36:06Z",
  "mergedAt": "2024-11-06T09:36:06Z",
  "additions": 326,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "dev/janpro/migrate-release-pipelines",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "aed2543ee82f853150f565251d014fed8f031d18",
          "message": "migrate release pipelines",
          "committedDate": "2024-11-01T11:20:04Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the emoji required? I find them very noisy in the AzDO build pages and wish there were fewer injected by the 1ES template stuff.",
              "createdAt": "2024-11-04T18:18:24Z",
              "path": "azure-pipelines/WIFtoPATauth.yml",
              "diffHunk": "@@ -0,0 +1,22 @@\n+parameters:\n+- name: deadPATServiceConnectionId # The GUID of the PAT-based service connection whose access token must be replaced.\n+  type: string\n+- name: wifServiceConnectionName # The name of the WIF service connection to use to get the access token.\n+  type: string\n+- name: resource # The scope for which the access token is requested.\n+  type: string\n+  default: 499b84ac-1321-427f-aa17-267ca6975798 # Azure Artifact feeds (any of them)\n+\n+steps:\n+- task: AzureCLI@2\n+  displayName: \ud83d\udd0f Authenticate with WIF service connection",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's not required, but it seems appropriate due to this being a 1ES thing (they all have emoji) and not something custom for us. I regret to inform you that 80% tasks in the pipeline are 1ES injected with emoji included.",
              "createdAt": "2024-11-04T18:37:49Z",
              "path": "azure-pipelines/WIFtoPATauth.yml",
              "diffHunk": "@@ -0,0 +1,22 @@\n+parameters:\n+- name: deadPATServiceConnectionId # The GUID of the PAT-based service connection whose access token must be replaced.\n+  type: string\n+- name: wifServiceConnectionName # The name of the WIF service connection to use to get the access token.\n+  type: string\n+- name: resource # The scope for which the access token is requested.\n+  type: string\n+  default: 499b84ac-1321-427f-aa17-267ca6975798 # Azure Artifact feeds (any of them)\n+\n+steps:\n+- task: AzureCLI@2\n+  displayName: \ud83d\udd0f Authenticate with WIF service connection",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this overridden later? Ideally the name of the insertion job would relate to the version of MSBuild being inserted rather than the date of insertion.",
              "createdAt": "2024-11-04T18:19:29Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I don't think so. This is just migrated. I had an issue with changing it and interaction with CI; but I had a bad grasp of pipelines at that time, it can be improved. Seems low prio though - the inserted version is visible in the insertion PR description.",
              "createdAt": "2024-11-04T18:45:25Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "(not blocking) Is this right? IIRC the insertion itself is supposed to pin the drop for the lifetime of the relevant VS builds as part of the VS side, and we could retain drops for just long enough to get them into VS. But I don't remember that with super high confidence so don't change this without confirming :)",
              "createdAt": "2024-11-04T18:23:20Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)\n+\n+schedules:\n+  - cron: '0 3 * * *'   # Runs every day at 3AM UTC\n+    displayName: Daily VS insertion\n+    branches:\n+      include:\n+        - main\n+        - vs*\n+    always: false # Don't run if there are no code changes\n+\n+parameters:\n+  - name: TargetBranch\n+    default: auto\n+    type: string\n+    displayName: 'Insertion Target Branch (recommended to use `auto`)'\n+    values:\n+      - auto\n+      - main\n+      - rel/d17.13\n+      - rel/d17.12\n+      - rel/d17.11\n+      - rel/d17.10\n+      - rel/d17.8\n+      - rel/d17.6\n+      - rel/d17.3\n+      - rel/d17.0\n+variables:\n+  # `auto` should work every time and selecting a branch in parameters is likely to fail due to incompatible versions in MSBuild and VS\n+  - name: AutoInsertTargetBranch\n+    ${{ if eq(variables['Build.SourceBranchName'], 'vs17.13') }}:\n+      value: 'rel/d17.13'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.12') }}:\n+      value: 'rel/d17.12'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.11') }}:\n+      value: 'rel/d17.11'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.10') }}:\n+      value: 'rel/d17.10'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.8') }}:\n+      value: 'rel/d17.8'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.6') }}:\n+      value: 'rel/d17.6'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.3') }}:\n+      value: 'rel/d17.3'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.0') }}:\n+      value: 'rel/d17.0'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'main') }}:\n+      value: 'main'\n+    ${{ else }}:\n+      value: ''\n+  - name: InsertTargetBranch\n+    ${{ if not(eq(parameters.TargetBranch, 'auto')) }}:\n+      value: ${{ parameters.TargetBranch }}\n+    ${{ else }}:\n+      value: $(AutoInsertTargetBranch)\n+  - name: InsertPropsValues\n+    #  servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core\n+    ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: \n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+    ${{ else }}:\n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+  - name:  TeamName\n+    value: msbuild\n+  - name: TeamEmail\n+    value: msbuild@microsoft.com\n+\n+resources:\n+  pipelines:\n+  - pipeline: 'MSBuild'\n+    project: 'DevDiv'\n+    source: 'MSBuild'\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n+    ref: refs/tags/release\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    pool:\n+      name: VSEngSS-MicroBuild2022-1ES\n+    customBuildTags:\n+    - ES365AIMigrationTooling-Release\n+    stages:\n+    - stage: RetainBuild\n+      displayName: Retain build\n+      jobs:\n+      - job: Job_1\n+        displayName: Run on agent\n+        condition: succeeded()\n+        timeoutInMinutes: 0\n+        steps:\n+          # Check that InsertTargetBranch is valid before running anything else.\n+        - task: PowerShell@2\n+          name: CheckInsertTargetBranch\n+          inputs:\n+            targetType: inline\n+            script: |\n+              if (\"$(InsertTargetBranch)\" -eq \"\") {\n+                Write-Error \"InsertTargetBranch is not set, this means your're not inserting from main or a valid servicing branch.\"\n+                exit 1\n+              }\n+        - task: MicroBuildRetainVstsDrops@1\n+          name: MicroBuildRetainVstsDrops_2\n+          displayName: Retain VSTS Drops\n+          inputs:\n+            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+            AccessToken: $(System.AccessToken)\n+            DropServiceUri: https://devdiv.artifacts.visualstudio.com/DefaultCollection\n+            # retain servicing indefinitely, main only for 183 days\n+            ${{ if eq(variables['InsertTargetBranch'], 'main') }}:\n+              DropRetentionDays: 183",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I will ask/gather info. This is migrated without me questioning it.",
              "createdAt": "2024-11-04T18:46:06Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)\n+\n+schedules:\n+  - cron: '0 3 * * *'   # Runs every day at 3AM UTC\n+    displayName: Daily VS insertion\n+    branches:\n+      include:\n+        - main\n+        - vs*\n+    always: false # Don't run if there are no code changes\n+\n+parameters:\n+  - name: TargetBranch\n+    default: auto\n+    type: string\n+    displayName: 'Insertion Target Branch (recommended to use `auto`)'\n+    values:\n+      - auto\n+      - main\n+      - rel/d17.13\n+      - rel/d17.12\n+      - rel/d17.11\n+      - rel/d17.10\n+      - rel/d17.8\n+      - rel/d17.6\n+      - rel/d17.3\n+      - rel/d17.0\n+variables:\n+  # `auto` should work every time and selecting a branch in parameters is likely to fail due to incompatible versions in MSBuild and VS\n+  - name: AutoInsertTargetBranch\n+    ${{ if eq(variables['Build.SourceBranchName'], 'vs17.13') }}:\n+      value: 'rel/d17.13'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.12') }}:\n+      value: 'rel/d17.12'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.11') }}:\n+      value: 'rel/d17.11'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.10') }}:\n+      value: 'rel/d17.10'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.8') }}:\n+      value: 'rel/d17.8'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.6') }}:\n+      value: 'rel/d17.6'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.3') }}:\n+      value: 'rel/d17.3'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.0') }}:\n+      value: 'rel/d17.0'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'main') }}:\n+      value: 'main'\n+    ${{ else }}:\n+      value: ''\n+  - name: InsertTargetBranch\n+    ${{ if not(eq(parameters.TargetBranch, 'auto')) }}:\n+      value: ${{ parameters.TargetBranch }}\n+    ${{ else }}:\n+      value: $(AutoInsertTargetBranch)\n+  - name: InsertPropsValues\n+    #  servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core\n+    ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: \n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+    ${{ else }}:\n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+  - name:  TeamName\n+    value: msbuild\n+  - name: TeamEmail\n+    value: msbuild@microsoft.com\n+\n+resources:\n+  pipelines:\n+  - pipeline: 'MSBuild'\n+    project: 'DevDiv'\n+    source: 'MSBuild'\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n+    ref: refs/tags/release\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    pool:\n+      name: VSEngSS-MicroBuild2022-1ES\n+    customBuildTags:\n+    - ES365AIMigrationTooling-Release\n+    stages:\n+    - stage: RetainBuild\n+      displayName: Retain build\n+      jobs:\n+      - job: Job_1\n+        displayName: Run on agent\n+        condition: succeeded()\n+        timeoutInMinutes: 0\n+        steps:\n+          # Check that InsertTargetBranch is valid before running anything else.\n+        - task: PowerShell@2\n+          name: CheckInsertTargetBranch\n+          inputs:\n+            targetType: inline\n+            script: |\n+              if (\"$(InsertTargetBranch)\" -eq \"\") {\n+                Write-Error \"InsertTargetBranch is not set, this means your're not inserting from main or a valid servicing branch.\"\n+                exit 1\n+              }\n+        - task: MicroBuildRetainVstsDrops@1\n+          name: MicroBuildRetainVstsDrops_2\n+          displayName: Retain VSTS Drops\n+          inputs:\n+            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+            AccessToken: $(System.AccessToken)\n+            DropServiceUri: https://devdiv.artifacts.visualstudio.com/DefaultCollection\n+            # retain servicing indefinitely, main only for 183 days\n+            ${{ if eq(variables['InsertTargetBranch'], 'main') }}:\n+              DropRetentionDays: 183",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "It's in the insertion task group but that's not used here. This uses the individual tasks from the group, so we need both.",
              "createdAt": "2024-11-05T10:04:08Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)\n+\n+schedules:\n+  - cron: '0 3 * * *'   # Runs every day at 3AM UTC\n+    displayName: Daily VS insertion\n+    branches:\n+      include:\n+        - main\n+        - vs*\n+    always: false # Don't run if there are no code changes\n+\n+parameters:\n+  - name: TargetBranch\n+    default: auto\n+    type: string\n+    displayName: 'Insertion Target Branch (recommended to use `auto`)'\n+    values:\n+      - auto\n+      - main\n+      - rel/d17.13\n+      - rel/d17.12\n+      - rel/d17.11\n+      - rel/d17.10\n+      - rel/d17.8\n+      - rel/d17.6\n+      - rel/d17.3\n+      - rel/d17.0\n+variables:\n+  # `auto` should work every time and selecting a branch in parameters is likely to fail due to incompatible versions in MSBuild and VS\n+  - name: AutoInsertTargetBranch\n+    ${{ if eq(variables['Build.SourceBranchName'], 'vs17.13') }}:\n+      value: 'rel/d17.13'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.12') }}:\n+      value: 'rel/d17.12'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.11') }}:\n+      value: 'rel/d17.11'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.10') }}:\n+      value: 'rel/d17.10'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.8') }}:\n+      value: 'rel/d17.8'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.6') }}:\n+      value: 'rel/d17.6'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.3') }}:\n+      value: 'rel/d17.3'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.0') }}:\n+      value: 'rel/d17.0'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'main') }}:\n+      value: 'main'\n+    ${{ else }}:\n+      value: ''\n+  - name: InsertTargetBranch\n+    ${{ if not(eq(parameters.TargetBranch, 'auto')) }}:\n+      value: ${{ parameters.TargetBranch }}\n+    ${{ else }}:\n+      value: $(AutoInsertTargetBranch)\n+  - name: InsertPropsValues\n+    #  servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core\n+    ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: \n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+    ${{ else }}:\n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+  - name:  TeamName\n+    value: msbuild\n+  - name: TeamEmail\n+    value: msbuild@microsoft.com\n+\n+resources:\n+  pipelines:\n+  - pipeline: 'MSBuild'\n+    project: 'DevDiv'\n+    source: 'MSBuild'\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n+    ref: refs/tags/release\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    pool:\n+      name: VSEngSS-MicroBuild2022-1ES\n+    customBuildTags:\n+    - ES365AIMigrationTooling-Release\n+    stages:\n+    - stage: RetainBuild\n+      displayName: Retain build\n+      jobs:\n+      - job: Job_1\n+        displayName: Run on agent\n+        condition: succeeded()\n+        timeoutInMinutes: 0\n+        steps:\n+          # Check that InsertTargetBranch is valid before running anything else.\n+        - task: PowerShell@2\n+          name: CheckInsertTargetBranch\n+          inputs:\n+            targetType: inline\n+            script: |\n+              if (\"$(InsertTargetBranch)\" -eq \"\") {\n+                Write-Error \"InsertTargetBranch is not set, this means your're not inserting from main or a valid servicing branch.\"\n+                exit 1\n+              }\n+        - task: MicroBuildRetainVstsDrops@1\n+          name: MicroBuildRetainVstsDrops_2\n+          displayName: Retain VSTS Drops\n+          inputs:\n+            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+            AccessToken: $(System.AccessToken)\n+            DropServiceUri: https://devdiv.artifacts.visualstudio.com/DefaultCollection\n+            # retain servicing indefinitely, main only for 183 days\n+            ${{ if eq(variables['InsertTargetBranch'], 'main') }}:\n+              DropRetentionDays: 183",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these two needed? I suspect not. Feel free to delete in a follow-up though.",
              "createdAt": "2024-11-04T18:24:16Z",
              "path": "azure-pipelines/vs-insertion.yml",
              "diffHunk": "@@ -0,0 +1,210 @@\n+# Create a VS insertion (DotNet-MSBuild-Trusted -> VS) from a build artifact on main or any servicing branch. \n+trigger: none\n+name: $(Date:yyyyMMdd).$(Rev:r)\n+\n+schedules:\n+  - cron: '0 3 * * *'   # Runs every day at 3AM UTC\n+    displayName: Daily VS insertion\n+    branches:\n+      include:\n+        - main\n+        - vs*\n+    always: false # Don't run if there are no code changes\n+\n+parameters:\n+  - name: TargetBranch\n+    default: auto\n+    type: string\n+    displayName: 'Insertion Target Branch (recommended to use `auto`)'\n+    values:\n+      - auto\n+      - main\n+      - rel/d17.13\n+      - rel/d17.12\n+      - rel/d17.11\n+      - rel/d17.10\n+      - rel/d17.8\n+      - rel/d17.6\n+      - rel/d17.3\n+      - rel/d17.0\n+variables:\n+  # `auto` should work every time and selecting a branch in parameters is likely to fail due to incompatible versions in MSBuild and VS\n+  - name: AutoInsertTargetBranch\n+    ${{ if eq(variables['Build.SourceBranchName'], 'vs17.13') }}:\n+      value: 'rel/d17.13'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.12') }}:\n+      value: 'rel/d17.12'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.11') }}:\n+      value: 'rel/d17.11'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.10') }}:\n+      value: 'rel/d17.10'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.8') }}:\n+      value: 'rel/d17.8'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.6') }}:\n+      value: 'rel/d17.6'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.3') }}:\n+      value: 'rel/d17.3'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'vs17.0') }}:\n+      value: 'rel/d17.0'\n+    ${{ elseif eq(variables['Build.SourceBranchName'], 'main') }}:\n+      value: 'main'\n+    ${{ else }}:\n+      value: ''\n+  - name: InsertTargetBranch\n+    ${{ if not(eq(parameters.TargetBranch, 'auto')) }}:\n+      value: ${{ parameters.TargetBranch }}\n+    ${{ else }}:\n+      value: $(AutoInsertTargetBranch)\n+  - name: InsertPropsValues\n+    #  servicing branches until 17.12 also include Microsoft.Build.Engine and Microsoft.Build.Conversion.Core\n+    ${{ if or(eq(variables['Build.SourceBranchName'], 'vs17.0'),  eq(variables['Build.SourceBranchName'], 'vs17.3'), eq(variables['Build.SourceBranchName'], 'vs17.6'),  eq(variables['Build.SourceBranchName'], 'vs17.8'), eq(variables['Build.SourceBranchName'], 'vs17.10'), eq(variables['Build.SourceBranchName'], 'vs17.11'), eq(variables['Build.SourceBranchName'], 'vs17.12')) }}: \n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Conversion.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Engine=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+    ${{ else }}:\n+      value: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion);Microsoft.Build=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Framework=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Tasks.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.Build.Utilities.Core=$(MicrosoftNETStringToolsPackageVersion);Microsoft.NET.StringTools=$(MicrosoftNETStringToolsPackageVersion)\n+  - name:  TeamName\n+    value: msbuild\n+  - name: TeamEmail\n+    value: msbuild@microsoft.com\n+\n+resources:\n+  pipelines:\n+  - pipeline: 'MSBuild'\n+    project: 'DevDiv'\n+    source: 'MSBuild'\n+  repositories:\n+  - repository: 1ESPipelineTemplates\n+    type: git\n+    name: 1ESPipelineTemplates/1ESPipelineTemplates\n+    ref: refs/tags/release\n+extends:\n+  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n+  parameters:\n+    pool:\n+      name: VSEngSS-MicroBuild2022-1ES\n+    customBuildTags:\n+    - ES365AIMigrationTooling-Release\n+    stages:\n+    - stage: RetainBuild\n+      displayName: Retain build\n+      jobs:\n+      - job: Job_1\n+        displayName: Run on agent\n+        condition: succeeded()\n+        timeoutInMinutes: 0\n+        steps:\n+          # Check that InsertTargetBranch is valid before running anything else.\n+        - task: PowerShell@2\n+          name: CheckInsertTargetBranch\n+          inputs:\n+            targetType: inline\n+            script: |\n+              if (\"$(InsertTargetBranch)\" -eq \"\") {\n+                Write-Error \"InsertTargetBranch is not set, this means your're not inserting from main or a valid servicing branch.\"\n+                exit 1\n+              }\n+        - task: MicroBuildRetainVstsDrops@1\n+          name: MicroBuildRetainVstsDrops_2\n+          displayName: Retain VSTS Drops\n+          inputs:\n+            DropNames: Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber)\n+            AccessToken: $(System.AccessToken)\n+            DropServiceUri: https://devdiv.artifacts.visualstudio.com/DefaultCollection\n+            # retain servicing indefinitely, main only for 183 days\n+            ${{ if eq(variables['InsertTargetBranch'], 'main') }}:\n+              DropRetentionDays: 183\n+    - stage: VSInsertion\n+      displayName: VS insertion\n+      dependsOn: RetainBuild\n+      variables:\n+          InsertConfigValues: VS.ExternalAPIs.MSBuild=$(MSBuild_ExtApisPackageVersion)\n+          InsertCustomScriptExecutionCommand: $(Pipeline.Workspace)\\xsd\\Update-MSBuildXsds.ps1\n+          InsertDescription: Insert MSBuild $(Build.BuildNumber) from the branch $(Build.SourceBranchName) at commit $(Build.SourceVersion). Corresponding package version is $(MSBuild_ExtApisPackageVersion)\n+          InsertJsonValues: Microsoft.Build.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.vsman,Microsoft.Build.Arm64.vsman{$(MSBuild_ExtApisPackageVersion)+$(Build.SourceVersion)}=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.Arm64.vsman,Microsoft.Build.UnGAC.vsman=https://vsdrop.corp.microsoft.com/file/v1/Products/DevDiv/DotNet-msbuild-Trusted/$(Build.SourceBranchName)/$(Build.BuildNumber);Microsoft.Build.UnGAC.vsman\n+          InsertPayloadName: MSBuild $(Build.SourceBranchName) $(Build.BuildNumber)\n+          SymbolsAgentPath: $(Pipeline.Workspace)\\$(Build.DefinitionName)\\Symbols\n+          SymbolsEmailContacts: raines\n+          SymbolsFeatureName: MSBuild\n+          SymbolsSymwebProject: DDE\n+          SymbolsUncPath: '\\\\cpvsbuild\\drops\\MSBuild\\symbols\\$(Build.DefinitionName)\\$(Build.BuildNumber)\\symbols.archive'\n+      jobs:\n+      - job: PushPackages\n+        displayName: Push Packages\n+        condition: succeeded()\n+        timeoutInMinutes: 0\n+        templateContext:\n+          inputs:\n+          - input: pipelineArtifact\n+            pipeline: 'MSBuild'\n+            artifactName: 'BuildLogs_SourceBuild_Managed_Attempt1'\n+            targetPath: '$(Pipeline.Workspace)/BuildLogs_SourceBuild_Managed_Attempt1'\n+          - input: pipelineArtifact\n+            pipeline: 'MSBuild'\n+            artifactName: 'build_Windows_NT_SBOM'\n+            targetPath: '$(Pipeline.Workspace)/build_Windows_NT_SBOM'",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}