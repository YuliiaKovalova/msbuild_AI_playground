{
  "number": 9215,
  "title": "Stabilize BuildRequest Engine tests",
  "body": "Fixes #9100 #9277\r\n\r\n### Context\r\nIn BuildRequestEngine_Tests the tests rely on `Thread.Sleep(250)` to wait for the engine status changes. It may cause the tests unstable.\r\nIn addition, because the status changed AutoResetEvent is not reset after the status change at some places, `WaitForEvent(_engineStatusChangedEvent, \"EngineStatusChanged\")` inside `VerifyEngineStatus(BuildRequestEngineStatus expectedStatus)` couldn't work correctly to wait for the expected status.\r\n\r\n### Changes Made\r\nInstead of `Thread.Sleep(250)`, rely on `VerifyEngineStatus(BuildRequestEngineStatus expectedStatus)` to wait. And after the operation that triggers the status change event, make sure the following in order.\r\n\r\n1. the status change finishes.\r\n2. the status changed AutoResetEvent is reset.\r\n\r\n### Testing\r\nN/A\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-09-12T08:42:55Z",
  "updatedAt": "2023-11-01T03:16:38Z",
  "closedAt": "2023-11-01T03:16:34Z",
  "mergedAt": "2023-11-01T03:16:34Z",
  "additions": 20,
  "deletions": 15,
  "changedFiles": 1,
  "headRefName": "flakytest-shutdownactiveengine",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": {
    "title": "VS 17.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "32cf05505b0de4b367676d3f093b30067de98793",
          "message": "Stabilize BuildRequest Engine tests",
          "committedDate": "2023-09-12T08:08:51Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff550b69fb5f35c1dd2e797f7e70776abe7e9677",
          "message": "Let the waithandle waitone after each status change to reset the state",
          "committedDate": "2023-09-19T06:22:30Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "As I understand it, this stabilizes the tests by waiting for 5 seconds instead of 250 ms but only if the engine status isn't already what's expected, and it has two wait handles: one for an exception and one for expected exit? From a stability perspective, is it meaningfully different than just increasing the sleep time to 5 seconds?",
        "createdAt": "2023-09-12T17:22:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> As I understand it, this stabilizes the tests by waiting for 5 seconds instead of 250 ms but only if the engine status isn't already what's expected, and it has two wait handles: one for an exception and one for expected exit? From a stability perspective, is it meaningfully different than just increasing the sleep time to 5 seconds?\r\n\r\nIf the engine status isn't the expected one yet, the signal set OnStatusChanged or OnEngineException is the exact one to stop waiting. If any of the two wait handles receives a signal before waiting timeouts (more than 5 seconds), it stops waiting at once. \r\nIf the engine status is already the expected one, it doesn't wait at all. But we need to make sure the status changed AutoResetEvent is reset.",
        "createdAt": "2023-09-13T03:11:32Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Uh - my eyes and my brain hurt looking on that test class logic :-) Those synchronization events shared between tests :sob: - those can trip baddly once any of the test scenarios goes unexpected path...\r\n\r\nAnyway - let's forget about that now and lets focus on a happy path now for simplification (that's what we want to stabilize).",
        "createdAt": "2023-09-18T13:03:21Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`_engineStatusChangedEvent` is AutoReset - so it should not need explicit `Reset` (any of all the added ones). \r\nOnly if it would not be explicitly Waited for - this can happen only if the `_engineExceptionEvent` was signaled - which already means test is failing (so not a happy path).\r\nThis being said - I'd remove all the added calls to `Reset` - as they should not change any logic, while they make the code even more complex.",
              "createdAt": "2023-09-18T13:04:54Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs",
              "diffHunk": "@@ -342,9 +342,15 @@ public void TestEngineShutdownWhileActive()\n \n             VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);\n             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));\n+            // We neeed to get the status changed AutoResetEvent returned to the non-signaled state correctly for verifying the engine status via waiting for a signal next time.\n+            // Make sure the status change finishes\n+            VerifyEngineStatus(BuildRequestEngineStatus.Idle);\n+            // Make sure the status changed AutoResetEvent is reset in case inside VerifyEngineStatus method it doesn't go to call WaitForEvent method.\n+            _engineStatusChangedEvent.Reset();\n+\n             _engine.SubmitBuildRequest(request);\n-            Thread.Sleep(250);\n             VerifyEngineStatus(BuildRequestEngineStatus.Active);\n+            _engineStatusChangedEvent.Reset();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Sometimes the status changes so fast that the status is already the expected one for `VerifyEngineStatus`. Then inside `VerifyEngineStatus` it doesn't execute waitone by the waithandle, neither reset the signal state (see below). Next wait may be given with the signal set by previous status change. So explicit reset was added.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1b84c9b5c6d264bab83114c6749def66d5656e6b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs#L516-L521\r\nAfter a second thought, probably it's better to let the waithandle waitone after each status change by changing the following snippet from the above, rather than explicit reset.\r\n```\r\n if (engine.Status == expectedStatus) \r\n { \r\n     return; \r\n } \r\n```",
              "createdAt": "2023-09-19T03:17:47Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs",
              "diffHunk": "@@ -342,9 +342,15 @@ public void TestEngineShutdownWhileActive()\n \n             VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);\n             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));\n+            // We neeed to get the status changed AutoResetEvent returned to the non-signaled state correctly for verifying the engine status via waiting for a signal next time.\n+            // Make sure the status change finishes\n+            VerifyEngineStatus(BuildRequestEngineStatus.Idle);\n+            // Make sure the status changed AutoResetEvent is reset in case inside VerifyEngineStatus method it doesn't go to call WaitForEvent method.\n+            _engineStatusChangedEvent.Reset();\n+\n             _engine.SubmitBuildRequest(request);\n-            Thread.Sleep(250);\n             VerifyEngineStatus(BuildRequestEngineStatus.Active);\n+            _engineStatusChangedEvent.Reset();",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The added `VerifyEngineStatus` for the additional states looks good to me (here and all the others)!\r\n\r\nIt's true that it's actually very similar to extending the sleep (as mentioned by @Forgind) - however it's more fail-fast and succeed-fast then just sleep. ",
              "createdAt": "2023-09-18T13:07:27Z",
              "path": "src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs",
              "diffHunk": "@@ -342,9 +342,15 @@ public void TestEngineShutdownWhileActive()\n \n             VerifyEngineStatus(BuildRequestEngineStatus.Uninitialized);\n             _engine.InitializeForBuild(new NodeLoggingContext(_host.LoggingService, 0, false));\n+            // We neeed to get the status changed AutoResetEvent returned to the non-signaled state correctly for verifying the engine status via waiting for a signal next time.\n+            // Make sure the status change finishes\n+            VerifyEngineStatus(BuildRequestEngineStatus.Idle);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}