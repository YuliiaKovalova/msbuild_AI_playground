{
  "number": 9135,
  "title": "Fix terminal logger working in combination with binary logger.",
  "body": "Fixes #9098\r\n\r\n### Context\r\nTerminal logger does not work well in combination with other loggers so that they could miss information.\r\n\r\n### Changes Made\r\n- Fixed terminal logger\r\n- Added tests for terminal logger working together with other loggers. \r\n\r\n### Testing\r\nLocal tests, CI tests\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2023-08-17T12:30:52Z",
  "updatedAt": "2023-08-23T13:39:10Z",
  "closedAt": "2023-08-23T13:39:09Z",
  "mergedAt": "2023-08-23T13:39:09Z",
  "additions": 78,
  "deletions": 7,
  "changedFiles": 2,
  "headRefName": "binlog-tl-issue",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0a350af496629a68e3ef3f66d144ff5b6053b941",
          "message": "Fix terminal logger.",
          "committedDate": "2023-08-17T12:20:34Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a126698e00871cf089301d5ddda07c71983d987",
          "message": "Merge remote-tracking branch 'origin/main' into binlog-tl-issue",
          "committedDate": "2023-08-18T08:27:47Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "704fb88cf20902acfcfe84e3cb59c93039dec933",
          "message": "Remove switch: no need",
          "committedDate": "2023-08-18T09:01:40Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14d8b689e2d3bce3aa27a56b29c5bf437b3c2073",
          "message": "Address PR comments.",
          "committedDate": "2023-08-22T15:32:01Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this necessary? Couldn't this be achieved by a standard switch or mechanism?\r\nI'm not a big fan of modifying production code just for test(s).\r\n\r\ncc: @rokonec ",
              "createdAt": "2023-08-18T08:30:22Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2570,6 +2570,11 @@ private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches comma\n \n             static bool DoesEnvironmentSupportTerminalLogger()\n             {\n+                if (Environment.GetEnvironmentVariable(\"MSBUILDTESTINGFORCETERMINALLOGGERUSE\") == \"1\")",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Oh, I looked closer on the switch and there is a way to force it on already indeed. Used it.",
              "createdAt": "2023-08-18T09:03:34Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2570,6 +2570,11 @@ private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches comma\n \n             static bool DoesEnvironmentSupportTerminalLogger()\n             {\n+                if (Environment.GetEnvironmentVariable(\"MSBUILDTESTINGFORCETERMINALLOGGERUSE\") == \"1\")",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we also test x.Items is not empty?",
              "createdAt": "2023-08-21T08:43:48Z",
              "path": "src/MSBuild.UnitTests/TerminalLogger_Tests.cs",
              "diffHunk": "@@ -285,5 +288,67 @@ public async Task DisplayNodesOverwritesWithNewTargetFramework()\n \n             await Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();\n         }\n+\n+        [Fact]\n+        public void TestTerminalLoggerTogetherWithOtherLoggers()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            { \n+                string contents = @\"\n+<Project>\n+    <ItemGroup>\n+        <Compile Include=\"\"MyItem1.cs\"\" />\n+    </ItemGroup>\n+    <PropertyGroup>\n+        <MyProp1>MyProperty1</MyProp1>\n+    </PropertyGroup>\n+    <Target Name = \"\"Build\"\">\n+        <Message Text = \"\"Build target is executing.\"\" Importance = \"\"High\"\" />\n+    </Target>\n+</Project>\";\n+                TransientTestFolder logFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(logFolder, \"myProj.proj\", contents);\n+\n+                BinaryLogger loggerWithTL = new();\n+                string logFileWithTL = env.ExpectFile(\".binlog\").Path;\n+                loggerWithTL.Parameters = logFileWithTL;\n+\n+                BinaryLogger loggerWithoutTL = new();\n+                string logFileWithoutTL = env.ExpectFile(\".binlog\").Path;\n+                loggerWithoutTL.Parameters = logFileWithoutTL;\n+\n+                // Execute MSBuild with binary, file and terminal loggers\n+                RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m /bl:{logFileWithTL} -flp:logfile={Path.Combine(logFolder.Path, \"logFileWithTL.log\")};verbosity=diagnostic -tl:on\", out bool success);\n+                success.ShouldBeTrue();\n+\n+                // Execute MSBuild with binary and file loggers\n+                RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m /bl:{logFileWithoutTL} -flp:logfile={Path.Combine(logFolder.Path, \"logFileWithoutTL.log\")};verbosity=diagnostic\", out success);\n+                success.ShouldBeTrue();\n+\n+                // Read the binary log and replay into mockLogger\n+                var mockLogFromPlaybackWithTL = new MockLogger();\n+                var binaryLogReaderWithTL = new BinaryLogReplayEventSource();\n+                mockLogFromPlaybackWithTL.Initialize(binaryLogReaderWithTL);\n+\n+                var mockLogFromPlaybackWithoutTL = new MockLogger();\n+                var binaryLogReaderWithoutTL = new BinaryLogReplayEventSource();\n+                mockLogFromPlaybackWithoutTL.Initialize(binaryLogReaderWithoutTL);\n+\n+                binaryLogReaderWithTL.Replay(logFileWithTL);\n+                binaryLogReaderWithoutTL.Replay(logFileWithoutTL);\n+\n+                // Check that amount of events, warnings, errors is equal in both cases. Presence of other loggers should not change behavior\n+                mockLogFromPlaybackWithoutTL.Errors.Count.ShouldBe(mockLogFromPlaybackWithTL.Errors.Count);\n+                mockLogFromPlaybackWithoutTL.Warnings.Count.ShouldBe(mockLogFromPlaybackWithTL.Warnings.Count);\n+                mockLogFromPlaybackWithoutTL.AllBuildEvents.Count.ShouldBe(mockLogFromPlaybackWithTL.AllBuildEvents.Count);\n+\n+                // Check presence of some items and properties\n+                mockLogFromPlaybackWithoutTL.EvaluationFinishedEvents.FindAll(x => (x.Items != null)).Count.ShouldBe(1);\n+                mockLogFromPlaybackWithTL.EvaluationFinishedEvents.FindAll(x => (x.Items != null)).Count.ShouldBe(1);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Done, thanks for suggestion.",
              "createdAt": "2023-08-22T15:32:56Z",
              "path": "src/MSBuild.UnitTests/TerminalLogger_Tests.cs",
              "diffHunk": "@@ -285,5 +288,67 @@ public async Task DisplayNodesOverwritesWithNewTargetFramework()\n \n             await Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();\n         }\n+\n+        [Fact]\n+        public void TestTerminalLoggerTogetherWithOtherLoggers()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            { \n+                string contents = @\"\n+<Project>\n+    <ItemGroup>\n+        <Compile Include=\"\"MyItem1.cs\"\" />\n+    </ItemGroup>\n+    <PropertyGroup>\n+        <MyProp1>MyProperty1</MyProp1>\n+    </PropertyGroup>\n+    <Target Name = \"\"Build\"\">\n+        <Message Text = \"\"Build target is executing.\"\" Importance = \"\"High\"\" />\n+    </Target>\n+</Project>\";\n+                TransientTestFolder logFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(logFolder, \"myProj.proj\", contents);\n+\n+                BinaryLogger loggerWithTL = new();\n+                string logFileWithTL = env.ExpectFile(\".binlog\").Path;\n+                loggerWithTL.Parameters = logFileWithTL;\n+\n+                BinaryLogger loggerWithoutTL = new();\n+                string logFileWithoutTL = env.ExpectFile(\".binlog\").Path;\n+                loggerWithoutTL.Parameters = logFileWithoutTL;\n+\n+                // Execute MSBuild with binary, file and terminal loggers\n+                RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m /bl:{logFileWithTL} -flp:logfile={Path.Combine(logFolder.Path, \"logFileWithTL.log\")};verbosity=diagnostic -tl:on\", out bool success);\n+                success.ShouldBeTrue();\n+\n+                // Execute MSBuild with binary and file loggers\n+                RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m /bl:{logFileWithoutTL} -flp:logfile={Path.Combine(logFolder.Path, \"logFileWithoutTL.log\")};verbosity=diagnostic\", out success);\n+                success.ShouldBeTrue();\n+\n+                // Read the binary log and replay into mockLogger\n+                var mockLogFromPlaybackWithTL = new MockLogger();\n+                var binaryLogReaderWithTL = new BinaryLogReplayEventSource();\n+                mockLogFromPlaybackWithTL.Initialize(binaryLogReaderWithTL);\n+\n+                var mockLogFromPlaybackWithoutTL = new MockLogger();\n+                var binaryLogReaderWithoutTL = new BinaryLogReplayEventSource();\n+                mockLogFromPlaybackWithoutTL.Initialize(binaryLogReaderWithoutTL);\n+\n+                binaryLogReaderWithTL.Replay(logFileWithTL);\n+                binaryLogReaderWithoutTL.Replay(logFileWithoutTL);\n+\n+                // Check that amount of events, warnings, errors is equal in both cases. Presence of other loggers should not change behavior\n+                mockLogFromPlaybackWithoutTL.Errors.Count.ShouldBe(mockLogFromPlaybackWithTL.Errors.Count);\n+                mockLogFromPlaybackWithoutTL.Warnings.Count.ShouldBe(mockLogFromPlaybackWithTL.Warnings.Count);\n+                mockLogFromPlaybackWithoutTL.AllBuildEvents.Count.ShouldBe(mockLogFromPlaybackWithTL.AllBuildEvents.Count);\n+\n+                // Check presence of some items and properties\n+                mockLogFromPlaybackWithoutTL.EvaluationFinishedEvents.FindAll(x => (x.Items != null)).Count.ShouldBe(1);\n+                mockLogFromPlaybackWithTL.EvaluationFinishedEvents.FindAll(x => (x.Items != null)).Count.ShouldBe(1);",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}