{
  "number": 4865,
  "title": "Force content copying to either be recursive, 1-level, or legacy",
  "body": "Fixes #4677 \r\nFixes #1054\r\n\r\nThis turned out to be more complicated [than it should be](https://github.com/microsoft/msbuild/issues/4677#issuecomment-529662821) in order to maintain backwards compatibility with legacy behaviour (described in #4677). For example, quickbuild depends on this bug and fixing it will take some time and it's probably low priority, so the ability to pin the bad behaviour and fix later is sadly okay here.\r\n\r\nFeedback needed on:\r\n- the toggling property name and value. Right now it's `$(MSBuildCopyContentTransitively )` [where](https://github.com/microsoft/msbuild/compare/master...cdmihai:contentCopying#diff-02872751bc64e0ff785c9b6c1cd919b5R4438-R4441) `true` means transitive, `false` means 1-level copying, nothing means legacy (which should be the same as `false`). Would you rather I named the values to `transitive`, `1-level`, `legacy` and set it to `legacy` by default?\r\n- any ideas on automated testing, since the msbuild repo doesn't do any sdk integration testing. Since VS cares the most for what happens during `BuildProjectReferences=false`, seems like VS should test for this. Quickbuild will also test for this if it turns `/isolate` by default in its builds. Or I could add it to the Microsoft.Net.Sdk tests, if it wants to care about `BuildProjectReferences=false`",
  "state": "MERGED",
  "createdAt": "2019-10-31T18:11:40Z",
  "updatedAt": "2020-12-30T22:53:56Z",
  "closedAt": "2019-12-10T21:21:03Z",
  "mergedAt": "2019-12-10T21:21:02Z",
  "additions": 140,
  "deletions": 37,
  "changedFiles": 2,
  "headRefName": "contentCopying",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": {
    "title": "MSBuild 16.5 Preview 2 (Sprint 162, 163)"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c040832da1a686b70f37f072931fab7343c469ca",
          "message": "Break up content copying in recursive part and non-recursive part",
          "committedDate": "2019-10-31T22:21:08Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7110a9a5a73fcef74fea0c428fd2e82ef50a963f",
          "message": "Specify content copying strategy",
          "committedDate": "2019-10-31T22:21:08Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c524a47c4829455d600b72e0aa04a66a05239755",
          "message": "Avoid breaking targets that inject into items that used to be read in GetCopyToOutputDirectoryItems",
          "committedDate": "2019-11-18T23:33:09Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d07ad5e33a2e3ab2ba310061215d6d7f8b72d259",
          "message": "Edits from code review",
          "committedDate": "2019-11-20T22:18:42Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66ea99410f450b43f78b3ac25f451e3afce52ceb",
          "message": "Remove the need for _OutputItemTypeContentItems and friends",
          "committedDate": "2019-11-22T01:10:21Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <_RecursiveTargetForContentCopying Condition=\" '$(MSBuildCopyContentTransitively)' == 'false' \">_GetCopyToOutputDirectoryItemsFromThisProject</_RecursiveTargetForContentCopying>\r\n```",
              "createdAt": "2019-11-19T19:35:33Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4411,19 +4411,38 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     ============================================================\n     -->\n   <PropertyGroup>\n+    <_TargetsThatPrepareProjectReferences>_SplitProjectReferencesByFileExistence</_TargetsThatPrepareProjectReferences>\n+    <!--\n+      GetCopyToOutputDirectoryItems depends on an unspecified dependency _SplitProjectReferencesByFileExistence -> AssignProjectConfiguration (https://github.com/microsoft/msbuild/issues/4677).\n+      When the unspecified dependency does not happen by accident, content copying is only 1 level deep instead of transitive.\n+      This target enforces the dependency.\n+\n+      TODO: make transitive content copying the default when the breaking change is acceptable.\n+    -->\n+    <_TargetsThatPrepareProjectReferences Condition=\" '$(MSBuildCopyContentTransitively)' == 'true' \">\n+      AssignProjectConfiguration;\n+      _SplitProjectReferencesByFileExistence\n+    </_TargetsThatPrepareProjectReferences>\n+\n     <GetCopyToOutputDirectoryItemsDependsOn>\n       AssignTargetPaths;\n-      _SplitProjectReferencesByFileExistence;\n-      _GetProjectReferenceTargetFrameworkProperties\n+      $(_TargetsThatPrepareProjectReferences);\n+      _GetProjectReferenceTargetFrameworkProperties;\n+      _PopulateCommonStateForGetCopyToOutputDirectoryItems\n     </GetCopyToOutputDirectoryItemsDependsOn>\n-  </PropertyGroup>\n-  <Target\n-      Name=\"GetCopyToOutputDirectoryItems\"\n-      Returns=\"@(AllItemsFullPathWithTargetPath)\"\n-      KeepDuplicateOutputs=\" '$(MSBuildDisableGetCopyToOutputDirectoryItemsOptimization)' == '' \"\n-      DependsOnTargets=\"$(GetCopyToOutputDirectoryItemsDependsOn)\">\n \n+    <!--\n+      Mitigation for https://github.com/microsoft/msbuild/issues/4677\n+      When MSBuildCopyContentTransitively == true, all content copying is transitive.\n+      When MSBuildCopyContentTransitively == false, content copying is 1 level deep.\n+      When MSBuildCopyContentTransitively != {true, false}, the legacy behaviour in https://github.com/microsoft/msbuild/issues/4677 manifests.\n+     -->\n+    <_RecursiveTargetForContentCopying>GetCopyToOutputDirectoryItems</_RecursiveTargetForContentCopying>\n+    <!-- Enforce 1 level deep content copying by replacing the recursive content target with the target that retrieves the content for the current project only. -->\n+    <_RecursiveTargetForContentCopying Condition=\" '$(MSBuildCopyContentTransitively)' == 'false' \">_GetCopyToOutputDirectoryItemsFromThisProject </_RecursiveTargetForContentCopying>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <!-- Projects opting in for 1-level content copying will have to replace OutputItemType metadata from ProjectReference items like so:\r\n```",
              "createdAt": "2019-11-19T19:36:51Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4448,26 +4473,48 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     </MSBuild>\n \n+    <!-- Projects opting in for 1-level transitive content copying will have to replace OutputItemType metadata from ProjectReference items like so:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <!-- Use CallTarget to avoid breaking targets that hook right before GetCopyToOutputDirectoryItems but expect to run after _GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences and _GetCopyToOutputDirectoryItemsFromThisProject -->\r\n```\r\n\r\n?",
              "createdAt": "2019-11-19T19:38:41Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4479,17 +4526,54 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </AssignTargetPath>\n \n     <ItemGroup>\n-      <_SourceItemsToCopyToOutputDirectoryAlways KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_CompileItemsToCopyWithTargetPath)\" Condition=\"'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='Always'\"/>\n-      <_SourceItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_CompileItemsToCopyWithTargetPath)\" Condition=\"'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'\"/>\n+      <_ThisProjectItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_CompileItemsToCopyWithTargetPath)\" Condition=\"'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='Always'\"/>\n+      <_ThisProjectItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_CompileItemsToCopyWithTargetPath)\" Condition=\"'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'\"/>\n     </ItemGroup>\n \n     <ItemGroup>\n-      <_SourceItemsToCopyToOutputDirectoryAlways KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_NoneWithTargetPath->'%(FullPath)')\" Condition=\"'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always'\"/>\n-      <_SourceItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_NoneWithTargetPath->'%(FullPath)')\" Condition=\"'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'\"/>\n+      <_ThisProjectItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_NoneWithTargetPath->'%(FullPath)')\" Condition=\"'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always'\"/>\n+      <_ThisProjectItemsToCopyToOutputDirectory       KeepMetadata=\"$(_GCTODIKeepMetadata)\" Include=\"@(_NoneWithTargetPath->'%(FullPath)')\" Condition=\"'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'\"/>\n     </ItemGroup>\n \n+  </Target>\n+\n+  <Target\n+      Name=\"GetCopyToOutputDirectoryItems\"\n+      Returns=\"@(AllItemsFullPathWithTargetPath)\"\n+      KeepDuplicateOutputs=\" '$(MSBuildDisableGetCopyToOutputDirectoryItemsOptimization)' == '' \"\n+      DependsOnTargets=\"$(GetCopyToOutputDirectoryItemsDependsOn)\">\n+\n+    <!-- Compose the content items as the union between transitive content items and content items from this project. -->\n+    <!-- Use CallTarget to avoid breaking targets that hook right before GetCopyToOutputDirectoryItems but after _GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences and _GetCopyToOutputDirectoryItemsFromThisProject -->",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n   <PropertyGroup>\r\n```",
              "createdAt": "2019-11-19T19:43:06Z",
              "path": "src/Tasks/Microsoft.Managed.targets",
              "diffHunk": "@@ -45,13 +45,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n          Include=\"$([MSBuild]::Escape('$(MSBuildProjectDirectory)\\$(MSBuildProjectName)*_wpftmp$(MSBuildProjectExtension)'))\" />\n    </ItemGroup>\n \n+   <!-- Item copied from Microsoft.Common.Currentversion.targets   -->\n+ <PropertyGroup>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <_RecursiveTargetForContentCopying Condition=\" '$(MSBuildCopyContentTransitively)' == 'false' \">_GetCopyToOutputDirectoryItemsFromThisProject</_RecursiveTargetForContentCopying>\r\n```",
              "createdAt": "2019-11-19T19:46:53Z",
              "path": "src/Tasks/Microsoft.Managed.targets",
              "diffHunk": "@@ -45,13 +45,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n          Include=\"$([MSBuild]::Escape('$(MSBuildProjectDirectory)\\$(MSBuildProjectName)*_wpftmp$(MSBuildProjectExtension)'))\" />\n    </ItemGroup>\n \n+   <!-- Item copied from Microsoft.Common.Currentversion.targets   -->\n+ <PropertyGroup>\n+    <_RecursiveTargetForContentCopying>GetCopyToOutputDirectoryItems</_RecursiveTargetForContentCopying>\n+    <_RecursiveTargetForContentCopying Condition=\" '$(MSBuildCopyContentTransitively)' == 'false' \">_GetCopyToOutputDirectoryItemsFromThisProject </_RecursiveTargetForContentCopying>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't know of a way to do so offhand but I'd like to avoid this if possible. Will think on it some more.",
              "createdAt": "2019-11-19T21:20:59Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4448,26 +4473,48 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     </MSBuild>\n \n+    <!-- Projects opting in for 1-level transitive content copying will have to replace OutputItemType metadata from ProjectReference items like so:\n+        \"Content\" to \"_OutputItemTypeContentItems\"\n+        \"None\" to \"_OutputItemTypeNoneItems\"\n+        \"EmbeddedResource\" to \"_OutputItemTypeEmbeddedResourceItems\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm thinking about a different way as well. I realized this is a breaking change for all the things reading the Content item. For example, RAR also probes any potential DLLs in `Content` and `None`, because why not. ",
              "createdAt": "2019-11-20T23:23:16Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4448,26 +4473,48 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     </MSBuild>\n \n+    <!-- Projects opting in for 1-level transitive content copying will have to replace OutputItemType metadata from ProjectReference items like so:\n+        \"Content\" to \"_OutputItemTypeContentItems\"\n+        \"None\" to \"_OutputItemTypeNoneItems\"\n+        \"EmbeddedResource\" to \"_OutputItemTypeEmbeddedResourceItems\"",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "@rainersigwald I think I fixed it in https://github.com/microsoft/msbuild/pull/4865/commits/152169f04ba13bec681efb6d0a9b4645a2fe686e\r\nApparently the right magically added metadata is not `DefiningProjectFullPath` (which does not survive msbuild task transfers), but `MSBuildSourceProjectFile` (which gets specifically added by the msbuild task)",
              "createdAt": "2019-11-21T01:52:49Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4448,26 +4473,48 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n \n     </MSBuild>\n \n+    <!-- Projects opting in for 1-level transitive content copying will have to replace OutputItemType metadata from ProjectReference items like so:\n+        \"Content\" to \"_OutputItemTypeContentItems\"\n+        \"None\" to \"_OutputItemTypeNoneItems\"\n+        \"EmbeddedResource\" to \"_OutputItemTypeEmbeddedResourceItems\"",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}