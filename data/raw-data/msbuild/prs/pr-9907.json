{
  "number": 9907,
  "title": "BuildCheck does not run on restore",
  "body": "### Context\r\nWe currently run BuildCheck during the restore phase of the build, because of this we end up running BuildCheck twice per project. This PR disables BuildCheck during restore phase.\r\n\r\n### Changes Made\r\nBuildCheck manager has a new property `isRestore` which indicates if a build is in restore phase. It is by default true, and during build it is set to `false` so BuildCheck can run.\r\n\r\nAt the start of the build on proc nodes, the global variable `MSBuildIsRestoring` is checked to see if the build is currently running the restore phase. If it is a restore, the `BuildCheckManager` object is initialized to `null`, otherwise initialized as normal. This relies on the assumption that there is only one restore per project.\r\n\r\nOn the main process, the process start relies on events that the `BuildCheckConnectorLogger` captures. So it is not started on a restore phase, the `isRestore` is set to true, until an actual build starts and the variable is set to false.",
  "state": "CLOSED",
  "createdAt": "2024-03-22T14:08:39Z",
  "updatedAt": "2024-04-15T18:57:05Z",
  "closedAt": "2024-04-15T18:57:05Z",
  "mergedAt": null,
  "additions": 156,
  "deletions": 23,
  "changedFiles": 13,
  "headRefName": "9747",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5b33d8fe1855b718eecd899f461e8c09965fe881",
          "message": "First pass on disabling BuildCheck on restore",
          "committedDate": "2024-03-21T14:28:48Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "916d82279ba8086abd27bd490be27f72bf85ff99",
          "message": "BuildCheck doesn't run on restore",
          "committedDate": "2024-03-22T12:20:35Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8363efc971758137ce851340785da92d609d4d8d",
          "message": "Addressed PR comments",
          "committedDate": "2024-04-09T18:09:30Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d223bc79dcb033f27e400597af7a890ee727624",
          "message": "Modified how logger registers isRestore",
          "committedDate": "2024-04-15T15:55:54Z",
          "author": {
            "name": "Mariana Dematt\u00e9",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This diff looks very weird, the only change here is the addition of `if (!buildCheckManager.isRestore)` in the highest level of the function.",
              "createdAt": "2024-03-22T14:09:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd suggest to invert the condition and return - it'll reduce nesting and as well simplify the diff.\r\n\r\n```suggestion\r\n        if (buildCheckManager.isRestore)\r\n        {\r\n           return;\r\n        }\r\n```",
              "createdAt": "2024-03-24T20:08:22Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -26,55 +26,58 @@ public void Initialize(IEventSource eventSource)\n \n     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n     {\n-        if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)\n+        if (!buildCheckManager.isRestore)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't seem to be used - it can be safely removed (along with implementations).",
              "createdAt": "2024-03-24T20:11:49Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs",
              "diffHunk": "@@ -27,6 +27,8 @@ internal enum BuildCheckDataSource\n /// </summary>\n internal interface IBuildCheckManager\n {\n+    bool isRestore { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This check is used within `BuildCheckConnectorLogger`. \r\nThe check for the restore needs to be in two points of the code, on the worker node (that is the `RequestBuilder`  class and checks), and within the main node (within the `BuildCheckConnectorLogger`). \r\n\r\nIf we do not have the check within the ConnectorLogger, the main node will still execute an analysis during restore, as it receives a message that a project evaluation is starting from normal MSBuild process, and that triggers a BuildCheck run.",
              "createdAt": "2024-04-09T18:08:51Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs",
              "diffHunk": "@@ -27,6 +27,8 @@ internal enum BuildCheckDataSource\n /// </summary>\n internal interface IBuildCheckManager\n {\n+    bool isRestore { get; set; }",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Oh I see.\r\n\r\nIn such case - the logger and the worker node can - and should - maintain their own private indication of whether restore is happening (no need to store it in the manager - as it anyways is not usable globally). The logger should maintain it per project.\r\n\r\n* The worker node is not guaranteed to be part of the entrypoint node (that runs the loggers). Currently only `RequestBuilder` is setting the indication - that would not work for the case (you can experiment with this via the `EndToEndTest` that sets `NOINPROCNODE` in one of the cases to `1` - then the logger runs alone)\r\n* Different projects can run their different phases during the same build - logger cannot determine the restore status globally - only per project. And it will need to get the indication from BuildEventArgs - as there might not be anything else available in the same process.",
              "createdAt": "2024-04-10T06:03:22Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs",
              "diffHunk": "@@ -27,6 +27,8 @@ internal enum BuildCheckDataSource\n /// </summary>\n internal interface IBuildCheckManager\n {\n+    bool isRestore { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            IBuildCheckManager buildCheckManager = isRestore ? null : (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;\r\n            buildCheckManager?.SetDataSource(BuildCheckDataSource.BuildExecution);\r\n```\r\n\r\nSimilarly all the conditions below can be simplified with null check operator.",
              "createdAt": "2024-03-24T20:15:04Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1118,10 +1118,22 @@ private void SetProjectCurrentDirectory()\n         /// </summary>\n         private async Task<BuildResult> BuildProject()\n         {\n+            bool isRestore = false;\n+            var propertyEntry = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring];\n+            if (propertyEntry != null)\n+            {\n+                isRestore = Convert.ToBoolean(propertyEntry.EvaluatedValue);\n+            }\n+\n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n+            IBuildCheckManager buildCheckManager = null;\n \n-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;\n-            buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);\n+            if (!isRestore)\n+            {\n+                buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;\n+                buildCheckManager.isRestore = false;\n+                buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}