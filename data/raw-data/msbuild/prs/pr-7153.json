{
  "number": 7153,
  "title": "Validate binding redirects",
  "body": "Fixes #7078 \r\n\r\n### Context\r\nIf our binding redirects are off from the packages we actually ship, that can cause problems downstream when we try to integrate with anything other than MSBuild.\r\n\r\n### Changes Made\r\nAdded a post-build (and tests) validation step.\r\n\r\n### Testing\r\nBuilt\r\n\r\n### Notes\r\n~~How do I convert from a 3-part version to a 4-part version or vice versa? I imagine 3 -> 4 is easier if I can find the relevant assembly, but that would mean looking in our artifacts folder for something that matches its name and seeing if its version matches?~~\r\nWorked around by looking for shipped assemblies with versions not matching our binding redirects.\r\n\r\n~~I was timeboxing this with little bash experience. Sorry it's a mess. Please help fix \ud83d\ude42~~\r\nHas been fixed.",
  "state": "MERGED",
  "createdAt": "2021-12-15T02:40:15Z",
  "updatedAt": "2022-01-07T17:21:47Z",
  "closedAt": "2022-01-07T17:21:46Z",
  "mergedAt": "2022-01-07T17:21:46Z",
  "additions": 76,
  "deletions": 2,
  "changedFiles": 4,
  "headRefName": "validate-packages-match-binding-redirects",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1eb3176326e6816d6011f7ab6ebda535a0dafbf2",
          "message": "Hacky, untested binding redirect validation",
          "committedDate": "2021-12-15T02:36:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ef865399469d25d735c4393a75aeaa72e6f06ab0",
          "message": "Revert \"Hacky, untested binding redirect validation\"\n\nThis reverts commit 1eb3176326e6816d6011f7ab6ebda535a0dafbf2.",
          "committedDate": "2021-12-15T19:09:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11d1b98e05822c184e86ab49046500ab576682e5",
          "message": "Use task to validate packages",
          "committedDate": "2021-12-15T20:29:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac034574af6557266203f0f9213f14cbf8e4cb20",
          "message": "Add Source=\"Foo.cs\"",
          "committedDate": "2021-12-15T20:49:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "288ecc936f644630c5dac320c4e06a6ef3eec6bf",
          "message": "Move code into separate task",
          "committedDate": "2021-12-15T21:04:53Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08bd7b50342b46e809dc27eb8cd5cbaf41952922",
          "message": "Make into full class",
          "committedDate": "2021-12-15T22:18:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39731bc3ba729eb7e31518b60d3d46de33622440",
          "message": "Fix up task",
          "committedDate": "2021-12-15T22:39:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29e7068a5574277d464d7c29ce55663af4a7b6cd",
          "message": "Fix app.config \ud83d\ude42",
          "committedDate": "2021-12-15T22:39:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "45d54d4fd8fb8275705df373f852afb1a5f05c55",
          "message": "Opt System.ValueTuple out",
          "committedDate": "2021-12-15T23:15:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0b8b5b782b8f8f7aa6bc79253ebbe8491fc8b49",
          "message": "Revert \"Opt System.ValueTuple out\"\n\nThis reverts commit 45d54d4fd8fb8275705df373f852afb1a5f05c55.",
          "committedDate": "2021-12-15T23:19:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a389c1aa7b11015bb9eab9cff798ac0b18d372df",
          "message": "Specifically opt out S.ValueTuple",
          "committedDate": "2021-12-15T23:22:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "747aa8773334fdf63005e6c5503560164649e9fa",
          "message": "Missed a quote",
          "committedDate": "2021-12-15T23:23:53Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "354316d94df50760d5c2e05de94da00bc1180a4b",
          "message": "Use String.Equals?",
          "committedDate": "2021-12-16T00:00:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f77395e0f2cc9a8a7e4e6f127108350048147f2",
          "message": "Move file existence check earlier",
          "committedDate": "2021-12-16T00:22:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2c30e59d0b15c6c567fa7715ba2fdb240042dc0",
          "message": "Somewhat cleaner version",
          "committedDate": "2021-12-16T20:24:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60274a289721662e45356ea4cb5c47d4b0116b26",
          "message": "Add explicit check for System.ValueTuple",
          "committedDate": "2021-12-16T20:27:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5583f7e2fa60f0e6eb6a5528b2fbab7c63e1080",
          "message": "Add copyright header",
          "committedDate": "2021-12-16T20:28:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e4a18ed54de222b03d4e4bd6ed5468c8b2c8f4f",
          "message": "Learn to use namespaces in XML",
          "committedDate": "2021-12-16T22:12:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b75a202db6dbf30b9184675f664afcbc112ed57b",
          "message": "Update src/MSBuild/MSBuild.csproj\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-12-17T00:51:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbb140d81ea32ce2be5ab1b7a99bde55eda46e5f",
          "message": "Update src/MSBuild/MSBuild.csproj\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-12-17T00:51:19Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "70555c74aca2e4b40184de6b179378a74c4be045",
          "message": "Update src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-12-17T01:34:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42a582fef6266169f209c0df7aa4cce298f5f735",
          "message": "Add comment for ignored assemblies",
          "committedDate": "2021-12-17T01:35:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ecec1ccb74297b7a35af7b1cc59adb9f3108a04",
          "message": "Merge branch 'validate-packages-match-binding-redirects' of https://github.com/Forgind/msbuild into validate-packages-match-binding-redirects",
          "committedDate": "2021-12-17T01:35:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abf550f2bc4586717049d60400980baaa764db14",
          "message": "Revert \"Update src/MSBuild/MSBuild.csproj\"\n\nThis reverts commit cbb140d81ea32ce2be5ab1b7a99bde55eda46e5f.",
          "committedDate": "2021-12-17T18:13:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "90997125c9386d1eb751f992a7440b9a634b4848",
          "message": "Revert \"Update src/MSBuild/MSBuild.csproj\"\n\nThis reverts commit b75a202db6dbf30b9184675f664afcbc112ed57b.",
          "committedDate": "2022-01-05T17:24:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0be049f733f0f6a7524756e85d50e8d099f4eb72",
          "message": "Stop batching",
          "committedDate": "2022-01-05T17:41:54Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe5159a0adeff109b2bdc7d593a5ddd146b92f10",
          "message": "Update comment",
          "committedDate": "2022-01-05T17:55:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a4f3b4c63c1e0f12cebbd444dc4f576f0d1cfc4e",
          "message": "Fix comment",
          "committedDate": "2022-01-06T19:25:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Only run this target on .NET Framework builds (since that's the only case where the binding redirects apply).",
              "createdAt": "2021-12-16T15:04:28Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can simplify this a lot using [`doc.SelectNodes(xpath)`](https://docs.microsoft.com/dotnet/standard/data/xml/select-nodes-using-xpath-navigation).",
              "createdAt": "2021-12-16T15:13:51Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This seems surprisingly unreliable in my testing. I tried doc.SelectNodes(\"dependentAssembly[assemblyIdentity][bindingRedirect]\"), and it got no results, so I'm assuming it only looks at children of its direct parent.\r\n\r\nThen I tried doc.SelectSingleNode(\"configuration\").SelectSingleNode(\"runtime\").SelectSingleNode(\"assemblyBinding\"), and the first two SelectSingleNode calls returned what I'd expected, and the third returned null. I tried changing the capitalization plus a couple other things, but no dice.\r\n\r\nI did manage to get it working with some sql statements, but it looks a little odd. Still a good bit cleaner.",
              "createdAt": "2021-12-16T18:34:34Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That sounds like XName shenanigans to me. You might need to try a fully qualified xname for the elements you're querying for in order for the nice APIs to do what you expect. This bites me _every time_ I use the XML APIs. ",
              "createdAt": "2021-12-16T18:36:59Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Like adding a namespace or adding a list of the parents in order? Namespaces seem to be a thing for XmlElements, but I don't know what it would be for arbitrary elements in app.configs. Listing parents is doable, but I don't see anywhere that suggests that's what it would be.",
              "createdAt": "2021-12-16T18:45:01Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Oh, wait. It lists something afterwards. Let me try that.",
              "createdAt": "2021-12-16T18:45:55Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That does seem to be the namespace, but I haven't figured out how to incorporate it into the name such that it finds it.",
              "createdAt": "2021-12-16T19:28:15Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "```c#\r\nXmlNamespaceManager namespaceManager = new XmlNamespaceManager(doc.NameTable);\r\nnamespaceManager.AddNamespace(\"asm\", \"urn:schemas-microsoft-com:asm.v1\");\r\n\r\nvar dependentAssemblyElements = doc.DocumentElement.SelectNodes(\"/configuration/runtime/asm:assemblyBinding/asm:dependentAssembly\", namespaceManager);\r\n```",
              "createdAt": "2021-12-16T21:58:42Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "(this is so much easier with XDocument that I'm starting to rethink the suggestion I gave to use System.Xml)",
              "createdAt": "2021-12-16T22:07:28Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I don't think I would've guessed that, and it wasn't at all clear where the namespaces were coming from in the examples I found. Thanks!\r\n\r\nI think it's reasonably clean now, albeit with a few long/ugly lines.",
              "createdAt": "2021-12-16T22:17:22Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can simplify this as\r\n\r\n```suggestion\r\n                                                        name = dependentAssemblyXmlElement.GetAttribute(\"name\");\r\n```",
              "createdAt": "2021-12-16T15:17:07Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Calling `LoadFile` will load the assemblies into the running MSBuild process in a way that's not unloadable, potentially causing problems on subsequent builds (the same problem you're tackling for task assemblies in #7132).\r\n\r\nFortunately since we just need the assembly identity, we don't need to use `System.Reflection.Metadata` here.\r\n\r\n```suggestion\r\n                                                string assemblyVersion = AssemblyName.GetAssemblyName(path).Version.ToString();\r\n```\r\n\r\nI don't think the `File.Exists` default is right--we want to guarantee that we ship the file if we have a binding redirect for it.",
              "createdAt": "2021-12-16T15:24:41Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I've found a number of cases that seem pretty reasonable that we should ignore like M.B.Conversion.Core, M.B.Engine, and M.NET.StringTools.net35. I can make a list of assemblies to ignore, but it's a bit messy.",
              "createdAt": "2021-12-16T20:17:21Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'll ignore all of them, then let you comment on which to keep. (So far, I'd say those three and none of the others.)",
              "createdAt": "2021-12-16T20:18:32Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please comment this special case with details. I'd also prefer that we check for it explicitly: there must be a binding redirect for this, and the file must exist.",
              "createdAt": "2021-12-16T15:25:23Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;\n+                                                if (!version.Equals(assemblyVersion))\n+                                                {\n+                                                    if (!(String.Equals(name, \"System.ValueTuple\", StringComparison.OrdinalIgnoreCase) && String.Equals(version, \"4.0.0.0\") && String.Equals(assemblyVersion, \"4.0.3.0\")))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be really nice if you could log the line number in the app.config in this error--then GitHub can put a nice annotation up indicating \"you should edit here!\"\r\n\r\nThis appears to be possible but nontrivial: https://stackoverflow.com/a/45182162",
              "createdAt": "2021-12-16T15:43:29Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;\n+                                                if (!version.Equals(assemblyVersion))\n+                                                {\n+                                                    if (!(String.Equals(name, \"System.ValueTuple\", StringComparison.OrdinalIgnoreCase) && String.Equals(version, \"4.0.0.0\") && String.Equals(assemblyVersion, \"4.0.3.0\")))\n+                                                    {\n+                                                        Log.LogError($\"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Slightly more complicated\u2014this could be an issue in Packages.props or app.config, so if I specify a specific line (in app.config), I may be completely off. I think the current version is roughly as informative (gives the assembly name, so you can find it quickly) but without that possibility of erring.",
              "createdAt": "2021-12-16T20:51:06Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;\n+                                                if (!version.Equals(assemblyVersion))\n+                                                {\n+                                                    if (!(String.Equals(name, \"System.ValueTuple\", StringComparison.OrdinalIgnoreCase) && String.Equals(version, \"4.0.0.0\") && String.Equals(assemblyVersion, \"4.0.3.0\")))\n+                                                    {\n+                                                        Log.LogError($\"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think I agree with this reasoning--why not point explicitly to one of the locations? But since it's fiddly to get the line number you can leave it if you prefer.",
              "createdAt": "2021-12-16T22:42:42Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,87 @@\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            foreach (var topLevelElement in doc.ChildNodes)\n+            {\n+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals(\"configuration\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)\n+                    {\n+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals(\"runtime\", StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)\n+                            {\n+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals(\"assemblyBinding\", StringComparison.OrdinalIgnoreCase))\n+                                {\n+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)\n+                                    {\n+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals(\"dependentAssembly\", StringComparison.OrdinalIgnoreCase))\n+                                        {\n+                                            string name = string.Empty;\n+                                            string version = string.Empty;\n+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)\n+                                            {\n+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)\n+                                                {\n+                                                    if (dependentAssemblyXmlElement.Name.Equals(\"assemblyIdentity\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals(\"name\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                name = assemblyIdentityAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                    else if (dependentAssemblyXmlElement.Name.Equals(\"bindingRedirect\", StringComparison.OrdinalIgnoreCase))\n+                                                    {\n+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)\n+                                                        {\n+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals(\"newVersion\", StringComparison.OrdinalIgnoreCase))\n+                                                            {\n+                                                                version = bindingRedirectAttributeXmlElement.Value;\n+                                                            }\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))\n+                                            {\n+                                                string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                                                string assemblyVersion = File.Exists(path) ? Assembly.LoadFile(path).GetName().Version.ToString() : version;\n+                                                if (!version.Equals(assemblyVersion))\n+                                                {\n+                                                    if (!(String.Equals(name, \"System.ValueTuple\", StringComparison.OrdinalIgnoreCase) && String.Equals(version, \"4.0.0.0\") && String.Equals(assemblyVersion, \"4.0.3.0\")))\n+                                                    {\n+                                                        Log.LogError($\"Binding redirect for '{name}' redirects to a different version ({version}) than MSBuild ships ({assemblyVersion}).\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" AfterTargets=\"PrepareForBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >\r\n```\r\n\r\nThis will get it to check the checked-in version, which is what we should be editing, rather than the copy with possibly added auto binding redirects (which we want to avoid).",
              "createdAt": "2021-12-16T22:35:42Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So it seems like it also hasn't copied the packages to the output directory yet at that point. The two options I see:\r\nRevert back to how it was before. Not ideal but easy.\r\nHave two tasks: one that parses the app.config into an item and another that looks at the item and compares it to packages. This fits your ideal but isn't nearly as clean.\r\nThoughts?",
              "createdAt": "2021-12-17T18:29:56Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <ValidateMSBuildPackageDependencyVersions AppConfig=\"@(AppConfigWithTargetPath)\" AssemblyPath=\"$(OutputPath)\" />\r\n```",
              "createdAt": "2021-12-16T22:36:06Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >\n+    <ValidateMSBuildPackageDependencyVersions AppConfig=\"@(AppConfigWithTargetPath)\" AssemblyPath=\"$(OutputPath)%(_TargetFrameworks.Identity)\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I reverted this one. I wasn't sure why this was better but assumed you wouldn't have time to explain before you left. It looks like it failed the build.",
              "createdAt": "2021-12-17T18:13:55Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >\n+    <ValidateMSBuildPackageDependencyVersions AppConfig=\"@(AppConfigWithTargetPath)\" AssemblyPath=\"$(OutputPath)%(_TargetFrameworks.Identity)\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "You are doing\r\n\r\n```\r\nforeach (targetFramework in TargetFrameworks): # multitargeting\r\n  foreach (targetFramework in TargetFrameworks): # batching on `_TargetFrameworks`\r\n    validate(targetFramework)\r\n```\r\n\r\nDo it just for the current TF.",
              "createdAt": "2022-01-05T16:37:44Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -330,4 +330,14 @@\n \n   </Target>\n \n+  <UsingTask TaskName=\"ValidateMSBuildPackageDependencyVersions\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+    <Task>\n+      <Code Source=\"ValidateMSBuildPackageDependencyVersions.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+\n+  <Target Name=\"ValidateMSBuildPackageDependencyVersions\" BeforeTargets=\"AfterBuild\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" >\n+    <ValidateMSBuildPackageDependencyVersions AppConfig=\"@(AppConfigWithTargetPath)\" AssemblyPath=\"$(OutputPath)%(_TargetFrameworks.Identity)\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comment each of these with a reason.",
              "createdAt": "2021-12-16T22:40:23Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        private string[] assembliesToIgnore = { \"Microsoft.Build.Conversion.Core\", \"Microsoft.NET.StringTools.net35\", \"Microsoft.Build.Engine\", \"Microsoft.Activities.Build\", \"XamlBuildTask\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Note that some of these are in this repo and we would ideally check them. The best option I can think of is to move this validation to the VSIX packaging project, but it looks like we don't actually get an expanded copy of the VSIX zip there, so that's nontrivial. It does ensure that we're checking the binding redirects we ship against the assemblies we ship though . . .",
              "createdAt": "2021-12-16T22:53:14Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        private string[] assembliesToIgnore = { \"Microsoft.Build.Conversion.Core\", \"Microsoft.NET.StringTools.net35\", \"Microsoft.Build.Engine\", \"Microsoft.Activities.Build\", \"XamlBuildTask\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Can you provide a justification for the last two? I don't know what they are, so I'm assuming we don't own them, so I'm assuming we shouldn't have binding redirects for them, especially since we don't ship them. I was hoping you'd say \"no reason to keep them,\" and I would delete their binding redirects. Will add comments for the first three.",
              "createdAt": "2021-12-17T00:58:01Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        private string[] assembliesToIgnore = { \"Microsoft.Build.Conversion.Core\", \"Microsoft.NET.StringTools.net35\", \"Microsoft.Build.Engine\", \"Microsoft.Activities.Build\", \"XamlBuildTask\" };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`Microsoft.Activities.Build` and `XamlBuildTask` are required due to AppDomain shenanigans in a first-party task: https://github.com/dotnet/msbuild/pull/856#issuecomment-237616197. It was \"temporary\" five years ago but I don't know whether it's still required or not and suspect it is.",
              "createdAt": "2022-01-05T16:42:30Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        private string[] assembliesToIgnore = { \"Microsoft.Build.Conversion.Core\", \"Microsoft.NET.StringTools.net35\", \"Microsoft.Build.Engine\", \"Microsoft.Activities.Build\", \"XamlBuildTask\" };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        // Ensure that the binding redirect is to the GAC version, but\r\n                        // we still ship the version we explicitly reference to let\r\n                        // API consumers bind to it at runtime.\r\n                        // See https://github.com/dotnet/msbuild/issues/6976.\r\n```",
              "createdAt": "2021-12-16T22:51:12Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        private string[] assembliesToIgnore = { \"Microsoft.Build.Conversion.Core\", \"Microsoft.NET.StringTools.net35\", \"Microsoft.Build.Engine\", \"Microsoft.Activities.Build\", \"XamlBuildTask\" };\n+\n+        public override bool Execute()\n+        {\n+            XmlDocument doc = new XmlDocument();\n+            doc.Load(AppConfig);\n+            XmlNamespaceManager namespaceManager = new(doc.NameTable);\n+            namespaceManager.AddNamespace(\"asm\", \"urn:schemas-microsoft-com:asm.v1\");\n+            bool foundSystemValueTuple = false;\n+            foreach (XmlElement dependentAssemblyElement in doc.DocumentElement.SelectNodes(\"/configuration/runtime/asm:assemblyBinding/asm:dependentAssembly[asm:assemblyIdentity][asm:bindingRedirect]\", namespaceManager))\n+            {\n+                string name = (dependentAssemblyElement.SelectSingleNode(\"asm:assemblyIdentity\", namespaceManager) as XmlElement).GetAttribute(\"name\");\n+                string version = (dependentAssemblyElement.SelectSingleNode(\"asm:bindingRedirect\", namespaceManager) as XmlElement).GetAttribute(\"newVersion\");\n+                if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version) && !assembliesToIgnore.Contains(name, StringComparer.OrdinalIgnoreCase))\n+                {\n+                    string path = Path.Combine(AssemblyPath, name + \".dll\");\n+                    string assemblyVersion = AssemblyName.GetAssemblyName(path).Version.ToString();\n+                    if (!version.Equals(assemblyVersion))\n+                    {\n+                        // It is unusual to want to redirect down, but in this case it's ok: 4.0.3.0 forwards to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file\n+                        // and makes that resolution faster. Still verify that the versions are exactly as in this comment, as that may change.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        // Microsoft.Build.Conversion.Core and Microsoft.Build.Engine are deprecated. We don't ship them, but they're still used in VS for now. We should ensure they're the right version if present.\r\n```\r\n\r\nWait, sorry, I didn't notice this before. We do ship these assemblies. Why does this say we don't? Are they maybe not present in this project's output because they're not direct projectreferences?",
              "createdAt": "2022-01-06T15:50:40Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        // Microsoft.Build.Conversion.Core and Microsoft.Build.Engine are deprecated. We don't ship them, but they're still used in VS for now. We should ensure they're the right version if present.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good call. Don't know what I was thinking here.",
              "createdAt": "2022-01-06T19:25:25Z",
              "path": "src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs",
              "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Xml;\n+namespace MSBuild\n+{\n+    public class ValidateMSBuildPackageDependencyVersions : Task\n+    {\n+        [Required]\n+        public string AppConfig { get; set; }\n+        [Required]\n+        public string AssemblyPath { get; set; }\n+\n+        // Microsoft.Build.Conversion.Core and Microsoft.Build.Engine are deprecated. We don't ship them, but they're still used in VS for now. We should ensure they're the right version if present.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}