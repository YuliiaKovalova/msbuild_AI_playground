{
  "number": 9065,
  "title": "Fixed the embedded file size record",
  "body": "Fixes bug introduced by #8971\r\n\r\nWork item (Internal use):\r\n\r\n### Summary\r\nSize of the payload was incorrectly written as Int64, which causes corruption of the binary log format.\r\n\r\n### Customer Impact\r\nCustomers are not able to diagnose build problems at full capacity.\r\n\r\n### Testing\r\nNew unit test was introduced to prevent regression.\r\n\r\n### Risk\r\nlow - adds check that is unlikely to fail since the size limit matches the previous one",
  "state": "MERGED",
  "createdAt": "2023-07-25T11:54:30Z",
  "updatedAt": "2023-07-26T09:10:04Z",
  "closedAt": "2023-07-26T09:10:02Z",
  "mergedAt": "2023-07-26T09:10:02Z",
  "additions": 34,
  "deletions": 2,
  "changedFiles": 3,
  "headRefName": "dev/mipavlik/fix-importedfilesembedding",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c1ed6a68a9c8bbfb0521bc1b12398a80c3c5cd2f",
          "message": "Fixed the embedded file size record + test",
          "committedDate": "2023-07-25T11:44:27Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9201215189f15e83f4bd91897527012797f7cc5f",
          "message": "Test was moved",
          "committedDate": "2023-07-25T13:05:43Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-07-25T16:45:18Z",
        "author": null
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`src\\Build.UnitTests\\BuildEventArgsSerialization_Tests.cs` already contains round trip test cases for `BuildEventArgsWriter`. I wonder if it's a better home for the new test.",
              "createdAt": "2023-07-25T12:31:54Z",
              "path": "src/Build.UnitTests/BuildEventArgsWriter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Xunit;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Engine.UnitTests\n+{\n+    public class BuildEventArgsWriter_Tests\n+    {\n+        [Fact]\n+        public void WriteBlobFromStream()",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sure, this class looks like better home for the test. Moved.",
              "createdAt": "2023-07-25T13:06:25Z",
              "path": "src/Build.UnitTests/BuildEventArgsWriter_Tests.cs",
              "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using Xunit;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Engine.UnitTests\n+{\n+    public class BuildEventArgsWriter_Tests\n+    {\n+        [Fact]\n+        public void WriteBlobFromStream()",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like these messages are expected to have the `Key=Value` format. Maybe\r\n```suggestion\r\n                                LogMessage(\"Error=Imported files archive exceeded 2GB limit and it's not embedded.\");\r\n```\r\n?",
              "createdAt": "2023-07-25T12:37:08Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yes, there will be parsing of key/value with `=` as delimiter. I wanted to wait for @KirillOsenkov to provide advice.",
              "createdAt": "2023-07-25T13:01:38Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I had to change template, so I'm adding screenshot here to keep the discussion context:\r\n\r\nI'm not sure if the message about 2GB limit is necessary. If so, the formatting doesn't look great.\r\n![image](https://github.com/dotnet/msbuild/assets/12775388/2960bbec-daa5-436c-9265-78d453c3d51b)",
              "createdAt": "2023-07-25T15:20:25Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Sorry, why do we need the = here? ",
              "createdAt": "2023-07-25T18:04:59Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "The viewer appears to be expecting messages formatted this way. If it doesn't find `=` in the message it treats the full string as a 'key' with an empty 'value', see the trailing `=` in @MichalPavlik's screenshot.\r\n\r\n",
              "createdAt": "2023-07-25T21:16:26Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Let's fix the viewer then. If it doesn't find the = it should just interpret as a simple message. I don't remember why it behaves this way currently.",
              "createdAt": "2023-07-25T22:30:44Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Yes, let's remove the = and I will fix the viewer to handle this correctly.",
              "createdAt": "2023-07-25T22:33:12Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I suspect it's falling through into this branch:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/blob/7d6b5c293368668e2ef20183c475c6a9f4552bec/src/StructuredLogger/Construction/MessageProcessor.cs#L132-L137\r\n\r\nShould check to only fall through if the message contains a `=`",
              "createdAt": "2023-07-25T22:34:13Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "> Let's fix the viewer then. If it doesn't find the = it should just interpret as a simple message. I don't remember why it behaves this way currently.\r\n\r\nI think the key=value parsing logic is there because we were emitting all messages from BinaryLogger in this format. Having possibility to emit just plain message would be very nice. @ladipro, I don't think this PR should depend on the parsing logic of binlog viewer. Please resolve the comment if you are satisfied.",
              "createdAt": "2023-07-26T07:50:37Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Sounds great, resolving.",
              "createdAt": "2023-07-26T08:24:14Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -239,7 +239,14 @@ public void Shutdown()\n                     {\n                         using (FileStream fileStream = File.OpenRead(archiveFilePath))\n                         {\n-                            eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, fileStream);\n+                            if (fileStream.Length > int.MaxValue)\n+                            {\n+                                LogMessage(\"Imported files archive exceeded 2GB limit and it's not embedded.\");",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When we throw this exception, who is the intended recipient? Is it caught anywhere? What are the observable symptoms? If it's not caught, are we ready to crash the process? What is the user experience then?\r\n\r\nI don't think we should throw, we should silently skip and resume.",
              "createdAt": "2023-07-25T18:03:38Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -220,12 +220,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n \n         public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n         {\n+            if (stream.Length > int.MaxValue)\n+            {\n+                throw new ArgumentOutOfRangeException(nameof(stream));",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Oh, I see, this is not expected to be called ever. We can leave it then.",
              "createdAt": "2023-07-25T18:04:07Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -220,12 +220,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n \n         public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n         {\n+            if (stream.Length > int.MaxValue)\n+            {\n+                throw new ArgumentOutOfRangeException(nameof(stream));",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Exactly, this branch condition should be `false`, because the caller checks the length. I added it defensively in case some other callers would use this method in future.",
              "createdAt": "2023-07-26T07:41:38Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -220,12 +220,17 @@ public void WriteBlob(BinaryLogRecordKind kind, byte[] bytes)\n \n         public void WriteBlob(BinaryLogRecordKind kind, Stream stream)\n         {\n+            if (stream.Length > int.MaxValue)\n+            {\n+                throw new ArgumentOutOfRangeException(nameof(stream));",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}