{
  "number": 8092,
  "title": "AsOrdered was removed",
  "body": "Fixes [AB#1618509](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1618509)\r\n\r\n### Context\r\nAsOrdered causes UI delays in VS due to thread blocking.\r\n\r\n### Changes Made\r\nProcessing items is still parallel, but sorting is now done classically based on original item index. \r\n\r\n### Testing\r\nExisting unit tests are passing\r\n",
  "state": "MERGED",
  "createdAt": "2022-10-26T12:34:16Z",
  "updatedAt": "2022-11-04T08:48:03Z",
  "closedAt": "2022-11-04T08:48:02Z",
  "mergedAt": "2022-11-04T08:48:02Z",
  "additions": 7,
  "deletions": 6,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/vs-ui-delay",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "75dde8ca1313ce50880dd7f8a99f2cf7f69f9eab",
          "message": "AsOrdered was removed",
          "committedDate": "2022-10-26T12:29:29Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41f0f553b33599a27a466cb65cc71408cc74afef",
          "message": "Resolving comments",
          "committedDate": "2022-10-27T08:19:47Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't know if it would matter for this specific case, but it seems like you could do more in parallel and delay the re-sequentialization:\r\n\r\n```suggestion\r\n                    .Where(pair => pair.Result is not null)\r\n                    .AsSequential()\r\n                    .OrderBy(pair => pair.Index)\r\n                    .Select(pair => pair.Result)\r\n```",
              "createdAt": "2022-10-26T13:29:10Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()\n+                    .OrderBy(pair => pair.Index)\n+                    .Select(pair => pair.Result)\n                     .Where(r => r != null)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Right, and moving filtration before ordering decreases number of elements to be sorted.",
              "createdAt": "2022-10-27T07:46:51Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()\n+                    .OrderBy(pair => pair.Index)\n+                    .Select(pair => pair.Result)\n                     .Where(r => r != null)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wondering if creating the tuple here wouldn't be tiny bit more readable. Just a nit really, feel free to ignore.\r\n\r\n```suggestion\r\n                    .Select((item, index) => (Result: ComputeProvenanceResult(itemToMatch, item), Index: index))\r\n```",
              "createdAt": "2022-10-26T13:53:52Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good advice. This allows to revert complexity I added to `ComputeProvenanceResult` :)",
              "createdAt": "2022-10-27T07:49:46Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I am not familar with `AsSequential` (I don't think I used it in my standalone prototypes), but we should make sure its implementation doesn't use the same `MergeSortCooperatively` that was causing the problem.",
              "createdAt": "2022-10-26T18:07:15Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()",
              "author": {
                "login": "adrianvmsft"
              }
            },
            {
              "body": "I wasn't either! My impression from the docs was that it was basically just \"give me an `IEnumerable` out of this parallel thing\" so it's `WhenAll`, and shouldn't have any blocking. But if it's not necessary I'd also prefer to remove it.",
              "createdAt": "2022-10-26T18:13:36Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`AsSequential` unwraps the underlying `IEnumerable` (effectively undoing `AsParallel`) to make sure that the `OrderBy` doesn't use the problematic parallel implementation. As such it cannot be removed if we want to keep the whole thing in one query.\r\n\r\nThe prototype had a list of tuples as its final product, i.e. it's missing the sorting which is required to make `List<ProvenanceResult>`.",
              "createdAt": "2022-10-27T05:40:58Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "First of all, thanks @adrianvmsft for detailed analysis you did for this issue. As my colleagues noted, `AsSequential` switches from PLINQ (`ParallelQuery`) to standard enumerable. I wanted to avoid sorting in parallel way. The question is, if the sorted collection has some benefit. Tests are passing after removing `OrderBy`, but maybe there are some perf implications in further processing of this collection.",
              "createdAt": "2022-10-27T08:43:22Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Thank you!\r\nI tried a similar query (using AsSequential) in a standalone app, and I can confirm that it does **not** hit the `MergeSortCooperatively` function.",
              "createdAt": "2022-10-27T18:35:07Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2782,17 +2782,18 @@ private List<ProvenanceResult> GetItemProvenance(string itemToMatch, IEnumerable\n                     return new List<ProvenanceResult>();\n                 }\n \n-                return\n-                    projectItemElements\n+                return projectItemElements\n                     .AsParallel()\n-                    .AsOrdered()\n-                    .Select(i => ComputeProvenanceResult(itemToMatch, i))\n+                    .Select((item, index) => ComputeProvenanceResult(itemToMatch, item, index))\n+                    .AsSequential()",
              "author": {
                "login": "adrianvmsft"
              }
            }
          ]
        }
      }
    ]
  }
}