{
  "number": 10065,
  "title": "Inital version of buildcheck threat model",
  "body": "Fixes #10064\r\n\r\n### Context\r\nInitial version of BuildCheck threat model doc\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-24T12:27:03Z",
  "updatedAt": "2024-05-02T11:33:04Z",
  "closedAt": "2024-05-02T11:33:04Z",
  "mergedAt": "2024-05-02T11:33:04Z",
  "additions": 87,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "rokonec/buildcheck-threat-model",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "068d27ecf630d4f45f06da984c61dcdaaafbab5e",
          "message": "Inital version of buildcheck threat model",
          "committedDate": "2024-04-24T12:25:10Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae296afed2d1272c5e6d2c6ec4ed75bbd3398ef6",
          "message": "Fixing converting issues",
          "committedDate": "2024-04-24T15:21:05Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "22b0801952eed3dcdb33054e89c54544c01329e4",
          "message": "Removing weird title: artifact",
          "committedDate": "2024-04-24T15:23:47Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d720bed7ebc70340fd1e8fda616084e3a2c2a3ef",
          "message": "Fix casing in nuget\n\nCo-authored-by: Farhad Alizada <104755925+f-alizada@users.noreply.github.com>",
          "committedDate": "2024-04-29T07:07:41Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4bcf8430264ef305752a2e5e81c6aefdfca090f5",
          "message": "Typo\n\nCo-authored-by: Farhad Alizada <104755925+f-alizada@users.noreply.github.com>",
          "committedDate": "2024-04-29T07:07:56Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The formatting is somewhat weird:\r\n * all backticks are escaped\r\n * there are newlines mid-sentences\r\n * refrences to other sections are not proper md links\r\n * headers go from level 1 to level 4 without any step in between (might be an intention? But it seems that there are phrases that should have been headers, but are not)",
              "createdAt": "2024-04-24T13:15:59Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the SBOM generated by a NuGet proxy, or how do you prevent the malicious package from modifying the information from which the SBOM is generated?",
              "createdAt": "2024-04-24T13:58:53Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,122 @@\n+---\n+title: Threat model of MSBuild BuildCheck feature\n+---\n+\n+# BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality\n+of their MSBuild scripts via rules violations reporting. It will allow\n+MSBuild to gradually roll out additional rules, as users will be capable\n+to configure their opt-in and severity of reports \u2013 preventing unwanted\n+build breakages. And to equip powerusers to roll out their own quality\n+checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)  \n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust\n+boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted\n+operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from\n+violating these conditions.\n+\n+Acquisition\n+\n+#### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external\n+actors inject malicious code into it by supply chain attack or somehow\n+else, such code can run on build machine, mostly build agent or develop\n+box.  \n+  \n+Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild \\`\\<\n+PackageReference /\\>\\` element. This way custom analyzer packages will\n+be included in the generated SBOM and Component Government can detect",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "This is very good question. Generating SBOM is very complicated stuff and every organization shall take it very seriously. Such SBOM, either generated, manualy maintained or both, shall include both development packages (such as those with MSBuild tasks or roslyn analyzers) and build artifacts dependency packages. \r\nSince this is esential, IMO, for modem supplay chain security, in scope of this document I assume it is properly in place.",
              "createdAt": "2024-04-24T15:18:39Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,122 @@\n+---\n+title: Threat model of MSBuild BuildCheck feature\n+---\n+\n+# BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality\n+of their MSBuild scripts via rules violations reporting. It will allow\n+MSBuild to gradually roll out additional rules, as users will be capable\n+to configure their opt-in and severity of reports \u2013 preventing unwanted\n+build breakages. And to equip powerusers to roll out their own quality\n+checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)  \n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust\n+boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted\n+operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from\n+violating these conditions.\n+\n+Acquisition\n+\n+#### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external\n+actors inject malicious code into it by supply chain attack or somehow\n+else, such code can run on build machine, mostly build agent or develop\n+box.  \n+  \n+Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild \\`\\<\n+PackageReference /\\>\\` element. This way custom analyzer packages will\n+be included in the generated SBOM and Component Government can detect",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Is it true that nothing in custom analyzer packages will run before NuGet packages are restored in the project, using `msbuild -t:Restore` or equivalent? That is, MSBuild itself won't snoop the PackageReference items and call NuGet APIs to download the analyzer packages; it won't be like the NuGet SDK resolver.",
              "createdAt": "2024-04-24T17:54:30Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,122 @@\n+---\n+title: Threat model of MSBuild BuildCheck feature\n+---\n+\n+# BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality\n+of their MSBuild scripts via rules violations reporting. It will allow\n+MSBuild to gradually roll out additional rules, as users will be capable\n+to configure their opt-in and severity of reports \u2013 preventing unwanted\n+build breakages. And to equip powerusers to roll out their own quality\n+checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)  \n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust\n+boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted\n+operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from\n+violating these conditions.\n+\n+Acquisition\n+\n+#### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external\n+actors inject malicious code into it by supply chain attack or somehow\n+else, such code can run on build machine, mostly build agent or develop\n+box.  \n+  \n+Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild \\`\\<\n+PackageReference /\\>\\` element. This way custom analyzer packages will\n+be included in the generated SBOM and Component Government can detect",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "Currently we plan to use nuget client as for any other PackageReference entries. The only difference will be in expecting a 'magic' property function call in packaged props file (that's how msbuild will distinguish the analyzers packages during evaluation).\r\nBut there is currently no plan for altered/custom resolution of references",
              "createdAt": "2024-04-26T12:04:45Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,122 @@\n+---\n+title: Threat model of MSBuild BuildCheck feature\n+---\n+\n+# BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality\n+of their MSBuild scripts via rules violations reporting. It will allow\n+MSBuild to gradually roll out additional rules, as users will be capable\n+to configure their opt-in and severity of reports \u2013 preventing unwanted\n+build breakages. And to equip powerusers to roll out their own quality\n+checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)  \n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust\n+boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted\n+operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from\n+violating these conditions.\n+\n+Acquisition\n+\n+#### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external\n+actors inject malicious code into it by supply chain attack or somehow\n+else, such code can run on build machine, mostly build agent or develop\n+box.  \n+  \n+Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild \\`\\<\n+PackageReference /\\>\\` element. This way custom analyzer packages will\n+be included in the generated SBOM and Component Government can detect",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The threat and mitigation of the Execution are very similar to the Acquisition in terms of description, shall we in such case combine those two in one? \r\nAcqusition and Build? ",
              "createdAt": "2024-04-29T06:47:14Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,87 @@\n+\n+# Threat model of MSBuild BuildCheck feature\n+\n+## BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)\n+\n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from violating these conditions.\n+\n+## Acquisition\n+\n+### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\n+\n+It is identical to Roslyn analyzers or any other nuget package, for that matter.\n+\n+## Execution\n+\n+### Threat: Supply chain attack by custom analyzer",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I prefer to keep it as is. These are two different threat with, for now, identical mitigitaion.",
              "createdAt": "2024-04-29T07:09:57Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,87 @@\n+\n+# Threat model of MSBuild BuildCheck feature\n+\n+## BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)\n+\n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from violating these conditions.\n+\n+## Acquisition\n+\n+### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\n+\n+It is identical to Roslyn analyzers or any other nuget package, for that matter.\n+\n+## Execution\n+\n+### Threat: Supply chain attack by custom analyzer",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThis threat is out of scope of this document, as this requires malicious modification of source code (repository) making these sources untrusted.\r\n```",
              "createdAt": "2024-04-29T06:47:40Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,87 @@\n+\n+# Threat model of MSBuild BuildCheck feature\n+\n+## BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)\n+\n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from violating these conditions.\n+\n+## Acquisition\n+\n+### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\n+\n+It is identical to Roslyn analyzers or any other nuget package, for that matter.\n+\n+## Execution\n+\n+### Threat: Supply chain attack by custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box, with intent to inject malicious behavior into build artifacts.\n+\n+#### Mitigation\n+\n+Identical to mitigation of threat [Supply chain attack on custom analyzer](#threat-supply-chain-attack-on-custom-analyzer).\n+\n+### Threat: Third-Party Vulnerabilities\n+Vulnerabilities in custom analyzer or its dependencies.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\n+\n+## Configuration\n+\n+### Threat: Malicious configuration value\n+\n+Although .editorconfig shall be part of trusted sources, and hence not malicious, .editorconfig is looked up in parent folders up to the root. This can allow attacked to store malicious editor config up in parent folders with intent of disabling an analyzer or cause build malfunction for any reason.\n+\n+#### Mitigation\n+\n+This problem is identical to existing .editorconfig for Roslyn analyzers and since we share code for parsing it, we adopt same mitigation strategy, which is:\n+\n+- default template for editor config has `root = true` stopping parent config traversing\n+- code is unit tested to verify and sanitize .editorconfig values\n+\n+### Threat: Intentional analyzer ID conflict or misleading ID\n+\n+Malicious actors can define analyzer ID to be identical or like existing well known analyzer ID to increase probability of executing malicious analyzer code.\n+\n+#### Mitigation\n+\n+Main mitigation relays on nuget packages component governance.\n+\n+BuildCheck also disallow duplicated analyzer IDs and do not allow well known prefixes, for example `microsoft-\\*`, in custom analyzers.\n+\n+## Declaration\n+\n+### Threat: Malicious analyzer registration property function\n+\n+Threat actor can write malicious analyzer registration property function in project files, with intent to run code from non-governed assemblies.\n+\n+#### Mitigation\n+\n+This thread is out of scope of this document, as this requires malicious modification of source code (repository) making these sources untrusted.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nCustom analyzers are delivered as regular NuGet packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\r\n```",
              "createdAt": "2024-04-29T06:50:14Z",
              "path": "documentation/specs/proposed/BuildCheck-feature-threat-model.md",
              "diffHunk": "@@ -0,0 +1,87 @@\n+\n+# Threat model of MSBuild BuildCheck feature\n+\n+## BuildCheck Feature Description\n+\n+The infrastructure within MSBuild allowing pluggability and execution of\n+Analyzers and their Rules previously known as \"warning waves\" and\n+\"MSBuild Analyzers\".\n+\n+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports \u2013 preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks \u2013 whether for general community or internal enterprise usage.\n+\n+[Design\n+Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck.md)\n+\n+[Architecture](https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md)\n+\n+# Threats Identification\n+\n+This feature does not alter existing nor create any new trust boundaries.\n+\n+It is assumed to rely on only trusted sources, be managed by trusted operators, and operated on trusted machines.\n+\n+For this document, we do not address any threats that result from violating these conditions.\n+\n+## Acquisition\n+\n+### Threat: Supply chain attack on custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.\n+\n+It is identical to Roslyn analyzers or any other nuget package, for that matter.\n+\n+## Execution\n+\n+### Threat: Supply chain attack by custom analyzer\n+\n+Custom BuildCheck analyzers are executed during build. If bad external actors inject malicious code into it by supply chain attack or somehow else, such code can run on build machine, mostly build agent or develop box, with intent to inject malicious behavior into build artifacts.\n+\n+#### Mitigation\n+\n+Identical to mitigation of threat [Supply chain attack on custom analyzer](#threat-supply-chain-attack-on-custom-analyzer).\n+\n+### Threat: Third-Party Vulnerabilities\n+Vulnerabilities in custom analyzer or its dependencies.\n+\n+#### Mitigation\n+\n+Custom analyzers are delivered as regular nuget packages by MSBuild `<PackageReference />` element. This way custom analyzer packages will be included in the generated SBOM and Component Government can detect and warn about known malicious custom analyzers.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}