{
  "number": 6274,
  "title": "Opt Into Perf Logging",
  "body": "Fixes #5900\r\n\r\n### Context\r\nIt's time we opt into performance logging: https://github.com/dotnet/msbuild/pull/5861\r\n\r\n### Changes Made\r\n- PerformanceLogEventListener creates the `DOTNET_PERFLOG_DIR` directory if it doesn't exist.\r\n- Opt into perf logging in `eng\\cibuild_bootstrapped_msbuild.cmd` and the `.sh` equivalent.\r\n- Added a powershell script that runs after windows/core and windows/full bootstrapped_msbuild scripts. This script runs `taskkill /f /im msbuild.exe` and `taskkill /f /im VBCSCompiler.exe` (these tasks were seen as holding a lock on some generated perf files). If we don't kill these tasks before trying to copy over the perf logs, it will fail the entire perf-log upload because the out of proc node (node mode 1) is still holding a lock on the file.\r\n\r\n### Testing\r\nWe _should_ see perf logs under `artifacts/log/<configuration>/PerformanceLogs`\r\n\r\n### Notes\r\nDon't review commit by commit \ud83d\ude2c needless to say, this PR should be squashed.",
  "state": "MERGED",
  "createdAt": "2021-03-17T00:28:20Z",
  "updatedAt": "2021-04-15T18:10:11Z",
  "closedAt": "2021-04-15T18:10:09Z",
  "mergedAt": "2021-04-15T18:10:08Z",
  "additions": 17,
  "deletions": 3,
  "changedFiles": 5,
  "headRefName": "opt-into-perf-logging",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "24c3e4250306ac3bd329db70de8aa0eaff801447",
          "message": "Add DOTNET_PERFLOG_DIR environment variable when we call the build script for official builds",
          "committedDate": "2021-03-16T23:48:21Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c4781dbbe619f26ed7456e3e55b192f976c3720",
          "message": "Publish perflogs for pipeline builds",
          "committedDate": "2021-03-16T23:48:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26d8deb35eb4b072adf1dd603d6eb383f48c5aff",
          "message": "Check if env var is null or empty, try creating the directory if it doesn't exist",
          "committedDate": "2021-03-16T23:48:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ded3e0351d99edd0ea08fb009d1856da8b3ce36d",
          "message": "Modify unit test to account for performance logger creating the directory to log to",
          "committedDate": "2021-03-16T23:48:50Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fda5165ab896009a9cb7ea280d6531ed990745ee",
          "message": "Strip away any quotes in the env var",
          "committedDate": "2021-03-19T17:26:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7c8f351317f52c5bb5c366a9dc622c50c66d489e",
          "message": "Opt into perf logging during bootstrap builds",
          "committedDate": "2021-03-19T19:32:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6babc3f5c51429cbefe77dd7a2580ddf22477060",
          "message": "Revert \"Add DOTNET_PERFLOG_DIR environment variable when we call the build script for official builds\"\n\nThis reverts commit 24c3e4250306ac3bd329db70de8aa0eaff801447.",
          "committedDate": "2021-03-19T19:33:03Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ac71225bc301e916decfb05460167d214e229fe",
          "message": "Revert \"Publish perflogs for pipeline builds\"\n\nThis reverts commit 5c4781dbbe619f26ed7456e3e55b192f976c3720.",
          "committedDate": "2021-03-19T19:33:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b7cbda6e24e384ed197dcbcf06f6f804ab5bace3",
          "message": "Add publish step for perf logs in CI builds",
          "committedDate": "2021-03-19T19:41:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c96e62f8e3135bf7df9cfb8d097704fefa8680e",
          "message": "Revert \"Add publish step for perf logs in CI builds\"\n\nThis reverts commit b7cbda6e24e384ed197dcbcf06f6f804ab5bace3.",
          "committedDate": "2021-03-19T20:38:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb577dff8bc88052771be7b6f6b5528f2b1e5c9f",
          "message": "Rename output directory to PerformanceLogs",
          "committedDate": "2021-03-19T20:45:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f5dbbfe352d6c0efa3170ac8231b76f04f306ea0",
          "message": "Have the only non-bootstrap build run before all bootstrap builds",
          "committedDate": "2021-03-19T20:46:15Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "002145c05e2948084d4dfc8d6f02c2eaaa400a3b",
          "message": "Dont pass a null string into TrimAndStripAnyQuotes",
          "committedDate": "2021-03-24T23:46:06Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "202e0fd78c6201c41f06551e3abeeea6039c65c2",
          "message": "DEBUG: Add console writelines on perflogeventlistener creation",
          "committedDate": "2021-03-24T23:58:10Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cde91c9b8a261d72872d6cc67a79b9d521360d3e",
          "message": "Add performance logging to cibuild_bootstrapped_msbuild shell script for macos and linux",
          "committedDate": "2021-03-25T19:19:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85c68db3b7915ba115e57d81b66c7b1cc85d2a5e",
          "message": "Don't strip quotes from env var.\nApparently it isn't common to set paths in environment variables with\nquotes.",
          "committedDate": "2021-03-25T19:34:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "afb9c2bbb6bddf045dd47bc2f477daef7698152a",
          "message": "Allow 5 retries for uploading perf logs.\nIs disabling nodereuse not closing out nodes fast enough?",
          "committedDate": "2021-03-25T19:59:32Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83b808ab2cbed3f442ca0775329fea35ec7ebcf9",
          "message": "DEBUG: Add powershell script to output details on the process holding the file",
          "committedDate": "2021-03-31T20:31:29Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b091dfff3f194d2e5209f9512a85f4d576fe90d",
          "message": "DEBUG: Fix path in powershell script",
          "committedDate": "2021-03-31T21:08:59Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84a19050c66bcca5f7babbd35ca06dbad69c2f60",
          "message": "DEBUG: Powershell task has a name. Kills msbuild and vbcscompiler processes to allow file copies",
          "committedDate": "2021-04-01T21:15:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc90d2a7cfb9cad1464ff7a282e8ad4c9a8709d7",
          "message": "Debug: Powershell task only kills processes",
          "committedDate": "2021-04-01T21:39:54Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "328048203fba06d6bdebe053d56d38878a34b039",
          "message": "Revert \"DEBUG: Add console writelines on perflogeventlistener creation\"\n\nThis reverts commit 202e0fd78c6201c41f06551e3abeeea6039c65c2.",
          "committedDate": "2021-04-02T20:50:13Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eae38853fb94df434fb17fe059ba78d0087283c3",
          "message": "Revert \"Allow 5 retries for uploading perf logs.\"\n\nThis reverts commit afb9c2bbb6bddf045dd47bc2f477daef7698152a.",
          "committedDate": "2021-04-02T20:57:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41f0fc6e03b93d8ac2f9909231f9d86596459eb6",
          "message": "Revert \"Have the only non-bootstrap build run before all bootstrap builds\"\n\nThis reverts commit f5dbbfe352d6c0efa3170ac8231b76f04f306ea0.",
          "committedDate": "2021-04-02T21:04:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2df6127fafecad4fbb70aac2f5e4105647c26bc3",
          "message": "Run powershell script for correct windows build tasks",
          "committedDate": "2021-04-02T21:07:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2fce6e2f7dbe785f64a40ed7349b65c63dad3211",
          "message": "Try naming powershell task for clarity",
          "committedDate": "2021-04-02T21:08:17Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57987d3786aed782529a39037d45d4da820c6d4b",
          "message": "Capitalize the displayname of the powershell task",
          "committedDate": "2021-04-02T21:11:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1230ac75896a22ddead426a89ffd7f99b4dcf76",
          "message": "DEBUG: Print out command line for lingering processes to find the log for the killed process. Verify it logged everything it needed to",
          "committedDate": "2021-04-05T19:18:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1cc8885b954ac57d897055a9e388f2555f5e8f26",
          "message": "Fix indents",
          "committedDate": "2021-04-05T19:27:36Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86be06394808e6987d16033d422bc1468ef8aeee",
          "message": "Run dotnet build-server shutdown instead of taskkill",
          "committedDate": "2021-04-05T20:34:23Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1eed79beb4e4ee260f14ffb9e99f8d236c986f10",
          "message": "Set environment variable to disable node reuse",
          "committedDate": "2021-04-05T22:45:57Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a4a460258de8f31bca5ef39f4d76c3e68763c7b",
          "message": "Disable nodereuse for test that spawns lingering msbuild.exe",
          "committedDate": "2021-04-12T21:52:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f1fb73f487c21c043e81b3adc6411467aa368a5",
          "message": "Remove disablenodereuse env variable from cibuild script",
          "committedDate": "2021-04-12T21:57:29Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "424e50a3807560c503683ae82113faffcfa07db1",
          "message": "Prevent test assemblies from logging performance info by clearing the environment variable",
          "committedDate": "2021-04-13T19:37:23Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "32900ee26eaa05f1f332a15dd909141fab9a60e0",
          "message": "Revert \"Disable nodereuse for test that spawns lingering msbuild.exe\"\n\nThis reverts commit 6a4a460258de8f31bca5ef39f4d76c3e68763c7b.",
          "committedDate": "2021-04-13T19:42:38Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Note to self: Contact dnceng and ask the failures in copying perf logging artifacts. \r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=4565213&view=results shows a failure that it couldn't find the files to copy. Is BuildConfiguration not set at this point in `vsts-dotnet.yml`?\r\n`env: { DOTNET_PERFLOG_DIR: '$(Build.SourcesDirectory)\\artifacts\\log\\$(BuildConfiguration)\\perf' }`",
        "createdAt": "2021-03-19T01:15:47Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Perf logs can fail to publish if msbuild nodes hang onto them. \r\n```\r\nFail to upload 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-7724-f1fd5808709141d399664b2c8ca3a4f7.log' due to 'The process cannot access the file 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-7724-f1fd5808709141d399664b2c8ca3a4f7.log' because it is being used by another process.'.\r\nSystem.IO.IOException: The process cannot access the file 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-7724-f1fd5808709141d399664b2c8ca3a4f7.log' because it is being used by another process.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at Microsoft.VisualStudio.Services.Agent.Worker.Build.FileContainerServer.UploadAsync(IAsyncCommandContext context, Int32 uploaderId, Boolean uploadToBlob, CancellationToken token)\r\nAsync Command End: Upload Artifact\r\n##[error]File upload failed even after retry.\r\n```\r\n\r\nNot the end of the world. Looks like CoreOnWindows published its perf logs. CoreOnMac and CoreOnLinux don't seem to have captured any perflogs. @brianrob is there any reason they shouldn't be?",
        "createdAt": "2021-03-19T23:47:28Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos, I would expect that if the environment variable is set to a writeable location, then it should just work.  Are you able to reproduce this locally?  If not, it might be worth it to add some `printf` style debugging, and then you can look at the log to see what happened.",
        "createdAt": "2021-03-20T00:04:19Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "The environment variable is being set properly, logs are being created and populated. The publish step is running into issues because of a lock on a log file.\r\n\r\nUploading perf logs status\r\n----\r\nWindows full: consistently fails\r\nWindows core: sometimes fails\r\nmacos core: works\r\nlinux core: works\r\n\r\nThere's typically a lock on a log file, which is strange because msbuild runs with `/nr` so the processes should be terminated when the build completes.\r\n```\r\nFail to upload 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-6700-556fe571db2441b38b38519d6a040b36.log' due to 'The process cannot access the file 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-6700-556fe571db2441b38b38519d6a040b36.log' because it is being used by another process.'.\r\nSystem.IO.IOException: The process cannot access the file 'D:\\a\\1\\s\\artifacts\\log\\Debug\\PerformanceLogs\\perf-6700-556fe571db2441b38b38519d6a040b36.log' because it is being used by another process.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at Microsoft.VisualStudio.Services.Agent.Worker.Build.FileContainerServer.UploadAsync(IAsyncCommandContext context, Int32 uploaderId, Boolean uploadToBlob, CancellationToken token)\r\n```\r\n\r\nI tried to get the publish task to allow multiple retries, but it looks like that parameter just isn't being used: https://github.com/microsoft/azure-pipelines-tasks/issues/11451\r\n\r\nSome ideas:\r\nA. Set up the script such that a failed file upload doesn't prevent the rest from uploading\r\nB. Ensure perflogeventlistener is disposed of earlier and therefore drops the lock on the file? /cc: @brianrob \r\n\r\n\r\nTotal side note: I noticed our cibuilds still try to publish netcoreapp2.1 logs, when our logs are net5.0 now. I don't think those publish steps are necessary.",
        "createdAt": "2021-03-26T00:59:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Interesting.  Ideally we don't make upload of the log conditional, as this is a nice functional test of the whole system.\r\n\r\nI think it could be worth scripting a check to see what process is locking the file.  It's going to be an MSBuild process, but perhaps the process is still alive even though we think it shouldn't be.  The file name includes the PID for the process that owns the log.  Could you fetch the command line for the PID and print it to the console?\r\n\r\nSince this is limited to Windows, you could do something like:\r\n```\r\nGet-WmiObject -Query \"SELECT CommandLine FROM Win32_Process WHERE ProcessID = <PID>\"\r\n```",
        "createdAt": "2021-03-26T03:45:33Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "Unfortunately it looks like passing parameters to this task (ie, retry 5 times) isn't supported, as its deprecated. And moving to a newer task would require updating the pool of machines we're running on. I'm not sure how involved that process would be, but I assume it's a yak to be shaved.\r\n",
        "createdAt": "2021-03-29T20:01:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@brianrob \r\nHere's the script:\r\n\r\n```powershell\r\n      Get-ChildItem -Path \"artifacts\\log\\Debug\\PerformanceLogs\\*\" | Where-Object {$_.Extension -eq '.log'} | ForEach-Object {\r\n        $s = $_.BaseName.Split('-')[1];\r\n        Write-Host \"Checking Process ID: $s\"\r\n        Get-WmiObject -Query \"SELECT CommandLine FROM Win32_Process WHERE ProcessID = $s\"\r\n      }\r\n```\r\nDetails from the process that's locking the file\r\n\r\n\r\n### Windows Full\r\nLooks legit.\r\n```\r\nChecking Process ID: 1096\r\n\r\n\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\MSBuild.exe /nologo \r\n                   /nodemode:1 /nodeReuse:true /low:false\r\nPSComputerName   : \r\n\r\n```\r\n\r\nAnd \r\n\r\nThis one may be a newer process that spawned and happened to take the same PID.\r\n```\r\nChecking Process ID: 3232\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : \\??\\C:\\Windows\\system32\\conhost.exe 0x4\r\nPSComputerName   : \r\n\r\n```\r\nLooks legit.\r\n```\r\nChecking Process ID: 5300\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : \"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Tasks.UnitTests\\Debug\\net472\\Roslyn\\VBCSCompiler.exe\" \r\n                   \"-pipename:NuYm3XeVYobbHIPpGrn+XHTco0Zkr6qZXvQrQA55Cqw\"\r\nPSComputerName   : \r\n\r\n```\r\n\r\n\r\n### Windows Core\r\nLooks like it caught the previous powershell script running? Or it's catching itself? Likely catching itself.\r\n```\r\nChecking Process ID: 2668\r\n\r\n\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"  -NoLogo -NoProfile -NonInteractive \r\n                   -ExecutionPolicy Unrestricted -Command \". 'D:\\a\\_temp\\ce3ad429-b778-4ca5-a071-347039ee03c9.ps1'\"\r\nPSComputerName   : \r\n\r\nChecking Process ID: 2668\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"  -NoLogo -NoProfile -NonInteractive \r\n                   -ExecutionPolicy Unrestricted -Command \". 'D:\\a\\_temp\\ce3ad429-b778-4ca5-a071-347039ee03c9.ps1'\"\r\nPSComputerName   : \r\n\r\n```\r\n\r\nThis one looks legit.\r\n```\r\nChecking Process ID: 3252\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : \"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\Roslyn\\VBCSCompiler.exe\" \r\n                   \"-pipename:8Zt8SJ9zCljCMApPK4hTcAue0XXCpOUXsyHtUwkrKSQ\"\r\nPSComputerName   : \r\n\r\n```\r\n\r\n```\r\nChecking Process ID: 5184\r\n__GENUS          : 2\r\n__CLASS          : Win32_Process\r\n__SUPERCLASS     : \r\n__DYNASTY        : \r\n__RELPATH        : \r\n__PROPERTY_COUNT : 1\r\n__DERIVATION     : {}\r\n__SERVER         : \r\n__NAMESPACE      : \r\n__PATH           : \r\nCommandLine      : D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\MSBuild.exe /nologo \r\n                   /nodemode:1 /nodeReuse:true /low:false\r\nPSComputerName   : \r\n\r\n```",
        "createdAt": "2021-03-31T21:46:41Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I have a `killnodereuse` script I often run that does what you'd expect whenever processes are hanging or colliding with each other.\r\n\r\nIt's quick and dirty, but we could insert a script that does:\r\n```\r\ntaskkill /f /im msbuild.exe\r\ntaskkill /f /im dotnet.exe\r\ntaskkill /f /im vbcscompiler.exe\r\ntaskkill /f /im omnisharp.exe\r\n```\r\n\r\nAfter the build script runs. Or change the timing where a `/nr:true` msbuild node will die off? Not sure exactly where this happens.",
        "createdAt": "2021-03-31T21:48:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yeah, you could kill off the processes to make sure that you're able to copy the files.  What I find interesting is that some of these processes shouldn't be generating files.  VBCSCompiler.exe shouldn't be unless it is loading msbuild.  Same with PowerShell.  Basically, if a process doesn't load msbuild, then it shouldn't be creating a log file.\r\n\r\nIt would be interesting to kill these processes off, see which ones had to be killed, and what was in the log file.  Perhaps there are long-lived processes that are living beyond the CI run and we just didn't know that until now.",
        "createdAt": "2021-04-01T00:19:18Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-04-01T23:12:04Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-04-01T23:12:13Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "Ready for review. Recommend reviewing the diff rather than by commits. Lots of test commits used. The final diff looks a lot cleaner. I think it's good to go unless we have other ideas for getting around the failed perf log upload.",
        "createdAt": "2021-04-02T21:14:41Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Notes from PR review:\r\n\r\nWe want to get Rainer's take on it.\r\nSome options:\r\n1. Take the change as-is, killing the tasks like this is hacky but doesn't impact any user scenario.\r\n2. Reduce the time it takes for OOP nodes to shut down after an `nr:false` build.\r\n3. Update the task we're using to allow for multiple retries\r\n\t- The task we're using, PublishBuildArtifacts, [has a bug](https://github.com/microsoft/azure-pipelines-tasks/issues/11451) that doesn't allow arguments to be passed. The newer task, `PublishPipelineArtifacts` doesn't take any arguments and potentially doesn't use robocopy so I'm not sure if there are even arguments to pass.",
        "createdAt": "2021-04-05T18:56:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Current status is setting MSBUILDDISABLENODEREUSE to 1 with no custom scripts and the node properly shuts down. Obviously the bigger issue here is a node being passed nodeReuse true. Running this a second time to be safe and I'll be fine merging it as-is and investigating further.",
        "createdAt": "2021-04-05T23:26:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "When did we switch from waiting a week is ok to merging despite known issues?",
        "createdAt": "2021-04-05T23:32:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> When did we switch from waiting a week is ok to merging despite known issues?\r\n\r\n@Forgind What? We didn't. I want this in a state that is \"acceptable to merge\" should we decide that we want to so we can act on the perf data. My last comment can be interpreted as \"The nodereuse thing looks like a bug, but setting the environment variable will allow us to act on this perf data while I dig into what the real issue here is\".",
        "createdAt": "2021-04-06T02:26:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> I'll be fine merging it as-is and investigating further.\r\n\r\nThis sounded to me like merging early. If you meant to say that you think it's ready to merge but still intend to wait a week, then sure, though I'm less confident.",
        "createdAt": "2021-04-07T05:59:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "After mulling this over some, I don't think this should be blocked on the hanging process. It sheds light on a potential issue but isn't the cause.\r\n\r\nLocally run `eng\\cibuild_bootstrapped_msbuild.cmd` and see that there will always be a hanging process that was launched with `nodereuse:true` despite our build scripts passing `/nr:false`. I'll get an issue written up for it during PR review, but my best guess is that running our build scripts with `-test` causes nodereuse to be true for at least one node to help tests run faster.",
        "createdAt": "2021-04-09T21:49:49Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Feedback from PR review: Maybe the hanging node is actually _spawned_ from a unit test. I didn't consider this and it sounds very plausible!",
        "createdAt": "2021-04-12T16:07:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "`StopOnFirstFailureandBuildInParallelMultipleNode`, `PropertyOverrideContainsSemicolon`, and all tests under `TargetsFile_Test` are the culprits. \r\n\r\n`StopOnFirstFailureandBuildInParallelMultipleNode` spawns a process with /nr:true (default for buildmanager)\r\n\r\n`PropertyOverrideContainsSemicolon` and tests under `TargetsFile_Test` spawn VBCSCompiler.\r\n",
        "createdAt": "2021-04-12T23:12:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Resolved the issue by disabling DOTNET_PERFLOG_DIR for all unit test assemblies. Created an issue tracking hanging assemblies here: https://github.com/dotnet/msbuild/issues/6344.\r\n\r\nConfirmed locally that no extra perf logs get generated from tests. CI should succeed with no issues.",
        "createdAt": "2021-04-13T20:17:00Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm confused by why all these other changes. Like why did you move them around? And did you just move them around? It's hard to tell what the other changes are.",
              "createdAt": "2021-03-28T04:36:33Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -5,64 +5,70 @@ trigger:\n - vs*\n \n jobs:\n-- job: BootstrapMSBuildOnFullFrameworkWindows",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The changes to this file should be viewed by commits. I have a commit where all I did was move the only non-bootstrap build to the top so that it runs first.",
              "createdAt": "2021-03-28T22:43:36Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -5,64 +5,70 @@ trigger:\n - vs*\n \n jobs:\n-- job: BootstrapMSBuildOnFullFrameworkWindows",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Noting that I reverted this change. My goal was to change the order these jobs run in, but they're listed in alphabetical order anyway \ud83d\ude15",
              "createdAt": "2021-04-05T17:47:43Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -5,64 +5,70 @@ trigger:\n - vs*\n \n jobs:\n-- job: BootstrapMSBuildOnFullFrameworkWindows",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did this test used to exist? Seems a little odd to validate that we don't actually capture logs...",
              "createdAt": "2021-03-28T04:38:34Z",
              "path": "src/MSBuild.UnitTests/PerfLog_Tests.cs",
              "diffHunk": "@@ -74,7 +74,7 @@ public void TestPerfLogEnabledProducedLogFile()\n         }\n \n         [Fact]\n-        public void TestPerfLogDirectoryDoesNotExist()\n+        public void TestPerfLogDirectoryGetsCreated()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The test validated that if you set a path that didn't exist, nothing would happen. I changed the logic of the eventlistener to create the directory, so the test wasn't necessary anymore.",
              "createdAt": "2021-03-28T22:44:20Z",
              "path": "src/MSBuild.UnitTests/PerfLog_Tests.cs",
              "diffHunk": "@@ -74,7 +74,7 @@ public void TestPerfLogEnabledProducedLogFile()\n         }\n \n         [Fact]\n-        public void TestPerfLogDirectoryDoesNotExist()\n+        public void TestPerfLogDirectoryGetsCreated()",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are Console.WriteLines the right way to log? If so, are they meant to be user-facing? If so, shouldn't we localize them? Either way, why so many exclamation points? Also, this should be much simpler if it's actually needed:\r\n```suggestion\r\n                Console.WriteLine(e.Message + \"Inner Exception: \" + e.InnerException);\r\n```",
              "createdAt": "2021-03-28T04:45:14Z",
              "path": "src/MSBuild/PerformanceLogEventListener.cs",
              "diffHunk": "@@ -49,16 +50,28 @@ internal static PerformanceLogEventListener Create()\n                 // we if we do this work in the constructor, and don't get an opportunity to call Dispose, the\n                 // EventSources will remain enabled even if there aren't any consuming EventListeners.\n \n+                Console.WriteLine(\"!!! Creating PerformanceLogEventListener\");\n+\n                 // Check to see if we should enable the event listener.\n                 string logDirectory = Environment.GetEnvironmentVariable(PerfLogDirEnvVar);\n-                if (Directory.Exists(logDirectory))\n+                Console.WriteLine(\"!!! DOTNET_PERFLOG_DIR: {0}\", logDirectory);\n+\n+                if (!string.IsNullOrEmpty(logDirectory) && Directory.CreateDirectory(logDirectory).Exists)\n                 {\n                     eventListener = new PerformanceLogEventListener();\n                     eventListener.Initialize(logDirectory);\n+                    Console.WriteLine(\"!!! PerfLogEventListener will log to: {0}\", logDirectory);\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"!!! PerfLogEventListener failed to initialize.\");\n+                    Console.WriteLine(\"!!! LogDirectory: {0}\", logDirectory);\n+                    Console.WriteLine(\"!!! DOTNET_PERFLOG_DIR: {0}\", Environment.GetEnvironmentVariable(PerfLogDirEnvVar));\n                 }\n             }\n-            catch\n+            catch (Exception e)\n             {\n+                Console.WriteLine(\"!!! We threw!\\nInner Exception: {0}\\nMessage: {1}\", e.InnerException, e.Message);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This was part of a debug commit that will be reverted when the PR is ready to go in.",
              "createdAt": "2021-03-28T22:44:36Z",
              "path": "src/MSBuild/PerformanceLogEventListener.cs",
              "diffHunk": "@@ -49,16 +50,28 @@ internal static PerformanceLogEventListener Create()\n                 // we if we do this work in the constructor, and don't get an opportunity to call Dispose, the\n                 // EventSources will remain enabled even if there aren't any consuming EventListeners.\n \n+                Console.WriteLine(\"!!! Creating PerformanceLogEventListener\");\n+\n                 // Check to see if we should enable the event listener.\n                 string logDirectory = Environment.GetEnvironmentVariable(PerfLogDirEnvVar);\n-                if (Directory.Exists(logDirectory))\n+                Console.WriteLine(\"!!! DOTNET_PERFLOG_DIR: {0}\", logDirectory);\n+\n+                if (!string.IsNullOrEmpty(logDirectory) && Directory.CreateDirectory(logDirectory).Exists)\n                 {\n                     eventListener = new PerformanceLogEventListener();\n                     eventListener.Initialize(logDirectory);\n+                    Console.WriteLine(\"!!! PerfLogEventListener will log to: {0}\", logDirectory);\n+                }\n+                else\n+                {\n+                    Console.WriteLine(\"!!! PerfLogEventListener failed to initialize.\");\n+                    Console.WriteLine(\"!!! LogDirectory: {0}\", logDirectory);\n+                    Console.WriteLine(\"!!! DOTNET_PERFLOG_DIR: {0}\", Environment.GetEnvironmentVariable(PerfLogDirEnvVar));\n                 }\n             }\n-            catch\n+            catch (Exception e)\n             {\n+                Console.WriteLine(\"!!! We threw!\\nInner Exception: {0}\\nMessage: {1}\", e.InnerException, e.Message);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This very much looks like a workaround. Why are there hanging processes in the first place? Can we fix that? Also, this makes it a little cleaner:\r\n```suggestion\r\n      taskkill /f /im msbuild.exe /im vbcscompiler.exe\r\n```",
              "createdAt": "2021-04-02T23:07:54Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I didn't know you can pass /im multiple times!",
              "createdAt": "2021-04-04T18:35:43Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "One thing to clarify here: My expectation is that there were always processes hanging around.  I don't believe that this change modifies process lifetime.  You could try running `dotnet build-server shutdown` to kill the compiler server.  One thing to confirm - are we getting full perf logs from these runs, or are they truncated because of the call to `taskkill`?",
              "createdAt": "2021-04-05T17:04:05Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "brianrob"
              }
            },
            {
              "body": "If we kill the processes, the file that they generate isn't completed:\r\n\r\n```\r\n[2021-04-05T19:37:33.6451866Z] Event=Microsoft-Build/MSBuildExeStart ProcessID=7688 ThreadID=1\t commandLine=\"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\MSBuild.exe /nologo /nodemode:1 /nodeReuse:true /low:false\" \r\n[2021-04-05T19:37:34.0831946Z] Event=Microsoft-Build/RequestThreadProcStart ProcessID=7688 ThreadID=11\t \r\n[2021-04-05T19:37:34.0872085Z] Event=Microsoft-Build/BuildProjectStart ProcessID=7688 ThreadID=11\t projectPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.0962009Z] Event=Microsoft-Build/LoadDocumentStart ProcessID=7688 ThreadID=11\t fullPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.1042039Z] Event=Microsoft-Build/LoadDocumentStop ProcessID=7688 ThreadID=11\t fullPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.1072967Z] Event=Microsoft-Build/ParseStart ProcessID=7688 ThreadID=11\t projectFileName=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.1142095Z] Event=Microsoft-Build/ParseStop ProcessID=7688 ThreadID=11\t projectFileName=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.3042076Z] Event=Microsoft-Build/TargetStart ProcessID=7688 ThreadID=11\t targetName=\"msbuild\" \r\n[2021-04-05T19:37:34.3582095Z] Event=Microsoft-Build/LoadDocumentStart ProcessID=7688 ThreadID=11\t fullPath=\"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\Microsoft.Common.tasks\" \r\n[2021-04-05T19:37:34.3602064Z] Event=Microsoft-Build/LoadDocumentStop ProcessID=7688 ThreadID=11\t fullPath=\"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\Microsoft.Common.tasks\" \r\n[2021-04-05T19:37:34.3602064Z] Event=Microsoft-Build/ParseStart ProcessID=7688 ThreadID=11\t projectFileName=\"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\Microsoft.Common.tasks\" \r\n[2021-04-05T19:37:34.3621959Z] Event=Microsoft-Build/ParseStop ProcessID=7688 ThreadID=11\t projectFileName=\"D:\\a\\1\\s\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\Microsoft.Common.tasks\" \r\n[2021-04-05T19:37:34.4402082Z] Event=Microsoft-Build/TargetStop ProcessID=7688 ThreadID=11\t targetName=\"msbuild\" \r\n[2021-04-05T19:37:34.4442095Z] Event=Microsoft-Build/BuildProjectStop ProcessID=7688 ThreadID=11\t projectPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" targets=\"msbuild\" \r\n[2021-04-05T19:37:34.4462038Z] Event=Microsoft-Build/RequestThreadProcStop ProcessID=7688 ThreadID=11\t \r\n[2021-04-05T19:37:34.5532097Z] Event=Microsoft-Build/RequestThreadProcStart ProcessID=7688 ThreadID=11\t \r\n[2021-04-05T19:37:34.5532097Z] Event=Microsoft-Build/BuildProjectStart ProcessID=7688 ThreadID=11\t projectPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" \r\n[2021-04-05T19:37:34.5571985Z] Event=Microsoft-Build/TargetStart ProcessID=7688 ThreadID=11\t targetName=\"msbuild\" \r\n[2021-04-05T19:37:34.5612210Z] Event=Microsoft-Build/TargetStop ProcessID=7688 ThreadID=11\t targetName=\"msbuild\" \r\n[2021-04-05T19:37:34.5612210Z] Event=Microsoft-Build/BuildProjectStop ProcessID=7688 ThreadID=11\t projectPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmp4965ff255b434b4e8c54fa1b6dc9cf10.tmp\" targets=\"msbuild\" \r\n[2021-04-05T19:37:34.5612210Z] Event=Microsoft-Build/RequestThreadProcStop ProcessID=7688 ThreadID=11\t \r\n[2021-04-05T19:40:57.3420042Z] Event=Microsoft-Build/RequestThreadProcStart ProcessID=7688 ThreadID=11\t \r\n[2021-04-05T19:40:57.3420042Z] Event=Microsoft-Build/BuildProjectStart ProcessID=7688 ThreadID=11\t projectPath=\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\041qbmta.yej\\tmpe37eba57a280484fb0a6015308bebaff.tmp\" \r\n[2021-04-05T19:40:57.3430119Z] Event=Microsoft-Build/LoadDocumentStart ProcessID=7688 ThreadID=11\t fullPath=\"C:\\Users\\VssAdministrator\\App\r\n```\r\nNotice how it ends on `LoadDocumentStart` and has no `MSBuildExeStop`\r\n\r\nI'll try `dotnet build-server` shutdown, which I didn't realize was an option!",
              "createdAt": "2021-04-05T20:30:08Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "If certain events hadn't fired, wouldn't that still mean those events wouldn't fire as it tries to get out of the build as fast as possible?",
              "createdAt": "2021-04-05T21:25:37Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Right. I'd like to get this in a state that is \"good enough\" if we want to see this perf data and act on it. Even if it's not the perfect solution. Part of me suspects digging into this node issue could take longer than expected. I've been digging into it without much result so far. The current idea is to set the MSBUILDDISABLENODEREUSE env var to 1 and see if the node will realize it needs to die.",
              "createdAt": "2021-04-05T22:53:09Z",
              "path": ".vsts-dotnet-ci.yml",
              "diffHunk": "@@ -34,6 +34,10 @@ jobs:\n       mergeTestResults: true\n     continueOnError: true\n     condition: always()\n+  - powershell: | \n+      taskkill /f /im msbuild.exe",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Setting this at this layer means it applies only to the bootstrapped build. That's mostly fine, but it might be nice to have the perf data for the Windows/Release build too, which doesn't run the bootstrap. Worth changing? To argue with myself for a second, maybe not because it'd always be collecting the data from the LKG MSBuild installed on the build agent which is maybe not interesting.",
              "createdAt": "2021-04-13T20:31:36Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -123,6 +124,9 @@ try {\n   # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.\n   $env:MSBUILDDONOTLAUNCHDEBUGGER=\"true\"\n \n+  # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900\n+  $env:DOTNET_PERFLOG_DIR=$PerfLogDir",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I considered that but ultimately came to the same conclusion. I can envision a future where we capture both and run a tool to diff the two so we can have our own mini-RPS, but I'll save that for when we decide to prioritize something like that.",
              "createdAt": "2021-04-13T20:37:20Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -123,6 +124,9 @@ try {\n   # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.\n   $env:MSBUILDDONOTLAUNCHDEBUGGER=\"true\"\n \n+  # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900\n+  $env:DOTNET_PERFLOG_DIR=$PerfLogDir",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}