{
  "number": 10107,
  "title": "cleanup duplicate property implementation",
  "body": "may or may not fix https://github.com/dotnet/installer/pull/19667#issuecomment-2093639748 and may or may not unblock the next one https://github.com/dotnet/installer/pull/19669\r\n\r\n@ViktorHofer @MichaelSimons @rainersigwald ",
  "state": "MERGED",
  "createdAt": "2024-05-05T20:00:13Z",
  "updatedAt": "2024-05-06T19:43:52Z",
  "closedAt": "2024-05-06T09:27:18Z",
  "mergedAt": "2024-05-06T09:27:18Z",
  "additions": 2,
  "deletions": 11,
  "changedFiles": 1,
  "headRefName": "patch-2",
  "isDraft": false,
  "author": {
    "login": "kasperk81"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e2cc56d6b671104948c61fee8566782ed14a5406",
          "message": "cleanup duplicate property implementation",
          "committedDate": "2024-05-05T19:57:32Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "If the linker trims the msbuild assemblies either here or in the SDK layout, then I could see how this change would solve the TypeLoadException. Given that this is a positive change anyways, I would take it.",
        "createdAt": "2024-05-06T08:37:02Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@dotnet/kitten can you please approve and merge this PR in? We need a new SDK build with this change the sooner the better.",
        "createdAt": "2024-05-06T09:18:40Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> Are SDK assemblies really trimmed?\r\n\r\nThey are not.",
        "createdAt": "2024-05-06T13:51:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "it did help. the next error in source-build  test build fixed in https://github.com/dotnet/msbuild/pull/10111",
        "createdAt": "2024-05-06T19:23:43Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "@kasperk81 this change did not help. Per @ViktorHofer the problem with the source-build in installer is a build-vs-runtime split across https://github.com/dotnet/runtime/commit/b8fe1d0ccb60926d6e7ef5d42e2398c178c9ee5c, which will be addressed by https://github.com/dotnet/installer/pull/19684.",
        "createdAt": "2024-05-06T19:28:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, previous error was:\r\n>   System.TypeLoadException: Method 'get_Count' in type 'Microsoft.Build.Collections.PropertyDictionary`1' from assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' does not have an implementation.\r\n\r\nnext error is:\r\n\r\n>   System.TypeLoadException: Method 'ContainsKey' in type 'Microsoft.Build.Collections.PropertyDictionary`1' from assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' does not have an implementation.\r\n\r\nso get_Count is fixed by this pr, and https://github.com/dotnet/msbuild/pull/10111 will fix ContainsKey.",
        "createdAt": "2024-05-06T19:30:26Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "I should rephrase: this change did not _resolve the underlying problem_, which was with compiling and running across an incompatible boundary in the .NET runtime.",
        "createdAt": "2024-05-06T19:34:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "i can see that runtime change has subtle effects in multiple places and people are pleading to bring it back https://github.com/dotnet/runtime/issues/31001#issuecomment-2096509061.",
        "createdAt": "2024-05-06T19:39:28Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "Yeah, and that should be fine--it's not a breaking change (except for C++/CLI, I guess). The problem arose when we compiled targeting .NET-9-with-that-change (which I guess changed some overload resolution) and then ran on .NET-9-without-that-change. That shouldn't happen again even if it comes back (unless it's then backed out again).",
        "createdAt": "2024-05-06T19:43:51Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}