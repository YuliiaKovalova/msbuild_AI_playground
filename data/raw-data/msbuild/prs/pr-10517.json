{
  "number": 10517,
  "title": "Fix the scope setting doc and guard",
  "body": "### Context\r\nWe support different scopes for different rules within single check. In fact - this is at the discretion of the individual check.\r\n\r\nThis PR is explicitly describing the behavior in the document - so that there is no confusion.\r\nIt as well removes the redundand guard check which is preventing the behavior.\r\n",
  "state": "MERGED",
  "createdAt": "2024-08-14T09:01:41Z",
  "updatedAt": "2024-08-15T16:41:23Z",
  "closedAt": "2024-08-15T16:41:22Z",
  "mergedAt": "2024-08-15T16:41:22Z",
  "additions": 24,
  "deletions": 25,
  "changedFiles": 3,
  "headRefName": "proto/buildcheck-support-multiple-scopes",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "38fda8c62b05edb3645c6012f99508aee99785a1",
          "message": "Fix the scope setting doc and guard",
          "committedDate": "2024-08-14T08:59:58Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f94256068f78b7b84dc4f0e4363c928779885f5b",
          "message": "Fix typos",
          "committedDate": "2024-08-15T15:48:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`distinc` should be probably `distinct`",
              "createdAt": "2024-08-15T14:45:45Z",
              "path": "documentation/specs/BuildCheck/BuildCheck.md",
              "diffHunk": "@@ -205,19 +205,20 @@ build_check.BC0101.severity=warning\n \n #### Scope of Check\n \n-Option `EvaluationCheckScope` with following possible options will be available:\n+Option `EvaluationCheckScope` (just `scope` in `.editorconfig`) with following possible options will be available:\n \n-| EvaluationCheckScope (Solution Explorer)   | EditorConfig option      |  Behavior  | \n+| EvaluationCheckScope (scope)   | EditorConfig option      |  Behavior  | \n | ------------- | ------------- |   ------------- |\n | ProjectFileOnly | `project_file` | Only the data from currently checked project will be sent to the check. Imports will be discarded. | \n | WorkTreeImports | `work_tree_imports` |  Only the data from currently checked project and imports from files not recognized to be in nuget cache or SDK install folder will be sent to the check. Other imports will be discarded. |  \n | ProjectWithAllImports | `all` | All data will be sent to the check. | \n \n-All rules of a single check must have the `EvaluationCheckScope` configured to a same value. If any rule from the check have the value configured differently - a warning will be issued during the build and check will be deregistered.\n+Same rule can have `EvaluationCheckScope` configured to different values for different projects. If check has multiple rules (this is e.g. case of PropertyUsageCheck rules - [BC0201](Codes.md#bc0201---usage-of-undefined-property), [BC0202](Codes.md#bc0202---property-first-declared-after-it-was-used) and [BC0203](Codes.md#bc0203----property-declared-but-never-used)) - those can have the `EvaluationCheckScope` set to distinc values.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`migh` should be probably `might`",
              "createdAt": "2024-08-15T14:46:51Z",
              "path": "documentation/specs/BuildCheck/BuildCheck.md",
              "diffHunk": "@@ -205,19 +205,20 @@ build_check.BC0101.severity=warning\n \n #### Scope of Check\n \n-Option `EvaluationCheckScope` with following possible options will be available:\n+Option `EvaluationCheckScope` (just `scope` in `.editorconfig`) with following possible options will be available:\n \n-| EvaluationCheckScope (Solution Explorer)   | EditorConfig option      |  Behavior  | \n+| EvaluationCheckScope (scope)   | EditorConfig option      |  Behavior  | \n | ------------- | ------------- |   ------------- |\n | ProjectFileOnly | `project_file` | Only the data from currently checked project will be sent to the check. Imports will be discarded. | \n | WorkTreeImports | `work_tree_imports` |  Only the data from currently checked project and imports from files not recognized to be in nuget cache or SDK install folder will be sent to the check. Other imports will be discarded. |  \n | ProjectWithAllImports | `all` | All data will be sent to the check. | \n \n-All rules of a single check must have the `EvaluationCheckScope` configured to a same value. If any rule from the check have the value configured differently - a warning will be issued during the build and check will be deregistered.\n+Same rule can have `EvaluationCheckScope` configured to different values for different projects. If check has multiple rules (this is e.g. case of PropertyUsageCheck rules - [BC0201](Codes.md#bc0201---usage-of-undefined-property), [BC0202](Codes.md#bc0202---property-first-declared-after-it-was-used) and [BC0203](Codes.md#bc0203----property-declared-but-never-used)) - those can have the `EvaluationCheckScope` set to distinc values.\n \n-Same rule can have `EvaluationCheckScope` configured to different values for different projects.\n+Currently the proper filtering of data is at the discretion of the Check - as the infrastructure might not be able to decide what can be considered in scope (e.g. in case of [BC0203](Codes.md#bc0203----property-declared-but-never-used) - \"_Property declared, but never used_\" - the property writes (definitions) are scoped, but reads (usages) are not, while [BC0201](Codes.md#bc0201---usage-of-undefined-property) \"_Usage of undefined property_\" needs to scope reads, but not writes (definitions). Identical input data need to be scoped differently based on the meaning of the Check). \n+\n+Some checks migh completely ignore the `EvaluationCheckScope` setting - as they can operate on data, that are sourced from build execution (as opposed from build evaluation) and hence the scoping is not possible. This is e.g. case of [BC0102](Codes.md#bc0102---double-writes) \"_Double Writes_\" check.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}