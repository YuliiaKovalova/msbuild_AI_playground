{
  "number": 10186,
  "title": "Make BuildCheckForwardingLogger filter the events ",
  "body": "Fixes #10068\r\n\r\n### Context\r\nCurrently BuildCheckForwardingLogger does not filter out any of the events, which results in extra perf owerhead.\r\n\r\n### Changes Made\r\nMade BuildCheckForwardingLogger filter out the events that are not used in BuildCheckConnectorLogger.\r\n\r\n### Testing\r\nUnit tests & manual runs ",
  "state": "MERGED",
  "createdAt": "2024-05-29T16:01:10Z",
  "updatedAt": "2024-07-31T11:53:13Z",
  "closedAt": "2024-07-31T11:53:13Z",
  "mergedAt": "2024-07-31T11:53:13Z",
  "additions": 59,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "tune-build-check-forwarding-logger-3",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8e2cb8f9eeed1c4544e9331d0117d5dae4c755b7",
          "message": "BC forwarding logger",
          "committedDate": "2024-05-29T15:57:08Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "20f74b5334e6b848d020d5856a5d8e9c39983975",
          "message": "Remove custom analyser detection",
          "committedDate": "2024-07-16T09:09:38Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Perf numbers:\r\nOC rebuild | with analyzers | with analyzers & fix | without analyzers\r\n-- | -- | -- | --\r\nmedian | 91508 | 85445 | 79022\r\nmean | 97061 | 88541 | 81857\r\n\r\nIt seems like there is a new perf regression since we have implemented the explicit logger forwarder in #10084. But this fix improves the situation a bit.\r\n",
        "createdAt": "2024-05-30T15:55:17Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Even the custom analyzers are receiving data via API that is pre-digested by the BuildCheck central logger. So there should be no need for special casing",
              "createdAt": "2024-05-31T17:17:08Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,75 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }\n+\n+    /// <summary>\n+    /// Set of events to be forwarded to  <see cref=\"BuildCheckConnectorLogger\"/>\n+    /// </summary>\n+    private HashSet<Type> _eventsToForward = new HashSet<Type>\n+    {\n+        typeof(ProjectEvaluationFinishedEventArgs),\n+        typeof(ProjectEvaluationStartedEventArgs),\n+        typeof(ProjectStartedEventArgs),\n+        typeof(ProjectFinishedEventArgs),\n+        typeof(BuildCheckTracingEventArgs),\n+        typeof(BuildCheckAcquisitionEventArgs),\n+        typeof(TaskStartedEventArgs),\n+        typeof(TaskFinishedEventArgs),\n+        typeof(TaskParameterEventArgs)\n+    };\n+\n+    private bool _customAnalyzerDetected;\n+\n+    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);\n+\n+    public void Initialize(IEventSource eventSource)\n+    {\n+        _customAnalyzerDetected = false;\n+        eventSource.AnyEventRaised += EventSource_AnyEventRaised;\n+    }\n+\n+    public void EventSource_AnyEventRaised(object sender, BuildEventArgs buildEvent)\n+    {\n+        if (_customAnalyzerDetected)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "got it, removed the special casing",
              "createdAt": "2024-07-16T09:11:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,75 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }\n+\n+    /// <summary>\n+    /// Set of events to be forwarded to  <see cref=\"BuildCheckConnectorLogger\"/>\n+    /// </summary>\n+    private HashSet<Type> _eventsToForward = new HashSet<Type>\n+    {\n+        typeof(ProjectEvaluationFinishedEventArgs),\n+        typeof(ProjectEvaluationStartedEventArgs),\n+        typeof(ProjectStartedEventArgs),\n+        typeof(ProjectFinishedEventArgs),\n+        typeof(BuildCheckTracingEventArgs),\n+        typeof(BuildCheckAcquisitionEventArgs),\n+        typeof(TaskStartedEventArgs),\n+        typeof(TaskFinishedEventArgs),\n+        typeof(TaskParameterEventArgs)\n+    };\n+\n+    private bool _customAnalyzerDetected;\n+\n+    public void Initialize(IEventSource eventSource, int nodeCount) => Initialize(eventSource);\n+\n+    public void Initialize(IEventSource eventSource)\n+    {\n+        _customAnalyzerDetected = false;\n+        eventSource.AnyEventRaised += EventSource_AnyEventRaised;\n+    }\n+\n+    public void EventSource_AnyEventRaised(object sender, BuildEventArgs buildEvent)\n+    {\n+        if (_customAnalyzerDetected)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we want to error out on attempts to set those?",
              "createdAt": "2024-07-16T10:09:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "No, this is called in the execution - if only to set `null` value",
              "createdAt": "2024-07-16T11:28:23Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Besides, we do not want a build to fail because of a logger, so we shall not throw in it. This code path does not have any catches.\r\n",
              "createdAt": "2024-07-16T11:41:29Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the `set` used somewhere and should it be overall? If we expect only `LoggerVerbosity.Quiet`. \r\nAlso could you please clarify why we are returning const value here? ",
              "createdAt": "2024-07-17T11:48:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "For this forwarding logger there is not much point in setting the verbosity, but when initializing the logging system will try to set some value there, so we need the set function to be defined. As for the `LoggerVerbosity.Quiet` - there are some checks that check the maximum verbosity of all the loggers that are attached and we would not want this logger to affect these checks, hence - lowest possible verbosity is assigned to this logger.",
              "createdAt": "2024-07-19T08:52:44Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does it mean that, once we will need additional information for BuildCheck we will have to populate that as well? \r\nIs it related only to the custom build check or built-in as well? ",
              "createdAt": "2024-07-17T11:49:01Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }\n+\n+    /// <summary>\n+    /// Set of events to be forwarded to  <see cref=\"BuildCheckConnectorLogger\"/>\n+    /// </summary>\n+    private HashSet<Type> _eventsToForward = new HashSet<Type>",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "If we have a build-in analyzer that uses some other events, we will need to add them to the list indeed, or they would not work. Custom analyzers should not be impacted, according to what @JanKrivanek told me in [another conversation](https://github.com/dotnet/msbuild/pull/10186#discussion_r1622733774).",
              "createdAt": "2024-07-19T08:09:07Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }\n+\n+    /// <summary>\n+    /// Set of events to be forwarded to  <see cref=\"BuildCheckConnectorLogger\"/>\n+    /// </summary>\n+    private HashSet<Type> _eventsToForward = new HashSet<Type>",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thank you for clarifying! ",
              "createdAt": "2024-07-19T09:50:50Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs",
              "diffHunk": "@@ -7,13 +7,61 @@\n using System.Text;\n using System.Threading.Tasks;\n using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Framework;\n+using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;\n \n namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n \n /// <summary>\n /// Forwarding logger for the build check infrastructure.\n-/// For now we jus want to forward all events, while disable verbose logging of tasks.\n+/// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.\n+/// If the custom analyzer is detected, starts to unconditionally forward all events.\n /// In the future we may need more specific behavior.\n /// </summary>\n-internal class BuildCheckForwardingLogger : CentralForwardingLogger\n-{ }\n+/// <remarks>\n+/// Ensure that events filtering is in sync with <see cref=\"BuildCheckConnectorLogger\"/>\n+/// </remarks>\n+internal class BuildCheckForwardingLogger : IForwardingLogger\n+{\n+    public IEventRedirector? BuildEventRedirector { get; set; }\n+\n+    public int NodeId { get; set; }\n+\n+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Quiet; set { return; } }\n+\n+    public string? Parameters { get; set; }\n+\n+    /// <summary>\n+    /// Set of events to be forwarded to  <see cref=\"BuildCheckConnectorLogger\"/>\n+    /// </summary>\n+    private HashSet<Type> _eventsToForward = new HashSet<Type>",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}