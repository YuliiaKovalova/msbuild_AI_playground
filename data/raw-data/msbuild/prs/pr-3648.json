{
  "number": 3648,
  "title": "Add Microsoft.IO.Redist and System.Memory package",
  "body": "Extracted common changes from 2 branches that I'm working on.\r\nTested the changes by aliasing the IO types in FileUtilities. (actual change in separate branch)",
  "state": "MERGED",
  "createdAt": "2018-08-23T00:38:42Z",
  "updatedAt": "2020-12-30T22:53:10Z",
  "closedAt": "2018-08-30T00:53:31Z",
  "mergedAt": "2018-08-30T00:53:31Z",
  "additions": 55,
  "deletions": 28,
  "changedFiles": 21,
  "headRefName": "AddRedistPackage",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "eb391dc079a27c3161c1e4b96fb342b87b3c913b",
          "message": "Add reference to Microsoft.IO.Redist and System.Memory",
          "committedDate": "2018-08-30T00:04:58Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7f269269f68d105896337d3bc16231d5172635f",
          "message": "Use latest language version\n\nHelp VS with value tuples.",
          "committedDate": "2018-08-30T00:04:58Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eaeb796dd0a11fb1bf7a9a641904ad11742534a0",
          "message": "add flag to use stage 2",
          "committedDate": "2018-08-30T00:04:58Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@ccastanedaucf You can use `exp/net472` after this gets merged in to experiment with spans and stuff.",
        "createdAt": "2018-08-23T00:40:40Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I assume this impacts the Mono build too right?\r\n\r\n/cc @radical ",
        "createdAt": "2018-08-28T13:32:50Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@akoeplinger @radical \r\nNot quite sure how this impacts Mono. The [redist package ](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.IO.Redist) targets 4.7.2, which should be OK with Mono? Maybe it would require updating Mono for our repo?",
        "createdAt": "2018-08-28T17:51:45Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai it depends on what the package does (haven't looked), if it just p/invokes into Win32 APIs that won't work on Mono :)",
        "createdAt": "2018-08-28T18:10:44Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Well, worst case, we can just disable it for mono. The package will be referenced by putting some type aliases in an `#if FULLFRAMEWORK`, but we can make it `#if FULLFRAMEWORK && !MONO`",
        "createdAt": "2018-08-28T18:23:38Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Yep. I just checked and the package indeed calls into Windows APIs so we'll have to do that.",
        "createdAt": "2018-08-28T18:24:52Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@rainersigwald, ready to merge?",
        "createdAt": "2018-08-29T04:28:48Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I feel like this should be sorted alphabetically.",
              "createdAt": "2018-08-23T14:39:57Z",
              "path": "build/Packages.props",
              "diffHunk": "@@ -38,7 +39,9 @@\n     <PackageReference Update=\"System.Runtime.Serialization.Primitives\" Version=\"4.1.1\" />\n     <PackageReference Update=\"System.Security.Principal.Windows\" Version=\"4.3.0\" />\n     <PackageReference Update=\"System.Text.Encoding.CodePages\" Version=\"4.0.1\" />\n-    \n+\n+    <PackageReference Update=\"Microsoft.IO.Redist\" Version=\"4.6.0-preview1-26822-04\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In my head, these should be\r\n\r\n```\r\n-noBootstrap\r\n-bootstrap\r\n```\r\n\r\nThat'd be quicker to type on the command line. But I'll adjust based on consensus.",
              "createdAt": "2018-08-23T14:42:10Z",
              "path": "build/build.ps1",
              "diffHunk": "@@ -39,6 +40,7 @@ function Print-Usage() {\n     Write-Host \"  -skipTests              Don't run tests\"\n     Write-Host \"  -test                   Run tests. Ignores skipTests\"\n     Write-Host \"  -bootstrapOnly          Don't run build again with bootstrapped MSBuild\"\n+    Write-Host \"  -rebuildWithBootstrap   Run build again with bootstrapped MSBuild. Ignores bootstrapOnly\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "But bootstrap (building the bootstrap directory) always happens. Or do you say that `bootstrap` means doing the stage1 (the bootstrap) based build?",
              "createdAt": "2018-08-23T18:23:14Z",
              "path": "build/build.ps1",
              "diffHunk": "@@ -39,6 +40,7 @@ function Print-Usage() {\n     Write-Host \"  -skipTests              Don't run tests\"\n     Write-Host \"  -test                   Run tests. Ignores skipTests\"\n     Write-Host \"  -bootstrapOnly          Don't run build again with bootstrapped MSBuild\"\n+    Write-Host \"  -rebuildWithBootstrap   Run build again with bootstrapped MSBuild. Ignores bootstrapOnly\"",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "In my head `-bootstrap` means \"build with the bootstrapped MSBuild\". I totally get that that's not 100% logical.",
              "createdAt": "2018-08-23T18:43:15Z",
              "path": "build/build.ps1",
              "diffHunk": "@@ -39,6 +40,7 @@ function Print-Usage() {\n     Write-Host \"  -skipTests              Don't run tests\"\n     Write-Host \"  -test                   Run tests. Ignores skipTests\"\n     Write-Host \"  -bootstrapOnly          Don't run build again with bootstrapped MSBuild\"\n+    Write-Host \"  -rebuildWithBootstrap   Run build again with bootstrapped MSBuild. Ignores bootstrapOnly\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can you move this into the new ItemGroup you created with this condition?",
              "createdAt": "2018-08-23T14:43:20Z",
              "path": "src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj",
              "diffHunk": "@@ -12,13 +12,18 @@\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a bit skeptical of this change; isn't our style generally \"use `var` only when the type is unambiguous, usually because it's a constructor on the right-hand side\"? Or will this help with a substitution later?",
              "createdAt": "2018-08-23T14:45:08Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -208,7 +208,7 @@ internal ProjectRootElementCache(bool autoReloadFromDisk)\n \n                 if (projectRootElement != null && _autoReloadFromDisk)\n                 {\n-                    FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);\n+                    var fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It will help with later substitutions between System.IO.FileInfo and Microsoft.IO.FileInfo",
              "createdAt": "2018-08-23T18:24:11Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -208,7 +208,7 @@ internal ProjectRootElementCache(bool autoReloadFromDisk)\n \n                 if (projectRootElement != null && _autoReloadFromDisk)\n                 {\n-                    FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);\n+                    var fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Hmm. On the one hand this is nice and easy. On the other, if it were harder to do that, it might be easier to see the impact of changes in PR? I'm fine leaving the change in.",
              "createdAt": "2018-08-23T18:44:15Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -208,7 +208,7 @@ internal ProjectRootElementCache(bool autoReloadFromDisk)\n \n                 if (projectRootElement != null && _autoReloadFromDisk)\n                 {\n-                    FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);\n+                    var fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These references have setup impact, right? Can you add them to the VSIX?",
              "createdAt": "2018-08-23T14:45:39Z",
              "path": "src/Utilities/Microsoft.Build.Utilities.csproj",
              "diffHunk": "@@ -31,6 +32,10 @@\n     <PackageReference Include=\"System.Text.Encoding.CodePages\" />\n   </ItemGroup>\n \n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">\n+    <PackageReference Include=\"Microsoft.IO.Redist\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point.",
              "createdAt": "2018-08-23T18:26:02Z",
              "path": "src/Utilities/Microsoft.Build.Utilities.csproj",
              "diffHunk": "@@ -31,6 +32,10 @@\n     <PackageReference Include=\"System.Text.Encoding.CodePages\" />\n   </ItemGroup>\n \n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">\n+    <PackageReference Include=\"Microsoft.IO.Redist\" />",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you add `-bootstrap` to `build/cibuild.cmd`?",
              "createdAt": "2018-08-28T18:24:33Z",
              "path": "build.cmd",
              "diffHunk": "@@ -1,3 +1,3 @@\n @echo off\n-powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"%~dp0build\\build.ps1\" -build -bootstraponly -skiptests %*\n+powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"%~dp0build\\build.ps1\" -build -skiptests %*",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we really drop `-sign`? IIRC it only validates that the official build would sign things, when in CI mode.",
              "createdAt": "2018-08-29T15:09:06Z",
              "path": "build/cibuild.cmd",
              "diffHunk": "@@ -1,3 +1,3 @@\n @echo off\n-powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"& '%~dp0build.ps1'\" -build -pack -sign -ci -prepareMachine %*",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Would we catch missing entries in `signtooldata.json` if we take it out?",
              "createdAt": "2018-08-30T00:03:47Z",
              "path": "build/cibuild.cmd",
              "diffHunk": "@@ -1,3 +1,3 @@\n @echo off\n-powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"& '%~dp0build.ps1'\" -build -pack -sign -ci -prepareMachine %*",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "No, I don't think we would--that's why I'm asking if it should be put back in.",
              "createdAt": "2018-08-31T14:49:18Z",
              "path": "build/cibuild.cmd",
              "diffHunk": "@@ -1,3 +1,3 @@\n @echo off\n-powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"& '%~dp0build.ps1'\" -build -pack -sign -ci -prepareMachine %*",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, I only now realize I actually deleted `-sign`. I'll go ahead and add it back :)\r\n",
              "createdAt": "2018-08-31T20:45:10Z",
              "path": "build/cibuild.cmd",
              "diffHunk": "@@ -1,3 +1,3 @@\n @echo off\n-powershell -NoLogo -NoProfile -ExecutionPolicy ByPass \"& '%~dp0build.ps1'\" -build -pack -sign -ci -prepareMachine %*",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}