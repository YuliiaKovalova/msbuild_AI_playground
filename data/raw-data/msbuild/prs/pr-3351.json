{
  "number": 3351,
  "title": "Code cleanup in Tasks\\R*.cs",
  "body": "For #3320\r\n- ReSharper, nameof()\r\n- Converted some .NET 1.1 data structures to generics to avoid up and down casts\r\n- Sized some allocations\r\n",
  "state": "MERGED",
  "createdAt": "2018-05-26T00:44:57Z",
  "updatedAt": "2021-10-12T00:01:42Z",
  "closedAt": "2018-05-30T06:17:39Z",
  "mergedAt": "2018-05-30T06:17:39Z",
  "additions": 958,
  "deletions": 1890,
  "changedFiles": 21,
  "headRefName": "dev/erikmav/resharper3",
  "isDraft": false,
  "author": {
    "login": "erikmav"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "70ba78b026fe21bd0b680f61e2a3c4401b003478",
          "message": "Code cleanup in Tasks\\R*.cs\n- ReSharper, nameof()\n- Converted some .NET 1.1 data structures to generics to avoid up and down casts\n- Sized some allocations",
          "committedDate": "2018-05-26T00:42:33Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33051683498eea17f8f3e4a7a87544377d32f734",
          "message": "PR comments",
          "committedDate": "2018-05-29T18:55:42Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed4362de51315238b0753423b85f9568ed47aa4c",
          "message": "PR comment",
          "committedDate": "2018-05-29T20:08:29Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-bot test Ubuntu14.04 Build for CoreCLR please",
        "createdAt": "2018-05-29T13:31:35Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Ubuntu14.04 Build for CoreCLR please",
        "createdAt": "2018-05-29T17:01:14Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Ubuntu14.04 Build for Mono please",
        "createdAt": "2018-05-29T17:01:26Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@erikma The Mono builds are horked, you may ignore red CI for Mono. We're working on it.",
        "createdAt": "2018-05-29T17:37:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for Full please",
        "createdAt": "2018-05-29T22:25:18Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for Full please",
        "createdAt": "2018-05-29T23:39:30Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@dotnet-bot test Ubuntu14.04 Build for CoreCLR please\r\n@dotnet-bot test Windows_NT Build for Full please\r\n\r\nCI has not been good today :(",
        "createdAt": "2018-05-30T02:50:39Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Fold into preexisting `<remarks>`?",
              "createdAt": "2018-05-29T17:41:42Z",
              "path": "src/Tasks/Dependencies.cs",
              "diffHunk": "@@ -9,7 +9,8 @@ namespace Microsoft.Build.Tasks\n     /// <remarks>\n     /// Represents a cache of inputs to a compilation-style task.\n     /// </remarks>\n-    [Serializable()]\n+    /// <remarks>On-disk serialization format, don't change field names or types or use readonly.</remarks>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Converted prev remarks into summary instead",
              "createdAt": "2018-05-29T18:32:16Z",
              "path": "src/Tasks/Dependencies.cs",
              "diffHunk": "@@ -9,7 +9,8 @@ namespace Microsoft.Build.Tasks\n     /// <remarks>\n     /// Represents a cache of inputs to a compilation-style task.\n     /// </remarks>\n-    [Serializable()]\n+    /// <remarks>On-disk serialization format, don't change field names or types or use readonly.</remarks>",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: space before the `:` in the ternary",
              "createdAt": "2018-05-29T17:43:41Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -303,10 +265,9 @@ private static RedistList GetFrameworkListFromReferenceAssembliesPath(TargetDotN\n \n             // On dogfood build machines, v3.5 is not formally installed, so this returns null.\n             // We don't use redist lists in this case.            \n-            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>(): RedistList.GetRedistListPathsFromDisk(referenceAssembliesPath);\n-\n-            AssemblyTableInfo[] assemblyTableInfos = new AssemblyTableInfo[redistListPaths.Length];\n+            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>(): GetRedistListPathsFromDisk(referenceAssembliesPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2018-05-29T18:32:37Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -303,10 +265,9 @@ private static RedistList GetFrameworkListFromReferenceAssembliesPath(TargetDotN\n \n             // On dogfood build machines, v3.5 is not formally installed, so this returns null.\n             // We don't use redist lists in this case.            \n-            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>(): RedistList.GetRedistListPathsFromDisk(referenceAssembliesPath);\n-\n-            AssemblyTableInfo[] assemblyTableInfos = new AssemblyTableInfo[redistListPaths.Length];\n+            string[] redistListPaths = (referenceAssembliesPath == null) ? Array.Empty<string>(): GetRedistListPathsFromDisk(referenceAssembliesPath);",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc4d \ud83d\udc4d \ud83d\udc4d ",
              "createdAt": "2018-05-29T17:44:40Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -333,21 +293,20 @@ public static string[] GetRedistListPathsFromDisk(string frameworkDirectory)\n                     s_redistListPathCache = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase);\n                 }\n \n-                if (!s_redistListPathCache.ContainsKey(frameworkDirectory))\n+                if (!s_redistListPathCache.TryGetValue(frameworkDirectory, out string[] results))\n                 {\n                     string redistDirectory = Path.Combine(frameworkDirectory, RedistListFolder);\n \n                     if (Directory.Exists(redistDirectory))\n                     {\n-                        string[] results = Directory.GetFiles(redistDirectory, MatchPattern);\n+                        results = Directory.GetFiles(redistDirectory, MatchPattern);\n                         s_redistListPathCache.Add(frameworkDirectory, results);\n-\n-                        return s_redistListPathCache[frameworkDirectory];\n+                        return results;\n                     }\n                 }\n                 else\n                 {\n-                    return s_redistListPathCache[frameworkDirectory];\n+                    return results;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Little stuff like this eats invisibly at CPU when running...",
              "createdAt": "2018-05-29T19:09:40Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -333,21 +293,20 @@ public static string[] GetRedistListPathsFromDisk(string frameworkDirectory)\n                     s_redistListPathCache = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase);\n                 }\n \n-                if (!s_redistListPathCache.ContainsKey(frameworkDirectory))\n+                if (!s_redistListPathCache.TryGetValue(frameworkDirectory, out string[] results))\n                 {\n                     string redistDirectory = Path.Combine(frameworkDirectory, RedistListFolder);\n \n                     if (Directory.Exists(redistDirectory))\n                     {\n-                        string[] results = Directory.GetFiles(redistDirectory, MatchPattern);\n+                        results = Directory.GetFiles(redistDirectory, MatchPattern);\n                         s_redistListPathCache.Add(frameworkDirectory, results);\n-\n-                        return s_redistListPathCache[frameworkDirectory];\n+                        return results;\n                     }\n                 }\n                 else\n                 {\n-                    return s_redistListPathCache[frameworkDirectory];\n+                    return results;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "Plus is non-atomic!",
              "createdAt": "2018-05-29T19:22:24Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -333,21 +293,20 @@ public static string[] GetRedistListPathsFromDisk(string frameworkDirectory)\n                     s_redistListPathCache = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase);\n                 }\n \n-                if (!s_redistListPathCache.ContainsKey(frameworkDirectory))\n+                if (!s_redistListPathCache.TryGetValue(frameworkDirectory, out string[] results))\n                 {\n                     string redistDirectory = Path.Combine(frameworkDirectory, RedistListFolder);\n \n                     if (Directory.Exists(redistDirectory))\n                     {\n-                        string[] results = Directory.GetFiles(redistDirectory, MatchPattern);\n+                        results = Directory.GetFiles(redistDirectory, MatchPattern);\n                         s_redistListPathCache.Add(frameworkDirectory, results);\n-\n-                        return s_redistListPathCache[frameworkDirectory];\n+                        return results;\n                     }\n                 }\n                 else\n                 {\n-                    return s_redistListPathCache[frameworkDirectory];\n+                    return results;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "My personal style would leave a blank line here.",
              "createdAt": "2018-05-29T17:45:43Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -392,40 +342,41 @@ public static RedistList GetRedistList(AssemblyTableInfo[] assemblyTables)\n             string key = keyBuilder.ToString();\n             lock (s_locker)\n             {\n-                if (s_cachedRedistList.ContainsKey(key))\n-                    return (RedistList)s_cachedRedistList[key];\n+                if (s_cachedRedistList.TryGetValue(key, out RedistList redistList))\n+                {\n+                    return redistList;\n+                }\n \n-                RedistList redistList = new RedistList(assemblyTables);\n+                redistList = new RedistList(assemblyTables);\n                 s_cachedRedistList.Add(key, redistList);\n-",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "restored",
              "createdAt": "2018-05-29T18:35:16Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -392,40 +342,41 @@ public static RedistList GetRedistList(AssemblyTableInfo[] assemblyTables)\n             string key = keyBuilder.ToString();\n             lock (s_locker)\n             {\n-                if (s_cachedRedistList.ContainsKey(key))\n-                    return (RedistList)s_cachedRedistList[key];\n+                if (s_cachedRedistList.TryGetValue(key, out RedistList redistList))\n+                {\n+                    return redistList;\n+                }\n \n-                RedistList redistList = new RedistList(assemblyTables);\n+                redistList = new RedistList(assemblyTables);\n                 s_cachedRedistList.Add(key, redistList);\n-",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```c#\r\nreturn entry?.FullName ?? assemblyName;\r\n```\r\n\r\n?",
              "createdAt": "2018-05-29T17:46:59Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -507,10 +456,7 @@ public bool FrameworkAssemblyEntryInRedist(AssemblyNameExtension assemblyName)\n         public string GetUnifiedAssemblyName(string assemblyName)\n         {\n             AssemblyEntry entry = GetUnifiedAssemblyEntry(assemblyName);\n-            if (entry != null)\n-                return entry.FullName;\n-            else\n-                return assemblyName;\n+            return entry != null ? entry.FullName : assemblyName;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "R# likes that but I dunno, that many ?. and ?? make my eyes cross.",
              "createdAt": "2018-05-29T18:36:01Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -507,10 +456,7 @@ public bool FrameworkAssemblyEntryInRedist(AssemblyNameExtension assemblyName)\n         public string GetUnifiedAssemblyName(string assemblyName)\n         {\n             AssemblyEntry entry = GetUnifiedAssemblyEntry(assemblyName);\n-            if (entry != null)\n-                return entry.FullName;\n-            else\n-                return assemblyName;\n+            return entry != null ? entry.FullName : assemblyName;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "Changed it to your way.",
              "createdAt": "2018-05-29T18:56:39Z",
              "path": "src/Tasks/RedistList.cs",
              "diffHunk": "@@ -507,10 +456,7 @@ public bool FrameworkAssemblyEntryInRedist(AssemblyNameExtension assemblyName)\n         public string GetUnifiedAssemblyName(string assemblyName)\n         {\n             AssemblyEntry entry = GetUnifiedAssemblyEntry(assemblyName);\n-            if (entry != null)\n-                return entry.FullName;\n-            else\n-                return assemblyName;\n+            return entry != null ? entry.FullName : assemblyName;",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this line should be one tab stop further right.",
              "createdAt": "2018-05-29T17:52:01Z",
              "path": "src/Tasks/ResGen.cs",
              "diffHunk": "@@ -343,10 +334,11 @@ protected internal override void AddResponseFileCommands(CommandLineBuilderExten\n                         ToolLocationHelper.GetPathToDotNetFrameworkSdkFile(\n                             \"resgen.exe\",\n                             TargetDotNetFrameworkVersion.Version35),\n-                        StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(StronglyTypedLanguage))\n+                        StringComparison.OrdinalIgnoreCase)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2018-05-29T18:36:27Z",
              "path": "src/Tasks/ResGen.cs",
              "diffHunk": "@@ -343,10 +334,11 @@ protected internal override void AddResponseFileCommands(CommandLineBuilderExten\n                         ToolLocationHelper.GetPathToDotNetFrameworkSdkFile(\n                             \"resgen.exe\",\n                             TargetDotNetFrameworkVersion.Version35),\n-                        StringComparison.OrdinalIgnoreCase) && String.IsNullOrEmpty(StronglyTypedLanguage))\n+                        StringComparison.OrdinalIgnoreCase)",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Aren't you changing field names here? Is that intentional?",
              "createdAt": "2018-05-29T17:52:57Z",
              "path": "src/Tasks/ResGenDependencies.cs",
              "diffHunk": "@@ -16,8 +17,10 @@ namespace Microsoft.Build.Tasks\n     /// <remarks>\n     /// This class is a caching mechanism for the resgen task to keep track of linked\n     /// files within processed .resx files.\n+    /// \n+    /// This is an on-disk serialization format, don't change field names or types or use readonly.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "A little white lie: Don't change serialized fields. I renamed isDirty to _isDirty since it's marked NonSerialized] (in-memory state only)",
              "createdAt": "2018-05-29T18:40:43Z",
              "path": "src/Tasks/ResGenDependencies.cs",
              "diffHunk": "@@ -16,8 +17,10 @@ namespace Microsoft.Build.Tasks\n     /// <remarks>\n     /// This class is a caching mechanism for the resgen task to keep track of linked\n     /// files within processed .resx files.\n+    /// \n+    /// This is an on-disk serialization format, don't change field names or types or use readonly.",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`dictEntry?.Value`? Or is it guaranteed to be non-null by some mechanism?",
              "createdAt": "2018-05-29T17:54:03Z",
              "path": "src/Tasks/ResGenDependencies.cs",
              "diffHunk": "@@ -262,24 +241,28 @@ internal static string[] GetLinkedFiles(string filename, string baseLinkedFileDi\n \n                     foreach (DictionaryEntry dictEntry in resxReader)\n                     {\n-                        if ((dictEntry.Value != null) && (dictEntry.Value is ResXDataNode))\n+                        if (dictEntry.Value is ResXDataNode node)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "operator 'is' handles the null .Value properly while doing the matching",
              "createdAt": "2018-05-29T18:37:30Z",
              "path": "src/Tasks/ResGenDependencies.cs",
              "diffHunk": "@@ -262,24 +241,28 @@ internal static string[] GetLinkedFiles(string filename, string baseLinkedFileDi\n \n                     foreach (DictionaryEntry dictEntry in resxReader)\n                     {\n-                        if ((dictEntry.Value != null) && (dictEntry.Value is ResXDataNode))\n+                        if (dictEntry.Value is ResXDataNode node)",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "TIL!",
              "createdAt": "2018-05-29T18:38:46Z",
              "path": "src/Tasks/ResGenDependencies.cs",
              "diffHunk": "@@ -262,24 +241,28 @@ internal static string[] GetLinkedFiles(string filename, string baseLinkedFileDi\n \n                     foreach (DictionaryEntry dictEntry in resxReader)\n                     {\n-                        if ((dictEntry.Value != null) && (dictEntry.Value is ResXDataNode))\n+                        if (dictEntry.Value is ResXDataNode node)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```c#\r\nreturn metadataValue?.Trim();\r\n```\r\n?",
              "createdAt": "2018-05-29T18:04:04Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I let R# change it to:                 return metadataValue?.Trim() ?? metadataValue;\r\n",
              "createdAt": "2018-05-29T18:38:15Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "Isn't that redundant, since `Trim()` shouldn't ever transform a non-null input into a null output?",
              "createdAt": "2018-05-29T18:40:55Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Trim() is an instance method on class String, not an extension method - the \".\" in .Trim() would NRE",
              "createdAt": "2018-05-29T18:51:30Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "But the null-conditional operator should take care of that, right? `metadataValue` may be `null`, in which case `metadataValue?.Trim()` would be `null`. Or it can be non-`null`, in which case `metadataValue?.Trim()` may also be non-null (it could now be `string.Empty`).\r\n\r\nIf it's `null`, the R# suggestion would map to\r\n\r\n```c#\r\nreturn null ?? null;\r\n```\r\n\r\nOr am I missing something? I don't think the extension-method nature of `Trim()` is relevant here.",
              "createdAt": "2018-05-29T19:21:42Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Just tried it in LINQpad\u2026 you're right. R# doesn't go this far though. Interesting. Updated to yours.",
              "createdAt": "2018-05-29T19:59:06Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "Correction: R# when doing an auto-convert added the ?? but after that conversion it shows a greyed out ?? metadataValue indicating it's superfluous. So 2 steps...",
              "createdAt": "2018-05-29T20:00:17Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1235,10 +996,10 @@ internal void AddResolutionWarning(string resourceId, params object[] parameters\n             /// <summary>\n             /// Get a piece of metadata off an item and make sureit is trimmed\n             /// </summary>\n-            private string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n+            private static string GetItemMetadataTrimmed(ITaskItem item, string metadataName)\n             {\n                 string metadataValue = item.GetMetadata(metadataName);\n-                return metadataValue = metadataValue != null ? metadataValue.Trim() : metadataValue;\n+                return metadataValue != null ? metadataValue.Trim() : metadataValue;",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this was actually clearer before, even though it was more verbose.",
              "createdAt": "2018-05-29T18:05:44Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1706,14 +1461,9 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n \n                 if (!hasExpandReferenceAssemblies)\n                 {\n-                    if (referenceItemHasSDKName)\n-                    {\n-                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, \"false\");\n-                    }\n-                    else\n-                    {\n-                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, \"true\");\n-                    }\n+                    ResolvedItem.SetMetadata(\n+                        SDKManifest.Attributes.ExpandReferenceAssemblies,\n+                        referenceItemHasSDKName ? \"false\" : \"true\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Restored",
              "createdAt": "2018-05-29T18:55:04Z",
              "path": "src/Tasks/ResolveSDKReference.cs",
              "diffHunk": "@@ -1706,14 +1461,9 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ\n \n                 if (!hasExpandReferenceAssemblies)\n                 {\n-                    if (referenceItemHasSDKName)\n-                    {\n-                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, \"false\");\n-                    }\n-                    else\n-                    {\n-                        ResolvedItem.SetMetadata(SDKManifest.Attributes.ExpandReferenceAssemblies, \"true\");\n-                    }\n+                    ResolvedItem.SetMetadata(\n+                        SDKManifest.Attributes.ExpandReferenceAssemblies,\n+                        referenceItemHasSDKName ? \"false\" : \"true\");",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      }
    ]
  }
}