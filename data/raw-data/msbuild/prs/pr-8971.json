{
  "number": 8971,
  "title": "Fix of OutOfMemoryException when embedding large amount of files to binlog",
  "body": "Fixes #8595\r\n\r\n### Summary\r\n\r\nEmbedding of large amount of files to binlog can lead to OutOfMemoryException due to memory pressure. It also causes LOH fragmentation and Gen2 collections. \r\n\r\n### Customer Impact\r\n\r\nLarge builds cannot use the binary logger due to an OOM crash.\r\n\r\n### Regression?\r\n\r\nYes, in 16.8 (#5718).\r\n\r\n### Testing\r\n\r\nBefore:\r\n![Screenshot 2023-06-28 102953](https://github.com/dotnet/msbuild/assets/12775388/fecb5266-497b-4a2e-866a-1f7e95b62c66)\r\n\r\nAfter:\r\n![Screenshot 2023-06-29 102337](https://github.com/dotnet/msbuild/assets/12775388/83b580ac-08f5-4288-886f-3eff8ba80359)\r\n\r\n### Risk\r\n\r\nMedium--adds new filesystem dependencies which could fail, but is similar to the pre-16.8 mechanism and tries to be tolerant of failures.\r\n\r\n### Changes Made\r\nThis change reverts in-memory operations and uses temp file for embedded files. The file is now stored in temporary directory (instead of binlog target directory) to avoid problems with file watchers. There might be possible another optimizations, but goal of this PR is to unblock our partners. We can optimize further in separate PR. \r\n",
  "state": "MERGED",
  "createdAt": "2023-06-28T12:36:30Z",
  "updatedAt": "2023-07-25T18:45:54Z",
  "closedAt": "2023-07-12T21:26:20Z",
  "mergedAt": "2023-07-12T21:26:20Z",
  "additions": 67,
  "deletions": 43,
  "changedFiles": 4,
  "headRefName": "dev/mipavlik/fix-binlog-outofmemory",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4cf11b497f1b2e3a4c504e8b525dbb5529764941",
          "message": "Fix binlog OOM embedding files\n\nFixes #8595 by storing the embedded-file zip in a temporary directory\n(instead of memory or binlog target directory) to avoid problems with\nfile watchers.",
          "committedDate": "2023-07-12T18:39:43Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Well, I missed somehow one failed test on my local machine. I will add at least one more commit, but the functionality is ready for review.\r\n\r\nEDIT: Done",
        "createdAt": "2023-06-28T13:39:43Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I expressed my concerns regarding to perf regression caused by switching back to temp file, but Kirill measured it and...\r\n\r\n> I measured perf before and after and writing to a memory stream wasn't noticeably better than the temp file. I expect the vast majority of usages will be just fine with writing the embedded files stream to a temp file.\r\n\r\nWe can do our measurements, but I would say that most devs are not collecting binlog by default (during development). Binlogs are collected on dev machines usually when you want to diagnose some issue.",
        "createdAt": "2023-07-11T11:22:43Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> I expressed my concerns regarding to perf regression caused by switching back to temp file, but Kirill measured it and...\r\n> \r\n> > I measured perf before and after and writing to a memory stream wasn't noticeably better than the temp file. I expect the vast majority of usages will be just fine with writing the embedded files stream to a temp file.\r\n> \r\n> We can do our measurements, but I would say that most devs are not collecting binlog by default (during development). Binlogs are collected on dev machines usually when you want to diagnose some issue.\r\n\r\nPerfect! Sounds like we should be good",
        "createdAt": "2023-07-11T12:45:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-07-11T16:32:36Z",
        "author": null
      },
      {
        "body": "Curious how did we miss https://github.com/dotnet/msbuild/pull/9057?\r\n\r\nWere the corrupt binlogs easy to repro? Are we missing a test? Did manual testing all look OK?",
        "createdAt": "2023-07-25T02:10:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "They are easy to repro but the viewer is pretty tolerant of the problem; it loads without visible error and is just missing the embeds. I think I might have seen a log that was mysteriously missing embeds but I didn't connect it with this and I went back and forth between builds that did and didn't have the bug enough that I didn't see it coming.\r\n\r\nWe definitely need better regression testing around this scenario, which is high on the list after figuring out how to get the fix out.",
        "createdAt": "2023-07-25T02:13:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hmm, I've been thinking about surfacing first-chance exceptions in the viewer and flash some sort of user-visible warning, like a goldbar. This would have caught this.",
        "createdAt": "2023-07-25T03:47:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I suppose it doesn't help that the embeds archive is the last record in the file, so even if the stream is now corrupted and dis-synchronized the rest of the binlog is already read",
        "createdAt": "2023-07-25T03:48:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm focusing on the serialization problem and I will add test at least for the length of the payload. I believe I tried open binlogs in viewer and everything looked OK. Warning in binlog viewer would be nice feature.",
        "createdAt": "2023-07-25T08:28:09Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> Hmm, I've been thinking about surfacing first-chance exceptions in the viewer and flash some sort of user-visible warning, like a goldbar. This would have caught this.\r\n\r\nI think a user-visible warning like this is great from the developer's (i.e., our) perspective but detrimental from a user's perspective. Most users won't know why it's flashing unless they intentionally look for an error afterwards, and even if they do, they probably won't know how to or have the inclination to fix it. I think this sort of things is great in a beta product to help get fast feedback but not ideal in a product as established as the binlog viewer, as most users at this point probably just want to finish their work and don't care if the viewer is broken unless it makes it harder for them to do so.",
        "createdAt": "2023-07-25T18:45:53Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm worried that this `ReadAllBytes` will still cause a big memory spike. Can we stream it from the disk into the log stream instead?",
              "createdAt": "2023-06-28T14:53:35Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -226,12 +227,21 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)\n             {\n+                projectImportsCollector.Close();\n+\n                 if (CollectProjectImports == ProjectImportsCollectionMode.Embed)\n                 {\n-                    eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, projectImportsCollector.GetAllBytes());\n+                    var archiveFilePath = projectImportsCollector.ArchiveFilePath;\n+\n+                    // It is possible that the archive couldn't be created for some reason.\n+                    // Only embed it if it actually exists.\n+                    if (FileSystems.Default.FileExists(archiveFilePath))\n+                    {\n+                        eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, File.ReadAllBytes(archiveFilePath));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sure. I wanted to do this with more changes, but with proper planning - get rid of the temporary file completely by writing zip stream directly to binlog stream and using single reusable copy buffer for all files.\r\nBut removing `ReadAllBytes` required less changes than I expected and the result is pretty good :) I updated profiler result.",
              "createdAt": "2023-06-29T08:32:27Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -226,12 +227,21 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)\n             {\n+                projectImportsCollector.Close();\n+\n                 if (CollectProjectImports == ProjectImportsCollectionMode.Embed)\n                 {\n-                    eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, projectImportsCollector.GetAllBytes());\n+                    var archiveFilePath = projectImportsCollector.ArchiveFilePath;\n+\n+                    // It is possible that the archive couldn't be created for some reason.\n+                    // Only embed it if it actually exists.\n+                    if (FileSystems.Default.FileExists(archiveFilePath))\n+                    {\n+                        eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, File.ReadAllBytes(archiveFilePath));",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "> I updated profiler result.\r\n\r\nOh yeah, that looks beautiful now.",
              "createdAt": "2023-06-29T14:23:09Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -226,12 +227,21 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)\n             {\n+                projectImportsCollector.Close();\n+\n                 if (CollectProjectImports == ProjectImportsCollectionMode.Embed)\n                 {\n-                    eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, projectImportsCollector.GetAllBytes());\n+                    var archiveFilePath = projectImportsCollector.ArchiveFilePath;\n+\n+                    // It is possible that the archive couldn't be created for some reason.\n+                    // Only embed it if it actually exists.\n+                    if (FileSystems.Default.FileExists(archiveFilePath))\n+                    {\n+                        eventArgsWriter.WriteBlob(BinaryLogRecordKind.ProjectImportArchive, File.ReadAllBytes(archiveFilePath));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a change I don't expect, what's the motivation?",
              "createdAt": "2023-06-28T15:38:05Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2328,7 +2328,7 @@ public void BinaryLogContainsImportedFiles()\n             </Project>\n             \");\n \n-            string binLogLocation = _env.DefaultTestDirectory.Path;\n+            string binLogLocation = FileUtilities.TempFileDirectory;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The test was failing, because archive file wasn't found on that location. We agreed that we will change the archive location to not interfere with the file watchers (which was motivation of keeping data in memory).\r\n\r\nhttps://github.com/dotnet/msbuild/pull/8971/files#diff-b0e2efc555fc85c970a67ad49a6c6671718457ff85297ad6b732cf1c337f4d51R40",
              "createdAt": "2023-06-29T06:44:53Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2328,7 +2328,7 @@ public void BinaryLogContainsImportedFiles()\n             </Project>\n             \");\n \n-            string binLogLocation = _env.DefaultTestDirectory.Path;\n+            string binLogLocation = FileUtilities.TempFileDirectory;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Ah, thanks! I think this is actually a bug in the new implementation.\r\n\r\nWhen in `ProjectImports=ZipFile` mode, we expect *two* output files:\r\n\r\n1. the binlog itself, with no embedded  content files\r\n2. a zip with the extension `.ProjectImports.zip` with the content files\r\n\r\nWe want that zip to be next to the .binlog _when it is an output of the build_. But when it's an internal implementation detail to avoid memory, we want it somewhere else. Looks like the current code moves it unconditionally, which isn't right.\r\n\r\nI see two options:\r\n\r\n1. tweak the location based on mode (the old `createFile` argument to the `ProjectImportsCollector` ctor)\r\n2. _move_ the file to the final location instead of deleting it, based on mode\r\n\r\nI prefer the former.",
              "createdAt": "2023-06-29T14:39:26Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2328,7 +2328,7 @@ public void BinaryLogContainsImportedFiles()\n             </Project>\n             \");\n \n-            string binLogLocation = _env.DefaultTestDirectory.Path;\n+            string binLogLocation = FileUtilities.TempFileDirectory;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We have a specific method to find the folder to store files just like this that are used to relieve memory pressure (build requests and configurations, today).\r\n\r\n```suggestion\r\n                FileUtilities.GetCacheDirectory(),\r\n```\r\n\r\n(if you peek behind the scenes that's like one subdirectory deep in TEMP, and disambiguates by PID which is important in case someone builds twice concurrently.)",
              "createdAt": "2023-06-29T17:25:48Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -53,35 +34,34 @@ public byte[] GetAllBytes()\n         // this will form a chain of file write tasks, running sequentially on a background thread\n         private Task _currentTask = Task.CompletedTask;\n \n-        public ProjectImportsCollector(string logFilePath, bool createFile, string sourcesArchiveExtension = \".ProjectImports.zip\")\n+        public ProjectImportsCollector(string logFilePath, string sourcesArchiveExtension = \".ProjectImports.zip\")\n         {\n+            // Archive file is stored in MSBuild temp folder with same name as binlog, but with different extension\n+            ArchiveFilePath = Path.Combine(\n+                FileUtilities.TempFileDirectory,",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This folder is one that is already secured to the current user on Unix?",
              "createdAt": "2023-06-30T14:52:11Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -55,33 +36,46 @@ public byte[] GetAllBytes()\n \n         public ProjectImportsCollector(string logFilePath, bool createFile, string sourcesArchiveExtension = \".ProjectImports.zip\")\n         {\n-            try\n+            if (createFile)\n             {\n-                if (createFile)\n-                {\n-                    ArchiveFilePath = Path.ChangeExtension(logFilePath, sourcesArchiveExtension);\n-                    _stream = new FileStream(ArchiveFilePath, FileMode.Create, FileAccess.ReadWrite, FileShare.Delete);\n-                }\n-                else\n+                // Archive file will be stored alongside the binlog\n+                ArchiveFilePath = Path.ChangeExtension(logFilePath, sourcesArchiveExtension);\n+            }\n+            else\n+            {\n+                string cacheDirectory = FileUtilities.GetCacheDirectory();\n+                if (!Directory.Exists(cacheDirectory))\n                 {\n-                    _stream = new MemoryStream();\n+                    Directory.CreateDirectory(cacheDirectory);\n                 }\n-                _zipArchive = new ZipArchive(_stream, ZipArchiveMode.Create, true);\n+\n+                // Archive file will be temporarily stored in MSBuild cache folder and deleted when no longer needed\n+                ArchiveFilePath = Path.Combine(\n+                    cacheDirectory,",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Yes, it's defined as\r\n\r\nhttps://github.com/dotnet/msbuild/blob/39e20dce0c00a572f1fbd20a0a520d4e941bbc33/src/Shared/FileUtilities.cs#L131\r\n\r\ncalling our hardened\r\n\r\nhttps://github.com/dotnet/msbuild/blob/39e20dce0c00a572f1fbd20a0a520d4e941bbc33/src/Shared/TempFileUtilities.cs#L37-L68\r\n\r\n",
              "createdAt": "2023-06-30T14:57:58Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -55,33 +36,46 @@ public byte[] GetAllBytes()\n \n         public ProjectImportsCollector(string logFilePath, bool createFile, string sourcesArchiveExtension = \".ProjectImports.zip\")\n         {\n-            try\n+            if (createFile)\n             {\n-                if (createFile)\n-                {\n-                    ArchiveFilePath = Path.ChangeExtension(logFilePath, sourcesArchiveExtension);\n-                    _stream = new FileStream(ArchiveFilePath, FileMode.Create, FileAccess.ReadWrite, FileShare.Delete);\n-                }\n-                else\n+                // Archive file will be stored alongside the binlog\n+                ArchiveFilePath = Path.ChangeExtension(logFilePath, sourcesArchiveExtension);\n+            }\n+            else\n+            {\n+                string cacheDirectory = FileUtilities.GetCacheDirectory();\n+                if (!Directory.Exists(cacheDirectory))\n                 {\n-                    _stream = new MemoryStream();\n+                    Directory.CreateDirectory(cacheDirectory);\n                 }\n-                _zipArchive = new ZipArchive(_stream, ZipArchiveMode.Create, true);\n+\n+                // Archive file will be temporarily stored in MSBuild cache folder and deleted when no longer needed\n+                ArchiveFilePath = Path.Combine(\n+                    cacheDirectory,",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks wrong, both because you need to update the version prefix and because we generally put these two on the same line to force a merge conflict when flowing final version commits to main.",
              "createdAt": "2023-07-05T17:30:02Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -2,7 +2,8 @@\n <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->\n <Project>\n   <PropertyGroup>\n-    <VersionPrefix>17.7.0</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n+    <VersionPrefix>17.7.0</VersionPrefix>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This doesn't matter for this PR because we'll be handling merging to the release branch specially since we have several things to bring.",
              "createdAt": "2023-07-10T19:59:28Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -2,7 +2,8 @@\n <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->\n <Project>\n   <PropertyGroup>\n-    <VersionPrefix>17.7.0</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n+    <VersionPrefix>17.7.0</VersionPrefix>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'd suggest to completely remove change to this file from this PR - in order to have a clean merge of all the in-flight 17.7 PRs (Rainer was contemplating single octopus merge of all 17.7 PRs)",
              "createdAt": "2023-07-12T07:37:00Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -2,7 +2,8 @@\n <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->\n <Project>\n   <PropertyGroup>\n-    <VersionPrefix>17.7.0</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>\n+    <VersionPrefix>17.7.0</VersionPrefix>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why does this have to be up here instead of where it was before?",
              "createdAt": "2023-07-05T17:42:47Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -226,12 +227,25 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)\n             {\n+                projectImportsCollector.Close();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "So that we first flush the remaining archive bits to disk in the temp folder and close the file, so that we can read it later.",
              "createdAt": "2023-07-05T19:11:20Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -226,12 +227,25 @@ public void Shutdown()\n \n             if (projectImportsCollector != null)\n             {\n+                projectImportsCollector.Close();",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}