{
  "number": 9155,
  "title": "Question mode usage feedback updates.",
  "body": "### Updating a task behavior to avoid False positives.\r\nAfter using /question switch on several repro, I am changing a few tasks to reduce False Positive.  These task will continue perform there operations as in a normal build. If they impact the incremental build, then it would appear in downstream error.  These task should log there file activity so that it could be traced.\r\n\r\nTouch and Delete tasks - demote error to warning.\r\n - Touch is being used to signal processes outside of the build.  IE, After build completion, a file is touched to let the other services know work is completed.\r\n - In C++, touch/delete is used to detect if the build has reached the end or has errored half way through.  Using timestamp of the primary output is not a accurate because the build can fail in the post build steps.\r\n\r\nWriteLinesToFile Task - remove questioning when WriteOnlyWhenDifferent is false.\r\n - A common operation is to use this task to write to status log file which are always appending. \r\n - The Unit Tested already assumed WriteOnlyWhenDifferent is true, so no tests change are needed.\r\n\r\nGenerateResource Task - Fix missing message.\r\n- Note: the detail messages explaining the inputs and outputs are already printed in low priority.  This change converts the Log.Message of the task being executed to a error.",
  "state": "MERGED",
  "createdAt": "2023-08-22T20:59:13Z",
  "updatedAt": "2024-02-22T22:28:00Z",
  "closedAt": "2023-11-18T20:15:05Z",
  "mergedAt": "2023-11-18T20:15:05Z",
  "additions": 233,
  "deletions": 40,
  "changedFiles": 22,
  "headRefName": "main_question3",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6b34c34beb121746c0038e9fee3f6669a89d0dc1",
          "message": "Question feedback changes.",
          "committedDate": "2023-08-22T20:45:04Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d9ad84e855caf8f6f3214ba16677f4a0b49d6b53",
          "message": "Fix missing error message in GenerateResource task.",
          "committedDate": "2023-08-22T21:46:59Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed09e36432551833fda3546773e185cb29d80e73",
          "message": ".",
          "committedDate": "2023-08-22T21:52:05Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b47cc94efce129de83c4aecb7b0a7f31e3c8b431",
          "message": "Add back as Obsolete",
          "committedDate": "2023-08-29T19:19:18Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b5537544604ffeee218b203c18d97e6e24ff8f68",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into main_question3",
          "committedDate": "2023-10-06T22:58:56Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16545281bbc91ea4d77fa319b74192d03b1e8840",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into main_question3",
          "committedDate": "2023-10-26T17:54:34Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62a78ffbeb008ca907fa20613524d8890cea572c",
          "message": ".",
          "committedDate": "2023-10-26T19:33:49Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "755e0e98ec216a942ca28fcd953d5b3116f0f0f3",
          "message": ".",
          "committedDate": "2023-10-26T20:11:24Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "46b93b56b276cd0f7000f7ba42167e236e550174",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into main_question3",
          "committedDate": "2023-11-15T21:40:56Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "720cf0e2e18981fc64dab47d53d3f3a2d3375b9c",
          "message": "Add BuildFinish Question message.",
          "committedDate": "2023-11-16T00:48:24Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "899dd683ab2187a3f5ef44474066232a7ac4b236",
          "message": "Merge branch 'main_question3' of https://github.com/yuehuang010/msbuild into main_question3",
          "committedDate": "2023-11-16T00:50:13Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dcd142757d9c0e1f5ab0f5304b45d177336fdfcc",
          "message": "Reword message.",
          "committedDate": "2023-11-16T23:29:16Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b4b76c206c141b915683308004da47dbf19ffab",
          "message": ".",
          "committedDate": "2023-11-17T22:44:35Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@yuehuang010 , could I ask you to fix the build? \r\nThank you!",
        "createdAt": "2023-08-29T13:59:30Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Spinned of from the https://github.com/dotnet/msbuild/pull/8881 changes",
        "createdAt": "2023-10-26T14:27:03Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Hi @yuehuang010,\r\n\r\nThe PR looks good to me, but could you reply to @Forgind questions above?\r\n",
        "createdAt": "2023-10-26T14:29:21Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "APIScan is barking, is there a way to remove it.  This was an leftover from Rename.",
              "createdAt": "2023-08-23T21:35:53Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -51,11 +51,10 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask\n         /// <summary>\n         /// Question whether this task is incremental.\n         /// </summary>\n-        /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>\n+        /// <remarks>When question is true, then error out if WriteOnlyWhenDifferent would have\n+        /// written to the file.</remarks>\n         public bool FailIfNotIncremental { get; set; }\n \n-        public bool CanBeIncremental => WriteOnlyWhenDifferent;",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "Added `[Obsolete]`",
              "createdAt": "2023-08-29T19:23:24Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -51,11 +51,10 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask\n         /// <summary>\n         /// Question whether this task is incremental.\n         /// </summary>\n-        /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>\n+        /// <remarks>When question is true, then error out if WriteOnlyWhenDifferent would have\n+        /// written to the file.</remarks>\n         public bool FailIfNotIncremental { get; set; }\n \n-        public bool CanBeIncremental => WriteOnlyWhenDifferent;",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This now means you'd have two \"Delete.DeletingFile\" messages (one of which is a warning), right?",
              "createdAt": "2023-10-06T21:23:44Z",
              "path": "src/Tasks/Delete.cs",
              "diffHunk": "@@ -123,15 +123,13 @@ public override bool Execute()\n                         {\n                             if (FailIfNotIncremental)\n                             {\n-                                Log.LogErrorFromResources(\"Delete.DeletingFile\", file.ItemSpec);\n+                                Log.LogWarningFromResources(\"Delete.DeletingFile\", file.ItemSpec);\n                             }\n-                            else\n-                            {\n-                                // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n-                                Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);\n \n-                                File.Delete(file.ItemSpec);\n-                            }\n+                            // Do not log a fake command line as well, as it's superfluous, and also potentially expensive\n+                            Log.LogMessageFromResources(MessageImportance.Normal, \"Delete.DeletingFile\", file.ItemSpec);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same as earlier\u2014isn't this a duplicate message if the warning fired?",
              "createdAt": "2023-10-06T21:26:00Z",
              "path": "src/Tasks/Touch.cs",
              "diffHunk": "@@ -222,17 +221,13 @@ public override bool Execute()\n                 }\n             }\n \n-            // Ignore touching the disk when FailIfNotIncremental.\n             if (FailIfNotIncremental)\n             {\n-                Log.LogErrorFromResources(\"Touch.Touching\", file);\n-                return false;\n-            }\n-            else\n-            {\n-                Log.LogMessageFromResources(messageImportance, \"Touch.Touching\", file);\n+                Log.LogWarningFromResources(\"Touch.Touching\", file);\n             }\n \n+            Log.LogMessageFromResources(messageImportance, \"Touch.Touching\", file);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks. Elsed.",
              "createdAt": "2023-10-26T19:34:12Z",
              "path": "src/Tasks/Touch.cs",
              "diffHunk": "@@ -222,17 +221,13 @@ public override bool Execute()\n                 }\n             }\n \n-            // Ignore touching the disk when FailIfNotIncremental.\n             if (FailIfNotIncremental)\n             {\n-                Log.LogErrorFromResources(\"Touch.Touching\", file);\n-                return false;\n-            }\n-            else\n-            {\n-                Log.LogMessageFromResources(messageImportance, \"Touch.Touching\", file);\n+                Log.LogWarningFromResources(\"Touch.Touching\", file);\n             }\n \n+            Log.LogMessageFromResources(messageImportance, \"Touch.Touching\", file);",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand most of the changes in this file. Doesn't it basically mean WriteOnlyWhenDifferent no longer has any effect if Overwrite is false?",
              "createdAt": "2023-10-06T21:29:27Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -131,36 +133,17 @@ public override bool Execute()\n                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);\n                         }\n \n-                        if (FailIfNotIncremental)\n-                        {\n-                            if (Lines?.Length > 0)\n-                            {\n-                                Log.LogErrorWithCodeFromResources(\"WriteLinesToFile.ErrorReadingFile\", File.ItemSpec);\n-                                return false;\n-                            }\n-                        }\n-                        else\n-                        {\n-                            System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n-                        }\n+                        System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n                     }\n                     else\n                     {\n-                        if (FailIfNotIncremental && Lines?.Length > 0)\n+                        if (WriteOnlyWhenDifferent)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "tl;dr;: It's a desirable change.\r\n\r\n\r\nThis method is a bit of if-s madness - hard to orient self....\r\nThat's maybe the reason why it had some superfluous cases that weren't event meant to exist:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/9a26a2f1c569ee2f8004a356b1a138dfd93125d7/src/Tasks/Resources/Strings.resx#L2201-L2202\r\n\r\nSo this change here removes something that shouldn't event exist. So a cleanup - thumbs up for that @yuehuang010 ",
              "createdAt": "2023-10-26T14:51:20Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -131,36 +133,17 @@ public override bool Execute()\n                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);\n                         }\n \n-                        if (FailIfNotIncremental)\n-                        {\n-                            if (Lines?.Length > 0)\n-                            {\n-                                Log.LogErrorWithCodeFromResources(\"WriteLinesToFile.ErrorReadingFile\", File.ItemSpec);\n-                                return false;\n-                            }\n-                        }\n-                        else\n-                        {\n-                            System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n-                        }\n+                        System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n                     }\n                     else\n                     {\n-                        if (FailIfNotIncremental && Lines?.Length > 0)\n+                        if (WriteOnlyWhenDifferent)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@Forgind, Yes, `Overwrite=false` means to append to the file.  Thus, `WriteOnlyWhenDifferent` should has no effect.  This change `FailIfNotIncremental` to only check when WriteOnlyWhenDifferent is in effect, and thus also `Overwrite=true`.\r\n\r\nThere is warning to let the user know `WriteOnlyWhenDifferent=true` is ignored.",
              "createdAt": "2023-10-26T19:47:19Z",
              "path": "src/Tasks/FileIO/WriteLinesToFile.cs",
              "diffHunk": "@@ -131,36 +133,17 @@ public override bool Execute()\n                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);\n                         }\n \n-                        if (FailIfNotIncremental)\n-                        {\n-                            if (Lines?.Length > 0)\n-                            {\n-                                Log.LogErrorWithCodeFromResources(\"WriteLinesToFile.ErrorReadingFile\", File.ItemSpec);\n-                                return false;\n-                            }\n-                        }\n-                        else\n-                        {\n-                            System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n-                        }\n+                        System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);\n                     }\n                     else\n                     {\n-                        if (FailIfNotIncremental && Lines?.Length > 0)\n+                        if (WriteOnlyWhenDifferent)",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "https://github.com/dotnet/msbuild/pull/8881#discussion_r1238428633\r\n\r\nI'm still opinionated that adding a new resource string that explicitly mentions the problem (failing the incrementaility check) is easy and should have no downsides, while reusing the message that doesn't explain the problem (`\"Processing resource file \"{0}\" into \"{1}\".\"`) can easily lead to confusion - among users, but as well among the maintainers of MSBuild investigatin customers issues.",
              "createdAt": "2023-10-26T14:31:00Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I am in the camp where this feature is like \"Treat Warning As Error\" where it converts warning messages into errors, it tends to avoid generating a new message in most cases.  \r\nLikewise, this feature converts non-skipped task/targets messages into errors.  I will add extra messages if none exists, but most tasks already has one.",
              "createdAt": "2023-10-26T19:54:37Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "Maybe to help with user confusion is to print a general message at the end of build.  Ex:\r\n`MSB9999: Incremental checker has found issues, see the errors in the log.`",
              "createdAt": "2023-10-26T20:00:06Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "General error message at the end that clarifies the situation works for me as well",
              "createdAt": "2023-10-27T08:07:21Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "@yuehuang010 Do you plan to add the general error mentioning the incrementality failure? That's the only thing that currently stops this from being signed off and merged.",
              "createdAt": "2023-11-14T17:38:02Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Sorry, had to context switch due to deadlines.  I will see if I can squeeze it in before the Thanksgiving.",
              "createdAt": "2023-11-14T17:54:25Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "Added.\r\n`Question build Failed.  The build exited early upon detection of an incremental issue.`",
              "createdAt": "2023-11-16T00:52:15Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,15 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The backing field feels unnecessary",
              "createdAt": "2023-11-16T13:05:21Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -154,6 +154,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu\n         /// </summary>\n         private int _maxCPUCount = 1;\n \n+        /// <summary>\n+        /// A build mode that will error when the build process fails an incremental check.\n+        /// </summary>\n+        private bool _question = false;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Removed.",
              "createdAt": "2023-11-16T23:29:37Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -154,6 +154,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu\n         /// </summary>\n         private int _maxCPUCount = 1;\n \n+        /// <summary>\n+        /// A build mode that will error when the build process fails an incremental check.\n+        /// </summary>\n+        private bool _question = false;",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The name might appear unclear on the first sight - how about `IsQuestionSwitchUsed` or `IsQuestionMode`?",
              "createdAt": "2023-11-16T13:11:13Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -462,6 +467,16 @@ public int MaxCPUCount\n             set => _maxCPUCount = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets a value that will error when the build process fails an incremental check.\n+        /// </summary>\n+        public bool Question",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "But we already have the same naming as public property in BuildParameters - so probably let's rather keep as is to stay consistent.",
              "createdAt": "2023-11-16T13:11:16Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -462,6 +467,16 @@ public int MaxCPUCount\n             set => _maxCPUCount = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets a value that will error when the build process fails an incremental check.\n+        /// </summary>\n+        public bool Question",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I am using the name from Make.  Another common name is dry-run.  ",
              "createdAt": "2023-11-16T23:31:41Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -462,6 +467,16 @@ public int MaxCPUCount\n             set => _maxCPUCount = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets a value that will error when the build process fails an incremental check.\n+        /// </summary>\n+        public bool Question",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "Keeping it as is.",
              "createdAt": "2023-11-16T23:32:06Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -462,6 +467,16 @@ public int MaxCPUCount\n             set => _maxCPUCount = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets a value that will error when the build process fails an incremental check.\n+        /// </summary>\n+        public bool Question",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>Question build Failed. The build exited early upon detection of an issue with build incrementality.</value>\r\n```\r\n\r\nThe original message felt like there is an issue that's incremental.\r\nI'm not a native speaker though.",
              "createdAt": "2023-11-16T13:14:08Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -158,6 +158,12 @@\n   <data name=\"BuildFinishedFailure\" xml:space=\"preserve\">\n     <value>Build FAILED.</value>\n   </data>\n+  <data name=\"BuildFinishedQuestionFailure\" xml:space=\"preserve\">\n+    <value>Question build Failed.  The build exited early upon detection of an incremental issue.</value>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Reworded to use \"up-to-date\" instead of incremental.",
              "createdAt": "2023-11-16T23:30:05Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -158,6 +158,12 @@\n   <data name=\"BuildFinishedFailure\" xml:space=\"preserve\">\n     <value>Build FAILED.</value>\n   </data>\n+  <data name=\"BuildFinishedQuestionFailure\" xml:space=\"preserve\">\n+    <value>Question build Failed.  The build exited early upon detection of an incremental issue.</value>",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>Question build succeeded. No isssues with build incrementality detected.</value>\r\n```",
              "createdAt": "2023-11-16T13:14:39Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -158,6 +158,12 @@\n   <data name=\"BuildFinishedFailure\" xml:space=\"preserve\">\n     <value>Build FAILED.</value>\n   </data>\n+  <data name=\"BuildFinishedQuestionFailure\" xml:space=\"preserve\">\n+    <value>Question build Failed.  The build exited early upon detection of an incremental issue.</value>\n+  </data>\n+  <data name=\"BuildFinishedQuestionSuccess\" xml:space=\"preserve\">\n+    <value>Question build succeeded.  No incremental isssues detected.</value>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}