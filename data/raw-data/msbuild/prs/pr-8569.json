{
  "number": 8569,
  "title": "Add bit shift intrinsic functions",
  "body": "Fixes #8551\r\n\r\n### Context\r\nThe intrinsic functions include functions for bit And, Or, Xor, and Not operators but not for the bit shift operators.\r\n\r\n### Changes Made\r\nAdded functions LeftShift, RightShift, and RightShiftUnsigned. The functions expect values of type `int` (32 bit) which matches the existing bit operator functions. `long` (64 bit) is not supported by any of the bit operator intrinsic functions.\r\n\r\n### Testing\r\nTested on Windows 11 and macOS 12 Monterey.\r\n\r\nAdded to Expander_Tests.cs and ran unit tests.\r\n\r\nCreated and ran BitShift.proj project file with the following content:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <Target Name=\"Test\">\r\n    <PropertyGroup>\r\n      <LeftShiftTest>$([MSBuild]::LeftShift(1, 2))</LeftShiftTest>\r\n      <RightShiftTest>$([MSBuild]::RightShift(-8, 2))</RightShiftTest>\r\n      <RightShiftUnsignedTest>$([MSBuild]::RightShiftUnsigned(-8, 2))</RightShiftUnsignedTest>\r\n    </PropertyGroup>\r\n\r\n    <Message Text=\"LeftShiftTest: $(LeftShiftTest)\" />\r\n    <Message Text=\"RightShiftTest: $(RightShiftTest)\" />\r\n    <Message Text=\"RightShiftUnsignedTest: $(RightShiftUnsignedTest)\" />\r\n  </Target>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nThe project produced the following output (which matched the expected results):\r\n\r\n```\r\nTest:\r\n  LeftShiftTest: 4\r\n  RightShiftTest: -2\r\n  RightShiftUnsignedTest: 1073741822\r\n```\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-15T16:56:06Z",
  "updatedAt": "2023-04-09T14:12:17Z",
  "closedAt": "2023-04-07T19:17:24Z",
  "mergedAt": "2023-04-07T19:17:24Z",
  "additions": 119,
  "deletions": 17,
  "changedFiles": 3,
  "headRefName": "BitShiftFunctions",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f3a4a2b8561eece492d43c142922d581c87d19a5",
          "message": "add LeftShift, RightShift, RightShiftUnsigned intrinsic functions",
          "committedDate": "2023-03-15T16:29:34Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db296dc8196190c83e5d33ce2ef9cbf9524cce95",
          "message": "Add \"fast path\" for all bit operator functions; change unit test to use Shouldly because fail messages will show the name of the failing function",
          "committedDate": "2023-03-20T17:15:25Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66cb9c12bcbfa2b1caec5b1409d920202a9bd5ae",
          "message": "Remove unreachable and unused type overload methods from IntrinsicFunctions",
          "committedDate": "2023-03-22T12:42:23Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27e9fe48541eae46ac144169a145804b57a68b94",
          "message": "Update to standardize on invoking IntrinsicFunctions methods, and add missing Modulo",
          "committedDate": "2023-03-22T12:43:39Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5650923a13007c20dea48e60168acf5c84dfc69d",
          "message": "Add IntrinsicFunctions.Unescape",
          "committedDate": "2023-03-22T13:28:02Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c6a5328793be9825aa74d506a0fcdc19183d639",
          "message": "Merge branch 'dotnet:main' into BitShiftFunctions",
          "committedDate": "2023-03-27T02:09:58Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98cccdc786c559d91a10294409865d204b05f2c4",
          "message": "Revert \"Remove unreachable and unused type overload methods from IntrinsicFunctions\"\n\nThis reverts commit 66cb9c12bcbfa2b1caec5b1409d920202a9bd5ae.",
          "committedDate": "2023-03-27T20:42:27Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a58ff46e7a2ff691fcbe0bf932b4cccc58706f0e",
          "message": "Merge branch 'dotnet:main' into BitShiftFunctions",
          "committedDate": "2023-03-29T11:55:20Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f0a9d709afd46e6d6cc7b52f936b90a663966cf",
          "message": "Merge branch 'dotnet:main' into BitShiftFunctions",
          "committedDate": "2023-04-01T13:56:19Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald, the existing bitwise operations are not on the fast path either. Presumably because they're not expected to be used very often and, while making the first call faster, every such special case `if` incurs a small steady state perf hit.",
        "createdAt": "2023-03-20T14:55:29Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "In the past we've added any method that is known to be called in the wild to the fast path, but haven't required it, and I suspect the bitwise operations were missed, rather than intentionally omitted.",
        "createdAt": "2023-03-20T15:20:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I added a \"fast path\" for each of the bit operator functions:\r\n\r\n- BitwiseOr\r\n- BitwiseAnd\r\n- BitwiseXor\r\n- BitwiseNot\r\n- LeftShift\r\n- RightShift\r\n- RightShiftUnsigned\r\n\r\nIn `Expander_Tests` I separated the bit operator functions into their own test method from the math functions, and I changed from Xunit Assert's to Shouldly. (I was motivated to make the unit test change because I had a typo and the Xunit Assert message didn't include the name of the failing function.)",
        "createdAt": "2023-03-20T17:27:54Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> @rainersigwald, the existing bitwise operations are not on the fast path either. Presumably because they're not expected to be used very often and, while making the first call faster, every such special case `if` incurs a small steady state perf hit.\r\n\r\nMake sense. Also, source generators for the win! It should be a fun project to automatically create efficient lookup tables at compile time.",
        "createdAt": "2023-03-21T06:37:31Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Also, source generators for the win! It should be a fun project to automatically create efficient lookup tables at compile time.\r\n\r\nI have been fantasizing about doing this for several years now!",
        "createdAt": "2023-03-21T13:13:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm looking at the 'Fast Path' `TryExecuteWellKnownFunction` code for other functions and I have some questions.\r\n\r\n`IntrinsicFunctions.cs` includes `Add` functions for `double` and `int`:\r\nhttps://github.com/dotnet/msbuild/blob/b84faa7d0dfb42daedca5c244f73f0b07e1135d7/src/Build/Evaluation/IntrinsicFunctions.cs#L40-L55\r\n\r\nThe `TryExecuteWellKnownFunction` method in `Expander.cs` tests for but doesn't use the `Add` functions:\r\nhttps://github.com/dotnet/msbuild/blob/b84faa7d0dfb42daedca5c244f73f0b07e1135d7/src/Build/Evaluation/Expander.cs#L3893-L3900\r\n\r\n`Subtract`, `Multiply`, and `Divide` have the same pattern. The operator is used instead of invoking the function.\r\n\r\nThere are `Modulo` functions for `double` and `int` and they are not in the `TryExecuteWellKnownFunction` method.\r\n\r\nShouldn't the `TryExecuteWellKnownFunction` method always be invoking the appropriate member of `IntrinsicFunctions` (and never directly using the operator)?\r\n\r\nIt seems that currently `Add`, `Subtract`, `Multiply`, and `Divide` are always performed with `double`s. How are the `int` and `double` overloads intended to resolve? Does the 'slow path' resolve the type overload?",
        "createdAt": "2023-03-21T15:07:49Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> Shouldn't the TryExecuteWellKnownFunction method always be invoking the appropriate member of IntrinsicFunctions (and never directly using the operator)?\r\n\r\nI don't think this really matters. From a style perspective, it is better to have them all look the same, that is, all call the appropriate member of IntrinsicFunctions as you suggest. From the user's perspective, they're equivalent, and if the call isn't inlined, calling '+' directly may even be (negligibly) faster.\r\n\r\n> It seems that currently Add, Subtract, Multiply, and Divide are always performed with doubles. How are the int and double overloads intended to resolve? Does the 'slow path' resolve the type overload?\r\n\r\nThere aren't really \"ints,\" \"doubles,\" etc. in MSBuild; everything is just strings. Even things like [TryConvertToInt](https://github.com/dotnet/msbuild/blob/b84faa7d0dfb42daedca5c244f73f0b07e1135d7/src/Build/Evaluation/Expander.cs#L4413) are kinda misleading, as far as I know, because 'value' won't ever be a double or an int; it'll always be a string, and we'll always parse it as such. With that in mind, if you pass Add two ints, they just turn into doubles, get added, and get converted back to a string that looks like an integer, so people generally don't care too much about whether the arithmetic was actually executed with ints or doubles. Since all ints are doubles, though, we do get them in the fast path.",
        "createdAt": "2023-03-21T19:20:26Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind It sounds like the int overloads of Add, Subtract, Multiply, Divide, and Modulo should be removed because they are never used.",
        "createdAt": "2023-03-21T19:52:49Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I wouldn't be opposed to that. The only ways I can think of that someone could actually call them is if they use reflection or MSBuildLocator to specifically load our IntrinsicFunctions class then call the int overload...neither feels at all worthwhile to me, since C# programmers don't need a special function to call something built-in. Can you think of any legitimate reason someone might want to use one of those overloads @rainersigwald?",
        "createdAt": "2023-03-21T20:04:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "It might be considered clean up for supporting the source generation @rainersigwald and @ladipro mentioned. \ud83d\ude0a",
        "createdAt": "2023-03-21T20:40:10Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds I'm not sure of the impact of some of those removals, and it's late enough in the 17.6 release cycle that I'm nervous about removing them. Can you separate them into a different PR that we can think about for a bit longer? Adding the shift operators and the fast paths is in good shape, though.",
        "createdAt": "2023-03-27T20:19:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald This PR has been updated.",
        "createdAt": "2023-03-27T20:48:05Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I wasn't aware this existed. Always nice to learn something new!",
              "createdAt": "2023-03-15T19:11:09Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -165,6 +165,21 @@ internal static int BitwiseNot(int first)\n             return ~first;\n         }\n \n+        internal static int LeftShift(int operand, int count)\n+        {\n+            return operand << count;\n+        }\n+\n+        internal static int RightShift(int operand, int count)\n+        {\n+            return operand >> count;\n+        }\n+\n+        internal static int RightShiftUnsigned(int operand, int count)\n+        {\n+            return operand >>> count;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}