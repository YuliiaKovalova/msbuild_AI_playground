{
  "number": 8766,
  "title": "Reorganize Copy task unit tests",
  "body": "Fixes #8767\r\n\r\n### Context\r\nI was investigating the Copy task for another issue and I realized that a unit test was being run five times: once for each of the class types `Copy_Tests`, `CopyHardLink_Tests`, `CopyNotHardLink_Tests`, `CopySingleThreaded_Tests`, and `CopySymbolicLink_Tests`.\r\n\r\nI found that there is a large set of unit tests for the Copy task that are redundantly executed when tests are run.\r\n\r\nInstead of one test class, there is a set of classes for unit tests for the Copy task. The `CopyHardLink_Tests`, `CopyNotHardLink_Tests`, `CopySingleThreaded_Tests`, and `CopySymbolicLink_Tests` classes derive from `Copy_Tests`. All of the tests in the base class also run as part of each derived class. For some tests there are variances in behavior that are controlled by properties acting as flags. The classes that derive from `Copy_Tests`, set the appropriate properties on the base class.\r\n\r\nNot all the tests need or use the flags but are effectively re-run regardless.\r\n\r\nThe following table lists the class types.\r\n\r\n| Class | # of Tests | Derives from | Variance from base |\r\n| :---- | ----- | ----- | ----- |\r\n| Copy_Tests | 41 | | |\r\n| CopyHardLink_Tests | 3 (+ base) | Copy_Tests | Hard Link |\r\n| CopyNotHardLink_Tests | 0 (+ base) | Copy_Tests | _none_ |\r\n| CopySingleThreaded_Tests | 0 (+ base) | Copy_Tests | Single Threaded |\r\n| CopySymbolicLink_Tests | 1 (+ base) | Copy_Tests | Sym Link |\r\n| CopyHardAndSymbolicLink_Tests | 3 | | |\r\n\r\nThe `CopyNotHardLink_Tests` class sets no flags, adds no tests of its own, and effectively just creates duplicate runs of every test in the `Copy_Tests` class.\r\n\r\nAdding a new test requires making a choice about where to put the test: in one of the six existing classes or in a new class?\r\n\r\n### Changes Made\r\nAll tests are moved to one class: `Copy_Tests`. Usage of `Xunit.Theory` replaces class derivation as the means of running the same test for different flags.\r\n\r\n### Testing\r\nTested on Windows 11 and macOS 12. Tested in the VS IDE and by running all unit tests at the command line.\r\n\r\n### Notes\r\nThis PR shifts from class derivation to `Xunit.Theory` and removes clearly redundant tests. By intent, this PR does not add new tests and does not add new coverage by existing tests.\r\n\r\nThere are missing coverage cases and there may be further inefficiencies that could be addressed.",
  "state": "MERGED",
  "createdAt": "2023-05-16T14:06:23Z",
  "updatedAt": "2023-06-03T15:21:00Z",
  "closedAt": "2023-06-02T05:42:37Z",
  "mergedAt": "2023-06-02T05:42:37Z",
  "additions": 519,
  "deletions": 506,
  "changedFiles": 1,
  "headRefName": "CopyTask-UnitTest",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7c946a844737b9bf05aa45b674946168b8ae7447",
          "message": "reorganize Copy_Tests to eliminate duplicate test runs",
          "committedDate": "2023-05-16T12:38:09Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81a200719f214056ffc2bdba4553a8878ce55c29",
          "message": "move static methods within class and add/modify comments",
          "committedDate": "2023-05-16T12:48:10Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55d6b29c6a0599da7d9498754041bf66a0f68221",
          "message": "Merge branch 'dotnet:main' into CopyTask-UnitTest",
          "committedDate": "2023-05-17T02:29:58Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "401187c40d2d5d7d0a80387254b77bfce700d92f",
          "message": "remove TODO comment",
          "committedDate": "2023-05-17T17:50:49Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8d8c94886fcd67df3c2f58c6a16f466565372ef",
          "message": "Merge branch 'dotnet:main' into CopyTask-UnitTest",
          "committedDate": "2023-05-21T19:05:56Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Nice unification and refactoring! Thank you!\r\n\r\nOne quick question based on high level view - to make sure something is not hidden somewhere:\r\n\r\nThis is what I see in data for sample CI run prior the change:\r\n\r\n0.928s\u2714 Microsoft.Build.UnitTests.Copy_Tests   (41 tests)\r\n0.036s\u2714 Microsoft.Build.UnitTests.CopyHardAndSymbolicLink_Tests   (5 tests)\r\n2.667s\u2714 Microsoft.Build.UnitTests.CopyHardLink_Tests   (45 tests)\r\n1.374s\u2714 Microsoft.Build.UnitTests.CopyNotHardLink_Tests   (41 tests)\r\n0.791s\u2714 Microsoft.Build.UnitTests.CopySingleThreaded_Tests   (41 tests)\r\n1.382s\u2714 Microsoft.Build.UnitTests.CopySymbolicLink_Tests   (43 tests)\r\n\r\nThis is what I see in data for sample CI run after the change:\r\n\r\n7.544s\u2714 Microsoft.Build.UnitTests.Copy_Tests   (133 tests)\r\n\r\nSo total number of tests went down - I suppose thanks to mentioned deduplication - great!\r\nSo I'd expect the total execution time to reflect that as well - instead it went up slightly (from 7.178 seconds to 7.544 seconds). \r\nWhile this is not concerning from the tests/CI run time perspective - I just want to be sure there is actually not any functional change causing a different scenario(s) to be run.\r\n\r\nOnce I'll get some time I'll try to dig to see if there is some specific test that have significantly different runtime on the both runs. If you want - you can do this by downloading one of the 'test logs' artifacts for this run and some other PR, extract the data from the xml and cross compare\r\n\r\n<img width=\"866\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/97fb09b4-3681-4cd0-985a-f151b9c7817b\">\r\n\r\nTotally optional though!\r\n\r\nOther than that the changes look good to go to me! I just want to have this extra precaution step before signing off.\r\n",
        "createdAt": "2023-05-17T11:26:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I started to look at some of the test logs. I compared logs from a build for this PR (8766) and from a build for PR 8763.\r\n\r\nI compared \"CoreOnWindows .Net 7.0 x64\" and \"CoreOnMac .Net 7.0 x64\".\r\n\r\n### CoreOnWindows .Net 7.0 x64\r\n\r\n| PR | Tests | Time (s) | time/test |\r\n| -- | ----- | ---- | ----- |\r\n| 8763 | 211 | 7.965 | 0.0377 |\r\n| 8766 | 122 | 6.048 | 0.0496 |\r\n\r\n### CoreOnMac .Net 7.0 x64\r\n\r\n| PR | Tests | Time (s) | time/test |\r\n| -- | ----- | ---- | ----- |\r\n| 8763 | 181 | 0.470 | 0.0026 |\r\n| 8766 | 101 | 0.340 | 0.0496 |\r\n\r\nThis is far from exhaustive and controlled but the number of tests and the time both decreased as expected. The time per test, however, increased.\r\n\r\n### Update\r\n\r\nI looked deeper at some of the longer running tests and I haven't found an issue.",
        "createdAt": "2023-05-17T14:00:50Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You are welcome to create a work item for this.\r\nIt'll likely be marked for the contribution grabs though... but still more likely to be accomplished rather then code TODO",
              "createdAt": "2023-05-17T11:28:04Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2101,130 +2151,66 @@ internal virtual void ErrorIfLinkFailedCheck()\n \n                 t.Execute().ShouldBeFalse();\n                 engine.AssertLogContains(\"MSB3893\");\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Helper functor for retry tests.\n-        /// Simulates the File.Copy method without touching the disk.\n-        /// First copy fails as requested, subsequent copies succeed.\n-        /// </summary>\n-        private sealed class CopyFunctor\n-        {\n-            /// <summary>\n-            /// Protects the counts and lists below.\n-            /// </summary>\n-            private readonly object _lockObj = new object();\n-\n-            /// <summary>\n-            /// On what attempt count should we stop failing?\n-            /// </summary>\n-            private readonly int _countOfSuccess;\n-\n-            /// <summary>\n-            /// Should we throw when we fail, instead of just returning false?\n-            /// </summary>\n-            private readonly bool _throwOnFailure;\n-\n-            /// <summary>\n-            /// How many tries have we done so far\n-            /// </summary>\n-            private int _tries;\n-\n-            /// <summary>\n-            /// Which files we actually copied\n-            /// </summary>\n-            internal List<FileState> FilesCopiedSuccessfully { get; } = new List<FileState>();\n-\n-            /// <summary>\n-            /// Constructor\n-            /// </summary>\n-            internal CopyFunctor(int countOfSuccess, bool throwOnFailure)\n-            {\n-                _countOfSuccess = countOfSuccess;\n-                _throwOnFailure = throwOnFailure;\n-            }\n-\n-            /// <summary>\n-            /// Pretend to be File.Copy.\n-            /// </summary>\n-            internal bool? Copy(FileState source, FileState destination)\n-            {\n-                lock (_lockObj)\n-                {\n-                    _tries++;\n-\n-                    // 2nd and subsequent copies always succeed\n-                    if (FilesCopiedSuccessfully.Count > 0 || _countOfSuccess == _tries)\n-                    {\n-                        Console.WriteLine(\"Copied {0} to {1} OK\", source, destination);\n-                        FilesCopiedSuccessfully.Add(source);\n-                        return true;\n-                    }\n-                }\n-\n-                if (_throwOnFailure)\n-                {\n-                    throw new IOException(\"oops\");\n-                }\n \n-                return null;\n+                // TODO: Add test for MSB3892 when ErrorIfLinkFails && !UseHardlinksIfPossible && !UseSymboliclinksIfPossible",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I removed the comment",
              "createdAt": "2023-05-17T18:02:47Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2101,130 +2151,66 @@ internal virtual void ErrorIfLinkFailedCheck()\n \n                 t.Execute().ShouldBeFalse();\n                 engine.AssertLogContains(\"MSB3893\");\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Helper functor for retry tests.\n-        /// Simulates the File.Copy method without touching the disk.\n-        /// First copy fails as requested, subsequent copies succeed.\n-        /// </summary>\n-        private sealed class CopyFunctor\n-        {\n-            /// <summary>\n-            /// Protects the counts and lists below.\n-            /// </summary>\n-            private readonly object _lockObj = new object();\n-\n-            /// <summary>\n-            /// On what attempt count should we stop failing?\n-            /// </summary>\n-            private readonly int _countOfSuccess;\n-\n-            /// <summary>\n-            /// Should we throw when we fail, instead of just returning false?\n-            /// </summary>\n-            private readonly bool _throwOnFailure;\n-\n-            /// <summary>\n-            /// How many tries have we done so far\n-            /// </summary>\n-            private int _tries;\n-\n-            /// <summary>\n-            /// Which files we actually copied\n-            /// </summary>\n-            internal List<FileState> FilesCopiedSuccessfully { get; } = new List<FileState>();\n-\n-            /// <summary>\n-            /// Constructor\n-            /// </summary>\n-            internal CopyFunctor(int countOfSuccess, bool throwOnFailure)\n-            {\n-                _countOfSuccess = countOfSuccess;\n-                _throwOnFailure = throwOnFailure;\n-            }\n-\n-            /// <summary>\n-            /// Pretend to be File.Copy.\n-            /// </summary>\n-            internal bool? Copy(FileState source, FileState destination)\n-            {\n-                lock (_lockObj)\n-                {\n-                    _tries++;\n-\n-                    // 2nd and subsequent copies always succeed\n-                    if (FilesCopiedSuccessfully.Count > 0 || _countOfSuccess == _tries)\n-                    {\n-                        Console.WriteLine(\"Copied {0} to {1} OK\", source, destination);\n-                        FilesCopiedSuccessfully.Add(source);\n-                        return true;\n-                    }\n-                }\n-\n-                if (_throwOnFailure)\n-                {\n-                    throw new IOException(\"oops\");\n-                }\n \n-                return null;\n+                // TODO: Add test for MSB3892 when ErrorIfLinkFails && !UseHardlinksIfPossible && !UseSymboliclinksIfPossible",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}