{
  "number": 7366,
  "title": "Ensure path writable for MSBuildDebugEngine",
  "body": "Fixes #7241\r\n\r\n### Context\r\nWhen MSBuildDebugEngine, it will throw a confusing exception if it finds it cannot write to the specified path. The path is, by default, MSBUILDDEBUGPATH or the current working directory.\r\n\r\n### Changes Made\r\nIf  MSBUILDDEBUGPATH is invalid, it will now attempt to redirect to the current working directory. If writing to the current working directory fails, perhaps because it's in C:\\Program Files or another protected directory, it redirects to TEMP. If the path is too long, it now fails with a nice error.\r\n\r\n### Testing\r\nManually tested to ensure redirection happened for both the argument exception (invalid path characters in MSBUILDDEBUGPATH) and the UnauthorizedAccessException (writing to C:\\Program Files) cases.",
  "state": "MERGED",
  "createdAt": "2022-02-03T19:56:41Z",
  "updatedAt": "2022-03-24T20:21:11Z",
  "closedAt": "2022-03-24T20:21:11Z",
  "mergedAt": "2022-03-24T20:21:10Z",
  "additions": 197,
  "deletions": 7,
  "changedFiles": 31,
  "headRefName": "ensure-path-writable",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "19b5056f268bb305f8ba7e534ea2e2214865b2c2",
          "message": "Add exception\n\nNote that we have a similar exception just a little above this, so I can extend that instead. I think this necessitates a new exception because saying some random path is too long would immediately make me ask why I should care about that path.",
          "committedDate": "2022-02-03T19:12:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5788e60a8b259d1c7bccb0f0e6ab39e65c91bf8a",
          "message": "Redirect to TEMP if necessary",
          "committedDate": "2022-02-03T19:14:26Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e19453776799e166bb975ff94cbfb9661c5c3f81",
          "message": "Make more robust",
          "committedDate": "2022-02-03T19:53:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b8c28c8b1c9963ec84f98daf28b5b465980f107c",
          "message": "PR feedback",
          "committedDate": "2022-02-06T20:37:01Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9077e6dd6e3d9c702925a747c4819331bbee32a8",
          "message": "Write to windows event log?",
          "committedDate": "2022-02-15T01:47:29Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5bf7dbf6dff00497110da968d47173eb047c75c3",
          "message": "Revert \"Write to windows event log?\"\n\nThis reverts commit 9077e6dd6e3d9c702925a747c4819331bbee32a8.",
          "committedDate": "2022-02-16T00:18:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9c677048533fbf9c48388cd40149cdeb4d29155",
          "message": "Add debug path message\n\nImportance set to high if MSBuildDebugPath wasn't set or low if it was",
          "committedDate": "2022-02-26T04:16:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0d8f13a1a591ec3922802782da447d29589b263",
          "message": "Merge branch 'main' into ensure-path-writable",
          "committedDate": "2022-02-26T04:17:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5227cfa51d572f34da2ec7e36da0dc0a4d53bf2e",
          "message": "PR comments",
          "committedDate": "2022-02-28T18:23:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8972ab3fbb0bf1be1ad43ad3fecf6089c9f09848",
          "message": "Update src/MSBuild/XMake.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-02-28T22:18:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> If MSBUILDDEBUGPATH is invalid, it will now attempt to redirect to the current working directory. If writing to the current working directory fails, perhaps because it's in C:\\Program Files or another protected directory, it redirects to TEMP.\r\n\r\nThis is very complicated. Can we instead just fail?",
        "createdAt": "2022-02-04T21:57:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > If MSBUILDDEBUGPATH is invalid, it will now attempt to redirect to the current working directory. If writing to the current working directory fails, perhaps because it's in C:\\Program Files or another protected directory, it redirects to TEMP.\r\n> \r\n> This is very complicated. Can we instead just fail?\r\n\r\nPut more simply, we try MSBUILDDEBUGPATH > CWD > TEMP in that order.\r\n\r\nWe obviously can't take MSBUILDDEBUGPATH out of that list of options. Since it currently defaults to CWD, as do several of our other logs, I don't think we should take that out. The exception that led us to think of investigating this was in which MSBUILDDEBUGPATH was null, and CWD was protected, hence falling back to TEMP. We could just fail, but if we have a good (and easy) alternative, I think it's better to do that first.",
        "createdAt": "2022-02-04T22:15:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Update: After talking with baronfel, we're keeping the current fallback scheme, but I will try to writing to the windows event log and, if that proves too difficult, abandoning writing a message to the user.",
        "createdAt": "2022-02-15T00:25:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I will try to writing to the windows event log and, if that proves too difficult, abandoning writing a message to the user.\r\n\r\nI don't understand this as a goal. Why introduce a new logging mechanism for MSBuild here?",
        "createdAt": "2022-02-15T14:31:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I don't understand this as a goal. Why introduce a new logging mechanism for MSBuild here?\r\n\r\nI'll let @baronfel speak for himself, but I said that I'd had trouble logging something the normal way at the time DebugPath is set. This is logging _something_ in a way users can find that would indicate where their logs are being sent.\r\n\r\nMy other idea for logging something is to log DebugPath in the normal way but late such that if something goes wrong early in the build, you wouldn't see it, but if something goes wrong later in the build, you'd also have a warning telling you where your logs are, but baronfel said he liked writing to EventLog more.",
        "createdAt": "2022-02-15T16:42:01Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I'm not married to it, but systems have places like the EventLog (on Windows) and Syslog (on Mac) as an ever-present last-change logging target for a reason.  In the hosted scenario (VS/VSMac) we don't have full control over the logger config, so if we do want to provide some sort of logging to the user (in a way that doesn't cause an application exception at startup), those mechanisms are viable IMO. Especially for a developer-centric audience, where the EventLog/Syslog is a known _thing_. \r\n\r\nThat being said, to add this capability in a complete way (i.e an OS-agnostic interface with OS-specific implementations) might be too much of an ask for this PR, so I'd be willing to let it go.",
        "createdAt": "2022-02-15T16:45:10Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I tested out my code, and it threw a SecurityException, which from what I can tell online, means I didn't run it in admin mode, and since there wasn't already an MSBuild EventLog key, it failed. Maybe we can add an MSBuild EventLog key in setup? But I'm not sure it's worth it. We could theoretically log under Application or .NET Runtime, but neither of those feels quite right. Thoughts?",
        "createdAt": "2022-02-15T23:35:33Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "That's enough of a roadblock to throw away the idea from my perspective @Forgind.",
        "createdAt": "2022-02-15T23:36:34Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-02-16T17:41:35Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-02-16T17:41:45Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-02-16T23:09:29Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-02-16T23:09:39Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I found a way to log a deferred message. It isn't a warning, but it's a high-pri message if MSBuildDebugPath was not set or invalid and a low-pri message if it was.",
        "createdAt": "2022-02-26T04:17:26Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: comment doesn't help much",
              "createdAt": "2022-02-04T23:39:26Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -22,13 +23,27 @@ private enum NodeMode\n \n         static DebugUtils()\n         {\n-            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n-            var debugDirectory = environmentDebugPath;\n+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"));\n+            string debugDirectory = environmentDebugPath;\n \n             if (Traits.Instance.DebugEngine)\n             {\n                 debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n \n+                // Probe writeability",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                debugDirectory = ProbeWriteability(debugDirectory);\r\n                debugDirectory ??= ProbeWriteability(Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\"));\r\n                debugDirectory ??= Path.Combine(Path.GetTempPath(), \"MSBuild_Logs\");\r\n```\r\n\r\nIf `ProbeWriteability` can be changed to catch its own ArgumentException and return null in that case, it simplifies the logic here.",
              "createdAt": "2022-02-04T23:50:23Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -22,13 +23,27 @@ private enum NodeMode\n \n         static DebugUtils()\n         {\n-            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n-            var debugDirectory = environmentDebugPath;\n+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"));\n+            string debugDirectory = environmentDebugPath;\n \n             if (Traits.Instance.DebugEngine)\n             {\n                 debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n \n+                // Probe writeability\n+                try\n+                {\n+                    debugDirectory = ProbeWriteability(debugDirectory);\n+                }\n+                catch (ArgumentException)\n+                {\n+                    // This can happen if MSBUILDDEBUGPATH contains invalid characters, but the current working directory may still work.\n+                    debugDirectory = ProbeWriteability(Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\"));\n+                }\n+\n+                // Redirect to TEMP if we failed to write to either MSBUILDDEBUGPATH or the current working directory.\n+                debugDirectory ??= Path.Combine(Path.GetTempPath(), \"MSBuild_Logs\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I was trying to get out better perf, but on reflection, that isn't a very satisfying reason for making this more complicated. This runs once, and the difference is tiny, so I really shouldn't care. I'll change this.",
              "createdAt": "2022-02-06T20:31:49Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -22,13 +23,27 @@ private enum NodeMode\n \n         static DebugUtils()\n         {\n-            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n-            var debugDirectory = environmentDebugPath;\n+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"));\n+            string debugDirectory = environmentDebugPath;\n \n             if (Traits.Instance.DebugEngine)\n             {\n                 debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n \n+                // Probe writeability\n+                try\n+                {\n+                    debugDirectory = ProbeWriteability(debugDirectory);\n+                }\n+                catch (ArgumentException)\n+                {\n+                    // This can happen if MSBUILDDEBUGPATH contains invalid characters, but the current working directory may still work.\n+                    debugDirectory = ProbeWriteability(Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\"));\n+                }\n+\n+                // Redirect to TEMP if we failed to write to either MSBUILDDEBUGPATH or the current working directory.\n+                debugDirectory ??= Path.Combine(Path.GetTempPath(), \"MSBuild_Logs\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't like the naming here. Something like `CanWriteToDirectory` or similar is more intuitive.\r\n\r\nSee my comment above, but this function can catch its own `ArgumentException` and return null in that case.\r\n\r\nWe can consider placing this in `FileUtilities` if we can generalize this.",
              "createdAt": "2022-02-04T23:52:40Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -44,6 +59,32 @@ static DebugUtils()\n             DebugPath = debugDirectory;\n         }\n \n+        private static string ProbeWriteability(string path)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I think the general form should just return true or false for can write/can't write. Should be doable.",
              "createdAt": "2022-02-06T20:32:25Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -44,6 +59,32 @@ static DebugUtils()\n             DebugPath = debugDirectory;\n         }\n \n+        private static string ProbeWriteability(string path)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc4d!",
              "createdAt": "2022-02-04T23:53:10Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -270,6 +270,11 @@ internal static bool IsSlash(char c)\n         /// </summary>\n         internal static string TrimAndStripAnyQuotes(string path)\n         {\n+            if (path is null)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we mention changing the system to allow long paths, should we also include a help link?",
              "createdAt": "2022-02-04T23:54:03Z",
              "path": "src/Shared/Resources/Strings.shared.resx",
              "diffHunk": "@@ -278,10 +278,14 @@\n     <value>MSB5028: Solution filter file at \"{0}\" includes project \"{1}\" that is not in the solution file at \"{2}\".</value>\n     <comment>{StrBegin=\"MSB5028: \"}UE: The project filename is provided separately to loggers.</comment>\n   </data>\n+  <data name=\"DebugPathTooLong\" Visibility=\"Public\">\n+    <value>MSB5029: The path \"{0}\" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</value>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Reasonable, but that's a very google-able not-MSBuild thing, so I'd vote no, personally.",
              "createdAt": "2022-02-06T20:36:02Z",
              "path": "src/Shared/Resources/Strings.shared.resx",
              "diffHunk": "@@ -278,10 +278,14 @@\n     <value>MSB5028: Solution filter file at \"{0}\" includes project \"{1}\" that is not in the solution file at \"{2}\".</value>\n     <comment>{StrBegin=\"MSB5028: \"}UE: The project filename is provided separately to loggers.</comment>\n   </data>\n+  <data name=\"DebugPathTooLong\" Visibility=\"Public\">\n+    <value>MSB5029: The path \"{0}\" used for debug logs is too long. Set it to a shorter value using the MSBUILDDEBUGPATH environment variable or change your system configuration to allow long paths.</value>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "20-30 minutes: figure out if I can log a warning in a visible way in VS\r\n\r\nIf yes, log warning for these with new path included.\r\n\r\nIf not, check what happens if I log a catastrophic failure.",
              "createdAt": "2022-02-07T16:58:01Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -22,12 +23,23 @@ private enum NodeMode\n \n         static DebugUtils()\n         {\n-            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n-            var debugDirectory = environmentDebugPath;\n+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"));\n+            string debugDirectory = environmentDebugPath;\n \n             if (Traits.Instance.DebugEngine)\n             {\n-                debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n+                if (!string.IsNullOrWhiteSpace(debugDirectory) && FileUtilities.CanWriteToDirectory(debugDirectory))\n+                {\n+                    // Debug directory is writable; no need for fallbacks\n+                }\n+                else if (FileUtilities.CanWriteToDirectory(Directory.GetCurrentDirectory()))\n+                {\n+                    debugDirectory = Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n+                }\n+                else\n+                {\n+                    debugDirectory = Path.Combine(Path.GetTempPath(), \"MSBuild_Logs\");\n+                }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we avoid allocating this in the (very common) case when there is no `MSBuildDebugPath`?",
              "createdAt": "2022-02-28T15:32:13Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1363,7 +1364,12 @@ private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogIn\n                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n                         \"MSBVersion\",\n                         ProjectCollection.DisplayVersion),\n-                    MessageImportance.Low)\n+                    MessageImportance.Low),\n+                new BuildManager.DeferredBuildMessage(\n+                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n+                        \"MSBuildDebugPath\",\n+                        DebugUtils.DebugPath),\n+                    DebugUtils.DebugPathMessageImportance),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I'd prefer to leave this as high: it's interesting that they've used the env var to set up logging even if it works.",
              "createdAt": "2022-02-28T16:29:10Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -22,12 +23,27 @@ private enum NodeMode\n \n         static DebugUtils()\n         {\n-            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n-            var debugDirectory = environmentDebugPath;\n+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\"));\n+            string debugDirectory = environmentDebugPath;\n+\n+            DebugPathMessageImportance = MessageImportance.Low;\n \n             if (Traits.Instance.DebugEngine)\n             {\n-                debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n+                DebugPathMessageImportance = MessageImportance.High;\n+                if (!string.IsNullOrWhiteSpace(debugDirectory) && FileUtilities.CanWriteToDirectory(debugDirectory))\n+                {\n+                    // Debug directory is writable; no need for fallbacks\n+                    DebugPathMessageImportance = MessageImportance.Low;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "With some tweaks it'll be much easier to determine if this is causing problems, and support concurrent execution:\r\n\r\n```suggestion\r\n                string testFilePath = Path.Combine(directory, $\"MSBuild_{Guid.NewGuid().ToString(\"N\")}.txt\");                File.WriteAllText(testFilePath, $\"MSBuild process {Process.GetCurrentProcess().Id} successfully wrote to file.\");\r\n```",
              "createdAt": "2022-02-28T16:48:20Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -165,6 +165,30 @@ internal static int GetPathsHash(IEnumerable<string> assemblyPaths)\n             return builder.ToString().GetHashCode();\n         }\n \n+        /// <summary>\n+        /// Returns whether MSBuild can write to the given directory. Throws for PathTooLongExceptions\n+        /// but not other exceptions.\n+        /// </summary>\n+        internal static bool CanWriteToDirectory(string directory)\n+        {\n+            try\n+            {\n+                string testFilePath = Path.Combine(directory, \"textFile.txt\");\n+                File.WriteAllText(testFilePath, \"Successfully wrote to file.\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be better to check `DebugUtils.DebugPath is not null`, so the env var stuff only has to happen once?",
              "createdAt": "2022-02-28T19:26:27Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1365,12 +1365,19 @@ private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogIn\n                         \"MSBVersion\",\n                         ProjectCollection.DisplayVersion),\n                     MessageImportance.Low),\n-                new BuildManager.DeferredBuildMessage(\n-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n+            };\n+\n+            if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBuildDebugEngine\")))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I thought about that. DebugUtils.DebugPath is not null if MSBUILDDEBUGPATH is set even if MSBuildDebugEngine is not enabled, which I didn't like. Then it isn't a VS thing but also a thing people (or at least I) really do use from the command line, and a high priority message about a debug path that I know where is felt undesirable. That said, I should be able to reference the trait and get the best of both worlds:\r\n```suggestion\r\n            if (Traits.Instance.DebugEngine)\r\n```\r\n\r\nThat's only risky if someone changes the environment variable at an awkward time, which shouldn't be important.",
              "createdAt": "2022-02-28T22:18:16Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1365,12 +1365,19 @@ private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogIn\n                         \"MSBVersion\",\n                         ProjectCollection.DisplayVersion),\n                     MessageImportance.Low),\n-                new BuildManager.DeferredBuildMessage(\n-                    ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\n+            };\n+\n+            if (!string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBuildDebugEngine\")))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}