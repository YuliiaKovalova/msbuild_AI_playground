{
  "number": 7926,
  "title": "Deduplicate list of assemblies loaded in TypeLoader",
  "body": "Fixes #7920\r\n\r\n### Context\r\nWhen a task ships MSBuild assemblies, we try to load both those assemblies and the assemblies next to MSBuild. This confuses the MetadataLoadContext. We should just use the MSBuild that's actually building, since we'll binding redirect to that anyway.\r\n\r\nWe also load MSBuild from the runtime, but that one isn't problematic here.\r\n\r\n### Changes Made\r\nLoad MSBuild from one place only in TypeLoader.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-08-30T16:50:11Z",
  "updatedAt": "2022-09-23T09:05:35Z",
  "closedAt": "2022-09-23T09:05:35Z",
  "mergedAt": "2022-09-23T09:05:34Z",
  "additions": 48,
  "deletions": 8,
  "changedFiles": 3,
  "headRefName": "only-one-msb",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3f9891b80aebfa2acdc2ca1e3b38f11bf6f3457b",
          "message": "Deduplicate list of assemblies loaded in TypeLoader",
          "committedDate": "2022-08-30T21:45:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "853adfd66e91747ec58c80689d40cfc2d5dacc80",
          "message": "Add test",
          "committedDate": "2022-08-30T21:45:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1d6dc23c1b82645310b515fd4674e03cc30e8d7",
          "message": "Copy M.B.Utilities into findable folder",
          "committedDate": "2022-08-30T21:45:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "460efa43f391dc047fbd53a21b6d9690f12fa878",
          "message": "Comment",
          "committedDate": "2022-08-30T23:28:46Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33b959c50d650b26a05792350906e52dc0d7c20b",
          "message": "PR comment",
          "committedDate": "2022-09-13T21:17:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73a9575a7b29c218dfd46e22e119045458e8319e",
          "message": "Make work again",
          "committedDate": "2022-09-13T23:27:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "743ab07edbadd571cac7329b46e5c7b262018181",
          "message": "BeforeTargets=\"CopyFilesToOutputDirectory\"",
          "committedDate": "2022-09-14T21:16:49Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If you already have a `PackageReference` to this, you shouldn't need the `PackageDownload`.",
              "createdAt": "2022-08-30T22:26:06Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,11 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n+    <PackageDownload Include=\"Microsoft.Build.Utilities.Core\" Version=\"[15.5.180]\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we are going to return array anyways. Wouldn't it be better to create an array of length `msbuildAssemblies.Length + runtimeAssemblies.Length`? \r\nPlease correct me if I am wrong, but wouldn't that be more efficient?",
              "createdAt": "2022-09-08T16:35:27Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -59,10 +59,10 @@ private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()\n             string[] msbuildAssemblies = Directory.GetFiles(msbuildDirectory, \"*.dll\");\n             string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n \n-            List<string> msbuildAssembliesList = new(msbuildAssemblies);\n-            msbuildAssembliesList.AddRange(runtimeAssemblies);\n+            List<string> runtimeAssembliesList = new(runtimeAssemblies);\n+            runtimeAssembliesList.AddRange(msbuildAssemblies);\n \n-            return msbuildAssembliesList.ToArray();\n+            return runtimeAssembliesList.ToArray();",
              "author": {
                "login": "mahmoud-syr"
              }
            },
            {
              "body": "You mean when we initially create the list?\r\n\r\nThat can be slightly more efficient. It shouldn't really matter, since this runs just once per process anyway, so the difference is negligible. I'd slightly prefer to keep it as-is because I think it's a bit easier to read.",
              "createdAt": "2022-09-08T17:57:25Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -59,10 +59,10 @@ private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()\n             string[] msbuildAssemblies = Directory.GetFiles(msbuildDirectory, \"*.dll\");\n             string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n \n-            List<string> msbuildAssembliesList = new(msbuildAssemblies);\n-            msbuildAssembliesList.AddRange(runtimeAssemblies);\n+            List<string> runtimeAssembliesList = new(runtimeAssemblies);\n+            runtimeAssembliesList.AddRange(msbuildAssemblies);\n \n-            return msbuildAssembliesList.ToArray();\n+            return runtimeAssembliesList.ToArray();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I meant the call to `.ToArray()` as well.\r\nYou are right, since it's going to run only once. I had no idea; I should be more active in the dotnet code-base repositories :).\r\nKeeping it as is, is more readable indeed.",
              "createdAt": "2022-09-08T19:02:42Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -59,10 +59,10 @@ private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()\n             string[] msbuildAssemblies = Directory.GetFiles(msbuildDirectory, \"*.dll\");\n             string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n \n-            List<string> msbuildAssembliesList = new(msbuildAssemblies);\n-            msbuildAssembliesList.AddRange(runtimeAssemblies);\n+            List<string> runtimeAssembliesList = new(runtimeAssemblies);\n+            runtimeAssembliesList.AddRange(msbuildAssemblies);\n \n-            return msbuildAssembliesList.ToArray();\n+            return runtimeAssembliesList.ToArray();",
              "author": {
                "login": "mahmoud-syr"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Doesn't copy to temp any more. Also `AfterTargets=\"Build\"` is bad style; can you be more specific?",
              "createdAt": "2022-09-13T18:15:06Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,10 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n   </ItemGroup>\n   <Target Name=\"UpdateXlf\" />\n+  <Target Name=\"CopyMSBuildUtilitiesToTemp\" AfterTargets=\"Build\">",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It really just has to happen at any point after the PackageReference is resolved and before tests start running...after the build is otherwise finished is one such time. I guess I could try to put it after ResolvePackageSomething, but I'd have to figure out what exactly that is.",
              "createdAt": "2022-09-13T18:53:37Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,10 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n   </ItemGroup>\n   <Target Name=\"UpdateXlf\" />\n+  <Target Name=\"CopyMSBuildUtilitiesToTemp\" AfterTargets=\"Build\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Put a comment here and on the reference that this is only needed for MSBuild-repo tests. Right now it's in Samples, and this is not a sample-related thing.",
              "createdAt": "2022-09-13T18:15:56Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,10 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n   </ItemGroup>\n   <Target Name=\"UpdateXlf\" />\n+  <Target Name=\"CopyMSBuildUtilitiesToTemp\" AfterTargets=\"Build\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I do not like this coupling at all. Can you not copy `Utilities.Core.dll` in the build of this project, so it's in a known relative location?",
              "createdAt": "2022-09-13T18:21:55Z",
              "path": "src/Shared/UnitTests/TypeLoader_Tests.cs",
              "diffHunk": "@@ -90,6 +91,30 @@ public void LoadInsideAsssembly()\n             }\n         }\n \n+        [Fact]\n+        public void LoadTaskDependingOnMSBuild()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+                string currentAssembly = Assembly.GetExecutingAssembly().Location;\n+                string utilitiesName = \"Microsoft.Build.Utilities.Core.dll\";\n+                string newAssemblyLocation = Path.Combine(folder.Path, Path.GetFileName(currentAssembly));\n+                string portableTaskFolderPath = Path.GetFullPath(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, \"..\", \"..\", \"..\", \"Samples\", \"PortableTask\"));\n+\n+                // The \"first\" directory is \"Debug\" or \"Release\"\n+                portableTaskFolderPath = Path.Combine(Directory.GetDirectories(portableTaskFolderPath).First(), \"netstandard2.0\", \"OldMSBuild\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is how it's done in PortableTasks_Tests:\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/PortableTasks_Tests.cs#L21\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks.UnitTests/PortableTasks_Tests.cs#L57\r\n\r\nI think it's reasonable to copy what we've previously done.",
              "createdAt": "2022-09-13T18:48:53Z",
              "path": "src/Shared/UnitTests/TypeLoader_Tests.cs",
              "diffHunk": "@@ -90,6 +91,30 @@ public void LoadInsideAsssembly()\n             }\n         }\n \n+        [Fact]\n+        public void LoadTaskDependingOnMSBuild()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+                string currentAssembly = Assembly.GetExecutingAssembly().Location;\n+                string utilitiesName = \"Microsoft.Build.Utilities.Core.dll\";\n+                string newAssemblyLocation = Path.Combine(folder.Path, Path.GetFileName(currentAssembly));\n+                string portableTaskFolderPath = Path.GetFullPath(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, \"..\", \"..\", \"..\", \"Samples\", \"PortableTask\"));\n+\n+                // The \"first\" directory is \"Debug\" or \"Release\"\n+                portableTaskFolderPath = Path.Combine(Directory.GetDirectories(portableTaskFolderPath).First(), \"netstandard2.0\", \"OldMSBuild\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Well that's horrifying. It also uses a static field--can you simplify so it only exists once, at least?",
              "createdAt": "2022-09-13T18:50:26Z",
              "path": "src/Shared/UnitTests/TypeLoader_Tests.cs",
              "diffHunk": "@@ -90,6 +91,30 @@ public void LoadInsideAsssembly()\n             }\n         }\n \n+        [Fact]\n+        public void LoadTaskDependingOnMSBuild()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+                string currentAssembly = Assembly.GetExecutingAssembly().Location;\n+                string utilitiesName = \"Microsoft.Build.Utilities.Core.dll\";\n+                string newAssemblyLocation = Path.Combine(folder.Path, Path.GetFileName(currentAssembly));\n+                string portableTaskFolderPath = Path.GetFullPath(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, \"..\", \"..\", \"..\", \"Samples\", \"PortableTask\"));\n+\n+                // The \"first\" directory is \"Debug\" or \"Release\"\n+                portableTaskFolderPath = Path.Combine(Directory.GetDirectories(portableTaskFolderPath).First(), \"netstandard2.0\", \"OldMSBuild\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would reversing this without the other changes have the desired effect?",
              "createdAt": "2022-09-13T18:23:11Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)\n         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)\n         {\n             string path = assemblyLoadInfo.AssemblyFile;\n-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\"));\n-            localPaths.AddRange(runtimeAssemblies);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "No; we'd still have multiple versions, just in a different order, and it still failed with that.",
              "createdAt": "2022-09-13T18:47:35Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)\n         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)\n         {\n             string path = assemblyLoadInfo.AssemblyFile;\n-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\"));\n-            localPaths.AddRange(runtimeAssemblies);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Bouncing through a dictionary here seems concerning, because it'll scramble the order. Is that always ok?",
              "createdAt": "2022-09-13T18:52:01Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)\n         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)\n         {\n             string path = assemblyLoadInfo.AssemblyFile;\n-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\"));\n-            localPaths.AddRange(runtimeAssemblies);\n+            string[] localAssemblies = Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\");\n \n-            _context = new(new PathAssemblyResolver(localPaths));\n+            // Deduplicate between MSBuild assemblies and task dependencies. \n+            Dictionary<string, string> assembliesDictionary = new(localAssemblies.Length + runtimeAssemblies.Length);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, looks like `PathAssemblyResolver`, surprisingly to me, uses a dictionary internally, so I guess it's ok.",
              "createdAt": "2022-09-13T18:52:30Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)\n         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)\n         {\n             string path = assemblyLoadInfo.AssemblyFile;\n-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\"));\n-            localPaths.AddRange(runtimeAssemblies);\n+            string[] localAssemblies = Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\");\n \n-            _context = new(new PathAssemblyResolver(localPaths));\n+            // Deduplicate between MSBuild assemblies and task dependencies. \n+            Dictionary<string, string> assembliesDictionary = new(localAssemblies.Length + runtimeAssemblies.Length);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It should be fine anyway as long as it maintains the \"only one\" invariant. Ordering doesn't matter if there's only ever one valid match.",
              "createdAt": "2022-09-13T20:06:41Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)\n         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)\n         {\n             string path = assemblyLoadInfo.AssemblyFile;\n-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\"));\n-            localPaths.AddRange(runtimeAssemblies);\n+            string[] localAssemblies = Directory.GetFiles(Path.GetDirectoryName(path), \"*.dll\");\n \n-            _context = new(new PathAssemblyResolver(localPaths));\n+            // Deduplicate between MSBuild assemblies and task dependencies. \n+            Dictionary<string, string> assembliesDictionary = new(localAssemblies.Length + runtimeAssemblies.Length);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd expected Restore to work, but it didn't. In lieu of a suggestion, Build works.",
              "createdAt": "2022-09-13T23:28:23Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,12 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n   </ItemGroup>\n   <Target Name=\"UpdateXlf\" />\n+\n+  <!-- This is only needed for a test in the MSBuild repo; it is unrelated to the PortableTask sample itself. -->\n+  <Target Name=\"CopyMSBuildUtilitiesToNewFolder\" AfterTargets=\"Build\">",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Since this is in our Samples folder, I would really like it to be a good example. Hooking `Build` is a bad practice because while it usually works ok, it can break in extremely hard-to-debug ways when referenced by a project that calls different targets.\r\n\r\nSince this is copying a file to the output directory, how about `BeforeTargets=\"CopyFilesToOutputDirectory\"`?",
              "createdAt": "2022-09-14T01:12:25Z",
              "path": "src/Samples/PortableTask/PortableTask.csproj",
              "diffHunk": "@@ -12,7 +12,12 @@\n   </ItemGroup>\n   <ItemGroup>\n     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.5.180\" />\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" />\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.5.180\" GeneratePathProperty=\"true\" />\n   </ItemGroup>\n   <Target Name=\"UpdateXlf\" />\n+\n+  <!-- This is only needed for a test in the MSBuild repo; it is unrelated to the PortableTask sample itself. -->\n+  <Target Name=\"CopyMSBuildUtilitiesToNewFolder\" AfterTargets=\"Build\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you use this in the other spot, or use that one here?",
              "createdAt": "2022-09-14T01:20:38Z",
              "path": "src/Shared/UnitTests/TypeLoader_Tests.cs",
              "diffHunk": "@@ -20,6 +21,8 @@ public class TypeLoader_Tests\n         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, \"PortableTask\");\n         private const string ProjectFileName = \"portableTaskTest.proj\";\n         private const string DLLFileName = \"PortableTask.dll\";\n+        private static string PortableTaskFolderPath = Path.GetFullPath(",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I do think that would be nice, but they're in different test assemblies, and I don't think it makes sense to have this test there or that test here. In other words, the two test classes have no knowledge of each other, and that seems appropriate.",
              "createdAt": "2022-09-14T21:16:32Z",
              "path": "src/Shared/UnitTests/TypeLoader_Tests.cs",
              "diffHunk": "@@ -20,6 +21,8 @@ public class TypeLoader_Tests\n         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, \"PortableTask\");\n         private const string ProjectFileName = \"portableTaskTest.proj\";\n         private const string DLLFileName = \"PortableTask.dll\";\n+        private static string PortableTaskFolderPath = Path.GetFullPath(",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}