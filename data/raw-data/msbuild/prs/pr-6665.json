{
  "number": 6665,
  "title": "VS 1449000: Fix handling of satellite assemblies in ClickOnce",
  "body": "Fixes AB#1449000\r\n\r\n### Context\r\nSatellite assemblies are not being handled correctly after ClickOnce changes for .NET Core publishing were made in VS 16.8.\r\n\r\nFollowing issues have been observed post those changes:\r\n\r\n1. If packages publish en-us resource assembly for other locales as well, we will end up adding all of them in the ClickOnce manifest. Since the strong name signature will be identical for all these resource assemblies, we will now have multiple assemblies with identical signature in the ClickOnce manifest. This will cause CO Install to fail.\r\n\r\n2. The References item list can also contain resource assemblies. If these assemblies are also present in the SatelliteAssembly item list, we will now end up writing 2 entries for the same assembly in the manifest. This will cause CO install to fail.\r\n\r\n### Changes Made\r\nWhen we process the References item list, we will maintain a dictionary for satellite assemblies that are getting included in the list of assemblies. Later when we process the SatelliteAssemblies item list, we will look up in this dictionary and skip the entries that are already included through the References list.\r\n\r\n### Testing\r\nOngoing\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-07-12T21:40:15Z",
  "updatedAt": "2021-07-19T19:27:06Z",
  "closedAt": "2021-07-19T19:27:06Z",
  "mergedAt": "2021-07-19T19:27:06Z",
  "additions": 77,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "sujitnayak"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d51d8be9a6544e573578fb767da5c745db84e5d4",
          "message": "VS 1449000: Fix handling of satellite assemblies in ClickOnce",
          "committedDate": "2021-07-12T21:29:59Z",
          "author": {
            "name": "Sujit Nayak",
            "email": "sujitn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "addda466effc9105e54c195951bfed8e95e6c960",
          "message": "Fix debug message",
          "committedDate": "2021-07-13T20:37:05Z",
          "author": {
            "name": "Sujit Nayak",
            "email": "sujitn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "22b82bee5ad2a4d1596788bb8b51150c2887f458",
          "message": "for review comments",
          "committedDate": "2021-07-15T23:45:02Z",
          "author": {
            "name": "Sujit Nayak",
            "email": "sujitn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Instead of having to create this new string, can you use an invariant comparer on the dictionary?",
              "createdAt": "2021-07-14T14:24:51Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -855,6 +885,56 @@ IEnumerator IEnumerable.GetEnumerator()\n         }\n         #endregion\n \n+        #region SatelliteRefAssemblyMap\n+        private class SatelliteRefAssemblyMap : IEnumerable\n+        {\n+            private readonly Dictionary<string, MapEntry> _dictionary = new Dictionary<string, MapEntry>();\n+\n+            public MapEntry this[string fusionName]\n+            {\n+                get\n+                {\n+                    string key = fusionName.ToLowerInvariant();\n+                    _dictionary.TryGetValue(key, out MapEntry entry);\n+                    return entry;\n+                }\n+            }\n+\n+            public bool ContainsItem(ITaskItem item)\n+            {\n+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                if (identity != null)\n+                {\n+                    string key = identity.ToString().ToLowerInvariant();\n+                    return _dictionary.ContainsKey(key);\n+                }\n+                return false;\n+            }\n+\n+            public void Add(ITaskItem item)\n+            {\n+                var entry = new MapEntry(item, true);\n+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                if (identity != null && !String.Equals(identity.Culture, \"neutral\", StringComparison.Ordinal))\n+                {\n+                    // Use satellite assembly strong name signature as key\n+                    string key = identity.ToString().ToLowerInvariant();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "changed per suggestion.",
              "createdAt": "2021-07-15T23:53:21Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -855,6 +885,56 @@ IEnumerator IEnumerable.GetEnumerator()\n         }\n         #endregion\n \n+        #region SatelliteRefAssemblyMap\n+        private class SatelliteRefAssemblyMap : IEnumerable\n+        {\n+            private readonly Dictionary<string, MapEntry> _dictionary = new Dictionary<string, MapEntry>();\n+\n+            public MapEntry this[string fusionName]\n+            {\n+                get\n+                {\n+                    string key = fusionName.ToLowerInvariant();\n+                    _dictionary.TryGetValue(key, out MapEntry entry);\n+                    return entry;\n+                }\n+            }\n+\n+            public bool ContainsItem(ITaskItem item)\n+            {\n+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                if (identity != null)\n+                {\n+                    string key = identity.ToString().ToLowerInvariant();\n+                    return _dictionary.ContainsKey(key);\n+                }\n+                return false;\n+            }\n+\n+            public void Add(ITaskItem item)\n+            {\n+                var entry = new MapEntry(item, true);\n+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                if (identity != null && !String.Equals(identity.Culture, \"neutral\", StringComparison.Ordinal))\n+                {\n+                    // Use satellite assembly strong name signature as key\n+                    string key = identity.ToString().ToLowerInvariant();",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure I understand these asserts. Is it a bug in the task if we get to this point? If it's a bug in the user's projects or an unusual condition, I don't think the assert is appropriate.",
              "createdAt": "2021-07-14T14:24:56Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's about unusual satellite assemblies in file/nuget references. I have removed the asserts as it's not a bug in the task.",
              "createdAt": "2021-07-15T23:56:47Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "for readability I'd prefer\r\n\r\n```suggestion\r\n                            if (PublishFlags.IsSatelliteIncludedByDefault(satelliteCulture, _targetCulture, _includeAllSatellites))\r\n                            {\r\n                                satelliteRefAssemblyMap.Add(item);\r\n                            }\r\n                            else\r\n                            {\r\n                                continue;\r\n                            }\r\n```",
              "createdAt": "2021-07-14T14:27:20Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");\n+                            continue;\n+                        }\n+\n+                        // If we get a resource assembly in managed references, determine whether to be publish it based on _targetCulture\n+                        AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                        if (identity != null && !String.Equals(identity.Culture, \"neutral\", StringComparison.Ordinal))\n+                        {\n+                            CultureInfo satelliteCulture = GetItemCulture(item);\n+                            if (!PublishFlags.IsSatelliteIncludedByDefault(satelliteCulture, _targetCulture, _includeAllSatellites))\n+                            {\n+                                continue;\n+                            }\n+                            else\n+                            {\n+                                satelliteRefAssemblyMap.Add(item);\n+                            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "fixed.",
              "createdAt": "2021-07-15T23:56:56Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");\n+                            continue;\n+                        }\n+\n+                        // If we get a resource assembly in managed references, determine whether to be publish it based on _targetCulture\n+                        AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);\n+                        if (identity != null && !String.Equals(identity.Culture, \"neutral\", StringComparison.Ordinal))\n+                        {\n+                            CultureInfo satelliteCulture = GetItemCulture(item);\n+                            if (!PublishFlags.IsSatelliteIncludedByDefault(satelliteCulture, _targetCulture, _includeAllSatellites))\n+                            {\n+                                continue;\n+                            }\n+                            else\n+                            {\n+                                satelliteRefAssemblyMap.Add(item);\n+                            }",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be accurate to say\r\n\r\n```suggestion\r\n                        // apply the culture publishing rules to managed references as well as satellites\r\n```\r\n\r\n?",
              "createdAt": "2021-07-14T14:33:23Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");\n+                            continue;\n+                        }\n+\n+                        // If we get a resource assembly in managed references, determine whether to be publish it based on _targetCulture",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "updated with tweaks.",
              "createdAt": "2021-07-15T23:57:49Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -380,6 +382,29 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>\n                 {\n                     if (!IsFiltered(item))\n                     {\n+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.\n+                        // This will cause ClickOnce install to fail. This can happen if some package\n+                        // decides to publish the en-us resource assemblies for other locales also.\n+                        if (!LauncherBasedDeployment && satelliteRefAssemblyMap.ContainsItem(item))\n+                        {\n+                            Debug.Assert(false, $\"Duplicate satellite assembly '{item.ItemSpec}' skipped in _managedAssemblies\");\n+                            continue;\n+                        }\n+\n+                        // If we get a resource assembly in managed references, determine whether to be publish it based on _targetCulture",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I found this name unclear later on. Maybe call it `_satelliteAssembliesPassedAsReferences`?\r\n\r\n(also nit: our style is that this should start with an `_`)",
              "createdAt": "2021-07-14T14:33:50Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -52,6 +52,8 @@ public sealed class ResolveManifestFiles : TaskExtension\n         // if signing manifests is on and not all app files are included, then the project can't be published.\n         private bool _canPublish;\n         private Dictionary<string, ITaskItem> _runtimePackAssets;\n+        // map of satellite assemblies that are included in References\n+        private SatelliteRefAssemblyMap satelliteRefAssemblyMap = new SatelliteRefAssemblyMap();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "fixed.",
              "createdAt": "2021-07-15T23:57:56Z",
              "path": "src/Tasks/ResolveManifestFiles.cs",
              "diffHunk": "@@ -52,6 +52,8 @@ public sealed class ResolveManifestFiles : TaskExtension\n         // if signing manifests is on and not all app files are included, then the project can't be published.\n         private bool _canPublish;\n         private Dictionary<string, ITaskItem> _runtimePackAssets;\n+        // map of satellite assemblies that are included in References\n+        private SatelliteRefAssemblyMap satelliteRefAssemblyMap = new SatelliteRefAssemblyMap();",
              "author": {
                "login": "sujitnayak"
              }
            }
          ]
        }
      }
    ]
  }
}