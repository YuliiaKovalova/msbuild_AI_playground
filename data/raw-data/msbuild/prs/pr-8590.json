{
  "number": 8590,
  "title": "Consolidate solution configuration xml parsing logic",
  "body": "Fixes #6751\r\n\r\nThis change combines the solution configuration xml parsing which the project caching code and the tasks code uses. I did not add `SolutionProjectGenerator.AddPropertyGroupForSolutionConfiguration` into the mix as that's a write scenario and the other two are read scenarios. Maybe at some point the object model could be made more robust and support both the read and write scenarios, but whatever, this is incrementally better.\r\n\r\nNote that the main motivation here is that the graph construction code currently does not support the sln-defined configurations, ie what the `AssignProjectConfiguration` target does, so I'll be working on a follow-up change for that. And instead of creating a third copy of this parsing logic, I thought I'd send this PR to consolidate the logic first.\r\n\r\nBasically, `SolutionConfiguration.cs` is just ripped directly from `ResolveProjectBase.cs`, and then `ProjectCacheService` just uses `SolutionConfiguration` instead of parsing itself.",
  "state": "MERGED",
  "createdAt": "2023-03-22T20:41:08Z",
  "updatedAt": "2023-03-28T18:47:57Z",
  "closedAt": "2023-03-28T18:47:14Z",
  "mergedAt": "2023-03-28T18:47:14Z",
  "additions": 160,
  "deletions": 120,
  "changedFiles": 7,
  "headRefName": "solution-configuration",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": {
    "title": "VS 17.6"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e0d55a05a87f4410bd74d7d94e099e71544d2520",
          "message": "Consolidate solution configuration xml parsing logic",
          "committedDate": "2023-03-22T20:43:02Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce018b2a29de67a78b99c03267642ed90a5aa614",
          "message": "Add MaybeNullWhen attributes",
          "committedDate": "2023-03-23T16:25:31Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "915a4082ce26e045e4f5c430cedfa285aae81608",
          "message": "MaybeNullWhen -> NotNullWhen",
          "committedDate": "2023-03-23T19:52:53Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4387624f4ff3caea2cc53db126443e0f5b714d5c",
          "message": "PR feedback",
          "committedDate": "2023-03-27T22:35:28Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why does it need XmlReader.Create(new StringReader(xmlString), settings), whereas it looks like the previous version just called LoadXml on the string directly in ProjectCacheService? Is it because you wanted to pass DtdProcessing.Ignore? I seem to remember that's a security thing, so perhaps that was the motivation?",
              "createdAt": "2023-03-27T18:50:58Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I consolidated on the behavior in `ResolveProjectBase` since it's more battle-tested.",
              "createdAt": "2023-03-27T20:45:39Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This step is just to cache some stuff early? Is it always needed? I'm wondering if we could do it lazily. In particular, it looks like ProjectCacheService wasn't doing all of this before.\r\n\r\n(Partially inspired by https://github.com/dotnet/msbuild/pull/8526, which got a big improvement by avoiding GetFileInfoNoThrow; I'm wondering if GetFullPathNoThrow might have a similar problem, though we don't actually have to crack open the file, so maybe not.)",
              "createdAt": "2023-03-27T18:56:23Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))\n+                {\n+                    doc.Load(reader);\n+                }\n+            }\n+\n+            // Example:\n+            //\n+            // <SolutionConfiguration>\n+            //  <ProjectConfiguration Project=\"{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}\" AbsolutePath=\"c:foo\\Project1\\A.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{881C1674-4ECA-451D-85B6-D7C59B7F16FA}\" AbsolutePath=\"c:foo\\Project2\\B.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU<ProjectDependency Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" /></ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" AbsolutePath=\"c:foo\\Project3\\C.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            // </SolutionConfiguration>\n+            //\n+            if (doc?.DocumentElement != null)\n+            {\n+                foreach (XmlElement xmlElement in doc.DocumentElement.ChildNodes)\n+                {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, it's so that the xml can be parsed just once. I'm not sure where laziness would add much since the `SolutionConfiguration` shouldn't be created at all if it won't be used.",
              "createdAt": "2023-03-27T20:48:54Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))\n+                {\n+                    doc.Load(reader);\n+                }\n+            }\n+\n+            // Example:\n+            //\n+            // <SolutionConfiguration>\n+            //  <ProjectConfiguration Project=\"{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}\" AbsolutePath=\"c:foo\\Project1\\A.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{881C1674-4ECA-451D-85B6-D7C59B7F16FA}\" AbsolutePath=\"c:foo\\Project2\\B.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU<ProjectDependency Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" /></ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" AbsolutePath=\"c:foo\\Project3\\C.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            // </SolutionConfiguration>\n+            //\n+            if (doc?.DocumentElement != null)\n+            {\n+                foreach (XmlElement xmlElement in doc.DocumentElement.ChildNodes)\n+                {",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "I guess where I got confused is that the previous ProjectCacheService version didn't do this early caching of parsed information step, yet it still looks like it just used fast access methods. Are things like `node.Attributes![\"BuildProjectInSolution\"]` secretly a slow linear search?",
              "createdAt": "2023-03-27T22:04:05Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))\n+                {\n+                    doc.Load(reader);\n+                }\n+            }\n+\n+            // Example:\n+            //\n+            // <SolutionConfiguration>\n+            //  <ProjectConfiguration Project=\"{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}\" AbsolutePath=\"c:foo\\Project1\\A.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{881C1674-4ECA-451D-85B6-D7C59B7F16FA}\" AbsolutePath=\"c:foo\\Project2\\B.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU<ProjectDependency Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" /></ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" AbsolutePath=\"c:foo\\Project3\\C.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            // </SolutionConfiguration>\n+            //\n+            if (doc?.DocumentElement != null)\n+            {\n+                foreach (XmlElement xmlElement in doc.DocumentElement.ChildNodes)\n+                {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It didn't do this caching, but as this is a 1-time thing for initialization, I'm not sure it really matters too much in practice.\r\n\r\nI'll expose this part as a static method to avoid the extra allocation while still getting the code sharing.",
              "createdAt": "2023-03-27T22:34:07Z",
              "path": "src/Shared/SolutionConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,127 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.IO;\n+using System.Xml;\n+\n+namespace Microsoft.Build.Shared\n+{\n+    internal sealed class SolutionConfiguration\n+    {\n+        private const string AttributeProject = \"Project\";\n+\n+        private const string AttributeAbsolutePath = \"AbsolutePath\";\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project guid\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElements = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores pre-cached project elements for project guids for quicker access by project absolute path\n+        private readonly Dictionary<string, XmlElement> _cachedProjectElementsByAbsolutePath = new Dictionary<string, XmlElement>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project absolute path for quicker access by project guid\n+        private readonly Dictionary<string, string> _cachedProjectAbsolutePathsByGuid = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the project guid for quicker access by project absolute path\n+        private readonly Dictionary<string, string> _cachedProjectGuidsByAbsolutePath = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n+        // This field stores the list of dependency project guids by depending project guid\n+        private readonly Dictionary<string, List<string>> _cachedDependencyProjectGuidsByDependingProjectGuid = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);\n+\n+        public SolutionConfiguration(string xmlString)\n+        {\n+            XmlDocument? doc = null;\n+\n+            if (!string.IsNullOrEmpty(xmlString))\n+            {\n+                doc = new XmlDocument();\n+                var settings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+                using (XmlReader reader = XmlReader.Create(new StringReader(xmlString), settings))\n+                {\n+                    doc.Load(reader);\n+                }\n+            }\n+\n+            // Example:\n+            //\n+            // <SolutionConfiguration>\n+            //  <ProjectConfiguration Project=\"{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}\" AbsolutePath=\"c:foo\\Project1\\A.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{881C1674-4ECA-451D-85B6-D7C59B7F16FA}\" AbsolutePath=\"c:foo\\Project2\\B.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU<ProjectDependency Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" /></ProjectConfiguration>\n+            //  <ProjectConfiguration Project=\"{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}\" AbsolutePath=\"c:foo\\Project3\\C.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\n+            // </SolutionConfiguration>\n+            //\n+            if (doc?.DocumentElement != null)\n+            {\n+                foreach (XmlElement xmlElement in doc.DocumentElement.ChildNodes)\n+                {",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}