{
  "number": 9735,
  "title": "Analyzers prototype proposal",
  "body": "### Context\r\n\r\nInitial prototype of Analyzers/BuildCop project.\r\nIt's currently hidden behind a feature-flag in form of an explicit commandline argument\r\n\r\n### Design Doc\r\nhttps://github.com/dotnet/msbuild/pull/9853\r\n",
  "state": "MERGED",
  "createdAt": "2024-02-13T19:02:09Z",
  "updatedAt": "2025-03-20T15:42:47Z",
  "closedAt": "2024-04-15T18:57:01Z",
  "mergedAt": "2024-04-15T18:57:01Z",
  "additions": 3010,
  "deletions": 63,
  "changedFiles": 77,
  "headRefName": "exp/build-analyzers",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a59fe1e1ba7394a72aef92b6bacee0e2240b4de4",
          "message": "Initial demonstration version",
          "committedDate": "2024-02-20T14:04:15Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "628394dd0cd40fd187fffe70ce0f8a987c776bb8",
          "message": "Make analyzer test use bootstrap properly (#9733)",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59ab931843eaa81145f590fd25ce8338e877f546",
          "message": "Hook analyzers stats stub",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "92e3795badecd4b5c8f44643c4a5a3bd17624c87",
          "message": "Fix unit tests by explicitly opting into analysis",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33c4d2e1671b69671af7f94dfc34bcdbcb3be488",
          "message": "Disable build acceleration for MSBuild.Bootstrap",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b37e4957a8c4cf536c3d37dd2e8bf99b0c8569a5",
          "message": "Make EndToEndTests disposable",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2db509fa6470841d395d311202f1b22f4f4210eb",
          "message": "Support running Analyzers.UnitTests from stage1",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4cdd9037e5a5b0fce48d3170ec1974ea4c183198",
          "message": "Fix MSBuild.dll casing",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05450bb3c439526af4e23015ecd59c15cbbc10fa",
          "message": "Don't run netfx Analyzer.UnitTests in Windows Core builds",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e12ef07b6e693e2f6f4c3394b90a3e4a8e0d827",
          "message": "Fix Analyzers.UnitTests on Mac",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fdda2cd5694dadb729b26a12e86ed5ae718f1c25",
          "message": "Renaming changes",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72749c4bea44a32a597ab781f2fa9341c6877f48",
          "message": "Renaming for clarity (#9754)",
          "committedDate": "2024-02-20T14:07:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "93141216d60beaf2517ed718eb0a71ec6e5b3cf5",
          "message": "Removing unnecessary types",
          "committedDate": "2024-02-20T14:07:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "886c483721408fd2e27ba45d5b98db72d7f3d62c",
          "message": "Code move",
          "committedDate": "2024-02-20T14:48:04Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60e01a7c955e134bdffc958e2a0c97eaeeb00d24",
          "message": "Adjust namespaces",
          "committedDate": "2024-02-20T15:00:45Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b474fa12e159f1d573b50689e25593d6c7309983",
          "message": "Simplify TestEnvironments in EndToEndTests",
          "committedDate": "2024-02-21T09:57:06Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac76b77ef77a47d0926d214c3310ce46b10acb4a",
          "message": "Support for per-project configuration, Acquisition mounting, etc",
          "committedDate": "2024-02-28T14:45:49Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0467261a12db78679974ba354e1650e4bd0c385b",
          "message": "Add more comments",
          "committedDate": "2024-02-28T16:52:17Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f9d94192a42441942c443ba43bbefa49ec9b06a",
          "message": "Grace handle double initialization attempts",
          "committedDate": "2024-02-29T11:13:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40dd6e01abf4fb873c7a514af55f259a3db6798f",
          "message": "Fix tests",
          "committedDate": "2024-02-29T13:16:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bddef4cd1f7c6b0e3b772437840ade284f9466f5",
          "message": "Troubleshoot test, comment",
          "committedDate": "2024-02-29T17:45:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "296faa9688adf1578ec871f7964bf3340c88fd64",
          "message": "Reflect PR comments",
          "committedDate": "2024-03-01T18:22:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f873eda39fa323875dd91307f6baf530210cedd8",
          "message": "Fix build",
          "committedDate": "2024-03-01T20:28:27Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3db5e97f2886f2ca7b450285ce0061d69faba86a",
          "message": "Fix build - proper multitargeting on core builds",
          "committedDate": "2024-03-05T14:03:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "602177126b5c147573729b59ce184c0343e023e4",
          "message": "Adjust API naming and exposure",
          "committedDate": "2024-03-12T13:04:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72f2d519f1cd6170f390351a2b9001b395d2c8d0",
          "message": "Merge branch 'main' into exp/build-analyzers",
          "committedDate": "2024-03-18T13:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "178907fb4672985268dba16314e33c88bbf08bf3",
          "message": "Add forgotten acquisition data sending",
          "committedDate": "2024-03-18T14:58:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e178918c282e5205814fa0a23ec483716a21919b",
          "message": "Renaming BuildCop to BuildCheck (#9893)\n\nWe decided to rename the analyzer project from BuildCop to BuildCheck. This PR is just reflecting that on the code.",
          "committedDate": "2024-03-19T12:53:36Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0892e86c1a3729d97f10d48c01ea48f401aa9cec",
          "message": "Renamed a few files missed (#9900)",
          "committedDate": "2024-03-21T13:49:46Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31a2a0ee38223acd7ff19a638923bd227352ea7b",
          "message": "Add template for custom analyzers (#9789)",
          "committedDate": "2024-03-25T12:55:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d710e004a44d2d57606b62d78f5ea7ae26feedad",
          "message": "Merge branch 'main' into exp/build-analyzers",
          "committedDate": "2024-03-25T21:45:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5fab936eeb1a112eb4fb3e611818d33d70238903",
          "message": "Run tests against just-built bootstrap environment",
          "committedDate": "2024-04-03T09:04:05Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b5b92502dc09e881fb8c167c102e4122946a00f",
          "message": "Reflecting PR comments",
          "committedDate": "2024-04-04T14:29:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d97a6118caf9a2a07277706f9d1de6d45fced589",
          "message": "Add test without analysis",
          "committedDate": "2024-04-04T16:51:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e18f00ff47e93fb9f0edbeccdfa20ca21e62eb89",
          "message": "Rename tests project",
          "committedDate": "2024-04-04T16:56:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "368cb08fa02f125382896ad8a4abefcac182cf85",
          "message": "Force case renaming",
          "committedDate": "2024-04-04T17:45:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7025f3a4fc43a4fe856293d523399e571dff3e3a",
          "message": "Simplify GlobalInstance initialization",
          "committedDate": "2024-04-05T09:16:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aeb41072668d679693ac454553c88368fddef262",
          "message": "Remove multiple registrations checking",
          "committedDate": "2024-04-05T12:03:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01510e2df40b98d0ed1453bbd1aa0dff3e453aa2",
          "message": "Reflect on PR feedback",
          "committedDate": "2024-04-05T15:59:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d7c4c635287a08e383a4f4486d7c4e949327a9e",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-04-05T16:01:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25b5f75df908bf749b1283d76b37996c6a02bb67",
          "message": "Reflect on PR comments",
          "committedDate": "2024-04-05T16:03:55Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aaaafccae7ea79994554c2d04b606956f2ee58e4",
          "message": "Update src/Build/BuildCheck/API/BuildAnalyzerRule.cs\n\nCo-authored-by: Farhad Alizada <104755925+f-alizada@users.noreply.github.com>",
          "committedDate": "2024-04-10T13:47:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf29add1d3d61f89addbbb851b511841dfe45266",
          "message": "Reflect PR comments",
          "committedDate": "2024-04-10T16:14:56Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "402f490c1b926611161dac49f3e067e20fe389d5",
          "message": "Merge branch 'exp/build-analyzers' of https://github.com/dotnet/msbuild into exp/build-analyzers",
          "committedDate": "2024-04-10T16:14:59Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I have left some comments. I'll do another round on the code. I have couple of questions:\r\n> \r\n> * It it planned to wait for the configuration provider to be merged or not?\r\n\r\nNo. Merging them separately would decrease the blast radius for possibly interferring with unrelated features.\r\n\r\n> * Is it possible to add tests that verifies that only mocked buildckeck is used when buildcheck is not requested from command line?\r\n\r\nSure - good idea (**Edit:** done)",
        "createdAt": "2024-04-03T10:40:41Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Looks good to me! \r\nI feel like it's time to merge it and address any issues in dedicated areas ;)",
        "createdAt": "2024-04-11T13:08:14Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "[celebrate]     Yuliia Kovalova reacted to your message:\r\n________________________________\r\nFrom: Jan Krivanek ***@***.***>\r\nSent: Monday, April 15, 2024 6:57:24 PM\r\nTo: dotnet/msbuild ***@***.***>\r\nCc: Yuliia Kovalova ***@***.***>; Review requested ***@***.***>\r\nSubject: Re: [dotnet/msbuild] Analyzers prototype proposal (PR #9735)\r\n\r\n\r\nMerged #9735<https://github.com/dotnet/msbuild/pull/9735> into main.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/msbuild/pull/9735#event-12475837887>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AWYM53RP6JZY6LRJGTPQPVTY5QPJJAVCNFSM6AAAAABDHA4YWOVHI2DSMVQWIX3LMV45UABCJFZXG5LFIV3GK3TUJZXXI2LGNFRWC5DJN5XDWMJSGQ3TKOBTG44DQNY>.\r\nYou are receiving this because your review was requested.Message ID: ***@***.***>\r\n",
        "createdAt": "2024-04-15T19:22:16Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it makes sense for in-box analyzers to ship in its own assembly but why would the API not be added to existing assemblies?",
              "createdAt": "2024-02-16T12:56:17Z",
              "path": "src/Analyzers/Microsoft.Build.Analyzers.csproj",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MonoBuild)'=='true'\">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>\n+    <RootNamespace>Microsoft.Build.Analyzers</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers</AssemblyName>\n+    <PackageDescription>This package contains the $(AssemblyName) assembly which contains build analyzers logic and API.</PackageDescription>",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I wanted (for customers) to have only relevant API being brought by referencing our assembly when authoring analyzers. Plus for us - to minimize creep of unwanted internal dependencies.\r\n\r\nAre ther any performance or other concerns? If yes - we might as well just put it in separate namespace under Experimental, while still keeping in Microsoft.Build assembly",
              "createdAt": "2024-02-20T12:04:36Z",
              "path": "src/Analyzers/Microsoft.Build.Analyzers.csproj",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MonoBuild)'=='true'\">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>\n+    <RootNamespace>Microsoft.Build.Analyzers</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers</AssemblyName>\n+    <PackageDescription>This package contains the $(AssemblyName) assembly which contains build analyzers logic and API.</PackageDescription>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "There is a small perf concern, specifically in VS where an extra assembly load will be detected by PerfDDRITs. But the bigger concern IMO is that the set of MSBuild assemblies is well-known and adding a new one creates a ripple effect throughout the ecosystem. If there is not a strong reason for a separate assembly, I think that using a separate namespace in Microsoft.Build would save us a significant amount of work.",
              "createdAt": "2024-02-20T12:28:29Z",
              "path": "src/Analyzers/Microsoft.Build.Analyzers.csproj",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MonoBuild)'=='true'\">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>\n+    <RootNamespace>Microsoft.Build.Analyzers</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers</AssemblyName>\n+    <PackageDescription>This package contains the $(AssemblyName) assembly which contains build analyzers logic and API.</PackageDescription>",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "That is a fair concern.\r\n\r\nLet's try to watch for the buildup of unnecessary tight coupling with the Microsoft.Build internals then",
              "createdAt": "2024-02-20T12:38:43Z",
              "path": "src/Analyzers/Microsoft.Build.Analyzers.csproj",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFrameworks>$(FullFrameworkTFM);$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MonoBuild)'=='true'\">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>\n+    <RootNamespace>Microsoft.Build.Analyzers</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers</AssemblyName>\n+    <PackageDescription>This package contains the $(AssemblyName) assembly which contains build analyzers logic and API.</PackageDescription>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would not include this until we know we need it and have a good understanding of the expected \"normal\" performance.",
              "createdAt": "2024-02-16T12:58:01Z",
              "path": "src/Analyzers/API/PerformanceWeightClass.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental;\n+\n+public enum PerformanceWeightClass",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Correct - very irelevant now. I'll go through the settings and clear unnecessary stuff",
              "createdAt": "2024-02-20T12:05:22Z",
              "path": "src/Analyzers/API/PerformanceWeightClass.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental;\n+\n+public enum PerformanceWeightClass",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wouldn't include this. Let's define a reasonable programming model and mandate analyzers to be thread-safe. If really deemed important we can provide a synchronized wrapper/helper for analyzer authors to use if they don't want to think about concurrency.",
              "createdAt": "2024-02-16T13:06:44Z",
              "path": "src/Analyzers/API/InvocationConcurrency.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental;\n+\n+public enum InvocationConcurrency",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is an SDK thing. I understand the convenience it's adding but it I would not expose it from here.",
              "createdAt": "2024-02-16T13:15:19Z",
              "path": "src/Analyzers/OM/ParsedItemsContext.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Construction;\n+\n+namespace Microsoft.Build.Experimental;\n+public enum ItemType",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "?",
              "createdAt": "2024-02-20T18:57:28Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "@@ -108,7 +109,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o\n                 p.BeginErrorReadLine();\n                 p.StandardInput.Dispose();\n \n-                if (!p.WaitForExit(30_000))\n+                if (!p.WaitForExit(30_000_000))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Testing leftover.\r\nBtw. do we have any dev-env recommended env-var?\r\nIt allways bits me when I'm investigating something and then suddenly the repro is killed - would love to have it long-lived \"when debugging\".",
              "createdAt": "2024-02-28T14:51:29Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "@@ -108,7 +109,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o\n                 p.BeginErrorReadLine();\n                 p.StandardInput.Dispose();\n \n-                if (!p.WaitForExit(30_000))\n+                if (!p.WaitForExit(30_000_000))",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Added `MSBuildDebugUnitTests`",
              "createdAt": "2024-03-01T17:36:50Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "@@ -108,7 +109,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o\n                 p.BeginErrorReadLine();\n                 p.StandardInput.Dispose();\n \n-                if (!p.WaitForExit(30_000))\n+                if (!p.WaitForExit(30_000_000))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit (for now): I'm pretty skittish about using immutable collections in our public API because of the awful cast errors we'll get if there's a mismatch.",
              "createdAt": "2024-02-20T20:08:33Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Immutable;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public abstract class BuildAnalyzer\n+{\n+    public abstract string FriendlyName { get; }\n+    public abstract ImmutableArray<BuildAnalyzerRule> SupportedRules { get; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`IReadOnlyList` should suffice here",
              "createdAt": "2024-02-28T14:52:38Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Immutable;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public abstract class BuildAnalyzer\n+{\n+    public abstract string FriendlyName { get; }\n+    public abstract ImmutableArray<BuildAnalyzerRule> SupportedRules { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's a bit unorthodox to import a `.props` from a `.targets`--generally the convention is that `.props` are imported before the main body of the project.",
              "createdAt": "2024-02-20T20:09:39Z",
              "path": "eng/BootStrapMSBuild.targets",
              "diffHunk": "@@ -1,21 +1,22 @@\n <Project>\n \n+  <Import Project=\"BootStrapMSBuild.props\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels weird to me. Why can't the tests use the just-built bootstrap in the `cibuild_` case just like they do in non-bootstrapped scenarios?",
              "createdAt": "2024-02-20T20:10:43Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -112,6 +112,9 @@ try {\n   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900\n   $env:DOTNET_PERFLOG_DIR=$PerfLogDir\n \n+  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.\n+  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "CI build moves the artifacts directory somewhere else before using the just-built bin\\bootstrap to build and test the repo. We need a way for tests to find bootstrap, hence this environment variable. Are you suggesting to do the second build without `/p:CreateBootstrap=false` so it also builds the bootstrap environment? I guess if the goal is to run tests on msbuild-built-by-msbuild, then that's what we want \ud83d\udca1",
              "createdAt": "2024-02-21T08:03:00Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -112,6 +112,9 @@ try {\n   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900\n   $env:DOTNET_PERFLOG_DIR=$PerfLogDir\n \n+  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.\n+  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I have removed this and instead flipped `CreateBootstrap` to `true` in stage 2 builds so that tests run against the just-built bootstrap. Thank you!",
              "createdAt": "2024-04-03T09:06:07Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -112,6 +112,9 @@ try {\n   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900\n   $env:DOTNET_PERFLOG_DIR=$PerfLogDir\n \n+  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.\n+  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We have this now: #9420.",
              "createdAt": "2024-02-20T20:12:14Z",
              "path": "src/Analyzers.UnitTests/BootstrapRunner.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests.Shared;\n+using Xunit.Abstractions;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    internal static class BootstrapRunner\n+    {\n+        // This should ideally be part of RunnerUtilities - however then we'd need to enforce\n+        //  all test projects to import the BootStrapMSBuild.props file and declare the BootstrapLocationAttribute.\n+        // Better solution would be to have a single test utility project - instead of linked code files.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Moved the functionality there",
              "createdAt": "2024-03-01T18:00:07Z",
              "path": "src/Analyzers.UnitTests/BootstrapRunner.cs",
              "diffHunk": "@@ -0,0 +1,48 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests.Shared;\n+using Xunit.Abstractions;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    internal static class BootstrapRunner\n+    {\n+        // This should ideally be part of RunnerUtilities - however then we'd need to enforce\n+        //  all test projects to import the BootStrapMSBuild.props file and declare the BootstrapLocationAttribute.\n+        // Better solution would be to have a single test utility project - instead of linked code files.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I mentioned this in another context but I really want to avoid the name `BuildCop`. It's been used at least twice before, and the one that's integrated with CloudBuild is in very broad use internally at Microsoft.",
              "createdAt": "2024-02-20T20:18:11Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=54790857",
              "createdAt": "2024-02-28T15:30:56Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Possible to avoid having three copies of this strewn about the repo?",
              "createdAt": "2024-02-20T20:21:30Z",
              "path": "src/UnitTests.Shared/IsExternalInit.cs",
              "diffHunk": "@@ -0,0 +1,7 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace System.Runtime.CompilerServices\n+{\n+    internal static class IsExternalInit { }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What does this level mean concretely? I'm not sure I understand the \"Sdk\" distinction.",
              "createdAt": "2024-02-20T20:24:52Z",
              "path": "src/Build/BuildCop/API/EvaluationAnalysisScope.cs",
              "diffHunk": "@@ -0,0 +1,12 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum EvaluationAnalysisScope\n+{\n+    AnalyzedProjectOnly,\n+    AnalyzedProjectWithImportsFromCurrentWorkTree,\n+    AnalyzedProjectWithImportsWithoutSdks,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I've added the comments - please have a look if those values feel understandable, correct and needed",
              "createdAt": "2024-03-01T18:06:46Z",
              "path": "src/Build/BuildCop/API/EvaluationAnalysisScope.cs",
              "diffHunk": "@@ -0,0 +1,12 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum EvaluationAnalysisScope\n+{\n+    AnalyzedProjectOnly,\n+    AnalyzedProjectWithImportsFromCurrentWorkTree,\n+    AnalyzedProjectWithImportsWithoutSdks,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know it's early but I don't understand these and would appreciate doc comments.",
              "createdAt": "2024-02-20T20:25:17Z",
              "path": "src/Build/BuildCop/API/LifeTimeScope.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum LifeTimeScope\n+{\n+    Stateless,\n+    PerProject,\n+    PerBuild,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Removed altogether for now",
              "createdAt": "2024-03-01T18:07:01Z",
              "path": "src/Build/BuildCop/API/LifeTimeScope.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum LifeTimeScope\n+{\n+    Stateless,\n+    PerProject,\n+    PerBuild,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the use case for this restriction?",
              "createdAt": "2024-02-20T20:25:59Z",
              "path": "src/Build/BuildCop/API/EvaluationAnalysisScope.cs",
              "diffHunk": "@@ -0,0 +1,12 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum EvaluationAnalysisScope\n+{\n+    AnalyzedProjectOnly,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/9735#discussion_r1509364381",
              "createdAt": "2024-03-01T18:07:29Z",
              "path": "src/Build/BuildCop/API/EvaluationAnalysisScope.cs",
              "diffHunk": "@@ -0,0 +1,12 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum EvaluationAnalysisScope\n+{\n+    AnalyzedProjectOnly,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this what we want? Don't we want this to be highly user-configurable?",
              "createdAt": "2024-02-20T20:27:30Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum BuildAnalyzerResultSeverity\n+{\n+    Info,\n+    Warning,\n+    Error,\n+}",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'd strongly vote for prescribed categories here. Similar to regular MSBuild messages/errors/warnings, similar to https://github.com/dotnet/roslyn/blob/main/src/Features/LanguageServer/Protocol/Protocol/DiagnosticSeverity.cs\r\nBut I'm obviously oblivious to some usage patterns you might have in mind - can you help me by a sample scenario where those might not be sufficient?",
              "createdAt": "2024-02-22T14:21:15Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzerResultSeverity.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public enum BuildAnalyzerResultSeverity\n+{\n+    Info,\n+    Warning,\n+    Error,\n+}",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Manually calling `TransientTestState.Revert()` is not what I expect--should you have a private test environment in a `using` instead?",
              "createdAt": "2024-02-20T20:30:32Z",
              "path": "src/Analyzers.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -0,0 +1,136 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    public class EndToEndTests : IDisposable\n+    {\n+        private readonly TestEnvironment _env;\n+        public EndToEndTests(ITestOutputHelper output)\n+        {\n+            _env = TestEnvironment.Create(output);\n+\n+            // this is needed to ensure the binary logger does not pollute the environment\n+            _env.WithEnvironmentInvariant();\n+        }\n+\n+        public void Dispose() => _env.Dispose();\n+\n+        [Fact]\n+        public void SampleAnalyzerIntegrationTest()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                string contents = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n+                    \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                      \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                     \n+                      <ItemGroup>\n+                        <ProjectReference Include=\".\\FooBar-Copy.csproj\" />\n+                      </ItemGroup>\n+                      \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                    \n+                    </Project>\n+                    \"\"\";\n+\n+                string contents2 = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\">\n+                                   \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                                     \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                                    \n+                      <ItemGroup>\n+                        <Reference Include=\"bin/foo.dll\" />\n+                      </ItemGroup>\n+                                    \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                                   \n+                    </Project>\n+                    \"\"\";\n+                TransientTestFolder workFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n+                TransientTestFile projectFile2 = env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n+\n+                // var cache = new SimpleProjectRootElementCache();\n+                // ProjectRootElement xml = ProjectRootElement.OpenProjectOrSolution(projectFile.Path, /*unused*/null, /*unused*/null, cache, false /*Not explicitly loaded - unused*/);\n+\n+\n+                TransientTestFile config = env.CreateFile(workFolder, \"editorconfig.json\",\n+                    /*lang=json,strict*/\n+                    \"\"\"\n+                    {\n+                        \"BC0101\": {\n+                            \"IsEnabled\": true,\n+                            \"Severity\": \"Error\"\n+                        },\n+                        \"COND0543\": {\n+                            \"IsEnabled\": false,\n+                            \"Severity\": \"Error\",\n+                    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+                    \t\t\"CustomSwitch\": \"QWERTY\"\n+                        },\n+                        \"BLA\": {\n+                            \"IsEnabled\": false\n+                        }\n+                    }\n+                    \"\"\");\n+\n+                // OSX links /var into /private, which makes Path.GetTempPath() return \"/var...\" but Directory.GetCurrentDirectory return \"/private/var...\".\n+                // This discrepancy breaks path equality checks in analyzers if we pass to MSBuild full path to the initial project.\n+                // TODO: See if there is a way of fixing it in the engine.\n+                TransientTestState testState = _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));\n+                try\n+                {\n+                    // env.SetEnvironmentVariable(\"MSBUILDNOINPROCNODE\", \"1\");\n+                    env.SetEnvironmentVariable(\"MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION\", \"1\");\n+                    // string output = RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m:1 -nr:False\", out bool success);\n+                    string output = BootstrapRunner.ExecBootstrapedMSBuild($\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success);\n+                    _env.Output.WriteLine(output);\n+                    success.ShouldBeTrue();\n+                    // The conflicting outputs warning appears\n+                    output.ShouldContain(\"BC0101\");\n+                }\n+                finally\n+                {\n+                    testState.Revert();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Totally. Pushing a fix.",
              "createdAt": "2024-02-21T10:12:51Z",
              "path": "src/Analyzers.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -0,0 +1,136 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    public class EndToEndTests : IDisposable\n+    {\n+        private readonly TestEnvironment _env;\n+        public EndToEndTests(ITestOutputHelper output)\n+        {\n+            _env = TestEnvironment.Create(output);\n+\n+            // this is needed to ensure the binary logger does not pollute the environment\n+            _env.WithEnvironmentInvariant();\n+        }\n+\n+        public void Dispose() => _env.Dispose();\n+\n+        [Fact]\n+        public void SampleAnalyzerIntegrationTest()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                string contents = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n+                    \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                      \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                     \n+                      <ItemGroup>\n+                        <ProjectReference Include=\".\\FooBar-Copy.csproj\" />\n+                      </ItemGroup>\n+                      \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                    \n+                    </Project>\n+                    \"\"\";\n+\n+                string contents2 = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\">\n+                                   \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                                     \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                                    \n+                      <ItemGroup>\n+                        <Reference Include=\"bin/foo.dll\" />\n+                      </ItemGroup>\n+                                    \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                                   \n+                    </Project>\n+                    \"\"\";\n+                TransientTestFolder workFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n+                TransientTestFile projectFile2 = env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n+\n+                // var cache = new SimpleProjectRootElementCache();\n+                // ProjectRootElement xml = ProjectRootElement.OpenProjectOrSolution(projectFile.Path, /*unused*/null, /*unused*/null, cache, false /*Not explicitly loaded - unused*/);\n+\n+\n+                TransientTestFile config = env.CreateFile(workFolder, \"editorconfig.json\",\n+                    /*lang=json,strict*/\n+                    \"\"\"\n+                    {\n+                        \"BC0101\": {\n+                            \"IsEnabled\": true,\n+                            \"Severity\": \"Error\"\n+                        },\n+                        \"COND0543\": {\n+                            \"IsEnabled\": false,\n+                            \"Severity\": \"Error\",\n+                    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+                    \t\t\"CustomSwitch\": \"QWERTY\"\n+                        },\n+                        \"BLA\": {\n+                            \"IsEnabled\": false\n+                        }\n+                    }\n+                    \"\"\");\n+\n+                // OSX links /var into /private, which makes Path.GetTempPath() return \"/var...\" but Directory.GetCurrentDirectory return \"/private/var...\".\n+                // This discrepancy breaks path equality checks in analyzers if we pass to MSBuild full path to the initial project.\n+                // TODO: See if there is a way of fixing it in the engine.\n+                TransientTestState testState = _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));\n+                try\n+                {\n+                    // env.SetEnvironmentVariable(\"MSBUILDNOINPROCNODE\", \"1\");\n+                    env.SetEnvironmentVariable(\"MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION\", \"1\");\n+                    // string output = RunnerUtilities.ExecMSBuild($\"{projectFile.Path} /m:1 -nr:False\", out bool success);\n+                    string output = BootstrapRunner.ExecBootstrapedMSBuild($\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyze\", out bool success);\n+                    _env.Output.WriteLine(output);\n+                    success.ShouldBeTrue();\n+                    // The conflicting outputs warning appears\n+                    output.ShouldContain(\"BC0101\");\n+                }\n+                finally\n+                {\n+                    testState.Revert();",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ah, that's unfortunate. Completely fine for now but let's file a bug for follow-up?",
              "createdAt": "2024-02-20T20:31:27Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "#9767\r\nIt almost looks like we should not be trying to create a net472 bootstrap when building with .NET SDK because the required files are simply not there. For example, VS and SDK have diverged when it comes to SDK resolvers (`Microsoft.DotNet.MSBuildSdkResolver` vs `Microsoft.NET.Sdk.WorkloadMSBuildSdkResolver`).",
              "createdAt": "2024-02-21T08:40:20Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What does this do?",
              "createdAt": "2024-02-20T20:31:54Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->\n+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MSBuildRuntimeType)' == 'Full'\">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>\n+\n+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>\n+    <IsPackable>false</IsPackable>\n+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n+    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\Build\\Microsoft.Build.csproj\" />\n+    <ProjectReference Include=\"..\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj\" />\n+    <ProjectReference Include=\"..\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap\\MSBuild.Bootstrap.csproj\">\n+      <Private>false</Private>\n+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"System.Collections.Immutable\" />\n+    <PackageReference Include=\"FluentAssertions\" />\n+    <PackageReference Include=\"Microsoft.IO.Redist\" Condition=\"'$(FeatureMSIORedist)' == 'true'\" />\n+    <PackageReference Include=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" PrivateAssets=\"all\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />\n+    <PackageReference Include=\"Shouldly\" />\n+    <PackageReference Include=\"System.Net.Http\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's a marker to help Test Explorer recognize the project as a unit test. It's _probably_ not needed anymore, though we have it in all UT projects still.",
              "createdAt": "2024-02-21T08:12:55Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->\n+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MSBuildRuntimeType)' == 'Full'\">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>\n+\n+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>\n+    <IsPackable>false</IsPackable>\n+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n+    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\Build\\Microsoft.Build.csproj\" />\n+    <ProjectReference Include=\"..\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj\" />\n+    <ProjectReference Include=\"..\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap\\MSBuild.Bootstrap.csproj\">\n+      <Private>false</Private>\n+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"System.Collections.Immutable\" />\n+    <PackageReference Include=\"FluentAssertions\" />\n+    <PackageReference Include=\"Microsoft.IO.Redist\" Condition=\"'$(FeatureMSIORedist)' == 'true'\" />\n+    <PackageReference Include=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" PrivateAssets=\"all\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />\n+    <PackageReference Include=\"Shouldly\" />\n+    <PackageReference Include=\"System.Net.Http\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Aren't these inferred?",
              "createdAt": "2024-02-20T20:32:25Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->\n+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MSBuildRuntimeType)' == 'Full'\">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>\n+\n+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>\n+    <IsPackable>false</IsPackable>\n+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n+    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm surprised to see these; I'd expect them to flow from product code somehow if they're necessary. Are they not?",
              "createdAt": "2024-02-20T20:33:26Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->\n+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MSBuildRuntimeType)' == 'Full'\">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>\n+\n+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>\n+    <IsPackable>false</IsPackable>\n+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n+    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\Build\\Microsoft.Build.csproj\" />\n+    <ProjectReference Include=\"..\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj\" />\n+    <ProjectReference Include=\"..\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap\\MSBuild.Bootstrap.csproj\">\n+      <Private>false</Private>\n+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"System.Collections.Immutable\" />\n+    <PackageReference Include=\"FluentAssertions\" />\n+    <PackageReference Include=\"Microsoft.IO.Redist\" Condition=\"'$(FeatureMSIORedist)' == 'true'\" />\n+    <PackageReference Include=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" PrivateAssets=\"all\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we pick one of Fluent and Shouldly? They are pretty similar . . .",
              "createdAt": "2024-02-20T20:34:42Z",
              "path": "src/Analyzers.UnitTests/Microsoft.Build.Analyzers.UnitTests.csproj",
              "diffHunk": "@@ -0,0 +1,92 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <Import Project=\"..\\Shared\\FileSystemSources.proj\" />\n+  <Import Project=\"..\\Shared\\DebuggingSources.proj\" />\n+\n+  <PropertyGroup>\n+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->\n+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>\n+    <TargetFrameworks Condition=\"'$(MSBuildRuntimeType)' == 'Full'\">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>\n+\n+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>\n+    <IsPackable>false</IsPackable>\n+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>\n+    <RootNamespace>Microsoft.Build.Analyzers.UnitTests</RootNamespace>\n+    <AssemblyName>Microsoft.Build.Analyzers.UnitTests</AssemblyName>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <ProjectReference Include=\"..\\Build\\Microsoft.Build.csproj\" />\n+    <ProjectReference Include=\"..\\UnitTests.Shared\\Microsoft.Build.UnitTests.Shared.csproj\" />\n+    <ProjectReference Include=\"..\\Xunit.NetCore.Extensions\\Xunit.NetCore.Extensions.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap\\MSBuild.Bootstrap.csproj\">\n+      <Private>false</Private>\n+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\n+    </ProjectReference>\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"System.Collections.Immutable\" />\n+    <PackageReference Include=\"FluentAssertions\" />\n+    <PackageReference Include=\"Microsoft.IO.Redist\" Condition=\"'$(FeatureMSIORedist)' == 'true'\" />\n+    <PackageReference Include=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" PrivateAssets=\"all\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />\n+    <PackageReference Include=\"Shouldly\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What are our threading guarantees on calling the analyzers? As written we'd have to call this analyzer single-threaded to avoid races on this dictionary, right?",
              "createdAt": "2024-02-20T21:16:13Z",
              "path": "src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.IO;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCop;\n+\n+namespace Microsoft.Build.BuildCop.Analyzers;\n+\n+// Some background on ids:\n+//  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+//  * https://github.com/dotnet/roslyn/issues/40351\n+//\n+// quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override ImmutableArray<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCopContext context)\n+    {\n+        context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We don't want to give any guarantees about concurrency models externally... but - for the internal analyzer on top of the BuildEventArgs, we can currently count on single-threaded execution (it just mounts to the standard BuildEventArgs delivery)",
              "createdAt": "2024-03-01T18:21:43Z",
              "path": "src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.IO;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCop;\n+\n+namespace Microsoft.Build.BuildCop.Analyzers;\n+\n+// Some background on ids:\n+//  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+//  * https://github.com/dotnet/roslyn/issues/40351\n+//\n+// quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override ImmutableArray<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCopContext context)\n+    {\n+        context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Implemented this way, won't the error potentially move around between builds, depending on which project finishes evaluation first?",
              "createdAt": "2024-02-20T21:32:30Z",
              "path": "src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.IO;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCop;\n+\n+namespace Microsoft.Build.BuildCop.Analyzers;\n+\n+// Some background on ids:\n+//  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+//  * https://github.com/dotnet/roslyn/issues/40351\n+//\n+// quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override ImmutableArray<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCopContext context)\n+    {\n+        context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);\n+    private readonly HashSet<string> _projects = new(StringComparer.CurrentCultureIgnoreCase);\n+\n+    private void EvaluatedPropertiesAction(EvaluatedPropertiesContext context)\n+    {\n+        if (!_projects.Add(context.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        string? binPath, objPath;\n+\n+        context.EvaluatedProperties.TryGetValue(\"OutputPath\", out binPath);\n+        context.EvaluatedProperties.TryGetValue(\"IntermediateOutputPath\", out objPath);\n+\n+        string? absoluteBinPath = CheckAndAddFullOutputPath(binPath, context);\n+        if (\n+            !string.IsNullOrEmpty(objPath) && !string.IsNullOrEmpty(absoluteBinPath) &&\n+            !objPath.Equals(binPath, StringComparison.CurrentCultureIgnoreCase)\n+            && !objPath.Equals(absoluteBinPath, StringComparison.CurrentCultureIgnoreCase)\n+        )\n+        {\n+            CheckAndAddFullOutputPath(objPath, context);\n+        }\n+    }\n+\n+    private string? CheckAndAddFullOutputPath(string? path, EvaluatedPropertiesContext context)\n+    {\n+        if (string.IsNullOrEmpty(path))\n+        {\n+            return path;\n+        }\n+\n+        string projectPath = context.ProjectFilePath;\n+\n+        if (!Path.IsPathRooted(path))\n+        {\n+            path = Path.Combine(Path.GetDirectoryName(projectPath)!, path);\n+        }\n+\n+        if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))\n+        {\n+            context.ReportResult(BuildAnalyzerResult.Create(",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=55079898\r\n\r\nWill be solved separately.",
              "createdAt": "2024-03-01T18:17:49Z",
              "path": "src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.IO;\n+using Microsoft.Build.BuildCop.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCop;\n+\n+namespace Microsoft.Build.BuildCop.Analyzers;\n+\n+// Some background on ids:\n+//  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+//  * https://github.com/dotnet/roslyn/issues/40351\n+//\n+// quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+//  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override ImmutableArray<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCopContext context)\n+    {\n+        context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);\n+    private readonly HashSet<string> _projects = new(StringComparer.CurrentCultureIgnoreCase);\n+\n+    private void EvaluatedPropertiesAction(EvaluatedPropertiesContext context)\n+    {\n+        if (!_projects.Add(context.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        string? binPath, objPath;\n+\n+        context.EvaluatedProperties.TryGetValue(\"OutputPath\", out binPath);\n+        context.EvaluatedProperties.TryGetValue(\"IntermediateOutputPath\", out objPath);\n+\n+        string? absoluteBinPath = CheckAndAddFullOutputPath(binPath, context);\n+        if (\n+            !string.IsNullOrEmpty(objPath) && !string.IsNullOrEmpty(absoluteBinPath) &&\n+            !objPath.Equals(binPath, StringComparison.CurrentCultureIgnoreCase)\n+            && !objPath.Equals(absoluteBinPath, StringComparison.CurrentCultureIgnoreCase)\n+        )\n+        {\n+            CheckAndAddFullOutputPath(objPath, context);\n+        }\n+    }\n+\n+    private string? CheckAndAddFullOutputPath(string? path, EvaluatedPropertiesContext context)\n+    {\n+        if (string.IsNullOrEmpty(path))\n+        {\n+            return path;\n+        }\n+\n+        string projectPath = context.ProjectFilePath;\n+\n+        if (!Path.IsPathRooted(path))\n+        {\n+            path = Path.Combine(Path.GetDirectoryName(projectPath)!, path);\n+        }\n+\n+        if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))\n+        {\n+            context.ReportResult(BuildAnalyzerResult.Create(",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`sealed`?",
              "createdAt": "2024-02-20T21:44:02Z",
              "path": "src/Build/BuildCop/API/BuildAnalyzerResult.cs",
              "diffHunk": "@@ -0,0 +1,115 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCop;\n+\n+public class BuildAnalyzerResult",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is fine for now but this should probably be a different analyzer error for \"two projects in the same folder\", which doesn't work for this and other reasons.",
              "createdAt": "2024-02-20T22:55:28Z",
              "path": "src/Analyzers.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -0,0 +1,136 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    public class EndToEndTests : IDisposable\n+    {\n+        private readonly TestEnvironment _env;\n+        public EndToEndTests(ITestOutputHelper output)\n+        {\n+            _env = TestEnvironment.Create(output);\n+\n+            // this is needed to ensure the binary logger does not pollute the environment\n+            _env.WithEnvironmentInvariant();\n+        }\n+\n+        public void Dispose() => _env.Dispose();\n+\n+        [Fact]\n+        public void SampleAnalyzerIntegrationTest()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                string contents = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n+                    \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                      \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                     \n+                      <ItemGroup>\n+                        <ProjectReference Include=\".\\FooBar-Copy.csproj\" />\n+                      </ItemGroup>\n+                      \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                    \n+                    </Project>\n+                    \"\"\";\n+\n+                string contents2 = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\">\n+                                   \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                                     \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                                    \n+                      <ItemGroup>\n+                        <Reference Include=\"bin/foo.dll\" />\n+                      </ItemGroup>\n+                                    \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                                   \n+                    </Project>\n+                    \"\"\";\n+                TransientTestFolder workFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n+                TransientTestFile projectFile2 = env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Correct - this was the simplest way forward now",
              "createdAt": "2024-03-01T18:14:12Z",
              "path": "src/Analyzers.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -0,0 +1,136 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Reflection;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+namespace Microsoft.Build.Analyzers.UnitTests\n+{\n+    public class EndToEndTests : IDisposable\n+    {\n+        private readonly TestEnvironment _env;\n+        public EndToEndTests(ITestOutputHelper output)\n+        {\n+            _env = TestEnvironment.Create(output);\n+\n+            // this is needed to ensure the binary logger does not pollute the environment\n+            _env.WithEnvironmentInvariant();\n+        }\n+\n+        public void Dispose() => _env.Dispose();\n+\n+        [Fact]\n+        public void SampleAnalyzerIntegrationTest()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                string contents = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n+                    \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                      \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                     \n+                      <ItemGroup>\n+                        <ProjectReference Include=\".\\FooBar-Copy.csproj\" />\n+                      </ItemGroup>\n+                      \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                    \n+                    </Project>\n+                    \"\"\";\n+\n+                string contents2 = $\"\"\"\n+                    <Project Sdk=\"Microsoft.NET.Sdk\">\n+                                   \n+                      <PropertyGroup>\n+                        <OutputType>Exe</OutputType>\n+                        <TargetFramework>net8.0</TargetFramework>\n+                        <ImplicitUsings>enable</ImplicitUsings>\n+                        <Nullable>enable</Nullable>\n+                      </PropertyGroup>\n+                                     \n+                      <PropertyGroup Condition=\"$(Test) == true\">\n+                        <TestProperty>Test</TestProperty>\n+                      </PropertyGroup>\n+                                    \n+                      <ItemGroup>\n+                        <Reference Include=\"bin/foo.dll\" />\n+                      </ItemGroup>\n+                                    \n+                      <Target Name=\"Hello\">\n+                        <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n+                      </Target>\n+                                   \n+                    </Project>\n+                    \"\"\";\n+                TransientTestFolder workFolder = env.CreateFolder(createFolder: true);\n+                TransientTestFile projectFile = env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n+                TransientTestFile projectFile2 = env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: duplicated",
              "createdAt": "2024-02-20T22:57:48Z",
              "path": "src/Build/BuildCop/Infrastructure/BuildCopConnectorLogger.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Diagnostics;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BuildCop.Logging;\n+using Microsoft.Build.Experimental.BuildCop;\n+using Microsoft.Build.Framework;\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there any cons if we combine the custom data with the BuildAnalyzerConfiguration which will have the Properties or CustomData with values that are set for this particular rule?  ",
              "createdAt": "2024-02-29T15:09:47Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations\n+    //  (disabled rules and analyzers that need to run in different node)\n+    private static readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = LoadConfiguration();\n+\n+    // This is just a testing implementation for quicker unblock of testing.\n+    // Real implementation will use .editorconfig file.\n+    // Sample json:\n+    /////*lang=json,strict*/\n+    ////\"\"\"\n+    ////    {\n+    ////        \"ABC123\": {\n+    ////            \"IsEnabled\": true,\n+    ////            \"Severity\": \"Info\"\n+    ////        },\n+    ////        \"COND0543\": {\n+    ////            \"IsEnabled\": false,\n+    ////            \"Severity\": \"Error\",\n+    ////    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+    ////    \t\t\"CustomSwitch\": \"QWERTY\"\n+    ////        },\n+    ////        \"BLA\": {\n+    ////            \"IsEnabled\": false\n+    ////        }\n+    ////    }\n+    ////    \"\"\"\n+    //\n+    // Plus there will need to be a mechanism of distinguishing different configs in different folders\n+    //  - e.g. - what to do if we analyze two projects (not sharing output path) and they have different .editorconfig files?\n+    private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration()\n+    {\n+        const string configFileName = \"editorconfig.json\";\n+        string configPath = configFileName;\n+\n+        if (!File.Exists(configPath))\n+        {\n+            // TODO: pass the current project path\n+            var dir = Environment.CurrentDirectory;\n+            configPath = Path.Combine(dir, configFileName);\n+\n+            if (!File.Exists(configPath))\n+            {\n+                return new Dictionary<string, BuildAnalyzerConfiguration>();\n+            }\n+        }\n+\n+        var json = File.ReadAllText(configPath);\n+        var DeserializationOptions = new JsonSerializerOptions { Converters = { new JsonStringEnumConverter() } };\n+        return JsonSerializer.Deserialize<Dictionary<string, BuildAnalyzerConfiguration>>(json, DeserializationOptions) ??\n+               new Dictionary<string, BuildAnalyzerConfiguration>();\n+    }\n+\n+    /// <summary>\n+    /// Gets the user specified unrecognized configuration for the given analyzer rule.\n+    /// \n+    /// The configuration module should as well check that CustomConfigurationData\n+    ///  for a particular rule is equal across the whole build (for all projects)  - otherwise it should error out.\n+    /// This should apply to all rules for which the configuration is fetched.\n+    /// </summary>\n+    /// <param name=\"projectFullPath\"></param>\n+    /// <param name=\"ruleId\"></param>\n+    /// <returns></returns>\n+    public static CustomConfigurationData GetCustomConfiguration(string projectFullPath, string ruleId)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Discussed offline - the `BuildAnalyzerConfiguration` will be of concern for infrastructure only, the `CustomConfigurationData` will be of concern for the analyzer only - so it's better to have them separated.\r\n\r\nAnd as I keep promissing (and postponing) - the design doc is on the way :-)",
              "createdAt": "2024-02-29T17:33:19Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations\n+    //  (disabled rules and analyzers that need to run in different node)\n+    private static readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = LoadConfiguration();\n+\n+    // This is just a testing implementation for quicker unblock of testing.\n+    // Real implementation will use .editorconfig file.\n+    // Sample json:\n+    /////*lang=json,strict*/\n+    ////\"\"\"\n+    ////    {\n+    ////        \"ABC123\": {\n+    ////            \"IsEnabled\": true,\n+    ////            \"Severity\": \"Info\"\n+    ////        },\n+    ////        \"COND0543\": {\n+    ////            \"IsEnabled\": false,\n+    ////            \"Severity\": \"Error\",\n+    ////    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+    ////    \t\t\"CustomSwitch\": \"QWERTY\"\n+    ////        },\n+    ////        \"BLA\": {\n+    ////            \"IsEnabled\": false\n+    ////        }\n+    ////    }\n+    ////    \"\"\"\n+    //\n+    // Plus there will need to be a mechanism of distinguishing different configs in different folders\n+    //  - e.g. - what to do if we analyze two projects (not sharing output path) and they have different .editorconfig files?\n+    private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration()\n+    {\n+        const string configFileName = \"editorconfig.json\";\n+        string configPath = configFileName;\n+\n+        if (!File.Exists(configPath))\n+        {\n+            // TODO: pass the current project path\n+            var dir = Environment.CurrentDirectory;\n+            configPath = Path.Combine(dir, configFileName);\n+\n+            if (!File.Exists(configPath))\n+            {\n+                return new Dictionary<string, BuildAnalyzerConfiguration>();\n+            }\n+        }\n+\n+        var json = File.ReadAllText(configPath);\n+        var DeserializationOptions = new JsonSerializerOptions { Converters = { new JsonStringEnumConverter() } };\n+        return JsonSerializer.Deserialize<Dictionary<string, BuildAnalyzerConfiguration>>(json, DeserializationOptions) ??\n+               new Dictionary<string, BuildAnalyzerConfiguration>();\n+    }\n+\n+    /// <summary>\n+    /// Gets the user specified unrecognized configuration for the given analyzer rule.\n+    /// \n+    /// The configuration module should as well check that CustomConfigurationData\n+    ///  for a particular rule is equal across the whole build (for all projects)  - otherwise it should error out.\n+    /// This should apply to all rules for which the configuration is fetched.\n+    /// </summary>\n+    /// <param name=\"projectFullPath\"></param>\n+    /// <param name=\"ruleId\"></param>\n+    /// <returns></returns>\n+    public static CustomConfigurationData GetCustomConfiguration(string projectFullPath, string ruleId)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I've got another clarification question: \r\nDo we want to remove completely the keys that are used by infra logic from CustomConfigurationdata? \r\nFor example IsEnabled ",
              "createdAt": "2024-03-06T16:09:41Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations\n+    //  (disabled rules and analyzers that need to run in different node)\n+    private static readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = LoadConfiguration();\n+\n+    // This is just a testing implementation for quicker unblock of testing.\n+    // Real implementation will use .editorconfig file.\n+    // Sample json:\n+    /////*lang=json,strict*/\n+    ////\"\"\"\n+    ////    {\n+    ////        \"ABC123\": {\n+    ////            \"IsEnabled\": true,\n+    ////            \"Severity\": \"Info\"\n+    ////        },\n+    ////        \"COND0543\": {\n+    ////            \"IsEnabled\": false,\n+    ////            \"Severity\": \"Error\",\n+    ////    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+    ////    \t\t\"CustomSwitch\": \"QWERTY\"\n+    ////        },\n+    ////        \"BLA\": {\n+    ////            \"IsEnabled\": false\n+    ////        }\n+    ////    }\n+    ////    \"\"\"\n+    //\n+    // Plus there will need to be a mechanism of distinguishing different configs in different folders\n+    //  - e.g. - what to do if we analyze two projects (not sharing output path) and they have different .editorconfig files?\n+    private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration()\n+    {\n+        const string configFileName = \"editorconfig.json\";\n+        string configPath = configFileName;\n+\n+        if (!File.Exists(configPath))\n+        {\n+            // TODO: pass the current project path\n+            var dir = Environment.CurrentDirectory;\n+            configPath = Path.Combine(dir, configFileName);\n+\n+            if (!File.Exists(configPath))\n+            {\n+                return new Dictionary<string, BuildAnalyzerConfiguration>();\n+            }\n+        }\n+\n+        var json = File.ReadAllText(configPath);\n+        var DeserializationOptions = new JsonSerializerOptions { Converters = { new JsonStringEnumConverter() } };\n+        return JsonSerializer.Deserialize<Dictionary<string, BuildAnalyzerConfiguration>>(json, DeserializationOptions) ??\n+               new Dictionary<string, BuildAnalyzerConfiguration>();\n+    }\n+\n+    /// <summary>\n+    /// Gets the user specified unrecognized configuration for the given analyzer rule.\n+    /// \n+    /// The configuration module should as well check that CustomConfigurationData\n+    ///  for a particular rule is equal across the whole build (for all projects)  - otherwise it should error out.\n+    /// This should apply to all rules for which the configuration is fetched.\n+    /// </summary>\n+    /// <param name=\"projectFullPath\"></param>\n+    /// <param name=\"ruleId\"></param>\n+    /// <returns></returns>\n+    public static CustomConfigurationData GetCustomConfiguration(string projectFullPath, string ruleId)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Yes - the infra recognized keys should be removed from `CustomConfigurationData`.\r\n\r\nIn fact - in vast majority of cases the `CustomConfigurationData` should be just `CustomConfigurationData.Null`",
              "createdAt": "2024-03-06T18:08:28Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations\n+    //  (disabled rules and analyzers that need to run in different node)\n+    private static readonly Dictionary<string, BuildAnalyzerConfiguration> _editorConfig = LoadConfiguration();\n+\n+    // This is just a testing implementation for quicker unblock of testing.\n+    // Real implementation will use .editorconfig file.\n+    // Sample json:\n+    /////*lang=json,strict*/\n+    ////\"\"\"\n+    ////    {\n+    ////        \"ABC123\": {\n+    ////            \"IsEnabled\": true,\n+    ////            \"Severity\": \"Info\"\n+    ////        },\n+    ////        \"COND0543\": {\n+    ////            \"IsEnabled\": false,\n+    ////            \"Severity\": \"Error\",\n+    ////    \t\t\"EvaluationAnalysisScope\": \"AnalyzedProjectOnly\",\n+    ////    \t\t\"CustomSwitch\": \"QWERTY\"\n+    ////        },\n+    ////        \"BLA\": {\n+    ////            \"IsEnabled\": false\n+    ////        }\n+    ////    }\n+    ////    \"\"\"\n+    //\n+    // Plus there will need to be a mechanism of distinguishing different configs in different folders\n+    //  - e.g. - what to do if we analyze two projects (not sharing output path) and they have different .editorconfig files?\n+    private static Dictionary<string, BuildAnalyzerConfiguration> LoadConfiguration()\n+    {\n+        const string configFileName = \"editorconfig.json\";\n+        string configPath = configFileName;\n+\n+        if (!File.Exists(configPath))\n+        {\n+            // TODO: pass the current project path\n+            var dir = Environment.CurrentDirectory;\n+            configPath = Path.Combine(dir, configFileName);\n+\n+            if (!File.Exists(configPath))\n+            {\n+                return new Dictionary<string, BuildAnalyzerConfiguration>();\n+            }\n+        }\n+\n+        var json = File.ReadAllText(configPath);\n+        var DeserializationOptions = new JsonSerializerOptions { Converters = { new JsonStringEnumConverter() } };\n+        return JsonSerializer.Deserialize<Dictionary<string, BuildAnalyzerConfiguration>>(json, DeserializationOptions) ??\n+               new Dictionary<string, BuildAnalyzerConfiguration>();\n+    }\n+\n+    /// <summary>\n+    /// Gets the user specified unrecognized configuration for the given analyzer rule.\n+    /// \n+    /// The configuration module should as well check that CustomConfigurationData\n+    ///  for a particular rule is equal across the whole build (for all projects)  - otherwise it should error out.\n+    /// This should apply to all rules for which the configuration is fetched.\n+    /// </summary>\n+    /// <param name=\"projectFullPath\"></param>\n+    /// <param name=\"ruleId\"></param>\n+    /// <returns></returns>\n+    public static CustomConfigurationData GetCustomConfiguration(string projectFullPath, string ruleId)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarify what kind of configuration we want to remove and from where?  \r\n",
              "createdAt": "2024-03-06T15:55:23Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Sorry for the cryptic note :-)\r\n\r\nThe idea was that there might be cases where we know that the analyzer cannot be used in the build anymore (e.g. when issue during setup is encounteredand the analyzer is removed in `SetupAnalyzersForNewProject`) - in such case we might not need to cache the configuration for the analyzer anymore.\r\n\r\nThough this is not a must have requirement.",
              "createdAt": "2024-03-06T18:12:56Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Got it, thank you! \r\nIn such case we might need to add public api in ConfigurationProvider which will get the information what to remove from local cache. \r\nAgree on prioritization",
              "createdAt": "2024-03-07T08:34:47Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Btw. - the API should still be internal. The whole `ConfigurationProvider` should not be of concern for users - those should only see an authoring API and OM",
              "createdAt": "2024-03-07T11:42:39Z",
              "path": "src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs",
              "diffHunk": "@@ -0,0 +1,206 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Text.Json.Serialization;\n+using System.Text.Json;\n+using Microsoft.Build.Experimental.BuildCop;\n+using System.Configuration;\n+\n+namespace Microsoft.Build.BuildCop.Infrastructure;\n+\n+\n+// TODO: https://github.com/dotnet/msbuild/issues/9628\n+//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)\n+internal static class ConfigurationProvider\n+{\n+    // TODO: This module should have a mechanism for removing unneeded configurations",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "buildCheck events :) ",
              "createdAt": "2024-04-03T07:28:18Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -98,6 +100,11 @@ internal sealed class EventSourceSink :\n         /// This event is raised to log telemetry.\n         /// </summary>\n         public event TelemetryEventHandler TelemetryLogged;\n+\n+        /// <summary>\n+        /// This event is raised to log build cop events.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we point somewhere here in the comments to the documentation/idea or put TODO if want to update it in future? \r\nWhat do you think? \r\n",
              "createdAt": "2024-04-03T07:35:47Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -475,6 +475,10 @@ private void SetProjectBasedState(ProjectInstance project)\n                 {\n                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;\n                 }\n+\n+                // Here - if we'll have in-execution analysis and it'll need DOM from Project,",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "\ud83d\udc4d \r\nRemoving the comment and describing in the doc: https://github.com/dotnet/msbuild/pull/9853/files#diff-25077216bc2a35e0cdaafbba8e46b1f08ba6957b487e030139291a5f0c544ae5R34",
              "createdAt": "2024-04-04T10:21:34Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -475,6 +475,10 @@ private void SetProjectBasedState(ProjectInstance project)\n                 {\n                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;\n                 }\n+\n+                // Here - if we'll have in-execution analysis and it'll need DOM from Project,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "if the property not specified previously shall we turn on the rule by default? ",
              "createdAt": "2024-04-03T07:39:16Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    // Defaults to be used if any configuration property is not specified neither as default\n+    //  nor in the editorconfig configuration file.\n+    public static BuildAnalyzerConfiguration Default { get; } = new()\n+    {\n+        EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.AnalyzedProjectOnly,\n+        Severity = BuildAnalyzerResultSeverity.Info,\n+        IsEnabled = false,",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I wouldn't do that - it feels more safe to have at least one explicit intent declaration (either by the developer in the code or by the user in the editorconfig) before turning on additional (and possibly breaking) behavior.",
              "createdAt": "2024-04-04T10:24:16Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    // Defaults to be used if any configuration property is not specified neither as default\n+    //  nor in the editorconfig configuration file.\n+    public static BuildAnalyzerConfiguration Default { get; } = new()\n+    {\n+        EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.AnalyzedProjectOnly,\n+        Severity = BuildAnalyzerResultSeverity.Info,\n+        IsEnabled = false,",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Sure, thank you! ",
              "createdAt": "2024-04-04T10:54:45Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs",
              "diffHunk": "@@ -0,0 +1,45 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// Configuration for a build analyzer.\n+/// Default values can be specified by the Analyzer in code.\n+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.\n+/// Each rule can have its own configuration, which can differ per each project.\n+/// The <see cref=\"EvaluationAnalysisScope\"/> setting must be same for all rules in the same analyzer (but can differ between projects)\n+/// </summary>\n+public class BuildAnalyzerConfiguration\n+{\n+    // Defaults to be used if any configuration property is not specified neither as default\n+    //  nor in the editorconfig configuration file.\n+    public static BuildAnalyzerConfiguration Default { get; } = new()\n+    {\n+        EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.AnalyzedProjectOnly,\n+        Severity = BuildAnalyzerResultSeverity.Info,\n+        IsEnabled = false,",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "will it be possible to do it in this PR? \r\nI was thinking to use category in some solution for the https://github.com/dotnet/msbuild/issues/9823. however there is no conclusion yet. \r\nHowever to have the checks/rules categorized will give us more opportunity to provide more granular configuration. What do you think? \r\n ",
              "createdAt": "2024-04-03T07:46:09Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerRule.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// Represents a rule that is a unit of build analysis.\n+/// <see cref=\"BuildAnalyzer\"/> is a unit of executing the analysis, but it can be discovering multiple distinct violation types.\n+///  for this reason a single <see cref=\"BuildAnalyzer\"/> can expose <see cref=\"BuildAnalyzerRule\"/>s.\n+/// </summary>\n+public class BuildAnalyzerRule\n+{\n+    public BuildAnalyzerRule(string id, string title, string description, string category, string messageFormat,\n+        BuildAnalyzerConfiguration defaultConfiguration)\n+    {\n+        Id = id;\n+        Title = title;\n+        Description = description;\n+        Category = category;\n+        MessageFormat = messageFormat;\n+        DefaultConfiguration = defaultConfiguration;\n+    }\n+\n+    /// <summary>\n+    /// The identification of the rule.\n+    ///\n+    /// Some background on ids:\n+    ///  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+    ///  * https://github.com/dotnet/roslyn/issues/40351\n+    ///\n+    /// Quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+    ///  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+    /// </summary>\n+    public string Id { get; }\n+\n+    /// <summary>\n+    /// The descriptive short summary of the rule.\n+    /// </summary>\n+    public string Title { get; }\n+\n+    /// <summary>\n+    /// More detailed description of the violation the rule can be reporting (with possible suggestions).\n+    /// </summary>\n+    public string Description { get; }\n+\n+    /// <summary>\n+    /// TODO: We might turn this into enum, or just remove this.\n+    /// </summary>\n+    public string Category { get; }",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "This PR is already too loaded and the need of this is questionable - so removing and tracking the possible reintroduction in https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58660786",
              "createdAt": "2024-04-04T10:32:55Z",
              "path": "src/Build/BuildCheck/API/BuildAnalyzerRule.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// Represents a rule that is a unit of build analysis.\n+/// <see cref=\"BuildAnalyzer\"/> is a unit of executing the analysis, but it can be discovering multiple distinct violation types.\n+///  for this reason a single <see cref=\"BuildAnalyzer\"/> can expose <see cref=\"BuildAnalyzerRule\"/>s.\n+/// </summary>\n+public class BuildAnalyzerRule\n+{\n+    public BuildAnalyzerRule(string id, string title, string description, string category, string messageFormat,\n+        BuildAnalyzerConfiguration defaultConfiguration)\n+    {\n+        Id = id;\n+        Title = title;\n+        Description = description;\n+        Category = category;\n+        MessageFormat = messageFormat;\n+        DefaultConfiguration = defaultConfiguration;\n+    }\n+\n+    /// <summary>\n+    /// The identification of the rule.\n+    ///\n+    /// Some background on ids:\n+    ///  * https://github.com/dotnet/roslyn-analyzers/blob/main/src/Utilities/Compiler/DiagnosticCategoryAndIdRanges.txt\n+    ///  * https://github.com/dotnet/roslyn/issues/40351\n+    ///\n+    /// Quick suggestion now - let's force external ids to start with 'X', for ours - avoid 'MSB'\n+    ///  maybe - BT - build static/styling; BA - build authoring; BE - build execution/environment; BC - build configuration\n+    /// </summary>\n+    public string Id { get; }\n+\n+    /// <summary>\n+    /// The descriptive short summary of the rule.\n+    /// </summary>\n+    public string Title { get; }\n+\n+    /// <summary>\n+    /// More detailed description of the violation the rule can be reporting (with possible suggestions).\n+    /// </summary>\n+    public string Description { get; }\n+\n+    /// <summary>\n+    /// TODO: We might turn this into enum, or just remove this.\n+    /// </summary>\n+    public string Category { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we create the item per TODO lines, so we could track and find if needed in future? \r\nPlease feel free to resolve the comment if it is already created or solved already. ",
              "createdAt": "2024-04-03T07:50:38Z",
              "path": "src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.Diagnostics;\n+using System.IO;\n+using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.BuildCheck.Analyzers;\n+\n+\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);\n+    private readonly HashSet<string> _projects = new(StringComparer.CurrentCultureIgnoreCase);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)\n+    {\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        string? binPath, objPath;\n+\n+        context.Data.EvaluatedProperties.TryGetValue(\"OutputPath\", out binPath);\n+        context.Data.EvaluatedProperties.TryGetValue(\"IntermediateOutputPath\", out objPath);\n+\n+        string? absoluteBinPath = CheckAndAddFullOutputPath(binPath, context);\n+        if (\n+            !string.IsNullOrEmpty(objPath) && !string.IsNullOrEmpty(absoluteBinPath) &&\n+            !objPath.Equals(binPath, StringComparison.CurrentCultureIgnoreCase)\n+            && !objPath.Equals(absoluteBinPath, StringComparison.CurrentCultureIgnoreCase)\n+        )\n+        {\n+            CheckAndAddFullOutputPath(objPath, context);\n+        }\n+    }\n+\n+    private string? CheckAndAddFullOutputPath(string? path, BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)\n+    {\n+        if (string.IsNullOrEmpty(path))\n+        {\n+            return path;\n+        }\n+\n+        string projectPath = context.Data.ProjectFilePath;\n+\n+        if (!Path.IsPathRooted(path))\n+        {\n+            path = Path.Combine(Path.GetDirectoryName(projectPath)!, path);\n+        }\n+\n+        if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                // TODO: let's support transmitting locations of specific properties",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Removed 13 TODOs and in each places linked tracking workitems (3 new created in the process)",
              "createdAt": "2024-04-04T11:07:26Z",
              "path": "src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+using System.Diagnostics;\n+using System.IO;\n+using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.BuildCheck.Analyzers;\n+\n+\n+\n+internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer\n+{\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"BC0101\", \"ConflictingOutputPath\",\n+        \"Two projects should not share their OutputPath nor IntermediateOutputPath locations\", \"Configuration\",\n+        \"Projects {0} and {1} have conflicting output paths: {2}.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+    public override string FriendlyName => \"MSBuild.SharedOutputPathAnalyzer\";\n+\n+    public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);\n+    }\n+\n+    private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);\n+    private readonly HashSet<string> _projects = new(StringComparer.CurrentCultureIgnoreCase);\n+\n+    private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)\n+    {\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        string? binPath, objPath;\n+\n+        context.Data.EvaluatedProperties.TryGetValue(\"OutputPath\", out binPath);\n+        context.Data.EvaluatedProperties.TryGetValue(\"IntermediateOutputPath\", out objPath);\n+\n+        string? absoluteBinPath = CheckAndAddFullOutputPath(binPath, context);\n+        if (\n+            !string.IsNullOrEmpty(objPath) && !string.IsNullOrEmpty(absoluteBinPath) &&\n+            !objPath.Equals(binPath, StringComparison.CurrentCultureIgnoreCase)\n+            && !objPath.Equals(absoluteBinPath, StringComparison.CurrentCultureIgnoreCase)\n+        )\n+        {\n+            CheckAndAddFullOutputPath(objPath, context);\n+        }\n+    }\n+\n+    private string? CheckAndAddFullOutputPath(string? path, BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)\n+    {\n+        if (string.IsNullOrEmpty(path))\n+        {\n+            return path;\n+        }\n+\n+        string projectPath = context.Data.ProjectFilePath;\n+\n+        if (!Path.IsPathRooted(path))\n+        {\n+            path = Path.Combine(Path.GetDirectoryName(projectPath)!, path);\n+        }\n+\n+        if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))\n+        {\n+            context.ReportResult(BuildCheckResult.Create(\n+                SupportedRule,\n+                // TODO: let's support transmitting locations of specific properties",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Indentation.",
              "createdAt": "2024-04-03T08:04:51Z",
              "path": "eng/BootStrapMSBuild.props",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project>\n+\n+  <!--\n+  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n+   relying on bootstrapped MSBuild\n+   -->\n+\n+  <PropertyGroup>\n+    <BootstrapDestination>$(ArtifactsBinDir)bootstrap\\</BootstrapDestination>\n+    <BootstrapDestination Condition=\"'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'\">$(BootstrapDestination)$(Platform)\\</BootstrapDestination>\n+    <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\\MSBuild\\</BootstrapDestination>\n+  </PropertyGroup>\n+  \n+  <PropertyGroup Condition=\"$(TargetFramework.StartsWith('net4'))\">\n+\t<BootstrapBinaryDestination>$(BootstrapDestination)$(TargetMSBuildToolsVersion)\\Bin</BootstrapBinaryDestination>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            if (_buildParameters.IsBuildCheckEnabled)\r\n```\r\n\r\nThe field is already read directly in this method.",
              "createdAt": "2024-04-03T08:24:53Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2976,6 +2984,18 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum\n             loggingService.WarningsNotAsErrors = warningsNotAsErrors;\n             loggingService.WarningsAsMessages = warningsAsMessages;\n \n+            if (((IBuildComponentHost)this).BuildParameters.IsBuildCheckEnabled)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: The convention seems to be for `BuildComponentType` to match the component class name. Should it be `BuildComponentType.BuildCheckManagerProvider` ?",
              "createdAt": "2024-04-03T08:37:54Z",
              "path": "src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs",
              "diffHunk": "@@ -76,6 +77,8 @@ public void RegisterDefaultFactories()\n             // NodeEndpoint,\n             _componentEntriesByType[BuildComponentType.LoggingService] = new BuildComponentEntry(BuildComponentType.LoggingService, null);\n             _componentEntriesByType[BuildComponentType.RequestBuilder] = new BuildComponentEntry(BuildComponentType.RequestBuilder, RequestBuilder.CreateComponent, CreationPattern.CreateAlways);\n+            // This conditionally registers real or no-op implementation based on BuildParameters\n+            _componentEntriesByType[BuildComponentType.BuildCheck] = new BuildComponentEntry(BuildComponentType.BuildCheck, BuildCheckManagerProvider.CreateComponent, CreationPattern.Singleton);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This property seems to be effectively unused. Delete and use `Instance` instead?",
              "createdAt": "2024-04-03T08:57:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -0,0 +1,372 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.ObjectModel;\n+using System.Diagnostics;\n+using System.Diagnostics.Tracing;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Threading;\n+using Microsoft.Build.BackEnd;\n+using Microsoft.Build.BackEnd.Components.Caching;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BuildCheck.Acquisition;\n+using Microsoft.Build.BuildCheck.Analyzers;\n+using Microsoft.Build.BuildCheck.Logging;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Infrastructure;\n+\n+internal delegate BuildAnalyzer BuildAnalyzerFactory();\n+internal delegate BuildAnalyzerWrapper BuildAnalyzerWrapperFactory(ConfigurationContext configurationContext);\n+\n+/// <summary>\n+/// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.\n+/// </summary>\n+internal sealed class BuildCheckManagerProvider : IBuildCheckManagerProvider\n+{\n+    private static int s_isInitialized = 0;\n+    private static IBuildCheckManager s_globalInstance = new NullBuildCheckManager();\n+    internal static IBuildCheckManager GlobalInstance => s_isInitialized != 0 ? s_globalInstance : throw new InvalidOperationException(\"BuildCheckManagerProvider not initialized\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "This will be needed for sourcing data from execution from places where we currently do not have access to ComponentCollection nor RequestObject (like e.g. within ConditionEvaluator and similar).\r\n\r\nWe should try to use it with care, but in some cases we'd need to change public API to avoid the need for singleton.\r\n\r\nI atleast tried to name it in a way so that it sticks out in the future PRs when this is going to be used\r\n",
              "createdAt": "2024-04-04T11:26:03Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -0,0 +1,372 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.ObjectModel;\n+using System.Diagnostics;\n+using System.Diagnostics.Tracing;\n+using System.IO;\n+using System.Linq;\n+using System.Runtime.ConstrainedExecution;\n+using System.Threading;\n+using Microsoft.Build.BackEnd;\n+using Microsoft.Build.BackEnd.Components.Caching;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BuildCheck.Acquisition;\n+using Microsoft.Build.BuildCheck.Analyzers;\n+using Microsoft.Build.BuildCheck.Logging;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Evaluation;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Infrastructure;\n+\n+internal delegate BuildAnalyzer BuildAnalyzerFactory();\n+internal delegate BuildAnalyzerWrapper BuildAnalyzerWrapperFactory(ConfigurationContext configurationContext);\n+\n+/// <summary>\n+/// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.\n+/// </summary>\n+internal sealed class BuildCheckManagerProvider : IBuildCheckManagerProvider\n+{\n+    private static int s_isInitialized = 0;\n+    private static IBuildCheckManager s_globalInstance = new NullBuildCheckManager();\n+    internal static IBuildCheckManager GlobalInstance => s_isInitialized != 0 ? s_globalInstance : throw new InvalidOperationException(\"BuildCheckManagerProvider not initialized\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: The comment doesn't look very useful without additional context. Remove or elaborate?",
              "createdAt": "2024-04-03T09:08:27Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -475,6 +475,10 @@ private void SetProjectBasedState(ProjectInstance project)\n                 {\n                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;\n                 }\n+\n+                // Here - if we'll have in-execution analysis and it'll need DOM from Project,\n+                //  this is the place for Project creation.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/9735#discussion_r1551405264",
              "createdAt": "2024-04-04T11:27:59Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -475,6 +475,10 @@ private void SetProjectBasedState(ProjectInstance project)\n                 {\n                     projectLoadSettings |= ProjectLoadSettings.FailOnUnresolvedSdk;\n                 }\n+\n+                // Here - if we'll have in-execution analysis and it'll need DOM from Project,\n+                //  this is the place for Project creation.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I don't think the attributes are adding any value.\r\n\r\n```suggestion\r\n<Project>\r\n```",
              "createdAt": "2024-04-03T09:11:41Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Directory.Build.props",
              "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo \"develomplent\".",
              "createdAt": "2024-04-03T09:12:30Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj",
              "diffHunk": "@@ -0,0 +1,45 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+\t  <TargetFramework>netstandard2.0</TargetFramework>\n+\t  <DevelopmentDependency>true</DevelopmentDependency>\n+\t  <IncludeBuildOutput>false</IncludeBuildOutput>\n+\t  <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+\t  <!-- The output structure was modified for msbuild develomplent needs.-->",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Indentation doesn't match the rest of the properties.",
              "createdAt": "2024-04-03T09:12:56Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj",
              "diffHunk": "@@ -0,0 +1,45 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+\t  <TargetFramework>netstandard2.0</TargetFramework>\n+\t  <DevelopmentDependency>true</DevelopmentDependency>\n+\t  <IncludeBuildOutput>false</IncludeBuildOutput>\n+\t  <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+\t  <!-- The output structure was modified for msbuild develomplent needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Indentation.",
              "createdAt": "2024-04-03T09:15:18Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Company.AnalyzerTemplate.csproj",
              "diffHunk": "@@ -0,0 +1,45 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+\t  <TargetFramework>netstandard2.0</TargetFramework>\n+\t  <DevelopmentDependency>true</DevelopmentDependency>\n+\t  <IncludeBuildOutput>false</IncludeBuildOutput>\n+\t  <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+\t  <!-- The output structure was modified for msbuild develomplent needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+\t  <None Include=\"Directory.Build.props\" Pack=\"true\" PackagePath=\"build\\Directory.Build.props\" />\n+\t  <Content Include=\"README.md\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <!-- Please add IncludeInPackage field to all third party dependencies. See the example below.-->\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" />\n+  </ItemGroup>\n+\n+  <Target Name=\"AddNuGetDlls\" BeforeTargets=\"_GetPackageFiles\">\n+\t<!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.\n+       This produces a new list containing the DLL path and the \"IncludeInPackage\" metadata-->\n+\t<JoinItems Left=\"@(ResolvedCompileFileDefinitions)\" LeftKey=\"NuGetPackageId\" LeftMetadata=\"*\" Right=\"@(PackageReference)\" RightKey=\"\" RightMetadata=\"*\" ItemSpecToUse=\"Left\">\n+\t\t<Output TaskParameter=\"JoinResult\" ItemName=\"_PackagesToPack\" />\n+\t</JoinItems>\n+\n+\t<ItemGroup>\n+\t\t<!-- Remove NETStandard DLLs -->\n+\t\t<_PackagesToPack Remove=\"@(_PackagesToPack)\" Condition=\"%(NuGetPackageId) == 'NETStandard.Library'\" />\n+\t\t<_PackagesToPack Remove=\"@(_PackagesToPack)\" Condition=\"%(_PackagesToPack.IncludeInPackage) != 'true'\" />\n+\t</ItemGroup>\n+\n+\t<Message Importance=\"High\" Text=\"Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')\" />\n+\n+\t<ItemGroup>\n+\t\t<!-- Update the collection of items to pack with the DLLs from the NuGet packages -->\n+\t\t<None Include=\"@(_PackagesToPack)\" Pack=\"true\" PackagePath=\"lib\" Visible=\"false\" />\n+\n+\t\t<!-- Add the DLL produced by the current project to the NuGet package -->\n+\t\t<None Include=\"$(OutputPath)\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"lib\" Visible=\"false\" />\n+\t</ItemGroup>\n+</Target>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Missing space after `=`.",
              "createdAt": "2024-04-03T09:16:50Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing System;\n+\n+namespace Company.AnalyzerTemplate\n+{\n+    public sealed class Analyzer1 : BuildAnalyzer\n+    {\n+        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"X01234\", \"Title\",\n+            \"Description\", \"Category\",\n+            \"Message format: {0}\",\n+            new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+        public override string FriendlyName => \"Company.Analyzer1\";\n+\n+        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "This is mandated by https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md (which is on in our CI build)",
              "createdAt": "2024-04-04T11:37:31Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing System;\n+\n+namespace Company.AnalyzerTemplate\n+{\n+    public sealed class Analyzer1 : BuildAnalyzer\n+    {\n+        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"X01234\", \"Title\",\n+            \"Description\", \"Category\",\n+            \"Message format: {0}\",\n+            new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+        public override string FriendlyName => \"Company.Analyzer1\";\n+\n+        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Ooh! Hopefully the fix reaches us soon: https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3687",
              "createdAt": "2024-04-05T08:13:16Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/Analyzer1.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing System;\n+\n+namespace Company.AnalyzerTemplate\n+{\n+    public sealed class Analyzer1 : BuildAnalyzer\n+    {\n+        public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\"X01234\", \"Title\",\n+            \"Description\", \"Category\",\n+            \"Message format: {0}\",\n+            new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });\n+\n+        public override string FriendlyName => \"Company.Analyzer1\";\n+\n+        public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } =[SupportedRule];",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Update to `17.11.0` ?",
              "createdAt": "2024-04-03T09:19:28Z",
              "path": "template_feed/Microsoft.AnalyzerTemplate/.template.config/template.json",
              "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+    \"$schema\": \"http://json.schemastore.org/template\",\n+    \"author\": \"Microsoft\",\n+    \"classifications\": [\n+      \"Common\",\n+      \"Library\"\n+    ],\n+    \"name\": \"MSBuild custom analyzer skeleton project.\",\n+    \"generatorVersions\": \"[1.0.0.0-*)\",\n+    \"description\": \"A project for creating a MSBuild analyzer library that targets .NET Standard\",\n+    \"groupIdentity\": \"Microsoft.AnalyzerTemplate\",\n+    \"identity\": \"Microsoft.AnalyzerTemplate\",\n+    \"shortName\": \"msbuildanalyzer\",\n+    \"tags\": {\n+      \"language\": \"C#\",\n+      \"type\": \"project\"\n+    },\n+    \"sourceName\": \"Company.AnalyzerTemplate\",\n+    \"preferNameDirectory\": true,\n+    \"primaryOutputs\": [\n+      {\n+        \"path\": \"Company.AnalyzerTemplate.csproj\"\n+      }\n+   ],\n+   \"symbols\": {\n+    \"MicrosoftBuildVersion\": {\n+      \"type\": \"parameter\",\n+      \"description\": \"Overrides the default Microsoft.Build version where analyzer's interfaces are placed\",\n+      \"datatype\": \"text\",\n+      \"defaultValue\": \"17.9.5\",",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We are not using this property. Is there a reason to keep it? Also, the source file should be renamed to `BootstrapLocationAttribute.cs`.",
              "createdAt": "2024-04-03T09:23:25Z",
              "path": "src/UnitTests.Shared/AssemblyInfo.cs",
              "diffHunk": "@@ -2,3 +2,13 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;\n+\n+namespace Microsoft.Build.UnitTests.Shared;\n+\n+[System.AttributeUsage(System.AttributeTargets.Assembly)]\n+internal sealed class BootstrapLocationAttribute(string bootstrapRoot, string bootstrapMsbuildBinaryLocation)\n+    : System.Attribute\n+{\n+    public string BootstrapRoot { get; } = bootstrapRoot;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Should the file name be `BootstrapMSBuild.props` (lower-case `s`)? Same for the .targets file.",
              "createdAt": "2024-04-03T09:24:53Z",
              "path": "eng/BootStrapMSBuild.props",
              "diffHunk": "@@ -0,0 +1,21 @@\n+<Project>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you please add a comment explaining why this is needed?",
              "createdAt": "2024-04-03T09:42:46Z",
              "path": "src/Shared/IsExternalInit.cs",
              "diffHunk": "@@ -0,0 +1,7 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace System.Runtime.CompilerServices\n+{\n+    internal static class IsExternalInit { }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`al` is slightly unfortunate because it's the name of an unrelated build tool `al.exe` and it's not a prefix of `analyze`. Why not `an` or `a`?",
              "createdAt": "2024-04-03T09:48:53Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -267,6 +268,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),\n+            new ParameterizedSwitchInfo(  new string[] { \"analyze\", \"al\" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "May I clarify if there is a need at all to have shorter alias? Is it somehow required? ",
              "createdAt": "2024-04-03T12:02:53Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -267,6 +268,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),\n+            new ParameterizedSwitchInfo(  new string[] { \"analyze\", \"al\" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Not required. It's just a convenience to save keystrokes. Not adding the shorter version is definitely an option as well.",
              "createdAt": "2024-04-03T12:06:32Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -267,6 +268,7 @@ private struct ParameterizedSwitchInfo\n             new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"warnasmessage\", \"nowarn\" },           ParameterizedSwitch.WarningsAsMessages,         null,                           true,           \"MissingWarnAsMessageParameterError\",  true,   false),\n             new ParameterizedSwitchInfo(  new string[] { \"binarylogger\", \"bl\" },                ParameterizedSwitch.BinaryLogger,               null,                           false,          null,                                  true,   false),\n+            new ParameterizedSwitchInfo(  new string[] { \"analyze\", \"al\" },                     ParameterizedSwitch.Analyze,                    null,                           false,          null,                                  true,   false),",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comment all public types please.",
              "createdAt": "2024-04-03T10:50:07Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,150 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public abstract class BuildCheckEventArgs : BuildEventArgs\n+{ }\n+\n+public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tracingData) : BuildCheckEventArgs",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Turning those to internal and going through through the rest of public once",
              "createdAt": "2024-04-04T12:03:46Z",
              "path": "src/Framework/BuildCheck/BuildCheckEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,150 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public abstract class BuildCheckEventArgs : BuildEventArgs\n+{ }\n+\n+public sealed class BuildCheckTracingEventArgs(Dictionary<string, TimeSpan> tracingData) : BuildCheckEventArgs",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo \"comas\".",
              "createdAt": "2024-04-03T11:02:38Z",
              "path": "src/Build/BuildCheck/Utilities/EnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal static class EnumerableExtensions\n+{\n+    /// <summary>\n+    /// Concatenates items of input sequence into csv string.\n+    /// </summary>\n+    /// <typeparam name=\"T\"></typeparam>\n+    /// <param name=\"source\">Sequence to be turned into csv string.</param>\n+    /// <param name=\"useSpace\">Indicates whether space should be inserted between comas and following items.</param>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}