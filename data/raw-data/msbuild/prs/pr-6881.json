{
  "number": 6881,
  "title": "Enable File Scoped Namespaces For Resources",
  "body": "Fixes #6828\r\n\r\n### Context\r\nCreateCSharpManifestResourceName uses a c# file parser to extract the namespace and classname to create its resource name. See the original issue for a clear explanation on how this breaks with file-scoped namespaces.\r\n\r\n### Changes Made\r\nModify the state machine within the csharp parser to stop looking for a namespace when we encounter a semicolon.\r\n\r\n### Testing\r\n- [x] Add tests for this\r\n\r\n### Notes\r\nReview the final diff",
  "state": "MERGED",
  "createdAt": "2021-09-22T18:28:26Z",
  "updatedAt": "2021-09-29T16:48:31Z",
  "closedAt": "2021-09-29T16:48:30Z",
  "mergedAt": "2021-09-29T16:48:29Z",
  "additions": 122,
  "deletions": 55,
  "changedFiles": 2,
  "headRefName": "filescopednamespace-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f1eca60ec537c4fa3ab7b33278f05600174270b",
          "message": "Add fix for file-scoped namespaces\n\nBecause of the way the csharparser was written,\nwe can easily modify the state machine to stop looking\nfor a namespace when we see a semicolon",
          "committedDate": "2021-09-22T17:29:27Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e348c748e8211c3e36c0eaba0d1f2934f00f791d",
          "message": "Update ALL THE TESTS to include file-scoped namespace variations",
          "committedDate": "2021-09-22T20:35:39Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05ac4971f0c5158600ed3e4e876aac39262047a1",
          "message": "Update link to point to language spec",
          "committedDate": "2021-09-22T20:37:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a25201b380fea8e02b0d46abbcd8da39f159fb75",
          "message": "Reduce test coverage to super-relevant tests. Fix link to language spec",
          "committedDate": "2021-09-22T21:10:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57974461b3fa96b1ca87734a224607415b6d7ba6",
          "message": "Wrap a bow on it. Removed 'expected' as a parameter when it was the same between two tests",
          "committedDate": "2021-09-22T21:22:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82c66fcd5d20b0e2ba0f1d87a01c9421ff73ecfb",
          "message": "PR Feedback. Remove unused test",
          "committedDate": "2021-09-22T22:25:05Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd actually link to the language spec on this\r\n\r\n```suggestion\r\n                        // https://github.com/dotnet/csharplang/blob/088f20b6f9b714a7b68f6d792d54def0f3b3057e/proposals/csharp-10.0/file-scoped-namespaces.md\r\n```",
              "createdAt": "2021-09-22T18:40:30Z",
              "path": "src/Tasks/CSharpParserUtilities.cs",
              "diffHunk": "@@ -79,7 +79,16 @@ private static ExtractedClassName Extract(CSharpTokenizer tokens)\n                 {\n                     if (state.ResolvingNamespace)\n                     {\n-                        if (t.InnerText == \".\")\n+                        // If we see a ';' while resolving a namespace, we assume it's a file-scoped namespace\n+                        // namespace foo.bar; <- At this point in code, we're at the semicolon.\n+                        // class test { ... }\n+                        // https://github.com/dotnet/msbuild/issues/6828",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: I probably would have left the parsed classnames out of the data and in the test.",
              "createdAt": "2021-09-22T20:37:26Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -17,22 +17,29 @@ public void EmptyFile()\n \n         // Simplest case of getting a fully-qualified class name from\n         // a c# file.\n-        [Fact]\n-        public void Simple()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace { class MyClass {} }\", \"MyNamespace.MyClass\")]\n+        [InlineData(\"namespace MyNamespace ; class MyClass {} \", \"MyNamespace.MyClass\")] // file-scoped namespaces",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is invalid C# I'm not sure we should have a test for it--if we change the implementation so that it overwrites (say) on a second file-scoped namespace that shouldn't break any users, so why fail the test?",
              "createdAt": "2021-09-22T20:39:16Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -41,58 +48,76 @@ public void NoNamespace()\n             AssertParse(\"class MyClass{}\", \"MyClass\");\n         }\n \n-        [Fact]\n-        public void SneakyComment()\n+        [Theory]\n+        [InlineData(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\")]\n+        [InlineData(\"/*namespace MyNamespace ; */ class MyClass {}\", \"MyClass\")] // file-scoped namespaces\n+        public void SneakyComment(string fileContents, string expected)\n         {\n-            AssertParse(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void CompoundNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace.Feline ; class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void CompoundNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void NestedNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace2()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {namespace Bovine{public sealed class MyClass {} }} }\", \"MyNamespace.Feline.Bovine.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;namespace Bovine;public sealed class MyClass {}\", \"MyNamespace.Feline.Bovine.MyClass\")] // file-scoped namespaces",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "(and similar for all the cases below)",
              "createdAt": "2021-09-22T20:39:35Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -41,58 +48,76 @@ public void NoNamespace()\n             AssertParse(\"class MyClass{}\", \"MyClass\");\n         }\n \n-        [Fact]\n-        public void SneakyComment()\n+        [Theory]\n+        [InlineData(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\")]\n+        [InlineData(\"/*namespace MyNamespace ; */ class MyClass {}\", \"MyClass\")] // file-scoped namespaces\n+        public void SneakyComment(string fileContents, string expected)\n         {\n-            AssertParse(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void CompoundNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace.Feline ; class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void CompoundNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void NestedNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace2()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {namespace Bovine{public sealed class MyClass {} }} }\", \"MyNamespace.Feline.Bovine.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;namespace Bovine;public sealed class MyClass {}\", \"MyNamespace.Feline.Bovine.MyClass\")] // file-scoped namespaces",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'll revert theory-ified tests that were modified to account for a broken file-scoped namespace test.",
              "createdAt": "2021-09-22T20:57:51Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -41,58 +48,76 @@ public void NoNamespace()\n             AssertParse(\"class MyClass{}\", \"MyClass\");\n         }\n \n-        [Fact]\n-        public void SneakyComment()\n+        [Theory]\n+        [InlineData(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\")]\n+        [InlineData(\"/*namespace MyNamespace ; */ class MyClass {}\", \"MyClass\")] // file-scoped namespaces\n+        public void SneakyComment(string fileContents, string expected)\n         {\n-            AssertParse(\"/*namespace MyNamespace { */ class MyClass {} /* } */\", \"MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void CompoundNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace.Feline ; class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void CompoundNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace.Feline { class MyClass {} }\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;class MyClass {} \", \"MyNamespace.Feline.MyClass\")] // file-scoped namespaces\n+        public void NestedNamespace(string fileContents, string expected)\n         {\n-            AssertParse(\"namespace MyNamespace{ namespace Feline {class MyClass {} }}\", \"MyNamespace.Feline.MyClass\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void NestedNamespace2()\n+        [Theory]\n+        [InlineData(\"namespace MyNamespace{ namespace Feline {namespace Bovine{public sealed class MyClass {} }} }\", \"MyNamespace.Feline.Bovine.MyClass\")]\n+        [InlineData(\"namespace MyNamespace; namespace Feline ;namespace Bovine;public sealed class MyClass {}\", \"MyNamespace.Feline.Bovine.MyClass\")] // file-scoped namespaces",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Additional cases here aren't _bad_ but I'm not sure they're providing a ton of value. Would any of these have broken at any point while you were developing the fix?",
              "createdAt": "2021-09-22T20:42:19Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -168,136 +193,202 @@ public void ScopelessNamespaceSyntaxError()\n             AssertParse(\"namespace i; namespace j { class a {} }\", null);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeBool()\n+        [Theory]\n+        [InlineData(\"[assembly :AssemblyDelaySign(false)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :AssemblyDelaySign(false)] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeBool(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :AssemblyDelaySign(false)] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeString()\n+        [Theory]\n+        [InlineData(\"[assembly :MyString(\\\"namespace\\\")] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyString(\\\"namespace\\\")] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeString(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :MyString(\\\"namespace\\\")] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeInt()\n+        [Theory]\n+        [InlineData(\"[assembly :MyInt(55)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyInt(55)] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeInt(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :MyInt(55)] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeReal()\n+        [Theory]\n+        [InlineData(\"[assembly :MyReal(5.5)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyReal(5.5)] namespace i; class a { }\", \"i.a\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "They wouldn't have, but it didn't feel right leaving perfectly valid tests unmodified WRT file-scoped namespaces",
              "createdAt": "2021-09-22T20:56:19Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -168,136 +193,202 @@ public void ScopelessNamespaceSyntaxError()\n             AssertParse(\"namespace i; namespace j { class a {} }\", null);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeBool()\n+        [Theory]\n+        [InlineData(\"[assembly :AssemblyDelaySign(false)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :AssemblyDelaySign(false)] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeBool(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :AssemblyDelaySign(false)] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeString()\n+        [Theory]\n+        [InlineData(\"[assembly :MyString(\\\"namespace\\\")] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyString(\\\"namespace\\\")] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeString(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :MyString(\\\"namespace\\\")] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeInt()\n+        [Theory]\n+        [InlineData(\"[assembly :MyInt(55)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyInt(55)] namespace i; class a { }\", \"i.a\")]\n+        public void AssemblyAttributeInt(string fileContents, string expected)\n         {\n-            AssertParse(\"[assembly :MyInt(55)] namespace i { class a { } }\", \"i.a\");\n+            AssertParse(fileContents, expected);\n         }\n \n-        [Fact]\n-        public void AssemblyAttributeReal()\n+        [Theory]\n+        [InlineData(\"[assembly :MyReal(5.5)] namespace i { class a { } }\", \"i.a\")]\n+        [InlineData(\"[assembly :MyReal(5.5)] namespace i; class a { }\", \"i.a\")]",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wrong URL replacement :)",
              "createdAt": "2021-09-22T20:44:06Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -44,7 +44,7 @@ Stream binaryStream\n             {\n                 culture = item.GetMetadata(\"Culture\");\n                 // If 'WithCulture' is explicitly set to false, treat as 'culture-neutral' and keep the original name of the resource.\n-                // https://github.com/dotnet/msbuild/issues/3064\n+                // https://github.com/dotnet/csharplang/blob/088f20b6f9b714a7b68f6d792d54def0f3b3057e/proposals/csharp-10.0/file-scoped-namespaces.md",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n```",
              "createdAt": "2021-09-22T21:27:36Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -253,19 +269,21 @@ public void ClassAttributeStringIsCloseScope()\n             AssertParse(\"namespace i { [MyString(\\\"}\\\")] class a { } }\", \"i.a\");\n         }\n \n-        [Fact]\n-        public void NameSpaceStructEnum()\n+        [Theory]\n+        [InlineData(\"namespace n { public struct s {  enum e {} } class c {} }\")]\n+        [InlineData(\"namespace n; public struct s {  enum e {} } class c {}\")] // file-scoped namespace\n+        public void NameSpaceStructEnum(string fileContents)\n         {\n-            AssertParse(\"namespace n { public struct s {  enum e {} } class c {} }\", \"n.c\");\n+            AssertParse(fileContents, \"n.c\");\n         }\n \n         [Fact]\n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a point to this standalone test now? isn't it covered by one of the ones you changed above?",
              "createdAt": "2021-09-22T22:03:26Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -333,18 +390,34 @@ namespace i\n \n \n \n+        [Theory]\n+        [InlineData(@\"\n+namespace n2\n+// namespace n1\n+{ class c {} }\")]\n+        [InlineData(@\"\n+namespace n2;\n+// namespace n1\n+class c {}\")]\n+        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored(string fileContents)\n+        {\n+            AssertParse(fileContents, \"n2.c\");\n+        }\n+\n         [Fact]\n-        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored()\n+        public void FileScoped_Namespace()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "After the recent edits adding comments for every instance of a filescoped namespace, we can get rid of this one.",
              "createdAt": "2021-09-22T22:22:21Z",
              "path": "src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs",
              "diffHunk": "@@ -333,18 +390,34 @@ namespace i\n \n \n \n+        [Theory]\n+        [InlineData(@\"\n+namespace n2\n+// namespace n1\n+{ class c {} }\")]\n+        [InlineData(@\"\n+namespace n2;\n+// namespace n1\n+class c {}\")]\n+        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored(string fileContents)\n+        {\n+            AssertParse(fileContents, \"n2.c\");\n+        }\n+\n         [Fact]\n-        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored()\n+        public void FileScoped_Namespace()",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}