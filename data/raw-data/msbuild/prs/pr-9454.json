{
  "number": 9454,
  "title": "Fix restore handling in Terminal Logger",
  "body": "Fixes #9323\r\n\r\n### Context\r\nThere are 4 related problems that occur in the issue #9323:\r\n\r\n1. The logger fails and throws an internal logger exception because of the wrong assumptions about restore target appearance in the build. \r\n2. The internal logger exception is caught and causes the build to shut down all loggers, including terminal logger. Because it happens before the build finished event is produced or processed by terminal logger, the rendering thread is not finished, and it leads to an infinite hang.\r\n3. The errors during restore are not logged.\r\n4. There is inconsistency with showing the message error MSB4017. If the internal logger exception is thrown from one place it shows, from another - not. In the current situation the build and logger are shut downed, but the message did not appear, which is confusing. (see #9455)\r\n\r\n### Changes Made\r\nFixed first 2 errors: \r\n1. Improved the handling of the restore such that there should not be throws. Only first restore that happens would be specially treated.  \r\n2. I added shutting down of the render thread when shutting down the logger. \r\n\r\n### Testing\r\nlocally tested, unit tests\r\n\r\n### Notes\r\nCompatible with PR #9424, which covers the problem 3.",
  "state": "MERGED",
  "createdAt": "2023-11-24T14:34:26Z",
  "updatedAt": "2023-11-27T14:24:15Z",
  "closedAt": "2023-11-27T14:24:14Z",
  "mergedAt": "2023-11-27T14:24:14Z",
  "additions": 19,
  "deletions": 9,
  "changedFiles": 1,
  "headRefName": "fix-restore",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4813efed14706d3eee5b75cd0e0b2153b996dc1c",
          "message": "Fix circular restore",
          "committedDate": "2023-11-24T13:31:19Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f5342b3caedeb441d3a61449118336d752452860",
          "message": "Only first restore should be specially treated",
          "committedDate": "2023-11-24T14:31:27Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b95cbf368e0cfa6f797f75bbb5405d2597fbc33d",
          "message": "Adress PR comments",
          "committedDate": "2023-11-27T11:49:19Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4e31d13f09b72eb30aa38410a6af97c04a72c3d",
          "message": "Adress PR comments",
          "committedDate": "2023-11-27T13:30:07Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "In ideal case there'd as well be some signalization and `ThreadProc` would bail out immediately: https://github.com/dotnet/msbuild/blob/main/src/MSBuild/TerminalLogger/TerminalLogger.cs#L670 (e.g. `_cts.WaitHandle.WaitOne(1_000 / 30)`). And unless the `lock` wait is time limited as well - the `Join` here should probably have timeout ro prevent deadlock. Reasonably long wait - e.g. a second - is fine in both cases.\r\n",
              "createdAt": "2023-11-27T07:13:34Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -229,6 +234,8 @@ public void Initialize(IEventSource eventSource)\n     /// <inheritdoc/>\n     public void Shutdown()\n     {\n+        _cts.Cancel();\n+        _refresher?.Join();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "That's a great point. The build currently spends ~16 ms on average waiting for the `Sleep` to finish.",
              "createdAt": "2023-11-27T07:25:12Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -229,6 +234,8 @@ public void Initialize(IEventSource eventSource)\n     /// <inheritdoc/>\n     public void Shutdown()\n     {\n+        _cts.Cancel();\n+        _refresher?.Join();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I agree that avoiding the extra waiting would be great, let's use the wait handle. As for the deadlock prevention, I here agree with Ladi that I do not like uncertainty of timeout in the Join. I do not yet see any opportunities for the deadlock here as well: the shutdown (and regular termination of TL) does not have a lock at all, since at this moment we are ok with possible race conditions that absence of lock may introduce. If the locked section of render thread is indefinitely long (because of the deadlock with something else for example), that is not a problem of introduced code, that is a problem we need to address for the rendering thread. Because the timeout on the join will lead to the same behavior as absence - just a hang.",
              "createdAt": "2023-11-27T08:56:56Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -229,6 +234,8 @@ public void Initialize(IEventSource eventSource)\n     /// <inheritdoc/>\n     public void Shutdown()\n     {\n+        _cts.Cancel();\n+        _refresher?.Join();",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "I lack the knowledge of actual TL details - so I was just setting my eyes on seeing `Shutdown` waiting for a thread that can be waiting for a lock.\r\nAs soon as we know our locking is properly handled and hence `Shutdown` is guaranteed to finish - I'm not insisting on timeout.\r\n\r\nI still feel bit strongly opinionated about replacing the `Sleep` with `WaitOne` though :-) - so waiting with sign-off for that one (or other contra-arguments)",
              "createdAt": "2023-11-27T10:00:27Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -229,6 +234,8 @@ public void Initialize(IEventSource eventSource)\n     /// <inheritdoc/>\n     public void Shutdown()\n     {\n+        _cts.Cancel();\n+        _refresher?.Join();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The WaitOne change is on its way. I will commit it soon :)",
              "createdAt": "2023-11-27T11:40:06Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -229,6 +234,8 @@ public void Initialize(IEventSource eventSource)\n     /// <inheritdoc/>\n     public void Shutdown()\n     {\n+        _cts.Cancel();\n+        _refresher?.Join();",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        while (!_cts.Token.WaitHandle.WaitOne(1_000 / 30))\r\n```\r\n\r\nLess code and avoids the last `DisplayNodes` call when the waithandle is signaled.",
              "createdAt": "2023-11-27T13:19:06Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -667,7 +678,7 @@ private void ThreadProc()\n     {\n         while (!_cts.IsCancellationRequested)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}