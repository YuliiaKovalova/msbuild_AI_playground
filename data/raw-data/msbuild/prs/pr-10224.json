{
  "number": 10224,
  "title": "BuildCheck Replay Mode",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/9760\r\n\r\n### Refactoring of BuildCheck infrastructure\r\nCurrently BuildCheck uses `LoggingService` and `LoggingContext` produced by the `AnalyzerLoggingContextFactory`. \r\n\r\n1. Removed usage of `LoggingService` instance and instead used `LoggingContext` to log events. This was needed because `BuildCheckManager` could use the `LoggingService` instance from the very first build that is no longer available afterwards. The commits: \r\nhttps://github.com/dotnet/msbuild/pull/10224/commits/31af24286e62c37d08bf240142c47363a3efb081\r\nhttps://github.com/dotnet/msbuild/pull/10224/commits/e47a8ff4c194a681caa284d05265acf4cc2fd815\r\n\r\n2. Now I needed to decouple from `AnalyzerLoggingContext : LoggingContext`. The only usage of `AnalyzerLoggingContext` are these methods: `LogComment`, `LogCommentFromText`, `LogErrorFromText` and `LogBuildEvent`. So, I created [IAnalysisContext](https://github.com/dotnet/msbuild/pull/10224/files#diff-8ede57dd11e507c07c6e7d8c3ca7e671e51f1130b512f882e4c96a1c5fe4724f) with similar methods, and the names start with `Dispatch`:\r\n```csharp\r\nnamespace Microsoft.Build.Experimental.BuildCheck;\r\n\r\ninternal interface IAnalysisContext\r\n{\r\n    BuildEventContext BuildEventContext { get; }\r\n\r\n    void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs);\r\n\r\n    void DispatchBuildEvent(BuildEventArgs buildEvent);\r\n\r\n    void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message);\r\n\r\n    void DispatchAsCommentFromText(MessageImportance importance, string message);\r\n}\r\n```\r\nThen created [AnalysisLoggingContext : IAnalysis](https://github.com/dotnet/msbuild/pull/10224/files#diff-3c5bf715100118a42bd25b5858cec6a7749bd00326cfa9a08fbf93c14cdcc0d3) that uses `LoggingService` and [AnalysisLoggingContextFactory](https://github.com/dotnet/msbuild/pull/10224/files#diff-c273906672364942e8a2a26cc2366a41b4fe8dc99f926a53a24050ec39e44a6e) similar to the existing [AnalyzerLoggingContextFactory](https://github.com/dotnet/msbuild/blob/main/src/Build/BuildCheck/Logging/AnalyzerLoggingContextFactory.cs).\r\n\r\n### Implementing BuildCheck Replay Mode\r\n\r\n1. Now, I need to be able to produce new `BuildEventArgs` and invoke it for the loggers to pick it up. Similar to what `LoggingService` does. For that reason, implemented [AnalysisDispatchingContext : IAnalysisContext](https://github.com/dotnet/msbuild/pull/10224/files#diff-a824a12c3a38c1d981c88f5e33c1d96422045150497acaba26243796ff94e34b) and the factory - [AnalysisDispatchingContextFactory](https://github.com/dotnet/msbuild/pull/10224/files#diff-a54dcf7243a696cfef968c415e8459e3031257a44fd1d9069eac93ff5330bfad). \r\nBecause the code for the creation of the events was duplicated, I put it all in a helper class [EventsCreatorHelper](https://github.com/dotnet/msbuild/pull/10224/files#diff-6649e71cd78dd79d454d51e9b94b351e2c8f5ba04cbf6a0b8ee92a25aefe21b5).\r\n\r\n2. Seperated the logic of handling the events from [BuildCheckConnectorLogger](https://github.com/dotnet/msbuild/pull/10224/files#diff-deb965974d0dca90e3f58325cf0bbe343d365ae60016e5890c91b793af1fb475) and put it into [BuildCheckBuildEventHandler](https://github.com/dotnet/msbuild/pull/10224/files#diff-dc503c7427b3674378aecd744cd4cc1b401a768c161840e0409a35277f7c1c28) to reuse it later.\r\n\r\n3. The last part. When replaying binary log with BuildCheck enabled, I create a new [IEventSource mergedEventSource](https://github.com/dotnet/msbuild/pull/10224/files#diff-104785ecaf0b4caa6a56a0c085d88ca68f8cfdddfc37e3a3c4006aada53abd1bR39). The logic is extracted into a new static class [BuildCheckReplayModeConnector](https://github.com/dotnet/msbuild/pull/10224/files#diff-104785ecaf0b4caa6a56a0c085d88ca68f8cfdddfc37e3a3c4006aada53abd1b)\r\n* The events from the `replayEventSource` are passed to the `mergedEventSource` unchanged.\r\n* Attached `BuildCheckBuildEventHandler.HandleBuildEvent` to the `replayEventSource.AnyEventRaised` event, in order to produce new events from BuildCheck.  \r\n* The `BuildCheckBuildEventHandler` instance uses `mergedEventSource` to invoke new events\r\n* All the loggers initialize with this event source, not with `BinaryLogReplayEventSource replaySource`\r\n\r\n![diagram drawio (2)](https://github.com/dotnet/msbuild/assets/114938397/3bc3b709-2c3c-49ea-b7d3-717174fa61b2)\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-06-11T19:32:48Z",
  "updatedAt": "2024-06-26T10:57:15Z",
  "closedAt": "2024-06-26T08:51:27Z",
  "mergedAt": "2024-06-26T08:51:27Z",
  "additions": 658,
  "deletions": 353,
  "changedFiles": 31,
  "headRefName": "buildCheck-replay-mode-dispatcher",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "31af24286e62c37d08bf240142c47363a3efb081",
          "message": "use AnalyzerLoggingContext instead of LoggingService in BuildCheckAcquisitionModule",
          "committedDate": "2024-06-11T12:56:36Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bc63e185928dbe309db08ab8f55ad981f1119ee7",
          "message": "include buildCheck unit tests in sln",
          "committedDate": "2024-06-11T13:30:44Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e47a8ff4c194a681caa284d05265acf4cc2fd815",
          "message": "use AnalyzerLoggingContext instead of LoggingService in BuildCheckManager",
          "committedDate": "2024-06-11T13:40:09Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "074377515607076832551adebbfce47fdd854ba0",
          "message": "create IAnalysisContext in order to handle BuildEventContext",
          "committedDate": "2024-06-11T17:09:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc86743f346349d90d299f7f0a1d2278ebf41977",
          "message": "add e2e test for analyze on build replay",
          "committedDate": "2024-06-11T17:19:10Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6961d579489a1201b93f0cbb6c5997b5d2f3015a",
          "message": "implement analyze on binary log replay",
          "committedDate": "2024-06-11T18:59:11Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b9f41657bd129ac39266075b6893014f6b3a8b8c",
          "message": "remove old  AnalyzerLoggingContext",
          "committedDate": "2024-06-11T19:15:08Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ed4a7919b60ac5edda15360f245af24c703bf04",
          "message": "remove Microsoft.Build.Experimental.BuildCheck.Logging",
          "committedDate": "2024-06-13T09:51:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b732de8eef79d4e37f429a1c9859265691bf920a",
          "message": "create EventCreatorHelper",
          "committedDate": "2024-06-13T10:51:14Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c08a5eec0f15459d205e92d10775fb01a09870a",
          "message": "renamed BuildEventArgsDispatcher file to EventArgsDispatcher according to the class name",
          "committedDate": "2024-06-13T10:55:37Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b2e5b5bb4cd67ca800e6d6cb4d2a4702dda7fab",
          "message": "1. decoupled event handling from BuildCheckConnectorLogger in order to reuse it for binlog replay\n2. removed inheritance of EventArgsDispatcher from BinaryLogReplayEventSource, instead use it as a field\n3. created BuildCheckEventArgsDispatcher",
          "committedDate": "2024-06-13T15:46:20Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e2f0bc01c886bf86014b21d8c9891b73f274c5f",
          "message": "use Action<BuildEventArgs> dispatch instead of EventArgsDispatcher in AnalysisDisatcherContext;\nremove commented code",
          "committedDate": "2024-06-13T16:14:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0cf40b178f97f2bc8751d4866fbe2acb2fb5b8f1",
          "message": "rename variable",
          "committedDate": "2024-06-13T16:16:53Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6feca72c4935d2c2aa6f89ece87fa2e2a005f8d8",
          "message": "small fix",
          "committedDate": "2024-06-13T16:18:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea30fc4d924f9463527c6a246678104a219a379a",
          "message": "changed the implementation - introduce BuildCheckBinaryLogReplaySourcerWrapper",
          "committedDate": "2024-06-14T14:28:02Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bce1a4471508e95992eced5a33abcced3f3d4db6",
          "message": "make BuildCheckBinaryLogReplaySourcerWrapper internal",
          "committedDate": "2024-06-17T11:02:38Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6506888f21c4b1398ce241333a2f48eaae3fcd59",
          "message": "remove BuildCheckBinaryLogReplaySourcerWrapper",
          "committedDate": "2024-06-17T13:35:48Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "30873a4812fc38b2e747923bb46b010a9a9f60ae",
          "message": "use the event source that merges events from the binlog replay and nthe new events produced by build check",
          "committedDate": "2024-06-18T12:16:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24418b379d5f30e707756bd98ff6ed6eb027fe6e",
          "message": "Revert \"use the event source that merges events from the binlog replay and nthe new events produced by build check\"\n\nThis reverts commit 30873a4812fc38b2e747923bb46b010a9a9f60ae.",
          "committedDate": "2024-06-18T12:16:53Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50ed0b7482bb4bd6c39eea78fc33d655dfe5b8ab",
          "message": "Reapply \"use the event source that merges events from the binlog replay and nthe new events produced by build check\"\n\nThis reverts commit 24418b379d5f30e707756bd98ff6ed6eb027fe6e.",
          "committedDate": "2024-06-18T12:17:18Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "624ff6e6cf250dc02a8c8f862d762effaf52cccc",
          "message": "simplify the design: pass the EventArgsDispatcher to the AnalysisDispatchingContextFactory constructor rather thatn create its own",
          "committedDate": "2024-06-18T12:27:13Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e81c3b38511f7ec5a2df685fd8b6b0b76e543ed",
          "message": "implement BuildCheckReplayModeConnector",
          "committedDate": "2024-06-19T08:05:51Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40d0e3b33f6188617d09bb7ee5cfa9cfeb46c362",
          "message": "add xml comments",
          "committedDate": "2024-06-19T08:21:20Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e6694e1d00569b986ee5a08204d99319faf0c01",
          "message": "rename method",
          "committedDate": "2024-06-19T08:47:21Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9fbfab1255092200c58d9a54af6f8d80b383058",
          "message": "make BuildManager.EnableBuildCheck internal",
          "committedDate": "2024-06-19T11:36:59Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "393f8b0424090e80798d1016da954a1052a58153",
          "message": "Merge branch 'main' into buildCheck-replay-mode-dispatcher",
          "committedDate": "2024-06-20T12:50:18Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6b98451bc1199593362069d619a6cc8153a314c0",
          "message": "add check for BC0102 in the test; set same timeout",
          "committedDate": "2024-06-20T12:56:57Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "878fc888b78ce080ed3c542475532f81e32a10b0",
          "message": "merge from main",
          "committedDate": "2024-06-20T12:59:27Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b8c171406e0669abbdcdfe0a94c9da47b778d540",
          "message": "remove skip from the test",
          "committedDate": "2024-06-20T13:01:24Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd5e4f529fc1cd4aab240f5953fc448ef3455546",
          "message": "Update src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-20T16:09:31Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00f9681fe6f14fea3197ea43531204bd78ab1430",
          "message": "Update src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-20T16:09:42Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eee06cc914bcc10139e185965470fc0a5e8b6fe0",
          "message": "Merge branch 'main' into buildCheck-replay-mode-dispatcher",
          "committedDate": "2024-06-20T16:13:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5057bce19f546970b2b99ba1263de6732c94710",
          "message": "Update src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-20T16:17:40Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3a47868d72334ecbd0e20bb41626607aaaedd9e",
          "message": "Update src/Build/BackEnd/Shared/EventsCreatorHelper.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-20T16:22:11Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2cdd886e86c506408395734aa6b9470a354c891",
          "message": "Update src/Build/BackEnd/Shared/EventsCreatorHelper.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-06-20T16:22:34Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a7fc21a931dabf6829c6445892e27312039ed64",
          "message": "small fix",
          "committedDate": "2024-06-21T11:37:33Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "965ad711826bfa6196fee6d9d09c385aa5de5a15",
          "message": "add summary for IAnalysisContext",
          "committedDate": "2024-06-21T11:59:50Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50c1f78ccc6114f96d268eedd70728ba9296aa6c",
          "message": "use VerifyThrowInternalNull instead of VerifyThrowArgumentNull",
          "committedDate": "2024-06-21T12:48:13Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ed4347e549e5e3b5337478ca723aecef7a34b10",
          "message": "compile all BuildCheck\\**\\*.cs files instead of manually specifying every sing;e file",
          "committedDate": "2024-06-24T12:43:05Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1815bda5c9a1df9b944a20efa0f0492b6d9aa48",
          "message": "add doc comment for BuildManager.EnableBuildCheck method",
          "committedDate": "2024-06-25T09:45:46Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f7d161de7a0046c708e3dc4fda7fd3e78f27051",
          "message": "add skips for e2e flak tests",
          "committedDate": "2024-06-26T07:44:57Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a4e6b059126d76f7515c8416963f5bc63ba0c92",
          "message": "fix typo in doc comment",
          "committedDate": "2024-06-26T07:53:33Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31a4ac3ad819bcc46e1741d1b0fdf6e1a57edc14",
          "message": "fix typos + improve doc comment",
          "committedDate": "2024-06-26T07:58:58Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8311b116e38ad8854fb713cd2c08cf7752d9baad",
          "message": "improve doc comment",
          "committedDate": "2024-06-26T08:03:54Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks like there is a compatibility problem \r\n```\r\n.dotnet\\sdk\\8.0.201\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ApiCompat.ValidatePackage.targets(39,5): error CP0007: (NETCORE_ENGINEERING_TELEMETRY=Build) Type 'Microsoft.Build.Logging.BinaryLogReplayEventSource' does not inherit from base type 'Microsoft.Build.Logging.EventArgsDispatcher' on ref/net472/Microsoft.Build.dll but it does on [Baseline] ref/net472/Microsoft.Build.dll\r\n```\r\nI will change the implementation slightly to make it compatible",
        "createdAt": "2024-06-14T10:57:02Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "One diagram I'd like (not blocking for this PR but I think it'd help) is something like this:\r\n\r\n```mermaid\r\ngraph LR\r\nReal[Live build] -->|EventArgs| mux[???] -->|BuildCheck API| check[BuildCheck<br/><i>#40;doesn't care about<br/>live vs replay#41;</i>]\r\nlog[Replayed log] -->|EventArgs| mux\r\n\r\ncheck -->|Check results| out[???]\r\n```\r\n\r\nwith those question-mark blocks filled in.",
        "createdAt": "2024-06-20T15:53:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Events come from BinaryLogReplayEventSource and passed to\r\n* the IEvent mergedEventSource unchanged\r\n* the BuildCheckBuildEventHandler, where new events are produced from the BuildCheck\r\n\r\nThe new events from BuildCheck are passed to the mergedEventSource\r\nLoggers getting events from the mergedEventSource",
        "createdAt": "2024-06-21T11:40:02Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "![BuildCheckDiagram](https://github.com/dotnet/msbuild/assets/114938397/5c1a81b8-91e9-402e-9348-182d5ee00d02)\r\n",
        "createdAt": "2024-06-21T12:23:29Z",
        "author": {
          "login": "surayya-MS"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "why does Expander need `AnalyzerLoggingContext`?",
              "createdAt": "2024-06-11T19:37:07Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2940,7 +2940,7 @@ private static ProjectPropertyInstance InstantiateProjectPropertyInstance(Projec\n             _itemDefinitions = new RetrievableEntryHashSet<ProjectItemDefinitionInstance>(MSBuildNameIgnoreCaseComparer.Default);\n             _hostServices = buildParameters.HostServices;\n             this.ProjectRootElementCache = buildParameters.ProjectRootElementCache;\n-            _loggingContext = new AnalyzerLoggingContext(loggingService, buildEventContext);\n+            _loggingContext = new AlwaysValidLoggingContext(loggingService, buildEventContext);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "It needs any loggingContext. This one was just only one creatable with availalbel info (we cannot create node/project/target/...-LoggingContext here)\r\n\r\nAs to why - it was historically accepting LoggingContext as optional parameter in it's numerous methods - so the control flow and compexity of the code was unnecesarily complicated. In order to be able to transfer info from evauation (and expansion) from Evaluator (and Expander) to the BuildCheck (e.g. acquisition request expressed via property function, or the info abourt property reads/writes) - we started to need LoggingContext deterministicaly.",
              "createdAt": "2024-06-12T05:50:50Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2940,7 +2940,7 @@ private static ProjectPropertyInstance InstantiateProjectPropertyInstance(Projec\n             _itemDefinitions = new RetrievableEntryHashSet<ProjectItemDefinitionInstance>(MSBuildNameIgnoreCaseComparer.Default);\n             _hostServices = buildParameters.HostServices;\n             this.ProjectRootElementCache = buildParameters.ProjectRootElementCache;\n-            _loggingContext = new AnalyzerLoggingContext(loggingService, buildEventContext);\n+            _loggingContext = new AlwaysValidLoggingContext(loggingService, buildEventContext);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "note: bring this skip back for this test and add it for `SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay`. \r\nFor now I left them like this to demonstrate that the tests are passing",
              "createdAt": "2024-06-13T16:37:33Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -31,11 +31,72 @@ public EndToEndTests(ITestOutputHelper output)\n \n     public void Dispose() => _env.Dispose();\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need to be public?",
              "createdAt": "2024-06-14T21:38:45Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public interface IBuildEventHandler",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "changed the implementation and deleted the interface",
              "createdAt": "2024-06-18T12:30:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,11 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public interface IBuildEventHandler",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can return just IBinaryLogReplaySource",
              "createdAt": "2024-06-14T22:05:59Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,26 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public BuildCheckBinaryLogReplaySourcerWrapper GetBuildCheckBinaryLogReplayEventSourceWrapper(",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't have to be public",
              "createdAt": "2024-06-14T22:06:37Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs",
              "diffHunk": "@@ -0,0 +1,76 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+public class BuildCheckBinaryLogReplaySourcerWrapper : IBinaryLogReplaySource",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I'd simplify the name. `MergedBinaryLogReplaySource` or similar should suffice",
              "createdAt": "2024-06-14T22:08:46Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBinaryLogReplaySourcerWrapper.cs",
              "diffHunk": "@@ -0,0 +1,76 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+public class BuildCheckBinaryLogReplaySourcerWrapper : IBinaryLogReplaySource",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's probably define some interface - something like `IEventsDispatcher` - so that we don't have to pass around a bare delegate.",
              "createdAt": "2024-06-14T22:10:15Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,26 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public BuildCheckBinaryLogReplaySourcerWrapper GetBuildCheckBinaryLogReplayEventSourceWrapper(\n+            BinaryLogReplayEventSource replayEventSource)\n+        {\n+            _buildParameters = new BuildParameters\n+            {\n+                IsBuildCheckEnabled = true,\n+            };\n+\n+            var buildCheckManagerProvider =\n+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;\n+\n+            buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);\n+\n+            var buildCheckEventHandler = new BuildCheckBuildEventHandler(\n+                new AnalysisDispatchingContextFactory(replayEventSource.Dispatch),",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. the Dispatch method doesn't have to be from the replayEventSource (which causes chance for infinit recursion, if we subscribe to same event as we'd emit). There can be a new one-off instance (of EventArgsDispatcher) that just consumes the EventArgs and sends them as events; and the BuildCheckBinaryLogReplaySourcerWrapper would then just subscribe to that instance and the original replayEventSource and emit merged events.",
              "createdAt": "2024-06-14T22:13:48Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,26 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public BuildCheckBinaryLogReplaySourcerWrapper GetBuildCheckBinaryLogReplayEventSourceWrapper(\n+            BinaryLogReplayEventSource replayEventSource)\n+        {\n+            _buildParameters = new BuildParameters\n+            {\n+                IsBuildCheckEnabled = true,\n+            };\n+\n+            var buildCheckManagerProvider =\n+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;\n+\n+            buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);\n+\n+            var buildCheckEventHandler = new BuildCheckBuildEventHandler(\n+                new AnalysisDispatchingContextFactory(replayEventSource.Dispatch),",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "done something similar + renaming ",
              "createdAt": "2024-06-18T12:31:09Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,26 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public BuildCheckBinaryLogReplaySourcerWrapper GetBuildCheckBinaryLogReplayEventSourceWrapper(\n+            BinaryLogReplayEventSource replayEventSource)\n+        {\n+            _buildParameters = new BuildParameters\n+            {\n+                IsBuildCheckEnabled = true,\n+            };\n+\n+            var buildCheckManagerProvider =\n+                    ((IBuildComponentHost)this).GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider;\n+\n+            buildCheckManagerProvider!.Instance.SetDataSource(BuildCheckDataSource.EventArgs);\n+\n+            var buildCheckEventHandler = new BuildCheckBuildEventHandler(\n+                new AnalysisDispatchingContextFactory(replayEventSource.Dispatch),",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It feels that the interface should be named `IAnalysisLoggingContext`",
              "createdAt": "2024-06-14T22:17:36Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisLoggingContext : IAnalysisContext",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I don't agree, because the methods of `IAnalysisContext` start with `Dispatch..`. So, maybe `IAnalysisDispatchingContext`?",
              "createdAt": "2024-06-18T12:32:31Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisLoggingContext : IAnalysisContext",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "I rather meant that the class and interface should likely be named similarly.\r\n\r\nI like the `IAnalysisDispatchingContext`. And probably it's not analysis/buildcheck specific - so maybe just `IDispatchingContext` for brevity?",
              "createdAt": "2024-06-18T17:34:37Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisLoggingContext : IAnalysisContext",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Actually looking through the code - I take my previous comment back - the naming makes sense.",
              "createdAt": "2024-06-18T18:43:56Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisLoggingContext.cs",
              "diffHunk": "@@ -0,0 +1,43 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisLoggingContext : IAnalysisContext",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This deserves a brief xml comment",
              "createdAt": "2024-06-18T18:48:28Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal interface IAnalysisContext",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-06-19T08:22:10Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal interface IAnalysisContext",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Too brief for me I'm afraid. Can you give a bit more detail?",
              "createdAt": "2024-06-20T15:34:25Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal interface IAnalysisContext",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sure. Provided more detailed summary for the interface and its methods.",
              "createdAt": "2024-06-21T12:00:42Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/IAnalysisContext.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal interface IAnalysisContext",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It seems that the only reason why this is on BuildManager is to get the instance of `IBuildCheckManagerProvider`. We should be able to get it different way (e.g. through the singleton). Can we extract it to a separate class, that would be in the `Microsoft.Build.Experimental.BuildCheck` namespace? That way we set a clear message on possible future breakages",
              "createdAt": "2024-06-18T18:59:10Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,34 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public IEventSource GetMergedEventSource(BinaryLogReplayEventSource replayEventSource)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Good idea! Thanks! \r\nI extracted the logic to a separate class in `Microsoft.Build.Experimental.BuildCheck`. However, I pass `BuildManager` to the method, in order to get `IBuildCheckManagerProvider`. Is it okay or did you mean to initialize `IBuildCheckManagerProvider` component somewhere else?",
              "createdAt": "2024-06-19T08:27:53Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,34 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        public IEventSource GetMergedEventSource(BinaryLogReplayEventSource replayEventSource)",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We have a convenience method for this\r\n\r\n```suggestion\r\n        ErrorUtilities.VerifyThrowArgumentNull(buildEvent, nameof(buildEvent));\r\n```",
              "createdAt": "2024-06-18T20:49:00Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,62 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisDispatchingContext : IAnalysisContext\n+{\n+    private readonly EventArgsDispatcher _eventDispatcher;\n+    private readonly BuildEventContext _eventContext;\n+\n+    public AnalysisDispatchingContext(\n+        EventArgsDispatcher dispatch,\n+        BuildEventContext eventContext)\n+    {\n+        _eventDispatcher = dispatch;\n+        _eventContext = eventContext;\n+    }\n+\n+    public BuildEventContext BuildEventContext => _eventContext;\n+\n+    public void DispatchBuildEvent(BuildEventArgs buildEvent)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEvent != null, \"buildEvent is null\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "And with my latest commit\r\n\r\n```suggestion\r\n        ErrorUtilities.VerifyThrowArgumentNull(buildEvent);\r\n```",
              "createdAt": "2024-06-20T15:36:16Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,62 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+internal class AnalysisDispatchingContext : IAnalysisContext\n+{\n+    private readonly EventArgsDispatcher _eventDispatcher;\n+    private readonly BuildEventContext _eventContext;\n+\n+    public AnalysisDispatchingContext(\n+        EventArgsDispatcher dispatch,\n+        BuildEventContext eventContext)\n+    {\n+        _eventDispatcher = dispatch;\n+        _eventContext = eventContext;\n+    }\n+\n+    public BuildEventContext BuildEventContext => _eventContext;\n+\n+    public void DispatchBuildEvent(BuildEventArgs buildEvent)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEvent != null, \"buildEvent is null\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Extreme nit but should we include `BuildCheck\\**\\*.cs` instead of doing these manually?",
              "createdAt": "2024-06-18T21:21:47Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -160,9 +161,16 @@\n     <Compile Include=\"BuildCheck\\Acquisition\\IBuildCheckAcquisitionModule.cs\" />\n     <Compile Include=\"BuildCheck\\Analyzers\\SharedOutputPathAnalyzer.cs\" />\n     <Compile Include=\"BuildCheck\\Analyzers\\DoubleWritesAnalyzer.cs\" />\n+    <Compile Include=\"BuildCheck\\Infrastructure\\AnalysisContext\\AnalysisDispatchingContext.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-06-24T12:43:15Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -160,9 +161,16 @@\n     <Compile Include=\"BuildCheck\\Acquisition\\IBuildCheckAcquisitionModule.cs\" />\n     <Compile Include=\"BuildCheck\\Analyzers\\SharedOutputPathAnalyzer.cs\" />\n     <Compile Include=\"BuildCheck\\Analyzers\\DoubleWritesAnalyzer.cs\" />\n+    <Compile Include=\"BuildCheck\\Infrastructure\\AnalysisContext\\AnalysisDispatchingContext.cs\" />",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When is it expected to be used?",
              "createdAt": "2024-06-20T15:35:43Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// <see cref=\"IAnalysisContext\"/> that uses <see cref=\"EventArgsDispatcher\"/> to dispatch.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "1. [AnalysisDispatchingContext is created in AnalysisDispatchingContextFactory](https://github.com/dotnet/msbuild/pull/10224/files#diff-a54dcf7243a696cfef968c415e8459e3031257a44fd1d9069eac93ff5330bfadR23)\r\n2. [BuildCheckEventHandler uses AnalysisDispatchingContextFacory](https://github.com/dotnet/msbuild/pull/10224/files#diff-104785ecaf0b4caa6a56a0c085d88ca68f8cfdddfc37e3a3c4006aada53abd1bR46) where `EventArgsDispatcher mergedEventSource` is used to dispatch the new events coming from BuildCheck\r\n\r\n",
              "createdAt": "2024-06-20T16:34:05Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// <see cref=\"IAnalysisContext\"/> that uses <see cref=\"EventArgsDispatcher\"/> to dispatch.",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        ErrorUtilities.VerifyThrowArgumentLength(messageResourceName);\r\n```",
              "createdAt": "2024-06-20T15:37:29Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// <see cref=\"IAnalysisContext\"/> that uses <see cref=\"EventArgsDispatcher\"/> to dispatch.\n+/// </summary>\n+internal class AnalysisDispatchingContext : IAnalysisContext\n+{\n+    private readonly EventArgsDispatcher _eventDispatcher;\n+    private readonly BuildEventContext _eventContext;\n+\n+    public AnalysisDispatchingContext(\n+        EventArgsDispatcher dispatch,\n+        BuildEventContext eventContext)\n+    {\n+        _eventDispatcher = dispatch;\n+        _eventContext = eventContext;\n+    }\n+\n+    public BuildEventContext BuildEventContext => _eventContext;\n+\n+    public void DispatchBuildEvent(BuildEventArgs buildEvent)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEvent != null, \"buildEvent is null\");\n+\n+        _eventDispatcher.Dispatch(buildEvent);\n+    }\n+\n+    public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), \"Need resource string for comment message.\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Or should it be an internal error `VerifyThrowInternalLength`?",
              "createdAt": "2024-06-20T15:39:21Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// <see cref=\"IAnalysisContext\"/> that uses <see cref=\"EventArgsDispatcher\"/> to dispatch.\n+/// </summary>\n+internal class AnalysisDispatchingContext : IAnalysisContext\n+{\n+    private readonly EventArgsDispatcher _eventDispatcher;\n+    private readonly BuildEventContext _eventContext;\n+\n+    public AnalysisDispatchingContext(\n+        EventArgsDispatcher dispatch,\n+        BuildEventContext eventContext)\n+    {\n+        _eventDispatcher = dispatch;\n+        _eventContext = eventContext;\n+    }\n+\n+    public BuildEventContext BuildEventContext => _eventContext;\n+\n+    public void DispatchBuildEvent(BuildEventArgs buildEvent)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEvent != null, \"buildEvent is null\");\n+\n+        _eventDispatcher.Dispatch(buildEvent);\n+    }\n+\n+    public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), \"Need resource string for comment message.\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, should be `VerifyThrowInternalLength` because https://github.com/dotnet/msbuild/pull/10272/files#diff-d1e67edbe71d7c812b189c453fa53ec5c9057aa29c2b0877a482dec3b135ea10L29",
              "createdAt": "2024-06-21T11:34:18Z",
              "path": "src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs",
              "diffHunk": "@@ -0,0 +1,65 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd.Logging;\n+using Microsoft.Build.BackEnd.Shared;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// <see cref=\"IAnalysisContext\"/> that uses <see cref=\"EventArgsDispatcher\"/> to dispatch.\n+/// </summary>\n+internal class AnalysisDispatchingContext : IAnalysisContext\n+{\n+    private readonly EventArgsDispatcher _eventDispatcher;\n+    private readonly BuildEventContext _eventContext;\n+\n+    public AnalysisDispatchingContext(\n+        EventArgsDispatcher dispatch,\n+        BuildEventContext eventContext)\n+    {\n+        _eventDispatcher = dispatch;\n+        _eventContext = eventContext;\n+    }\n+\n+    public BuildEventContext BuildEventContext => _eventContext;\n+\n+    public void DispatchBuildEvent(BuildEventArgs buildEvent)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEvent != null, \"buildEvent is null\");\n+\n+        _eventDispatcher.Dispatch(buildEvent);\n+    }\n+\n+    public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(messageResourceName), \"Need resource string for comment message.\");",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know these were preexisting but I'm inclined to fix them since I was thinking about all those overloads:\r\n\r\n```suggestion\r\n        ErrorUtilities.VerifyThrowArgumentNull(buildEventContext);\r\n        ErrorUtilities.VerifyThrowArgumentNull(message);\r\n```",
              "createdAt": "2024-06-20T15:42:13Z",
              "path": "src/Build/BackEnd/Shared/EventsCreatorHelper.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BackEnd.Shared;\n+\n+internal static class EventsCreatorHelper\n+{\n+    public static BuildMessageEventArgs CreateMessageEventFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object?[]? messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEventContext != null, \"buildEventContext was null\");\n+        ErrorUtilities.VerifyThrow(message != null, \"message was null\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "added parameterName too:\r\n```csharp\r\nErrorUtilities.VerifyThrowArgumentNull(buildEventContext, nameof(buildEventContext));\r\nErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));\r\n```",
              "createdAt": "2024-06-21T11:35:54Z",
              "path": "src/Build/BackEnd/Shared/EventsCreatorHelper.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BackEnd.Shared;\n+\n+internal static class EventsCreatorHelper\n+{\n+    public static BuildMessageEventArgs CreateMessageEventFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object?[]? messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEventContext != null, \"buildEventContext was null\");\n+        ErrorUtilities.VerifyThrow(message != null, \"message was null\");",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "it should be `VerifyThrowInternalNull` instead of `VerifyThrowArgumentNull` for the same reason https://github.com/dotnet/msbuild/pull/10272/files#diff-d1e67edbe71d7c812b189c453fa53ec5c9057aa29c2b0877a482dec3b135ea10L29",
              "createdAt": "2024-06-21T12:49:33Z",
              "path": "src/Build/BackEnd/Shared/EventsCreatorHelper.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BackEnd.Shared;\n+\n+internal static class EventsCreatorHelper\n+{\n+    public static BuildMessageEventArgs CreateMessageEventFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object?[]? messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEventContext != null, \"buildEventContext was null\");\n+        ErrorUtilities.VerifyThrow(message != null, \"message was null\");",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        ErrorUtilities.VerifyThrowArgumentNull(buildEventContext);\r\n        ErrorUtilities.VerifyThrowArgumentNull(file);\r\n        ErrorUtilities.VerifyThrowArgumentNull(message);\r\n```",
              "createdAt": "2024-06-20T15:43:27Z",
              "path": "src/Build/BackEnd/Shared/EventsCreatorHelper.cs",
              "diffHunk": "@@ -0,0 +1,63 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BackEnd.Shared;\n+\n+internal static class EventsCreatorHelper\n+{\n+    public static BuildMessageEventArgs CreateMessageEventFromText(BuildEventContext buildEventContext, MessageImportance importance, string message, params object?[]? messageArgs)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEventContext != null, \"buildEventContext was null\");\n+        ErrorUtilities.VerifyThrow(message != null, \"message was null\");\n+\n+        BuildMessageEventArgs buildEvent = new BuildMessageEventArgs(\n+                message,\n+                helpKeyword: null,\n+                senderName: \"MSBuild\",\n+                importance,\n+                DateTime.UtcNow,\n+                messageArgs);\n+        buildEvent.BuildEventContext = buildEventContext;\n+\n+        return buildEvent;\n+    }\n+\n+    public static BuildErrorEventArgs CreateErrorEventFromText(BuildEventContext buildEventContext, string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n+    {\n+        ErrorUtilities.VerifyThrow(buildEventContext != null, \"Must specify the buildEventContext\");\n+        ErrorUtilities.VerifyThrow(file != null, \"Must specify the associated file.\");\n+        ErrorUtilities.VerifyThrow(message != null, \"Need error message.\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Something I'm still struggling with: what events are coming from the different sources? Why do we need both?",
              "createdAt": "2024-06-20T15:55:07Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs",
              "diffHunk": "@@ -0,0 +1,54 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// The class that created an <see cref=\"IEventSource\"/> for binary log replay with BuildCheck enabled.\n+/// </summary>\n+public static class BuildCheckReplayModeConnector\n+{\n+    /// <summary>\n+    /// Gets merged event source for binary log replay with BuildCheck enabled.\n+    /// </summary>\n+    /// <param name=\"buildManager\"><see cref=\"BuildManager\"/> that has <see cref=\"IBuildCheckManagerProvider\"/> component.</param>\n+    /// <param name=\"replayEventSource\">The initial event source.</param>\n+    /// <returns>The merged event source for binary log replay.</returns>\n+    public static IEventSource GetMergedEventSource(\n+        BuildManager buildManager,\n+        IEventSource replayEventSource)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Events come from `BinaryLogREplayEventSource` and passed to\r\n* the `IEvent mergedEventSource` unchanged\r\n*  the `BuildCheckBuildEventHandler`, where new events are produced from the BuildCheck\r\n* the new events from BuildCheck are passed to the `mergedEventSource`\r\n\r\nLoggers getting events from the `mergedEventSource`",
              "createdAt": "2024-06-20T16:29:18Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs",
              "diffHunk": "@@ -0,0 +1,54 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// The class that created an <see cref=\"IEventSource\"/> for binary log replay with BuildCheck enabled.\n+/// </summary>\n+public static class BuildCheckReplayModeConnector\n+{\n+    /// <summary>\n+    /// Gets merged event source for binary log replay with BuildCheck enabled.\n+    /// </summary>\n+    /// <param name=\"buildManager\"><see cref=\"BuildManager\"/> that has <see cref=\"IBuildCheckManagerProvider\"/> component.</param>\n+    /// <param name=\"replayEventSource\">The initial event source.</param>\n+    /// <returns>The merged event source for binary log replay.</returns>\n+    public static IEventSource GetMergedEventSource(\n+        BuildManager buildManager,\n+        IEventSource replayEventSource)",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Ah that super helps pull it together for me! Please immortalize in a comment.",
              "createdAt": "2024-06-20T17:13:08Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs",
              "diffHunk": "@@ -0,0 +1,54 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.BackEnd;\n+using Microsoft.Build.Execution;\n+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+/// <summary>\n+/// The class that created an <see cref=\"IEventSource\"/> for binary log replay with BuildCheck enabled.\n+/// </summary>\n+public static class BuildCheckReplayModeConnector\n+{\n+    /// <summary>\n+    /// Gets merged event source for binary log replay with BuildCheck enabled.\n+    /// </summary>\n+    /// <param name=\"buildManager\"><see cref=\"BuildManager\"/> that has <see cref=\"IBuildCheckManagerProvider\"/> component.</param>\n+    /// <param name=\"replayEventSource\">The initial event source.</param>\n+    /// <returns>The merged event source for binary log replay.</returns>\n+    public static IEventSource GetMergedEventSource(\n+        BuildManager buildManager,\n+        IEventSource replayEventSource)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why are these two different?",
              "createdAt": "2024-06-20T16:02:09Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,154 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Experimental.BuildCheck.Utilities;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+internal class BuildCheckBuildEventHandler\n+{\n+    private readonly IBuildCheckManager _buildCheckManager;\n+    private readonly IAnalysisContextFactory _analyzerContextFactory;\n+\n+    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n+\n+    internal BuildCheckBuildEventHandler(\n+        IAnalysisContextFactory analyzerContextFactory,\n+        IBuildCheckManager buildCheckManager)\n+    {\n+        _buildCheckManager = buildCheckManager;\n+        _analyzerContextFactory = analyzerContextFactory;\n+\n+        _eventHandlers = new()\n+        {\n+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },\n+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },\n+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "One is \"started\", another is \"finished\". moved from here:\r\nhttps://github.com/dotnet/msbuild/blob/48003ed205ab923065179b8ccf367e3b59b6f26e/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs#L161-L162",
              "createdAt": "2024-06-20T16:20:01Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,154 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Experimental.BuildCheck.Utilities;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+internal class BuildCheckBuildEventHandler\n+{\n+    private readonly IBuildCheckManager _buildCheckManager;\n+    private readonly IAnalysisContextFactory _analyzerContextFactory;\n+\n+    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n+\n+    internal BuildCheckBuildEventHandler(\n+        IAnalysisContextFactory analyzerContextFactory,\n+        IBuildCheckManager buildCheckManager)\n+    {\n+        _buildCheckManager = buildCheckManager;\n+        _analyzerContextFactory = analyzerContextFactory;\n+\n+        _eventHandlers = new()\n+        {\n+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },\n+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },\n+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Was this preexisting? I was expecting more like\r\n\r\n```suggestion\r\n    private bool IsMetaProjFile(string? projectFile) => projectFile?.EndsWith(\".metaproj\", StringComparison.OrdinalIgnoreCase) == true;\r\n```",
              "createdAt": "2024-06-20T16:05:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,154 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Experimental.BuildCheck.Utilities;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+internal class BuildCheckBuildEventHandler\n+{\n+    private readonly IBuildCheckManager _buildCheckManager;\n+    private readonly IAnalysisContextFactory _analyzerContextFactory;\n+\n+    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n+\n+    internal BuildCheckBuildEventHandler(\n+        IAnalysisContextFactory analyzerContextFactory,\n+        IBuildCheckManager buildCheckManager)\n+    {\n+        _buildCheckManager = buildCheckManager;\n+        _analyzerContextFactory = analyzerContextFactory;\n+\n+        _eventHandlers = new()\n+        {\n+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },\n+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },\n+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },\n+            { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => HandleBuildCheckAcquisitionEvent((BuildCheckAcquisitionEventArgs)e) },\n+            { typeof(TaskStartedEventArgs), (BuildEventArgs e) => HandleTaskStartedEvent((TaskStartedEventArgs)e) },\n+            { typeof(TaskFinishedEventArgs), (BuildEventArgs e) => HandleTaskFinishedEvent((TaskFinishedEventArgs)e) },\n+            { typeof(TaskParameterEventArgs), (BuildEventArgs e) => HandleTaskParameterEvent((TaskParameterEventArgs)e) },\n+            { typeof(BuildFinishedEventArgs), (BuildEventArgs e) => HandleBuildFinishedEvent((BuildFinishedEventArgs)e) },\n+        };\n+    }\n+\n+    public void HandleBuildEvent(BuildEventArgs e)\n+    {\n+        if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n+        {\n+            handler(e);\n+        }\n+    }\n+\n+    private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n+        {\n+            _buildCheckManager.ProcessEvaluationFinishedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);\n+        }\n+    }\n+\n+    private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n+        {\n+            _buildCheckManager.StartProjectEvaluation(\n+                BuildCheckDataSource.EventArgs,\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs.ProjectFile!);\n+        }\n+    }\n+\n+    private void HandleBuildCheckTracingEvent(BuildCheckTracingEventArgs eventArgs)\n+    {\n+        if (!eventArgs.IsAggregatedGlobalReport)\n+        {\n+            _stats.Merge(eventArgs.TracingData, (span1, span2) => span1 + span2);\n+        }\n+    }\n+\n+    private void HandleTaskStartedEvent(TaskStartedEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskStartedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleTaskFinishedEvent(TaskFinishedEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskFinishedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleTaskParameterEvent(TaskParameterEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskParameterEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eventArgs)\n+        => _buildCheckManager.ProcessAnalyzerAcquisition(\n+                eventArgs.ToAnalyzerAcquisitionData(),\n+                _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));\n+\n+    private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(\".metaproj\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks! Yes, I moved it from all the events handling logic from `BuildCheckConnectorLogger` to this new class\r\nhttps://github.com/dotnet/msbuild/blob/48003ed205ab923065179b8ccf367e3b59b6f26e/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs#L102",
              "createdAt": "2024-06-20T16:17:20Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs",
              "diffHunk": "@@ -0,0 +1,154 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Experimental.BuildCheck.Acquisition;\n+using Microsoft.Build.Experimental.BuildCheck.Utilities;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;\n+\n+internal class BuildCheckBuildEventHandler\n+{\n+    private readonly IBuildCheckManager _buildCheckManager;\n+    private readonly IAnalysisContextFactory _analyzerContextFactory;\n+\n+    private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;\n+\n+    internal BuildCheckBuildEventHandler(\n+        IAnalysisContextFactory analyzerContextFactory,\n+        IBuildCheckManager buildCheckManager)\n+    {\n+        _buildCheckManager = buildCheckManager;\n+        _analyzerContextFactory = analyzerContextFactory;\n+\n+        _eventHandlers = new()\n+        {\n+            { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },\n+            { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },\n+            { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },\n+            { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },\n+            { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => HandleBuildCheckAcquisitionEvent((BuildCheckAcquisitionEventArgs)e) },\n+            { typeof(TaskStartedEventArgs), (BuildEventArgs e) => HandleTaskStartedEvent((TaskStartedEventArgs)e) },\n+            { typeof(TaskFinishedEventArgs), (BuildEventArgs e) => HandleTaskFinishedEvent((TaskFinishedEventArgs)e) },\n+            { typeof(TaskParameterEventArgs), (BuildEventArgs e) => HandleTaskParameterEvent((TaskParameterEventArgs)e) },\n+            { typeof(BuildFinishedEventArgs), (BuildEventArgs e) => HandleBuildFinishedEvent((BuildFinishedEventArgs)e) },\n+        };\n+    }\n+\n+    public void HandleBuildEvent(BuildEventArgs e)\n+    {\n+        if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n+        {\n+            handler(e);\n+        }\n+    }\n+\n+    private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n+        {\n+            _buildCheckManager.ProcessEvaluationFinishedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);\n+        }\n+    }\n+\n+    private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n+        {\n+            _buildCheckManager.StartProjectEvaluation(\n+                BuildCheckDataSource.EventArgs,\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs.ProjectFile!);\n+        }\n+    }\n+\n+    private void HandleBuildCheckTracingEvent(BuildCheckTracingEventArgs eventArgs)\n+    {\n+        if (!eventArgs.IsAggregatedGlobalReport)\n+        {\n+            _stats.Merge(eventArgs.TracingData, (span1, span2) => span1 + span2);\n+        }\n+    }\n+\n+    private void HandleTaskStartedEvent(TaskStartedEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskStartedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleTaskFinishedEvent(TaskFinishedEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskFinishedEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleTaskParameterEvent(TaskParameterEventArgs eventArgs)\n+        => _buildCheckManager.ProcessTaskParameterEventArgs(\n+                _analyzerContextFactory.CreateAnalysisContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+    private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eventArgs)\n+        => _buildCheckManager.ProcessAnalyzerAcquisition(\n+                eventArgs.ToAnalyzerAcquisitionData(),\n+                _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));\n+\n+    private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(\".metaproj\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Doc comment about why/when this should be used please (in general you'd want to enable buildchecks through the `BuildParameters` but this is for replay)",
              "createdAt": "2024-06-24T15:27:26Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,13 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        internal void EnableBuildCheck()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-06-25T09:46:28Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2951,6 +2950,13 @@ private void OnProjectStarted(object sender, ProjectStartedEventArgs e)\n             });\n         }\n \n+        internal void EnableBuildCheck()",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}