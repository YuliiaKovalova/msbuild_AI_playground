{
  "number": 5711,
  "title": "Users/haiz/add verbosity for target circular dependence",
  "body": "As issue #3181 mentioned, add more information for debugging target circular dependence.\r\nFor example, \r\n```xml\r\n    <Target Name=\"TargetA\" AfterTargets=\"Build\" DependsOnTargets=\"TargetB\">\r\n        <Message Text=\"TargetA\"></Message>\r\n    </Target>\r\n    <Target Name=\"TargetB\" DependsOnTargets=\"TargetC\">\r\n        <Message Text=\"TargetB\"></Message>\r\n    </Target>\r\n    <Target Name=\"TargetC\" DependsOnTargets=\"TargetA\">\r\n        <Message Text=\"TargetC\"></Message>\r\n    </Target>\r\n``` \r\nThe error message will be:\r\n`There is a circular dependency in the target dependency graph involving target \"TargetA\". Since \"TargetC\" has \"DependsOn\" dependence on \"TargetA\", the circular is \"TargetA<-TargetC<-TargetB<-TargetA.\"`",
  "state": "MERGED",
  "createdAt": "2020-09-04T09:08:53Z",
  "updatedAt": "2023-01-13T17:54:49Z",
  "closedAt": "2020-12-15T11:01:07Z",
  "mergedAt": "2020-12-15T11:01:07Z",
  "additions": 235,
  "deletions": 93,
  "changedFiles": 17,
  "headRefName": "users/haiz/AddVerbosityForTargetCircularDependence",
  "isDraft": false,
  "author": {
    "login": "haiyuzhu"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "436c472a6e2a7a3cd735da60e4378bb52a746820",
          "message": "add verbose info for target circular dependence",
          "committedDate": "2020-09-04T06:50:34Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "197263e4ede64e480f437fbfc8ba80e6cf28bc7f",
          "message": "update error message",
          "committedDate": "2020-09-04T09:08:15Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5742b019dce6483fb0dc88d9d190d58a9bd990f1",
          "message": "update xlf",
          "committedDate": "2020-09-07T03:52:48Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0961dc082c144ddd78930075a66ec9945c243c52",
          "message": "add UT",
          "committedDate": "2020-09-07T12:22:34Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb91aa5cd63b3062d7259d11af2fd1708f3e9752",
          "message": "update error message format",
          "committedDate": "2020-10-16T06:59:34Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28d28dcc6285fe4f0f301962c5d4acbcb4e165ff",
          "message": "resolve conflicts",
          "committedDate": "2020-10-16T07:22:26Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "haiz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87302fa74474d99a2d843c3c44526757206c73ae",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2020-11-18T05:05:09Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a21241d7a658381a17885323ec23277b81c8aa50",
          "message": "Add CircularDependencyInTargetGraph with same error code to show the circular dependence",
          "committedDate": "2020-12-05T14:00:22Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8323608398c48976efc54a9b10f5cebc6491a24a",
          "message": "revert changes in TaskBuilder",
          "committedDate": "2020-12-06T07:00:00Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "791ba899f8697c75eedc511dd367bb1f9957413c",
          "message": "revert changes in TaskBuilder",
          "committedDate": "2020-12-06T07:04:15Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6335f9c6fa1a351559ace64dd6892a99f7c7a38b",
          "message": "Merge branch 'master' into users/haiz/AddVerbosityForTargetCircularDependence",
          "committedDate": "2020-12-06T07:54:20Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0981570aac92b477604dfd28405d60c92b1ee55d",
          "message": "revert bad changes caused by merge conflicts",
          "committedDate": "2020-12-06T08:19:34Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ead5b8586a42e2b6c69ef75ea6b3755064360901",
          "message": "add type to out keywords\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-12-15T09:12:07Z",
          "author": {
            "name": "Haiyu Zhu",
            "email": "zhuhaiyu1991@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5711) <br/>All CLA requirements met.",
        "createdAt": "2020-09-04T09:09:10Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/not_signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5711) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5711) before we can accept your contribution.<br/><br/>:x: haiyuzhu [sign now](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=5711)<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla.dotnetfoundation.org/check/dotnet/msbuild?pullRequest=5711) it.</sub>",
        "createdAt": "2020-09-04T09:09:10Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Thank you very much for your contribution!",
        "createdAt": "2020-12-15T11:01:17Z",
        "author": {
          "login": "kg"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be good to verify that the reason it's failing is as expected, and the parents are properly printed.",
              "createdAt": "2020-09-08T21:44:56Z",
              "path": "src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs",
              "diffHunk": "@@ -1254,6 +1254,31 @@ public void TestCircularDependencyInCallTarget()\n             Assert.False(success);\n         }\n \n+        /// <summary>\n+        /// Tests a circular dependency target.\n+        /// </summary>\n+        [Fact]\n+        public void TestCircularDependencyTarget()\n+        {\n+            string projectContents = @\"\n+<Project xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">\n+    <Target Name=\"\"TargetA\"\" AfterTargets=\"\"Build\"\" DependsOnTargets=\"\"TargetB\"\">\n+        <Message Text=\"\"TargetA\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetB\"\" DependsOnTargets=\"\"TargetC\"\">\n+        <Message Text=\"\"TargetB\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetC\"\" DependsOnTargets=\"\"TargetA\"\">\n+        <Message Text=\"\"TargetC\"\"></Message>\n+    </Target>\n+</Project>\n+      \";\n+            StringReader reader = new StringReader(projectContents);\n+            Project project = new Project(new XmlTextReader(reader), null, null);\n+            bool success = project.Build(_mockLogger);\n+            Assert.False(success);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Make sense. I figure out a way to check the error message.",
              "createdAt": "2020-10-16T07:02:36Z",
              "path": "src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs",
              "diffHunk": "@@ -1254,6 +1254,31 @@ public void TestCircularDependencyInCallTarget()\n             Assert.False(success);\n         }\n \n+        /// <summary>\n+        /// Tests a circular dependency target.\n+        /// </summary>\n+        [Fact]\n+        public void TestCircularDependencyTarget()\n+        {\n+            string projectContents = @\"\n+<Project xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">\n+    <Target Name=\"\"TargetA\"\" AfterTargets=\"\"Build\"\" DependsOnTargets=\"\"TargetB\"\">\n+        <Message Text=\"\"TargetA\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetB\"\" DependsOnTargets=\"\"TargetC\"\">\n+        <Message Text=\"\"TargetB\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetC\"\" DependsOnTargets=\"\"TargetA\"\">\n+        <Message Text=\"\"TargetC\"\"></Message>\n+    </Target>\n+</Project>\n+      \";\n+            StringReader reader = new StringReader(projectContents);\n+            Project project = new Project(new XmlTextReader(reader), null, null);\n+            bool success = project.Build(_mockLogger);\n+            Assert.False(success);",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to log the parent graph of these, too? Maybe log what it currently logs at normal verbosity and log the parents at diagnostic verbosity?",
              "createdAt": "2020-09-08T21:48:57Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -689,7 +689,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         }\n \n                         // We are already building this target on this request. That's a circular dependency.\n-                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I did some investigation here. I think it is hard to get the parent graph here. \r\nHere are my reasons:\r\n1. We use `_requestEntry.RequestConfiguration.ActivelyBuildingTargets` to store the targets are being executed. If the current target is in this dictionary, which means we can't find the circular by checking the current `parentTargetEntry`. \r\n2. Since the target is in `_requestEntry.RequestConfiguration.ActivelyBuildingTargets`, this also means we have lost the previous parent information to add it to `_requestEntry.RequestConfiguration.ActivelyBuildingTargets`.",
              "createdAt": "2020-10-10T08:47:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -689,7 +689,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         }\n \n                         // We are already building this target on this request. That's a circular dependency.\n-                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);",
              "author": {
                "login": "haiyuzhu"
              }
            },
            {
              "body": "I'm not sure I understand the reason you gave to not use parentTargetEntry. You're saying that we already would have checked for a cycle via parentTargetEntry, so if it gets here, that way to figure out the cycle won't work? Or are you saying the parentTargetEntry is often null?\r\n\r\nIf there is no way to get the parent information, then I think this is good.",
              "createdAt": "2020-10-13T16:28:41Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -689,7 +689,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         }\n \n                         // We are already building this target on this request. That's a circular dependency.\n-                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I mean \"we already would have checked for a cycle via parentTargetEntry, so if it gets here, that way to figure out the cycle won't work\". So I think currently we have no way to get the parent information.",
              "createdAt": "2020-10-16T07:07:04Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -689,7 +689,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         }\n \n                         // We are already building this target on this request. That's a circular dependency.\n-                        ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we end up with a different error, we'd need a new error code.",
              "createdAt": "2020-09-08T21:51:07Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -264,11 +264,16 @@\n     <comment>{StrBegin=\"MSB4114: \"}UE: This message appears if the project file contains unreasonably nested Choose elements.\n     LOCALIZATION: Do not localize \"Choose\" as it is an XML element name.</comment>\n   </data>\n-  <data name=\"CircularDependency\" xml:space=\"preserve\">\n+  <data name=\"CircularDependencyInTargetGraph\" xml:space=\"preserve\">\n     <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\".</value>\n     <comment>{StrBegin=\"MSB4006: \"}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot\n     request a target to build itself (perhaps via a chain of other targets).</comment>\n   </data>\n+  <data name=\"CircularDependencyInTargetGraphWithVerbosity\" xml:space=\"preserve\">\n+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\". Target \"{1}\" has a \"{2}\" dependency on it, but it is depended upon by {3}.</value>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "My understanding is that this is the same error: Target Circular dependence. The only one reason why I add a new error message format is that the output is totally different from the old one. And I have no good idea to merge the different message output format into one. Any suggestions here? ",
              "createdAt": "2020-09-12T15:24:30Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -264,11 +264,16 @@\n     <comment>{StrBegin=\"MSB4114: \"}UE: This message appears if the project file contains unreasonably nested Choose elements.\n     LOCALIZATION: Do not localize \"Choose\" as it is an XML element name.</comment>\n   </data>\n-  <data name=\"CircularDependency\" xml:space=\"preserve\">\n+  <data name=\"CircularDependencyInTargetGraph\" xml:space=\"preserve\">\n     <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\".</value>\n     <comment>{StrBegin=\"MSB4006: \"}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot\n     request a target to build itself (perhaps via a chain of other targets).</comment>\n   </data>\n+  <data name=\"CircularDependencyInTargetGraphWithVerbosity\" xml:space=\"preserve\">\n+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\". Target \"{1}\" has a \"{2}\" dependency on it, but it is depended upon by {3}.</value>",
              "author": {
                "login": "haiyuzhu"
              }
            },
            {
              "body": "One idea is that if we can print the dependence graph when circular dependence failer is triggered. let me do more investigation and I will get back later.",
              "createdAt": "2020-09-12T15:30:05Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -264,11 +264,16 @@\n     <comment>{StrBegin=\"MSB4114: \"}UE: This message appears if the project file contains unreasonably nested Choose elements.\n     LOCALIZATION: Do not localize \"Choose\" as it is an XML element name.</comment>\n   </data>\n-  <data name=\"CircularDependency\" xml:space=\"preserve\">\n+  <data name=\"CircularDependencyInTargetGraph\" xml:space=\"preserve\">\n     <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\".</value>\n     <comment>{StrBegin=\"MSB4006: \"}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot\n     request a target to build itself (perhaps via a chain of other targets).</comment>\n   </data>\n+  <data name=\"CircularDependencyInTargetGraphWithVerbosity\" xml:space=\"preserve\">\n+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\". Target \"{1}\" has a \"{2}\" dependency on it, but it is depended upon by {3}.</value>",
              "author": {
                "login": "haiyuzhu"
              }
            },
            {
              "body": "I think we don't need to add a new error code because this is a circular error of targets. I modify the key of the error message to improve the readability and merge the message format.",
              "createdAt": "2020-10-16T07:10:07Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -264,11 +264,16 @@\n     <comment>{StrBegin=\"MSB4114: \"}UE: This message appears if the project file contains unreasonably nested Choose elements.\n     LOCALIZATION: Do not localize \"Choose\" as it is an XML element name.</comment>\n   </data>\n-  <data name=\"CircularDependency\" xml:space=\"preserve\">\n+  <data name=\"CircularDependencyInTargetGraph\" xml:space=\"preserve\">\n     <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\".</value>\n     <comment>{StrBegin=\"MSB4006: \"}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot\n     request a target to build itself (perhaps via a chain of other targets).</comment>\n   </data>\n+  <data name=\"CircularDependencyInTargetGraphWithVerbosity\" xml:space=\"preserve\">\n+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\". Target \"{1}\" has a \"{2}\" dependency on it, but it is depended upon by {3}.</value>",
              "author": {
                "login": "haiyuzhu"
              }
            },
            {
              "body": "I'm convinced.",
              "createdAt": "2020-10-16T21:00:54Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -264,11 +264,16 @@\n     <comment>{StrBegin=\"MSB4114: \"}UE: This message appears if the project file contains unreasonably nested Choose elements.\n     LOCALIZATION: Do not localize \"Choose\" as it is an XML element name.</comment>\n   </data>\n-  <data name=\"CircularDependency\" xml:space=\"preserve\">\n+  <data name=\"CircularDependencyInTargetGraph\" xml:space=\"preserve\">\n     <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\".</value>\n     <comment>{StrBegin=\"MSB4006: \"}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot\n     request a target to build itself (perhaps via a chain of other targets).</comment>\n   </data>\n+  <data name=\"CircularDependencyInTargetGraphWithVerbosity\" xml:space=\"preserve\">\n+    <value>MSB4006: There is a circular dependency in the target dependency graph involving target \"{0}\". Target \"{1}\" has a \"{2}\" dependency on it, but it is depended upon by {3}.</value>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you account for verbosity in any way?",
              "createdAt": "2020-09-08T21:51:52Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,14 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>();\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependencyInTargetGraphWithVerbosity\", targetSpecification.TargetName, parentTargetEntry.Name, buildReason, string.Join(\"<-\", parentChain));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "improve the format of circular target dependence error message.",
              "createdAt": "2020-10-16T07:11:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,14 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>();\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependencyInTargetGraphWithVerbosity\", targetSpecification.TargetName, parentTargetEntry.Name, buildReason, string.Join(\"<-\", parentChain));",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            project.Build(_mockLogger).ShouldBeFalse();\r\n            mockLogger.ErrorCount.ShouldBe(1);\r\n            mockLogger.Errors[0].Message.ShouldBe(errorMessage);\r\n```",
              "createdAt": "2020-10-16T21:03:27Z",
              "path": "src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs",
              "diffHunk": "@@ -1254,6 +1254,35 @@ public void TestCircularDependencyInCallTarget()\n             Assert.False(success);\n         }\n \n+        /// <summary>\n+        /// Tests a circular dependency target.\n+        /// </summary>\n+        [Fact]\n+        public void TestCircularDependencyTarget()\n+        {\n+            string projectContents = @\"\n+<Project xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">\n+    <Target Name=\"\"TargetA\"\" AfterTargets=\"\"Build\"\" DependsOnTargets=\"\"TargetB\"\">\n+        <Message Text=\"\"TargetA\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetB\"\" DependsOnTargets=\"\"TargetC\"\">\n+        <Message Text=\"\"TargetB\"\"></Message>\n+    </Target>\n+    <Target Name=\"\"TargetC\"\" DependsOnTargets=\"\"TargetA\"\">\n+        <Message Text=\"\"TargetC\"\"></Message>\n+    </Target>\n+</Project>\n+      \";\n+            string errorMessage = @\"There is a circular dependency in the target dependency graph involving target \"\"TargetA\"\". Since \"\"TargetC\"\" has \"\"DependsOn\"\" dependence on \"\"TargetA\"\", the circular is TargetA<-TargetC<-TargetB<-TargetA.\";\n+\n+            StringReader reader = new StringReader(projectContents);\n+            Project project = new Project(new XmlTextReader(reader), null, null);\n+            bool success = project.Build(_mockLogger);\n+            Assert.False(success);\n+            Assert.Equal<int>(1, _mockLogger.ErrorCount);\n+            Assert.Equal(errorMessage, _mockLogger.Errors[0].Message);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The reason it's better to have this sort of thing in strings (and having two separate but almost identical error messages) is that there, it gets translated into a variety of different languages. If we leave it here, everyone worldwide would see it in English.",
              "createdAt": "2020-10-16T21:05:57Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                string errorMessage = $\"Since \\\"{parentTargetEntry.Name}\\\" has \\\"{buildReason}\\\" dependence on \\\"{targetSpecification.TargetName}\\\", the circular is {string.Join(\"<-\", parentChain)}.\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "+1, as much of the error message should exist within the resource as possible. Though I see the reason it is in its current state. \r\n\r\nI propose we have two resources here with the same error code: ``` and `CircularDependencyInTargetGraph`. Same error code, different message where `CircularDependencyInTargetGraph` has most of the message listed here with many more required arguments. And `CircularDependency` remains the same.\r\n\r\nOf course, the `ThrowInvalidProject` calls that pass null will no longer need to pass null, so long as they revert to the `CircularDependency` resource.",
              "createdAt": "2020-10-30T18:41:18Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                string errorMessage = $\"Since \\\"{parentTargetEntry.Name}\\\" has \\\"{buildReason}\\\" dependence on \\\"{targetSpecification.TargetName}\\\", the circular is {string.Join(\"<-\", parentChain)}.\";",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "@Forgind , I agree with @BenVillalobos 's proposal. I once did this in previous commits. Do you have any concerns? ",
              "createdAt": "2020-11-18T04:04:54Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                string errorMessage = $\"Since \\\"{parentTargetEntry.Name}\\\" has \\\"{buildReason}\\\" dependence on \\\"{targetSpecification.TargetName}\\\", the circular is {string.Join(\"<-\", parentChain)}.\";",
              "author": {
                "login": "haiyuzhu"
              }
            },
            {
              "body": "Yeah, that's fine. I was pushing for two separate error messages in strings, but although it wasn't clear, I'm fine with them sharing an error code in this case.",
              "createdAt": "2020-11-18T16:27:17Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };\n                         while (currentParent != null)\n                         {\n+                            parentChain.Add(currentParent.Name);\n                             if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))\n                             {\n                                 // We are already building this target on this request. That's a circular dependency.\n-                                ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                                string errorMessage = $\"Since \\\"{parentTargetEntry.Name}\\\" has \\\"{buildReason}\\\" dependence on \\\"{targetSpecification.TargetName}\\\", the circular is {string.Join(\"<-\", parentChain)}.\";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        ProjectErrorUtilities.ThrowInvalidProject(taskLoggingContext.Task.Location, \"CircularDependencyInTargetGraph\", taskLoggingContext.TargetLoggingContext.Target.Name, null);\r\n```\r\nThe `CircularDependencyInTargetGraph` resource requires 2 arguments.",
              "createdAt": "2020-10-30T18:34:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -866,7 +866,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     else if (type == typeof(CircularDependencyException))\n                     {\n                         _continueOnError = ContinueOnError.ErrorAndStop;\n-                        ProjectErrorUtilities.ThrowInvalidProject(taskLoggingContext.Task.Location, \"CircularDependency\", taskLoggingContext.TargetLoggingContext.Target.Name);\n+                        ProjectErrorUtilities.ThrowInvalidProject(taskLoggingContext.Task.Location, \"CircularDependencyInTargetGraph\", taskLoggingContext.TargetLoggingContext.Target.Name);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there any advantage to this change? Same for other cases when you aren't actually adding the parent chain.",
              "createdAt": "2020-10-30T19:04:53Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -677,7 +677,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         // continue so we could throw the exception.\n                         if (_requestEntry.RequestConfiguration.ActivelyBuildingTargets.ContainsKey(targetSpecification.TargetName))\n                         {\n-                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependencyInTargetGraph\", targetSpecification.TargetName, null);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "revert this change",
              "createdAt": "2020-12-08T02:28:00Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -677,7 +677,7 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                         // continue so we could throw the exception.\n                         if (_requestEntry.RequestConfiguration.ActivelyBuildingTargets.ContainsKey(targetSpecification.TargetName))\n                         {\n-                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependency\", targetSpecification.TargetName);\n+                            ProjectErrorUtilities.ThrowInvalidProject(targetLocation, \"CircularDependencyInTargetGraph\", targetSpecification.TargetName, null);",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We were talking about possibly putting this in the `String.Equals` block below and figuring out the chain from scratch. In the normal (non-error) case, it would save a little bit of memory. I started an RPS run [here](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/284930/) to find out if that's a big deal or not.",
              "createdAt": "2020-10-30T21:33:17Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Looks like RPS passed so more likely to not be a big deal.",
              "createdAt": "2020-11-03T18:37:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It makes sense to me. Putting this to `String.Equals` block may consume more time to get the circular which should be fine.",
              "createdAt": "2020-11-18T03:58:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -698,12 +698,15 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n                         TargetEntry currentParent = parentTargetEntry;\n+                        List<string> parentChain = new List<string>() { targetSpecification.TargetName };",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                        if (HasCircularDependenceInTargets(parentTargetEntry, targetSpecification, out List<string> targetDependenceChain))\r\n```",
              "createdAt": "2020-12-07T21:00:28Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -697,16 +697,10 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE\n                     // Does this target exist in our direct parent chain, if it is a before target (since these can cause circular dependency issues)\n                     if (buildReason == TargetBuiltReason.BeforeTargets || buildReason == TargetBuiltReason.DependsOn || buildReason == TargetBuiltReason.None)\n                     {\n-                        TargetEntry currentParent = parentTargetEntry;\n-                        while (currentParent != null)\n+                        List<string> targetDependenceChain;\n+                        if (HasCircularDependenceInTargets(parentTargetEntry, targetSpecification, out targetDependenceChain))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's relevant which StringComparison you're using here, right?",
              "createdAt": "2020-12-07T21:01:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -812,5 +806,37 @@ private void ComputeAfterTargetFailures(string[] targetNames)\n                 }\n             }\n         }\n+\n+        private bool HasCircularDependenceInTargets(TargetEntry parentTargetEntry, TargetSpecification targetSpecification, out List<string> circularDependenceChain)\n+        {\n+            TargetEntry currentParent = parentTargetEntry;\n+            circularDependenceChain = new List<string>();\n+            bool hasCircularDependence = false;\n+\n+            while (currentParent != null)\n+            {\n+                if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, correct.",
              "createdAt": "2020-12-08T12:59:57Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs",
              "diffHunk": "@@ -812,5 +806,37 @@ private void ComputeAfterTargetFailures(string[] targetNames)\n                 }\n             }\n         }\n+\n+        private bool HasCircularDependenceInTargets(TargetEntry parentTargetEntry, TargetSpecification targetSpecification, out List<string> circularDependenceChain)\n+        {\n+            TargetEntry currentParent = parentTargetEntry;\n+            circularDependenceChain = new List<string>();\n+            bool hasCircularDependence = false;\n+\n+            while (currentParent != null)\n+            {\n+                if (String.Equals(currentParent.Name, targetSpecification.TargetName, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "haiyuzhu"
              }
            }
          ]
        }
      }
    ]
  }
}