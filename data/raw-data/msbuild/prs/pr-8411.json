{
  "number": 8411,
  "title": "Distinguish present but empty and not present metadata for item functions",
  "body": "Fixes [#8205](https://github.com/dotnet/msbuild/issues/8205) and [#1030](https://github.com/dotnet/msbuild/issues/1030)\r\n\r\n### Context\r\nThe referenced function GetMetadataEscaped of Item metadata function dosen't distinguish  between \"metadata not present\" and \"present but set the empty string\". Both of them return the same empty string.  So the following functions \r\n\r\n**AnyHaveMetdataValue\r\nHasMetadata\r\nWithMetadataValue**\r\n\r\nCan't tell between \"metadata not present\" and \"present but set the empty string\". \r\n\r\n### Changes Made\r\nAdd GetMetadataValueEscaped with one more parameter returnNullIfNotFound that is true that returns null when not present. \r\nAdd one new function **WithOutMetadataValue**\r\n\r\n### Testing\r\nMetadataFuntionTestingWithEmtpyString\r\n\r\n### Notes",
  "state": "CLOSED",
  "createdAt": "2023-02-07T14:13:05Z",
  "updatedAt": "2023-06-12T08:30:49Z",
  "closedAt": "2023-06-12T08:30:41Z",
  "mergedAt": null,
  "additions": 239,
  "deletions": 12,
  "changedFiles": 7,
  "headRefName": "jennybai/issue8205",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7e94f3e4f415f607373e98beba3f094050e92074",
          "message": "Distinguish present but empty and not present metadata of  metadta item functions",
          "committedDate": "2023-02-07T14:12:01Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d22f778ad997c820ec2fbb7791fb31e8be282cc",
          "message": "Remove unuseful comment",
          "committedDate": "2023-02-07T14:50:17Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "acb8efdf8c986e4b6b0ac4d0e059fee7bacea367",
          "message": "Add comments",
          "committedDate": "2023-02-07T15:10:53Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f75325f07c2309a7e8be8d6291a9a49107e6386",
          "message": "introduce TryGetMetadataValueEscaped function",
          "committedDate": "2023-02-08T07:57:16Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "798e1be9e9d274d676108995ebc0b82a445d7c09",
          "message": "Implememnt TryGetMetadataValueEscaped in project item",
          "committedDate": "2023-02-08T08:32:20Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0db5e3ecbd52e8f862a0d0059ecf46c348f1446",
          "message": "Refactor the method",
          "committedDate": "2023-02-08T12:28:08Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b99393e5918e943f8758e32f9ba497d33ed43c0a",
          "message": "Refactor the code 2",
          "committedDate": "2023-02-14T07:35:12Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96b41a93805b4b5b0dab611268bb00fe87d12213",
          "message": "return value",
          "committedDate": "2023-02-14T07:57:49Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d6a9bf4921654c878c02db752cac4bb3a24763d",
          "message": "Add tests for new API",
          "committedDate": "2023-02-15T08:13:49Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5cf4e469b34dee4e9fd5683204111d488f9c0c1",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into jennybai/issue8205",
          "committedDate": "2023-02-20T02:14:45Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23f3b918fcb466f60e034b8e7ebd5a5ee68b3c8e",
          "message": "make the GetMetadataValueEscaped(string name, bool returnNullIfNotFound) internal",
          "committedDate": "2023-02-20T08:30:38Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cec2cb290d09691b7081f892bea2ab5c2c6357fb",
          "message": "Refactor function order",
          "committedDate": "2023-02-21T07:07:05Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I have no problem adding `WithoutMetadataValue`, but I still don't think there should be a meaningful distinction between \"metadata is set to empty\" and \"metadata is not set\". Does the former require the latter?\r\n\r\nYes, the former WithoutMetadataValue require the latter.  In the related tests. if there is no distinction, WithoutMetadataValue('A', '') will output [One|Two] but it should be [One|Two|Four] \r\nWithoutMetadataValue('C', '') will output [], but it should be [One|Two|Three|Four]",
        "createdAt": "2023-02-17T08:36:14Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> if there is no distinction, WithoutMetadataValue('A', '') will output [One|Two] but it should be [One|Two|Four]\r\n\r\nI don't think I agree. I think \"undefined\" and \"defined but set to empty string\" should be equivalent. Compare how these two work with your changes:\r\n\r\n```xml\r\n    <Message Importance=\"high\" Text=\"WithoutMetadataValueAEmpty: [@(_Item->WithoutMetadataValue('A', ''), '|')]\"/>\r\n    <Message Importance=\"high\" Text=\"BatchCondition: [@(_Item, '|')]\" Condition=\" '%(_Item.A)' != '' \"/>\r\n```\r\n\r\n```sh-session\r\n$ ./.dotnet/dotnet msbuild foo.proj\r\nMSBuild version 17.6.0-dev-23128-01+cec2cb290 for .NET\r\n\r\n  WithoutMetadataValueAEmpty: [One|Two|Four]\r\n  BatchCondition: [One]\r\n  BatchCondition: [Two]\r\n```\r\n\r\nI think they should match.",
        "createdAt": "2023-02-28T22:56:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > if there is no distinction, WithoutMetadataValue('A', '') will output [One|Two] but it should be [One|Two|Four]\r\n> \r\n> I don't think I agree. I think \"undefined\" and \"defined but set to empty string\" should be equivalent. Compare how these two work with your changes:\r\n> \r\n> ```\r\n>     <Message Importance=\"high\" Text=\"WithoutMetadataValueAEmpty: [@(_Item->WithoutMetadataValue('A', ''), '|')]\"/>\r\n>     <Message Importance=\"high\" Text=\"BatchCondition: [@(_Item, '|')]\" Condition=\" '%(_Item.A)' != '' \"/>\r\n> ```\r\n> \r\n> ```\r\n> $ ./.dotnet/dotnet msbuild foo.proj\r\n> MSBuild version 17.6.0-dev-23128-01+cec2cb290 for .NET\r\n> \r\n>   WithoutMetadataValueAEmpty: [One|Two|Four]\r\n>   BatchCondition: [One]\r\n>   BatchCondition: [Two]\r\n> ```\r\n> \r\n> I think they should match.\r\n\r\nStarting from this example code.\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <ItemGroup>\r\n     <_Item Include=\"One\">\r\n       <A></A>\r\n     </_Item>\r\n     <_Item Include=\"Two\">\r\n       <B></B>\r\n     </_Item>\r\n   </ItemGroup>\r\n    <Target Name=\"MetadataValueEmpty\">\r\n      <Message Text=\"WithMetadataValueAEmpty: [@(_Item->WithMetadataValue('A', ''), '|')]\"/>\r\n      <Message Text=\"HasMetadataA: [@(_Item->HasMetadata('A'), '|')]\"/>\r\n      <!-- <Message Text=\"WithoutMetadataValueAEmpty: [@(_Item->WithoutMetadataValue('A', ''), '|')]\"/> -->\r\n      <Message Text=\"AnyHaveMetadataValueAEmpty: [@(_Item->AnyHaveMetadataValue('A', ''), '|')]\"/>\r\n      <Message Text=\"WithMetadataValueCEmpty: [@(_Item->WithMetadataValue('C', ''), '|')]\"/>\r\n      <Message Text=\"HasMetadataC: [@(_Item->HasMetadata('C'), '|')]\"/>\r\n      <!-- <Message Text=\"WithoutMetadataValueCEmpty: [@(_Item->WithoutMetadataValue('C', ''), '|')]\"/> -->\r\n      <Message Text=\"AnyHaveMetadataValueCEmpty: [@(_Item->AnyHaveMetadataValue('C', ''), '|')]\"/>\r\n      <Message Importance=\"high\" Text=\"BatchConditionA: [@(_Item, '|')]\" Condition=\" '%(_Item.A)' == '' \"/>\r\n      <Message Importance=\"high\" Text=\"BatchConditionC: [@(_Item, '|')]\" Condition=\" '%(_Item.C)' == '' \"/>\r\n   </Target>\r\n </Project>\r\n```\r\nBuild as original MSBuild. The results are as following. \r\n1. There is no metadata \"C\" in the above example. But  WithMetadataValueCEmpty, AnyHaveMetadataValueCEmpty and BatchConditionC, their results return metadata \"C\" is existed.    \r\n2. For Metadata \"A\", HasMetaA returns nothing, but others conflict with HasMetadata and return that metadata \"A\" is existed.  So, I think it's necessary to distinguish \"undefined\" and \"defined but set to empty string\".   \r\n```\r\n  WithMetadataValueAEmpty: [One|Two]\r\n  HasMetadataA: []\r\n  AnyHaveMetadataValueAEmpty: [true]\r\n  WithMetadataValueCEmpty: [One|Two]\r\n  HasMetadataC: []\r\n  AnyHaveMetadataValueCEmpty: [true]\r\n  BatchConditionA: [One|Two]\r\n  BatchConditionC: [One|Two]\r\n```\r\n\r\nAfter my changes. The outputs as following. But BatchCondition `Condition=\" '%(_Item.A)' == '' \"` should match with  WithMetadataValue, that's an issue.\r\n```\r\n  WithMetadataValueAEmpty: [One]\r\n  HasMetadataA: [One]\r\n  AnyHaveMetadataValueAEmpty: [true]\r\n  WithMetadataValueCEmpty: []\r\n  HasMetadataC: []\r\n  AnyHaveMetadataValueCEmpty: [false]\r\n  BatchConditionA: [One|Two]\r\n  BatchConditionC: [One|Two]\r\n```",
        "createdAt": "2023-03-03T08:13:04Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Team triage:\r\nWe decided that adding a new way to distinguish between a metadatum that has been set at some point but is currently empty and a metadatum that was never set is not how we typically deal with undefined values in MSBuild and should not be added at this point. With that in mind, we want the WithoutMetadataValue function but would prefer to skip the other part of this PR.",
        "createdAt": "2023-04-24T15:28:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@JaynieBai - do you plan to update this PR based on Forgind's last comment?",
        "createdAt": "2023-06-02T12:12:56Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> do you plan to update this PR based on Forgind's last comment?\r\n\r\nThanks for your reminder. I missed that before. I will update this PR soon.",
        "createdAt": "2023-06-05T06:49:54Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> Team triage:\r\n> We decided that adding a new way to distinguish between a metadatum that has been set at some point but is currently empty and a metadatum that was never set is not how we typically deal with undefined values in MSBuild and should not be added at this point. With that in mind, we want the WithoutMetadataValue function but would prefer to skip the other part of this PR.\r\n\r\nAdd the WithoutMetadataValue function in another PR  https://github.com/dotnet/msbuild/pull/8867. So close this PR.",
        "createdAt": "2023-06-12T08:30:40Z",
        "author": {
          "login": "JaynieBai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It might be nice to introduce a new \"TryGetMetadataValueEscaped\" function so you aren't effectively doing this twice.",
              "createdAt": "2023-02-07T21:48:16Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2791,7 +2789,10 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n \n                         try\n                         {\n-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                            if (item.Value.HasMetadata(metadataName))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, we can introduce such a new function. I have done that.  I didn't add this before since I think it would introduce more code changes.",
              "createdAt": "2023-02-08T09:09:30Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2791,7 +2789,10 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n \n                         try\n                         {\n-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                            if (item.Value.HasMetadata(metadataName))",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\r\n```\r\n\r\n(Without is one word)",
              "createdAt": "2023-02-07T21:54:37Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2810,6 +2811,46 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                /// \n+                internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks. Have updated",
              "createdAt": "2023-02-08T09:06:37Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2810,6 +2811,46 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                /// \n+                internal static IEnumerable<Pair<string, S>> WithOutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            return value != null;\r\n```",
              "createdAt": "2023-02-13T14:25:32Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -895,6 +863,50 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)\n             return metadataFromDefinition;\n         }\n \n+        /// <summary>\n+        /// Get the metadata value with the specified key. \n+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.\n+        /// </summary>\n+        public bool TryGetMetadataValueEscaped(string name, out string value)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+\n+            value = null;\n+\n+            if (_directMetadata != null)\n+            {\n+                ProjectMetadata metadatum = _directMetadata[name];\n+                if (metadatum != null)\n+                {\n+                    value = metadatum.EvaluatedValueEscaped;\n+                }\n+            }\n+\n+            if (value == null)\n+            {\n+                value = GetBuiltInMetadataEscaped(name);\n+            }\n+\n+            if (value == null)\n+            {\n+                ProjectMetadata metadatum = GetItemDefinitionMetadata(name);\n+\n+                if (metadatum != null && Expander<ProjectProperty, ProjectItem>.ExpressionMayContainExpandableExpressions(metadatum.EvaluatedValueEscaped))\n+                {\n+                    Expander<ProjectProperty, ProjectItem> expander = new Expander<ProjectProperty, ProjectItem>(null, null, new BuiltInMetadataTable(this), FileSystems.Default);\n+\n+                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, metadatum.Location);\n+                }\n+                else if (metadatum != null)\n+                {\n+                    value = metadatum.EvaluatedValueEscaped;\n+                }\n+            }\n+\n+            if (value == null) { return false; }\n+            else { return true; }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't this a breaking change? It looks like the method was previously OK with taking an empty string, now it throws.",
              "createdAt": "2023-02-13T14:32:17Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yes, I think it's necessary.  HasMetadata parameter and GetMetadata parameter should have the same limitation. If name is null, Dictionary _directMetadata?.Contains(name) will throw exception.",
              "createdAt": "2023-02-14T02:26:49Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "That doesn't seem to be true. `_directMetadata?.Contains(name)` does not throw on null.\r\n\r\nIf there is a path that doesn't handle null, I think it would be reasonable to add a proper argument check here. I would be opposed to checking for an empty string, though, unless there is a good reason. The breaking potential is non-trivial.\r\n\r\nAlso, changes in the behavior of the public API should always come with the corresponding test coverage.",
              "createdAt": "2023-02-14T11:41:49Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> That doesn't seem to be true. `_directMetadata?.Contains(name)` does not throw on null.\r\n\r\nIf there is no null check. this will throw the exception as bellow.  I think this exception message is not  easier to undertand than ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));   And for empty string check, I think it's same with GetMetadata. but in order to avoid new  potential issues, I will only check null currently.\r\n\r\n![image](https://user-images.githubusercontent.com/26814373/218954819-158db5a9-1ec1-422a-9777-9458d31cec32.png)\r\n\r\n\r\n",
              "createdAt": "2023-02-15T07:06:41Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Have added the tests for the new public API",
              "createdAt": "2023-02-15T09:27:05Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Sorry, you're right, it throws on null. Thank you for making the changes in `HasMetadata`. The new `GetMetadataValueEscaped` still doesn't take empty string now. Do you think it would make sense to unify the behavior with `HasMetadata` and validate the argument so it throw only on null?",
              "createdAt": "2023-02-15T12:58:27Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> The new `GetMetadataValueEscaped` still doesn't take empty string now. Do you think it would make sense to unify the behavior with `HasMetadata` and validate the argument so it throw only on null?\r\n\r\n@Forgind  what\u2019s your idea\uff1f",
              "createdAt": "2023-02-16T08:23:26Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1602,6 +1639,11 @@ public bool Equals(TaskItem other)\n             /// </remarks>\n             public bool HasMetadata(string name)\n             {\n+                if (string.IsNullOrEmpty(name))\n+                {\n+                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n+                }",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: The `TryGet` pattern is useful in cases where the thing being fetched does not have a special value indicating \"not found\". This is not true here as `null` is the special value. Also, several callers introduced in this PR ignore the bool return value anyway. Unless we believe the implementation may conceivably return `true` and set value to `null` in the future, I would suggest to change it to something like:\r\n\r\n```suggestion\r\n        string GetMetadataValueEscapedOrNull(string name);\r\n```\r\n\r\nor maybe add another overload `GetMetadataValueEscaped`:\r\n\r\n```suggestion\r\n        string GetMetadataValueEscaped(string name, bool returnNullIfNotFound);\r\n```\r\n",
              "createdAt": "2023-02-13T14:46:08Z",
              "path": "src/Build/Evaluation/IItem.cs",
              "diffHunk": "@@ -52,5 +52,22 @@ string ProjectDirectory\n         /// Metadata value is the escaped value initially set.\n         /// </summary>\n         string GetMetadataValueEscaped(string name);\n+\n+        /// <summary>\n+        /// Returns true if a particular piece of metadata is defined on this item (even if\n+        /// its value is empty string) otherwise false.\n+        /// This includes built-in metadata and metadata from item definitions.\n+        /// </summary>\n+        /// <remarks>\n+        /// It has to include all of these because it's used for batching, which doesn't\n+        /// care where the metadata originated.\n+        /// </remarks>\n+        bool HasMetadata(string name);\n+\n+        /// <summary>\n+        /// Get the metadata value with the specified key. \n+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.\n+        /// </summary>\n+        bool TryGetMetadataValueEscaped(string name, out string value);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Agree with you. Have updated function.",
              "createdAt": "2023-02-14T08:06:03Z",
              "path": "src/Build/Evaluation/IItem.cs",
              "diffHunk": "@@ -52,5 +52,22 @@ string ProjectDirectory\n         /// Metadata value is the escaped value initially set.\n         /// </summary>\n         string GetMetadataValueEscaped(string name);\n+\n+        /// <summary>\n+        /// Returns true if a particular piece of metadata is defined on this item (even if\n+        /// its value is empty string) otherwise false.\n+        /// This includes built-in metadata and metadata from item definitions.\n+        /// </summary>\n+        /// <remarks>\n+        /// It has to include all of these because it's used for batching, which doesn't\n+        /// care where the metadata originated.\n+        /// </remarks>\n+        bool HasMetadata(string name);\n+\n+        /// <summary>\n+        /// Get the metadata value with the specified key. \n+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.\n+        /// </summary>\n+        bool TryGetMetadataValueEscaped(string name, out string value);",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "I first proposed the TryGet name just because I saw \"Has_\" and \"Get_\" functions. Good point that the function just returns null on failure, though \ud83d\udc4d",
              "createdAt": "2023-02-15T00:15:46Z",
              "path": "src/Build/Evaluation/IItem.cs",
              "diffHunk": "@@ -52,5 +52,22 @@ string ProjectDirectory\n         /// Metadata value is the escaped value initially set.\n         /// </summary>\n         string GetMetadataValueEscaped(string name);\n+\n+        /// <summary>\n+        /// Returns true if a particular piece of metadata is defined on this item (even if\n+        /// its value is empty string) otherwise false.\n+        /// This includes built-in metadata and metadata from item definitions.\n+        /// </summary>\n+        /// <remarks>\n+        /// It has to include all of these because it's used for batching, which doesn't\n+        /// care where the metadata originated.\n+        /// </remarks>\n+        bool HasMetadata(string name);\n+\n+        /// <summary>\n+        /// Get the metadata value with the specified key. \n+        /// Return value indicates whether get the metadata or not. Returns false if metadata does not exist.\n+        /// </summary>\n+        bool TryGetMetadataValueEscaped(string name, out string value);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit:\r\n\r\n```suggestion\r\n            return GetMetadataValueEscaped(name, returnNullIfNotFound: false);\r\n```",
              "createdAt": "2023-02-14T08:29:34Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -473,41 +475,7 @@ public bool HasMetadata(string name)\n         /// </summary>\n         string IItem.GetMetadataValueEscaped(string name)\n         {\n-            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));\n-\n-            string value = null;\n-\n-            if (_directMetadata != null)\n-            {\n-                ProjectMetadata metadatum = _directMetadata[name];\n-                if (metadatum != null)\n-                {\n-                    value = metadatum.EvaluatedValueEscaped;\n-                }\n-            }\n-\n-            if (value == null)\n-            {\n-                value = GetBuiltInMetadataEscaped(name);\n-            }\n-\n-            if (value == null)\n-            {\n-                ProjectMetadata metadatum = GetItemDefinitionMetadata(name);\n-\n-                if (metadatum != null && Expander<ProjectProperty, ProjectItem>.ExpressionMayContainExpandableExpressions(metadatum.EvaluatedValueEscaped))\n-                {\n-                    Expander<ProjectProperty, ProjectItem> expander = new Expander<ProjectProperty, ProjectItem>(null, null, new BuiltInMetadataTable(this), FileSystems.Default);\n-\n-                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, metadatum.Location);\n-                }\n-                else if (metadatum != null)\n-                {\n-                    return metadatum.EvaluatedValueEscaped;\n-                }\n-            }\n-\n-            return value ?? String.Empty;\n+            return GetMetadataValueEscaped(name, false);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo `Funtion`.",
              "createdAt": "2023-02-15T12:38:36Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1109,7 +1109,66 @@ public void HasMetadata()\n \n </Project>\");\n \n-            logger.AssertLogContains(\"[One|Three|Four]\");\n+            logger.AssertLogContains(\"[One|Three|Four|Five]\");\n+        }\n+\n+        /// <summary>\n+        /// Test metadata item functions with empty string metadata and not present metadata\n+        /// </summary>\n+        [Fact]\n+        public void MetadataFuntionTestingWithEmtpyString()",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can you please move this up so the two overloads of `GetMetadataValueEscaped` are next to each other?",
              "createdAt": "2023-02-15T12:46:08Z",
              "path": "src/Build/Evaluation/IItem.cs",
              "diffHunk": "@@ -52,5 +52,22 @@ string ProjectDirectory\n         /// Metadata value is the escaped value initially set.\n         /// </summary>\n         string GetMetadataValueEscaped(string name);\n+\n+        /// <summary>\n+        /// Returns true if a particular piece of metadata is defined on this item (even if\n+        /// its value is empty string) otherwise false.\n+        /// This includes built-in metadata and metadata from item definitions.\n+        /// </summary>\n+        /// <remarks>\n+        /// It has to include all of these because it's used for batching, which doesn't\n+        /// care where the metadata originated.\n+        /// </remarks>\n+        bool HasMetadata(string name);\n+\n+        /// <summary>\n+        /// Returns the metadata with the specified key.\n+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present\n+        /// </summary>\n+        string GetMetadataValueEscaped(string name, bool returnNullIfNotFound);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it intentional to expose the method publicly? The existing overload is implemented explicitly, which keeps it internal.\r\n\r\n```suggestion\r\n        string IItem.GetMetadataValueEscaped(string name, bool returnNullIfNotFound)\r\n```",
              "createdAt": "2023-02-15T13:04:21Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -895,6 +863,49 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)\n             return metadataFromDefinition;\n         }\n \n+        /// <summary>\n+        /// Returns the metadata with the specified key.\n+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present\n+        /// </summary>\n+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I think it\u2018s same with HasMetadata\uff0cSetMetadata and GetMetada\uff0c so make is public",
              "createdAt": "2023-02-16T08:21:14Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -895,6 +863,49 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)\n             return metadataFromDefinition;\n         }\n \n+        /// <summary>\n+        /// Returns the metadata with the specified key.\n+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present\n+        /// </summary>\n+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "True, `HasMetadata`, `GetMetadataValue`, and `SetMetadataValue` are public.\r\n\r\nBut the existing `GetMetadataValueEscaped(string name)` is not, so unless there's a need to expose the new `GetMetadataValueEscaped(string name, bool returnNullIfNotFound)`, it should stay internal.",
              "createdAt": "2023-02-16T08:36:59Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -895,6 +863,49 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)\n             return metadataFromDefinition;\n         }\n \n+        /// <summary>\n+        /// Returns the metadata with the specified key.\n+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present\n+        /// </summary>\n+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "OK. I will update that.",
              "createdAt": "2023-02-17T08:36:36Z",
              "path": "src/Build/Definition/ProjectItem.cs",
              "diffHunk": "@@ -895,6 +863,49 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)\n             return metadataFromDefinition;\n         }\n \n+        /// <summary>\n+        /// Returns the metadata with the specified key.\n+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present\n+        /// </summary>\n+        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}