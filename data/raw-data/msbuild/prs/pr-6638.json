{
  "number": 6638,
  "title": "Switch to Microsoft.DotNet.XUnitExtensions",
  "body": "Let's delete a bunch of code from our repo and replace it with the modern version from Arcade.\r\n\r\nWe can't delete our assembly entirely because Arcade doesn't have the Fixture stuff that we depend on fairly heavily.\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-29T17:27:39Z",
  "updatedAt": "2021-07-15T17:34:06Z",
  "closedAt": "2021-07-15T17:34:06Z",
  "mergedAt": "2021-07-15T17:34:06Z",
  "additions": 17,
  "deletions": 726,
  "changedFiles": 27,
  "headRefName": "xunitextensions",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "527c78fcfe0fa5b76b15b87a5aace5d4473393e6",
          "message": "Switch to Microsoft.DotNet.XUnitExtensions\n\nLet's delete a bunch of code from our repo and replace it with the\nmodern version from Arcade.\n\nWe can't delete our assembly entirely because Arcade doesn't have\nthe Fixture stuff that we depend on fairly heavily.",
          "committedDate": "2021-06-29T17:25:40Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> We'd previously copied a lot of code from Arcade. Here, you're deleting that code and adding a reference to Arcade so don't have to carry it around and get updates for (almost) free.\r\n\r\nCorrect.\r\n\r\n> If someone had built our repo just before this, then pulled in this change, did not build, went offline, and tried to build again, that would fail, correct? I don't think we should care\u2014just trying to think of edge cases.\r\n\r\nCorrect (as with any package addition or version change).",
        "createdAt": "2021-07-06T14:38:04Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Will this be auto-updated by darc?\r\n\r\nAlso, is there some way we can specify the version once and have it appear both here and in Version.Details.xml?",
              "createdAt": "2021-07-05T17:55:30Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -32,6 +32,7 @@\n     <!-- DotNetCliVersion MUST match the dotnet version in global.json.\n          Otherwise, this version of dotnet will not be installed and the build will error out. -->\n     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\\global.json')), '\"dotnet\": \"([^\"]*)\"').Groups.get_Item(1))</DotNetCliVersion>\n+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21329.2</MicrosoftDotNetXUnitExtensionsVersion>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> Will this be auto-updated by darc?\r\n\r\nYes, I expect this to be updated by our existing arcade->msbuild darc subscription.\r\n\r\n> Also, is there some way we can specify the version once and have it appear both here and in Version.Details.xml?\r\n\r\nI am not aware of one. Darc's design requires having it in two places updated by tooling.",
              "createdAt": "2021-07-06T14:37:31Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -32,6 +32,7 @@\n     <!-- DotNetCliVersion MUST match the dotnet version in global.json.\n          Otherwise, this version of dotnet will not be installed and the build will error out. -->\n     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\\global.json')), '\"dotnet\": \"([^\"]*)\"').Groups.get_Item(1))</DotNetCliVersion>\n+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21329.2</MicrosoftDotNetXUnitExtensionsVersion>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}