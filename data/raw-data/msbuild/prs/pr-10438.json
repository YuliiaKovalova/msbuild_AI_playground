{
  "number": 10438,
  "title": "Change throwaway parameter to include out and add test",
  "body": "Fixes #10435\r\n\r\n### Context\r\n#10209 was generous with what it interpreted as a throwaway parameter: underscores were often misinterpreted as throwaway parameters. This changes it to require `out _` instead of just `_`, which should resolve the problem.\r\n\r\n### Changes Made\r\nLook for `out _` instead of just `_`\r\n\r\n### Testing\r\nCreated a new unit test to distinguish between _ and out _\r\n\r\n### Notes\r\nAlternative to #10435\r\n\r\nI searched github for all instances of `out _` in .props, .targets, and .*proj files and found none that seemed problematic, giving me some confidence in this change. I also looked for instances of _ in .targets files and found plenty of examples that were broken with #10209, indicating that that search would've prevented this problem.\r\n\r\n@rainersigwald, leaving this as a draft until you've had a chance to try to think of potential problems with this approach. I was satisfied with my github search.",
  "state": "MERGED",
  "createdAt": "2024-07-23T21:42:57Z",
  "updatedAt": "2024-10-09T11:12:58Z",
  "closedAt": "2024-10-09T11:12:58Z",
  "mergedAt": "2024-10-09T11:12:58Z",
  "additions": 170,
  "deletions": 2,
  "changedFiles": 16,
  "headRefName": "fix-throwaway-parameter",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.13"
  },
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fcc80c608b224969ee2671bb3fe7ed7cc7f2fbb0",
          "message": "Merge",
          "committedDate": "2024-08-16T13:21:58Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51f946ed44f0da451b50b5c2efaa34593ad7594e",
          "message": "Change throwaway parameter to include out and add test",
          "committedDate": "2024-08-16T13:22:22Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d71daa9662513cdd819030644c7749c2f29b66c6",
          "message": "build",
          "committedDate": "2024-08-16T13:25:13Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57fb966ff499fdf9788755534a9a05aa5fe2f51b",
          "message": "Update src/Build/Evaluation/Expander.cs",
          "committedDate": "2024-10-09T01:57:13Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald,\r\n\r\nI haven't come up with any more ways that this is broken; have you?",
        "createdAt": "2024-08-15T23:09:39Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a bit nitpicky - but I believe we should distinguish between the return valua itself and the fact if it was set or not - as `null` can still be a valid return value and we can have a case of 2 matching functions one of which returns `null` and other non-null value.\r\n\r\n**tl;dr;**: How about introducing `bool isReturnSet;` ?",
              "createdAt": "2024-09-26T07:43:58Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I had to think about this a bit because although that's often true, MSBuild code doesn't have a 'null' type, and this goes almost directly to MSBuild. But what you're really saying is that we might discard a null return value incorrectly if the method really did just return null but was correctly invoked, and I think we could fail to distinguish between those.\r\n\r\nI'm thinking about what it will ultimately look like when it ultimately gets back to the user. Perhaps a simpler fix to this would be changing line 3739 to end with `?? \"null\";` instead? How does that sound?",
              "createdAt": "2024-09-27T13:41:32Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "My main concern is - you are using `toReturn` here as a way to find out if possibly more distinct overloads of a method - which is unsupported and failure case. But the additional overload would slip through here if it'd return `null`. So in such case there would be 2 similar methods, returning distinct returns, but code would silently ignore one of them (the one returning the null) and accept the other as if it'd be the only matching one.\r\n\r\nPing me if I'm making you even more confused ;-)",
              "createdAt": "2024-09-27T15:07:43Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Right; I agree. I was thinking of making the null into \"null\" if it's a real value to prevent that. I'll add a suggestion to make that more clear.",
              "createdAt": "2024-09-27T18:15:00Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Works as well",
              "createdAt": "2024-10-09T10:39:41Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    return _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture) ?? \"null\";\r\n```",
              "createdAt": "2024-09-27T18:15:23Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3694,6 +3703,48 @@ private bool TryExecuteWellKnownFunctionWithPropertiesParam(IPropertyProvider<T>\n                 return false;\n             }\n \n+            private object GetMethodResult(object objectInstance, IEnumerable<MethodInfo> methods, object[] args, int index)\n+            {\n+                for (int i = index; i < args.Length; i++)\n+                {\n+                    if (args[i].Equals(\"out _\"))\n+                    {\n+                        object toReturn = null;\n+                        foreach (MethodInfo method in methods)\n+                        {\n+                            Type t = method.GetParameters()[i].ParameterType;\n+                            args[i] = t.IsValueType ? Activator.CreateInstance(t) : null;\n+                            object currentReturnValue = GetMethodResult(objectInstance, methods, args, i + 1);\n+                            if (currentReturnValue is not null)\n+                            {\n+                                if (toReturn is null)\n+                                {\n+                                    toReturn = currentReturnValue;\n+                                }\n+                                else if (!toReturn.Equals(currentReturnValue))\n+                                {\n+                                    // There were multiple methods that seemed viable and gave different results. We can't differentiate between them so throw.\n+                                    ErrorUtilities.ThrowArgument(\"CouldNotDifferentiateBetweenCompatibleMethods\", _methodMethodName, args.Length);\n+                                    return null;\n+                                }\n+                            }\n+                        }\n+\n+                        return toReturn;\n+                    }\n+                }\n+\n+                try\n+                {\n+                    return _receiverType.InvokeMember(_methodMethodName, _bindingFlags, Type.DefaultBinder, objectInstance, args, CultureInfo.InvariantCulture);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}