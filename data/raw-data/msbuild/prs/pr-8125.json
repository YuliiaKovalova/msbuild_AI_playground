{
  "number": 8125,
  "title": "Added logging message for tasks that fail without error",
  "body": "Fixes #6633\n\n\n### Context\n\n\n### Changes Made\nAdded check for tasks that fail without error messages, so that a normal priority message is shown.\n\n### Testing\nExtended existing tests to validate new behavior. Also validated that in dotnet test scenarios, the new message is not visible. \n\n### Notes\n",
  "state": "MERGED",
  "createdAt": "2022-11-03T21:31:13Z",
  "updatedAt": "2022-11-08T21:53:50Z",
  "closedAt": "2022-11-08T21:53:50Z",
  "mergedAt": "2022-11-08T21:53:50Z",
  "additions": 7,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "75c40859b4d8a485c02f5af974257496afd6c637",
          "message": "Added logging message for tasks that fail without error\n\nFixes #6633",
          "committedDate": "2022-11-03T21:24:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae3422c532e88943db2d9e24c6656520c2a6079d",
          "message": "Removed specific version targeting from global.json\n\nSpecific version was added to avoid conflicts with newest internal version of dotnet and VS. Removed for PR",
          "committedDate": "2022-11-03T21:56:13Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50890816bff88b332828ef0166e74c7c1dbe4fd0",
          "message": "Add better comments\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-03T21:57:36Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16665a84385526abe9e4865c122732080b34b5fc",
          "message": "global.json back to upstream/main",
          "committedDate": "2022-11-03T22:00:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8fb4ac850583a8efdaff41d30ccfaf7d800d9ca9",
          "message": "Removed blank line after else statement",
          "committedDate": "2022-11-04T18:20:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=8125) <br/>All CLA requirements met.",
        "createdAt": "2022-11-03T21:32:16Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/5952839/199839647-fee2c801-9b4b-410d-a83a-f71fccc62e87.png)\r\nThis is how the message gets logged in the binlog in a failing dotnet test. ",
        "createdAt": "2022-11-03T21:40:56Z",
        "author": {
          "login": "edvilme"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Sorry I didn't catch this! Can you please revert this change for this PR?",
              "createdAt": "2022-11-03T21:45:50Z",
              "path": "global.json",
              "diffHunk": "@@ -1,7 +1,8 @@\n {\n-  \"sdk\": {\n-    \"allowPrerelease\": true\n-  },\n+    \"sdk\": {\n+        \"allowPrerelease\": true,\n+        \"version\": \"7.0.100-rc.2.22477.23\"\n+    },",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sure! Removed now \ud83d\udc4d\ud83c\udffb ",
              "createdAt": "2022-11-03T21:56:50Z",
              "path": "global.json",
              "diffHunk": "@@ -1,7 +1,8 @@\n {\n-  \"sdk\": {\n-    \"allowPrerelease\": true\n-  },\n+    \"sdk\": {\n+        \"allowPrerelease\": true,\n+        \"version\": \"7.0.100-rc.2.22477.23\"\n+    },",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    // Then decide how to log MSB4181\r\n                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\r\n                    {\r\n                        // If it's allowed to fail without error, log as a message\r\n                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);\r\n                    }\r\n\r\n```",
              "createdAt": "2022-11-03T21:47:51Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -961,11 +961,15 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     && !taskResult // and it returned false\n                     && !taskLoggingContext.HasLoggedErrors // and it didn't log any errors\n                     && (be is TaskHost th ? th.BuildRequestsSucceeded : false)\n-                    && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true) // and it's not allowed to fail unless it logs an error\n                     && !(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested)) // and it wasn't cancelled\n                 {\n+                    // If is allowed to fail without error\n+                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\n+                    {\n+                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);\n+                    }\n                     // Then decide how to log MSB4181",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Fit-and-finish question (@baronfel, especially): This logs with the `MSB4181:` prefix. Generally, we try not to have \"error codes\" for message-level logging. But here, it's kind of a warning, if you squint really hard. Should we strip the prefix, or leave it as-is?",
              "createdAt": "2022-11-03T21:49:50Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -961,11 +961,15 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     && !taskResult // and it returned false\n                     && !taskLoggingContext.HasLoggedErrors // and it didn't log any errors\n                     && (be is TaskHost th ? th.BuildRequestsSucceeded : false)\n-                    && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true) // and it's not allowed to fail unless it logs an error\n                     && !(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested)) // and it wasn't cancelled\n                 {\n+                    // If is allowed to fail without error\n+                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\n+                    {\n+                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The normal case is hopefully non-error (they rerouted the error(s) appropriately, so it's just an informational message they don't care about). Most of our other messages are similar to this in that they _might_ indicate an error but usually don't, so I'd vote for stripping the prefix, personally, but it's reasonable to leave it to baronfel.",
              "createdAt": "2022-11-04T17:54:59Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -961,11 +961,15 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     && !taskResult // and it returned false\n                     && !taskLoggingContext.HasLoggedErrors // and it didn't log any errors\n                     && (be is TaskHost th ? th.BuildRequestsSucceeded : false)\n-                    && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true) // and it's not allowed to fail unless it logs an error\n                     && !(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested)) // and it wasn't cancelled\n                 {\n+                    // If is allowed to fail without error\n+                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\n+                    {\n+                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> Most of our other messages are similar to this in that they _might_ indicate an error but usually don't\r\n\r\nI don't think I agree with this. We have a lot of messages that are fully neutral like \"Started building target\", and that feels like a very solid majority of logging in a normal build to me.",
              "createdAt": "2022-11-04T18:40:31Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -961,11 +961,15 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     && !taskResult // and it returned false\n                     && !taskLoggingContext.HasLoggedErrors // and it didn't log any errors\n                     && (be is TaskHost th ? th.BuildRequestsSucceeded : false)\n-                    && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true) // and it's not allowed to fail unless it logs an error\n                     && !(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested)) // and it wasn't cancelled\n                 {\n+                    // If is allowed to fail without error\n+                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\n+                    {\n+                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think of your example as \"might indicate an error but usually don't\"; if that target should not be building (or should not be building yet), it's indicating an error...but it's normally innocuous.",
              "createdAt": "2022-11-04T18:58:40Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -961,11 +961,15 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n                     && !taskResult // and it returned false\n                     && !taskLoggingContext.HasLoggedErrors // and it didn't log any errors\n                     && (be is TaskHost th ? th.BuildRequestsSucceeded : false)\n-                    && (be is IBuildEngine7 be7 ? !be7.AllowFailureWithoutError : true) // and it's not allowed to fail unless it logs an error\n                     && !(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested)) // and it wasn't cancelled\n                 {\n+                    // If is allowed to fail without error\n+                    if (be is IBuildEngine7 be7 && be7.AllowFailureWithoutError)\n+                    {\n+                        taskLoggingContext.LogComment(MessageImportance.Normal, \"TaskReturnedFalseButDidNotLogError\", _taskNode.Name);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}