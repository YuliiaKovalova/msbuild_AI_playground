{
  "number": 6189,
  "title": "Fix Loading of Plugin Assemblies",
  "body": "Fixes #6186 \r\n\r\n### Context\r\n#6126 changed the load behavior for NuGet dlls by forcing them to load in the default assembly load context.  This effectively pinned their versions to the SDK, which is not a safe behavior for targets that may wish to carry their own versions of NuGet or other DLLs that they might load.\r\n\r\n### Changes Made\r\nRather than pinning specific DLLs, change the behavior to load all DLLs that are in the MSBuild directory in the default assembly load context.  This allows targets to carry their own versions of dependencies, while avoiding loading assemblies that are packaged with MSBuild into multiple assembly load contexts, and thus losing the benefits of precompilation.\r\n\r\n### Testing\r\nVerified that dotnet build hello-world has the correct load and jitting behavior.\r\nVerified that tasks can load their own copies of NuGet binaries into the plugin assembly load context.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-02-23T22:55:25Z",
  "updatedAt": "2021-03-04T14:55:00Z",
  "closedAt": "2021-03-03T20:34:17Z",
  "mergedAt": "2021-03-03T20:34:16Z",
  "additions": 25,
  "deletions": 16,
  "changedFiles": 4,
  "headRefName": "fix-nuget-load",
  "isDraft": false,
  "author": {
    "login": "brianrob"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cc30d9813bf37d6f9aa215ade19b44e592d0e2f7",
          "message": "Revert \"Add NuGet assemblies to the list of well-known assemblies.\"\n\nThis reverts commit 183645c502cc41de4b63662704b7b339c32f0f12.",
          "committedDate": "2021-02-23T19:32:50Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e6e65393e0584c929ba842fc2b48d1d4e788182",
          "message": "Don't load assemblies in the plugin context if they are in the MSBuild directory.",
          "committedDate": "2021-02-23T22:47:30Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "364eb66791f18897648e829521bd8883ce6d3e1d",
          "message": "Normalize the MSBuild dir path.",
          "committedDate": "2021-02-24T01:18:16Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b3d41e7df202239314889071049d2b24fb66084",
          "message": "Fix the assembly loader test.",
          "committedDate": "2021-02-24T01:18:30Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b86d06c9c4ef1f85161cc1a74192aa8beb654c71",
          "message": "Harden path checks and detection of MSBuild dll file path.",
          "committedDate": "2021-02-24T21:40:22Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3de22d13725783273e4a8499984ba9c1e1164ec0",
          "message": "Mark _msbuildDirPath readonly.",
          "committedDate": "2021-03-01T15:01:07Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Is there a way to create unit tests for this behavior?\r\n\r\nEdit: Spoke too soon, looks like tests that cover this already exist and are failing.",
        "createdAt": "2021-02-23T23:08:10Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yup, I am working on fixing that now.",
        "createdAt": "2021-02-23T23:45:09Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "It might be interesting to measure the perf difference of this change compared to before the regression.  It may provide greater wins than the first fix since it is sharing more.",
        "createdAt": "2021-02-24T16:41:57Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Discovered a bug around case sensitivity of paths.  Consulted with @ladipro and landed at the latest iteration.",
        "createdAt": "2021-02-24T21:42:26Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "@ericstj, I did some offline testing around the types of paths that you proposed above, and they are handled properly by the file path normalization logic.",
        "createdAt": "2021-02-24T21:43:11Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "@marcpopMSFT, can you help me understand when this should be merged so that it doesn't impact the #6195?",
        "createdAt": "2021-03-01T15:36:17Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "We have the final build for preview 2 now so we should be clear to get this in.  However, our PR queue backed up again because of a sev 3 feed livesite incident where our build feed was taking many hours to update with new builds so we haulted our checkins. They say that's fixed now so we need to confirm and get our 11 approved PRs flowing again.",
        "createdAt": "2021-03-02T19:30:18Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is any normalization needed for this path, or can you guarantee that a string comparison is sufficient?  Things that could matter: relative vs full path, casing on some platforms, directory separator normalization, whitespace, extended prefixes (eg `\\??\\`)",
              "createdAt": "2021-02-23T23:58:16Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))",
              "author": {
                "login": "ericstj"
              }
            },
            {
              "body": "I think both should be full paths to the directory with MSBuild, assuming they match, and since they describe the exact same file system path, I think they should be identical in casing, too.\r\n\r\nMy related question is: is this the right MSBuild.exe? If we're running in, say, VS, this point to the version of MSBuild associated with VS, not the version that's executing at the moment. Is that correct?",
              "createdAt": "2021-02-24T00:52:13Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I have a commit that I'll post shortly that will normalize the path in the same way that the input is normalized, just to be sure.  The cost should be insignificant, as we only do it once per instance of MSBuild.\r\n\r\n@forgind on your related question, I believe that this is the right MSBuild based on what you're saying.  We'd want to be pointing at the VS MSBuild in that case, right?  That would ensure that we only load DLLs in the task ALC for tasks that aren't \"part of MSBuild\".",
              "createdAt": "2021-02-24T01:09:17Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))",
              "author": {
                "login": "brianrob"
              }
            },
            {
              "body": "I don't know, but I trust you.",
              "createdAt": "2021-02-24T15:36:35Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Is it easy to test this?  Things like:\r\n```\r\nTask.dll\r\n<msbuildDir>\\sub\\..\\Task.dll\r\nC:\\<msBuildPath>\\Task.dll\r\n\\<msbuildPath>\\Task.dll\r\n```\r\nPresumably the path to the task is coming from the project/props/targets so it is user specified.  I think there's also a version of `UsingTask` that uses StrongName.  Does that need to be considered? \r\n\r\nAssuming that can be fed in at the right level.",
              "createdAt": "2021-02-24T16:41:11Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))",
              "author": {
                "login": "ericstj"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: why is the default ALC called legacy?",
              "createdAt": "2021-02-24T00:49:57Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))\n             {\n                 return LoadUsingLegacyDefaultContext(fullPath);",
              "author": {
                "login": "ViktorHofer"
              }
            },
            {
              "body": "Not sure.  This is beyond my time in this code base.",
              "createdAt": "2021-02-24T01:09:32Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))\n             {\n                 return LoadUsingLegacyDefaultContext(fullPath);",
              "author": {
                "login": "brianrob"
              }
            },
            {
              "body": "The not-legacy ALC was a recent addition. rainersigwald tried to make it on by default, but that broke people, so he switched it to off-by-default but encouraged. It might have been turned on by default in the SDK; not sure.",
              "createdAt": "2021-02-24T15:38:08Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -52,7 +58,11 @@ public Assembly LoadFromPath(string fullPath)\n             // folders in a NuGet package).\n             fullPath = FileUtilities.NormalizePath(fullPath);\n \n-            if (Traits.Instance.EscapeHatches.UseSingleLoadContext)\n+            // If the requested load comes from the same directory as MSBuild, assume that\n+            // the load is part of the platform, and load it using the Default ALC.\n+            string assemblyDir = Path.GetDirectoryName(fullPath);\n+\n+            if (Traits.Instance.EscapeHatches.UseSingleLoadContext || string.Equals(assemblyDir, _msbuildDirPath))\n             {\n                 return LoadUsingLegacyDefaultContext(fullPath);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ComparePathsNoThrow handles the normalization part of this for you.",
              "createdAt": "2021-02-24T22:13:55Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -26,9 +26,9 @@ internal sealed class CoreClrAssemblyLoader\n         private static string _msbuildDirPath;\n         private static readonly Version _currentAssemblyVersion = new Version(Microsoft.Build.Shared.MSBuildConstants.CurrentAssemblyVersion);\n \n-        internal CoreClrAssemblyLoader()\n+        static CoreClrAssemblyLoader()\n         {\n-            _msbuildDirPath = FileUtilities.NormalizePath(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+            _msbuildDirPath = FileUtilities.NormalizePath(typeof(CoreClrAssemblyLoader).Assembly.Location);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks @forgind.  I'd like to leave this here.  The reason is that it happens only once per process, and has the ability to simplify the checks that must happen per assembly, instead of just once per process.  If we don't do this here, and the value would have changed, then when loading an assembly, we'd have to do a string comparison which would fail, and then we'd have to normalize both inputs, and then try again.\r\n\r\nIf on the other hand, the initial normalize call here changed the input, it could possibly avoid the extra normalizations per assembly load.",
              "createdAt": "2021-02-24T22:30:49Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -26,9 +26,9 @@ internal sealed class CoreClrAssemblyLoader\n         private static string _msbuildDirPath;\n         private static readonly Version _currentAssemblyVersion = new Version(Microsoft.Build.Shared.MSBuildConstants.CurrentAssemblyVersion);\n \n-        internal CoreClrAssemblyLoader()\n+        static CoreClrAssemblyLoader()\n         {\n-            _msbuildDirPath = FileUtilities.NormalizePath(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+            _msbuildDirPath = FileUtilities.NormalizePath(typeof(CoreClrAssemblyLoader).Assembly.Location);",
              "author": {
                "login": "brianrob"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: `readonly`",
              "createdAt": "2021-03-01T14:48:00Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -23,8 +23,15 @@ internal sealed class CoreClrAssemblyLoader\n \n         private bool _resolvingHandlerHookedUp = false;\n \n+        private static string _msbuildDirPath;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}