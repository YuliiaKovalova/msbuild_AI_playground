{
  "number": 11880,
  "title": "Add documentation about caching in MSBuild",
  "body": "Add documentation about caching in MSBuild\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-22T09:59:02Z",
  "updatedAt": "2025-06-02T13:54:04Z",
  "closedAt": "2025-06-02T13:54:04Z",
  "mergedAt": "2025-06-02T13:54:04Z",
  "additions": 58,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "dev/ykovalova/add_document_about_buildResults_cache",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b42106fa89d557e6604cf046bb4910498c2dc634",
          "message": "add documentation about results cache",
          "committedDate": "2025-05-22T09:57:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d9fb0aa2097ad82c8f1fafec64619c4486b28b8",
          "message": "adjust to the comments",
          "committedDate": "2025-05-22T12:59:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9876ffd7cead96130030d56146f97f5ef8444b3e",
          "message": "cleanup",
          "committedDate": "2025-05-22T13:02:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f0d31e12d4fa270cface5ed40e6233c377b19003",
          "message": "update markup",
          "committedDate": "2025-06-02T13:26:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The alt text for this image is just the file name; consider providing a more descriptive alt text or caption (e.g., \"Diagram illustrating the MSBuild cache flow\") for better accessibility.\n```suggestion\n![Diagram illustrating the MSBuild cache flow](CacheFlow.png)\n```",
              "createdAt": "2025-05-22T10:00:33Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider adding a brief example or instructions on how to enable/configure the ResultsCache (e.g., MSBuild CLI flags or project properties) so users can quickly adopt this feature.",
              "createdAt": "2025-05-22T10:00:34Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Under which circumstances will it consider it a mismatch? Is it deterministic?",
              "createdAt": "2025-05-22T10:30:08Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yes, it's checked for any BuildRequest unless you opt-out\r\nhttps://github.com/dotnet/msbuild/blob/f88eb76608c0e4417aa066c20e698a9174855df0/src/Build/BackEnd/Components/Caching/ResultsCache.cs#L353",
              "createdAt": "2025-05-22T11:47:21Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "So should it be \"the cache will consider it a mismatch\" instead? \r\nThe might strikes me as a might or might not, hard to tell kind of phrase.",
              "createdAt": "2025-05-22T12:34:08Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Under what circumstances will it be reusable?",
              "createdAt": "2025-05-22T10:30:53Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.\n+    *   `FailOnUnresolvedSdk`: Similar to the imports flag, this affects SDK resolution. A cached outcome from a build with a different SDK resolution strategy might not be reusable.",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The cached build had `FailOnUnresolvedSdk` flag set and the current build request had it set too \r\nhttps://github.com/dotnet/msbuild/blob/f88eb76608c0e4417aa066c20e698a9174855df0/src/Build/BackEnd/Components/Caching/ResultsCache.cs#L363-L367",
              "createdAt": "2025-05-22T11:56:30Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.\n+    *   `FailOnUnresolvedSdk`: Similar to the imports flag, this affects SDK resolution. A cached outcome from a build with a different SDK resolution strategy might not be reusable.",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Can we state that explicitly then please? The sentence is somewhat weird. I'm not sure about \"might\" in the context of the documentation.",
              "createdAt": "2025-05-22T12:35:36Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.\n+    *   `FailOnUnresolvedSdk`: Similar to the imports flag, this affects SDK resolution. A cached outcome from a build with a different SDK resolution strategy might not be reusable.",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "sure, done",
              "createdAt": "2025-05-22T12:59:33Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:**\n+    *   `IgnoreMissingEmptyAndInvalidImports`: This flag changes how MSBuild handles project imports. If a cached outcome was generated with a different setting for this flag than the current request, the cache might consider it a mismatch because the project evaluation could have been different.\n+    *   `FailOnUnresolvedSdk`: Similar to the imports flag, this affects SDK resolution. A cached outcome from a build with a different SDK resolution strategy might not be reusable.",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: as a suggestion, i think it would be nice to point to the functions that do that in this section for each point ",
              "createdAt": "2025-06-02T13:05:02Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: the formatting `-...-` looks a little off to me here `- if any of the flags is presented only in request or cache -`. as a suggestion, use brackets instead? ",
              "createdAt": "2025-06-02T13:09:13Z",
              "path": "documentation/wiki/Results-Cache.md",
              "diffHunk": "@@ -0,0 +1,58 @@\n+# MSBuild Caching: `ResultsCache`\n+\n+MSBuild uses caching to speed up builds. It does this by remembering the outcomes of parts of the build it has already completed. If it needs to build the same part again with the same settings, it can often reuse the stored outcome instead of doing all the work from scratch. This is especially helpful for large projects or when you're making small changes and rebuilding.\n+\n+![MSBuild Cache Flow](CacheFlow.png)\n+\n+## `ResultsCache` (The Core Cache Component)\n+\n+`ResultsCache` is the primary storage mechanism where MSBuild keeps the outcomes of its build targets.\n+\n+### What It Does\n+\n+1.  **Stores and Retrieves Build Outcomes**:\n+    *   It holds onto `BuildResult` objects. Each `BuildResult` is a record of the outcome for one or more build steps (targets) for a specific project setup (configuration).\n+    *   These outcomes are organized using a special ID (`configurationId`) that represents the unique way a project was defined (like list of targets, tools versions, etc).\n+    *   When MSBuild is about to build something, it first queries this cache: \"Have I processed this exact task before with these exact settings?\" If the cache has a valid outcome, MSBuild can use it.\n+    *   When new build work is completed, the outcomes are added to this cache so they can be used in the future. If outcomes for that specific setup already exist, the new information is merged with the old.\n+\n+2.  **Checks if a Build Request Can Be Fulfilled from Cache**:\n+    *   Before actually starting a build task, MSBuild uses this cache to see if all the necessary pieces have already been successfully built and their stored outcomes are still valid.\n+    *   This check considers the specific build settings and whether detailed project information (like all its properties and items) is needed from the cached outcome. If everything checks out, the build step can be satisfied from the cache.\n+\n+3.  **Clears Out Stored Outcomes**:\n+    *   Sometimes, the cache needs to be cleared. `ResultsCache` can remove all the outcomes it has stored.\n+    *   It can also clear out outcomes for just one specific project setup, for example, if project files have changed and the old outcomes are no longer valid.\n+\n+4.  **Prepares Cache Data for Transfer**:\n+    *   `ResultsCache` can convert the information it stores (either all of it or specific `BuildResult` records) into a special format.\n+    *   This format can then be sent to other MSBuild processes.\n+\n+### How `BuildRequestDataFlags` Affect Caching\n+\n+When MSBuild decides to build something, the request (`BuildRequest`) carries special instructions called `BuildRequestDataFlags`. These flags tell MSBuild *how* to perform the build and *what kind of result* is expected. The `ResultsCache` pays close attention to these flags because they are crucial for determining if a cached outcome is truly a match for a new request.\n+It's an out-in feature that can be disabled with change wave `17.12`. See more details in [ChangeWaves.md](ChangeWaves.md)\n+\n+Here's how some important flags interact with caching:\n+\n+*   **Flags Affecting Build Behavior:** - if any of the flags is presented only in request or cache - cache miss is returned:",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}