{
  "number": 7810,
  "title": "Check derivable from ITaskItem directly",
  "body": "Previously checked if any base type was named ITaskItem\r\n\r\n### Context\r\nA type derived from a MetadataLoadContext does not inherit from any type not derived from the same MetadataLoadContext. To work around that, the previous code checked whether each input passed to a task type can be cast to an ITaskItem by comparing it and its base types to ITaskItem by full name. There may be multiple plausible base types, however. This corrects that by checking if ITaskItem IsAssignableFrom the type, ensuring that a separate \"ITaskItem\" is passed for MLC and non-MLC contexts.\r\n\r\n### Customer Impact\r\nCustomers with custom tasks that take in or return types derived from ITaskItem (or ITaskItem[]) rather than ITaskItem (or ITaskItem[]) itself cannot build.\r\n\r\n### Regression?\r\nYes, in 17.3p3.\r\n\r\n### Risk\r\nI believe it is reasonably low, but I would like @rainersigwald to comment.\r\n\r\n### Changes Made\r\nUse IsAssignableFrom instead of checking by name.\r\n\r\n### Testing\r\nTried building a simple test project, and it worked as expected. Tried building a more complicated test project that used TaskFactory=\"TaskHostFactory\" in a UsingTask with a custom Task assembly, and it worked. Tried building the sln that had failed leading to this issue, and it built successfully.",
  "state": "MERGED",
  "createdAt": "2022-07-11T21:04:41Z",
  "updatedAt": "2022-07-14T18:57:14Z",
  "closedAt": "2022-07-14T18:57:13Z",
  "mergedAt": "2022-07-14T18:57:13Z",
  "additions": 28,
  "deletions": 25,
  "changedFiles": 6,
  "headRefName": "expand-mlc-use",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.3"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c7fb7b5955e7546272c7f0c666a711274eb7f7ad",
          "message": "Check derivable from ITaskItem directly\n\nPreviously checked if any base type was named ITaskItem",
          "committedDate": "2022-07-11T21:04:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f063aa20270b64425b966776a2d518bb804100e7",
          "message": "Load M.B.F from next to the executing MSBuild",
          "committedDate": "2022-07-13T00:01:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb9f4b25ade0cfc33b867cdca72bf68955185cb1",
          "message": "Add all MSBuild assemblies",
          "committedDate": "2022-07-14T18:26:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> lgtm. What was the concern you had that we wanted me to try to rediscover independently?\r\n\r\n[Loading Framework](https://github.com/dotnet/msbuild/pull/7810/files#diff-57decef90689c23ac83d6032081979300e4e18a7ab2df6b93451724d6495282dR374) assumes that the MLC knows about M.B.F. I _think_ that's ok because any task type that extends ITask would have to have M.B.F, but I'm unsure as to whether that's guaranteed to be right next to it. If not, we might be able to add assemblies next to Assembly.GetExecutingAssembly() to the list of \"runtimePaths\", but I'm unsure if there could be issues if there are conflicts.\r\n\r\nSo maybe not a real concern, but it's the part I'm least confident of.",
        "createdAt": "2022-07-12T16:20:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Do we provide the MSBuild folder as a set of assemblies for the MLC?",
        "createdAt": "2022-07-12T16:23:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Not currently; that would be the idea to add assemblies next to Assembly.GetExecutingAssembly(), presumably. I _think_ that's the right answer if we can't assume there's a M.B.F next to the task assembly, but as I said, I'm not sure if there can be version conflict problems.",
        "createdAt": "2022-07-12T16:26:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We _must_ unify to _the current_ MSBuild assemblies (just like the binding redirects force in .NET Framework scenarios). We cannot assume there's any MSBuild assemblies next to the task assembly--there usually are not and there shouldn't be.\r\n\r\nCan you step through and see how it's working for the full framework case with your current iteration? I wouldn't expect that to work at all. Unless maybe it's picking up Framework v4.0 from the runtime directory? In which case that's probably not ok.",
        "createdAt": "2022-07-12T19:16:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It looks like it's loading from next to the task assembly preferentially but falling back to the v4.0 Framework from the runtime directory. We're only interested in getting an ITaskItem, and I imagine that's been constant since it was created? I'm wondering what the danger is of loading the wrong version.\r\n\r\nOn the other hand, that assuages my concern about version conflicts if I try to grab the M.B.F from next to the executing assembly, so I can add that anyway (first) and use that.",
        "createdAt": "2022-07-12T23:49:03Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why just Framework when at runtime we'll unify all Microsoft.Build types?",
              "createdAt": "2022-07-14T13:35:51Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -47,7 +48,23 @@ internal class TypeLoader\n \n         private static MetadataLoadContext _context;\n \n-        private static string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n+        private static string[] runtimeAssemblies = findRuntimeAssembliesWithMicrosoftBuildFramework();\n+        private static string microsoftBuildFrameworkPath;\n+\n+        // We need to append Microsoft.Build.Framework from next to the executing assembly first to make sure it's loaded before the runtime variant.\n+        private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()\n+        {\n+            string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n+            string[] allAssemblies = new string[runtimeAssemblies.Length + 1];\n+            microsoftBuildFrameworkPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), \"Microsoft.Build.Framework.dll\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can be simplified:\r\n\r\n```suggestion\r\n            ((IList)runtimeAssemblies).Insert(0, microsoftBuildFrameworkPath);\r\n\r\n            return runtimeAssemblies;\r\n```",
              "createdAt": "2022-07-14T13:45:15Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -47,7 +48,23 @@ internal class TypeLoader\n \n         private static MetadataLoadContext _context;\n \n-        private static string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n+        private static string[] runtimeAssemblies = findRuntimeAssembliesWithMicrosoftBuildFramework();\n+        private static string microsoftBuildFrameworkPath;\n+\n+        // We need to append Microsoft.Build.Framework from next to the executing assembly first to make sure it's loaded before the runtime variant.\n+        private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()\n+        {\n+            string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), \"*.dll\");\n+            string[] allAssemblies = new string[runtimeAssemblies.Length + 1];\n+            microsoftBuildFrameworkPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), \"Microsoft.Build.Framework.dll\");\n+            allAssemblies[0] = microsoftBuildFrameworkPath;\n+            for (int i = 0; i < runtimeAssemblies.Length; i++)\n+            {\n+                allAssemblies[i + 1] = runtimeAssemblies[i];\n+            }\n+\n+            return allAssemblies;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}