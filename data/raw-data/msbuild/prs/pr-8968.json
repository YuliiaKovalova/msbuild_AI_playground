{
  "number": 8968,
  "title": "ProcessExtensions: use BCL Process.Kill.",
  "body": "This is more efficient, and doesn't require the OS (which could be a container image) to include the `pgrep` executable.\r\n\r\n@Forgind @rainersigwald ptal.",
  "state": "MERGED",
  "createdAt": "2023-06-28T08:04:29Z",
  "updatedAt": "2023-06-29T20:30:04Z",
  "closedAt": "2023-06-29T20:30:03Z",
  "mergedAt": "2023-06-29T20:30:03Z",
  "additions": 6,
  "deletions": 78,
  "changedFiles": 1,
  "headRefName": "process_kill",
  "isDraft": false,
  "author": {
    "login": "tmds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "608a496d1e66b32009dcad0a3490b7aa662ce4f6",
          "message": "ProcessExtensions: use BCL Process.Kill.",
          "committedDate": "2023-06-28T08:01:30Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe this first came into existence for .NET Core 3.0. This is very likely irrelevant, but I heard there's one customer left on extended support for .NET Core 2.1, and this would break them; can we make the ifdef a little more specific?",
              "createdAt": "2023-06-28T15:52:43Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I believe they're windows-only, so the \"throw new System.NotSupportedException\" shouldn't affect them.",
              "createdAt": "2023-06-28T15:55:45Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The existence of older runtimes is irrelevant: new MSBuild will never run on older versions the .NET runtime. It will run in the .NET SDK 8.0.100 and higher.",
              "createdAt": "2023-06-28T16:04:51Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "A lot of people who don't know about MSBuildLocator have some logic essentially replicating what it does. Say it's a faithful replication except it is ok with taking an SDK newer than the runtime. It could grab this MSBuild then load its own runtime and crash.\r\n\r\nYou can say that isn't a supported scenario, but I don't see any harm in making it specific to .NET Core 3.0+, so I don't see any harm in having that particular scenario not lead to crashes here.",
              "createdAt": "2023-06-28T17:09:08Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Personally, I prefer to clean up any code that is for versions that EOLed some time ago.\r\n\r\nShould I change to use `NETCOREAPP3_0_OR_GREATER` and include the previous implementation (which got replaced by throwing `NotSupportedException`)?",
              "createdAt": "2023-06-29T09:07:38Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "tmds"
              }
            },
            {
              "body": "> Say it's a faithful replication except it is ok with taking an SDK newer than the runtime. It could grab this MSBuild then load its own runtime and crash.\r\n\r\nIt'll already do that. We target .NET 7 and some unchanged code will use functionality that is not present on older runtimes.\r\n\r\n> You can say that isn't a supported scenario\r\n\r\nI can and do say that.\r\n\r\n\r\n\r\n> Should I change to use `NETCOREAPP3_0_OR_GREATER` and include the previous implementation (which got replaced by throwing `NotSupportedException`)?\r\n\r\nNo thank you, I think it's great as-is.",
              "createdAt": "2023-06-29T13:55:31Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm guessing you left this in rather than just having the windows code because you want the SupportedOSPlatform check to be happy? That seems reasonable but took me a second \ud83d\ude42",
              "createdAt": "2023-06-28T15:54:37Z",
              "path": "src/Shared/ProcessExtensions.cs",
              "diffHunk": "@@ -14,100 +11,31 @@ internal static class ProcessExtensions\n     {\n         public static void KillTree(this Process process, int timeoutMilliseconds)\n         {\n+#if NETCOREAPP\n+            process.Kill(entireProcessTree: true);\n+#else\n             if (NativeMethodsShared.IsWindows)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}