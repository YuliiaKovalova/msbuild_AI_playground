{
  "number": 9685,
  "title": "Changes to enable building msbuild with Unified Build",
  "body": "This enables building msbuild from within the VMR in non source-only modes.\r\n- Disable building type libraries when building on Core, and looking to package them up.\r\n- Bootstrap build should look for DotNetRoot, not RepoRoot. This will correctly pick up the global SDK from the VMR.\r\n- Exclude a couple projects that are VS specific and cause issues (typically packaging TLBs)\r\n- Don't look to copy net3.5 targeted PDBs when building on Core.",
  "state": "MERGED",
  "createdAt": "2024-01-26T21:18:59Z",
  "updatedAt": "2024-02-02T16:59:06Z",
  "closedAt": "2024-01-31T16:37:20Z",
  "mergedAt": "2024-01-31T16:37:20Z",
  "additions": 36,
  "deletions": 16,
  "changedFiles": 13,
  "headRefName": "upstream-ub-changes",
  "isDraft": false,
  "author": {
    "login": "mmitche"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9d2e4e8636a024d682de48d729e1de109b1f6593",
          "message": "Changes to enable building msbuild with Unified Build\nThis enables building msbuild from within the VMR in non source-only modes.\n- Split dependency properties for net framework targets to maintain VS compat.\n- Disable building type libraries when building on Core, and looking to package them up.\n- Bootstrap build should look for DotNetRoot, not RepoRoot. This will correctly pick up the global SDK from the VMR.\n- Exclude a couple projects that are VS specific and cause issues (typically packaging TLBs)\n- Don't look to copy net3.5 targeted PDBs when building on Core.",
          "committedDate": "2024-01-26T21:14:44Z",
          "author": {
            "name": "Matt Mitchell (.NET)",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a6a84560e4eaf792817908c85c8ec171f1ffe9e",
          "message": "Update AfterSigning.targets\n\nDon't attempt to copy the PDBs at all when building on core on non-windows platforms.",
          "committedDate": "2024-01-26T22:14:19Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd3af37c869e5b6f04d834447d946e7c3fd4fb3e",
          "message": "Merge remote-tracking branch 'upstream/main' into upstream-ub-changes",
          "committedDate": "2024-01-30T21:23:17Z",
          "author": {
            "name": "Matt Mitchell (.NET)",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "211e83c9b1bb104b50bd42350cc4600988078aa5",
          "message": "Review feedback",
          "committedDate": "2024-01-30T21:31:45Z",
          "author": {
            "name": "Matt Mitchell (.NET)",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bed8922f9ee784f78fbc0d5e5d875eebcbc7ab1d",
          "message": "Hoist condition to target",
          "committedDate": "2024-01-31T15:57:21Z",
          "author": {
            "name": "Matt Mitchell (.NET)",
            "email": "mmitche@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Confirmed on Linux and Windows,",
        "createdAt": "2024-01-26T22:19:06Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "@JanKrivanek @ViktorHofer I've changed the logic to not override the TFMs in normal UB modes.",
        "createdAt": "2024-01-30T21:33:23Z",
        "author": {
          "login": "mmitche"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald let me know what you think of this solution.",
              "createdAt": "2024-01-26T21:19:36Z",
              "path": "eng/Versions.props",
              "diffHunk": "@@ -25,9 +25,29 @@\n     <MicrosoftVSSDKBuildToolsVersion>16.7.13</MicrosoftVSSDKBuildToolsVersion>\n   </PropertyGroup>\n   <!-- Production Dependencies -->\n+  <!-- There is some delicacy and balance between several scenarios here:",
              "author": {
                "login": "mmitche"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Where is the `DotNetBuild` defined?",
              "createdAt": "2024-01-27T20:04:12Z",
              "path": "src/Deprecated/Engine/Microsoft.Build.Engine.csproj",
              "diffHunk": "@@ -4,7 +4,9 @@\n     <NoWarn>$(NoWarn);618</NoWarn>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <EnableDefaultItems>false</EnableDefaultItems>\n-    <CreateTlb>true</CreateTlb>\n+    <!-- Do not create Tlbs when building in .NET product mode. The packages are not shipped to VS,\n+         only their contents redisted within the SDK. -->\n+    <CreateTlb Condition=\"'$(DotNetBuild)' != 'true'\">true</CreateTlb>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It comes in via Arcade, when any of the flags marking a VMR build is set.",
              "createdAt": "2024-01-29T19:39:19Z",
              "path": "src/Deprecated/Engine/Microsoft.Build.Engine.csproj",
              "diffHunk": "@@ -4,7 +4,9 @@\n     <NoWarn>$(NoWarn);618</NoWarn>\n     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>\n     <EnableDefaultItems>false</EnableDefaultItems>\n-    <CreateTlb>true</CreateTlb>\n+    <!-- Do not create Tlbs when building in .NET product mode. The packages are not shipped to VS,\n+         only their contents redisted within the SDK. -->\n+    <CreateTlb Condition=\"'$(DotNetBuild)' != 'true'\">true</CreateTlb>",
              "author": {
                "login": "mmitche"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should the `'$(MSBuildRuntimeType)' != 'Core'` condition stay, to guard a case where `DotNetBuild` is not defined despite building on core?",
              "createdAt": "2024-01-27T20:06:11Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -118,7 +118,10 @@\n     </ItemGroup>\n   </Target>\n \n-  <Target Name=\"CreateTypeLib\" BeforeTargets=\"AfterBuild\" Inputs=\"$(TargetPath)\" Outputs=\"$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\\$(TargetName).tlb\" Condition=\"'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' != 'Core'\">\n+  <!-- This target creates a type library for the assemblies in a package. It requires desktop msbuild to locate the tooling\n+       Type libraries are still needed by Visual Studio in some cases, like the legacy C# project system.\n+       It calls into msbuild via COM, and needs the type library to do so. -->\n+  <Target Name=\"CreateTypeLib\" BeforeTargets=\"AfterBuild\" Inputs=\"$(TargetPath)\" Outputs=\"$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\\$(TargetName).tlb\" Condition=\"'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The logical expression `TFI == .NETFramework => Building binaries for VS` isn't true. It's very important to keep that in mind. I just last week had the same discussion on this with tmat and we landed on a nice design in Arcade: https://github.com/dotnet/arcade/pull/14391#discussion_r1465461640",
              "createdAt": "2024-01-29T11:04:53Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "ViktorHofer"
              }
            },
            {
              "body": "VS/packages really. IMO the key bit here is that is really the version flow problem I mentioned yesterday. We should not be transparently upgrading these dependencies except in source-only modes.",
              "createdAt": "2024-01-29T19:38:59Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "@ViktorHofer I don't think I understand the concern. Can you elaborate?",
              "createdAt": "2024-01-30T22:26:59Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The changes here have since been reverted. in non source-only modes, msbuild builds very very close to how it builds in the isolated repo context.",
              "createdAt": "2024-01-31T00:50:47Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "> @ViktorHofer I don't think I understand the concern. Can you elaborate?\r\n\r\nPinning package versions globally to a specific version for VS support based on the `$(TargetFramework` or `$(TargetFrameworkIdentifier)` is incorrect. You could have a class library project that uses i.e. System.Text.Json and multi-targets for both .NET Framework and .NETCoreApp and ships out-of-band. Pinning the System.Text.Json version down to X for the .NET Framework build doesn't make sense. VS support applies to msbuild tasks, etc but not to class libraries that ship independently.\r\n\r\nMy general recommendation around this has been to mark projects that apply to these restrictions via some property, i.e. https://github.com/dotnet/arcade/blob/2d7ad177f759e8a0128cc53fa90ffc54aec1822c/src/Microsoft.DotNet.NuGetRepack/tasks/Microsoft.DotNet.NuGetRepack.Tasks.csproj#L6.\r\n\r\nIn the example of Arcade, a targets file then gets imported that updates the PackageVersion items for VS support: https://github.com/dotnet/arcade/blob/2d7ad177f759e8a0128cc53fa90ffc54aec1822c/eng/BuildTask.targets#L3",
              "createdAt": "2024-01-31T13:28:57Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "ViktorHofer"
              }
            },
            {
              "body": "> VS support applies to msbuild tasks, etc but not to class libraries that ship independently.\r\n\r\nI think I agree with this but I don't see how it applies to this repo, which is filled with things where we only care about the .NET Framework versions of things because of VS specifically.",
              "createdAt": "2024-02-02T16:59:06Z",
              "path": "eng/Packages.props",
              "diffHunk": "@@ -23,13 +23,26 @@\n     <PackageVersion Include=\"System.Net.Http\" Version=\"$(SystemNetHttpVersion)\" />\n     <PackageVersion Include=\"System.Reflection.Metadata\" Version=\"$(SystemReflectionMetadataVersion)\" />\n     <PackageVersion Include=\"System.Reflection.MetadataLoadContext\" Version=\"$(SystemReflectionMetadataLoadContextVersion)\" />\n-    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsPackageVersion)\" />\n+    <PackageVersion Include=\"System.Resources.Extensions\" Version=\"$(SystemResourcesExtensionsVersion)\" />\n     <PackageVersion Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"$(SystemRuntimeCompilerServicesUnsafeVersion)\" />\n     <PackageVersion Include=\"System.Security.Principal.Windows\" Version=\"$(SystemSecurityPrincipalWindowsVersion)\" />\n     <PackageVersion Include=\"System.Text.Encoding.CodePages\" Version=\"$(SystemTextEncodingCodePagesVersion)\" />\n     <PackageVersion Include=\"System.Text.Json\" Version=\"$(SystemTextJsonVersion)\" />\n     <PackageVersion Include=\"System.Threading.Channels\" Version=\"$(SystemThreadingChannelsVersion)\" />\n     <PackageVersion Include=\"System.Threading.Tasks.Dataflow\" Version=\"$(SystemThreadingTasksDataflowVersion)\" />\n     <PackageVersion Include=\"xunit.console\" Version=\"$(XUnitVersion)\" />\n+\n+  </ItemGroup>\n+\n+  <!-- This set of packages will use different versions based on building binaries for VS. In non-UB modes this has no effect. -->\n+  <ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\">",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "PackageValidation needs to be disabled when only producing a subset of TFMs. That only happens in source-only builds. I'm now missing a condition on this property. Why did you remove the target condition?",
              "createdAt": "2024-01-29T11:07:22Z",
              "path": "eng/SourceBuild.props",
              "diffHunk": "@@ -7,12 +7,13 @@\n     <SourceBuildManagedOnly>true</SourceBuildManagedOnly>\n   </PropertyGroup>\n \n-  <Target Name=\"ConfigureInnerBuildArgs\"\n-          BeforeTargets=\"GetSourceBuildCommandConfiguration\"\n-          Condition=\"'$(ArcadeBuildFromSource)' == 'true'\">\n+  <Target Name=\"ConfigureInnerBuildArgs\" BeforeTargets=\"GetSourceBuildCommandConfiguration\">\n     <PropertyGroup>\n-      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n-      <!-- Disable package validation as source build filters out target frameworks. -->\n+      <!-- Filter down projects aggressively in source-only modes. -->\n+      <InnerBuildArgs Condition=\"'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'\">$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n+\n+      <!-- Disable package validation as unified build may upgrade the net core target framework or\n+           skip building net framework targets in source-only modes. -->\n       <InnerBuildArgs>$(InnerBuildArgs) /p:EnablePackageValidation=false</InnerBuildArgs>",
              "author": {
                "login": "ViktorHofer"
              }
            },
            {
              "body": "I think this is due to the transparent upgrading of the target TFMs and the input packages.",
              "createdAt": "2024-01-29T19:40:09Z",
              "path": "eng/SourceBuild.props",
              "diffHunk": "@@ -7,12 +7,13 @@\n     <SourceBuildManagedOnly>true</SourceBuildManagedOnly>\n   </PropertyGroup>\n \n-  <Target Name=\"ConfigureInnerBuildArgs\"\n-          BeforeTargets=\"GetSourceBuildCommandConfiguration\"\n-          Condition=\"'$(ArcadeBuildFromSource)' == 'true'\">\n+  <Target Name=\"ConfigureInnerBuildArgs\" BeforeTargets=\"GetSourceBuildCommandConfiguration\">\n     <PropertyGroup>\n-      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n-      <!-- Disable package validation as source build filters out target frameworks. -->\n+      <!-- Filter down projects aggressively in source-only modes. -->\n+      <InnerBuildArgs Condition=\"'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'\">$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n+\n+      <!-- Disable package validation as unified build may upgrade the net core target framework or\n+           skip building net framework targets in source-only modes. -->\n       <InnerBuildArgs>$(InnerBuildArgs) /p:EnablePackageValidation=false</InnerBuildArgs>",
              "author": {
                "login": "mmitche"
              }
            },
            {
              "body": "We should disable the transparent upgrade of TFMs then and pin it in the repo. I assume msbuild just uses `NetCurrent`? This really needs to be fixed before the PR gets merged.",
              "createdAt": "2024-01-29T20:06:34Z",
              "path": "eng/SourceBuild.props",
              "diffHunk": "@@ -7,12 +7,13 @@\n     <SourceBuildManagedOnly>true</SourceBuildManagedOnly>\n   </PropertyGroup>\n \n-  <Target Name=\"ConfigureInnerBuildArgs\"\n-          BeforeTargets=\"GetSourceBuildCommandConfiguration\"\n-          Condition=\"'$(ArcadeBuildFromSource)' == 'true'\">\n+  <Target Name=\"ConfigureInnerBuildArgs\" BeforeTargets=\"GetSourceBuildCommandConfiguration\">\n     <PropertyGroup>\n-      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n-      <!-- Disable package validation as source build filters out target frameworks. -->\n+      <!-- Filter down projects aggressively in source-only modes. -->\n+      <InnerBuildArgs Condition=\"'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'\">$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n+\n+      <!-- Disable package validation as unified build may upgrade the net core target framework or\n+           skip building net framework targets in source-only modes. -->\n       <InnerBuildArgs>$(InnerBuildArgs) /p:EnablePackageValidation=false</InnerBuildArgs>",
              "author": {
                "login": "ViktorHofer"
              }
            },
            {
              "body": "Pinned in repo now.",
              "createdAt": "2024-01-30T21:36:22Z",
              "path": "eng/SourceBuild.props",
              "diffHunk": "@@ -7,12 +7,13 @@\n     <SourceBuildManagedOnly>true</SourceBuildManagedOnly>\n   </PropertyGroup>\n \n-  <Target Name=\"ConfigureInnerBuildArgs\"\n-          BeforeTargets=\"GetSourceBuildCommandConfiguration\"\n-          Condition=\"'$(ArcadeBuildFromSource)' == 'true'\">\n+  <Target Name=\"ConfigureInnerBuildArgs\" BeforeTargets=\"GetSourceBuildCommandConfiguration\">\n     <PropertyGroup>\n-      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n-      <!-- Disable package validation as source build filters out target frameworks. -->\n+      <!-- Filter down projects aggressively in source-only modes. -->\n+      <InnerBuildArgs Condition=\"'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'\">$(InnerBuildArgs) /p:Projects=\"$(InnerSourceBuildRepoRoot)MSBuild.SourceBuild.slnf\"</InnerBuildArgs>\n+\n+      <!-- Disable package validation as unified build may upgrade the net core target framework or\n+           skip building net framework targets in source-only modes. -->\n       <InnerBuildArgs>$(InnerBuildArgs) /p:EnablePackageValidation=false</InnerBuildArgs>",
              "author": {
                "login": "mmitche"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I saw you disabled this explicitly--was the MSBuildRuntimeType check here insufficient?",
              "createdAt": "2024-01-30T22:35:16Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -118,6 +118,9 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- This target creates a type library for the assemblies in a package. It requires desktop msbuild to locate the tooling\n+       Type libraries are still needed by Visual Studio in some cases, like the legacy C# project system.\n+       It calls into msbuild via COM, and needs the type library to do so. -->\n   <Target Name=\"CreateTypeLib\" BeforeTargets=\"AfterBuild\" Inputs=\"$(TargetPath)\" Outputs=\"$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\\$(TargetName).tlb\" Condition=\"'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' != 'Core'\">",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You mean disabling via CreateTlb? There is use elsewhere in src/MSBuild/MSBuild.csproj https://github.com/dotnet/msbuild/pull/9685/files#diff-24f179152546e553997c333eeb9c000c2e31d5b3ff953b524fc49cdfc781fb6dR242\r\n\r\nI thought it was clearer to have an explicit disabling of the creation rather than an implicit one based on the build host.",
              "createdAt": "2024-01-31T00:49:39Z",
              "path": "src/Directory.Build.targets",
              "diffHunk": "@@ -118,6 +118,9 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- This target creates a type library for the assemblies in a package. It requires desktop msbuild to locate the tooling\n+       Type libraries are still needed by Visual Studio in some cases, like the legacy C# project system.\n+       It calls into msbuild via COM, and needs the type library to do so. -->\n   <Target Name=\"CreateTypeLib\" BeforeTargets=\"AfterBuild\" Inputs=\"$(TargetPath)\" Outputs=\"$(TargetDir)$(TargetName).tlb;$(TargetDir)x64\\$(TargetName).tlb\" Condition=\"'$(BuildingInsideVisualStudio)' != 'true' and '$(CreateTlb)' == 'true' and $([MSBuild]::IsOSPlatform('windows')) and '$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MSBuildRuntimeType)' != 'Core'\">",
              "author": {
                "login": "mmitche"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Move the condition back into the target and revert putting everything into a single line. We find separate lines more readable for msbuild targets that have more than two xml attributes.",
              "createdAt": "2024-01-31T13:21:38Z",
              "path": "eng/SourceBuild.props",
              "diffHunk": "@@ -7,11 +7,11 @@\n     <SourceBuildManagedOnly>true</SourceBuildManagedOnly>\n   </PropertyGroup>\n \n-  <Target Name=\"ConfigureInnerBuildArgs\"\n-          BeforeTargets=\"GetSourceBuildCommandConfiguration\"\n-          Condition=\"'$(ArcadeBuildFromSource)' == 'true'\">\n-    <PropertyGroup>\n+  <Target Name=\"ConfigureInnerBuildArgs\" BeforeTargets=\"GetSourceBuildCommandConfiguration\">\n+    <PropertyGroup Condition=\"'$(ArcadeBuildFromSource)' == 'true' or '$(DotNetBuildSourceOnly)' == 'true'\">",
              "author": {
                "login": "ViktorHofer"
              }
            }
          ]
        }
      }
    ]
  }
}