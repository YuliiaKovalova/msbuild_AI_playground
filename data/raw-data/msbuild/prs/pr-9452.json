{
  "number": 9452,
  "title": "Always unquote target parameters",
  "body": "Fixes #9442\r\n\r\n### Context\r\nCurrently if target parameter provided with the quoted value: /t:\"Clean;Build\" from cmd it will be parsed as \"Clean;Build\" \r\nWhich results not finding the provided target, unless there is existing such target with name \"Clean;Build\". However it is not the case for powershell. \r\n\r\n### Changes Made\r\nUnquote target switch parameters before prasing. \r\nThe functionality is under the change wave. \r\n\r\n### Testing\r\nAdded UnitTesting, all existing tests should pass as well, without breaking it. ",
  "state": "MERGED",
  "createdAt": "2023-11-24T09:58:43Z",
  "updatedAt": "2024-06-14T10:05:14Z",
  "closedAt": "2023-12-04T09:45:25Z",
  "mergedAt": "2023-12-04T09:45:25Z",
  "additions": 76,
  "deletions": 0,
  "changedFiles": 4,
  "headRefName": "dev/f-alizada/enclosed-target-list-fix",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "61233143f53746784868c2e33123d6174f45cd11",
          "message": "Always unquote target parameters",
          "committedDate": "2023-11-24T09:48:24Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6945bd21d71d244b52fea9d523b81d9272dfa3b",
          "message": "Update the name of EscapeHatches variable",
          "committedDate": "2023-11-24T09:55:59Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd690f91e2602088dd6b3bb8b5f8a5aa4fb16124",
          "message": "Update the ChangeWaves file",
          "committedDate": "2023-11-24T09:59:09Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40fc0458c249fcbeac9228abbfbe0a0bf96bfec3",
          "message": "Address PR comments, include the more detailed comment about why",
          "committedDate": "2023-11-27T13:46:47Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c469b65e6d447b9ce136f0a9110525ba7a9bbd51",
          "message": "Merge branch 'main' into dev/f-alizada/enclosed-target-list-fix",
          "committedDate": "2023-11-27T14:26:59Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fec95b64db7554302090eac3167b4f462f509abb",
          "message": "Address PR comments, fix namings",
          "committedDate": "2023-11-30T11:54:56Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "508b4e5f6afe45554dc9f15820255bb246c2add7",
          "message": "Merge branch 'main' into dev/f-alizada/enclosed-target-list-fix",
          "committedDate": "2023-12-01T09:16:36Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d86f924814b1a93d57993fd16f09148456f57621",
          "message": "Address PR comments, update code documentation",
          "committedDate": "2023-12-01T10:14:19Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f31e78663cf1d98798775a6f2d6b711e085cfd3",
          "message": "Update change wave description",
          "committedDate": "2023-12-01T10:59:06Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e32b40ae1347105d948d4b26a248b23eeb7788fd",
          "message": "specify parameter in change wave",
          "committedDate": "2023-12-01T10:59:50Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-12-01T11:39:16Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-12-01T11:39:24Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "We should consider -p separately - I know this has been a big pain in the SDK parsing/forwarding and it would be nice to rationalize it all.",
        "createdAt": "2023-12-01T16:16:48Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: it not precise. You can still have target with \";\" as before, but you cannot specify it in /t: parameter anymore. Such target would still be invoked by msbuild logic by \"BeforeTarget\" or \"AfterTarget\".",
              "createdAt": "2023-11-27T12:10:44Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,6 +27,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`\n - [Warning on serialization custom events by default in .NET framework](https://github.com/dotnet/msbuild/pull/9318)\n - [Cache SDK resolver data process-wide](https://github.com/dotnet/msbuild/pull/9335)\n+- [Target parameters will be unquoted, this will remove the possibility to have ';' in target name ](https://github.com/dotnet/msbuild/pull/9452)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thank you for pointing out, agree, updated the text",
              "createdAt": "2023-11-27T13:50:07Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,6 +27,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`\n - [Warning on serialization custom events by default in .NET framework](https://github.com/dotnet/msbuild/pull/9318)\n - [Cache SDK resolver data process-wide](https://github.com/dotnet/msbuild/pull/9335)\n+- [Target parameters will be unquoted, this will remove the possibility to have ';' in target name ](https://github.com/dotnet/msbuild/pull/9452)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider document (comment) reasoning for unquoting Target and also mention msbuild issue number #xxxx",
              "createdAt": "2023-11-27T12:44:47Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,26 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)\n+        {\n+            if (!unquoteParameter || !Traits.Instance.EscapeHatches.UnquoteTragetSwitchParameters)\n+            {\n+                return false;\n+            }\n+            if (parameterizedSwitch == ParameterizedSwitch.Target)\n+            {\n+                return true;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thank you! Added comment right before the Target parametrized switch comparison. ",
              "createdAt": "2023-11-27T13:50:55Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,26 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)\n+        {\n+            if (!unquoteParameter || !Traits.Instance.EscapeHatches.UnquoteTragetSwitchParameters)\n+            {\n+                return false;\n+            }\n+            if (parameterizedSwitch == ParameterizedSwitch.Target)\n+            {\n+                return true;",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: spelling (\"Traget\" vs \"Target\")",
              "createdAt": "2023-11-28T17:48:10Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -400,6 +400,14 @@ public bool EnableWarningOnCustomBuildEvent\n             }\n         }\n \n+        public bool UnquoteTragetSwitchParameters",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Thank you, updated",
              "createdAt": "2023-11-30T11:55:32Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -400,6 +400,14 @@ public bool EnableWarningOnCustomBuildEvent\n             }\n         }\n \n+        public bool UnquoteTragetSwitchParameters",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: IsMultipleAllowedSwithParameterDueToUnquote -> IsMultipleAllowedSwit**c**hParameterDueToUnquote\r\n\r\nBtw. Can the name be simplified and clarified? e.g. would `ShouldUnquoteSwitchParameters` be appropriate?",
              "createdAt": "2023-11-28T18:28:00Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,30 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you @JanKrivanek for pointing out. Applied the change: IsMultipleAllowedSwitchParameterDueToUnquote.\r\nregarding the \"ShouldUnquoteSwitchParameters\" naming, I was thinking to specifically mention that the method should be applied to the multiple allowed values switch parameters, since the single valued parameters are handled differently (unquoted directly). \r\nIt is possible also to iclude additional check so the method is actually applied to the proper parameter, what do you think? ",
              "createdAt": "2023-11-30T12:57:54Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,30 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "As a private method - the usage is under control, plus pretty scoped - I would not add the extra checking in code. Mentioning the usage in comments should suffice.",
              "createdAt": "2023-11-30T13:43:55Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,30 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you, I have updated a bit the description to specify multiple valued parameters. ",
              "createdAt": "2023-12-01T10:40:20Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -651,6 +656,30 @@ internal string[][] GetFileLoggerParameters()\n             return groupedFileLoggerParameters;\n         }\n \n+        /// <summary>\n+        /// Checks if the provided parametrized switch needs to be unquoted.\n+        /// The method will return 'true' in case:\n+        ///     The changewave 17.10 is not set and\n+        ///     The parametrized switch is 'Target'\n+        /// </summary>\n+        private bool IsMultipleAllowedSwithParameterDueToUnquote(bool unquoteParameter, ParameterizedSwitch parameterizedSwitch)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Btw. what is the `Unquote` property of the `ParametrizedSwitchInfo` suppose to mean? Cannot we simply refer to just that here (plus the chnagewave)?\r\n\r\nIt's already set to `true` for targets: https://github.com/dotnet/msbuild/blob/5fcddc790f4eeaf953a3d283e39751dd0e1f2992/src/MSBuild/CommandLineSwitches.cs#L233\r\n\r\nI'm wondering why the other swtich types should be handled differently.\r\n\r\n",
              "createdAt": "2023-11-28T18:36:49Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -488,6 +488,11 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st\n                 }\n                 else\n                 {\n+                    if (IsMultipleAllowedSwithParameterDueToUnquote(unquoteParameters, parameterizedSwitch))",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It is already being used by the method however, removing the validation on switch parameter to be equal to Target the check and unquoting will be applied to all unquote=True and multiple allowed parameters. This change was designed to reduce amount changed behaviours of different parameters, what do you think @JanKrivanek , @rainersigwald ?  ",
              "createdAt": "2023-11-30T13:02:10Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -488,6 +488,11 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st\n                 }\n                 else\n                 {\n+                    if (IsMultipleAllowedSwithParameterDueToUnquote(unquoteParameters, parameterizedSwitch))",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Targetting it tactically to `Target` switch plays it safe.\r\nThough I'm wondering how much risk is there in having the behavior be equal for all the switches that has the `Unquote` and `MultiValue` both set to `true` - would you know @rainersigwald?\r\nIt would be nice to have less special casing if not necessary.\r\n\r\n\r\nBtw. - it's definitaly not blocking the fix! (can be just ignored, or investigated later on) ",
              "createdAt": "2023-11-30T13:41:36Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -488,6 +488,11 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st\n                 }\n                 else\n                 {\n+                    if (IsMultipleAllowedSwithParameterDueToUnquote(unquoteParameters, parameterizedSwitch))",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Talked to @f-alizada offline, and we agreed to leave it in the targeted/conservative case. I am generally conservative about changing our CLI parsing behavior since it's both complex and a bit weird. In principle I think doing this for all of the Unquote+MultiValue switches makes sense, except _maybe_ for `-p:`. That \"maybe\" was a deciding factor for me.",
              "createdAt": "2023-12-01T16:01:57Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -488,6 +488,11 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st\n                 }\n                 else\n                 {\n+                    if (IsMultipleAllowedSwithParameterDueToUnquote(unquoteParameters, parameterizedSwitch))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sounds good then :-)",
              "createdAt": "2023-12-04T09:08:08Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -488,6 +488,11 @@ internal void SetParameterlessSwitch(ParameterlessSwitch parameterlessSwitch, st\n                 }\n                 else\n                 {\n+                    if (IsMultipleAllowedSwithParameterDueToUnquote(unquoteParameters, parameterizedSwitch))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- [Target parameters will be unquoted](https://github.com/dotnet/msbuild/pull/9452), meaning  the ';' symbol in the target name will always be treated as separator\r\n```",
              "createdAt": "2023-11-30T19:22:49Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,6 +27,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`\n - [Warning on serialization custom events by default in .NET framework](https://github.com/dotnet/msbuild/pull/9318)\n - [Cache SDK resolver data process-wide](https://github.com/dotnet/msbuild/pull/9335)\n+- [Target parameters will be unquoted](https://github.com/dotnet/msbuild/pull/9452), meaning  the ';' symbol in the target name will be treated as separator",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated + specified that it is applied to 'parameter' target name, since: https://learn.microsoft.com/en-us/visualstudio/msbuild/target-element-msbuild?view=vs-2022 it is still possible to create target name with ';' in its name. ",
              "createdAt": "2023-12-01T11:01:03Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,6 +27,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`\n - [Warning on serialization custom events by default in .NET framework](https://github.com/dotnet/msbuild/pull/9318)\n - [Cache SDK resolver data process-wide](https://github.com/dotnet/msbuild/pull/9335)\n+- [Target parameters will be unquoted](https://github.com/dotnet/msbuild/pull/9452), meaning  the ';' symbol in the target name will be treated as separator",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this be\r\n\r\n```suggestion\r\n        [InlineData(\"/t:\\\"Clean;Build\\\"\", \"\\\"Clean;Build\\\"\")]\r\n```\r\n\r\n? If not, why not?",
              "createdAt": "2023-11-30T21:30:08Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1055,6 +1055,43 @@ public void AppendParameterizedSwitchesTests2()\n             Assert.Equal(\"build\", parameters[2]);\n         }\n \n+        /// <summary>\n+        /// Verifies that the Target property is unquoted and parsed properly.\n+        /// This will remove the possibility to have the ';' in the target name. \n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"/t:Clean;Build\", \"\\\"Clean;Build\\\"\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you for the review! \r\nThe first parameter of the test method is commandlineArgument, which is used in SetParametrizedSwitch method only to set the value of received parameter. \r\nBy the usage of the SetParameterizedSwitch: https://github.com/dotnet/msbuild/blob/67916dc4592efb2a0bec902aa1a77105859ee245/src/MSBuild/XMake.cs#L2275C20-L2275C20\r\nThe value of commandline arg always unquoted. \r\nScope of this test is to verify the parsing functionality of switch parameters of target parameter, and command line value should be left unchanged and not modified, during the invoked methods. \r\n\r\nThe parameters of the tests method was implemented in such way so its duplicating the usage of tested method, there is a possibility to completely remove the parameter. What do you think?  ",
              "createdAt": "2023-12-01T10:30:05Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1055,6 +1055,43 @@ public void AppendParameterizedSwitchesTests2()\n             Assert.Equal(\"build\", parameters[2]);\n         }\n \n+        /// <summary>\n+        /// Verifies that the Target property is unquoted and parsed properly.\n+        /// This will remove the possibility to have the ';' in the target name. \n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"/t:Clean;Build\", \"\\\"Clean;Build\\\"\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Ok, this sounds good then. I don't think a follow-up refactor is necessary but I don't object to it either.",
              "createdAt": "2023-12-01T16:02:57Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1055,6 +1055,43 @@ public void AppendParameterizedSwitchesTests2()\n             Assert.Equal(\"build\", parameters[2]);\n         }\n \n+        /// <summary>\n+        /// Verifies that the Target property is unquoted and parsed properly.\n+        /// This will remove the possibility to have the ';' in the target name. \n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"/t:Clean;Build\", \"\\\"Clean;Build\\\"\")]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Verifies that the parsing behavior of quoted target properties is not changed when ChangeWave configured.\r\n```",
              "createdAt": "2023-11-30T21:30:32Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1055,6 +1055,43 @@ public void AppendParameterizedSwitchesTests2()\n             Assert.Equal(\"build\", parameters[2]);\n         }\n \n+        /// <summary>\n+        /// Verifies that the Target property is unquoted and parsed properly.\n+        /// This will remove the possibility to have the ';' in the target name. \n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"/t:Clean;Build\", \"\\\"Clean;Build\\\"\")]\n+        [InlineData(\"/t:Clean;Build\", \"Clean;Build\")]\n+        public void ParameterizedSwitchTargetQuotedTest(string commandLineArg, string switchParameters)\n+        {\n+            CommandLineSwitches switches = new CommandLineSwitches();\n+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Target, commandLineArg, switchParameters, true, true, false);\n+            Assert.True(switches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Target));\n+\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target].Length.ShouldBe(2);\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target][0].ShouldBe(\"Clean\");\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target][1].ShouldBe(\"Build\");\n+        }\n+\n+        /// <summary>\n+        /// Verifies that the parsing behaviour of quoted target properties is not change when ChangeWave configured.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you, updated! ",
              "createdAt": "2023-12-01T10:32:07Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1055,6 +1055,43 @@ public void AppendParameterizedSwitchesTests2()\n             Assert.Equal(\"build\", parameters[2]);\n         }\n \n+        /// <summary>\n+        /// Verifies that the Target property is unquoted and parsed properly.\n+        /// This will remove the possibility to have the ';' in the target name. \n+        /// </summary>\n+        [Theory]\n+        [InlineData(\"/t:Clean;Build\", \"\\\"Clean;Build\\\"\")]\n+        [InlineData(\"/t:Clean;Build\", \"Clean;Build\")]\n+        public void ParameterizedSwitchTargetQuotedTest(string commandLineArg, string switchParameters)\n+        {\n+            CommandLineSwitches switches = new CommandLineSwitches();\n+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Target, commandLineArg, switchParameters, true, true, false);\n+            Assert.True(switches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Target));\n+\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target].Length.ShouldBe(2);\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target][0].ShouldBe(\"Clean\");\n+            switches[CommandLineSwitches.ParameterizedSwitch.Target][1].ShouldBe(\"Build\");\n+        }\n+\n+        /// <summary>\n+        /// Verifies that the parsing behaviour of quoted target properties is not change when ChangeWave configured.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}