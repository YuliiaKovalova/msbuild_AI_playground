{
  "number": 7553,
  "title": "Add location string to drive enumerating wildcard warning",
  "body": "Fixes #7029 by associating a file location string with the WildcardResultsInDriveEnumeration resource name.\r\n\r\n### Context\r\nFor https://github.com/dotnet/project-system/blob/main/build/import/Workarounds.targets#L8, it was difficult to detect the location at which the drive enumerating wildcard pattern was occurring even though a warning was logged, since 1) there was no location string added to the warning, and 2) the Exclude rather than the Remove element was shown in the warning. To resolve 1), it would be better to associate the location string with the `WildcardResultsInDriveEnumeration` resource name.\r\n\r\n### Changes Made\r\nAdded location string to the `WildcardResultsInDriveEnumeration` resource name in order to view the location for drive enumerating wildcard warnings and errors.\r\n\r\n### Testing\r\nModified ProjectItem, ObjectModelHelper (for ProjectItemInstance), and CreateItem unit tests to ensure that the project file location was placed in the warning or error message.\r\n\r\n### Notes\r\nAny `<i Remove=<drive enumerating wildcard> />` will still be considered as an `Exclude ` attribute in the warning or error message, since <Foo Include=.../> <Foo Remove=.../> is treated as equivalent to `<Foo Include=... Exclude=... />`, which still makes the warning or error message slightly unclear for drive enumerating wildcard used in Remove cases. However, the wildcarded value will still be caught and logged/thrown based on whether the environment variable is set.",
  "state": "MERGED",
  "createdAt": "2022-04-19T22:35:56Z",
  "updatedAt": "2022-05-11T09:14:26Z",
  "closedAt": "2022-05-11T09:14:26Z",
  "mergedAt": "2022-05-11T09:14:26Z",
  "additions": 78,
  "deletions": 55,
  "changedFiles": 19,
  "headRefName": "dev/mruxmohan/add-location-string",
  "isDraft": false,
  "author": {
    "login": "mruxmohan4"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "276a540a13d81c8d523f59aff14228ae787e5050",
          "message": "Added location string to DriveEnumeratingWildcardMessageResourceName",
          "committedDate": "2022-05-04T17:18:41Z",
          "author": {
            "name": "Meera Ruxmohan",
            "email": "mruxmohan@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e818da402972b5dee0f57692ef4ebdd54687fbb8",
          "message": "Addressed PR feedback",
          "committedDate": "2022-05-04T17:18:41Z",
          "author": {
            "name": "Meera Ruxmohan",
            "email": "mruxmohan@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "LocationString does include the column + line number, in addition to the file name. And right, I wanted Remove to be separate from Exclude in a second PR",
        "createdAt": "2022-04-20T18:29:57Z",
        "author": {
          "login": "mruxmohan4"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This will fail on a non-English machine; we generally prefer to either assert that the localized resource is present or just \r\n\r\n```suggestion\r\n                    engine.AssertLogContains(engine.ProjectFileOfTaskNode);\r\n```",
              "createdAt": "2022-04-20T21:30:42Z",
              "path": "src/Tasks.UnitTests/CreateItem_Tests.cs",
              "diffHunk": "@@ -353,6 +354,7 @@ private static void VerifyDriveEnumerationWarningLoggedUponCreateItemExecution(s\n                     t.Execute().ShouldBeTrue();\n                     engine.Warnings.ShouldBe(1);\n                     engine.AssertLogContains(\"MSB5029\");\n+                    engine.AssertLogContains($\"file {engine.ProjectFileOfTaskNode}\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: quote?\r\n\r\n```suggestion\r\n    <value>MSB5029: The value \"{0}\" of the \"{1}\" attribute in element &lt;{2}&gt; in file \"{3}\" is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>\r\n```",
              "createdAt": "2022-05-02T14:30:52Z",
              "path": "src/Shared/Resources/Strings.shared.resx",
              "diffHunk": "@@ -279,7 +279,7 @@\n     <comment>{StrBegin=\"MSB5028: \"}UE: The project filename is provided separately to loggers.</comment>\n   </data>\n   <data name=\"WildcardResultsInDriveEnumeration\" xml:space=\"preserve\">\n-    <value>MSB5029: The value \"{0}\" of the \"{1}\" attribute in element &lt;{2}&gt; is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>\n+    <value>MSB5029: The value \"{0}\" of the \"{1}\" attribute in element &lt;{2}&gt; in file {3} is a wildcard that results in enumerating all files on the drive, which was likely not intended. Check that referenced properties are always defined.</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the behavior on an in-memory project? Is it still reasonable? Should this be a new test instead of a change to the existing one?",
              "createdAt": "2022-05-02T14:33:38Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -831,17 +831,27 @@ private static void ProjectGetterResultsInDriveEnumerationWarning(string unevalu\n                     Helpers.ResetStateForDriveEnumeratingWildcardTests(env, \"0\");\n \n                     // Setup\n+                    string content = @\"\n+                    <Project>\n+                        <ItemGroup>\n+                            <i Include='i1'/>\n+                        </ItemGroup>\n+                    </Project>\n+                    \";\n+\n+                    TransientTestProjectWithFiles testProject = env.CreateTestProjectWithFiles(\"build.proj\", content);\n                     ProjectCollection projectCollection = new ProjectCollection();\n                     MockLogger collectionLogger = new MockLogger();\n                     projectCollection.RegisterLogger(collectionLogger);\n-                    Project project = new Project(projectCollection);\n+                    Project project = new Project(testProject.ProjectFile, null, null, projectCollection);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There didn't seem to be any sort of visible effect on the contents of the in-memory project, so I don't think this test is actually reasonable. Reverting to original",
              "createdAt": "2022-05-04T17:04:39Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs",
              "diffHunk": "@@ -831,17 +831,27 @@ private static void ProjectGetterResultsInDriveEnumerationWarning(string unevalu\n                     Helpers.ResetStateForDriveEnumeratingWildcardTests(env, \"0\");\n \n                     // Setup\n+                    string content = @\"\n+                    <Project>\n+                        <ItemGroup>\n+                            <i Include='i1'/>\n+                        </ItemGroup>\n+                    </Project>\n+                    \";\n+\n+                    TransientTestProjectWithFiles testProject = env.CreateTestProjectWithFiles(\"build.proj\", content);\n                     ProjectCollection projectCollection = new ProjectCollection();\n                     MockLogger collectionLogger = new MockLogger();\n                     projectCollection.RegisterLogger(collectionLogger);\n-                    Project project = new Project(projectCollection);\n+                    Project project = new Project(testProject.ProjectFile, null, null, projectCollection);",
              "author": {
                "login": "mruxmohan4"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "why no exclude here when there is on the others?",
              "createdAt": "2022-05-02T14:34:28Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -248,6 +249,7 @@ private static string[] GetFileList\n                             case ILoggingService loggingService:\n                                 LogDriveEnumerationWarningWithLoggingService(\n                                     loggingService,\n+                                    includeLocation,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It seems like in Evaluator.cs, only the unevaluated Include attributes are looked at without any mention of Exclude specs, so I excluded it from the logger case that Evaluator uses, which is `ILoggingService`. ",
              "createdAt": "2022-05-04T17:12:50Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -248,6 +249,7 @@ private static string[] GetFileList\n                             case ILoggingService loggingService:\n                                 LogDriveEnumerationWarningWithLoggingService(\n                                     loggingService,\n+                                    includeLocation,",
              "author": {
                "login": "mruxmohan4"
              }
            }
          ]
        }
      }
    ]
  }
}