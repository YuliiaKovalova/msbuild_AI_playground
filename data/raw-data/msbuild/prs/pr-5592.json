{
  "number": 5592,
  "title": "Use conditional access",
  "body": "Fixes #5591 ",
  "state": "MERGED",
  "createdAt": "2020-08-02T04:36:14Z",
  "updatedAt": "2021-12-29T22:52:23Z",
  "closedAt": "2020-08-10T21:13:04Z",
  "mergedAt": "2020-08-10T21:13:04Z",
  "additions": 386,
  "deletions": 688,
  "changedFiles": 165,
  "headRefName": "5591-use-conditional-access",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e44c1212aa46f401f2dad6b6e71acff8a7f99fc7",
          "message": "Use conditional access",
          "committedDate": "2020-08-02T04:35:46Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "lachlan@expert1.com.au"
          }
        }
      },
      {
        "commit": {
          "oid": "081d59a7b122589db7aff97dd15ca4334ec33148",
          "message": "Update src/Xunit.NetCore.Extensions/Discoverers/ConditionalTestDiscoverer.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:27:44Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "091847a77fa14a7f9476ebf3943ff4a7efa538dd",
          "message": "Update src/Tasks/UnregisterAssembly.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:27:52Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "79e618c83a57b74200d30d7367092acc0aa548b7",
          "message": "Update src/Tasks/ResolveComReference.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:28:01Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87a522106b308179d3d886f9b0e3a33060eed106",
          "message": "Update src/Build/Definition/ProjectMetadata.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:28:56Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ee1b5ffbc8f0cc54925988c97b97139fc851f5db",
          "message": "Update src/Deprecated/Engine/Items/BuildItemGroup.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:29:29Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d11c236d744cb69017d9776485e17b5b341e627",
          "message": "Update src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2020-08-03T20:29:55Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "970c81615d4aea3751b72f1945f07da6a40a0c17",
          "message": "Merge branch 'master' into 5591-use-conditional-access",
          "committedDate": "2020-08-03T21:07:14Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d4ee2afe2c9f118d06172d3dd99b64da7cc33751",
          "message": "Fixed build errors",
          "committedDate": "2020-08-03T21:40:10Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "lachlan@expert1.com.au"
          }
        }
      },
      {
        "commit": {
          "oid": "59d43823cdcf8f1409b176efb98f9f4901745b20",
          "message": "Merge branch 'master' into 5591-use-conditional-access",
          "committedDate": "2020-08-05T22:21:51Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b42634aed0897925bd1d626109591b99f717ddd9",
          "message": "Merge branch 'master' into 5591-use-conditional-access",
          "committedDate": "2020-08-06T06:53:40Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "elachlan@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73e71aacace34633acddeb6e47e6bd5c601b13df",
          "message": "Fixed compile error",
          "committedDate": "2020-08-07T06:35:41Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "lachlan@expert1.com.au"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I generally like this sort of change because it makes the code cleaner and easier to read\u2014thanks for that!\r\n> \r\n> I tried to point out all the times this led to unnecessary parentheses or spaces, which constitutes almost all the comments I left. My only worry with this sort of PR is that there could have been one time when you made a mistake (I'm guessing you automated some/all of this?), and I might not have noticed, but I did try to look through fairly carefully and didn't see anything.\r\n> \r\n> Tentatively approve\r\n\r\nYes, I used Roslynator. I'd like to address the extra parenthesis in another PR. In that PR I'd also look at add parenthesis where needed as well. It would be across the whole solution.",
        "createdAt": "2020-08-02T21:56:07Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@Forgind this needs test re-run.",
        "createdAt": "2020-08-06T00:28:40Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2020-08-06T10:29:18Z",
        "author": {
          "login": "ostorc"
        }
      },
      {
        "body": "<samp>\nNo pipelines are associated with this pull request.<br>\r\n\n</samp>",
        "createdAt": "2020-08-06T10:29:26Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "Closing to reopen and trigger a CI build. See https://github.com/dotnet/msbuild/issues/5646",
        "createdAt": "2020-08-10T20:38:19Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nTake away parentheses",
              "createdAt": "2020-08-02T17:09:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -531,7 +531,7 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                                 entryForInference = null;\n                                 entryForExecution.LeaveScope();\n                                 entryForExecution = null;\n-                                targetSuccess = (bucketResult != null) && (bucketResult.ResultCode == WorkUnitResultCode.Success);\n+                                targetSuccess = (bucketResult?.ResultCode == WorkUnitResultCode.Success);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Any reason for these extra spaces?",
              "createdAt": "2020-08-02T17:10:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs",
              "diffHunk": "@@ -653,11 +647,11 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re\n                 }\n                 finally\n                 {\n-                    if (targetLoggingContext != null)\n-                    {\n+                       ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nRemove extra parentheses",
              "createdAt": "2020-08-02T17:10:51Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs",
              "diffHunk": "@@ -235,7 +235,7 @@ internal DependencyAnalysisResult PerformDependencyAnalysis\n                 // 1) they do not reference any item vector\n                 // 2) they reference item vectors that are not referenced by any input item\n                 if ((discreteItemsInTargetOutputs.Count > 0) ||\n-                    ((itemVectorsReferencedOnlyInTargetOutputs != null) && (itemVectorsReferencedOnlyInTargetOutputs.Count > 0)))\n+                    ((itemVectorsReferencedOnlyInTargetOutputs?.Count > 0)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nextra parentheses",
              "createdAt": "2020-08-02T17:12:11Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -757,7 +757,7 @@ private void ParseProject(string firstLine)\n                     // We have a ProjectDependencies section.  Each subsequent line should identify\n                     // a dependency.\n                     line = ReadLine();\n-                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    while ((line?.StartsWith(\"EndProjectSection\", StringComparison.Ordinal) == false))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nextra parentheses",
              "createdAt": "2020-08-02T17:12:36Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -777,7 +777,7 @@ private void ParseProject(string firstLine)\n                     // projects, and contains properties that we'll need in order to call the \n                     // AspNetCompiler task.\n                     line = ReadLine();\n-                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    while ((line?.StartsWith(\"EndProjectSection\", StringComparison.Ordinal) == false))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                ErrorUtilities.VerifyThrowInvalidOperation(_xml.Parent?.Parent?.Parent != null, \"OM_ObjectIsNoLongerActive\");\r\n```\r\n\r\n\ud83d\ude04 ",
              "createdAt": "2020-08-02T17:15:05Z",
              "path": "src/Build/Definition/ProjectMetadata.cs",
              "diffHunk": "@@ -132,7 +132,7 @@ public string UnevaluatedValue\n             {\n                 ErrorUtilities.VerifyThrowArgumentNull(value, \"value\");\n                 Project.VerifyThrowInvalidOperationNotImported(_xml.ContainingProject);\n-                ErrorUtilities.VerifyThrowInvalidOperation(_xml.Parent != null && _xml.Parent.Parent != null && _xml.Parent.Parent.Parent != null, \"OM_ObjectIsNoLongerActive\");\n+                ErrorUtilities.VerifyThrowInvalidOperation(_xml.Parent != null && _xml.Parent.Parent?.Parent != null, \"OM_ObjectIsNoLongerActive\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra spaces",
              "createdAt": "2020-08-02T17:18:14Z",
              "path": "src/Deprecated/Engine/Engine/BuildTask.cs",
              "diffHunk": "@@ -517,11 +517,11 @@ private void MarkTaskAsDirty\n             (\n             )\n         {\n-            if (this.ParentTarget != null)\n-            {\n+               ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: spaces",
              "createdAt": "2020-08-02T17:20:08Z",
              "path": "src/Deprecated/Engine/Engine/Router.cs",
              "diffHunk": "@@ -131,12 +131,12 @@ internal void PostDoneNotice(BuildRequest buildRequest)\n         /// </summary>\n         internal void PostDoneNotice(int nodeId, BuildResult buildResult)\n         {\n-            if (scheduler != null)\n-            {\n+               \n+            ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nspaces",
              "createdAt": "2020-08-02T17:20:15Z",
              "path": "src/Deprecated/Engine/Engine/Router.cs",
              "diffHunk": "@@ -179,12 +179,12 @@ internal void PostBuildRequest(BuildRequest currentRequest, int nodeIndex)\n                                     (nodeIndex, currentRequest.HandleId, currentRequest.NodeIndex,\n                                      currentRequest.RequestId, cacheScope, currentRequest, null);\n \n-                    if (scheduler != null)\n-                    {\n+                       ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: spaces",
              "createdAt": "2020-08-02T17:20:24Z",
              "path": "src/Deprecated/Engine/Engine/Target.cs",
              "diffHunk": "@@ -732,11 +732,11 @@ internal void MarkTargetAsDirty\n             (\n             )\n         {\n-            if (this.ParentProject != null)\n-            {\n+               \n+            ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra parens",
              "createdAt": "2020-08-02T17:20:36Z",
              "path": "src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs",
              "diffHunk": "@@ -238,7 +238,7 @@ internal DependencyAnalysisResult PerformDependencyAnalysis\n                 // 1) they do not reference any item vector\n                 // 2) they reference item vectors that are not referenced by any input item\n                 if ((discreteItemsInTargetOutputs.Count > 0) ||\n-                    ((itemVectorsReferencedOnlyInTargetOutputs != null) && (itemVectorsReferencedOnlyInTargetOutputs.Count > 0)))\n+                    ((itemVectorsReferencedOnlyInTargetOutputs?.Count > 0)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens * most of this file",
              "createdAt": "2020-08-02T17:21:04Z",
              "path": "src/Deprecated/Engine/Engine/TaskEngine.cs",
              "diffHunk": "@@ -1018,7 +1012,7 @@ private void GatherArrayStringAndValueOutputs(Lookup lookup, TaskOutput taskOutp\n                 else\n                 {\n                     Debug.Assert(taskOutputSpecification.IsProperty);\n-                    ErrorUtilities.VerifyThrow((propertyName != null) && (propertyName.Length > 0), \"Need property name.\");\n+                    ErrorUtilities.VerifyThrow((propertyName?.Length > 0), \"Need property name.\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nextra parens",
              "createdAt": "2020-08-02T17:21:46Z",
              "path": "src/Deprecated/Engine/Engine/Target.cs",
              "diffHunk": "@@ -226,7 +226,7 @@ bool        importedFromAnotherProject\n             }\n \n             // It's considered an error if a target does not have a name.\n-            ProjectErrorUtilities.VerifyThrowInvalidProject((targetName != null) && (targetName.Length > 0),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            ErrorUtilities.VerifyThrow(path1?.Length > 0 && path2?.Length > 0,\r\n```",
              "createdAt": "2020-08-02T17:22:25Z",
              "path": "src/Deprecated/Engine/Engine/TargetDependencyAnalyzer.cs",
              "diffHunk": "@@ -1140,7 +1140,7 @@ private void RecordComparisonResults(string input, string output, string inputIt\n         /// </returns>\n         private int CompareLastWriteTimes(string path1, string path2, out bool path1DoesNotExist, out bool path2DoesNotExist)\n         {\n-            ErrorUtilities.VerifyThrow((path1 != null) && (path1.Length > 0) && (path2 != null) && (path2.Length > 0),\n+            ErrorUtilities.VerifyThrow((path1 != null) && (path1.Length > 0) && (path2?.Length > 0),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:22:58Z",
              "path": "src/Deprecated/Engine/Errors/InternalLoggerException.cs",
              "diffHunk": "@@ -93,10 +93,10 @@ bool initializationException\n          )\n             : base(message, innerException)\n         {\n-            ErrorUtilities.VerifyThrow((message != null) && (message.Length > 0), \"Need error message.\");\n+            ErrorUtilities.VerifyThrow((message?.Length > 0), \"Need error message.\");\n             ErrorUtilities.VerifyThrow(innerException != null || initializationException == true, \"Need the logger exception.\");\n-            ErrorUtilities.VerifyThrow((errorCode != null) && (errorCode.Length > 0), \"Must specify the error message code.\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:23:05Z",
              "path": "src/Deprecated/Engine/Errors/RemoteErrorException.cs",
              "diffHunk": "@@ -19,7 +19,7 @@ public sealed class RemoteErrorException : Exception\n         internal RemoteErrorException(string message, Exception innerException, BuildEventContext buildEventContext)\n             : base(message, innerException)\n         {\n-            ErrorUtilities.VerifyThrow((message != null) && (message.Length > 0), \"Need error message.\");\n+            ErrorUtilities.VerifyThrow((message?.Length > 0), \"Need error message.\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:23:17Z",
              "path": "src/Deprecated/Engine/Items/BuildItem.cs",
              "diffHunk": "@@ -647,7 +647,7 @@ public string Include\n                 {\n                     // If this is an evaluated item that originated from the project file, and the original\n                     // item is declared using a wildcard that still matches the new item spec ...\n-                    if ((ParentPersistedItem != null) && (ParentPersistedItem.NewItemSpecMatchesExistingWildcard(value)))\n+                    if ((ParentPersistedItem?.NewItemSpecMatchesExistingWildcard(value) == true))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            ErrorUtilities.VerifyThrowInvalidOperation(item?.ItemElement?.ParentNode == xml.Element, \"ItemDoesNotBelongToItemGroup\");\r\n```",
              "createdAt": "2020-08-02T17:23:41Z",
              "path": "src/Deprecated/Engine/Items/BuildItemGroup.cs",
              "diffHunk": "@@ -747,7 +744,7 @@ private void MustBeInitialized()\n         /// </summary>\n         private void MustHaveThisParentElement(BuildItem item)\n         {\n-            ErrorUtilities.VerifyThrowInvalidOperation(item != null && item.ItemElement != null && item.ItemElement.ParentNode == xml.Element, \"ItemDoesNotBelongToItemGroup\");\n+            ErrorUtilities.VerifyThrowInvalidOperation(item?.ItemElement != null && item.ItemElement.ParentNode == xml.Element, \"ItemDoesNotBelongToItemGroup\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nextra parens",
              "createdAt": "2020-08-02T17:24:21Z",
              "path": "src/Deprecated/Engine/Properties/BuildProperty.cs",
              "diffHunk": "@@ -386,7 +386,7 @@ public string Name\n                 else\n                 {\n                     // If we are not persisted, propertyName and propertyValue must not be null.\n-                    ErrorUtilities.VerifyThrow((this.propertyName != null) && (this.propertyName.Length > 0) && (this.propertyValue != null),\n+                    ErrorUtilities.VerifyThrow((this.propertyName?.Length > 0) && (this.propertyValue != null),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:24:37Z",
              "path": "src/Deprecated/Engine/Shared/AssemblyLoadInfo.cs",
              "diffHunk": "@@ -22,7 +22,7 @@ internal sealed class AssemblyLoadInfo\n         /// <param name=\"assemblyFile\"></param>\n         public AssemblyLoadInfo(string assemblyName, string assemblyFile)\n         {\n-            ErrorUtilities.VerifyThrow(((assemblyName != null) && (assemblyName.Length > 0)) || ((assemblyFile != null) && (assemblyFile.Length > 0)),\n+            ErrorUtilities.VerifyThrow(((assemblyName?.Length > 0)) || ((assemblyFile?.Length > 0)),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:24:46Z",
              "path": "src/Deprecated/Engine/Shared/ConfigurationInSolution.cs",
              "diffHunk": "@@ -31,7 +31,7 @@ internal ConfigurationInSolution(string configurationName, string platformName)\n             this.platformName = platformName;\n \n             // Some configurations don't have the platform part\n-            if ((platformName != null) && (platformName.Length > 0))\n+            if ((platformName?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:24:59Z",
              "path": "src/Deprecated/Engine/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1249,8 +1249,7 @@ DirectoryExists directoryExists\n             // 2) if the extension is three characters, and the filename contains the * wildcard, it matches files with longer\n             //    extensions that start with the same three characters e.g. \"*.htm\" would match both \"file.htm\" and \"file.html\"\n             bool needToEnforceExtensionLength =\n-                    (extensionPart != null) &&\n-                    (extensionPart.IndexOf('*') == -1)\n+                    (extensionPart?.IndexOf('*') == -1)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:26:19Z",
              "path": "src/Deprecated/Engine/Shared/ResourceUtilities.cs",
              "diffHunk": "@@ -121,7 +121,7 @@ internal static string FormatString(string unformatted, params object[] args)\n             string formatted = unformatted;\n \n             // NOTE: String.Format() does not allow a null arguments array\n-            if ((args != null) && (args.Length > 0))\n+            if ((args?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:26:27Z",
              "path": "src/Deprecated/Engine/Shared/SolutionParser.cs",
              "diffHunk": "@@ -555,7 +549,7 @@ private void ParseProject(string firstLine)\n                     // We have a ProjectDependencies section.  Each subsequent line should identify\n                     // a dependency.\n                     line = ReadLine();\n-                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    while ((line?.StartsWith(\"EndProjectSection\", StringComparison.Ordinal) == false))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:26:32Z",
              "path": "src/Deprecated/Engine/Shared/SolutionParser.cs",
              "diffHunk": "@@ -575,7 +569,7 @@ private void ParseProject(string firstLine)\n                     // projects, and contains properties that we'll need in order to call the \n                     // AspNetCompiler task.\n                     line = ReadLine();\n-                    while ((line != null) && (!line.StartsWith(\"EndProjectSection\", StringComparison.Ordinal)))\n+                    while ((line?.StartsWith(\"EndProjectSection\", StringComparison.Ordinal) == false))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:26:38Z",
              "path": "src/Deprecated/Engine/Shared/SolutionParser.cs",
              "diffHunk": "@@ -984,7 +978,7 @@ string property\n             )\n         {\n             // If the incoming string starts and ends with a double-quote, strip the double-quotes.\n-            if ((property != null) && (property.Length > 0) && (property[0] == '\"') && (property[property.Length - 1] == '\"'))\n+            if ((property?.Length > 0) && (property[0] == '\"') && (property[property.Length - 1] == '\"'))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra spaces",
              "createdAt": "2020-08-02T17:26:43Z",
              "path": "src/Deprecated/Engine/Shared/XmlUtilities.cs",
              "diffHunk": "@@ -44,11 +44,11 @@ internal static XmlElement RenameXmlElement(XmlElement oldElement, string newEle\n                 newElement.AppendChild(newChildNode);\n             }\n \n-            if (oldElement.ParentNode != null)\n-            {\n+               ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:26:49Z",
              "path": "src/Deprecated/Engine/Shared/XmlUtilities.cs",
              "diffHunk": "@@ -69,7 +69,7 @@ internal static string GetXmlNodeFile(XmlNode node, string defaultFile)\n             string file = defaultFile;\n \n             // NOTE: the XML node may not have a filename if it's purely an in-memory node\n-            if ((node.OwnerDocument.BaseURI != null) && (node.OwnerDocument.BaseURI.Length > 0))\n+            if ((node.OwnerDocument.BaseURI?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:27:03Z",
              "path": "src/Deprecated/Engine/Solution/VCWrapperProject.cs",
              "diffHunk": "@@ -99,7 +99,7 @@ string fullConfigurationName\n \n             newTask.SetParameterValue(\"SolutionFile\", solutionPath);\n \n-            if ((vcbuildTargetName != null) && (vcbuildTargetName.Length > 0))\n+            if ((vcbuildTargetName?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:27:09Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -196,7 +196,7 @@ private static string FormatString(CultureInfo culture, string unformatted, para\n             string formatted = unformatted;\n \n             // NOTE: String.Format() does not allow a null arguments array\n-            if ((args != null) && (args.Length > 0))\n+            if ((args?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:27:28Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2949,8 +2946,8 @@ private static string[] RemoveFilesWithExtensionsToIgnore\n                                 )\n         {\n             // If we got to this method we should have to possible projects or solutions and some extensions to ignore\n-            ErrorUtilities.VerifyThrow(((potentialProjectOrSolutionFiles != null) && (potentialProjectOrSolutionFiles.Length > 0)), \"There should be some potential project or solution files\");\n-            ErrorUtilities.VerifyThrow(((extensionsToIgnoreDictionary != null) && (extensionsToIgnoreDictionary.Count > 0)), \"There should be some extensions to Ignore\");\n+            ErrorUtilities.VerifyThrow(((potentialProjectOrSolutionFiles?.Length > 0)), \"There should be some potential project or solution files\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:27:34Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3206,7 +3203,7 @@ ArrayList loggers\n                 ConsoleLogger logger = new ConsoleLogger(verbosity);\n                 string consoleParameters = \"SHOWPROJECTFILE=TRUE;\";\n \n-                if ((consoleLoggerParameters != null) && (consoleLoggerParameters.Length > 0))\n+                if ((consoleLoggerParameters?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:27:40Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3273,7 +3270,7 @@ int cpuCount\n             if (distributedFileLogger)\n             {\n                 string fileParameters = string.Empty;\n-                if ((fileLoggerParameters != null) && (fileLoggerParameters.Length > 0))\n+                if ((fileLoggerParameters?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:28:16Z",
              "path": "src/Shared/AssemblyLoadInfo.cs",
              "diffHunk": "@@ -23,7 +23,7 @@ internal abstract class AssemblyLoadInfo : ITranslatable, IEquatable<AssemblyLoa\n         /// </summary>\n         internal static AssemblyLoadInfo Create(string assemblyName, string assemblyFile)\n         {\n-            ErrorUtilities.VerifyThrow(((assemblyName != null) && (assemblyName.Length > 0)) || ((assemblyFile != null) && (assemblyFile.Length > 0)),\n+            ErrorUtilities.VerifyThrow(((assemblyName?.Length > 0)) || ((assemblyFile?.Length > 0)),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:30:31Z",
              "path": "src/Shared/ResourceUtilities.cs",
              "diffHunk": "@@ -227,7 +227,7 @@ internal static string FormatString(string unformatted, params object[] args)\n             string formatted = unformatted;\n \n             // NOTE: String.Format() does not allow a null arguments array\n-            if ((args != null) && (args.Length > 0))\n+            if ((args?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:30:36Z",
              "path": "src/Shared/TaskLoader.cs",
              "diffHunk": "@@ -181,7 +181,7 @@ internal static bool IsTaskClass(Type type, object unused)\n         /// </summary>\n         internal static Assembly AssemblyResolver(object sender, ResolveEventArgs args)\n         {\n-            if ((s_resolverLoadedType != null) && (s_resolverLoadedType.LoadedAssembly != null))\n+            if ((s_resolverLoadedType?.LoadedAssembly != null))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra spaces",
              "createdAt": "2020-08-02T17:30:44Z",
              "path": "src/Shared/XmlUtilities.cs",
              "diffHunk": "@@ -49,11 +49,11 @@ internal static XmlElementWithLocation RenameXmlElement(XmlElementWithLocation o\n                 newElement.AppendChild(oldElement.FirstChild);\n             }\n \n-            if (oldElement.ParentNode != null)\n-            {\n+               \n+            ",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:31:41Z",
              "path": "src/Tasks/Culture.cs",
              "diffHunk": "@@ -57,7 +57,7 @@ string dependentUponFilename\n \n                 // See if this is a valid culture name.\n                 bool validCulture = false;\n-                if ((cultureName != null) && (cultureName.Length > 1))\n+                if ((cultureName?.Length > 1))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:31:51Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2431,7 +2431,7 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n #if !FEATURE_ASSEMBLYLOADCONTEXT\n             // If references were passed in, we will have to give the ResxResourceReader an object\n             // by which it can resolve types that are referenced from within the .RESX.\n-            if ((_assemblyFiles != null) && (_assemblyFiles.Length > 0))\n+            if ((_assemblyFiles?.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:32:08Z",
              "path": "src/Tasks/RegisterAssembly.cs",
              "diffHunk": "@@ -72,7 +72,7 @@ public override bool Execute()\n \n             AssemblyRegistrationCache cacheFile = null;\n \n-            if ((AssemblyListFile != null) && (AssemblyListFile.ItemSpec.Length > 0))\n+            if ((AssemblyListFile?.ItemSpec.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens",
              "createdAt": "2020-08-02T17:32:12Z",
              "path": "src/Tasks/RegisterAssembly.cs",
              "diffHunk": "@@ -89,7 +89,7 @@ public override bool Execute()\n                         string tlbPath;\n \n                         // if the type lib path is not supplied, generate default one\n-                        if ((TypeLibFiles[i] != null) && (TypeLibFiles[i].ItemSpec.Length > 0))\n+                        if ((TypeLibFiles[i]?.ItemSpec.Length > 0))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (_timestampCache?.ToolPathsMatchCachePaths(_tlbimpPath, _aximpPath) != true))\r\n```",
              "createdAt": "2020-08-02T17:33:31Z",
              "path": "src/Tasks/ResolveComReference.cs",
              "diffHunk": "@@ -327,7 +327,7 @@ public override bool Execute()\n \n             _timestampCache = (ResolveComReferenceCache)StateFileBase.DeserializeCache(StateFile, Log, typeof(ResolveComReferenceCache));\n \n-            if (_timestampCache == null || (_timestampCache != null && !_timestampCache.ToolPathsMatchCachePaths(_tlbimpPath, _aximpPath)))\n+            if (_timestampCache == null || (_timestampCache?.ToolPathsMatchCachePaths(_tlbimpPath, _aximpPath) == false))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    if (TypeLibFiles?[i]?.ItemSpec.Length > 0)\r\n```",
              "createdAt": "2020-08-02T17:34:28Z",
              "path": "src/Tasks/UnregisterAssembly.cs",
              "diffHunk": "@@ -78,7 +78,7 @@ public override bool Execute()\n                 for (int i = 0; i < Assemblies.Length; i++)\n                 {\n                     // if the type lib path is not supplied, generate default one\n-                    if (TypeLibFiles != null && TypeLibFiles[i] != null && TypeLibFiles[i].ItemSpec.Length > 0)\n+                    if (TypeLibFiles != null && TypeLibFiles[i]?.ItemSpec.Length > 0)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (pi?.PropertyType == typeof(bool) && pi.GetMethod?.IsStatic == true && pi.GetMethod.GetParameters().Length == 0)\r\n```",
              "createdAt": "2020-08-02T17:37:38Z",
              "path": "src/Xunit.NetCore.Extensions/Discoverers/ConditionalTestDiscoverer.cs",
              "diffHunk": "@@ -152,11 +152,11 @@ internal static MethodInfo LookupConditionalMethod(Type t, string name)\n             TypeInfo ti = t.GetTypeInfo();\n \n             MethodInfo mi = ti.GetDeclaredMethod(name);\n-            if (mi != null && mi.IsStatic && mi.GetParameters().Length == 0 && mi.ReturnType == typeof(bool))\n+            if (mi?.IsStatic == true && mi.GetParameters().Length == 0 && mi.ReturnType == typeof(bool))\n                 return mi;\n \n             PropertyInfo pi = ti.GetDeclaredProperty(name);\n-            if (pi != null && pi.PropertyType == typeof(bool) && pi.GetMethod != null && pi.GetMethod.IsStatic && pi.GetMethod.GetParameters().Length == 0)\n+            if (pi != null && pi.PropertyType == typeof(bool) && pi.GetMethod?.IsStatic == true && pi.GetMethod.GetParameters().Length == 0)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extra parens * the rest of this file",
              "createdAt": "2020-08-02T17:37:59Z",
              "path": "src/Deprecated/Conversion/ProjectFileConverter.cs",
              "diffHunk": "@@ -372,9 +372,9 @@ private void DoConvert()\n         {\n             // Make sure we were passed in non-empty source and destination project\n             // file names.\n-            error.VerifyThrowArgument((this.oldProjectFile != null) && (this.oldProjectFile.Length > 0),\n+            error.VerifyThrowArgument((this.oldProjectFile?.Length > 0),\n                 \"MissingOldProjectFile\");\n-            error.VerifyThrowArgument((this.newProjectFile != null) && (this.newProjectFile.Length > 0),\n+            error.VerifyThrowArgument((this.newProjectFile?.Length > 0),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}