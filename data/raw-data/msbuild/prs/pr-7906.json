{
  "number": 7906,
  "title": "adding way to detemrine inner and outer build",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2022-08-23T15:49:24Z",
  "updatedAt": "2022-10-31T15:01:22Z",
  "closedAt": "2022-10-31T15:01:22Z",
  "mergedAt": null,
  "additions": 3,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "needs-more-info"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "784e38428bf2c9395964921025dc8aa14ca088e0",
          "message": "adding way to detemrine inner and outter build",
          "committedDate": "2022-08-23T15:12:48Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3c1a2fef5dee6351aad5741fe329516cf8488c2",
          "message": "moving innerbuildproperty",
          "committedDate": "2022-08-24T18:33:18Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f7de866e8823021934c6874a6f04f07484319e4",
          "message": "remving innerbuild prop as it caused an additional eval",
          "committedDate": "2022-08-24T18:58:10Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b2b8bd7ba4e587d3c04c1e9d0955bee0f9c5da7",
          "message": "cleanup",
          "committedDate": "2022-08-25T14:04:58Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@MIchaelRShea, have you had a chance to look at BenVillalobos's comment?",
        "createdAt": "2022-09-19T15:41:59Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Doesn't this cause another evaluation? \r\n\r\nSay project A is x64;x86 and it builds both, AND project B references A and tells A to build x64. Wouldn't we get two evals of effectively the same instance? One with the inner build global prop/platform, and one with just the platform?",
              "createdAt": "2022-08-24T18:37:42Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -126,6 +128,9 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                         var platformPropertyInstance = ProjectPropertyInstance.Create(PlatformMetadataName, selectedPlatform);\n                         referenceGlobalProperties[PlatformMetadataName] = platformPropertyInstance;\n                     }\n+                    // We will use this property to designate an inner build for platform negotiation \n+                    var platformInnerBuildPropertyInstance = ProjectPropertyInstance.Create(\"PlatformNegotiationInnerBuild\", \"true\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "this is a good point. in that cause we could identify a innerbuild by the lack of PlatformNegotiationouterBuild. that way we dont need to set anything extra and there is no dual eval\r\n",
              "createdAt": "2022-08-24T18:56:42Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -126,6 +128,9 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                         var platformPropertyInstance = ProjectPropertyInstance.Create(PlatformMetadataName, selectedPlatform);\n                         referenceGlobalProperties[PlatformMetadataName] = platformPropertyInstance;\n                     }\n+                    // We will use this property to designate an inner build for platform negotiation \n+                    var platformInnerBuildPropertyInstance = ProjectPropertyInstance.Create(\"PlatformNegotiationInnerBuild\", \"true\");",
              "author": {
                "login": "MIchaelRShea"
              }
            },
            {
              "body": "pushed a change\r\n",
              "createdAt": "2022-08-24T18:58:19Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -126,6 +128,9 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                         var platformPropertyInstance = ProjectPropertyInstance.Create(PlatformMetadataName, selectedPlatform);\n                         referenceGlobalProperties[PlatformMetadataName] = platformPropertyInstance;\n                     }\n+                    // We will use this property to designate an inner build for platform negotiation \n+                    var platformInnerBuildPropertyInstance = ProjectPropertyInstance.Create(\"PlatformNegotiationInnerBuild\", \"true\");",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't feel right, maybe it's my understanding.\r\n\r\nWhat exactly does `PlatformNegotiationOuterBuild` here mean? Is it similar to \"outer builds\" like building a `net472;net6.0` project and how it has individual \"inner builds\" of `net472` and `net6.0`? Or does \"outer build\" here mean something unique to platform negotiation?",
              "createdAt": "2022-08-25T17:19:28Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -112,7 +112,9 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n \n                     var  projectInstance = _projectInstanceFactory(\n                         projectReferenceFullPath,\n-                        null, // Platform negotiation requires an evaluation with no global properties first\n+                        new Dictionary<string, string>(){\n+                            {\"PlatformNegotiationOuterBuild\", \"true\"},",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}