{
  "number": 8006,
  "title": "dotnet watch causing server to always fail",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/8010\r\n\r\n### Context\r\nTheory: dotnet watch stopping was sending Ctrl+C (SIGINT) to its child processes, which is unexpected as CTRL+C is propagated from client by build server packet command through its named pipe. \r\nServer set its cancellation token and all subsequent build has been therefore considered as to be cancelled.\r\n\r\n### Changes Made\r\nWhen server recieves Ctrl+C (SIGINT) it now gracefully shut down its build submissions and then terminate.\r\n\r\n### Testing\r\nCan't repro after code changes.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-27T16:41:28Z",
  "updatedAt": "2022-09-29T09:08:07Z",
  "closedAt": "2022-09-29T08:19:11Z",
  "mergedAt": "2022-09-29T08:19:11Z",
  "additions": 44,
  "deletions": 25,
  "changedFiles": 2,
  "headRefName": "rokonec/server-shutdown-on-cancel",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "394d85960faa1fd94f9e462cb922cf1c2824a544",
          "message": "Shutdown server if cancel is requested.",
          "committedDate": "2022-09-27T14:18:27Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b6f4a8f9c9deab007231b45d76d08f54e43c3f6",
          "message": "Set cancel request flag - now for real",
          "committedDate": "2022-09-27T14:27:09Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "adb8a113792ffad5e2fb0cf2ac203068b7d2aceb",
          "message": "Remove static from method",
          "committedDate": "2022-09-27T14:28:47Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d02345ed876973b1af0c0072fecad1a246f3fc3f",
          "message": "Yet another try",
          "committedDate": "2022-09-27T16:29:25Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c5e1ec48135dd29eee0a63b0d33c4f84ff76f9c",
          "message": "Maybe now?",
          "committedDate": "2022-09-27T16:32:45Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb8781215ab923259e38f0e0b4e3a1a41ef5f793",
          "message": "Reordering lines to better code stability",
          "committedDate": "2022-09-27T16:36:06Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e3bfc54fe2477863c7316c9dae657ed755f9d1f3",
          "message": "Revert line ordering and clarify comments",
          "committedDate": "2022-09-27T19:09:48Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd6847ab9d19ba1cdb5645acd0d66033f098c1dd",
          "message": "Typo\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-09-27T19:15:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I am merging it so it can get into SDK soon ",
        "createdAt": "2022-09-29T08:18:17Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Seems odd to put this wait outside the timing; what was the motivation here?",
              "createdAt": "2022-09-27T18:32:05Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -956,16 +956,15 @@ string[] commandLine\n                 s_buildComplete.Set();\n                 Console.CancelKeyPress -= cancelHandler;\n \n-                // Wait for any pending cancel, so that we get any remaining messages\n-                s_cancelComplete.WaitOne();\n-\n #if FEATURE_GET_COMMANDLINE\n                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);\n #else\n                 if (MSBuildEventSource.Log.IsEnabled()) {\n                     MSBuildEventSource.Log.MSBuildExeStop(string.Join(\" \", commandLine));\n                 }\n #endif\n+                // Wait for any pending cancel, so that we get any remaining messages\n+                s_cancelComplete.WaitOne();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good catch. I will put it back. Motivation was wrong. I was trying to make sure it is logged my logic was flawed - at best.",
              "createdAt": "2022-09-27T19:00:57Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -956,16 +956,15 @@ string[] commandLine\n                 s_buildComplete.Set();\n                 Console.CancelKeyPress -= cancelHandler;\n \n-                // Wait for any pending cancel, so that we get any remaining messages\n-                s_cancelComplete.WaitOne();\n-\n #if FEATURE_GET_COMMANDLINE\n                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);\n #else\n                 if (MSBuildEventSource.Log.IsEnabled()) {\n                     MSBuildEventSource.Log.MSBuildExeStop(string.Join(\" \", commandLine));\n                 }\n #endif\n+                // Wait for any pending cancel, so that we get any remaining messages\n+                s_cancelComplete.WaitOne();",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a check for \"gracefully cancelled all its submissions\" that I'm missing here?",
              "createdAt": "2022-09-27T18:33:30Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1004,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n+\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n \n-                if (hasBuildStarted)\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate, if it received CancelKey press and gracefully cancelled all its submissions.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I though that lines 1029 and 1030 implements graceful cancellation. The comment is misleading as the graceful cancellation has already been done at line 1037. I will make the comment less confusing",
              "createdAt": "2022-09-27T19:05:51Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1004,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n+\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n \n-                if (hasBuildStarted)\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate, if it received CancelKey press and gracefully cancelled all its submissions.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                        Environment.Exit(0); // the process can now be terminated as everything has already been gracefully cancelled.\r\n```",
              "createdAt": "2022-09-27T19:15:16Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1005,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n \n-                if (hasBuildStarted)\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n+\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate after it received CancelKey press.\n+                    if (s_isServerNode)\n+                    {\n+                        Environment.Exit(0); // the process cab now be terminated as everything has already been gracefully cancelled.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm confused\u2014why does the server have to shut down when it's cancelled? I would've expected that just cancelling submissions then waiting for the next build request would've been sufficient.",
              "createdAt": "2022-09-28T21:20:17Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1005,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n \n-                if (hasBuildStarted)\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n+\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate after it received CancelKey press.\n+                    if (s_isServerNode)\n+                    {\n+                        Environment.Exit(0); // the process can now be terminated as everything has already been gracefully cancelled.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "To be consistent with other nodes behavior. When you cancel builds all build nodes are shutdown afterward.\r\nI am not sure why, but the code shows clear intent to do so. I guess, we do not want to deal with processes which might ended up be in inconsistent states caused by build cancellation.",
              "createdAt": "2022-09-28T22:22:47Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1005,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n \n-                if (hasBuildStarted)\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n+\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate after it received CancelKey press.\n+                    if (s_isServerNode)\n+                    {\n+                        Environment.Exit(0); // the process can now be terminated as everything has already been gracefully cancelled.",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Ok. It seems reasonable to want to avoid unknown states at build start. I don't know what would go wrong in this case, but leaving yourself open to unforeseen bugs is bad if it's avoidable, so it seems reasonable to align with that.",
              "createdAt": "2022-09-28T23:19:54Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1006,31 +1005,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n             // We're already on a threadpool thread anyway.\n             WaitCallback callback = delegate\n             {\n-                s_cancelComplete.Reset();\n-\n-                // If the build is already complete, just exit.\n-                if (s_buildComplete.WaitOne(0))\n+                try \n                 {\n-                    s_cancelComplete.Set();\n-                    return;\n-                }\n+                    s_cancelComplete.Reset();\n \n-                // If the build has already started (or already finished), we will cancel it\n-                // If the build has not yet started, it will cancel itself, because\n-                // we set alreadyCalled=1\n-                bool hasBuildStarted;\n-                lock (s_buildLock)\n-                {\n-                    hasBuildStarted = s_hasBuildStarted;\n-                }\n+                    // If the build is already complete, just exit.\n+                    if (s_buildComplete.WaitOne(0))\n+                    {\n+                        s_cancelComplete.Set();\n+                        return;\n+                    }\n \n-                if (hasBuildStarted)\n+                    // If the build has already started (or already finished), we will cancel it\n+                    // If the build has not yet started, it will cancel itself, because\n+                    // we set alreadyCalled=1\n+                    bool hasBuildStarted;\n+                    lock (s_buildLock)\n+                    {\n+                        hasBuildStarted = s_hasBuildStarted;\n+                    }\n+\n+                    if (hasBuildStarted)\n+                    {\n+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();\n+                        s_buildComplete.WaitOne();\n+                    }\n+\n+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.\n+                }\n+                finally\n                 {\n-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();\n-                    s_buildComplete.WaitOne();\n+                    // Server node shall terminate after it received CancelKey press.\n+                    if (s_isServerNode)\n+                    {\n+                        Environment.Exit(0); // the process can now be terminated as everything has already been gracefully cancelled.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}