{
  "number": 11016,
  "title": "[17.12] Adding a static factory for the TerminalLogger",
  "body": "Fixes #10998\r\n\r\n### Summary\r\n`dotnet run` directly creates an instance of `TerminalLogger`, bypassing all checks. This can lead to situations where ANSI escape sequences are emitted to the terminal, even if the terminal does not support them. These escape sequences are also emitted when the standard output is redirected, which can break a CI build that relies on the command's output.\r\n\r\n### Changes Made\r\nAdded a static factory that can return instance of Terminal or Console logger based on current environment. The usage of `TerminalLogger` in this scenario can be explicitly disabled by using of already existing env. variable, which wasn't possible before.\r\n\r\n### Customer Impact\r\nSome customers reported unexpected behavior of `dotnet run` command and CI builds failures.\r\n\r\n### Regression?\r\nYes.\r\n\r\n### Testing\r\nManual testing with locally updated SDK.\r\n\r\n### Notes\r\nThere will be a servicing PR for SDK 9.0.2xx that uses this new method. In 9.0.1xx, TL will be disabled for the last part of `dotnet run` completely.",
  "state": "CLOSED",
  "createdAt": "2024-11-21T12:51:12Z",
  "updatedAt": "2025-01-21T13:41:36Z",
  "closedAt": "2025-01-21T13:41:35Z",
  "mergedAt": null,
  "additions": 28,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "dev/mipavlik/tl-static-factory-17-12",
  "isDraft": true,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f9f6ee3c5d709d5a175b03dc1d9883483b8a3581",
          "message": "Adds a static factory that can return instance of Terminal or Console Logger based on current environment.",
          "committedDate": "2024-11-21T12:34:46Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "668dd825fb096abd7ff7e579d9e497d0ade3fe2d",
          "message": "Version bump",
          "committedDate": "2024-11-21T12:55:18Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52bf6612e757817c5224c6a76bfc61a4da79b7bf",
          "message": "Merge branch 'vs17.12' into dev/mipavlik/tl-static-factory-17-12",
          "committedDate": "2024-11-21T12:56:34Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "SDK PR was created: https://github.com/dotnet/sdk/pull/45009\r\n\r\nHotfix for 9.0.1xx: https://github.com/dotnet/sdk/pull/45015",
        "createdAt": "2024-11-21T13:21:02Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "One question I had was: the main problem was that the silent TL verbosity still caused the 'progress' indicators to be written - could those be gated behind the verbosity check as well? Ideally we'd be able to say something like \"when silent verbosity is used, only the diagnostic reports will be written to stdout\".",
        "createdAt": "2024-11-21T14:30:48Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel, thanks for the great feedback. While your points are valid, would you like to expand the fix in this PR? I'm asking because of the US Thanksgiving holiday. I'm not sure how much more time it will take to deliver this fix if we miss this week...",
        "createdAt": "2024-11-21T14:38:39Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "As discussed offline, we have time for 9.0.200, so I'll convert this PR to draft and I will cover Chet's comments.",
        "createdAt": "2024-11-21T15:40:44Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "Replaced by #11318",
        "createdAt": "2025-01-21T13:41:35Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: we can skip this if TL is requested to be disabled",
              "createdAt": "2024-11-21T14:29:12Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1050,6 +1057,24 @@ private void EraseNodes()\n \n     #region Helpers\n \n+    /// <summary>\n+    /// Creates a Terminal logger or Console logger based on the environment.\n+    /// This method is called by reflection from dotnet. Do not modify the name or parameters without adapting the SDK.\n+    /// </summary>\n+    public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity)\n+    {\n+        bool isDisabled = (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I started with that intention, but this approach has lower complexity and the performance impact is negligible.",
              "createdAt": "2024-11-21T14:32:54Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1050,6 +1057,24 @@ private void EraseNodes()\n \n     #region Helpers\n \n+    /// <summary>\n+    /// Creates a Terminal logger or Console logger based on the environment.\n+    /// This method is called by reflection from dotnet. Do not modify the name or parameters without adapting the SDK.\n+    /// </summary>\n+    public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity)\n+    {\n+        bool isDisabled = (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "One missing piece here is that while this does check the environment variable, the CLI flags (`--tl:off`, etc) are not respected. We may need a way to pass in an argv and have this method check for the presence/absence of the TL-related (and --console logger parameter!) flags to ensure uniform behavior.",
              "createdAt": "2024-11-21T14:29:37Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -1050,6 +1057,24 @@ private void EraseNodes()\n \n     #region Helpers\n \n+    /// <summary>\n+    /// Creates a Terminal logger or Console logger based on the environment.\n+    /// This method is called by reflection from dotnet. Do not modify the name or parameters without adapting the SDK.\n+    /// </summary>\n+    public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity)",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}