{
  "number": 10282,
  "title": "Bootstrap improvements",
  "body": "Fixes #10300\r\n\r\n### Context\r\nThe PR introduces a simplified and transparent way for getting sdk bits and patching the changes to them using install-scripts.\r\nDetails can be found in the doc: https://github.com/dotnet/msbuild/blob/5852b3d778362105203ac4e550fd9456028627c5/documentation/wiki/Bootstrap.md\r\n\r\n### Notes\r\n- Redundant equality changes were introduced for fixing build errors: https://github.com/dotnet/msbuild/runs/26720044934\r\n- Need to preserve coping of _NuGetRuntimeDependencies, because these dlls are required by bootstrap\\**\\sdk\\**\\NuGet.RestoreEx.targets. Otherwise NuGet.Build.Tasks.dll can not be found : https://dev.azure.com/dnceng-public/public/_build/results?buildId=721344&view=logs&j=20125c81-7edb-551b-693a-61efae016b74&t=7ce25265-aabe-59d3-d73c-06619cfcc3c4&l=158\r\n\r\nMight resolve https://github.com/dotnet/msbuild/issues/6566",
  "state": "MERGED",
  "createdAt": "2024-06-24T11:07:10Z",
  "updatedAt": "2024-07-30T13:08:00Z",
  "closedAt": "2024-07-30T13:08:00Z",
  "mergedAt": "2024-07-30T13:07:59Z",
  "additions": 273,
  "deletions": 95,
  "changedFiles": 20,
  "headRefName": "dev/ykovalova/bootstrap_improvements",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b132524ba93da3bb5e850fff55eeddd4967dec8d",
          "message": "move tast to a separate project",
          "committedDate": "2024-06-21T16:54:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b7dda080f81389f5665768a19aa255e902fba7c",
          "message": "logic updates",
          "committedDate": "2024-06-24T10:47:10Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0caf66332b8af017807127e2bfbd82edc49b4a0b",
          "message": "change output path",
          "committedDate": "2024-06-24T11:06:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c02f33baaa21aeb4014bf8c1b45813fb513e28c",
          "message": "adjust output paths",
          "committedDate": "2024-06-24T12:16:00Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f29f6f53ce6091176bbcef2cf1698369da692c0",
          "message": "move to netstardard2.0",
          "committedDate": "2024-06-24T13:56:17Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23e753d55f6c3116d548cff5572f4f275ce30eaf",
          "message": "cleanup for non-windows",
          "committedDate": "2024-06-24T14:06:27Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@Yuliias-MacBook-Pro.local"
          }
        }
      },
      {
        "commit": {
          "oid": "b51f097182e8f9051cae99a3c23280fcc727d7ac",
          "message": "update condition",
          "committedDate": "2024-06-24T15:04:27Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b12aac2b57224f54ca75d1665ddae56d8a58f474",
          "message": "Merge branch 'dev/ykovalova/bootstrap_improvements' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/bootstrap_improvements",
          "committedDate": "2024-06-24T15:04:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f00ef05931844a3ce94c09b48903962dff7214b",
          "message": "Base InstallDotNetCoreTask on stable packaged MSBuild\n\nNuGet asset resolution was picking the wrong TF when looking at\nProjectReferences, so build this like an external consumer would.\n\nCo-authored-by: YuliiaKovalova <95473390+YuliiaKovalova@users.noreply.github.com>",
          "committedDate": "2024-06-24T18:13:54Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b2d83e5202ccee5e56a7ee7555c213ce99a41a70",
          "message": "change the copy logic",
          "committedDate": "2024-06-24T18:50:11Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c70792b61d77dc4a5a4cc80b0a96cf321deb924c",
          "message": "unify the version with PortableTask",
          "committedDate": "2024-06-25T12:07:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0907c8c1e028df0a06a9747fd70ee57507d7ed45",
          "message": "exclude deps.json from BootstrapNetCorePatch, return __NuGetRuntimeDependencies",
          "committedDate": "2024-06-26T20:20:28Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6196063dffa1123e5f39a3879c59c01459a44dc0",
          "message": "fix path for Windows Full scenario and handle async script download scenario",
          "committedDate": "2024-06-27T10:20:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "675f275b114fc29e4a5ec815832d4ee36fc9ac6c",
          "message": "adjust paths in e2e tests",
          "committedDate": "2024-06-27T12:26:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37656e0fe2da3bc854d5fc4ff312a72d4ba88b8c",
          "message": "add documentation",
          "committedDate": "2024-07-01T17:22:16Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a71e29ce2b3dfcb2f58a946b751a48a84ceda4f5",
          "message": "extend the documentation",
          "committedDate": "2024-07-01T17:41:47Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53f0efd667c53975c37c559ac1ef804f7676c6b5",
          "message": "Apply suggestions from Rainer's review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-07-11T08:28:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9ce4ef383240246c36adea462fdf9a16e852f2b",
          "message": "fix review comments",
          "committedDate": "2024-07-11T17:02:54Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "19ce1fcb95633f1e531948d5413c6fb3a8f0c994",
          "message": "Merge branch 'dotnet:main' into dev/ykovalova/bootstrap_improvements",
          "committedDate": "2024-07-11T18:18:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb5dd945d3fee1661dee10873316a898391d3241",
          "message": "use Task as a base class",
          "committedDate": "2024-07-11T19:29:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b45a2b3a1962e10ba8d99e510c1a8859d279134",
          "message": "onboard tooltask in InstallDotNetCoreTask",
          "committedDate": "2024-07-11T20:16:14Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5852b3d778362105203ac4e550fd9456028627c5",
          "message": "fix review comments",
          "committedDate": "2024-07-12T14:54:36Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0b6b35202e97ce749f6fc4e987a556d51e80bee",
          "message": "cleanup",
          "committedDate": "2024-07-12T16:00:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9be76bcb1e1a29631a917a984b9681de7f87c375",
          "message": "InstallDotNetCoreTask via RoslynCodeTaskFactory\n\nThis avoids ever having to block on building the task.\n\nI'm leaving the project in place for easier editing, but not including\nit in the `.sln` so it won't be part of any build--you'd have to open\nit individually to get a great inner-loop experience with the task.",
          "committedDate": "2024-07-17T18:22:18Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0c2057ec536c30a01d566efefba48a3c81f60ff",
          "message": "Acquire SDK earlier\n\nPushing this lengthy process before `ResolveProjectReferences` means\nit's more likely to be able to be scheduled and finish without being on\nthe critical path through builds.",
          "committedDate": "2024-07-17T18:23:13Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9610b1dbccccf29ce19fcd8e99dfd4b457af53c6",
          "message": "update documentation\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-07-17T20:17:19Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b5700431a0b45d58217cbf117484f4171b0ed880",
          "message": "move BootstrapSdkVersion to Versions.props",
          "committedDate": "2024-07-18T13:04:37Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8532a09b2191219cbd237a60c16fd4c8fa50c69",
          "message": "Merge branch 'main' into dev/ykovalova/bootstrap_improvements",
          "committedDate": "2024-07-30T08:38:50Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73a0a6fe0ee0571e7f2239793c18ab794cc6c36e",
          "message": "update documentation\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-07-30T08:40:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5cfef7b3817f0a95749137aa0e8e6acf098bdb6d",
          "message": "undo extra changes",
          "committedDate": "2024-07-30T10:08:53Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This feels as it deserves some very small doc on what is the current bootstrap approach on grabbing bits (does it use '.dotnet'?) and what are other alternatives and their pros and cons.\r\nThis change looks OK - I'm just lost if that's the only option and if we're OK with possible introduced full build slowdown.",
        "createdAt": "2024-07-01T06:42:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Ok so I am going to be a hyper-nitpicker in the hopes that this shares some of my \"how to think about build process changes\" opinions.\r\n\r\nOn my machine, this took 17 seconds (`rm -r artifacts && build.cmd`), and increased overall build time by like 40%.\r\n\r\n![image](https://github.com/user-attachments/assets/65c36618-584d-48e0-871b-c73e6c758425)\r\n\r\nI think we can do better!\r\n\r\nIn general you reduce overall build time by getting work off the critical path. As currently written this is well on the critical path:\r\n\r\n1. There's a new task that must be built before the Bootstrap project can proceed.\r\n2. Execution of that task takes a long time.\r\n3. Test projects depend on the bootstrap (because UnitTests.Shared depends on it).\r\n\r\nBut that's not set in stone.\r\n\r\nWe can use a `RoslynCodeTaskFactory` to avoid the project. Then executing the task need have _no_ dependencies, it could be literally the first thing the build does: 9be76bcb1e1a29631a917a984b9681de7f87c375.\r\n\r\nThen we can rearrange the call to the task to be earlier, instead of just-in-time for bootstrap creation (which implicitly delays it until most of the repo has built): d0c2057ec536c30a01d566efefba48a3c81f60ff.\r\n\r\nOn my machine that knocks a good 15 seconds off the end-to-end build time.",
        "createdAt": "2024-07-17T19:39:00Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If this needs to be hardcoded - then it probably should go to Version.props, plus release-checklist.md should have an entry for updating this.",
              "createdAt": "2024-07-03T04:36:59Z",
              "path": "eng/BootStrapMsBuild.props",
              "diffHunk": "@@ -1,20 +1,23 @@\n <Project>\n \n-  <!--\n-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n-   relying on bootstrapped MSBuild\n-   -->\n+  <!-- Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests relying on bootstrapped MSBuild -->\n+\n+  <PropertyGroup Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+    <NetVersion>8.0.302</NetVersion>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Or actually probably not a release-checklist.md, but checklist for .NET retargetting (that we do not yet have documented, but we should document it. Previous efforts: https://github.com/dotnet/msbuild/issues/8969, https://github.com/dotnet/msbuild/pull/7790)",
              "createdAt": "2024-07-03T04:43:27Z",
              "path": "eng/BootStrapMsBuild.props",
              "diffHunk": "@@ -1,20 +1,23 @@\n <Project>\n \n-  <!--\n-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n-   relying on bootstrapped MSBuild\n-   -->\n+  <!-- Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests relying on bootstrapped MSBuild -->\n+\n+  <PropertyGroup Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+    <NetVersion>8.0.302</NetVersion>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Putting it in the release checklist makes sense to me, as a \"periodically update this thing that releases at least as often as we do\" check.",
              "createdAt": "2024-07-10T18:42:10Z",
              "path": "eng/BootStrapMsBuild.props",
              "diffHunk": "@@ -1,20 +1,23 @@\n <Project>\n \n-  <!--\n-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n-   relying on bootstrapped MSBuild\n-   -->\n+  <!-- Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests relying on bootstrapped MSBuild -->\n+\n+  <PropertyGroup Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+    <NetVersion>8.0.302</NetVersion>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Similar here - if possible, it'd be nice to have a sinlge variable in single place for the repo. If not easily possible - let's have it documented in retargetting checklist (since such checklist doesn't exist yet, it's fine to have just initial stub, which will have instructions just for bootstrap for now, and during next retargetting: https://github.com/dotnet/msbuild/issues/10280, we should ammend other steps)",
              "createdAt": "2024-07-03T04:45:24Z",
              "path": "eng/cibuild_bootstrapped_msbuild.sh",
              "diffHunk": "@@ -58,8 +58,10 @@ bootstrapRoot=\"$Stage1Dir/bin/bootstrap\"\n \n if [ $host_type = \"core\" ]\n then\n-  _InitializeBuildTool=\"$_InitializeDotNetCli/dotnet\"\n-  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/MSBuild/MSBuild.dll\"\n+  _InitializeBuildTool=\"$bootstrapRoot/net8.0/dotnet\"\n+\n+  # Must be consistent with the version in BootStrapMsBuild.props\n+  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/sdk/8.0.302/MSBuild.dll\"",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I planned to add it after getting the initial review, thank you for reminder :)",
              "createdAt": "2024-07-08T08:52:34Z",
              "path": "eng/cibuild_bootstrapped_msbuild.sh",
              "diffHunk": "@@ -58,8 +58,10 @@ bootstrapRoot=\"$Stage1Dir/bin/bootstrap\"\n \n if [ $host_type = \"core\" ]\n then\n-  _InitializeBuildTool=\"$_InitializeDotNetCli/dotnet\"\n-  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/MSBuild/MSBuild.dll\"\n+  _InitializeBuildTool=\"$bootstrapRoot/net8.0/dotnet\"\n+\n+  # Must be consistent with the version in BootStrapMsBuild.props\n+  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/sdk/8.0.302/MSBuild.dll\"",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "This one I think we can avoid entirely now:\r\n\r\n```suggestion\r\n  _InitializeBuildToolCommand=\"msbuild\"\r\n```",
              "createdAt": "2024-07-10T19:58:37Z",
              "path": "eng/cibuild_bootstrapped_msbuild.sh",
              "diffHunk": "@@ -58,8 +58,10 @@ bootstrapRoot=\"$Stage1Dir/bin/bootstrap\"\n \n if [ $host_type = \"core\" ]\n then\n-  _InitializeBuildTool=\"$_InitializeDotNetCli/dotnet\"\n-  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/MSBuild/MSBuild.dll\"\n+  _InitializeBuildTool=\"$bootstrapRoot/net8.0/dotnet\"\n+\n+  # Must be consistent with the version in BootStrapMsBuild.props\n+  _InitializeBuildToolCommand=\"$bootstrapRoot/net8.0/sdk/8.0.302/MSBuild.dll\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just curious - why this specific version?",
              "createdAt": "2024-07-03T04:47:07Z",
              "path": "src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj",
              "diffHunk": "@@ -0,0 +1,10 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" VersionOverride=\"15.5.180\" ExcludeAssets=\"runtime\" PrivateAssets=\"all\" />",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "the same version was taken as in https://github.com/dotnet/msbuild/blob/07be3a17b2459920aeca63592fa4b32aeab10629/src/Samples/PortableTask/PortableTask.csproj#L15\r\n\r\nit's needed just for access to basic msbuild API, so we don't expect to have any changes here",
              "createdAt": "2024-07-08T08:51:53Z",
              "path": "src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj",
              "diffHunk": "@@ -0,0 +1,10 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" VersionOverride=\"15.5.180\" ExcludeAssets=\"runtime\" PrivateAssets=\"all\" />",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "And can it possibly be a ProjectReference?",
              "createdAt": "2024-07-08T15:31:54Z",
              "path": "src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj",
              "diffHunk": "@@ -0,0 +1,10 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" VersionOverride=\"15.5.180\" ExcludeAssets=\"runtime\" PrivateAssets=\"all\" />",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It probably could be a `ProjectReference` but avoiding those can result in scheduling this project earlier in the build graph, which is nice. We need only a \"new enough\" MSBuild reference to build the task assembly.",
              "createdAt": "2024-07-10T19:39:32Z",
              "path": "src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj",
              "diffHunk": "@@ -0,0 +1,10 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" VersionOverride=\"15.5.180\" ExcludeAssets=\"runtime\" PrivateAssets=\"all\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we leverage `ToolTask` or `Exec` Tasks bases so that we do not have to manage spawning the process?",
              "createdAt": "2024-07-03T04:52:02Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs",
              "diffHunk": "@@ -0,0 +1,213 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if RUNTIME_TYPE_NETCORE\n+\n+using System.Diagnostics;\n+using System.IO;\n+using System.Net.Http;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+using AsyncTasks = System.Threading.Tasks;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    /// <summary>\n+    /// This task is designed to automate the installation of .NET Core SDK.\n+    /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.\n+    /// </summary>\n+    public sealed class InstallDotNetCoreTask : Task",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: whitespace",
              "createdAt": "2024-07-03T04:52:19Z",
              "path": "src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj",
              "diffHunk": "@@ -47,7 +48,7 @@\n \n   <Import Project=\"..\\Package\\GetBinPaths.targets\" Condition=\"$(TargetFramework.StartsWith('net4'))\" />\n   <Import Project=\"..\\Package\\GetBinPaths.Arm64.targets\" Condition=\"$(TargetFramework.StartsWith('net4'))\" />\n-\n+  ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Btw. one thing that I do not fully understand is why the '.dotnet' folder copy approach falls short in this. Can it be clarified?",
              "createdAt": "2024-07-03T04:56:32Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.\n+\n+## Pros\n+This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "We haven't considered this option, since this sdk is needed for arcade flow and changing it with msbuild test bits can be considered as a hack.\r\nAs an option - @rainersigwald , can we copy the content of this folder to bootstrap and substitute it with the fresh bits?\r\n",
              "createdAt": "2024-07-08T08:50:24Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.\n+\n+## Pros\n+This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "at the same time, relying on the arcade would make us be dependent on the version they pull.\r\nFor example, for main they still use 8.0.201, when we dogfood 8.0.302 already.",
              "createdAt": "2024-07-08T15:48:32Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.\n+\n+## Pros\n+This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Yeah, we could theoretically use the Arcade SDK as a baseline, but having it separate makes a few things better, since we can go ahead of it or stay behind.\r\n\r\nBeing coupled to the Arcade version has caused problems in the past because e.g. we can't go to Arcade 9 which requires SDK 9 while we still target .NET 8 because some of the new 9-targeted tasks won't run.",
              "createdAt": "2024-07-10T18:41:17Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.\n+\n+## Pros\n+This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is nice explanation - it would be nice to have it incorporated in the document ;-)",
              "createdAt": "2024-07-12T08:44:13Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.\n+\n+## Pros\n+This approach simplifies testing MSBuild as part of dotnet by providing a ready and reliable environment without needing to patch anything into a globally installed SDK, as was previously required.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n# Bootstrap MSBuild\r\n\r\nBecause the binaries and build logic in this repo aren't sufficient to build real-world projects, we need a test environment that mimics the real-world combinations of MSBuild, Roslyn compilers, and other things that combine in the .NET SDK and in Visual Studio to produce a functional build environment. We call this the \"bootstrap\".\r\n\r\n## Quick Intro\r\n```",
              "createdAt": "2024-07-10T18:44:57Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nMSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later combined with parts of the .NET SDK that was used to build MSBuild to the bootstrap, making them ready for use with dotnet.exe. To execute the bootstrap MSBuild, you'd combine the `dotnet.exe` muxer from the .dotnet folder with the path to the bootstrap's `MSBuild.dll`.\r\n```",
              "createdAt": "2024-07-10T19:27:25Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nDuring the bootstrap phase, install-scripts are used to download a full copy of the .NET SDK compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\r\n```",
              "createdAt": "2024-07-10T19:27:50Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hm, this sounds bad, even for performance reasons I wouldn't want to redownload the same version again.",
              "createdAt": "2024-07-10T19:28:51Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Scripts take care of it\r\nhttps://github.com/dotnet/install-scripts/blob/7e6edf599d114134a3d35a6b775d65d06bcddf2a/src/dotnet-install.ps1#L1347\r\n\r\nBut be have the the CleanBootstrapFolder target invocation before each bootstrap invocation.\r\nWith the current change, it looks like I can avoid doing that and the outdated dlls will be changed with the fresh bits later.",
              "createdAt": "2024-07-11T08:44:34Z",
              "path": "documentation/wiki/Bootstrap.md",
              "diffHunk": "@@ -0,0 +1,18 @@\n+## Quick Intro\n+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.\n+\n+## History\n+MSBuild supports two different environments: .NET and .NET Framework. To test changes for .NET, fresh bits were published (the actual target Publish run) to the MSBuild.Bootstrap folder. These bits, along with specific dependencies, were later copied to the bootstrap, making them ready for use with dotnet.exe. The executable is part of the .dotnet folder.\n+\n+## Current Implementation for .NET\n+During the bootstrap phase, install-scripts are used to download the bits compatible with the current version. The logic for interacting with the scripts has been encapsulated in a separate MSBuild task: InstallDotNetCoreTask.cs. Here\u2019s what happens under the hood:\n+\n+The SDK is downloaded to the bootstrap folder.\n+Fresh MSBuild bits are then copied to this folder.\n+The constructed SDK is used for both local end-to-end tests and CI runs.\n+\n+## Potential Cons\n+The reliance on downloading the SDK from a remote source requires an internet connection. For the initial build of the repository, this doesn't change as the SDK is always downloaded to the .dotnet folder first. However, for subsequent runs, the SDK will need to be downloaded again, which could be problematic in environments with limited or no internet connectivity.",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <ProjectReference Include=\"..\\MSBuild.Bootstrap.Utils\\MSBuild.Bootstrap.Utils.csproj\" ReferenceOutputAssembly=\"false\" />\r\n```",
              "createdAt": "2024-07-10T19:38:16Z",
              "path": "src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <ProjectReference Include=\"..\\Framework\\Microsoft.Build.Framework.csproj\" />\n     <ProjectReference Include=\"..\\Tasks\\Microsoft.Build.Tasks.csproj\" />\n     <ProjectReference Include=\"..\\Utilities\\Microsoft.Build.Utilities.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap.Utils\\MSBuild.Bootstrap.Utils.csproj\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "(see .sh comment)\r\n\r\n```suggestion\r\n    $buildToolCommand = \"msbuild\";\r\n```",
              "createdAt": "2024-07-10T19:59:09Z",
              "path": "eng/cibuild_bootstrapped_msbuild.ps1",
              "diffHunk": "@@ -84,8 +84,11 @@ try {\n   }\n   else\n   {\n-    $buildToolPath = $dotnetExePath\n-    $buildToolCommand = Join-Path $bootstrapRoot \"net8.0\\MSBuild\\MSBuild.dll\"\n+    $buildToolPath = Join-Path $bootstrapRoot \"net8.0\\dotnet.exe\"\n+\n+    # Must be consistent with the version in BootStrapMsBuild.props\n+    $buildToolCommand = Join-Path $bootstrapRoot \"net8.0\\sdk\\8.0.302\\MSBuild.dll\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wait, how do we build the bootstrap in `-msbuildEngine vs`?",
              "createdAt": "2024-07-10T20:01:49Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs",
              "diffHunk": "@@ -0,0 +1,213 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if RUNTIME_TYPE_NETCORE",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we could simplify/future-proof a bunch of stuff if we didn't include TF here; do we need to?\r\n```suggestion\r\n      <InstallDir>$(ArtifactsBinDir)bootstrap\\</InstallDir>\r\n```",
              "createdAt": "2024-07-10T20:04:34Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -202,56 +202,32 @@\n            AlwaysCreate=\"true\" />\n   </Target>\n \n+  <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->\n+  <UsingTask TaskName=\"MSBuild.Bootstrap.Utils.Tasks.InstallDotNetCoreTask\" AssemblyFile=\"$(ArtifactsBinDir)MSBuild.Bootstrap.Utils\\$(Configuration)\\netstandard2.0\\MSBuild.Bootstrap.Utils.dll\" TaskFactory=\"TaskHostFactory\" />\n   <Target Name=\"BootstrapNetCore\" DependsOnTargets=\"CleanBootstrapFolder\">\n \n-    <!-- Publish the project first.  The more obvious way to do this would be to depend on the Publish target,\n-         but that causes a target dependency cycle, even though it seems like AfterTargets=\"AfterBuild\" should\n-         probably not count as a link in the cycle. -->\n-    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"Publish\" BuildInParallel=\"$(BuildInParallel)\" />\n+    <PropertyGroup>\n+      <InstallDir>$(ArtifactsBinDir)bootstrap\\$(TargetFramework)\\</InstallDir>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We need it to differenciate between net472 and netcore, otherwise :) :\r\n<img width=\"530\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/95473390/7b8f2cbf-14df-43a6-969d-62b41614d230\">\r\n",
              "createdAt": "2024-07-11T12:07:27Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -202,56 +202,32 @@\n            AlwaysCreate=\"true\" />\n   </Target>\n \n+  <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->\n+  <UsingTask TaskName=\"MSBuild.Bootstrap.Utils.Tasks.InstallDotNetCoreTask\" AssemblyFile=\"$(ArtifactsBinDir)MSBuild.Bootstrap.Utils\\$(Configuration)\\netstandard2.0\\MSBuild.Bootstrap.Utils.dll\" TaskFactory=\"TaskHostFactory\" />\n   <Target Name=\"BootstrapNetCore\" DependsOnTargets=\"CleanBootstrapFolder\">\n \n-    <!-- Publish the project first.  The more obvious way to do this would be to depend on the Publish target,\n-         but that causes a target dependency cycle, even though it seems like AfterTargets=\"AfterBuild\" should\n-         probably not count as a link in the cycle. -->\n-    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"Publish\" BuildInParallel=\"$(BuildInParallel)\" />\n+    <PropertyGroup>\n+      <InstallDir>$(ArtifactsBinDir)bootstrap\\$(TargetFramework)\\</InstallDir>",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Can it be \"core\" or something that won't ever change then?",
              "createdAt": "2024-07-11T14:39:38Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -202,56 +202,32 @@\n            AlwaysCreate=\"true\" />\n   </Target>\n \n+  <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->\n+  <UsingTask TaskName=\"MSBuild.Bootstrap.Utils.Tasks.InstallDotNetCoreTask\" AssemblyFile=\"$(ArtifactsBinDir)MSBuild.Bootstrap.Utils\\$(Configuration)\\netstandard2.0\\MSBuild.Bootstrap.Utils.dll\" TaskFactory=\"TaskHostFactory\" />\n   <Target Name=\"BootstrapNetCore\" DependsOnTargets=\"CleanBootstrapFolder\">\n \n-    <!-- Publish the project first.  The more obvious way to do this would be to depend on the Publish target,\n-         but that causes a target dependency cycle, even though it seems like AfterTargets=\"AfterBuild\" should\n-         probably not count as a link in the cycle. -->\n-    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"Publish\" BuildInParallel=\"$(BuildInParallel)\" />\n+    <PropertyGroup>\n+      <InstallDir>$(ArtifactsBinDir)bootstrap\\$(TargetFramework)\\</InstallDir>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the incremental-build behavior of the script?",
              "createdAt": "2024-07-10T22:02:02Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs",
              "diffHunk": "@@ -0,0 +1,213 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if RUNTIME_TYPE_NETCORE\n+\n+using System.Diagnostics;\n+using System.IO;\n+using System.Net.Http;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+using AsyncTasks = System.Threading.Tasks;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    /// <summary>\n+    /// This task is designed to automate the installation of .NET Core SDK.\n+    /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.\n+    /// </summary>\n+    public sealed class InstallDotNetCoreTask : Task\n+    {\n+        private const string ScriptName = \"dotnet-install\";\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"InstallDotNetCoreTask\"/> class.\n+        /// </summary>\n+        public InstallDotNetCoreTask()\n+        {\n+            InstallDir = string.Empty;\n+            DotNetInstallScriptRootPath = string.Empty;\n+            Version = string.Empty;\n+        }\n+\n+        /// <summary>\n+        /// Gets or sets the directory where the .NET Core SDK should be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string InstallDir { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the root path where the .NET Core installation script is located. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string DotNetInstallScriptRootPath { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the version of the .NET Core SDK to be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string Version { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the base URL for downloading the .NET Core installation script. The default value is \"https://dot.net/v1/\".\n+        /// </summary>\n+        public string DotNetInstallBaseUrl { get; set; } = \"https://dot.net/v1/\";\n+\n+        private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);\n+\n+        /// <summary>\n+        /// Executes the task, downloading and running the .NET Core installation script.\n+        /// </summary>\n+        /// <returns>True if the task succeeded; otherwise, false.</returns>\n+        public override bool Execute()\n+        {\n+            ScriptExecutionSettings executionSettings = SetupScriptsExecutionSettings();\n+            if (!File.Exists(executionSettings.ScriptsFullPath))\n+            {\n+                AsyncTasks.Task.Run(() => DownloadScriptAsync(executionSettings.ScriptName, executionSettings.ScriptsFullPath)).GetAwaiter().GetResult();\n+            }\n+\n+            MakeScriptExecutable(executionSettings.ScriptsFullPath);\n+\n+            return RunScript(executionSettings);\n+        }\n+\n+        /// <summary>\n+        /// Downloads the .NET Core installation script asynchronously from the specified URL.\n+        /// </summary>\n+        /// <param name=\"scriptName\">The name of the script to download.</param>\n+        /// <param name=\"scriptPath\">The path where the script will be saved.</param>\n+        private async AsyncTasks.Task DownloadScriptAsync(string scriptName, string scriptPath)\n+        {\n+            using (HttpClient client = new HttpClient())\n+            {\n+                HttpResponseMessage response = await client.GetAsync($\"{DotNetInstallBaseUrl}{scriptName}\").ConfigureAwait(false);\n+                if (response.IsSuccessStatusCode)\n+                {\n+                    string scriptContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n+                    if (!string.IsNullOrEmpty(scriptContent))\n+                    {\n+                        File.WriteAllText(scriptPath, scriptContent);\n+                    }\n+                }\n+                else\n+                {\n+                    Log.LogError($\"Install-scripts download from {DotNetInstallBaseUrl} error. Status code: {response.StatusCode}.\");\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Makes the installation script executable on non-Windows platforms.\n+        /// </summary>\n+        /// <param name=\"scriptPath\">The path of the script to make executable.</param>\n+        private void MakeScriptExecutable(string scriptPath)\n+        {\n+            if (IsWindows)\n+            {\n+                return;\n+            }\n+\n+            using (var process = new Process\n+            {\n+                StartInfo = new ProcessStartInfo\n+                {\n+                    FileName = \"/bin/chmod\",\n+                    Arguments = $\"+x {scriptPath}\",\n+                    RedirectStandardOutput = true,\n+                    RedirectStandardError = true,\n+                    UseShellExecute = false,\n+                    CreateNoWindow = true,\n+                },\n+            })\n+            {\n+                _ = process.Start();\n+                process.WaitForExit();\n+\n+                if (process.ExitCode != 0)\n+                {\n+                    string errors = process.StandardError.ReadToEnd() ?? string.Empty;\n+                    Log.LogError($\"Install-scripts can not be made executable due to the errors: {errors}.\");\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Runs the .NET Core installation script with the specified settings.\n+        /// </summary>\n+        /// <param name=\"executionSettings\">The settings required for script execution.</param>\n+        /// <returns>True if the script executed successfully; otherwise, false.</returns>\n+        private bool RunScript(ScriptExecutionSettings executionSettings)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If the sdk was previously downloaded is checked in the scripts: https://github.com/dotnet/install-scripts/blob/7e6edf599d114134a3d35a6b775d65d06bcddf2a/src/dotnet-install.ps1#L1347\r\n\r\n",
              "createdAt": "2024-07-11T08:38:38Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs",
              "diffHunk": "@@ -0,0 +1,213 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if RUNTIME_TYPE_NETCORE\n+\n+using System.Diagnostics;\n+using System.IO;\n+using System.Net.Http;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+using AsyncTasks = System.Threading.Tasks;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    /// <summary>\n+    /// This task is designed to automate the installation of .NET Core SDK.\n+    /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.\n+    /// </summary>\n+    public sealed class InstallDotNetCoreTask : Task\n+    {\n+        private const string ScriptName = \"dotnet-install\";\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"InstallDotNetCoreTask\"/> class.\n+        /// </summary>\n+        public InstallDotNetCoreTask()\n+        {\n+            InstallDir = string.Empty;\n+            DotNetInstallScriptRootPath = string.Empty;\n+            Version = string.Empty;\n+        }\n+\n+        /// <summary>\n+        /// Gets or sets the directory where the .NET Core SDK should be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string InstallDir { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the root path where the .NET Core installation script is located. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string DotNetInstallScriptRootPath { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the version of the .NET Core SDK to be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string Version { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the base URL for downloading the .NET Core installation script. The default value is \"https://dot.net/v1/\".\n+        /// </summary>\n+        public string DotNetInstallBaseUrl { get; set; } = \"https://dot.net/v1/\";\n+\n+        private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);\n+\n+        /// <summary>\n+        /// Executes the task, downloading and running the .NET Core installation script.\n+        /// </summary>\n+        /// <returns>True if the task succeeded; otherwise, false.</returns>\n+        public override bool Execute()\n+        {\n+            ScriptExecutionSettings executionSettings = SetupScriptsExecutionSettings();\n+            if (!File.Exists(executionSettings.ScriptsFullPath))\n+            {\n+                AsyncTasks.Task.Run(() => DownloadScriptAsync(executionSettings.ScriptName, executionSettings.ScriptsFullPath)).GetAwaiter().GetResult();\n+            }\n+\n+            MakeScriptExecutable(executionSettings.ScriptsFullPath);\n+\n+            return RunScript(executionSettings);\n+        }\n+\n+        /// <summary>\n+        /// Downloads the .NET Core installation script asynchronously from the specified URL.\n+        /// </summary>\n+        /// <param name=\"scriptName\">The name of the script to download.</param>\n+        /// <param name=\"scriptPath\">The path where the script will be saved.</param>\n+        private async AsyncTasks.Task DownloadScriptAsync(string scriptName, string scriptPath)\n+        {\n+            using (HttpClient client = new HttpClient())\n+            {\n+                HttpResponseMessage response = await client.GetAsync($\"{DotNetInstallBaseUrl}{scriptName}\").ConfigureAwait(false);\n+                if (response.IsSuccessStatusCode)\n+                {\n+                    string scriptContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n+                    if (!string.IsNullOrEmpty(scriptContent))\n+                    {\n+                        File.WriteAllText(scriptPath, scriptContent);\n+                    }\n+                }\n+                else\n+                {\n+                    Log.LogError($\"Install-scripts download from {DotNetInstallBaseUrl} error. Status code: {response.StatusCode}.\");\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Makes the installation script executable on non-Windows platforms.\n+        /// </summary>\n+        /// <param name=\"scriptPath\">The path of the script to make executable.</param>\n+        private void MakeScriptExecutable(string scriptPath)\n+        {\n+            if (IsWindows)\n+            {\n+                return;\n+            }\n+\n+            using (var process = new Process\n+            {\n+                StartInfo = new ProcessStartInfo\n+                {\n+                    FileName = \"/bin/chmod\",\n+                    Arguments = $\"+x {scriptPath}\",\n+                    RedirectStandardOutput = true,\n+                    RedirectStandardError = true,\n+                    UseShellExecute = false,\n+                    CreateNoWindow = true,\n+                },\n+            })\n+            {\n+                _ = process.Start();\n+                process.WaitForExit();\n+\n+                if (process.ExitCode != 0)\n+                {\n+                    string errors = process.StandardError.ReadToEnd() ?? string.Empty;\n+                    Log.LogError($\"Install-scripts can not be made executable due to the errors: {errors}.\");\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Runs the .NET Core installation script with the specified settings.\n+        /// </summary>\n+        /// <param name=\"executionSettings\">The settings required for script execution.</param>\n+        /// <returns>True if the script executed successfully; otherwise, false.</returns>\n+        private bool RunScript(ScriptExecutionSettings executionSettings)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- [ ] Update the requested SDK version for bootstrap folder (the `NetVersion` property in [BootStrapMsBuild.props](https://github.com/dotnet/msbuild/blob/main/eng/BootStrapMsBuild.props)) if a fresh sdk was released (released runtimes and associated sdk versions can be checked here - https://dotnet.microsoft.com/en-us/download/visual-studio-sdks - make sure to allways check the details of the appropriate targetted version of .NET for the matchin latest version of SDK).\r\n```",
              "createdAt": "2024-07-12T08:51:49Z",
              "path": "documentation/release-checklist.md",
              "diffHunk": "@@ -56,6 +56,7 @@ https://ceapex.visualstudio.com/CEINTL/_workitems/edit/957875 (DONE)\n - [ ] Get M2 or QB approval as necessary per the VS schedule\n - [ ]  Merge to VS (babysit the automatically generated VS insertion PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequests for the MSBuild commit noted in above step): {{URL_OF_VS_INSERTION}}\n - [ ] Update the PackageValidationBaselineVersion to the latest released version ({{THIS_RELEASE_VERSION}}.0) - this might require temporary addition of the [build artifacts feed](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) as the new version is not yet added to the official feeds (this is post release). This can trigger a high severity CG error (https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/how-to-securely-configure-package-source-files) - however it should be fine to keep this temporary feed untill the release.\n+- [ ] Update the requested SDK version for bootstrap folder if a fresh sdk was released in [NetVersion](https://github.com/dotnet/msbuild/blob/main/eng/BootStrapMsBuild.props).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I do not understand this condition.\r\n\r\nIf `Path.Combine(InstallDir, \"sdk\", Version)` exists, then `InstallDir` exists - hence the first check seems redundand.\r\n\r\nOn the other hand - if `InstallDir` exists - it doesn't mean that we already have required version of the sdk - why would we want to bail out early?",
              "createdAt": "2024-07-12T08:56:33Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs",
              "diffHunk": "@@ -0,0 +1,172 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Net.Http;\n+using System.Runtime.InteropServices;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+using AsyncTasks = System.Threading.Tasks;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    /// <summary>\n+    /// This task is designed to automate the installation of .NET Core SDK.\n+    /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.\n+    /// </summary>\n+    public sealed class InstallDotNetCoreTask : ToolTask\n+    {\n+        private const string ScriptName = \"dotnet-install\";\n+\n+        /// <summary>\n+        /// Initializes a new instance of the <see cref=\"InstallDotNetCoreTask\"/> class.\n+        /// </summary>\n+        public InstallDotNetCoreTask()\n+        {\n+            InstallDir = string.Empty;\n+            DotNetInstallScriptRootPath = string.Empty;\n+            Version = string.Empty;\n+        }\n+\n+        /// <summary>\n+        /// Gets or sets the directory where the .NET Core SDK should be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string InstallDir { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the root path where the .NET Core installation script is located. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string DotNetInstallScriptRootPath { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the version of the .NET Core SDK to be installed. This property is required.\n+        /// </summary>\n+        [Required]\n+        public string Version { get; set; }\n+\n+        /// <summary>\n+        /// Gets or sets the base URL for downloading the .NET Core installation script. The default value is \"https://dot.net/v1/\".\n+        /// </summary>\n+        public string DotNetInstallBaseUrl { get; set; } = \"https://dot.net/v1/\";\n+\n+        private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);\n+\n+        protected override string ToolName => IsWindows ? \"powershell.exe\" : \"/bin/bash\";\n+\n+        /// <summary>\n+        /// Executes the task, downloading and running the .NET Core installation script.\n+        /// </summary>\n+        /// <returns>True if the task succeeded; otherwise, false.</returns>\n+        public override bool Execute()\n+        {\n+            if (Directory.Exists(InstallDir) || Directory.Exists(Path.Combine(InstallDir, \"sdk\", Version)))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- [ ] Update the requested SDK version for bootstrap folder (the `NetVersion` property in [BootStrapMsBuild.props](https://github.com/dotnet/msbuild/blob/main/eng/BootStrapMsBuild.props)) and buildToolCommand/_InitializeBuildToolCommand values in cibuild_bootstrapped_msbuild scripts if a fresh sdk was released (released runtimes and associated sdk versions can be checked here - https://dotnet.microsoft.com/en-us/download/visual-studio-sdks - make sure to always check the details of the appropriate targeted version of .NET for the matching latest version of SDK).\r\n```",
              "createdAt": "2024-07-12T15:23:54Z",
              "path": "documentation/release-checklist.md",
              "diffHunk": "@@ -56,6 +56,7 @@ https://ceapex.visualstudio.com/CEINTL/_workitems/edit/957875 (DONE)\n - [ ] Get M2 or QB approval as necessary per the VS schedule\n - [ ]  Merge to VS (babysit the automatically generated VS insertion PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequests for the MSBuild commit noted in above step): {{URL_OF_VS_INSERTION}}\n - [ ] Update the PackageValidationBaselineVersion to the latest released version ({{THIS_RELEASE_VERSION}}.0) - this might require temporary addition of the [build artifacts feed](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) as the new version is not yet added to the official feeds (this is post release). This can trigger a high severity CG error (https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/how-to-securely-configure-package-source-files) - however it should be fine to keep this temporary feed untill the release.\n+- [ ] Update the requested SDK version for bootstrap folder (the `NetVersion` property in [BootStrapMsBuild.props](https://github.com/dotnet/msbuild/blob/main/eng/BootStrapMsBuild.props)) and buildToolCommand/_InitializeBuildToolCommand values in cibuild_bootstrapped_msbuild scripts if a fresh sdk was released (released runtimes and associated sdk versions can be checked here - https://dotnet.microsoft.com/en-us/download/visual-studio-sdks - make sure to allways check the details of the appropriate targetted version of .NET for the matchin latest version of SDK).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you call this something like `BootstrapSdkVersion` to be a bit more explicit?",
              "createdAt": "2024-07-12T15:26:31Z",
              "path": "eng/BootStrapMsBuild.props",
              "diffHunk": "@@ -1,20 +1,23 @@\n <Project>\n \n-  <!--\n-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n-   relying on bootstrapped MSBuild\n-   -->\n+  <!-- Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests relying on bootstrapped MSBuild -->\n+\n+  <PropertyGroup Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+    <NetVersion>8.0.302</NetVersion>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "And also I think defining it in `Versions.props` like @JanKrivanek mentioned is a good plan.",
              "createdAt": "2024-07-12T15:34:09Z",
              "path": "eng/BootStrapMsBuild.props",
              "diffHunk": "@@ -1,20 +1,23 @@\n <Project>\n \n-  <!--\n-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests\n-   relying on bootstrapped MSBuild\n-   -->\n+  <!-- Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests relying on bootstrapped MSBuild -->\n+\n+  <PropertyGroup Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+    <NetVersion>8.0.302</NetVersion>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we still need this?",
              "createdAt": "2024-07-12T15:35:41Z",
              "path": "src/UnitTests.Shared/BootstrapLocationAttribute.cs",
              "diffHunk": "@@ -6,8 +6,9 @@\n namespace Microsoft.Build.UnitTests.Shared;\n \n [System.AttributeUsage(System.AttributeTargets.Assembly)]\n-internal sealed class BootstrapLocationAttribute(string bootstrapMsbuildBinaryLocation)\n-    : System.Attribute\n+internal sealed class BootstrapLocationAttribute(string bootstrapMsBuildBinaryLocation, string netVersion) : System.Attribute\n {\n-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;\n+    public string BootstrapMsBuildBinaryLocation { get; } = bootstrapMsBuildBinaryLocation;\n+\n+    public string NetVersion { get; } = netVersion;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "yes, it's needed for e2e tests:\r\nhttps://github.com/dotnet/msbuild/blob/9610b1dbccccf29ce19fcd8e99dfd4b457af53c6/src/UnitTests.Shared/RunnerUtilities.cs#L69",
              "createdAt": "2024-07-18T13:02:33Z",
              "path": "src/UnitTests.Shared/BootstrapLocationAttribute.cs",
              "diffHunk": "@@ -6,8 +6,9 @@\n namespace Microsoft.Build.UnitTests.Shared;\n \n [System.AttributeUsage(System.AttributeTargets.Assembly)]\n-internal sealed class BootstrapLocationAttribute(string bootstrapMsbuildBinaryLocation)\n-    : System.Attribute\n+internal sealed class BootstrapLocationAttribute(string bootstrapMsBuildBinaryLocation, string netVersion) : System.Attribute\n {\n-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;\n+    public string BootstrapMsBuildBinaryLocation { get; } = bootstrapMsBuildBinaryLocation;\n+\n+    public string NetVersion { get; } = netVersion;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Hmm, I wonder if we should consider (in the future, AFTER this PR) changing that to be more of a standard `dotnet msbuild` invocation.",
              "createdAt": "2024-07-18T16:26:10Z",
              "path": "src/UnitTests.Shared/BootstrapLocationAttribute.cs",
              "diffHunk": "@@ -6,8 +6,9 @@\n namespace Microsoft.Build.UnitTests.Shared;\n \n [System.AttributeUsage(System.AttributeTargets.Assembly)]\n-internal sealed class BootstrapLocationAttribute(string bootstrapMsbuildBinaryLocation)\n-    : System.Attribute\n+internal sealed class BootstrapLocationAttribute(string bootstrapMsBuildBinaryLocation, string netVersion) : System.Attribute\n {\n-    public string BootstrapMsbuildBinaryLocation { get; } = bootstrapMsbuildBinaryLocation;\n+    public string BootstrapMsBuildBinaryLocation { get; } = bootstrapMsBuildBinaryLocation;\n+\n+    public string NetVersion { get; } = netVersion;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- [ ] Update the requested SDK version for bootstrap folder (the `BootstrapSdkVersion` property in [Versions.props](https://github.com/dotnet/msbuild/blob/main/eng/Versions.props)) and buildToolCommand/_InitializeBuildToolCommand values in cibuild_bootstrapped_msbuild scripts if a fresh sdk was released (released runtimes and associated sdk versions can be checked here - https://dotnet.microsoft.com/download/visual-studio-sdks - make sure to always check the details of the appropriate targeted version of .NET for the matching latest version of SDK).\r\n```",
              "createdAt": "2024-07-18T16:26:55Z",
              "path": "documentation/release-checklist.md",
              "diffHunk": "@@ -56,6 +56,7 @@ https://ceapex.visualstudio.com/CEINTL/_workitems/edit/957875 (DONE)\n - [ ] Get M2 or QB approval as necessary per the VS schedule\n - [ ]  Merge to VS (babysit the automatically generated VS insertion PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequests for the MSBuild commit noted in above step): {{URL_OF_VS_INSERTION}}\n - [ ] Update the PackageValidationBaselineVersion to the latest released version ({{THIS_RELEASE_VERSION}}.0) - this might require temporary addition of the [build artifacts feed](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) as the new version is not yet added to the official feeds (this is post release). This can trigger a high severity CG error (https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/how-to-securely-configure-package-source-files) - however it should be fine to keep this temporary feed untill the release.\n+- [ ] Update the requested SDK version for bootstrap folder (the `BootstrapSdkVersion` property in [Versions.props](https://github.com/dotnet/msbuild/blob/main/eng/Versions.props)) and buildToolCommand/_InitializeBuildToolCommand values in cibuild_bootstrapped_msbuild scripts if a fresh sdk was released (released runtimes and associated sdk versions can be checked here - https://dotnet.microsoft.com/en-us/download/visual-studio-sdks - make sure to always check the details of the appropriate targeted version of .NET for the matching latest version of SDK).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ah sorry I should have removed this too, it's not necessary now that we're on RoslynCodeTaskFactory.\r\n```suggestion\r\n```\r\n\r\n(looks like the other changes in this file are whitespace so you could entirely revert)",
              "createdAt": "2024-07-19T16:13:10Z",
              "path": "src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj",
              "diffHunk": "@@ -18,6 +18,7 @@\n     <ProjectReference Include=\"..\\Framework\\Microsoft.Build.Framework.csproj\" />\n     <ProjectReference Include=\"..\\Tasks\\Microsoft.Build.Tasks.csproj\" />\n     <ProjectReference Include=\"..\\Utilities\\Microsoft.Build.Utilities.csproj\" />\n+    <ProjectReference Include=\"..\\MSBuild.Bootstrap.Utils\\MSBuild.Bootstrap.Utils.csproj\" ReferenceOutputAssembly=\"false\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n     <!-- *.deps.json are excluded because the SDK rewrites these files for consistency with the rest of the SDK, so take their version. -->\r\n```",
              "createdAt": "2024-07-29T14:36:30Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -202,56 +202,40 @@\n            AlwaysCreate=\"true\" />\n   </Target>\n \n-  <Target Name=\"BootstrapNetCore\" DependsOnTargets=\"CleanBootstrapFolder\">\n+  <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->\n+  <UsingTask TaskName=\"InstallDotNetCoreTask\"\n+             AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\n+             TaskFactory=\"RoslynCodeTaskFactory\">\n+    <Task>\n+      <Code Source=\"$(MSBuildThisFileDirectory)..\\src\\MSBuild.Bootstrap.Utils\\Tasks\\InstallDotNetCoreTask.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n+  <Target Name=\"AcquireSdk\"\n+          BeforeTargets=\"PrepareForBuild\"\n+          Condition=\"!$(TargetFramework.StartsWith('net4'))\">\n+\n+    <PropertyGroup>\n+      <InstallDir>$(ArtifactsBinDir)bootstrap\\core\\</InstallDir>\n+    </PropertyGroup>\n+\n+    <InstallDotNetCoreTask DotNetInstallScriptRootPath=\"$(DotNetRoot)\" InstallDir=\"$(InstallDir)\" Version=\"$(BootstrapSdkVersion)\"/>\n+  </Target>\n \n-    <!-- Publish the project first.  The more obvious way to do this would be to depend on the Publish target,\n-         but that causes a target dependency cycle, even though it seems like AfterTargets=\"AfterBuild\" should\n-         probably not count as a link in the cycle. -->\n-    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"Publish\" BuildInParallel=\"$(BuildInParallel)\" />\n+  <Target Name=\"BootstrapNetCore\" DependsOnTargets=\"AcquireSdk\">\n \n     <ItemGroup>\n-      <!-- Copy all items from the publish folder to the bootstrap folder.  We might be able to just use the published\n-            version as the bootstrapped version, but the extra separation here seems like it could be valuable. -->\n-      <DeployedItems Include=\"$(PublishDir)\\**\\*.*\" />\n-\n-      <NuGetSdkResolverManifest Include= \"$(RepoRoot)src\\MSBuild\\SdkResolvers\\Standalone\\Microsoft.Build.NuGetSdkResolver.xml\" />\n-      <InstalledSdks Include=\"$(DOTNET_INSTALL_DIR)\\sdk\\$(DotNetCliVersion)\\Sdks\\**\\*.*\" />\n-      <InstalledExtensions Include=\"$(DOTNET_INSTALL_DIR)\\sdk\\$(DotNetCliVersion)\\Current\\**\\*.*\" Exclude=\"$(DOTNET_INSTALL_DIR)\\sdk\\$(DotNetCliVersion)\\Current\\Microsoft.Common.props\" />\n+     <!-- *.deps.json are excluded because they will cause the conflicts on an attempt to build solution with the bootstraped bits. -->",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}