{
  "number": 6308,
  "title": "Properly Consider WarningsAsMessages In TaskLoggingHelper's `HasLoggedErrors`",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6306\r\n\r\n### Context\r\nhttps://github.com/dotnet/msbuild/pull/6174 didn't properly account for warningsaserrors and warningsasmessages together. This PR makes each taskhost aware of both WarningsAsMessages and WarningsAsErrors when telling tasks whether or not an error should be treated as a warning.\r\n\r\n### Changes Made\r\nLoggingService and TaskLoggingContext expose a `GetWarningsAsMessages` to each taskhost for them to store.\r\nNo changes to IBE8 API\r\nTaskhosts first check if a warning would be treated as a message when telling tasks whether or not a warning should be treated as a warning.\r\n\r\n### Testing\r\nAdded test cases for WarningsAsMessages getting translated properly for the OOPTHN.\r\nAdded test cases for WarningsAsErrors and WarningsAsMessages for the same warning code.\r\nAdded test case for MSBuildTreatWarningsAsErrors and WarningsAsMessages on a logged warning (WAM takes priority)\r\n\r\n### Notes\r\nDoes `MSBuildTreatWarningsAsMessages` exist as a property a user can set?\r\nIf `WarningsAsMessages` is an empty set, does it follow the rules of `WarningsAsErrors`? (empty set = all warnings as errors) /cc: @jeffkl ",
  "state": "MERGED",
  "createdAt": "2021-03-29T01:04:24Z",
  "updatedAt": "2021-04-01T21:26:29Z",
  "closedAt": "2021-03-31T16:57:19Z",
  "mergedAt": "2021-03-31T16:57:19Z",
  "additions": 224,
  "deletions": 154,
  "changedFiles": 10,
  "headRefName": "fix-warnaserr",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1b8e74842fc310e716bea2a34356303c40fc6af4",
          "message": "Pass warningsasmessages to the taskhost. Add GetWarningsAsMessages to the logging service and taskloggingcontext",
          "committedDate": "2021-03-29T00:31:31Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2de8f7eaa61ff1308f059e574a3a891868360d0",
          "message": "Pass warningsasmessages to OOPTHN",
          "committedDate": "2021-03-29T00:40:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "949f23967609b61c5711a309c4cfb81499c16187",
          "message": "Add test for warningsasmessages serialization. Code consistenty between OOPTHN and TH",
          "committedDate": "2021-03-29T00:46:05Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "810a85b297d6d0ac9da92de92b437f16c2d173ed",
          "message": "Add test cases for warnaserr and warnasmessage",
          "committedDate": "2021-03-29T00:58:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d44724085223a72dc158f10aa946d476054f5e8",
          "message": "PR Feedback: Simplify GetWarningsAsMessages and Errors",
          "committedDate": "2021-03-29T23:09:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "055970720b25fa850106ba95745bb4a79bf35df3",
          "message": "Streamline tests, remove unnecessary test",
          "committedDate": "2021-03-30T00:09:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b6356c4c2c8df153ef003b02822f8b14147d0cb",
          "message": "Fix taskreturnstrue tests",
          "committedDate": "2021-03-30T18:45:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e36efd4f0d1e9f7b96c3aa5a8f110df9d4049ef",
          "message": "PR Feedback: Code cleanup. Pass IEqualityComparer under CLR2",
          "committedDate": "2021-03-30T19:35:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Not sure what this test case is and why it's failing: `OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk`. Rerunning.",
        "createdAt": "2021-03-31T16:07:27Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This could be simplified a good bit. Also, if they're both null, we should return null and not an empty HashSet, right? Otherwise, we'd be indicating that all warnings should be counted as errors. I'd recommend something similar below. Also, since they're essentially the same method, it seems a lot easier to make them one method and call it with slightly different parameters. (You don't have to change the public API for that, since you can make the heart of the implementation private.)\r\n```suggestion\r\n            ISet<string> warningsAsErrors = null;\r\n            if (_warningsAsErrorsByProject is not null && _warningsAsErrorsByProject.TryGetValue(key, out warningsAsErrors)\r\n            {\r\n                    if (WarningsAsErrors is not null)\r\n                    {\r\n                            warningsAsErrors.UnionWith(WarningsAsErrors);\r\n                    }\r\n                    return warningsAsErrors;\r\n            }\r\n            else\r\n            {\r\n                    return WarningsAsErrors;\r\n            }\r\n```",
              "createdAt": "2021-03-29T19:40:27Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -521,43 +521,64 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n \n         /// <summary>\n         /// Returns a hashset of warnings to be logged as errors for the specified build context.\n-        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n-        ///\n-        /// If all warnings to be treated as errors should also be treated as messages, return null.\n-        /// This is to avoid all warnings being treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n         /// </summary>\n         /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n         /// <returns>\n-        /// An empty set if all warnings should be treated as errors.\n-        /// A set containing warning codes to be logged as errors.\n-        /// Null if no warnings should be treated as errors.\n         /// </returns>\n-        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        public ICollection<string> GetWarningsAsErrors(BuildEventContext context)\n         {\n-            if (_warningsAsErrorsByProject == null)\n+            int key = GetWarningsAsErrorOrMessageKey(context);\n+\n+            // If there is definitely nothing to convert into an error, return early.\n+            if (WarningsAsErrors == null && (_warningsAsErrorsByProject == null || !_warningsAsErrorsByProject.ContainsKey(key)))\n             {\n                 return null;\n             }\n \n+            HashSet<string> allWarningsAsErrors = new HashSet<string>();\n+\n+            if (WarningsAsErrors != null)\n+            {\n+                allWarningsAsErrors.UnionWith(WarningsAsErrors);\n+            }\n+\n+            if (_warningsAsErrorsByProject != null)\n+            {\n+                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))\n+                {\n+                    allWarningsAsErrors.UnionWith(warningsAsErrors);\n+                }\n+            }\n+\n+            return allWarningsAsErrors;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "If they're both null they'll return through the first if statement. I do like your suggested change though, less to sift through.",
              "createdAt": "2021-03-29T23:11:53Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -521,43 +521,64 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n \n         /// <summary>\n         /// Returns a hashset of warnings to be logged as errors for the specified build context.\n-        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n-        ///\n-        /// If all warnings to be treated as errors should also be treated as messages, return null.\n-        /// This is to avoid all warnings being treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n         /// </summary>\n         /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n         /// <returns>\n-        /// An empty set if all warnings should be treated as errors.\n-        /// A set containing warning codes to be logged as errors.\n-        /// Null if no warnings should be treated as errors.\n         /// </returns>\n-        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        public ICollection<string> GetWarningsAsErrors(BuildEventContext context)\n         {\n-            if (_warningsAsErrorsByProject == null)\n+            int key = GetWarningsAsErrorOrMessageKey(context);\n+\n+            // If there is definitely nothing to convert into an error, return early.\n+            if (WarningsAsErrors == null && (_warningsAsErrorsByProject == null || !_warningsAsErrorsByProject.ContainsKey(key)))\n             {\n                 return null;\n             }\n \n+            HashSet<string> allWarningsAsErrors = new HashSet<string>();\n+\n+            if (WarningsAsErrors != null)\n+            {\n+                allWarningsAsErrors.UnionWith(WarningsAsErrors);\n+            }\n+\n+            if (_warningsAsErrorsByProject != null)\n+            {\n+                if (_warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))\n+                {\n+                    allWarningsAsErrors.UnionWith(warningsAsErrors);\n+                }\n+            }\n+\n+            return allWarningsAsErrors;",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't normally look critically at tests, but please make sure your tests are substantially different from each other. I diffed your first and third tests with the second one, and they differed by one and two lines respectively. That could trivially become a theory and cut out almost a hundred lines of code.",
              "createdAt": "2021-03-29T19:52:48Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -315,6 +315,116 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopAndFai\n             }\n         }\n \n+        [Fact]\n+        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_WarningIsAlsoMessage_BuildShouldContinue()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Fair point. Streamlined the tests, also realized the two batched builds test were covering the same scenario. Removed one of them.",
              "createdAt": "2021-03-30T00:10:12Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -315,6 +315,116 @@ public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_BuildShouldStopAndFai\n             }\n         }\n \n+        [Fact]\n+        public void TaskReturnsHasLoggedErrorAndLogsWarningAsError_WarningIsAlsoMessage_BuildShouldContinue()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Extra empty line.",
              "createdAt": "2021-03-30T12:39:41Z",
              "path": "src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs",
              "diffHunk": "@@ -578,6 +597,51 @@ public void TestTranslationWithWarningsAsErrors()\n \n         }\n \n+        /// <summary>\n+        /// Test serialization / deserialization when the parameter dictionary contains warningsasmessages\n+        /// </summary>\n+        [Fact]\n+        public void TestTranslationWithWarningsAsMessages()\n+        {\n+            HashSet<string> WarningsAsMessages = new HashSet<string>();\n+            WarningsAsMessages.Add(\"MSB1234\");\n+            WarningsAsMessages.Add(\"MSB1235\");\n+            WarningsAsMessages.Add(\"MSB1236\");\n+            WarningsAsMessages.Add(\"MSB1237\");\n+            TaskHostConfiguration config = new TaskHostConfiguration(\n+                nodeId: 1,\n+                startupDirectory: Directory.GetCurrentDirectory(),\n+                buildProcessEnvironment: null,\n+                culture: Thread.CurrentThread.CurrentCulture,\n+                uiCulture: Thread.CurrentThread.CurrentUICulture,\n+#if FEATURE_APPDOMAIN\n+                appDomainSetup:\n+#if FEATURE_APPDOMAIN\n+                null,\n+#endif\n+                lineNumberOfTask:\n+#endif\n+                1,\n+                columnNumberOfTask: 1,\n+                projectFileOfTask: @\"c:\\my project\\myproj.proj\",\n+                continueOnError: _continueOnErrorDefault,\n+                taskName: \"TaskName\",\n+                taskLocation: @\"c:\\MyTasks\\MyTask.dll\",\n+                taskParameters: null,\n+                globalParameters: null,\n+                warningsAsErrors: null,\n+                warningsAsMessages: WarningsAsMessages);\n+\n+            ((ITranslatable)config).Translate(TranslationHelpers.GetWriteTranslator());\n+            INodePacket packet = TaskHostConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());\n+\n+            TaskHostConfiguration deserializedConfig = packet as TaskHostConfiguration;\n+\n+            Assert.NotNull(deserializedConfig.WarningsAsMessages);\n+            config.WarningsAsMessages.SequenceEqual(deserializedConfig.WarningsAsMessages, StringComparer.Ordinal).ShouldBeTrue();\n+",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit:\r\n\r\n```suggestion\r\n            if (WarningsAsErrors == null || WarningsAsMessages?.Contains(warningCode) == true)\r\n```",
              "createdAt": "2021-03-30T12:46:38Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -697,14 +697,35 @@ private ICollection<string> WarningsAsErrors\n             }\n         }\n \n+        private ICollection<string> _warningsAsMessages;\n+\n+        /// <summary>\n+        /// Contains all warnings that should be logged as errors.\n+        /// Non-null empty set when all warnings should be treated as errors.\n+        /// </summary>\n+        private ICollection<string> WarningsAsMessages\n+        {\n+            get\n+            {\n+                // Test compatibility\n+                if (_taskLoggingContext == null)\n+                {\n+                    return null;\n+                }\n+\n+                return _warningsAsMessages ??= _taskLoggingContext.GetWarningsAsMessages();\n+            }\n+        }\n+\n         /// <summary>\n         /// Determines if the given warning should be treated as an error.\n         /// </summary>\n         /// <param name=\"warningCode\"></param>\n-        /// <returns>True if WarningsAsErrors is an empty set or contains the given warning code.</returns>\n+        /// <returns>True if the warning should not be treated as a message and WarningsAsErrors is an empty set or contains the given warning code.</returns>\n         public bool ShouldTreatWarningAsError(string warningCode)\n         {\n-            if (WarningsAsErrors == null)\n+            // Warnings as messages overrides warnings as errors.\n+            if (WarningsAsErrors == null || (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode)))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Also, does empty `WarningsAsMessages` mean that all warnings should be treated as messages or does only `WarningsAsErrors` have this behavior?",
              "createdAt": "2021-03-30T12:48:36Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -697,14 +697,35 @@ private ICollection<string> WarningsAsErrors\n             }\n         }\n \n+        private ICollection<string> _warningsAsMessages;\n+\n+        /// <summary>\n+        /// Contains all warnings that should be logged as errors.\n+        /// Non-null empty set when all warnings should be treated as errors.\n+        /// </summary>\n+        private ICollection<string> WarningsAsMessages\n+        {\n+            get\n+            {\n+                // Test compatibility\n+                if (_taskLoggingContext == null)\n+                {\n+                    return null;\n+                }\n+\n+                return _warningsAsMessages ??= _taskLoggingContext.GetWarningsAsMessages();\n+            }\n+        }\n+\n         /// <summary>\n         /// Determines if the given warning should be treated as an error.\n         /// </summary>\n         /// <param name=\"warningCode\"></param>\n-        /// <returns>True if WarningsAsErrors is an empty set or contains the given warning code.</returns>\n+        /// <returns>True if the warning should not be treated as a message and WarningsAsErrors is an empty set or contains the given warning code.</returns>\n         public bool ShouldTreatWarningAsError(string warningCode)\n         {\n-            if (WarningsAsErrors == null)\n+            // Warnings as messages overrides warnings as errors.\n+            if (WarningsAsErrors == null || (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode)))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Great question, I had the same when doing this PR. It doesn't look like it. `ShouldTreatWarningAsError` has this check:\r\n```c#\r\n            if (WarningsAsErrors != null)\r\n            {\r\n                // Global warnings as errors apply to all projects.  If the list is empty or contains the code, the warning should be treated as an error\r\n                //\r\n                if (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningEvent.Code))\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n```\r\n\r\nwhereas `ShouldTreatWarningAsMessage` checks like so:\r\n\r\n```c#\r\n            // This only applies if the user specified /nowarn at the command-line or added the warning code through the object model\r\n            //\r\n            if (WarningsAsMessages?.Contains(warningEvent.Code) == true)\r\n            {\r\n                return true;\r\n            }\r\n```\r\n\r\nThere's no check for the count being zero, so I don't think that rule applies.",
              "createdAt": "2021-03-30T18:50:57Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -697,14 +697,35 @@ private ICollection<string> WarningsAsErrors\n             }\n         }\n \n+        private ICollection<string> _warningsAsMessages;\n+\n+        /// <summary>\n+        /// Contains all warnings that should be logged as errors.\n+        /// Non-null empty set when all warnings should be treated as errors.\n+        /// </summary>\n+        private ICollection<string> WarningsAsMessages\n+        {\n+            get\n+            {\n+                // Test compatibility\n+                if (_taskLoggingContext == null)\n+                {\n+                    return null;\n+                }\n+\n+                return _warningsAsMessages ??= _taskLoggingContext.GetWarningsAsMessages();\n+            }\n+        }\n+\n         /// <summary>\n         /// Determines if the given warning should be treated as an error.\n         /// </summary>\n         /// <param name=\"warningCode\"></param>\n-        /// <returns>True if WarningsAsErrors is an empty set or contains the given warning code.</returns>\n+        /// <returns>True if the warning should not be treated as a message and WarningsAsErrors is an empty set or contains the given warning code.</returns>\n         public bool ShouldTreatWarningAsError(string warningCode)\n         {\n-            if (WarningsAsErrors == null)\n+            // Warnings as messages overrides warnings as errors.\n+            if (WarningsAsErrors == null || (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode)))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (WarningsAsErrors == null || WarningsAsMessages?.Contains(warningCode) == true)\r\n```",
              "createdAt": "2021-03-30T12:49:33Z",
              "path": "src/MSBuild/OutOfProcTaskHostNode.cs",
              "diffHunk": "@@ -275,9 +275,17 @@ public bool IsRunningMultipleNodes\n         /// </summary>\n         private ICollection<string> WarningsAsErrors { get; set; }\n \n+        private ICollection<string> WarningsAsMessages { get; set; }\n+\n         public bool ShouldTreatWarningAsError(string warningCode)\n         {\n-            return WarningsAsErrors != null && (WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode));\n+            // Warnings as messages overrides warnings as errors.\n+            if (WarningsAsErrors == null || (WarningsAsMessages != null && WarningsAsMessages.Contains(warningCode)))",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I see that this is the same as `_warningsAsErrors` a few lines above but I'm wondering if we shouldn't be constructing with `StringComparer.OrdinalIgnoreCase` on CLR2 as well. The constructor taking both capacity and comparer was introduced later but the one taking `IEqualityComparer<T>` should be available.",
              "createdAt": "2021-03-30T12:53:46Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -385,6 +400,13 @@ public void Translate(ITranslator translator)\n                                  collectionFactory: count => new HashSet<string>());\n #else\n                                  collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));\n+#endif\n+            translator.Translate(collection: ref _warningsAsMessages,\n+                                 objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),\n+#if CLR2COMPATIBILITY\n+                                 collectionFactory: count => new HashSet<string>());",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd still prefer for this method and the next to just call HelperMethodName(context, _warningsAsErrorsByProject, WarningsAsErrors) or the equivalent and have HelperMethodName include the real logic, but that's a little nit.",
              "createdAt": "2021-03-30T15:16:20Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -521,43 +521,46 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n \n         /// <summary>\n         /// Returns a hashset of warnings to be logged as errors for the specified build context.\n-        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n-        ///\n-        /// If all warnings to be treated as errors should also be treated as messages, return null.\n-        /// This is to avoid all warnings being treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n         /// </summary>\n         /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n         /// <returns>\n-        /// An empty set if all warnings should be treated as errors.\n-        /// A set containing warning codes to be logged as errors.\n-        /// Null if no warnings should be treated as errors.\n         /// </returns>\n-        public ICollection<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        public ICollection<string> GetWarningsAsErrors(BuildEventContext context)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}