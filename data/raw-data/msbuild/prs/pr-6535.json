{
  "number": 6535,
  "title": "Console logger support for IncludeEvaluationPropertiesAndItems",
  "body": "This PR supersedes https://github.com/dotnet/msbuild/pull/6514\r\n\r\nConsole logger support for IncludeEvaluationPropertiesAndItems.\r\n\r\nIncludes https://github.com/dotnet/msbuild/pull/6520, but we can take this commit out if it's merged separately.\r\n\r\nOutputItems was pretty much duplicated in ParallelConsoleLogger. Unify with the base implementation and extract methods that need to be replaced by the derived type.\r\n\r\nSupport for reading project configuration description either from ProjectStartedEventArgs.Items or ProjectEvaluationFinishedEventArgs.Items.\r\n\r\nSkip TestItemsWithUnexpandableMetadata. Issue https://github.com/dotnet/msbuild/issues/6518 is tracking. More work is needed to understand the desired behavior of the system under test and then fix the test to test the desired behavior.\r\n\r\nSkip NullMetadataOnLegacyOutputItems_InlineTask. The feature the test is testing is broken, but the test passes because it doesn't specify diag verbosity for its logger. We will only log task outputs with diag verbosity. Issue https://github.com/dotnet/msbuild/issues/6521 is tracking.\r\n\r\nOpt test out of LogPropertiesAndItemsAfterEvaluation. OutOfProcNodeForwardCertainproperties is explicitly testing a feature where only some properties are forwarded from a different process on ProjectStartedEventArgs. When we move properties to ProjectEvaluationFinished the test loses meaning. So force it into the old behavior via an escape hatch.",
  "state": "MERGED",
  "createdAt": "2021-06-08T02:35:11Z",
  "updatedAt": "2021-07-01T02:07:30Z",
  "closedAt": "2021-06-30T17:16:03Z",
  "mergedAt": "2021-06-30T17:16:03Z",
  "additions": 123,
  "deletions": 80,
  "changedFiles": 5,
  "headRefName": "dev/kirillo/loggers",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "702dfb503b3b83550dd21c22debd94a60d71168d",
          "message": "Opt test out of LogPropertiesAndItemsAfterEvaluation\n\nOutOfProcNodeForwardCertainproperties is explicitly testing a feature where only some properties are forwarded from a different process on ProjectStartedEventArgs. When we move properties to ProjectEvaluationFinished the test loses meaning. So force it into the old behavior via an escape hatch.",
          "committedDate": "2021-06-15T22:21:38Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55be3a53a2db5a07c460ebad6909d5504bad2526",
          "message": "Skip NullMetadataOnLegacyOutputItems_InlineTask\n\nThe feature the test is testing is broken, but the test passes because it doesn't specify diag verbosity for its logger.\n\nWe will only log task outputs with diag verbosity.\n\nIssue https://github.com/dotnet/msbuild/issues/6521 is tracking.",
          "committedDate": "2021-06-15T22:21:38Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "264a7973123c8ba3f3b49f68e665a35b8d2f6795",
          "message": "Skip TestItemsWithUnexpandableMetadata\n\nIssue https://github.com/dotnet/msbuild/issues/6518 is tracking.\n\nMore work is needed to understand the desired behavior of the system under test and then fix the test to test the desired behavior.",
          "committedDate": "2021-06-15T22:21:38Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c813836965698273fd90fa4ddc7a6068fe7db4d9",
          "message": "Console logger support for IncludeEvaluationPropertiesAndItems\n\nCall IEventSource4.IncludeEvaluationPropertiesAndItems()\n\nOutputItems was pretty much duplicated in ParallelConsoleLogger. Unify with the base implementation and extract methods that need to be replaced by the derived type.\n\nSupport for reading project configuration description either from ProjectStartedEventArgs.Items or ProjectEvaluationFinishedEventArgs.Items.",
          "committedDate": "2021-06-15T22:21:38Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "It's actually a reasonable thought. I don't see why it would be bad, perhaps it's worth implementing.\r\n\r\nRemember though you'll only get the properties and items on ProjectStarted in the central node, since they are not serialized across. But it would achieve backwards compatibility (parity with what it used to be). Perhaps I should have built it this way to begin with!\r\n\r\nThe other question is combined with the other workarounds we've built, is it necessary anymore?",
        "createdAt": "2021-06-21T21:34:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "One thing that comes to mind is populating properties and items on ProjectStarted would decrease performance and increase allocations (since we would be walking the expensive data structures and copy-on-writing). So we'd lose some of those hard-won perf wins that we so tightly optimized.",
        "createdAt": "2021-06-21T21:35:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it possible for it to still be null here?",
              "createdAt": "2021-06-08T15:23:34Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "sorry what? the nullable? no, it will be assigned to a boolean on line 523, but that doesn't convince the compiler, so I had to add `?? false` to convert the `bool?` to `bool`",
              "createdAt": "2021-06-10T19:38:51Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Ok, glad I wasn't missing something. You should be able to just add `!` instead.",
              "createdAt": "2021-06-10T19:53:30Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, I don't think the bang will work to convert bool? to bool:\r\nhttps://sharplab.io/#v2:C4LghgzsA0AmIGoA+ABATARgLACgUGYACdQgYUIG9dCbiiUAWQgWQAoBKS62ngIwHt+AGwD8hXoQC8hAHYBXIUIDc3HjQHDxaKeMIixAMzBCIAUxU41tDUPFFpvAIQWeAX1yugA=",
              "createdAt": "2021-06-11T17:06:39Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "`<confusion>`\r\nI thought that was exactly what the bang was supposed to do. Ah, well.",
              "createdAt": "2021-06-11T17:55:31Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "ah, I see :) The bang is used to force Nullable Reference Types (the new hotness), but ?? x is used to convert a nullable Value Type to the underlying value type. Nullable value types (Nullable<T>) was introduced way back in C# 2 in 2005",
              "createdAt": "2021-06-11T18:30:39Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);\n+                }\n+\n+                return _includeEvaluationPropertiesAndItems ?? false;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't like the old way of doing this at all! Thanks for improving it :)",
              "createdAt": "2021-06-08T17:23:36Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "yes, it was completely unnecessary to do it inside the loop",
              "createdAt": "2021-06-10T19:39:11Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks cleaner, but I'd curious about whether you can inline this to avoid allocating an IEnumerable. Probably not because of the null unless you wanted it really messy.\r\n\r\nAlso, do you need to unescape the value?",
              "createdAt": "2021-06-08T17:31:17Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;\n-            setColor(ConsoleColor.DarkGray);\n-            foreach (ITaskItem item in itemTypeList)\n+            WriteItemType(itemType);\n+\n+            foreach (var item in itemTypeList)\n             {\n-                if (!haveWrittenItemType)\n+                string itemSpec = item switch\n                 {\n-                    setColor(ConsoleColor.Gray);\n-                    WriteLinePretty(itemType);\n-                    haveWrittenItemType = true;\n-                    setColor(ConsoleColor.DarkGray);\n-                }\n-                WriteLinePretty(\"    \"  /* indent slightly*/ + item.ItemSpec);\n+                    ITaskItem taskItem => taskItem.ItemSpec,\n+                    IItem iitem => iitem.EvaluatedInclude,\n+                    { } misc => Convert.ToString(misc),\n+                    null => \"null\"\n+                };\n \n-                IDictionary metadata = item.CloneCustomMetadata();\n+                WriteItemSpec(itemSpec);\n \n-                foreach (DictionaryEntry metadatum in metadata)\n+                var metadata = item switch\n                 {\n-                    string valueOrError;\n-                    try\n-                    {\n-                        valueOrError = item.GetMetadata(metadatum.Key as string);\n-                    }\n-                    catch (InvalidProjectFileException e)\n+                    IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),\n+                    IItem<ProjectMetadata> iitem => iitem.Metadata?.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "not sure about inlining\r\n\r\ngood question about unescaping, need to see whether the values on iitem.Metadata are already unescaped...",
              "createdAt": "2021-06-10T19:40:11Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;\n-            setColor(ConsoleColor.DarkGray);\n-            foreach (ITaskItem item in itemTypeList)\n+            WriteItemType(itemType);\n+\n+            foreach (var item in itemTypeList)\n             {\n-                if (!haveWrittenItemType)\n+                string itemSpec = item switch\n                 {\n-                    setColor(ConsoleColor.Gray);\n-                    WriteLinePretty(itemType);\n-                    haveWrittenItemType = true;\n-                    setColor(ConsoleColor.DarkGray);\n-                }\n-                WriteLinePretty(\"    \"  /* indent slightly*/ + item.ItemSpec);\n+                    ITaskItem taskItem => taskItem.ItemSpec,\n+                    IItem iitem => iitem.EvaluatedInclude,\n+                    { } misc => Convert.ToString(misc),\n+                    null => \"null\"\n+                };\n \n-                IDictionary metadata = item.CloneCustomMetadata();\n+                WriteItemSpec(itemSpec);\n \n-                foreach (DictionaryEntry metadatum in metadata)\n+                var metadata = item switch\n                 {\n-                    string valueOrError;\n-                    try\n-                    {\n-                        valueOrError = item.GetMetadata(metadatum.Key as string);\n-                    }\n-                    catch (InvalidProjectFileException e)\n+                    IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),\n+                    IItem<ProjectMetadata> iitem => iitem.Metadata?.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just to check\u2014this will not allocate the string of spaces every time, right?",
              "createdAt": "2021-06-08T17:34:18Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;\n-            setColor(ConsoleColor.DarkGray);\n-            foreach (ITaskItem item in itemTypeList)\n+            WriteItemType(itemType);\n+\n+            foreach (var item in itemTypeList)\n             {\n-                if (!haveWrittenItemType)\n+                string itemSpec = item switch\n                 {\n-                    setColor(ConsoleColor.Gray);\n-                    WriteLinePretty(itemType);\n-                    haveWrittenItemType = true;\n-                    setColor(ConsoleColor.DarkGray);\n-                }\n-                WriteLinePretty(\"    \"  /* indent slightly*/ + item.ItemSpec);\n+                    ITaskItem taskItem => taskItem.ItemSpec,\n+                    IItem iitem => iitem.EvaluatedInclude,\n+                    { } misc => Convert.ToString(misc),\n+                    null => \"null\"\n+                };\n \n-                IDictionary metadata = item.CloneCustomMetadata();\n+                WriteItemSpec(itemSpec);\n \n-                foreach (DictionaryEntry metadatum in metadata)\n+                var metadata = item switch\n                 {\n-                    string valueOrError;\n-                    try\n-                    {\n-                        valueOrError = item.GetMetadata(metadatum.Key as string);\n-                    }\n-                    catch (InvalidProjectFileException e)\n+                    IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),\n+                    IItem<ProjectMetadata> iitem => iitem.Metadata?.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),\n+                    _ => null\n+                };\n+\n+                if (metadata != null)\n+                {\n+                    foreach (var metadatum in metadata)\n                     {\n-                        valueOrError = e.Message;\n+                        WriteMetadata(metadatum.Key, metadatum.Value);\n                     }\n-\n-                    // A metadatum's \"value\" is its escaped value, since that's how we represent them internally.\n-                    // So unescape before returning to the world at large.\n-                    WriteLinePretty(\"        \" + metadatum.Key + \" = \" + valueOrError);\n                 }\n             }\n+\n             resetColor();\n         }\n \n+        protected virtual void WriteItemType(string itemType)\n+        {\n+            setColor(ConsoleColor.Gray);\n+            WriteLinePretty(itemType);\n+            setColor(ConsoleColor.DarkGray);\n+        }\n+\n+        protected virtual void WriteItemSpec(string itemSpec)\n+        {\n+            WriteLinePretty(\"    \" + itemSpec);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "it won't allocate the string literal, but it will allocate the string for the concatenated total, and it's terrible.\r\n\r\nFortunately we may have an intern this summer who may help look into rewriting the console loggers to avoid allocations.",
              "createdAt": "2021-06-10T19:41:13Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,42 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;\n-            setColor(ConsoleColor.DarkGray);\n-            foreach (ITaskItem item in itemTypeList)\n+            WriteItemType(itemType);\n+\n+            foreach (var item in itemTypeList)\n             {\n-                if (!haveWrittenItemType)\n+                string itemSpec = item switch\n                 {\n-                    setColor(ConsoleColor.Gray);\n-                    WriteLinePretty(itemType);\n-                    haveWrittenItemType = true;\n-                    setColor(ConsoleColor.DarkGray);\n-                }\n-                WriteLinePretty(\"    \"  /* indent slightly*/ + item.ItemSpec);\n+                    ITaskItem taskItem => taskItem.ItemSpec,\n+                    IItem iitem => iitem.EvaluatedInclude,\n+                    { } misc => Convert.ToString(misc),\n+                    null => \"null\"\n+                };\n \n-                IDictionary metadata = item.CloneCustomMetadata();\n+                WriteItemSpec(itemSpec);\n \n-                foreach (DictionaryEntry metadatum in metadata)\n+                var metadata = item switch\n                 {\n-                    string valueOrError;\n-                    try\n-                    {\n-                        valueOrError = item.GetMetadata(metadatum.Key as string);\n-                    }\n-                    catch (InvalidProjectFileException e)\n+                    IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),\n+                    IItem<ProjectMetadata> iitem => iitem.Metadata?.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),\n+                    _ => null\n+                };\n+\n+                if (metadata != null)\n+                {\n+                    foreach (var metadatum in metadata)\n                     {\n-                        valueOrError = e.Message;\n+                        WriteMetadata(metadatum.Key, metadatum.Value);\n                     }\n-\n-                    // A metadatum's \"value\" is its escaped value, since that's how we represent them internally.\n-                    // So unescape before returning to the world at large.\n-                    WriteLinePretty(\"        \" + metadatum.Key + \" = \" + valueOrError);\n                 }\n             }\n+\n             resetColor();\n         }\n \n+        protected virtual void WriteItemType(string itemType)\n+        {\n+            setColor(ConsoleColor.Gray);\n+            WriteLinePretty(itemType);\n+            setColor(ConsoleColor.DarkGray);\n+        }\n+\n+        protected virtual void WriteItemSpec(string itemSpec)\n+        {\n+            WriteLinePretty(\"    \" + itemSpec);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can e.BuildEventContext be null here?",
              "createdAt": "2021-06-10T19:22:57Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -540,20 +540,38 @@ public override void ProjectStartedHandler(object sender, ProjectStartedEventArg\n                 }\n             }\n \n-            ReadProjectConfigurationDescription(e.BuildEventContext, e.Items);\n+            var projectKey = (e.BuildEventContext.NodeId, e.BuildEventContext.ProjectContextId);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, BuildEventContext should always be set",
              "createdAt": "2021-06-10T19:42:46Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs",
              "diffHunk": "@@ -540,20 +540,38 @@ public override void ProjectStartedHandler(object sender, ProjectStartedEventArg\n                 }\n             }\n \n-            ReadProjectConfigurationDescription(e.BuildEventContext, e.Items);\n+            var projectKey = (e.BuildEventContext.NodeId, e.BuildEventContext.ProjectContextId);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}