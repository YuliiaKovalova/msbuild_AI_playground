{
  "number": 7869,
  "title": "Accept `TaskOutput` when filtering events for EmbedInBinlog",
  "body": "Before we only interpreted plain AddItem messages as directives for file embedding.\r\n\r\nResolves #7665\r\n\r\n### Changes Made\r\n\r\nAdded TaskParameterEvents with kind `TaskOutput` to the event filter for embedding files.\r\n\r\n### Testing\r\n\r\nI started out writing tests to catch a dedicated _FileImported_, because i thought the file was embedded as a payload inside a BuildEvent somehow, but if i get this correctly the archive is just a secondary payload to the binlog - meant for readers to use as a dictionary to look for files without any guarantees that files are actually there.\r\nI'm not actually digging inside the _.binlog_ file, but i found reading the external _*.ProjectImports.zip_ to be an acceptable alternative to get at least some coverage regarding EmbedInBinlog resulting in embedded files.",
  "state": "MERGED",
  "createdAt": "2022-08-08T22:08:59Z",
  "updatedAt": "2022-08-17T15:10:53Z",
  "closedAt": "2022-08-16T17:45:34Z",
  "mergedAt": "2022-08-16T17:45:34Z",
  "additions": 31,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "wip/fix-EmbedInBinlog-for-taskoutputs",
  "isDraft": false,
  "author": {
    "login": "MeikTranel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7c1418ee84ac8564f60fb0e8fce65e3e7dd311e5",
          "message": "Accept `TaskParameterMessageKind.TaskOutput` when filtering events for EmbedInBinlog\n\nBefore we only interpreted plain AddItem messages as directives for file embedding.\n\nResolves #7665",
          "committedDate": "2022-08-09T19:32:04Z",
          "author": {
            "name": "Meik Tranel",
            "email": "tranelmeik@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "77ca389e2052101240a7d8a25e42ca154cab86f2",
          "message": "Assert via EndsWith to mitigate against *.ProjectImports.zip produced on Unix filesystems",
          "committedDate": "2022-08-09T21:48:59Z",
          "author": {
            "name": "Meik Tranel",
            "email": "tranelmeik@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f51150de8222572e3c0a9ead883d2c5168989654",
          "message": "Short circuit on first matching kind in embed filter to improve performance\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-08-15T15:54:33Z",
          "author": {
            "name": "Meik Tranel",
            "email": "tranelmeik@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I can just drop the explicit path - that fixes building on both windows and linux.\r\nMore importantly now that the feature itself works - i just tested via WSL and it fails on the zip assertion because the `Name` is the full path instead of just the file name + extension. So i'm asking myself here - is this normal behavior with the internal `ZipArchive` on linux/debian/wsl ?\r\n![image](https://user-images.githubusercontent.com/6466560/183744561-8b51c8c0-e66d-4b20-be22-5d9afdbc3178.png)\r\n![image](https://user-images.githubusercontent.com/6466560/183744828-f5716377-407d-4d13-8938-d3e23b51b7ff.png)\r\n\r\n",
        "createdAt": "2022-08-09T19:29:28Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "I looked at [documentation for ZipArchive](https://docs.microsoft.com/dotnet/api/system.io.compression.ziparchiveentry.name?view=net-6.0).\r\n\r\nIt explicitly states that it looks after the last path separator character (\\\\). I'm guessing it hasn't been made unix-friendly and doesn't realize that there are other slashes \ud83d\ude04",
        "createdAt": "2022-08-09T21:24:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Oh my lord - \ud83d\ude02\ud83d\ude02 - well imma have to work around that now \ud83e\udd73\ud83e\udd73 i guess `.EndsWith` works.\r\n\r\n@KirillOsenkov i assume this doesn't show up on your end because you are working with the fully qualified path anyways?",
        "createdAt": "2022-08-09T21:39:19Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "Thanks for the contribution!",
        "createdAt": "2022-08-16T17:45:51Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I imagine these slashes don't work on windows?",
              "createdAt": "2022-08-08T22:36:33Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -138,6 +140,31 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n+        [Fact]\n+        public void BinaryLoggerShouldEmbedFilesViaTaskOutput()\n+        {\n+            using var buildManager = new BuildManager();\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={_logFile}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+            var testProject = @\"\n+<Project>\n+    <Target Name=\"\"Build\"\">\n+        <WriteLinesToFile File=\"\"./testtaskoutputfile.txt\"\" Lines=\"\"abc;def;ghi\"\"/>\n+        <CreateItem Include=\"\"./testtaskoutputfile.txt\"\">",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I think the convention is to use the `\\` on all OSs (and MSBuild will convert correctly where needed).",
              "createdAt": "2022-08-09T00:39:54Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -138,6 +140,31 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n+        [Fact]\n+        public void BinaryLoggerShouldEmbedFilesViaTaskOutput()\n+        {\n+            using var buildManager = new BuildManager();\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={_logFile}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+            var testProject = @\"\n+<Project>\n+    <Target Name=\"\"Build\"\">\n+        <WriteLinesToFile File=\"\"./testtaskoutputfile.txt\"\" Lines=\"\"abc;def;ghi\"\"/>\n+        <CreateItem Include=\"\"./testtaskoutputfile.txt\"\">",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Will look at this later today - don't want to use build infrastructure to potentially back and forth on test success.",
              "createdAt": "2022-08-09T07:10:59Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -138,6 +140,31 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n+        [Fact]\n+        public void BinaryLoggerShouldEmbedFilesViaTaskOutput()\n+        {\n+            using var buildManager = new BuildManager();\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={_logFile}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+            var testProject = @\"\n+<Project>\n+    <Target Name=\"\"Build\"\">\n+        <WriteLinesToFile File=\"\"./testtaskoutputfile.txt\"\" Lines=\"\"abc;def;ghi\"\"/>\n+        <CreateItem Include=\"\"./testtaskoutputfile.txt\"\">",
              "author": {
                "login": "MeikTranel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider using TestEnvironment and TransientZipArchive?",
              "createdAt": "2022-08-08T22:38:45Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -138,6 +140,31 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n+        [Fact]\n+        public void BinaryLoggerShouldEmbedFilesViaTaskOutput()\n+        {\n+            using var buildManager = new BuildManager();\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={_logFile}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+            var testProject = @\"\n+<Project>\n+    <Target Name=\"\"Build\"\">\n+        <WriteLinesToFile File=\"\"./testtaskoutputfile.txt\"\" Lines=\"\"abc;def;ghi\"\"/>\n+        <CreateItem Include=\"\"./testtaskoutputfile.txt\"\">\n+            <Output TaskParameter=\"\"Include\"\" ItemName=\"\"EmbedInBinlog\"\" />\n+        </CreateItem>\n+    </Target>\n+</Project>\";\n+            ObjectModelHelpers.BuildProjectExpectSuccess(testProject, binaryLogger);\n+            var projectImportsZipPath = Path.ChangeExtension(_logFile, \".ProjectImports.zip\");\n+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);\n+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "TransientZipArchive is only for creating a zip archive not the other way around and i don't think TestEnvironment would help here really - `ObjectModelHelpers.BuildProjectExpectSuccess` already uses it internally, the _logFile path is attached to it implicitly - pretty much the only path i produce is the `.ProjectImports.zip`, which is just conventionally attached to the binlog path.",
              "createdAt": "2022-08-09T07:09:33Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -138,6 +140,31 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n+        [Fact]\n+        public void BinaryLoggerShouldEmbedFilesViaTaskOutput()\n+        {\n+            using var buildManager = new BuildManager();\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={_logFile}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+            var testProject = @\"\n+<Project>\n+    <Target Name=\"\"Build\"\">\n+        <WriteLinesToFile File=\"\"./testtaskoutputfile.txt\"\" Lines=\"\"abc;def;ghi\"\"/>\n+        <CreateItem Include=\"\"./testtaskoutputfile.txt\"\">\n+            <Output TaskParameter=\"\"Include\"\" ItemName=\"\"EmbedInBinlog\"\" />\n+        </CreateItem>\n+    </Target>\n+</Project>\";\n+            ObjectModelHelpers.BuildProjectExpectSuccess(testProject, binaryLogger);\n+            var projectImportsZipPath = Path.ChangeExtension(_logFile, \".ProjectImports.zip\");\n+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);\n+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);",
              "author": {
                "login": "MeikTranel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n               || e.Kind == TaskParameterMessageKind.TaskOutput)\r\n```",
              "createdAt": "2022-08-15T15:38:40Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -521,7 +521,8 @@ private void Write(TaskParameterEventArgs e)\n             Write((int)e.Kind);\n             WriteDeduplicatedString(e.ItemType);\n             WriteTaskItemList(e.Items, e.LogItemMetadata);\n-            if (e.Kind == TaskParameterMessageKind.AddItem)\n+            if (e.Kind == TaskParameterMessageKind.AddItem\n+                | e.Kind == TaskParameterMessageKind.TaskOutput)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}