{
  "number": 3043,
  "title": "Add HadAnyDuplicates to RemoveDuplicates task",
  "body": "Three different commits here. Copy/pasting their summaries to make them more readable.\r\n\r\n- - -\r\n\r\nAdd HadAnyDuplicates output to RemoveDuplicates task\r\n\r\nThe `HadAnyDuplicates` output indicates whether the input list contained\r\nany duplicates. This makes it easier to implement checks that Items\r\ndon't contain any duplicates (e.g., to error if duplicate compilation\r\nwould occur).\r\n\r\nFixes #1541\r\n\r\n- - -\r\n\r\nRefactor RemoveDuplicates task to use C# 6 auto properties\r\n\r\nAlso, minor refactoring to use var to reduce duplication of type names.\r\n\r\n- - -\r\n\r\nRefactor RemoveDuplicates: use HashSet and List\r\n\r\nThe RemoveDuplicates task has been refactored to use `HashSet<string>` and\r\n`List<ITaskItem>` from `System.Collections.Generic` over the previous\r\nnon-generic `Hashtable` and `ArrayList` implementation.\r\n\r\nRecent versions of `HashSet<T>` [have constructors that take a\r\ncapacity][1], but these changes are not available in all the different\r\nversions of .NET that MSBuild is built with.\r\n\r\nI tested this implementation against the original\r\n`Hashtable`/`Arraylist` implementation on different item collections.\r\nThis version looks to perform better or on par.\r\n\r\nAside from empty inputs, three different types of inputs of varying\r\nlengths (10, 20, 100, and 100,000 items) were tested:\r\n\r\n* Diff: \"itemspec1\", \"itemspec2\", ..., \"itemspecn\"\r\n* Mix: \"itemspec1\", \"itemspec2\", ... with 95% unique and 5% duplicates\r\n  of some other item, all shuffled together\r\n* Same: \"itemspec\", \"itemspec\", ...\r\n\r\n```\r\nBenchmarkDotNet=v0.10.12, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.248)\r\nIntel Xeon CPU E5645 2.40GHz, 2 CPU, 24 logical cores and 12 physical cores\r\nFrequency=2337889 Hz, Resolution=427.7363 ns, Timer=TSC\r\n  [Host]       : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\r\n  Clr          : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\r\n  LegacyJitX86 : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\r\n  RyuJitX86    : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\r\n\r\nPlatform=X86  Runtime=Clr\r\n\r\n      Method |          Job |       Jit |   Method |      Mean |     Error |    StdDev |    Median |\r\n------------ |------------- |---------- |--------- |----------:|----------:|----------:|----------:|\r\n Diff100_000 |          Clr | LegacyJit |      New | 30.395 ms | 0.1348 ms | 0.1195 ms | 30.422 ms |\r\n Diff100_000 |          Clr | LegacyJit |      Old | 44.874 ms | 0.3963 ms | 0.3707 ms | 44.742 ms |\r\n Diff100_000 | LegacyJitX86 | LegacyJit |      New | 30.308 ms | 0.1644 ms | 0.1458 ms | 30.313 ms |\r\n Diff100_000 | LegacyJitX86 | LegacyJit |      Old | 44.414 ms | 0.1064 ms | 0.0944 ms | 44.417 ms |\r\n Diff100_000 |    RyuJitX86 |    RyuJit |      New | 30.126 ms | 0.1119 ms | 0.0992 ms | 30.107 ms |\r\n Diff100_000 |    RyuJitX86 |    RyuJit |      Old | 45.206 ms | 0.4861 ms | 0.4547 ms | 45.068 ms |\r\n     Diff100 |          Clr | LegacyJit |      New |  9.859 ms | 0.0365 ms | 0.0324 ms |  9.850 ms |\r\n     Diff100 |          Clr | LegacyJit |      Old |  9.843 ms | 0.0199 ms | 0.0155 ms |  9.844 ms |\r\n     Diff100 | LegacyJitX86 | LegacyJit |      New |  9.798 ms | 0.0343 ms | 0.0321 ms |  9.781 ms |\r\n     Diff100 | LegacyJitX86 | LegacyJit |      Old |  9.788 ms | 0.0235 ms | 0.0208 ms |  9.791 ms |\r\n     Diff100 |    RyuJitX86 |    RyuJit |      New |  9.599 ms | 0.0247 ms | 0.0219 ms |  9.594 ms |\r\n     Diff100 |    RyuJitX86 |    RyuJit |      Old |  9.859 ms | 0.0668 ms | 0.0625 ms |  9.828 ms |\r\n      Diff10 |          Clr | LegacyJit |      New |  9.685 ms | 0.0201 ms | 0.0168 ms |  9.683 ms |\r\n      Diff10 |          Clr | LegacyJit |      Old |  9.590 ms | 0.0212 ms | 0.0165 ms |  9.583 ms |\r\n      Diff10 | LegacyJitX86 | LegacyJit |      New |  9.906 ms | 0.0169 ms | 0.0150 ms |  9.903 ms |\r\n      Diff10 | LegacyJitX86 | LegacyJit |      Old |  9.704 ms | 0.0346 ms | 0.0307 ms |  9.695 ms |\r\n      Diff10 |    RyuJitX86 |    RyuJit |      New |  9.720 ms | 0.0151 ms | 0.0134 ms |  9.719 ms |\r\n      Diff10 |    RyuJitX86 |    RyuJit |      Old |  9.845 ms | 0.0492 ms | 0.0436 ms |  9.843 ms |\r\n      Diff20 |          Clr | LegacyJit |      New |  9.742 ms | 0.0850 ms | 0.0754 ms |  9.717 ms |\r\n      Diff20 |          Clr | LegacyJit |      Old |  9.792 ms | 0.0736 ms | 0.0688 ms |  9.770 ms |\r\n      Diff20 | LegacyJitX86 | LegacyJit |      New |  9.827 ms | 0.0244 ms | 0.0216 ms |  9.827 ms |\r\n      Diff20 | LegacyJitX86 | LegacyJit |      Old |  9.877 ms | 0.0240 ms | 0.0187 ms |  9.879 ms |\r\n      Diff20 |    RyuJitX86 |    RyuJit |      New |  9.790 ms | 0.0265 ms | 0.0222 ms |  9.784 ms |\r\n      Diff20 |    RyuJitX86 |    RyuJit |      Old |  9.850 ms | 0.0512 ms | 0.0454 ms |  9.838 ms |\r\n       Empty |          Clr | LegacyJit |      New |  9.746 ms | 0.0083 ms | 0.0078 ms |  9.747 ms |\r\n       Empty |          Clr | LegacyJit |      Old |  9.861 ms | 0.0893 ms | 0.0836 ms |  9.830 ms |\r\n       Empty | LegacyJitX86 | LegacyJit |      New |  9.656 ms | 0.0138 ms | 0.0116 ms |  9.655 ms |\r\n       Empty | LegacyJitX86 | LegacyJit |      Old |  9.709 ms | 0.0916 ms | 0.0765 ms |  9.681 ms |\r\n       Empty |    RyuJitX86 |    RyuJit |      New |  9.675 ms | 0.0309 ms | 0.0274 ms |  9.666 ms |\r\n       Empty |    RyuJitX86 |    RyuJit |      Old |  9.823 ms | 0.0174 ms | 0.0163 ms |  9.819 ms |\r\n  Mix100_000 |          Clr | LegacyJit |      New | 42.243 ms | 0.2917 ms | 0.2585 ms | 42.347 ms |\r\n  Mix100_000 |          Clr | LegacyJit |      Old | 58.505 ms | 0.4211 ms | 0.3733 ms | 58.470 ms |\r\n  Mix100_000 | LegacyJitX86 | LegacyJit |      New | 42.255 ms | 0.2787 ms | 0.2607 ms | 42.269 ms |\r\n  Mix100_000 | LegacyJitX86 | LegacyJit |      Old | 57.235 ms | 0.2927 ms | 0.2444 ms | 57.222 ms |\r\n  Mix100_000 |    RyuJitX86 |    RyuJit |      New | 41.249 ms | 0.5285 ms | 0.4685 ms | 41.126 ms |\r\n  Mix100_000 |    RyuJitX86 |    RyuJit |      Old | 57.771 ms | 0.5596 ms | 0.5235 ms | 57.726 ms |\r\n      Mix100 |          Clr | LegacyJit |      New |  9.798 ms | 0.0245 ms | 0.0177 ms |  9.797 ms |\r\n      Mix100 |          Clr | LegacyJit |      Old |  9.881 ms | 0.0212 ms | 0.0188 ms |  9.887 ms |\r\n      Mix100 | LegacyJitX86 | LegacyJit |      New |  9.859 ms | 0.0388 ms | 0.0344 ms |  9.852 ms |\r\n      Mix100 | LegacyJitX86 | LegacyJit |      Old |  9.657 ms | 0.0174 ms | 0.0136 ms |  9.654 ms |\r\n      Mix100 |    RyuJitX86 |    RyuJit |      New |  9.847 ms | 0.0150 ms | 0.0133 ms |  9.848 ms |\r\n      Mix100 |    RyuJitX86 |    RyuJit |      Old |  9.750 ms | 0.0683 ms | 0.0570 ms |  9.749 ms |\r\n       Mix10 |          Clr | LegacyJit |      New |  9.822 ms | 0.0198 ms | 0.0165 ms |  9.823 ms |\r\n       Mix10 |          Clr | LegacyJit |      Old |  9.683 ms | 0.0342 ms | 0.0303 ms |  9.674 ms |\r\n       Mix10 | LegacyJitX86 | LegacyJit |      New |  9.574 ms | 0.0514 ms | 0.0456 ms |  9.564 ms |\r\n       Mix10 | LegacyJitX86 | LegacyJit |      Old |  9.819 ms | 0.0263 ms | 0.0190 ms |  9.820 ms |\r\n       Mix10 |    RyuJitX86 |    RyuJit |      New |  9.683 ms | 0.0766 ms | 0.0679 ms |  9.652 ms |\r\n       Mix10 |    RyuJitX86 |    RyuJit |      Old |  9.856 ms | 0.1947 ms | 0.1821 ms |  9.821 ms |\r\n       Mix20 |          Clr | LegacyJit |      New |  9.950 ms | 0.0467 ms | 0.0414 ms |  9.937 ms |\r\n       Mix20 |          Clr | LegacyJit |      Old |  9.899 ms | 0.0255 ms | 0.0226 ms |  9.892 ms |\r\n       Mix20 | LegacyJitX86 | LegacyJit |      New |  9.891 ms | 0.0239 ms | 0.0200 ms |  9.891 ms |\r\n       Mix20 | LegacyJitX86 | LegacyJit |      Old |  9.625 ms | 0.0274 ms | 0.0243 ms |  9.624 ms |\r\n       Mix20 |    RyuJitX86 |    RyuJit |      New |  9.837 ms | 0.0094 ms | 0.0083 ms |  9.837 ms |\r\n       Mix20 |    RyuJitX86 |    RyuJit |      Old |  9.867 ms | 0.0355 ms | 0.0314 ms |  9.868 ms |\r\n Same100_000 |          Clr | LegacyJit |      New | 10.754 ms | 0.0574 ms | 0.0537 ms | 10.739 ms |\r\n Same100_000 |          Clr | LegacyJit |      Old | 10.651 ms | 0.0208 ms | 0.0163 ms | 10.645 ms |\r\n Same100_000 | LegacyJitX86 | LegacyJit |      New | 10.646 ms | 0.1451 ms | 0.1357 ms | 10.591 ms |\r\n Same100_000 | LegacyJitX86 | LegacyJit |      Old | 10.763 ms | 0.0222 ms | 0.0197 ms | 10.762 ms |\r\n Same100_000 |    RyuJitX86 |    RyuJit |      New | 10.713 ms | 0.0241 ms | 0.0213 ms | 10.709 ms |\r\n Same100_000 |    RyuJitX86 |    RyuJit |      Old | 10.681 ms | 0.0693 ms | 0.0614 ms | 10.657 ms |\r\n     Same100 |          Clr | LegacyJit |      New |  9.692 ms | 0.0155 ms | 0.0130 ms |  9.688 ms |\r\n     Same100 |          Clr | LegacyJit |      Old |  9.843 ms | 0.0256 ms | 0.0227 ms |  9.838 ms |\r\n     Same100 | LegacyJitX86 | LegacyJit |      New |  9.985 ms | 0.0180 ms | 0.0150 ms |  9.980 ms |\r\n     Same100 | LegacyJitX86 | LegacyJit |      Old |  9.905 ms | 0.0608 ms | 0.0539 ms |  9.883 ms |\r\n     Same100 |    RyuJitX86 |    RyuJit |      New |  9.618 ms | 0.0165 ms | 0.0137 ms |  9.615 ms |\r\n     Same100 |    RyuJitX86 |    RyuJit |      Old |  9.761 ms | 0.0936 ms | 0.0830 ms |  9.722 ms |\r\n      Same10 |          Clr | LegacyJit |      New |  9.672 ms | 0.0379 ms | 0.0317 ms |  9.664 ms |\r\n      Same10 |          Clr | LegacyJit |      Old |  9.830 ms | 0.0824 ms | 0.0731 ms |  9.809 ms |\r\n      Same10 | LegacyJitX86 | LegacyJit |      New |  9.875 ms | 0.0490 ms | 0.0434 ms |  9.854 ms |\r\n      Same10 | LegacyJitX86 | LegacyJit |      Old |  9.736 ms | 0.0574 ms | 0.0509 ms |  9.724 ms |\r\n      Same10 |    RyuJitX86 |    RyuJit |      New |  9.834 ms | 0.0408 ms | 0.0361 ms |  9.821 ms |\r\n      Same10 |    RyuJitX86 |    RyuJit |      Old |  9.735 ms | 0.0265 ms | 0.0235 ms |  9.741 ms |\r\n      Same20 |          Clr | LegacyJit |      New |  9.793 ms | 0.0715 ms | 0.0668 ms |  9.759 ms |\r\n      Same20 |          Clr | LegacyJit |      Old |  9.819 ms | 0.0319 ms | 0.0299 ms |  9.823 ms |\r\n      Same20 | LegacyJitX86 | LegacyJit |      New |  9.846 ms | 0.0270 ms | 0.0239 ms |  9.838 ms |\r\n      Same20 | LegacyJitX86 | LegacyJit |      Old |  9.869 ms | 0.0330 ms | 0.0293 ms |  9.864 ms |\r\n      Same20 |    RyuJitX86 |    RyuJit |      New |  9.784 ms | 0.0173 ms | 0.0153 ms |  9.779 ms |\r\n      Same20 |    RyuJitX86 |    RyuJit |      Old |  9.632 ms | 0.0301 ms | 0.0267 ms |  9.632 ms |\r\n```\r\n\r\n[1]: https://github.com/dotnet/corefx/commit/bc7cd2bca54441a83ecfea145ef59e936a17a18c",
  "state": "MERGED",
  "createdAt": "2018-03-03T03:53:58Z",
  "updatedAt": "2023-01-10T10:21:20Z",
  "closedAt": "2018-03-06T22:52:23Z",
  "mergedAt": "2018-03-06T22:52:22Z",
  "additions": 54,
  "deletions": 45,
  "changedFiles": 5,
  "headRefName": "rmdups-add-hadanydups",
  "isDraft": false,
  "author": {
    "login": "chwarr"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "86e41b91d78d83a1ee8c7adf6b04cbe41b747414",
          "message": "Add HadAnyDuplicates output to RemoveDuplicates task\n\nThe `HadAnyDuplicates` output indicates whether the input list contained\nany duplicates. This makes it easier to implement checks that Items\ndon't contain any duplicates (e.g., to error if duplicate compilation\nwould occur).\n\nFixes https://github.com/Microsoft/msbuild/issues/1541",
          "committedDate": "2018-03-05T20:52:10Z",
          "author": {
            "name": "Christopher Warrington",
            "email": "chwarr@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ca2db47f3c1a3d9eb9093973e05ea8fbbeb07579",
          "message": "Refactor RemoveDuplicates task to use C# 6 auto properties\n\nAlso, minor refactoring to use var & friends to reduce duplication of\ntype names.",
          "committedDate": "2018-03-05T22:33:45Z",
          "author": {
            "name": "Christopher Warrington",
            "email": "chwarr@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "191d6e9bfd831cbf11a11580c1b99f56674650e9",
          "message": "Refactor RemoveDuplicates: use HashSet and List\n\nThe RemoveDuplicates task has been refactored to use `HashSet<string>` and\n`List<ITaskItem>` from `System.Collections.Generic` over the previous\nnon-generic `Hashtable` and `ArrayList` implementation.\n\nRecent versions of `HashSet<T>` [have constructors that take a\ncapacity][1], but these changes are not available in all the different\nversions of .NET that MSBuild is built with.\n\nI tested this implementation against the original\n`Hashtable`/`Arraylist` implementation on different item collections.\nThis version looks to perform better or on par.\n\nAside from empty inputs, three different types of inputs of varying\nlengths (10, 20, 100, and 100,000 items) were tested:\n\n* Diff: \"itemspec1\", \"itemspec2\", ..., \"itemspecn\"\n* Mix: \"itemspec1\", \"itemspec2\", ... with 95% unique and 5% duplicates\n  of some other item, all shuffled together\n* Same: \"itemspec\", \"itemspec\", ...\n\nBenchmarkDotNet=v0.10.12, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.248)\nIntel Xeon CPU E5645 2.40GHz, 2 CPU, 24 logical cores and 12 physical cores\nFrequency=2337889 Hz, Resolution=427.7363 ns, Timer=TSC\n  [Host]       : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\n  Clr          : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\n  LegacyJitX86 : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\n  RyuJitX86    : .NET Framework 4.6.2 (CLR 4.0.30319.42000), 32bit LegacyJIT-v4.7.2633.0\n\nPlatform=X86  Runtime=Clr\n\n      Method |          Job |       Jit |   Method |      Mean |     Error |    StdDev |    Median |\n------------ |------------- |---------- |--------- |----------:|----------:|----------:|----------:|\n Diff100_000 |          Clr | LegacyJit |      New | 30.395 ms | 0.1348 ms | 0.1195 ms | 30.422 ms |\n Diff100_000 |          Clr | LegacyJit |      Old | 44.874 ms | 0.3963 ms | 0.3707 ms | 44.742 ms |\n Diff100_000 | LegacyJitX86 | LegacyJit |      New | 30.308 ms | 0.1644 ms | 0.1458 ms | 30.313 ms |\n Diff100_000 | LegacyJitX86 | LegacyJit |      Old | 44.414 ms | 0.1064 ms | 0.0944 ms | 44.417 ms |\n Diff100_000 |    RyuJitX86 |    RyuJit |      New | 30.126 ms | 0.1119 ms | 0.0992 ms | 30.107 ms |\n Diff100_000 |    RyuJitX86 |    RyuJit |      Old | 45.206 ms | 0.4861 ms | 0.4547 ms | 45.068 ms |\n     Diff100 |          Clr | LegacyJit |      New |  9.859 ms | 0.0365 ms | 0.0324 ms |  9.850 ms |\n     Diff100 |          Clr | LegacyJit |      Old |  9.843 ms | 0.0199 ms | 0.0155 ms |  9.844 ms |\n     Diff100 | LegacyJitX86 | LegacyJit |      New |  9.798 ms | 0.0343 ms | 0.0321 ms |  9.781 ms |\n     Diff100 | LegacyJitX86 | LegacyJit |      Old |  9.788 ms | 0.0235 ms | 0.0208 ms |  9.791 ms |\n     Diff100 |    RyuJitX86 |    RyuJit |      New |  9.599 ms | 0.0247 ms | 0.0219 ms |  9.594 ms |\n     Diff100 |    RyuJitX86 |    RyuJit |      Old |  9.859 ms | 0.0668 ms | 0.0625 ms |  9.828 ms |\n      Diff10 |          Clr | LegacyJit |      New |  9.685 ms | 0.0201 ms | 0.0168 ms |  9.683 ms |\n      Diff10 |          Clr | LegacyJit |      Old |  9.590 ms | 0.0212 ms | 0.0165 ms |  9.583 ms |\n      Diff10 | LegacyJitX86 | LegacyJit |      New |  9.906 ms | 0.0169 ms | 0.0150 ms |  9.903 ms |\n      Diff10 | LegacyJitX86 | LegacyJit |      Old |  9.704 ms | 0.0346 ms | 0.0307 ms |  9.695 ms |\n      Diff10 |    RyuJitX86 |    RyuJit |      New |  9.720 ms | 0.0151 ms | 0.0134 ms |  9.719 ms |\n      Diff10 |    RyuJitX86 |    RyuJit |      Old |  9.845 ms | 0.0492 ms | 0.0436 ms |  9.843 ms |\n      Diff20 |          Clr | LegacyJit |      New |  9.742 ms | 0.0850 ms | 0.0754 ms |  9.717 ms |\n      Diff20 |          Clr | LegacyJit |      Old |  9.792 ms | 0.0736 ms | 0.0688 ms |  9.770 ms |\n      Diff20 | LegacyJitX86 | LegacyJit |      New |  9.827 ms | 0.0244 ms | 0.0216 ms |  9.827 ms |\n      Diff20 | LegacyJitX86 | LegacyJit |      Old |  9.877 ms | 0.0240 ms | 0.0187 ms |  9.879 ms |\n      Diff20 |    RyuJitX86 |    RyuJit |      New |  9.790 ms | 0.0265 ms | 0.0222 ms |  9.784 ms |\n      Diff20 |    RyuJitX86 |    RyuJit |      Old |  9.850 ms | 0.0512 ms | 0.0454 ms |  9.838 ms |\n       Empty |          Clr | LegacyJit |      New |  9.746 ms | 0.0083 ms | 0.0078 ms |  9.747 ms |\n       Empty |          Clr | LegacyJit |      Old |  9.861 ms | 0.0893 ms | 0.0836 ms |  9.830 ms |\n       Empty | LegacyJitX86 | LegacyJit |      New |  9.656 ms | 0.0138 ms | 0.0116 ms |  9.655 ms |\n       Empty | LegacyJitX86 | LegacyJit |      Old |  9.709 ms | 0.0916 ms | 0.0765 ms |  9.681 ms |\n       Empty |    RyuJitX86 |    RyuJit |      New |  9.675 ms | 0.0309 ms | 0.0274 ms |  9.666 ms |\n       Empty |    RyuJitX86 |    RyuJit |      Old |  9.823 ms | 0.0174 ms | 0.0163 ms |  9.819 ms |\n  Mix100_000 |          Clr | LegacyJit |      New | 42.243 ms | 0.2917 ms | 0.2585 ms | 42.347 ms |\n  Mix100_000 |          Clr | LegacyJit |      Old | 58.505 ms | 0.4211 ms | 0.3733 ms | 58.470 ms |\n  Mix100_000 | LegacyJitX86 | LegacyJit |      New | 42.255 ms | 0.2787 ms | 0.2607 ms | 42.269 ms |\n  Mix100_000 | LegacyJitX86 | LegacyJit |      Old | 57.235 ms | 0.2927 ms | 0.2444 ms | 57.222 ms |\n  Mix100_000 |    RyuJitX86 |    RyuJit |      New | 41.249 ms | 0.5285 ms | 0.4685 ms | 41.126 ms |\n  Mix100_000 |    RyuJitX86 |    RyuJit |      Old | 57.771 ms | 0.5596 ms | 0.5235 ms | 57.726 ms |\n      Mix100 |          Clr | LegacyJit |      New |  9.798 ms | 0.0245 ms | 0.0177 ms |  9.797 ms |\n      Mix100 |          Clr | LegacyJit |      Old |  9.881 ms | 0.0212 ms | 0.0188 ms |  9.887 ms |\n      Mix100 | LegacyJitX86 | LegacyJit |      New |  9.859 ms | 0.0388 ms | 0.0344 ms |  9.852 ms |\n      Mix100 | LegacyJitX86 | LegacyJit |      Old |  9.657 ms | 0.0174 ms | 0.0136 ms |  9.654 ms |\n      Mix100 |    RyuJitX86 |    RyuJit |      New |  9.847 ms | 0.0150 ms | 0.0133 ms |  9.848 ms |\n      Mix100 |    RyuJitX86 |    RyuJit |      Old |  9.750 ms | 0.0683 ms | 0.0570 ms |  9.749 ms |\n       Mix10 |          Clr | LegacyJit |      New |  9.822 ms | 0.0198 ms | 0.0165 ms |  9.823 ms |\n       Mix10 |          Clr | LegacyJit |      Old |  9.683 ms | 0.0342 ms | 0.0303 ms |  9.674 ms |\n       Mix10 | LegacyJitX86 | LegacyJit |      New |  9.574 ms | 0.0514 ms | 0.0456 ms |  9.564 ms |\n       Mix10 | LegacyJitX86 | LegacyJit |      Old |  9.819 ms | 0.0263 ms | 0.0190 ms |  9.820 ms |\n       Mix10 |    RyuJitX86 |    RyuJit |      New |  9.683 ms | 0.0766 ms | 0.0679 ms |  9.652 ms |\n       Mix10 |    RyuJitX86 |    RyuJit |      Old |  9.856 ms | 0.1947 ms | 0.1821 ms |  9.821 ms |\n       Mix20 |          Clr | LegacyJit |      New |  9.950 ms | 0.0467 ms | 0.0414 ms |  9.937 ms |\n       Mix20 |          Clr | LegacyJit |      Old |  9.899 ms | 0.0255 ms | 0.0226 ms |  9.892 ms |\n       Mix20 | LegacyJitX86 | LegacyJit |      New |  9.891 ms | 0.0239 ms | 0.0200 ms |  9.891 ms |\n       Mix20 | LegacyJitX86 | LegacyJit |      Old |  9.625 ms | 0.0274 ms | 0.0243 ms |  9.624 ms |\n       Mix20 |    RyuJitX86 |    RyuJit |      New |  9.837 ms | 0.0094 ms | 0.0083 ms |  9.837 ms |\n       Mix20 |    RyuJitX86 |    RyuJit |      Old |  9.867 ms | 0.0355 ms | 0.0314 ms |  9.868 ms |\n Same100_000 |          Clr | LegacyJit |      New | 10.754 ms | 0.0574 ms | 0.0537 ms | 10.739 ms |\n Same100_000 |          Clr | LegacyJit |      Old | 10.651 ms | 0.0208 ms | 0.0163 ms | 10.645 ms |\n Same100_000 | LegacyJitX86 | LegacyJit |      New | 10.646 ms | 0.1451 ms | 0.1357 ms | 10.591 ms |\n Same100_000 | LegacyJitX86 | LegacyJit |      Old | 10.763 ms | 0.0222 ms | 0.0197 ms | 10.762 ms |\n Same100_000 |    RyuJitX86 |    RyuJit |      New | 10.713 ms | 0.0241 ms | 0.0213 ms | 10.709 ms |\n Same100_000 |    RyuJitX86 |    RyuJit |      Old | 10.681 ms | 0.0693 ms | 0.0614 ms | 10.657 ms |\n     Same100 |          Clr | LegacyJit |      New |  9.692 ms | 0.0155 ms | 0.0130 ms |  9.688 ms |\n     Same100 |          Clr | LegacyJit |      Old |  9.843 ms | 0.0256 ms | 0.0227 ms |  9.838 ms |\n     Same100 | LegacyJitX86 | LegacyJit |      New |  9.985 ms | 0.0180 ms | 0.0150 ms |  9.980 ms |\n     Same100 | LegacyJitX86 | LegacyJit |      Old |  9.905 ms | 0.0608 ms | 0.0539 ms |  9.883 ms |\n     Same100 |    RyuJitX86 |    RyuJit |      New |  9.618 ms | 0.0165 ms | 0.0137 ms |  9.615 ms |\n     Same100 |    RyuJitX86 |    RyuJit |      Old |  9.761 ms | 0.0936 ms | 0.0830 ms |  9.722 ms |\n      Same10 |          Clr | LegacyJit |      New |  9.672 ms | 0.0379 ms | 0.0317 ms |  9.664 ms |\n      Same10 |          Clr | LegacyJit |      Old |  9.830 ms | 0.0824 ms | 0.0731 ms |  9.809 ms |\n      Same10 | LegacyJitX86 | LegacyJit |      New |  9.875 ms | 0.0490 ms | 0.0434 ms |  9.854 ms |\n      Same10 | LegacyJitX86 | LegacyJit |      Old |  9.736 ms | 0.0574 ms | 0.0509 ms |  9.724 ms |\n      Same10 |    RyuJitX86 |    RyuJit |      New |  9.834 ms | 0.0408 ms | 0.0361 ms |  9.821 ms |\n      Same10 |    RyuJitX86 |    RyuJit |      Old |  9.735 ms | 0.0265 ms | 0.0235 ms |  9.741 ms |\n      Same20 |          Clr | LegacyJit |      New |  9.793 ms | 0.0715 ms | 0.0668 ms |  9.759 ms |\n      Same20 |          Clr | LegacyJit |      Old |  9.819 ms | 0.0319 ms | 0.0299 ms |  9.823 ms |\n      Same20 | LegacyJitX86 | LegacyJit |      New |  9.846 ms | 0.0270 ms | 0.0239 ms |  9.838 ms |\n      Same20 | LegacyJitX86 | LegacyJit |      Old |  9.869 ms | 0.0330 ms | 0.0293 ms |  9.864 ms |\n      Same20 |    RyuJitX86 |    RyuJit |      New |  9.784 ms | 0.0173 ms | 0.0153 ms |  9.779 ms |\n      Same20 |    RyuJitX86 |    RyuJit |      Old |  9.632 ms | 0.0301 ms | 0.0267 ms |  9.632 ms |\n\n[1]: https://github.com/dotnet/corefx/commit/bc7cd2bca54441a83ecfea145ef59e936a17a18c",
          "committedDate": "2018-03-05T22:48:28Z",
          "author": {
            "name": "Christopher Warrington",
            "email": "chwarr@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This will likely conflict with https://github.com/Microsoft/msbuild/pull/3040 depending on which one gets merged first. I'll resolve conflicts when they arise.",
        "createdAt": "2018-03-03T03:54:37Z",
        "author": {
          "login": "chwarr"
        }
      },
      {
        "body": "Looks good, thanks!",
        "createdAt": "2018-03-06T22:52:14Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The empty check here makes this implementation faster than the original one on empty inputs. Is such complexity worth it?\r\n\r\n* New: without empty check (always allocate `HashSet`, but never enter the loop)\r\n* NewEmpty: with empty check\r\n* Old: the `Hashtable` implementation\r\n\r\n```\r\n       Empty |          Clr | LegacyJit |      New |  9.904 ms | 0.1030 ms | 0.0861 ms |  9.890 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty |          Clr | LegacyJit | NewEmpty |  9.746 ms | 0.0083 ms | 0.0078 ms |  9.747 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty |          Clr | LegacyJit |      Old |  9.861 ms | 0.0893 ms | 0.0836 ms |  9.830 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty | LegacyJitX86 | LegacyJit |      New |  9.842 ms | 0.0278 ms | 0.0232 ms |  9.837 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty | LegacyJitX86 | LegacyJit | NewEmpty |  9.656 ms | 0.0138 ms | 0.0116 ms |  9.655 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty | LegacyJitX86 | LegacyJit |      Old |  9.709 ms | 0.0916 ms | 0.0765 ms |  9.681 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty |    RyuJitX86 |    RyuJit |      New |  9.720 ms | 0.0215 ms | 0.0201 ms |  9.716 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty |    RyuJitX86 |    RyuJit | NewEmpty |  9.675 ms | 0.0309 ms | 0.0274 ms |  9.666 ms |\r\n             |              |           |          |           |           |           |           |\r\n       Empty |    RyuJitX86 |    RyuJit |      Old |  9.823 ms | 0.0174 ms | 0.0163 ms |  9.819 ms |\r\n```",
              "createdAt": "2018-03-03T03:58:34Z",
              "path": "src/Tasks/ListOperators/RemoveDuplicates.cs",
              "diffHunk": "@@ -15,47 +14,49 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public class RemoveDuplicates : TaskExtension\n     {\n-        private ITaskItem[] _inputs = Array.Empty<TaskItem>();\n-        private ITaskItem[] _filtered = null;\n-\n         /// <summary>\n         /// The left-hand set of items to be RemoveDuplicatesed from.\n         /// </summary>\n-        public ITaskItem[] Inputs\n-        {\n-            get { return _inputs; }\n-            set { _inputs = value; }\n-        }\n+        public ITaskItem[] Inputs { get; set; } = Array.Empty<TaskItem>();\n \n         /// <summary>\n         /// List of unique items.\n         /// </summary>\n         [Output]\n-        public ITaskItem[] Filtered\n-        {\n-            get { return _filtered; }\n-            set { _filtered = value; }\n-        }\n+        public ITaskItem[] Filtered { get; set; } = null;\n+\n+        /// <summary>\n+        /// True if any duplicate items were found. False otherwise.\n+        /// </summary>\n+        [Output]\n+        public bool HadAnyDuplicates { get; set; } = false;\n \n         /// <summary>\n         /// Execute the task.\n         /// </summary>\n         /// <returns></returns>\n         public override bool Execute()\n         {\n-            Hashtable alreadySeen = new Hashtable(Inputs.Length, StringComparer.OrdinalIgnoreCase);\n-            ArrayList filteredList = new ArrayList();\n+            if (Inputs == null || Inputs.Length == 0)",
              "author": {
                "login": "chwarr"
              }
            },
            {
              "body": "I don't think the time gain you measured (thanks!) would be worth it in general, but this is an easy check and a straightforward return in the empty case, so I think it's a fine idea to keep it here.",
              "createdAt": "2018-03-06T05:27:41Z",
              "path": "src/Tasks/ListOperators/RemoveDuplicates.cs",
              "diffHunk": "@@ -15,47 +14,49 @@ namespace Microsoft.Build.Tasks\n     /// </summary>\n     public class RemoveDuplicates : TaskExtension\n     {\n-        private ITaskItem[] _inputs = Array.Empty<TaskItem>();\n-        private ITaskItem[] _filtered = null;\n-\n         /// <summary>\n         /// The left-hand set of items to be RemoveDuplicatesed from.\n         /// </summary>\n-        public ITaskItem[] Inputs\n-        {\n-            get { return _inputs; }\n-            set { _inputs = value; }\n-        }\n+        public ITaskItem[] Inputs { get; set; } = Array.Empty<TaskItem>();\n \n         /// <summary>\n         /// List of unique items.\n         /// </summary>\n         [Output]\n-        public ITaskItem[] Filtered\n-        {\n-            get { return _filtered; }\n-            set { _filtered = value; }\n-        }\n+        public ITaskItem[] Filtered { get; set; } = null;\n+\n+        /// <summary>\n+        /// True if any duplicate items were found. False otherwise.\n+        /// </summary>\n+        [Output]\n+        public bool HadAnyDuplicates { get; set; } = false;\n \n         /// <summary>\n         /// Execute the task.\n         /// </summary>\n         /// <returns></returns>\n         public override bool Execute()\n         {\n-            Hashtable alreadySeen = new Hashtable(Inputs.Length, StringComparer.OrdinalIgnoreCase);\n-            ArrayList filteredList = new ArrayList();\n+            if (Inputs == null || Inputs.Length == 0)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These changes were generated as part of the build. I assume they are to be committed.",
              "createdAt": "2018-03-03T03:58:39Z",
              "path": "ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs",
              "diffHunk": "@@ -807,8 +807,10 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension\n     {\n         public RemoveDuplicates() { }\n         [Microsoft.Build.Framework.OutputAttribute]\n-        public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }\n-        public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }\n+        public Microsoft.Build.Framework.ITaskItem[] Filtered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }",
              "author": {
                "login": "chwarr"
              }
            },
            {
              "body": "Yes, please. These (generated) files are our public API surface. We like to keep them checked in so that we can explicitly consider any diff to the public API.\r\n\r\nHere, I think it felt the need to add `CompilerGeneratedAttribute` because of the switch to autoproperties, which isn't particularly useful, but it's nice to see the new field with the OutputAttribute.",
              "createdAt": "2018-03-06T05:15:50Z",
              "path": "ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs",
              "diffHunk": "@@ -807,8 +807,10 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension\n     {\n         public RemoveDuplicates() { }\n         [Microsoft.Build.Framework.OutputAttribute]\n-        public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }\n-        public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }\n+        public Microsoft.Build.Framework.ITaskItem[] Filtered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I augmented these C# tests, but couldn't find any .proj tests for RemoveDuplicates E.g., to make sure the `[Output]` attribute is working correctly. I did some manual testing with the MSBuild produced by build.cmd: it's working.\r\n\r\nAre these unit tests enough?",
              "createdAt": "2018-03-03T04:00:33Z",
              "path": "src/Tasks.UnitTests/RemoveDuplicates_Tests.cs",
              "diffHunk": "@@ -19,14 +16,16 @@ sealed public class RemoveDuplicates_Tests\n         [Fact]\n         public void OneItemNop()\n         {\n-            RemoveDuplicates t = new RemoveDuplicates();\n+            var t = new RemoveDuplicates();\n             t.BuildEngine = new MockEngine();\n \n             t.Inputs = new ITaskItem[] { new TaskItem(\"MyFile.txt\") };\n \n             bool success = t.Execute();\n             Assert.True(success);\n+            Assert.Equal(1, t.Filtered.Length);\n             Assert.Equal(\"MyFile.txt\", t.Filtered[0].ItemSpec);\n+            Assert.False(t.HadAnyDuplicates);",
              "author": {
                "login": "chwarr"
              }
            },
            {
              "body": "These changes to the tests look good to me. We generally don't have end-to-end tests for tasks that use projects, relying on general testing (`TaskBuilder_Tests` covers output attributes somewhat) and tests of the object properties, as here.\r\n\r\nWe're not generally particularly proud of our tests or test methodology but this has been working ok, so we don't plan to change it at the moment.",
              "createdAt": "2018-03-06T05:44:13Z",
              "path": "src/Tasks.UnitTests/RemoveDuplicates_Tests.cs",
              "diffHunk": "@@ -19,14 +16,16 @@ sealed public class RemoveDuplicates_Tests\n         [Fact]\n         public void OneItemNop()\n         {\n-            RemoveDuplicates t = new RemoveDuplicates();\n+            var t = new RemoveDuplicates();\n             t.BuildEngine = new MockEngine();\n \n             t.Inputs = new ITaskItem[] { new TaskItem(\"MyFile.txt\") };\n \n             bool success = t.Execute();\n             Assert.True(success);\n+            Assert.Equal(1, t.Filtered.Length);\n             Assert.Equal(\"MyFile.txt\", t.Filtered[0].ItemSpec);\n+            Assert.False(t.HadAnyDuplicates);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there anything that needs to be done to make sure that the docs.microsoft.com documentation gets update to talk about the new output parameter?",
              "createdAt": "2018-03-03T04:01:59Z",
              "path": "src/MSBuild/Microsoft.Build.CommonTypes.xsd",
              "diffHunk": "@@ -2527,6 +2527,7 @@ elementFormDefault=\"qualified\">\n             <xs:complexContent>\n                 <xs:extension base=\"msb:TaskType\">\n                     <xs:attribute name=\"Filtered\" />\n+                    <xs:attribute name=\"HadAnyDuplicates\" type=\"msb:boolean\" />",
              "author": {
                "login": "chwarr"
              }
            },
            {
              "body": "Unfortunately it's a manual process; we'll have to send a PR after this is merged/shipped.",
              "createdAt": "2018-03-06T05:19:07Z",
              "path": "src/MSBuild/Microsoft.Build.CommonTypes.xsd",
              "diffHunk": "@@ -2527,6 +2527,7 @@ elementFormDefault=\"qualified\">\n             <xs:complexContent>\n                 <xs:extension base=\"msb:TaskType\">\n                     <xs:attribute name=\"Filtered\" />\n+                    <xs:attribute name=\"HadAnyDuplicates\" type=\"msb:boolean\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": ":) https://github.com/MicrosoftDocs/visualstudio-docs/pull/8832",
              "createdAt": "2023-01-10T10:21:20Z",
              "path": "src/MSBuild/Microsoft.Build.CommonTypes.xsd",
              "diffHunk": "@@ -2527,6 +2527,7 @@ elementFormDefault=\"qualified\">\n             <xs:complexContent>\n                 <xs:extension base=\"msb:TaskType\">\n                     <xs:attribute name=\"Filtered\" />\n+                    <xs:attribute name=\"HadAnyDuplicates\" type=\"msb:boolean\" />",
              "author": {
                "login": "stan-sz"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc4d ",
              "createdAt": "2018-03-06T05:19:55Z",
              "path": "src/Tasks.UnitTests/RemoveDuplicates_Tests.cs",
              "diffHunk": "@@ -26,7 +26,9 @@ public void OneItemNop()\n \n             bool success = t.Execute();\n             Assert.True(success);\n+            Assert.Equal(1, t.Filtered.Length);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}