{
  "number": 6126,
  "title": "Change Load Behavior for NuGet Components",
  "body": "Contributes to https://github.com/dotnet/sdk/issues/15558.\r\n\r\n### Context\r\nIn a single MSBuild process, most of the NuGet binaries are being loaded into more than one `AssemblyLoadContext`.  The ready to run code associated with these binaries can only be used in a single `AssemblyLoadContext`, which means that usage of the assembly in all other contexts must be jitted.  This shows up as an extra 736 methods that get jitted (measured as 147.6ms).\r\n\r\n### Changes Made\r\n1. Change `NuGetFrameworkWrapper` to use `Assembly.LoadFrom` instead of `Assembly.LoadFile` when using reflection to load NuGet.Frameworks.dll.  This ensures that the assembly is not loaded into the NULL loader context, and unifies the load with later loads of the same assembly.\r\n2. Add all of the NuGet assemblies to the list of well-known assemblies in `MSBuildLoadContext`, forcing them to all be loaded in the default `AssemblyLoadContext`.  This is an important part of the fix because these loads occur after the load that occurs in `NuGetFrameworkWrapper`, and so by MSBuild taking a dependency on these NuGet assemblies, they should be treated as part of MSBuild itself, and not as part of a task using the task loader behavior.\r\n\r\n### Testing\r\n - Verified that basic build scenarios work.\r\n - Used COMPlus_ReadyToRunLogFile to confirm that R2R code is not rejected due to multiple loads in different `AssemblyLoadContexts`.\r\n - Captured before/after profiles to confirm wins.\r\n\r\n### Notes\r\nThis PR contains the following performance wins:\r\n - -736 drop in method jitting overall.\r\n - 147.6ms improvement in JIT time (15.5%)\r\n - 5.1% wall-clock latency improvement overall\r\n\r\ncc: @stephentoub, @DamianEdwards, @marcpopMSFT ",
  "state": "MERGED",
  "createdAt": "2021-02-05T00:25:04Z",
  "updatedAt": "2021-02-23T04:09:32Z",
  "closedAt": "2021-02-08T16:58:35Z",
  "mergedAt": "2021-02-08T16:58:35Z",
  "additions": 13,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "nuget-load-context",
  "isDraft": false,
  "author": {
    "login": "brianrob"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0fc8263f6afb7424535dedd883d0f85036f10303",
          "message": "Call LoadFrom instead of LoadFile when loading NuGet.Frameworks.dll to avoid multiple loads of the same assembly in different contexts.",
          "committedDate": "2021-02-04T20:31:37Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "183645c502cc41de4b63662704b7b339c32f0f12",
          "message": "Add NuGet assemblies to the list of well-known assemblies.",
          "committedDate": "2021-02-04T20:31:38Z",
          "author": {
            "name": "Brian Robbins",
            "email": "brianrob@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the review @Forgind.  Can you merge at your convenience?  I don't appear to have permissions.",
        "createdAt": "2021-02-08T04:11:44Z",
        "author": {
          "login": "brianrob"
        }
      },
      {
        "body": "This introduced regressions in our build tasks. This is sharing NuGet unconditionally regardless of version which will pin NuGet to the version in the SDK.  It\u2019s also causing problems because NewtonsoftJson is not pinned but is a dependency of NuGet. This causes Newtonsoft to load in the tasks ALC and it doesn\u2019t unify with the one used by NuGet even if the same version. This results in Type loading issues (method not found in the case we saw).  Why not instead remove NuGet from the tasks which are carrying extra copies to achieve this perf improvement?  That will have the added benefit of reducing disk footprint, assuming this unification is indeed legitimate.\r\n\r\nBarring that it seems like some additional work needs to be done to selectively reuse based on some version rules  and ensure the entire assembly closure will be reused, including Newtonsoft.Json.",
        "createdAt": "2021-02-23T03:43:18Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}