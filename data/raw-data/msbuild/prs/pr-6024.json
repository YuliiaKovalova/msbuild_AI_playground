{
  "number": 6024,
  "title": "Prevent extra processes",
  "body": "Fixes #6020\r\n\r\n### Context\r\nSee also https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1040783\r\nIt appears that VS sometimes fails to shut down nodes due to a timeout. This is corrected in the first commit.\r\n\r\nAdditionally, given that there were eventually thousands of MSBuild processes open on some users' computers (as in #6020), there is almost certainly another track that creates nodes every time whether or not there are other nodes that should be able to be connected to.\r\n\r\n### Changes Made\r\nTimeout was increased. If there are an excess of nodes when we try to create a new node, we shut down all nodes we aren't currently connected to. This prevents buildup and effectively resolves the problem.\r\n\r\n### Testing\r\nNone yet",
  "state": "CLOSED",
  "createdAt": "2021-01-12T03:05:08Z",
  "updatedAt": "2021-05-17T14:37:00Z",
  "closedAt": "2021-05-17T14:37:00Z",
  "mergedAt": null,
  "additions": 26,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "prevent-extra-processes",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4cea754d34e30ab17f41896f7cc8c8ab3f70be33",
          "message": "Increase timeout",
          "committedDate": "2021-01-12T01:42:32Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "205622ccb1cb1144c34ff45b3f26d20c727bdc73",
          "message": "Prevent excess node buildup\n\nThere have been several reports of nodes building up to dozens, hundreds, or even thousands of MSBuild processes. Part of the problem is the inability for certain processes, such as Visual Studio, to connect to nodes to shut them down via ShutdownAllNodes because it was taking longer to connect to them than expected. This was corrected in the previous commit by extending the timeout. This commit adds that if more nodes are in use than should be, we try to shut down all nodes not connected to the current node. This would instantly fail any other builds running concurrently, but that should be rare. This resolves #6020.",
          "committedDate": "2021-01-12T03:00:13Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I noticed another potential problem. One process ID in a comm trace switched over from messages only sent by the provider (like `Attempting to connect to each existing MSBuild process in turn to establish node 2...`) to messages sent only from the endpoint (like `Parent started connecting. Reading handshake from parent`). As far as I know, that should only happen if the node shuts down, and the same pid happens to be reused; is that correct? Can comm traces go across builds?",
        "createdAt": "2021-01-12T16:36:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The fact that only a small number of users are affected suggests to me that it involves something about their environment. I think I asked for enumerate-msbuild results and found nothing unexpected in the GAC, but I might be misremembering. I can also ask for environment variables and their values, but that's all I can think of as far as trying to find a root cause. I've been trying to look through both MSBuild code and underlying framework code, and although I found a lot of things that I didn't understand, none of my further investigations revealed anything.",
        "createdAt": "2021-01-13T01:12:18Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is potentially low (in the pathological running all-possible-builds case), because it doesn't take TaskHost nodes into account.",
              "createdAt": "2021-01-12T12:26:12Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -50,6 +51,13 @@ internal abstract class NodeProviderOutOfProcBase\n         /// </summary>\n         private const int TimeoutForNewNodeCreation = 30000;\n \n+        /// <summary>\n+        /// The number of MSBuild processes allowed on the computer. 5 is (low priority/normal priority) * (administrator/not administrator) + (no node reuse).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How did you measure this? Could we add the time actually taken here to the ETW-to-text logging, then ask folks to turn that on if they ever see this problem and dump it if they see it again?",
              "createdAt": "2021-01-12T12:27:12Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -120,11 +125,20 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter\n             // Search for all instances of msbuildtaskhost process and add them to the process list\n             nodeProcesses.AddRange(new List<Process>(Process.GetProcessesByName(Path.GetFileNameWithoutExtension(msbuildtaskhostExeName))));\n \n+            ShutDownNodes(nodeProcesses, nodeReuse, terminateNode);\n+        }\n+\n+        private void ShutDownNodes(List<Process> nodeProcesses, bool nodeReuse, NodeContextTerminateDelegate terminateNode)\n+        {\n+            // INodePacketFactory\n+            INodePacketFactory factory = new NodePacketFactory();\n+\n             // For all processes in the list, send signal to terminate if able to connect\n             foreach (Process nodeProcess in nodeProcesses)\n             {\n                 // A 2013 comment suggested some nodes take this long to respond, so a smaller timeout would miss nodes.\n-                int timeout = 30;\n+                // Updated 2021 to correspond to new times taken to respond.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Two people have collected comm logs (with fewer MSBuild nodes running, though still an excess), and in looking at one of them, it seemed that the timeout was just a little too short for shutting down nodes (up to ~43 ms). ETW trace could be nice.",
              "createdAt": "2021-01-12T16:22:12Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -120,11 +125,20 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter\n             // Search for all instances of msbuildtaskhost process and add them to the process list\n             nodeProcesses.AddRange(new List<Process>(Process.GetProcessesByName(Path.GetFileNameWithoutExtension(msbuildtaskhostExeName))));\n \n+            ShutDownNodes(nodeProcesses, nodeReuse, terminateNode);\n+        }\n+\n+        private void ShutDownNodes(List<Process> nodeProcesses, bool nodeReuse, NodeContextTerminateDelegate terminateNode)\n+        {\n+            // INodePacketFactory\n+            INodePacketFactory factory = new NodePacketFactory();\n+\n             // For all processes in the list, send signal to terminate if able to connect\n             foreach (Process nodeProcess in nodeProcesses)\n             {\n                 // A 2013 comment suggested some nodes take this long to respond, so a smaller timeout would miss nodes.\n-                int timeout = 30;\n+                // Updated 2021 to correspond to new times taken to respond.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}