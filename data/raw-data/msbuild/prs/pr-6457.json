{
  "number": 6457,
  "title": "Fix memory leak in ProjectRootElement.Reload",
  "body": "Fixes #6456\r\n\r\n### Context\r\nCalling `Xml.Reload` on a `Microsoft.Build.Evaluation.Project` leaks memory because the old `XmlDocument` is not removed from the `ProjectStringCache`.\r\n\r\n### Changes Made\r\n`ClearAnyCachedStrings` is now called on the document that's not retained by `ProjectRootElement`. This would normally be the old document being replaced by `Reload`.\r\n\r\n### Testing\r\nExisting unit tests and manually verified using the repro snippet in #6456. \r\n\r\n### Notes\r\nTargeting VS16.11 with this change as we've seen multiple feedback tickets related to this. In pathological scenarios the leak really OOMs the Visual Studio process.\r\n\r\nGoing forward we should see if we can eliminate the error-prone cache altogether (#5444).",
  "state": "MERGED",
  "createdAt": "2021-05-14T10:57:11Z",
  "updatedAt": "2021-05-24T15:15:32Z",
  "closedAt": "2021-05-24T15:15:31Z",
  "mergedAt": "2021-05-24T15:15:31Z",
  "additions": 78,
  "deletions": 11,
  "changedFiles": 3,
  "headRefName": "fix-xml-reload-leak",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a1e93f1b6cc1e6a845868111348a1e6f67251415",
          "message": "Fix XmlDocument leaks when reloading projects",
          "committedDate": "2021-05-14T10:20:18Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d178962043d998b882514c86f793eecc37cc6a33",
          "message": "Add new test ReloadDoesNotLeakCachedXmlDocuments",
          "committedDate": "2021-05-14T15:09:48Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I'll add a targeted regression test.",
        "createdAt": "2021-05-14T13:19:55Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there any reason internals aren't visible to these tests? That seems like something we'd want for other tests later, too.",
              "createdAt": "2021-05-14T16:16:43Z",
              "path": "src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs",
              "diffHunk": "@@ -1986,5 +2013,17 @@ private void VerifyAssertLineByLine(string expected, string actual)\n         {\n             Helpers.VerifyAssertLineByLine(expected, actual, false);\n         }\n+\n+        /// <summary>\n+        /// Returns the number of documents retained by the project string cache.\n+        /// Peeks at it via reflection since internals are not visible to these tests.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I believe it's by design. These tests should be testing the public surface (or Object Model, as in Build.**OM**.UnitTests). I'm not confident that this test case belongs here. It is testing a public method but needs an internal hook to verify the expected behavior.",
              "createdAt": "2021-05-14T21:24:47Z",
              "path": "src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs",
              "diffHunk": "@@ -1986,5 +2013,17 @@ private void VerifyAssertLineByLine(string expected, string actual)\n         {\n             Helpers.VerifyAssertLineByLine(expected, actual, false);\n         }\n+\n+        /// <summary>\n+        /// Returns the number of documents retained by the project string cache.\n+        /// Peeks at it via reflection since internals are not visible to these tests.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It sounds a little better to me to move it to Build.UnitTests, but it isn't too important.",
              "createdAt": "2021-05-14T21:27:17Z",
              "path": "src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs",
              "diffHunk": "@@ -1986,5 +2013,17 @@ private void VerifyAssertLineByLine(string expected, string actual)\n         {\n             Helpers.VerifyAssertLineByLine(expected, actual, false);\n         }\n+\n+        /// <summary>\n+        /// Returns the number of documents retained by the project string cache.\n+        /// Peeks at it via reflection since internals are not visible to these tests.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if we should verify that the project is the new one the first time and the old one the second time. Not directly related to your change, though.\r\n\r\nMore related, I'd be in favor of reloading 3-4 times just in case there's something unexpected.",
              "createdAt": "2021-05-14T16:18:38Z",
              "path": "src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs",
              "diffHunk": "@@ -1854,6 +1856,31 @@ public void ReloadCanOverwriteUnsavedChanges()\n             AssertReload(SimpleProject, ComplexProject, true, true, true, act);\n         }\n \n+        [Fact]\n+        public void ReloadDoesNotLeakCachedXmlDocuments()\n+        {\n+            using var env = TestEnvironment.Create();\n+            var testFiles = env.CreateTestProjectWithFiles(\"\", new[] { \"build.proj\" });\n+            var projectFile = testFiles.CreatedFiles.First();\n+\n+            var projectElement = ObjectModelHelpers.CreateInMemoryProjectRootElement(SimpleProject);\n+            projectElement.Save(projectFile);\n+\n+            int originalDocumentCount = GetNumberOfDocumentsInProjectStringCache(projectElement);\n+\n+            // Test successful reload.\n+            projectElement.Reload(false);\n+            GetNumberOfDocumentsInProjectStringCache(projectElement).ShouldBe(originalDocumentCount);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If newDocument and oldDocument represent the new and old version of the same file, wouldn't clearing the cache remove the useful overlap as well?",
              "createdAt": "2021-05-15T00:14:03Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -1677,19 +1677,33 @@ private void ReloadFrom(Func<bool, XmlDocumentWithLocation> documentProducer, bo\n         {\n             ThrowIfUnsavedChanges(throwIfUnsavedChanges);\n \n-            XmlDocumentWithLocation document = documentProducer(preserveFormatting ?? PreserveFormatting);\n-\n-            // Reload should only mutate the state if there are no parse errors.\n-            ThrowIfDocumentHasParsingErrors(document);\n-\n-            // Do not clear the string cache.\n-            // Based on the assumption that Projects are reloaded repeatedly from their file with small increments,\n-            // and thus most strings would get reused\n-            //this.XmlDocument.ClearAnyCachedStrings();\n+            var oldDocument = XmlDocument;\n+            XmlDocumentWithLocation newDocument = documentProducer(preserveFormatting ?? PreserveFormatting);\n+            try\n+            {\n+                // Reload should only mutate the state if there are no parse errors.\n+                ThrowIfDocumentHasParsingErrors(newDocument);\n \n-            RemoveAllChildren();\n+                RemoveAllChildren();\n \n-            ProjectParser.Parse(document, this);\n+                ProjectParser.Parse(newDocument, this);\n+            }\n+            finally\n+            {\n+                // Whichever document didn't become this element's document must be removed from the string cache.\n+                // We do it after the fact based on the assumption that Projects are reloaded repeatedly from their\n+                // file with small increments, and thus most strings would get reused avoiding unnecessary churn in\n+                // the string cache.\n+                var currentDocument = XmlDocument;\n+                if (!object.ReferenceEquals(currentDocument, oldDocument))\n+                {\n+                    oldDocument.ClearAnyCachedStrings();",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "This cache is implemented with reference counting. If two documents have exactly the same strings, these strings will have a ref-count of (at least) 2 and `ClearAnyCachedStrings` makes the ref-count go to 1 without actually removing any strings. Admittedly the name is a bit misleading.\r\n\r\nThat's what we see in the dumps. The number of strings in the cache is reasonable but they have huge ref-counts and for each reference there is an XML document kept alive by the cache, which the cache needs so it can later go \"aha, you're releasing this document, let me look up all its strings and ref-- them\".",
              "createdAt": "2021-05-17T07:01:18Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -1677,19 +1677,33 @@ private void ReloadFrom(Func<bool, XmlDocumentWithLocation> documentProducer, bo\n         {\n             ThrowIfUnsavedChanges(throwIfUnsavedChanges);\n \n-            XmlDocumentWithLocation document = documentProducer(preserveFormatting ?? PreserveFormatting);\n-\n-            // Reload should only mutate the state if there are no parse errors.\n-            ThrowIfDocumentHasParsingErrors(document);\n-\n-            // Do not clear the string cache.\n-            // Based on the assumption that Projects are reloaded repeatedly from their file with small increments,\n-            // and thus most strings would get reused\n-            //this.XmlDocument.ClearAnyCachedStrings();\n+            var oldDocument = XmlDocument;\n+            XmlDocumentWithLocation newDocument = documentProducer(preserveFormatting ?? PreserveFormatting);\n+            try\n+            {\n+                // Reload should only mutate the state if there are no parse errors.\n+                ThrowIfDocumentHasParsingErrors(newDocument);\n \n-            RemoveAllChildren();\n+                RemoveAllChildren();\n \n-            ProjectParser.Parse(document, this);\n+                ProjectParser.Parse(newDocument, this);\n+            }\n+            finally\n+            {\n+                // Whichever document didn't become this element's document must be removed from the string cache.\n+                // We do it after the fact based on the assumption that Projects are reloaded repeatedly from their\n+                // file with small increments, and thus most strings would get reused avoiding unnecessary churn in\n+                // the string cache.\n+                var currentDocument = XmlDocument;\n+                if (!object.ReferenceEquals(currentDocument, oldDocument))\n+                {\n+                    oldDocument.ClearAnyCachedStrings();",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}