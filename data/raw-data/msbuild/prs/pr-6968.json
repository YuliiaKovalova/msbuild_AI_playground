{
  "number": 6968,
  "title": "ToolTasks Don't Log MSB4181 When Terminated",
  "body": "Fixes #5508\r\n\r\n### Context\r\nOriginally seen with the `Exec` and `csc` tasks. When _any_ tooltask is terminated early, it would simply return false. This goes against our \"rule\" that ToolTasks should return _!Log.HasLoggedErrors_. \r\n\r\n### Changes Made\r\nToolTasks return `!Log.HasLoggedErrors` when cancelled.\r\n\r\n### Testing\r\nUpdated two tests that expected Exec to fail when it timed out (timing out follows the same behavior that cancelling does).\r\n\r\nAlso tested locally by cancelling a build of this repo. See the diff when cancelling `msbuild msbuild.dev.slnf`\r\n#### Before\r\n![image](https://user-images.githubusercontent.com/4691428/137396991-6ab3e11d-4709-4ef1-8bcb-3b50a93a59aa.png)\r\n\r\n#### after\r\n![image](https://user-images.githubusercontent.com/4691428/137396956-225f226d-ef2c-4023-8cf1-dcb45c5b7219.png)\r\n\r\n### Notes\r\nI intentionally didn't change every `return false` codepath to keep this fix contained. We can tackle other issues with ToolTask as they arise.",
  "state": "MERGED",
  "createdAt": "2021-10-15T20:15:52Z",
  "updatedAt": "2021-10-31T17:39:48Z",
  "closedAt": "2021-10-31T17:39:47Z",
  "mergedAt": "2021-10-31T17:39:47Z",
  "additions": 65,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "tooltask-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e06a995a76a8bd86f5734b76c064b6eed4454a9f",
          "message": "Tooltasks return !HasLoggedErrors when terminated",
          "committedDate": "2021-10-14T21:08:39Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "61f1a3ee87c82dbdf3e2b77a09095887c84714e9",
          "message": "Revert \"Tooltasks return !HasLoggedErrors when terminated\"\n\nThis reverts commit e06a995a76a8bd86f5734b76c064b6eed4454a9f.",
          "committedDate": "2021-10-18T21:52:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8598f2721446a94edaf8cb6276005b4570430072",
          "message": "Don't log MSB4181 when a task is cancelled.",
          "committedDate": "2021-10-18T21:53:03Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1650c0c9bb0b362c2674d1b31ff47504a0f940c2",
          "message": "Tidy up MSB4181 conditions",
          "committedDate": "2021-10-19T22:00:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "997c70370a3d61eaa0807157fee5c8b2db73dfe8",
          "message": "Add regression test",
          "committedDate": "2021-10-22T19:46:12Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This definitely solves the problem but I'm not sure it's conceptually right: the task was cancelled before completion, so shouldn't it return `false` as in `I did not succeed`?\r\n\r\nIs the \"was cancellation requested\" state available at the time when we check failure/has-logged-error and log the new message?",
              "createdAt": "2021-10-18T14:06:41Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> Is the \"was cancellation requested\" state available at the time when we check failure/has-logged-error and log the new message?\r\n\r\nThis is the code that logs the warning\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs#L939-L949\r\n\r\nCan a task be cancelled outside of the user's control? That's not something I considered when writing this.\r\n\r\nIt really depends how we want to view this task. I see a tooltask being (manually) cancelled as \"I didn't fail, so as long as I didn't log an error I'm good\"",
              "createdAt": "2021-10-18T16:45:00Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I was thinking more like wrapping a `if (!_cancellationToken.IsCancellationRequested)` around the actual error message here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/a7d579050450d7ee8c156cd652af18ee42b3570c/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L940-L958\r\n\r\n(but I didn't validate that that actually worked).\r\n\r\nMy mental model for a task is \"return `true`: everything completed satisfactorily. return `false`: something somewhere went wrong\". But it's a bit ambiguous.",
              "createdAt": "2021-10-18T16:52:40Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> My mental model for a task is \"return true: everything completed satisfactorily. return false: something somewhere went wrong\". But it's a bit ambiguous.\r\n\r\nI'm a bit confused here. The [RemoveDir](https://github.com/dotnet/msbuild/pull/6933) change is a good example. It used to return true only if all the directories were successfully deleted. That PR is pushing for having it return true even if some directories weren't deleted, so long as we didn't log an error. which is somewhere in the middle of `\"return true: everything completed satisfactorily. return false: something somewhere went wrong\"`\r\n\r\nI like your suggested solution better though since it's less break-y, so I'll give that a shot.",
              "createdAt": "2021-10-18T17:18:10Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Your idea works \ud83d\ude80 and avoids a fundamental change to all tooltasks. Not exactly sure how to test this though, my local test runs a sleep.exe that wouldn't exist in a unit test. Any ideas?",
              "createdAt": "2021-10-18T21:54:19Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "We have a helper for that, try something like:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/a7d579050450d7ee8c156cd652af18ee42b3570c/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs#L1523-L1533",
              "createdAt": "2021-10-18T22:00:12Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -1522,7 +1522,7 @@ public override bool Execute()\n                 // Raise a comment event to notify that the process completed\n                 if (_terminatedTool)\n                 {\n-                    return false;\n+                    return !Log.HasLoggedErrors;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the right place for this _here_ or in the big ugly chained if above this level?",
              "createdAt": "2021-10-18T22:01:45Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -949,7 +949,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n \n                         taskLoggingContext.LogComment(MessageImportance.Normal, \"ErrorConvertedIntoWarning\");\n                     }\n-                    else\n+                    else if (!(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I was hoping to avoid making that chain worse, but you're right. A `WarnAndContinue` Exec task would log MSB4181 as a warning if it was cancelled.",
              "createdAt": "2021-10-19T21:41:15Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -949,7 +949,7 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta\n \n                         taskLoggingContext.LogComment(MessageImportance.Normal, \"ErrorConvertedIntoWarning\");\n                     }\n-                    else\n+                    else if (!(_cancellationToken.CanBeCanceled && _cancellationToken.IsCancellationRequested))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}