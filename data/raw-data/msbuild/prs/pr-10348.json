{
  "number": 10348,
  "title": "Fix logging context validity check",
  "body": "Adds diagnostics for #10342\r\n\r\n### Context\r\nAttempted logging with invalid context had cryptic error message. It could happen on AssemblyLoadTracker which should be just a transient error.\r\n\r\nThe exception can be found in the telemetry even in the past - the recent changes only increased likelyhood.\r\n\r\n### Changes Made\r\n* Improved logging\r\n* Added resiliency to AssemblyLoadTracker\r\n",
  "state": "MERGED",
  "createdAt": "2024-07-09T17:20:35Z",
  "updatedAt": "2024-07-11T11:18:49Z",
  "closedAt": "2024-07-11T11:18:48Z",
  "mergedAt": "2024-07-11T11:18:47Z",
  "additions": 26,
  "deletions": 17,
  "changedFiles": 3,
  "headRefName": "bugfix/context-invalid",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "95a2e8de062912e2c57102f3a829e1bc411984ae",
          "message": "Fix logging context validity check",
          "committedDate": "2024-07-11T07:13:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@akoeplinger please note that the bug is not fixed. It'd be nice to see updated evidence once this flows into sdk and that sdk is being applied to VMR build. How often do you update the sdk there?",
        "createdAt": "2024-07-11T07:16:16Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek we can do it on demand as needed. I can also patch/replace any dll in the SDK which is used to build as part of a PR so we can run a couple builds until we hit the issue.",
        "createdAt": "2024-07-11T08:05:19Z",
        "author": {
          "login": "akoeplinger"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "can be simplified since ErrorUtilities.VerifyThrow already checks the value of _isValid.\r\n```suggestion\r\n\r\n            ErrorUtilities.VerifyThrow(_isValid, \"LoggingContext (type: {0}) was not valid during logging attempt.\",\r\n                this.GetType());\r\n```",
              "createdAt": "2024-07-10T07:42:42Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingContext.cs",
              "diffHunk": "@@ -309,8 +309,17 @@ internal void LogFatalBuildError(Exception exception, BuildEventFileInfo file)\n         /// <param name=\"filePath\">Path to response file</param>\n         internal void LogIncludeFile(string filePath)\n         {\n-            ErrorUtilities.VerifyThrow(IsValid, \"must be valid\");\n+            CheckValidity();\n             _loggingService.LogIncludeFile(BuildEventContext, filePath);\n         }\n+\n+        private protected void CheckValidity()\n+        {\n+            if (!_isValid)\n+            {\n+                ErrorUtilities.VerifyThrow(_isValid, \"LoggingContext (type: {0}) was not valid during logging attempt.\",\n+                    this.GetType());\n+            }",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "This requires always materializing the `Type` before the call (we don't have interpolated string handlers in our ErrorUtilities at the moment), so I'd fix it the other way\r\n\r\n```suggestion\r\n            if (!_isValid)\r\n            {\r\n                ErrorUtilities.ThrowInternalError(\"LoggingContext (type: {0}) was not valid during logging attempt.\",\r\n                    this.GetType());\r\n            }\r\n```",
              "createdAt": "2024-07-10T13:48:48Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingContext.cs",
              "diffHunk": "@@ -309,8 +309,17 @@ internal void LogFatalBuildError(Exception exception, BuildEventFileInfo file)\n         /// <param name=\"filePath\">Path to response file</param>\n         internal void LogIncludeFile(string filePath)\n         {\n-            ErrorUtilities.VerifyThrow(IsValid, \"must be valid\");\n+            CheckValidity();\n             _loggingService.LogIncludeFile(BuildEventContext, filePath);\n         }\n+\n+        private protected void CheckValidity()\n+        {\n+            if (!_isValid)\n+            {\n+                ErrorUtilities.VerifyThrow(_isValid, \"LoggingContext (type: {0}) was not valid during logging attempt.\",\n+                    this.GetType());\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you clarify _why_ the context doesn't have to be valid though? I'm afraid I don't understand.",
              "createdAt": "2024-07-10T13:49:35Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs",
              "diffHunk": "@@ -171,7 +171,8 @@ private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs a\n             if (_loggingContext?.BuildEventContext != null)\n             {\n                 buildArgs.BuildEventContext = _loggingContext.BuildEventContext;\n-                _loggingContext.LogBuildEvent(buildArgs);\n+                // Circumvent the logging context validity check since this can happen asynchronously, when the context is being invalidated.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Let's split this from the actuall diag improvement - as then we'll have more info (hopefully) to validate/negate the theory.\r\n\r\nSo I'll remove this change, merge this, remove fixing indication (as bug will remain) and hpefully very soon we'll have more data to support fix or further investigation.",
              "createdAt": "2024-07-11T07:12:17Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs",
              "diffHunk": "@@ -171,7 +171,8 @@ private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs a\n             if (_loggingContext?.BuildEventContext != null)\n             {\n                 buildArgs.BuildEventContext = _loggingContext.BuildEventContext;\n-                _loggingContext.LogBuildEvent(buildArgs);\n+                // Circumvent the logging context validity check since this can happen asynchronously, when the context is being invalidated.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}