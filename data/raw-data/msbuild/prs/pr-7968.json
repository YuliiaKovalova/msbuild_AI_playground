{
  "number": 7968,
  "title": "Server shouldn't start during interactive build",
  "body": "Fixes #7964\r\n\r\n### Context\r\nMSBuild server doesn't play well with interactive builds.\r\n\r\n### Changes Made\r\nNumber of scenarios when server is not used, was extended.\r\nI also moved `DebuggerLaunchCheck` to start of `Main` to improve debuggability of code before the check method is called.\r\n\r\n### Testing\r\nFunc test added.\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-14T11:56:21Z",
  "updatedAt": "2022-09-15T08:52:14Z",
  "closedAt": "2022-09-15T08:48:21Z",
  "mergedAt": "2022-09-15T08:48:21Z",
  "additions": 56,
  "deletions": 5,
  "changedFiles": 2,
  "headRefName": "dev/mipavlik/fix-interactive-build",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "Priority:0"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2fd07c2b5f5d1ab67bd200d98183685469f07bc4",
          "message": "Server shouldn't start during interactive build",
          "committedDate": "2022-09-14T11:46:23Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac4dfcc7123bb247e9402fe2b0c64d36264dc450",
          "message": "Removed unnecessary exception throw",
          "committedDate": "2022-09-14T14:54:00Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad1891b90c2e25ca52932c2934b826cbb924468f",
          "message": "Simplified parameter test",
          "committedDate": "2022-09-15T08:02:27Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it worth throwing here? My inclination would be to make this best-effort and let the \"real parse\" do the throwing.",
              "createdAt": "2022-09-14T13:46:21Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -325,6 +327,37 @@ string[] commandLine\n             return canRunServer;\n         }\n \n+        private static bool IsInteractiveBuild(CommandLineSwitches commandLineSwitches)\n+        {\n+            // In 16.0 we added the /interactive command-line argument so the line below keeps back-compat\n+            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Interactive) &&\n+                ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Interactive], true, \"InvalidInteractiveValue\"))\n+            {\n+                return true;\n+            }\n+\n+            // In 15.9 we added support for the global property \"NuGetInteractive\" to allow SDK resolvers to be interactive.\n+            foreach (string parameter in commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Property])\n+            {\n+                // split each <prop>=<value> string into 2 pieces, breaking on the first = that is found\n+                string[] parameterSections = parameter.Split(s_propertyValueSeparator, 2);\n+\n+                // check that the property name is not blank, and the property has a value\n+                CommandLineSwitchException.VerifyThrow((parameterSections[0].Length > 0) && (parameterSections.Length == 2), \"InvalidPropertyError\", parameter);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Make sense. I moved conditions to `if` statement to skip malformed parameters and not throw in that case.",
              "createdAt": "2022-09-14T14:56:18Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -325,6 +327,37 @@ string[] commandLine\n             return canRunServer;\n         }\n \n+        private static bool IsInteractiveBuild(CommandLineSwitches commandLineSwitches)\n+        {\n+            // In 16.0 we added the /interactive command-line argument so the line below keeps back-compat\n+            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Interactive) &&\n+                ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Interactive], true, \"InvalidInteractiveValue\"))\n+            {\n+                return true;\n+            }\n+\n+            // In 15.9 we added support for the global property \"NuGetInteractive\" to allow SDK resolvers to be interactive.\n+            foreach (string parameter in commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Property])\n+            {\n+                // split each <prop>=<value> string into 2 pieces, breaking on the first = that is found\n+                string[] parameterSections = parameter.Split(s_propertyValueSeparator, 2);\n+\n+                // check that the property name is not blank, and the property has a value\n+                CommandLineSwitchException.VerifyThrow((parameterSections[0].Length > 0) && (parameterSections.Length == 2), \"InvalidPropertyError\", parameter);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if we should stop respecting the property form, behind a changewave. Doesn't have to be in this PR though.",
              "createdAt": "2022-09-14T13:56:28Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -325,6 +327,37 @@ string[] commandLine\n             return canRunServer;\n         }\n \n+        private static bool IsInteractiveBuild(CommandLineSwitches commandLineSwitches)\n+        {\n+            // In 16.0 we added the /interactive command-line argument so the line below keeps back-compat\n+            if (commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.Interactive) &&\n+                ProcessBooleanSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.Interactive], true, \"InvalidInteractiveValue\"))\n+            {\n+                return true;\n+            }\n+\n+            // In 15.9 we added support for the global property \"NuGetInteractive\" to allow SDK resolvers to be interactive.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}