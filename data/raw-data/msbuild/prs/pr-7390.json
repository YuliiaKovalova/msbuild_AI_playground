{
  "number": 7390,
  "title": "Add more events to SDK resolution",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/7136\r\n\r\n### Context\r\nSecond attempt at adding more ETW events for SDK resolution. \r\n\r\n### Changes Made\r\n* Add events around the `CachingSdkResolverService`\r\n* Add flag tracking whether or not an SDK resolution came from cache\r\n* Add note to `MSBuildEventSource` reminding us that you must rev the version of an event when changing the method signature\r\n\r\n### Testing\r\nRan locally built `msbuild.exe` with `perfview` and verified the events show up properly.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-02-14T20:52:27Z",
  "updatedAt": "2022-03-28T16:10:16Z",
  "closedAt": "2022-03-15T18:22:08Z",
  "mergedAt": "2022-03-15T18:22:07Z",
  "additions": 46,
  "deletions": 13,
  "changedFiles": 4,
  "headRefName": "more-sdkresolver-events",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "29e5146baf4a8ea00c16ec746337abd86e123c0c",
          "message": "Add more SDK resolver events",
          "committedDate": "2022-02-22T21:35:54Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I wonder: should we expose an IsEnabled that wraps our own functionality there?\r\n\r\nThe couple of new events just end up logging the same data (project name, solution path, etc), do you see one that is of particular concern to be expensive?\r\n\r\nI am not 100% happy with how I'm tracking whether or not a particular resolution is cached.  I'm introducing a new `bool` and setting it in the `Lazy<T>` which will capture context and potentially be slower.  But I **really** want to know how many SDKs are actually looked up vs cached.  Does anyone have any bright ideas?  I thought about just not firing the `Stop` event for a cached result and only for actual look ups, but then we can't measure how long it took to get a cached result in the case where a thread is waiting for a lock due to simultaneous SDK resolutions.  My current implementation _works_ but it smells fishy to me...",
        "createdAt": "2022-02-14T21:56:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> The couple of new events just end up logging the same data (project name, solution path, etc), do you see one that is of particular concern to be expensive?\r\n\r\nConstructing the single string will create garbage, but presumably not all that much. It's just concatenation of a bunch of already-existing stuff?",
        "createdAt": "2022-02-18T17:49:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Constructing the single string will create garbage, but presumably not all that much. It's just concatenation of a bunch of already-existing stuff?\r\n\r\nI'm confused, where is the code constructing a string out of other data?  Its just passing properties that come in from the SDK resolution APIs.  I'm assuming if tracing is off, the ETW APIs just no-op so we don't have to avoid calling them if tracing is off?  Or am completely wrong about all that? :confused:",
        "createdAt": "2022-02-18T17:52:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Its just passing properties that come in from the SDK resolution APIs. I'm assuming if tracing is off, the ETW APIs just no-op so we don't have to avoid calling them if tracing is off?\r\n\r\nThat's true, the ETW APIs are very lightweight if the events are disabled. However, the .NET runtime doesn't know about that, so it has to fully realize arguments\r\n\r\nThe case I'm trying to avoid is:\r\n\r\n```c#\r\n// In SDK resolver\r\n\r\nWriteEvent(s1 + s2 + s3);\r\n\r\n// or\r\n\r\nWriteEvent($\"Some formatting string with {holes} that {get} {filled}\");\r\n\r\n// or worst case\r\n\r\nWriteEvent(ExpensiveMethodThatDoesABunchOfWork());\r\n```",
        "createdAt": "2022-02-18T18:09:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah okay I totally understand, we don't want to do string formatting of any kind that will allocate just to call a method that no-ops.  I don't think any of the code paths I'm adding here are doing that, they all take existing objects and pass them directly to ETW APIs.  ",
        "createdAt": "2022-02-18T18:34:52Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Ah, I've been unclear: none of the APIs _in this PR_ are bad on this front. My question is: does this encourage/require bad behavior _in the resolvers_ because of the API shape we're exposing?",
        "createdAt": "2022-02-18T22:38:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Ah, I've been unclear: none of the APIs in this PR are bad on this front. My question is: does this encourage/require bad behavior in the resolvers because of the API shape we're exposing?\r\n\r\nOkay I finally understand what you mean.  That's a valid concern, callers could end up building expensive strings that aren't actually used.  My original implementation tried to accept `params object[] args` but that caused ETW schema errors.  I tried using `string[]` instead but that didn't work either.  I read through the documentation to see if there was any guidance and then I came to this realization:\r\n\r\n**The ETW API is not designed to allow external code to contribute to your events!**\r\n\r\nSo I'm removing all of the code around allowing SDK resolvers to contribute their own events.  Instead, I'll just add my own `EventSource` to the NuGet-based SDK resolver.  Events will still show up in the same trace as long as you specify the correct provider name.  And then I'll get to specify whatever data I want :)\r\n",
        "createdAt": "2022-02-22T21:35:18Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f",
              "createdAt": "2022-02-14T21:18:20Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -7,6 +7,9 @@ namespace Microsoft.Build.Eventing\n     /// <summary>\n     /// This captures information of how various key methods of building with MSBuild ran.\n     /// </summary>\n+    /// <remarks>\n+    /// Changes to existing event method signatures will not be reflected unless you update the <see cref=\"EventAttribute.Version\" /> property or assign a new event ID.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Logs a point-in-time event.\r\n```",
              "createdAt": "2022-02-14T21:20:47Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Logs the start of an operation.\r\n```",
              "createdAt": "2022-02-14T21:21:03Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEvent(string message)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(message);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Logs the completion of an operation.\r\n```",
              "createdAt": "2022-02-14T21:21:21Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEvent(string message)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEvent(message);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has started.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEventStart(string message)\n+        {\n+            MSBuildEventSource.Log.SdkResolverEventStart(message);\n+        }\n+\n+        /// <summary>\n+        /// Logs that an event when an operation has completed.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Small concern: there are now two meanings of `Log` in this class:\r\n\r\n1. Log a message that will show up in the MSBuild log.\r\n2. Emit an ETW event if configured.\r\n\r\nIs there a better name for the latter?",
              "createdAt": "2022-02-14T21:27:43Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEvent(string message)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I could use the same naming as ETW itself:\r\n* `WriteEvent()`\r\n* `WriteEventStart()`\r\n* `WriteEventStop()`\r\n\r\nWhat do you think?",
              "createdAt": "2022-02-15T17:29:35Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEvent(string message)",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I like that better.",
              "createdAt": "2022-02-15T19:28:03Z",
              "path": "src/Framework/Sdk/SdkLogger.cs",
              "diffHunk": "@@ -17,5 +19,32 @@ public abstract class SdkLogger\n         /// <param name=\"message\">Message string.</param>\n         /// <param name=\"messageImportance\">Optional message importances. Default to low.</param>\n         public abstract void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low);\n+\n+        /// <summary>\n+        /// Logs that an event.\n+        /// </summary>\n+        /// <param name=\"message\">A message to associate with the event.</param>\n+        public virtual void LogEvent(string message)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nAlphabetized\r\nIt's reasonable to want thinks that are related to each other to be together, in which case I'd be open to renaming this \"SdkResolverServiceResolveSdkFromCache\"",
              "createdAt": "2022-02-15T19:23:55Z",
              "path": "documentation/specs/event-source.md",
              "diffHunk": "@@ -34,6 +34,8 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major\n | Save | Saves a project to the file system if dirty, creating directories as necessary. |\n | SdkResolverResolveSdk | A single SDK resolver is called. |\n | SdkResolverServiceInitialize | Initializes SDK resolvers. |\n+| CachedSdkResolverServiceResolveSdk | The caching SDK resolver service is resolving an SDK. |",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Actually, the name is already in this list. I must have messed it up when I did the revert+changes, so I'm going to undo this.",
              "createdAt": "2022-02-18T17:31:28Z",
              "path": "documentation/specs/event-source.md",
              "diffHunk": "@@ -34,6 +34,8 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major\n | Save | Saves a project to the file system if dirty, creating directories as necessary. |\n | SdkResolverResolveSdk | A single SDK resolver is called. |\n | SdkResolverServiceInitialize | Initializes SDK resolvers. |\n+| CachedSdkResolverServiceResolveSdk | The caching SDK resolver service is resolving an SDK. |",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this still a thing?",
              "createdAt": "2022-02-28T16:26:33Z",
              "path": "documentation/specs/event-source.md",
              "diffHunk": "@@ -34,6 +34,7 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major\n | Save | Saves a project to the file system if dirty, creating directories as necessary. |\n | SdkResolverResolveSdk | A single SDK resolver is called. |\n | SdkResolverServiceInitialize | Initializes SDK resolvers. |\n+| SdkResolverEvent | An SDK resolver logs an event. |",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}