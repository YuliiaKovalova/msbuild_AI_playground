{
  "number": 6890,
  "title": "Find dotnet.exe instead of <name>.exe when building out-of-proc using MSBuildLocator",
  "body": "Fixes #6782\r\n\r\n### Context\r\nWhen using MSBuildLocator, the first process you start is named after your app, not dotnet or msbuild, yet it still loads MSBuild assemblies. When it then starts an out-of-proc build on core, it tries to use the current host, which is normally dotnet.exe, but in this case is <yourApp>.exe. MSBuild can't find it to connect, so it assumes it launches another node. It should stop after that, but it just keeps going and makes hundreds or thousands of nodes until your computer crashes. That is bad. This defaults to looking for a nearby dotnet.exe (if you're on core) and uses that instead, falling back to <yourApp>.exe only on failure. This should handle any case in which you find MSBuild in an sdk installation.\r\n\r\n### Changes Made\r\nLook for a dotnet.exe instead of your current host.\r\n\r\n### Testing\r\nBroke repro.\r\n\r\n### Notes\r\nDo not try to reproduce this naively. Your computer will be unhappy.\r\n\r\nAlso, I suspect this may have been the cause of my 9/10 comment [here (internal link)](https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/1371725).",
  "state": "MERGED",
  "createdAt": "2021-09-24T23:41:53Z",
  "updatedAt": "2021-09-30T17:20:31Z",
  "closedAt": "2021-09-30T17:20:31Z",
  "mergedAt": "2021-09-30T17:20:30Z",
  "additions": 20,
  "deletions": 17,
  "changedFiles": 1,
  "headRefName": "wrong-host",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1561f8ba0afce9fccc404453b855680e3c95f371",
          "message": "Find dotnet.exe instead of <name>.exe\n\nFixes #6782",
          "committedDate": "2021-09-24T23:35:03Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b231c555ccf9ca72eab05a265a3404b1bba86f19",
          "message": "Move logic into GetCurrentHost",
          "committedDate": "2021-09-27T18:11:45Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24b18d972974bf16f5a8c2048a8845214b1a72be",
          "message": "Add missing space",
          "committedDate": "2021-09-29T16:53:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it make sense to push this into `GetCurrentHost()` so we only have to do the file-exists check once?",
              "createdAt": "2021-09-27T14:30:52Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -480,8 +479,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n             if (!NativeMethodsShared.IsMono)\n             {\n                 // Run the child process with the same host as the currently-running process.\n-                exeName = GetCurrentHost();\n-                commandLineArgs = \"\\\"\" + msbuildLocation + \"\\\" \" + commandLineArgs;\n+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(exeName, 2), \"dotnet.exe\");\n+                exeName = File.Exists(dotnetExe) ? dotnetExe : GetCurrentHost();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There is a lot going on in this method:\r\n\r\n* On Windows, it uses native methods to launch the process so the path to `MSBuild.exe` needs to be prepended to the command-line arguments.  @rainersigwald do you know why we use a different method to launch the process?  The code doesn't seem to need to as far as I can tell.  Maybe we can get rid of it?\r\n* For .NET Core, the command-line arguments must be prepended with the the path to `MSBuild.dll` and the EXE is `dotnet`.\r\n\r\nI see some missing logic in the current implementation:\r\n\r\n* On Windows, its `dotnet.exe`, on non-Windows its just `dotnet`\r\n* The path to `MSBuild.dll` is prepended twice on Windows (which technically works but sees dirty)\r\n* `GetCurrentHost()` is only ever correct if you run `dotnet` directly so using it as a fallback seems not great\r\n* \r\n\r\nI would do the following:\r\n\r\n1. Make a method like `GetNodeExe()` that has all of the logic to find the path to the executable that represents the node, so `MSBuild.exe` on .NET Framework, `dotnet.exe` or `dotnet` for .NET Core.\r\n2. Make a method like `GetNodeArguments()` that adjusts the command-line arguments\r\n  Prepend `MSBuild.exe` on Windows since its using native APIs\r\n  Prepend `MSBuild.dll` on .NET Core\r\n\r\nIn my opinion that would simplify this method and make it easier to rationalize what its doing.  You could also make these two methods `internal` and write a unit test to verify they return the correct values.\r\n  \r\n",
              "createdAt": "2021-09-27T14:53:31Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -480,8 +479,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n             if (!NativeMethodsShared.IsMono)\n             {\n                 // Run the child process with the same host as the currently-running process.\n-                exeName = GetCurrentHost();\n-                commandLineArgs = \"\\\"\" + msbuildLocation + \"\\\" \" + commandLineArgs;\n+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(exeName, 2), \"dotnet.exe\");",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "As far as falling back to GetCurrentHost, I agree it isn't terribly likely to succeed, but I don't think we have a better option. There's a chance someone has fancy logic in their project to make it work, and if we don't fall back to GetCurrentHost, we would break that.",
              "createdAt": "2021-09-27T18:06:21Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -480,8 +479,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n             if (!NativeMethodsShared.IsMono)\n             {\n                 // Run the child process with the same host as the currently-running process.\n-                exeName = GetCurrentHost();\n-                commandLineArgs = \"\\\"\" + msbuildLocation + \"\\\" \" + commandLineArgs;\n+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(exeName, 2), \"dotnet.exe\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm pretty sure if you don't fall back to current-host our own dogfood builds will fail (they're invoked via `dotnet.exe path\\to\\some\\msbuild.dll`).",
              "createdAt": "2021-09-27T18:26:55Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -480,8 +479,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n             if (!NativeMethodsShared.IsMono)\n             {\n                 // Run the child process with the same host as the currently-running process.\n-                exeName = GetCurrentHost();\n-                commandLineArgs = \"\\\"\" + msbuildLocation + \"\\\" \" + commandLineArgs;\n+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(exeName, 2), \"dotnet.exe\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> GetCurrentHost() is only ever correct if you run dotnet directly so using it as a fallback seems not great\r\n\r\nSorry what I meant was having this method here only to use as a fallback, when the entirety of the logic could live inside of it.  I did not mean to get rid of the fallback all together.  To have solid logic here that then falls back to a method seems clunky is all.",
              "createdAt": "2021-09-27T20:10:15Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -480,8 +479,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n             if (!NativeMethodsShared.IsMono)\n             {\n                 // Run the child process with the same host as the currently-running process.\n-                exeName = GetCurrentHost();\n-                commandLineArgs = \"\\\"\" + msbuildLocation + \"\\\" \" + commandLineArgs;\n+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(exeName, 2), \"dotnet.exe\");",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These could be moved into the `else` block below where its actually used, unless we get rid of the different ways of launching the process in which case this can just go away.",
              "createdAt": "2021-09-27T14:57:50Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -466,8 +465,8 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)\n                 creationFlags |= BackendNativeMethods.CREATE_NEW_CONSOLE;\n             }\n \n-            BackendNativeMethods.SECURITY_ATTRIBUTES processSecurityAttributes = new BackendNativeMethods.SECURITY_ATTRIBUTES();\n-            BackendNativeMethods.SECURITY_ATTRIBUTES threadSecurityAttributes = new BackendNativeMethods.SECURITY_ATTRIBUTES();\n+            BackendNativeMethods.SECURITY_ATTRIBUTES processSecurityAttributes = new();",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      }
    ]
  }
}