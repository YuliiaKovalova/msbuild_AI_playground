{
  "number": 9326,
  "title": "Use distinct signal to wait to cancel the submission",
  "body": "Fixes #9298\r\n\r\n### Context\r\nWaiting using `Thread.Sleep(500)` in the test is unreliable.\r\n\r\n### Changes Made\r\nWait until the specified log appears rather than `Thread.Sleep(500)`.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-10-13T07:49:28Z",
  "updatedAt": "2023-10-23T01:54:19Z",
  "closedAt": "2023-10-23T01:54:13Z",
  "mergedAt": "2023-10-23T01:54:13Z",
  "additions": 16,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "flakytest9298",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2486fa6726c8cc418900f1b206e343cb06971251",
          "message": "Use distinct signal to wait to cancel the submission",
          "committedDate": "2023-10-13T07:38:23Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eff370ec0c823fd6944ff1660efbadd9ba8d2aaa",
          "message": "Registering log event handler to set the signal instead of iterating all log events",
          "committedDate": "2023-10-19T07:47:20Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b7bceb2725d5841131c5bead95e13d815e611f5c",
          "message": "Add timeout to the wait",
          "committedDate": "2023-10-20T04:01:59Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "While accomplishing the purpose, it feels superfluous to iterate all the log events over and over again (I guess it risk getting the collection modified exception as well).\r\n\r\nIt should be easy to check only the new events (if any) on each try",
              "createdAt": "2023-10-18T12:44:53Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -168,8 +170,18 @@ public void CanceledTasksDoNotLogMSB4181()\n                 BuildRequestData data = new BuildRequestData(project.CreateProjectInstance(), new string[] { \"test\" }, collection.HostServices);\n                 manager.BeginBuild(_parameters);\n                 BuildSubmission asyncResult = manager.PendBuildRequest(data);\n+                string unescapedSleepCommand = sleepCommand.Replace(\"&quot;\", \"\\\"\").Replace(\"&gt;\", \">\");\n+                Func<bool> isSleepCommandExecuted = () => logger.AllBuildEvents.Any(a => unescapedSleepCommand.Equals(a.Message));",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It seems [`AdditionalHandlers`](https://github.com/dotnet/msbuild/blob/f4fa6bde775a3f7cbb2bb90a349ee5fc759114f3/src/Shared/UnitTests/MockLogger.cs#L248C53-L248C71) can be leveraged here - by registering a handler that would set some waithandle upon receiving the required log entry",
              "createdAt": "2023-10-18T12:46:47Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -168,8 +170,18 @@ public void CanceledTasksDoNotLogMSB4181()\n                 BuildRequestData data = new BuildRequestData(project.CreateProjectInstance(), new string[] { \"test\" }, collection.HostServices);\n                 manager.BeginBuild(_parameters);\n                 BuildSubmission asyncResult = manager.PendBuildRequest(data);\n+                string unescapedSleepCommand = sleepCommand.Replace(\"&quot;\", \"\\\"\").Replace(\"&gt;\", \">\");\n+                Func<bool> isSleepCommandExecuted = () => logger.AllBuildEvents.Any(a => unescapedSleepCommand.Equals(a.Message));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just to be on a sure side - we should probably add some timeout here (same to the `WaitOne` below).\r\nAs in case of build failure this might probably just hang.\r\n\r\nOther than that - simple and effective! ;-)",
              "createdAt": "2023-10-19T07:56:21Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -169,7 +179,7 @@ public void CanceledTasksDoNotLogMSB4181()\n                 manager.BeginBuild(_parameters);\n                 BuildSubmission asyncResult = manager.PendBuildRequest(data);\n                 asyncResult.ExecuteAsync(null, null);\n-                Thread.Sleep(500);\n+                waitCommandExecuted.WaitOne();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}