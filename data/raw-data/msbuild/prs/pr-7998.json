{
  "number": 7998,
  "title": "Log each inner exception of an aggregate exception in TaskLoggingHelper.LogErrorFromException()",
  "body": "Fixes #7985 \r\n\r\n### Context\r\n`TaskLoggingHelper.LogErrorFromException()` does not currently take into account the relatively new `AggregateException` which has inner exceptions but an outer exception with very little details.\r\n\r\n### Changes Made\r\nI've updated `TaskLoggingHelper.LogErrorFromException()` to check if the specified exception is an `AggregateException` and call the method again for each inner exception, respecting all of the arguments passed in around showing details or a stack trace.\r\n\r\n### Testing\r\nA unit test was added\r\n\r\n### Notes\r\nUnfortunately, I can't add the other improvement around an `InvalidProjectFileException` since `TaskLoggingHelper` is compiled into `Microsoft.Build.Utilities.Core` and that assembly does not reference `Microsoft.Build.dll` so it doesn't have access to the `InvalidProjectFileException` class \ud83d\ude22 ",
  "state": "MERGED",
  "createdAt": "2022-09-21T20:19:37Z",
  "updatedAt": "2022-10-10T14:10:48Z",
  "closedAt": "2022-10-10T14:10:48Z",
  "mergedAt": "2022-10-10T14:10:48Z",
  "additions": 36,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "logerrorfromexception-aggregateexception",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "23b5c095246572d355cd7eb9e2b4171fd1a0df48",
          "message": "Log each inner exception of an aggregate exception in TaskLoggingHelper.LogErrorFromException()",
          "committedDate": "2022-09-21T20:16:07Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Unfortunately, I can't add the other improvement around an InvalidProjectFileException since TaskLoggingHelper is compiled into Microsoft.Build.Utilities.Core and that assembly does not reference Microsoft.Build.dll so it doesn't have access to the InvalidProjectFileException class \ud83d\ude22\r\n\r\nThe only way to make it work with the `InvalidProjectFileException` natively is to let `Microsoft.Build.Utilities.Core` have a compile-time reference to `Microsoft.Build` which I don't think will happen any time soon.  For some reasons we didn't want that dependency so `TaskLoggingHelper` and a few other classes are compiled into each assembly.\r\n\r\nI could use **Reflection** if anyone would approve of that \ud83d\ude08 ",
        "createdAt": "2022-09-21T20:32:13Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I'm curious how much work it'd be to make M.B.Utilities reference M.B. Probably not worth it.",
        "createdAt": "2022-09-21T20:34:36Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I'm curious how much work it'd be to make M.B.Utilities reference M.B. Probably not worth it.\r\n\r\nYou'd need to have all of these compiled only into Microsoft.Build:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/cc3db358d34ad4cd1ec0c67e17582d7ca2a15040/src/Utilities/Microsoft.Build.Utilities.csproj#L43-L149\r\n\r\nThen you'd need to update the ones that compile themselves into a different namespace depending on the project:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/cc3db358d34ad4cd1ec0c67e17582d7ca2a15040/src/Shared/TaskLoggingHelper.cs#L21-L25\r\n\r\nI have this memory of trying it years ago but I can't remember now exactly why `Microsoft.Build` and `Microsoft.Build.Utilities.Core` aren't allowed to be friends.  I found [this issue](https://github.com/dotnet/msbuild/issues/1000) which explains a little of what I remember.  But that was six years ago, maybe its time for these DLLs to know about each other?",
        "createdAt": "2022-09-21T20:43:54Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I love the idea of removing all those extra compilations. Adding new dependencies between our assemblies can be very efficient, but that issue reminded me of what happened when I added a direct reference to Framework in SolutionFile.cs: someone had been calling Parse without loading Framework, and it suddenly started needing Framework --> their scenario crashed. I'd love to add the dependency, but now I'm worried it would be ugly work to make a breaking change we'd end up reverting.",
        "createdAt": "2022-09-22T17:35:09Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}