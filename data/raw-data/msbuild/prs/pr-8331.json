{
  "number": 8331,
  "title": "[FancyLogger] Improve render performance",
  "body": "Fixes #\r\n\r\n### Context\r\nA design goal for the FancyLogger is not to have too big of an impact on performance, especially considering all the formatting, layout and constant updating on the buffer. This PR reduces render and build time when using the logger by half.\r\n\r\n### Changes Made\r\n- Rendering now occurs in a completely separate project to the build, meaning it doesn't block\r\n- Added indicators to both `FancyLoggerProjectNode` and `FancyLoggerBuffer` to avoid re-rendering when no changes occured\r\n- Delimited for loop in `FancyLoggerBuffer.Render()` to only perform operations on the lines that are visible on the screen\r\n- In `FancyLoggerBuffer.Render()` text is stored in a string and then logged to the console all at once to avoid laggy behavior\r\n- Improved performance for finding lines by Id\r\n- Code refactoring\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-21T03:48:17Z",
  "updatedAt": "2023-01-24T09:41:11Z",
  "closedAt": "2023-01-24T09:41:10Z",
  "mergedAt": "2023-01-24T09:41:10Z",
  "additions": 122,
  "deletions": 92,
  "changedFiles": 5,
  "headRefName": "edvilme-flg-render",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f8f2d2381fbf15c276433973ab63cdb713b8d17",
          "message": "Improved performance\n\nAdded indicators to buffer and project nodes to avoid unnecessary rerenders and operations\nDelimited foreach loop in FancyLoggerBuffer.Render() to avoid unnecessary operations\nText is logged to the console all at once\nReduced render time significantly",
          "committedDate": "2023-01-21T03:42:27Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "554e6ed237a1676cdc3fb4e2f1b6503726864e6b",
          "message": "Addressed review comments",
          "committedDate": "2023-01-23T23:27:15Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a8e2f6c3d19f8d79f1cd048da07b53ac2ee8d6ab",
          "message": "Improved ANSIWrap\n\nAdded static Regex, used spans instead of strings, used Regex.Match(string, position)",
          "committedDate": "2023-01-24T01:06:15Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7324f5220d02e2e7e794c97cb22cf85edd16816",
          "message": "Add comments",
          "committedDate": "2023-01-24T02:58:55Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald If I understand correctly, removing this might cause breaking changes and the tests to fail, right?",
              "createdAt": "2023-01-21T03:52:28Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -206,15 +172,10 @@ public static int GetLineIndexById(int lineId)\n         }\n \n         // Update line\n+        // TODO: Remove. Use line.Text instead\n         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "I'm not sure I understand this, what is the context?",
              "createdAt": "2023-01-23T17:30:41Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -206,15 +172,10 @@ public static int GetLineIndexById(int lineId)\n         }\n \n         // Update line\n+        // TODO: Remove. Use line.Text instead\n         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`UpdateLine` was used to update the contents of a line by finding its Id. However I realized this is very slow and it would be more straightforward to just update the Text property of the line. Hence, I would like to delete this method but wasn't sure if doing so would be a breaking change. \r\nI think it won't matter after we make everything internal. ",
              "createdAt": "2023-01-23T20:06:05Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -206,15 +172,10 @@ public static int GetLineIndexById(int lineId)\n         }\n \n         // Update line\n+        // TODO: Remove. Use line.Text instead\n         public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you pull these contents into a named method please? It's a bit long IMO to be in a lambda.",
              "createdAt": "2023-01-23T17:25:22Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -44,11 +45,48 @@ public void Initialize(IEventSource eventSource)\n             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n             // Cancelled\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n-            // Initialize FancyLoggerBuffer\n-            FancyLoggerBuffer.Initialize();\n-            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n-            FancyLoggerBuffer.WriteNewLine(string.Empty);\n-            FancyLoggerBuffer.Render();\n+            \n+            Task.Run(() =>\n+            {",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ContinueWith is a bit surprising here. Is there a straightforward `async`/`await` implementation, or can you comment the need for this more advanced mechanism?",
              "createdAt": "2023-01-23T17:26:49Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -44,11 +45,48 @@ public void Initialize(IEventSource eventSource)\n             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n             // Cancelled\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n-            // Initialize FancyLoggerBuffer\n-            FancyLoggerBuffer.Initialize();\n-            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n-            FancyLoggerBuffer.WriteNewLine(string.Empty);\n-            FancyLoggerBuffer.Render();\n+            \n+            Task.Run(() =>\n+            {\n+                // Initialize FancyLoggerBuffer\n+                FancyLoggerBuffer.Initialize();\n+                // TODO: Fix. First line does not appear at top. Leaving empty line for now\n+                FancyLoggerBuffer.WriteNewLine(string.Empty);\n+                // First render\n+                FancyLoggerBuffer.Render();\n+                int i = 0;\n+                // Rerender periodically\n+                while (!FancyLoggerBuffer.IsTerminated)\n+                {\n+                    i++;\n+                    // Delay by 1/60 seconds\n+                    Task.Delay((i / 60) * 1_000).ContinueWith((t) =>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, not new to this PR so I still want to know about this but not blocking.",
              "createdAt": "2023-01-23T17:34:54Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -44,11 +45,48 @@ public void Initialize(IEventSource eventSource)\n             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n             // Cancelled\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n-            // Initialize FancyLoggerBuffer\n-            FancyLoggerBuffer.Initialize();\n-            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n-            FancyLoggerBuffer.WriteNewLine(string.Empty);\n-            FancyLoggerBuffer.Render();\n+            \n+            Task.Run(() =>\n+            {\n+                // Initialize FancyLoggerBuffer\n+                FancyLoggerBuffer.Initialize();\n+                // TODO: Fix. First line does not appear at top. Leaving empty line for now\n+                FancyLoggerBuffer.WriteNewLine(string.Empty);\n+                // First render\n+                FancyLoggerBuffer.Render();\n+                int i = 0;\n+                // Rerender periodically\n+                while (!FancyLoggerBuffer.IsTerminated)\n+                {\n+                    i++;\n+                    // Delay by 1/60 seconds\n+                    Task.Delay((i / 60) * 1_000).ContinueWith((t) =>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes. AFAIK `await` pauses the execution of the task meaning that keyboard input would also be delayed. This way it is deferred (hence the i) so the input can be handled with no delay.\r\nI might be wrong though, I am thinking of this similar to javascript promises. ",
              "createdAt": "2023-01-23T20:08:35Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -44,11 +45,48 @@ public void Initialize(IEventSource eventSource)\n             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n             // Cancelled\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n-            // Initialize FancyLoggerBuffer\n-            FancyLoggerBuffer.Initialize();\n-            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n-            FancyLoggerBuffer.WriteNewLine(string.Empty);\n-            FancyLoggerBuffer.Render();\n+            \n+            Task.Run(() =>\n+            {\n+                // Initialize FancyLoggerBuffer\n+                FancyLoggerBuffer.Initialize();\n+                // TODO: Fix. First line does not appear at top. Leaving empty line for now\n+                FancyLoggerBuffer.WriteNewLine(string.Empty);\n+                // First render\n+                FancyLoggerBuffer.Render();\n+                int i = 0;\n+                // Rerender periodically\n+                while (!FancyLoggerBuffer.IsTerminated)\n+                {\n+                    i++;\n+                    // Delay by 1/60 seconds\n+                    Task.Delay((i / 60) * 1_000).ContinueWith((t) =>",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you extract a named constant for `3` here to indicate what it means?",
              "createdAt": "2023-01-23T17:28:39Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -127,31 +93,32 @@ public static void Render()\n             if (Lines.Count == 0) return;\n \n             // Iterate over lines and display on terminal\n-            // TODO: Delimit range to improve performance \n+            string contents = string.Empty;\n             int accumulatedLineCount = 0;\n             foreach (FancyLoggerBufferLine line in Lines)\n             {\n+                // Continue if accum line count + next lines < scrolling area\n+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {\n+                    accumulatedLineCount += line.WrappedText.Count;\n+                    continue;\n+                }\n+                // Break if exceeds scrolling area\n+                if (accumulatedLineCount - TopLineIndex > Console.BufferHeight - 3) break;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Actually, looking at later uses, maybe pull out a property for `Console.BufferHeight - 3`?",
              "createdAt": "2023-01-23T17:29:26Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -127,31 +93,32 @@ public static void Render()\n             if (Lines.Count == 0) return;\n \n             // Iterate over lines and display on terminal\n-            // TODO: Delimit range to improve performance \n+            string contents = string.Empty;\n             int accumulatedLineCount = 0;\n             foreach (FancyLoggerBufferLine line in Lines)\n             {\n+                // Continue if accum line count + next lines < scrolling area\n+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {\n+                    accumulatedLineCount += line.WrappedText.Count;\n+                    continue;\n+                }\n+                // Break if exceeds scrolling area\n+                if (accumulatedLineCount - TopLineIndex > Console.BufferHeight - 3) break;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`ShouldRerender` + `Render()` is starting to look like an `IConsoleRenderable` interface--worth thinking about whether we could simplify code by creating one.",
              "createdAt": "2023-01-23T17:32:09Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs",
              "diffHunk": "@@ -38,6 +38,8 @@ private static string GetUnambiguousPath(string path)\n         public int MessageCount = 0;\n         public int WarningCount = 0;\n         public int ErrorCount = 0;\n+        // Bool if node should rerender\n+        internal bool ShouldRerender = true;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You don't have to change this now but please try not to mix this kind of style change into functional PRs. Making them is great, but it delays reviewing the harder changes. If they're in their own PR we can review that quickly and get it in, then focus on the hard stuff.",
              "createdAt": "2023-01-23T17:33:20Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs",
              "diffHunk": "@@ -68,34 +72,33 @@ public void Log()\n                 Console.WindowWidth\n             );\n             // Create or update line\n-            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);\n-            else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);\n+            if (Line is null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);\n+            else Line.Text = lineContents;\n \n             // For finished projects\n             if (Finished)\n             {\n-                if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);\n+                if (CurrentTargetLine is not null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}