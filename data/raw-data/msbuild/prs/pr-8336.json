{
  "number": 8336,
  "title": "Added IDE analyzers checks and enabled certain checks",
  "body": "Related to https://github.com/dotnet/msbuild/issues/7174\r\n\r\n### Context\r\nWhile working in the repo different code style issues are observed \r\n\r\n### Changes Made\r\n- enabled IDE code style checks as `warning`, set the rules that are currently violated to `suggestion`\r\n- auto-fixed IDE0011 - add braces to statement\r\n- auto-fixed IDE0036 - modifiers are not ordered\r\n- auto-fixed IDE0040 - accessibility modifiers required\r\n- auto-fixed IDE0050 - fix formatting, manual disabling was needed for the code in regions compiled for full/core framework\r\n- auto-fixed SA1110 and SA1111 - parenthesis formatting, manual disabling was needed for the parameters with conditional compilation.\r\n- auto-fixed IDE0073 - A source file contains a header that does not match the required text. Disabled SA1633 as it is same check but required separate config.\r\n\r\nAll the work was done in separate commits to facilitate easier review.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nThe following checks to be added to https://github.com/dotnet/msbuild/issues/7174 to be gradually fixed:\r\n\r\n```\r\n# Cast is redundant\r\ndotnet_diagnostic.IDE0004.severity = suggestion\r\n\r\n# IDE0005: Remove unnecessary usings/imports\r\ndotnet_diagnostic.IDE0005.severity = warning\r\n\r\n# Use explicit type instead of 'var'\r\ndotnet_diagnostic.IDE0008.severity = suggestion\r\n\r\n# Populate switch\r\ndotnet_diagnostic.IDE0010.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0016.severity = suggestion\r\n\r\n# Object initialization can be simplified\r\ndotnet_diagnostic.IDE0017.severity = suggestion\r\n\r\n# Variable declaration can be inlined\r\ndotnet_diagnostic.IDE0018.severity = suggestion\r\n\r\n# Use pattern matching\r\ndotnet_diagnostic.IDE0019.severity = suggestion\r\ndotnet_diagnostic.IDE0020.severity = suggestion\r\n\r\n# Use expression body for constructor\r\ndotnet_diagnostic.IDE0021.severity = suggestion\r\n\r\n# Use expression body for method\r\ndotnet_diagnostic.IDE0022.severity = suggestion\r\n\r\n# Use expression body for conversion operator\r\ndotnet_diagnostic.IDE0023.severity = suggestion\r\n\r\n# Use block body for operator\r\ndotnet_diagnostic.IDE0024.severity = suggestion\r\n\r\n# Use expression body for property\r\ndotnet_diagnostic.IDE0025.severity = suggestion\r\n\r\n# Use expression body for indexer\r\ndotnet_diagnostic.IDE0026.severity = suggestion\r\n\r\n# Use expression body for accessor\r\ndotnet_diagnostic.IDE0027.severity = suggestion\r\n\r\n# Collection initialization can be simplified\r\ndotnet_diagnostic.IDE0028.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0031.severity = suggestion\r\n\r\n# Use auto property\r\ndotnet_diagnostic.IDE0032.severity = suggestion\r\n\r\n# 'default' expression can be simplified\r\ndotnet_diagnostic.IDE0034.severity = suggestion\r\n\r\n# Member name can be simplified\r\ndotnet_diagnostic.IDE0037.severity = suggestion\r\n\r\n# Use local function\r\ndotnet_diagnostic.IDE0039.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0041.severity = suggestion\r\n\r\n# Variable declaration can be deconstructed\r\ndotnet_diagnostic.IDE0042.severity = suggestion\r\n\r\n# Made field readonly\r\ndotnet_diagnostic.IDE0044.severity = suggestion\r\n\r\n# 'if' statement can be simplified\r\ndotnet_diagnostic.IDE0045.severity = suggestion\r\ndotnet_diagnostic.IDE0046.severity = suggestion\r\n\r\n# Parentheses can be removed\r\ndotnet_diagnostic.IDE0047.severity = suggestion\r\n\r\n# Parentheses should be added for clarity\r\ndotnet_diagnostic.IDE0048.severity = suggestion\r\n\r\n# Member name can be simplified\r\ndotnet_diagnostic.IDE0049.severity = suggestion\r\n\r\n# Use compound assignment\r\ndotnet_diagnostic.IDE0054.severity = suggestion\r\n\r\n# Indexing can be simplified\r\ndotnet_diagnostic.IDE0056.severity = suggestion\r\n\r\n# Slice can be simplified\r\ndotnet_diagnostic.IDE0057.severity = suggestion\r\n\r\n# Expression value is never used\r\ndotnet_diagnostic.IDE0058.severity = suggestion\r\n\r\n# Unnecessary assignment of a value\r\ndotnet_diagnostic.IDE0059.severity = suggestion\r\n\r\n# Remove unused parameter\r\ndotnet_diagnostic.IDE0060.severity = suggestion\r\n\r\n# Use expression body for a local function\r\ndotnet_diagnostic.IDE0061.severity = suggestion\r\n\r\n# Local function can be made static\r\ndotnet_diagnostic.IDE0062.severity = suggestion\r\n\r\n# Using directives must be placed outside of a namespace declaration\r\ndotnet_diagnostic.IDE0065.severity = suggestion\r\n\r\n# Use 'switch' expression\r\ndotnet_diagnostic.IDE0066.severity = suggestion\r\n\r\n# 'GetHashCode' implementation can be simplified\r\ndotnet_diagnostic.IDE0070.severity = suggestion\r\n\r\n# Interpolation can be simplified\r\ndotnet_diagnostic.IDE0071.severity = suggestion\r\n\r\n# Populate switch\r\ndotnet_diagnostic.IDE0072.severity = suggestion\r\n\r\n# Use compound assignment\r\ndotnet_diagnostic.IDE0074.severity = suggestion\r\n\r\n# Conditional expression can be simplified\r\ndotnet_diagnostic.IDE0075.severity = suggestion\r\n\r\n# Use pattern matching\r\ndotnet_diagnostic.IDE0078.severity = suggestion\r\ndotnet_diagnostic.IDE0083.severity = suggestion\r\n\r\n# 'typeof' can be converted to 'nameof'\r\ndotnet_diagnostic.IDE0082.severity = suggestion\r\n\r\n# 'new' expression can be simplified\r\ndotnet_diagnostic.IDE0090.severity = suggestion\r\n\r\n# Simplify LINQ expression\r\ndotnet_diagnostic.IDE0120.severity = suggestion\r\n\r\n# namespace does not match folder structure\r\ndotnet_diagnostic.IDE0130.severity = suggestion\r\n\r\n# Null check can be clarified\r\ndotnet_diagnostic.IDE0150.severity = suggestion\r\n\r\n# Convert to block scoped namespaces\r\ndotnet_diagnostic.IDE0160.severity = suggestion\r\n\r\n# Simplify property pattern\r\ndotnet_diagnostic.IDE0170.severity = suggestion\r\n\r\n# Use tuple to swap values\r\ndotnet_diagnostic.IDE0180.severity = suggestion\r\n\r\n# Use tuple to swap values\r\ndotnet_diagnostic.IDE0180.severity = suggestion\r\n\r\n# Lambda expression can be removed\r\ndotnet_diagnostic.IDE0200.severity = suggestion\r\n\r\n# Convert to top-level statements\r\ndotnet_diagnostic.IDE0210.severity = suggestion\r\n\r\n# 'foreach' statement implicitly converts\r\ndotnet_diagnostic.IDE0220.severity = suggestion\r\n\r\n# Use UTF-8 string literal\r\ndotnet_diagnostic.IDE0230.severity = suggestion\r\n\r\n# Nullable directives\r\ndotnet_diagnostic.IDE0240.severity = suggestion\r\ndotnet_diagnostic.IDE0241.severity = suggestion\r\n\r\n# Struct can be made 'readonly'\r\ndotnet_diagnostic.IDE0250.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0270.severity = suggestion\r\n\r\n# naming rule violation\r\ndotnet_diagnostic.IDE1006.severity = suggestion\r\n```",
  "state": "MERGED",
  "createdAt": "2023-01-23T08:20:58Z",
  "updatedAt": "2023-02-06T17:58:09Z",
  "closedAt": "2023-01-26T10:46:37Z",
  "mergedAt": "2023-01-26T10:46:37Z",
  "additions": 13003,
  "deletions": 13318,
  "changedFiles": 1675,
  "headRefName": "analyzers",
  "isDraft": false,
  "author": {
    "login": "vlada-shubina"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "72940a77b94aa56f79569097dbd6bdd7a395646d",
          "message": "added IDE code style checks as warning, set the currently violated rules to suggestion",
          "committedDate": "2023-01-26T09:46:35Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ae04bee073a567a6e34063de1c4fbfb28602651",
          "message": "auto-fixed IDE0011 - add braces to statement",
          "committedDate": "2023-01-26T10:02:11Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e22b8c87bcfd7eb314a1d227fd33734aa1a1f878",
          "message": "auto-fixed IDE0036 - Modifiers are not ordered",
          "committedDate": "2023-01-26T10:02:14Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ac17f25b427df70307873b2d170a99b46106478",
          "message": "auto fixed IDE0040 - Accessibility modifiers required",
          "committedDate": "2023-01-26T10:02:17Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa8541faa67d98d1d3020b20920fce535e082a17",
          "message": "auto-fixed IDE0055 - fix formatting",
          "committedDate": "2023-01-26T10:02:25Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7244df20f1f96710e9828b453ce2bfb1009ac52d",
          "message": "auto-fixed SA1110 and SA1111 - parenthesis formatting\n\nmanually fixed unresolvable cases",
          "committedDate": "2023-01-26T10:02:33Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "108b8df391df773af03b51d7e6627d7fb984ffba",
          "message": "auto-fixed IDE0073 - A source file contains a header that does not match the required text",
          "committedDate": "2023-01-26T10:02:54Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "334aa4f2bdb2d6937c18db8b7017204dfa30f8a5",
          "message": "moved IDE rules to .editorconfig as they need to be filtered",
          "committedDate": "2023-01-26T10:02:55Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b0d6332b77791fe5b5d39c56b601b23ab2dfa9fc",
          "message": "added IDE0020 - use pattern matching to be excluded",
          "committedDate": "2023-01-26T10:02:55Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7d2ce03b514e58a1f7f86ab83025c0e93c38095",
          "message": "extra disable format due to chunk of code conditioned for DEBUG only",
          "committedDate": "2023-01-26T10:02:55Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aba947a20f16d773e2bd4c9051df4a72cac9a0f9",
          "message": "added comment in Version line to bypass the check\n\nclarified CTA on how to bypass the error",
          "committedDate": "2023-01-26T10:02:55Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83fd3ba7030f8de1ee446fb165980031d7f94927",
          "message": "extra disable format due to chunk of code conditioned for DEBUG only",
          "committedDate": "2023-01-26T10:02:55Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Great to have this unified!\r\n\r\nShould we reconfirm the specific wording with someone? @baronfel?\r\n\r\nI see this and even the original message accross repos (e.g. sdk: https://github.com/dotnet/sdk/blob/main/.editorconfig#L164 vs roslyn: https://github.com/dotnet/roslyn/blob/main/.editorconfig#L144). In all cases - there seems to be montion of the `LICENSE` file in root.\r\nSo I believe we should add that here as well.",
              "createdAt": "2023-01-23T09:33:27Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -163,7 +163,7 @@ dotnet_code_quality.ca2208.api_surface = public\n dotnet_diagnostic.RS0037.severity = none\n \n # License header\n-file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.\\n\n+file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "LICENSE file seems correct according to guidelines. \r\nI'm not sure about the header, but all other dotnet repos are using same (runtime, aspnetcore). I'll ask around but I think it would be ok to change it in another PR if needed. ",
              "createdAt": "2023-01-23T11:03:37Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -163,7 +163,7 @@ dotnet_code_quality.ca2208.api_surface = public\n dotnet_diagnostic.RS0037.severity = none\n \n # License header\n-file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.\\n\n+file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "It is inconsistent with SDK: https://github.com/dotnet/sdk/blob/1d4cb25ff11a718bece0bdd540d6ba1a6f86a719/src/Cli/dotnet/commands/dotnet-pack/PackCommand.cs#L1-L2\r\n",
              "createdAt": "2023-01-30T15:40:16Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -163,7 +163,7 @@ dotnet_code_quality.ca2208.api_surface = public\n dotnet_diagnostic.RS0037.severity = none\n \n # License header\n-file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.\\n\n+file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "The guidance about copyrights is here: https://github.com/dotnet/runtime/blob/main/docs/project/copyright.md \r\nAccording to it, the current header that was applied in this PR is correct.",
              "createdAt": "2023-02-01T14:11:53Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -163,7 +163,7 @@ dotnet_code_quality.ca2208.api_surface = public\n dotnet_diagnostic.RS0037.severity = none\n \n # License header\n-file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.\\n\n+file_header_template = Licensed to the .NET Foundation under one or more agreements.\\nThe .NET Foundation licenses this file to you under the MIT license.",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we instead move the `#endif` (to 220 original) and `#if` (to 309 original) to preserve the block (just without the `try`)?\r\nThat way the indetion would be correct in both configuration and we could preserve the styling check.",
              "createdAt": "2023-01-23T10:14:49Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -210,6 +210,7 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n+#pragma warning disable format // the release configuration fails as try-catch block is conditioned only for Debug; making the formatting in correct in Release.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "let me try that",
              "createdAt": "2023-01-23T11:03:48Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -210,6 +210,7 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n+#pragma warning disable format // the release configuration fails as try-catch block is conditioned only for Debug; making the formatting in correct in Release.",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "Fixed",
              "createdAt": "2023-01-23T11:20:39Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -210,6 +210,7 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n+#pragma warning disable format // the release configuration fails as try-catch block is conditioned only for Debug; making the formatting in correct in Release.",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "built-in: suggestion\r\napparent: suggestion\r\neverything else: warning",
              "createdAt": "2023-02-06T16:45:42Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T16:48:11Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "leave suggestion, but open to moving to warning if an autofixer is available",
              "createdAt": "2023-02-06T16:53:47Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "suggestion",
              "createdAt": "2023-02-06T16:58:54Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:04:05Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:10:35Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:11:13Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "expression bodies for everything, suggestion",
              "createdAt": "2023-02-06T17:16:32Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:18:53Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:21:09Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "suggestion",
              "createdAt": "2023-02-06T17:26:34Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:28:31Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "set dotnet_style_prefer_inferred_tuple_names to false severity suggestion",
              "createdAt": "2023-02-06T17:33:09Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:35:54Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:37:48Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "none",
              "createdAt": "2023-02-06T17:41:20Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion\n+\n+# Variable declaration can be deconstructed\n+dotnet_diagnostic.IDE0042.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "warning",
              "createdAt": "2023-02-06T17:43:15Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion\n+\n+# Variable declaration can be deconstructed\n+dotnet_diagnostic.IDE0042.severity = suggestion\n+\n+# Made field readonly\n+dotnet_diagnostic.IDE0044.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "suggestion",
              "createdAt": "2023-02-06T17:48:00Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion\n+\n+# Variable declaration can be deconstructed\n+dotnet_diagnostic.IDE0042.severity = suggestion\n+\n+# Made field readonly\n+dotnet_diagnostic.IDE0044.severity = suggestion\n+\n+# 'if' statement can be simplified\n+dotnet_diagnostic.IDE0045.severity = suggestion\n+dotnet_diagnostic.IDE0046.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "none",
              "createdAt": "2023-02-06T17:56:17Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion\n+\n+# Variable declaration can be deconstructed\n+dotnet_diagnostic.IDE0042.severity = suggestion\n+\n+# Made field readonly\n+dotnet_diagnostic.IDE0044.severity = suggestion\n+\n+# 'if' statement can be simplified\n+dotnet_diagnostic.IDE0045.severity = suggestion\n+dotnet_diagnostic.IDE0046.severity = suggestion\n+\n+# Parentheses can be removed\n+dotnet_diagnostic.IDE0047.severity = suggestion",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "***** start here for follow up",
              "createdAt": "2023-02-06T17:56:44Z",
              "path": ".editorconfig",
              "diffHunk": "@@ -200,5 +200,192 @@ end_of_line = lf\n end_of_line = crlf\n \n [src/**/*.{cs,vb}]\n+# Code style checks\n+dotnet_analyzer_diagnostic.category-Style.severity = warning\n+\n+# Cast is redundant\n+dotnet_diagnostic.IDE0004.severity = suggestion\n+\n # IDE0005: Remove unnecessary usings/imports\n dotnet_diagnostic.IDE0005.severity = warning\n+\n+# Use explicit type instead of 'var'\n+dotnet_diagnostic.IDE0008.severity = suggestion\n+\n+# Populate switch\n+dotnet_diagnostic.IDE0010.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0016.severity = suggestion\n+\n+# Object initialization can be simplified\n+dotnet_diagnostic.IDE0017.severity = suggestion\n+\n+# Variable declaration can be inlined\n+dotnet_diagnostic.IDE0018.severity = suggestion\n+\n+# Use pattern matching\n+dotnet_diagnostic.IDE0019.severity = suggestion\n+dotnet_diagnostic.IDE0020.severity = suggestion\n+\n+# Use expression body for constructor\n+dotnet_diagnostic.IDE0021.severity = suggestion\n+\n+# Use expression body for method\n+dotnet_diagnostic.IDE0022.severity = suggestion\n+\n+# Use expression body for conversion operator\n+dotnet_diagnostic.IDE0023.severity = suggestion\n+\n+# Use block body for operator\n+dotnet_diagnostic.IDE0024.severity = suggestion\n+\n+# Use expression body for property\n+dotnet_diagnostic.IDE0025.severity = suggestion\n+\n+# Use expression body for indexer\n+dotnet_diagnostic.IDE0026.severity = suggestion\n+\n+# Use expression body for accessor\n+dotnet_diagnostic.IDE0027.severity = suggestion\n+\n+# Collection initialization can be simplified\n+dotnet_diagnostic.IDE0028.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0031.severity = suggestion\n+\n+# Use auto property\n+dotnet_diagnostic.IDE0032.severity = suggestion\n+\n+# 'default' expression can be simplified\n+dotnet_diagnostic.IDE0034.severity = suggestion\n+\n+# Member name can be simplified\n+dotnet_diagnostic.IDE0037.severity = suggestion\n+\n+# Use local function\n+dotnet_diagnostic.IDE0039.severity = suggestion\n+\n+# Null check can be simplified\n+dotnet_diagnostic.IDE0041.severity = suggestion\n+\n+# Variable declaration can be deconstructed\n+dotnet_diagnostic.IDE0042.severity = suggestion\n+\n+# Made field readonly\n+dotnet_diagnostic.IDE0044.severity = suggestion\n+\n+# 'if' statement can be simplified\n+dotnet_diagnostic.IDE0045.severity = suggestion\n+dotnet_diagnostic.IDE0046.severity = suggestion\n+\n+# Parentheses can be removed\n+dotnet_diagnostic.IDE0047.severity = suggestion\n+\n+# Parentheses should be added for clarity",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}