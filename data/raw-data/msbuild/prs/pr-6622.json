{
  "number": 6622,
  "title": "Default to transitively copying content items",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/1054\r\n\r\n### Context\r\nIncrementalClean has the behavior of deleting content items from transitive references on rebuild of the main project. With the move to 17.0, we want to default to copying all transitive content items into the main output folder to avoid this behavior.\r\n\r\n### Changes Made\r\nUnder change wave 17.0, default `MSBuildCopyContentTransitively` to true.\r\n\r\n### Testing\r\nTested locally on https://github.com/rainersigwald/IncrementalCleanDemo\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-23T22:12:38Z",
  "updatedAt": "2021-07-09T17:31:10Z",
  "closedAt": "2021-07-09T17:31:08Z",
  "mergedAt": "2021-07-09T17:31:08Z",
  "additions": 4,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "incrementalclean-transitive-content",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "changewave17.0"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0c490d9aee4d6f4beae57ad61f16527cdc91216c",
          "message": "Default to transitively copying content items",
          "committedDate": "2021-06-23T22:07:50Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f69f5249d6cd96d157a4fa9522d33c3d93241ea5",
          "message": "Update src/Tasks/Microsoft.Common.CurrentVersion.targets\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-06-24T18:20:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "121d47700d4520f5a933af8c94dc35dfe403a5c1",
          "message": "Add PR to change wave doc",
          "committedDate": "2021-06-30T20:34:32Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@drewnoakes, this has incremental-build/FUTD implications. We'd really like the copy behavior to be consistent between full builds and incremental builds (see the linked issue; it's currently a mess). Fixing it will require some additional project traversals, though, so we'll do some building of projects that were skipped by FUTD (not _significant_ building; should just be output collection). The set of files copied to a project's outputs will then be consistent but not easy to determine via evaluation alone, because it'll include transitive content (it does today . . . if the transitive projects actually built and weren't skipped).",
        "createdAt": "2021-06-23T22:32:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @drewnoakes, this has incremental-build/FUTD implications\r\n\r\nI'm unclear on what this means. Some possible interpretations:\r\n\r\n- This will have a performance impact, because if A depends on B and B is up-to-date, the build for A will do more work in B, or\r\n- The FUTD check needs to change in order to schedule more projects for MSBuild to build, or\r\n- Potential future work for the Project System to know about the project's output items becomes more expensive as they no longer come from evaluation alone\r\n\r\nI am curious how how much perf impact this change may have. I can add `<MSBuildCopyContentTransitively>true</MSBuildCopyContentTransitively>` to OrchardCore and run my test suite to get numbers. What kinds of scenarios would be worth running here?",
        "createdAt": "2021-06-30T13:29:31Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes Any scenario with many transitive project references should work.\r\n\r\nAlso need to add modify the changewave doc here.",
        "createdAt": "2021-06-30T18:46:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> * This will have a performance impact, because if A depends on B and B is up-to-date, the build for A will do more work in B, or\r\n\r\nClose--it's only relevant for transitive dependencies. Suppose A depends on B depends on C and B and C are up to date. Before, C would not need to be evaluated or built for the A build--B would be evaluated and only a couple of cheap targets there would be built. Now, we'll have to evaluate and build a couple of cheap targets in _the full closure of dependencies_.\r\n\r\nNote that this doesn't actually mean much by default for .NET SDK projects, because the SDK flattens ProjectReferences so they're always direct.\r\n\r\n> * The FUTD check needs to change in order to schedule more projects for MSBuild to build, or\r\n\r\nIt does not, fortunately. We can handle it behind the scenes.\r\n\r\n> * Potential future work for the Project System to know about the project's output items becomes more expensive as they no longer come from evaluation alone\r\n\r\nThis is plausible, confounded by the case that it's already true today (we're just ensuring that the output will be consistent rather than only apply if C built).\r\n\r\n> I can add `<MSBuildCopyContentTransitively>true</MSBuildCopyContentTransitively>` to OrchardCore and run my test suite to get numbers. What kinds of scenarios would be worth running here?\r\n\r\nThat would be awesome. I think the \"everything up to date except a change in a unit test project\" scenario would be worst hit--before that should have optimized away the transitives but now it won't.",
        "createdAt": "2021-06-30T20:47:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-06-30T22:22:53Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-06-30T22:23:02Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I ran the scenarios and don't see any noticeable difference across three runs with/without `MSBuildCopyContentTransitively`.",
        "createdAt": "2021-07-01T13:11:25Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <MSBuildCopyContentTransitively Condition=\" '$(MSBuildCopyContentTransitively)' == '' and $([MSBuild]::AreFeaturesEnabled('17.0'))\">true</MSBuildCopyContentTransitively>\r\n```",
              "createdAt": "2021-06-24T17:59:41Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -4735,9 +4735,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       GetCopyToOutputDirectoryItems depends on an unspecified dependency _SplitProjectReferencesByFileExistence -> AssignProjectConfiguration (https://github.com/microsoft/msbuild/issues/4677).\n       When the unspecified dependency does not happen by accident, content copying is only 1 level deep instead of transitive.\n       This target enforces the dependency.\n-\n-      TODO: make transitive content copying the default when the breaking change is acceptable.\n     -->\n+\n+    <MSBuildCopyContentTransitively Condition=\"$([MSBuild]::AreFeaturesEnabled('17.0'))\">true</MSBuildCopyContentTransitively>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}