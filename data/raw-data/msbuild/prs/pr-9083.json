{
  "number": 9083,
  "title": "Reduce memory usage in static graph build by snapshotting the project instance",
  "body": "### Context\r\nWhen building with Static Graph, it evaluates the entire solution space to computes the most optimal path for parallelization.  However, it keeps those evaluated instances in memory in hope they might be reused.  From my testing, these are not reused because new instances are created with different properties from platform negotiation. \r\n\r\n### Changes Made\r\nCreate a snapshot of the data that Static Graph would use then \"free\" those instances.\r\n\r\n### Testing\r\nAdd after printing `Static graph loaded` message.\r\n```\r\nGC.Collect();\r\nLogMessage($\"GraphBuild GC: {GC.GetTotalMemory(false)} bytes\");\r\n```\r\n**Solution 1:**\r\n*baseline:*\r\nStatic graph loaded in 37.884 seconds: 166 nodes, 1628 edges\r\nGraphBuild GC: **185,411,136** bytes\r\n\r\n*new:*\r\nStatic graph loaded in 37.024 seconds: 166 nodes, 1628 edges\r\nGraphBuild GC: **24,743,840** bytes\r\n\r\n\r\n**Solution 2:**\r\n*baseline*\r\nStatic graph loaded in 498.914 seconds: 913 nodes, 12862 edges\r\nGraphBuild GC: **1,141,466,552** bytes \r\n\r\n*new*\r\nStatic graph loaded in 425.508 seconds: 913 nodes, 12862 edges\r\nGraphBuild GC: **62,436,160** bytes \r\n\r\n### Notes\r\nI was hoping there would be more performance uplift from reducing GC pressure.  Static graph performance would need further investigation.\r\nThe Snapshot class is mimicking the ProjectInstance API to reduce code churn.  There might be further data structure optimization without that limitation.",
  "state": "CLOSED",
  "createdAt": "2023-07-28T19:35:40Z",
  "updatedAt": "2024-02-22T22:27:55Z",
  "closedAt": "2023-11-01T15:49:41Z",
  "mergedAt": null,
  "additions": 519,
  "deletions": 249,
  "changedFiles": 16,
  "headRefName": "dev/yuehuang/main_graph",
  "isDraft": true,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bca7abfaca0ab971365dddcf6ead8945dc8172a6",
          "message": "rebase",
          "committedDate": "2023-08-11T21:08:24Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ec8520bae317507ff3a4fa5f3b0b5e5105c39eb9",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/yuehuang/main_graph",
          "committedDate": "2023-08-18T00:55:27Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@yuehuang010  I looked at the code and measured it a bit. \r\nI think saving memory usage, in context on usual build agents used for graph builds, is not as useful as saving allocations.\r\n\r\nThe premise that evaluation during graph build is not reused is not valid when project is not multitargeted. In my test project it caused redundant re-evaluations. Since we plan to eventually use and support graph build for external customers, this would harm everyone non multitargeting.\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/25249058/01c9388d-0504-4034-8996-8c486bc90578)\r\n\r\nI have discussed it with @rainersigwald and we believe that graph build shall reuse evaluations from graph building phase, otherwise we risk that actual shape of graph during build differs from shape of graph by which we build.\r\n",
        "createdAt": "2023-08-29T09:19:23Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Remove before commiting.",
              "createdAt": "2023-08-11T17:30:08Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1888,6 +1889,9 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                     projectGraph.ConstructionMetrics.NodeCount,\n                     projectGraph.ConstructionMetrics.EdgeCount));\n \n+            GC.Collect();",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      }
    ]
  }
}