{
  "number": 7736,
  "title": "XamlTaskFactory prefers msbuild's root directory when finding dll's",
  "body": "Fixes #7734\r\n\r\n### Context\r\n`XamlTaskFactory` looks in MSBuild's current directory for its dll's. On arm64, this fails because we don't ship the dll's into the `arm64/` folder.\r\n\r\n### Changes Made\r\nHave `XamlTaskFactory` always check MSBuild's root path for its dll's. arm64 MSBuild uses the dll's that exist in the root path.\r\n\r\n### Testing\r\nWill test on an arm64 machine if CI passes.\r\n\r\n### Notes\r\n~~`GetPathToBuildDll`'s might be overkill, since xamltaskfactory always searches for `current` msbuild version, which would always default to the current VS install's msbuild directory (the current one being used). We could just change it to look at the root directly, instead of checking toolsversion and all that.~~",
  "state": "MERGED",
  "createdAt": "2022-06-23T19:15:47Z",
  "updatedAt": "2022-07-17T17:37:31Z",
  "closedAt": "2022-07-17T17:37:31Z",
  "mergedAt": "2022-07-17T17:37:31Z",
  "additions": 2,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "xamltaskfactory-arm64-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Tasks",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b0e162e2c2748ac3884f769c4990e527e190a5dd",
          "message": "XamlTaskFactory prefers msbuild's root directory\n\nThis avoids an arm64 scenario that caused XamlTaskFactory\nto crash because the msbuild dll's are not present in the arm64 directory.",
          "committedDate": "2022-06-23T19:09:14Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf32f7d0e02a2254d751ac009d3f4f5e1b7fa79d",
          "message": "Simplify the logic",
          "committedDate": "2022-06-23T19:20:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Probably worth checking if this properly accounts for bitness.",
        "createdAt": "2022-06-23T19:37:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Probably worth checking if this properly accounts for bitness.\r\n\r\nEven with the existing logic it passed `Current`, which followed a codepath that always resulted in \"look at MSBuild's current directory.\" The bitness didn't matter previously, and it continues not to matter with this change.\r\n\r\nEither way, all binaries found would be AnyCPU.",
        "createdAt": "2022-06-23T21:34:06Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Would MSBuild and its dependents break (_with appropriate fixes and redirects of course_) if we point all to the current layout instead of `amd64`, `\\arm64` and friends? With MSBuild being Any CPU as you said, does it even matter to have architecture subdirectories?\r\n\r\nIf this is possible, we could save some disk space!!",
        "createdAt": "2022-06-26T09:23:40Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G \r\n\r\n> Would MSBuild and its dependents break (with appropriate fixes and redirects of course) if we point all to the current layout instead of amd64, \\arm64 and friends?\r\n\r\nthis is a great idea that I suspect would take a surprising amount of engineering effort \ud83d\ude22 Then there's the classic \"we have no idea what customers are doing, and might expect things to be the way they are,\" so if we did go that route it would have to be during a VS major version release.\r\n\r\n> With MSBuild being Any CPU as you said, does it even matter to have architecture subdirectories?\r\n\r\nThe `MSBuild.exe`'s certainly need their own arch specific folders to run natively. Not only that, allowing tasks to run as specific architectures forces us to keep this folder structure. There is still a lot of overlap between..._everything else_ though.\r\n\r\n> I'm assuming we have plenty of unit tests for this on framework/core. Related question: should we have an ARM leg for CI? Seems like it would be helpful here.\r\n\r\nWorth discussing! https://github.com/dotnet/msbuild/issues/7764",
        "createdAt": "2022-06-30T16:26:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "FYI on this PR: I'm working with the msft internal that initially filed the bug to verify this fix. For whatever reason the install for the drivers are failing on my arm64 VM\r\n",
        "createdAt": "2022-07-01T18:10:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Got a repro project and verified the fix works. Verified by builting bootstrap bits and copy/pasting the Microsoft.Build.Tasks.Core.dll that exists in `bin/`.\r\n\r\nWhat's interesting is that now the task runs, but the command that the task runs fails next (which might be due to my WDK install failing some steps):\r\n```\r\n\"C:\\Users\\bevillal\\Desktop\\ReproProject\\Eclipse.sln\" (default target) (1) ->\r\n\"C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj\" (default target) (2) ->\r\n(ApiValidator target) ->\r\n  ApiValidation : error : While Checking file C:\\Users\\bevillal\\Desktop\\ReproProject\\ARM64\\Debug\\OEMVerification.exe ai\r\ntstatic is returned exit code 216. [C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\n  C:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB3721: The co\r\nmmand \"\"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.22621.0\\x64\\ApiValidator.exe\" -DriverPackagePath:C:\\Users\\bevil\r\nlal\\Desktop\\ReproProject\\ARM64\\Debug\\OEMVerification.exe -SupportedApiXmlFiles:\"C:\\Program Files (x86)\\Windows Kits\\10\\\r\nbuild\\10.0.22621.0\\universalDDIs\\arm64\\UniversalDDIs.xml\" -ModuleWhiteListXmlFiles:\"C:\\Program Files (x86)\\Windows Kits\r\n\\10\\build\\10.0.22621.0\\universalDDIs\\arm64\\ModuleWhiteList.xml\" -ApiExtractorExePath:\"C:\\Program Files (x86)\\Windows Ki\r\nts\\10\\bin\\10.0.22621.0\\x86\" \" exited with code -1. [C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\n```\r\n\r\nThe previous error:\r\n\r\n```\r\n\"C:\\Users\\bevillal\\Desktop\\ReproProject\\Eclipse.sln\" (default target) (1) ->\r\n\"C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj\" (default target) (2) ->\r\n(ApiValidator target) ->\r\n  C:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB3686: Unable\r\nto create Xaml task.  Compilation failed.   [C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\nC:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB3686: Metadata\r\nfile 'd:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\arm64\\Microsoft.Build.Framework.dll' c\r\nould not be found [C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\nC:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB3686: Metadata\r\nfile 'd:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\arm64\\Microsoft.Build.Utilities.Core.d\r\nll' could not be found [C:\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\nC:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB3686:  [C:\\Use\r\nrs\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\n  C:\\Program Files (x86)\\Windows Kits\\10\\build\\10.0.22621.0\\WindowsDriver.common.targets(1833,5): error MSB4175: The ta\r\nsk factory \"XamlTaskFactory\" could not be loaded from the assembly \"d:\\Program Files\\Microsoft Visual Studio\\2022\\Previ\r\new\\MSBuild\\Current\\Bin\\arm64\\Microsoft.Build.Tasks.Core.dll\". Object reference not set to an instance of an object. [C:\r\n\\Users\\bevillal\\Desktop\\ReproProject\\OEMVerification.vcxproj]\r\n```",
        "createdAt": "2022-07-01T21:05:53Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I originally reported this bug, and confirmed that Ben's fix resolved the issue. Thanks @BenVillalobos.",
        "createdAt": "2022-07-01T21:38:10Z",
        "author": {
          "login": "fpribeiro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}