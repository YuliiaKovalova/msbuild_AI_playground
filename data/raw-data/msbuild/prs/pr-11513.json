{
  "number": 11513,
  "title": "using virtual fuction instead of reflection",
  "body": "###Part of #11160\r\nBuilding on top of Eric's IPC pr - his work allowed for other bottlenecks to reveal themselves.\r\n\r\n### Context\r\n![read_from_stream_reflection](https://github.com/user-attachments/assets/aa0bd4b9-cb39-4351-9c51-e4bbbfa01c37)\r\n![read_from_stream_virtual](https://github.com/user-attachments/assets/7fe81c55-1aaf-4e79-97a5-648c6a68cfe5)\r\nCurrently, the ReadFromStream function uses \r\n```\r\nArgsReaderDelegate readerMethod = (ArgsReaderDelegate)CreateDelegateRobust(typeof(ArgsReaderDelegate), _buildEvent, methodInfo);\r\n```\r\nfor a large portion of it's packet deserialization. This is large enough to be seen in the performance profiler as shown above more than 3% of CPU an it's on a critical path.\r\nWhen I checked, the function was already virtual so the change is minimal. Unfortunately I had to make an allowance to the task host since it wasn't compatible.\r\n\r\n### Changes Made\r\nExposed a convenience public endpoint for the CreateFromStream function, that calls the virtual method Create from stream.\r\nUsed this endpoint instead of delegate creation.\r\n\r\n### Testing\r\nAs long as nothing breaks, I consider that a win.\r\nI did local profiling.\r\n\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-02-27T08:33:30Z",
  "updatedAt": "2025-03-13T11:47:13Z",
  "closedAt": "2025-03-13T11:47:11Z",
  "mergedAt": "2025-03-13T11:47:11Z",
  "additions": 11,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "replace-create-delegate-with-virtual-method",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "47a95b09c0a1feadcf91c703d6ce3b96fbe5b3f1",
          "message": "using virtual fuction instead of reflection",
          "committedDate": "2025-02-27T08:21:18Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "e35816485d93efea2c1116872172826ff11a99b6",
          "message": "Remove unused System.Diagnostics import",
          "committedDate": "2025-02-27T08:34:13Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "374f568c9fd141416dbd10492b6e4a4f999b989d",
          "message": "removing an unnecessary method",
          "committedDate": "2025-03-12T09:58:20Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "55c1ad34bf5486a068617ce7d0e20f49cc068bd6",
          "message": "Remove an extra newline in BuildEventArgs.cs",
          "committedDate": "2025-03-12T13:43:54Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "50f5298f3ace5c9a8328b3a71a0cff6e7f32f2ca",
          "message": "Remove unnecessary blank line",
          "committedDate": "2025-03-13T10:45:41Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "8212312ff14301b17438699ee0105a50cb66bc01",
          "message": "Add missing new lines in LogMessagePacketBase.cs",
          "committedDate": "2025-03-13T10:46:51Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "8f5fe7f9d9a1547e1c1088495da06e2b202f9d48",
          "message": "Remove trailing whitespace in LogMessagePacketBase.cs",
          "committedDate": "2025-03-13T10:49:26Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've set up a perf star run. It seems that this has a measurable impact for evaluation performance:\r\n0.79% overall improvement for an evaluation hot run\r\n0.33% overall improvement for an evaluation cold run\r\n0.08% overall negative impact for build - I'm unsure about the reason, but it is small enough for me to claim that it is variance at hand.\r\n",
        "createdAt": "2025-03-12T10:00:30Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "1. Why does it need to be public?\r\n2. why not change access of the method this wraps?\r\nIf it's necessary then please think more on the naming and documentation",
              "createdAt": "2025-03-11T15:30:46Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -200,6 +200,17 @@ internal virtual void WriteToStream(BinaryWriter writer)\n             WriteToStreamWithExplicitMessage(writer, RawMessage);\n         }\n \n+\n+        /// <summary>\n+        /// Convenience access point for CreateFromStream method to avoid making everything public.\n+        /// </summary>\n+        /// <param name=\"reader\"></param>\n+        /// <param name=\"version\"></param>\n+        public void PublicCreateFromStream(BinaryReader reader, int version)",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Apparently it doesn't. My bad. I would've sworn that IDE complained about it before - so I tried to make the original method public, which complained about having to make a bunch of other methods public, so I created the wrapper.\r\nNow I came and it builds even with internal.\r\nI removed the unnecessary function, the code is better for it and I'm mildly confused.",
              "createdAt": "2025-03-12T10:00:04Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -200,6 +200,17 @@ internal virtual void WriteToStream(BinaryWriter writer)\n             WriteToStreamWithExplicitMessage(writer, RawMessage);\n         }\n \n+\n+        /// <summary>\n+        /// Convenience access point for CreateFromStream method to avoid making everything public.\n+        /// </summary>\n+        /// <param name=\"reader\"></param>\n+        /// <param name=\"version\"></param>\n+        public void PublicCreateFromStream(BinaryReader reader, int version)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: probably unnecessary empty line",
              "createdAt": "2025-03-13T08:40:45Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -468,16 +469,18 @@ internal void ReadFromStream(ITranslator translator)\n \n             _buildEvent = GetBuildEventArgFromId();\n \n+",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}