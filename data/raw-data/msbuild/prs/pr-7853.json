{
  "number": 7853,
  "title": "Call New GetCultureInfo API When Validating Cultures",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/3897\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nHaven't tested this locally.",
  "state": "MERGED",
  "createdAt": "2022-07-27T23:50:57Z",
  "updatedAt": "2022-08-11T08:34:40Z",
  "closedAt": "2022-08-11T08:34:40Z",
  "mergedAt": "2022-08-11T08:34:40Z",
  "additions": 68,
  "deletions": 8,
  "changedFiles": 2,
  "headRefName": "culture-aliasing",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b97b19c173052e9172d4c1207cae63880397c5ce",
          "message": "Bake the list of cultures into the net472 assembly",
          "committedDate": "2022-07-27T23:42:16Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a5ee20a0c602b09366715de1c2dbf7c72e07017",
          "message": "Let valid cultures pull from HardcodedCultureNames",
          "committedDate": "2022-07-27T23:46:45Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5fb6ce272470a71d7c6adeb9007b00ee7f7e1b36",
          "message": "Revert \"Bake the list of cultures into the net472 assembly\"\n\nThis reverts commit b97b19c173052e9172d4c1207cae63880397c5ce.",
          "committedDate": "2022-07-27T23:46:58Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4da8896323e83e2a34132e734be9f068ae655fc0",
          "message": "Don't compile the workaround into net472",
          "committedDate": "2022-07-27T23:49:48Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "292ff741832c05708c9907efb74f02d82adf5101",
          "message": "Call GetCultureInfo API on net5.0+",
          "committedDate": "2022-08-02T16:43:21Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5c61694d8ff4e92a9e82d5b8fd9d0d44820071c",
          "message": "Revert \"Let valid cultures pull from HardcodedCultureNames\"\n\nThis reverts commit 1a5ee20a0c602b09366715de1c2dbf7c72e07017.",
          "committedDate": "2022-08-02T16:44:56Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1428a9b81d830c71a8e5b3d0e7d423b85fd15d6b",
          "message": "Add changewaves, handle error case",
          "committedDate": "2022-08-02T17:11:55Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f98ea6479aa9d6db4855186552df2f754360fb8",
          "message": "Remove unused exception",
          "committedDate": "2022-08-02T17:13:14Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "49f20fa85ceb8bb5c9dc01b8b6a0c8954eb63eec",
          "message": "Update src/Tasks/CultureInfoCache.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-08-03T22:30:45Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebccbf64dcdd21904f78a841fce060051f3ce5f3",
          "message": "Lazily initialize the hashset of cultures",
          "committedDate": "2022-08-03T22:44:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2098011c91c4838206ef230b1977bb27f97c35b8",
          "message": "Fix warning",
          "committedDate": "2022-08-03T23:22:23Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1f5ec26c14e265e59b113eb812953937d41a212",
          "message": "Add regression test for zh-TW",
          "committedDate": "2022-08-04T00:23:25Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87fe608987c9fa99d1603c6a4c11e842971a071d",
          "message": "Add proper regression test cases",
          "committedDate": "2022-08-04T22:27:00Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28ca69342a5836c079b62647a62d30ed49f7e0ce",
          "message": "Split out tests that work only on net core",
          "committedDate": "2022-08-08T17:50:13Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4c9c8a6bc1dfb5e3a5eca841b213d8b6137864f",
          "message": "Don't regress pseudo-locale scenarios",
          "committedDate": "2022-08-08T18:17:29Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Talked with Tarek, turns out we should be using a different API altogether: https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.getcultureinfo?view=net-6.0#system-globalization-cultureinfo-getcultureinfo(system-string-system-boolean)",
        "createdAt": "2022-07-28T18:34:22Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@tarekgh I tried out a few test cases for aliases in [codingdinosaur's writeup](https://github.com/CodingDinosaur/CultureIssueDemonstration#icu-locale-alias-list), and I'm seeing interesting results:\r\n\r\n![image](https://user-images.githubusercontent.com/4691428/182736892-ff5b2d79-9bcd-4965-b320-16ac80572312.png)\r\n\r\nThe good news is they both see zh-TW as a valid culture, which is strictly improved from before \ud83d\ude04 any thoughts on the failing cases? are those aliases expected not to be detected?",
        "createdAt": "2022-08-04T00:23:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos the failing cases is because the culture name using `_` and not `-`.",
        "createdAt": "2022-08-04T00:27:46Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "> the failing cases is because the culture name using _ and not -.\r\n\r\nthanks!",
        "createdAt": "2022-08-04T23:08:01Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This is the first I've seen `CanShutdownServerProcess` fail. This might be a flaky test, but it's too early to tell. It looks _very_ unrelated to what this change is about.",
        "createdAt": "2022-08-08T18:45:05Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos, I told it to rerun. I suspect flakiness.\r\n\r\n@rokonec, see BenVillalobos's comment\u2014second instance today.",
        "createdAt": "2022-08-08T18:47:06Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I thought we were thinking opt out? But I probably misremembered.",
              "createdAt": "2022-08-01T20:55:41Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -35,6 +35,11 @@ public Traits()\n \n         public EscapeHatches EscapeHatches { get; }\n \n+        /// <summary>\n+        /// https://github.com/dotnet/msbuild/issues/3897\n+        /// </summary>\n+        public readonly bool EnableHardcodedCultureNames = Environment.GetEnvironmentVariable(\"MSBUILDENABLEHARDCODEDCULTURENAMES\") == \"1\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah this will turn into a change wave instead of a trait",
              "createdAt": "2022-08-02T16:37:23Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -35,6 +35,11 @@ public Traits()\n \n         public EscapeHatches EscapeHatches { get; }\n \n+        /// <summary>\n+        /// https://github.com/dotnet/msbuild/issues/3897\n+        /// </summary>\n+        public readonly bool EnableHardcodedCultureNames = Environment.GetEnvironmentVariable(\"MSBUILDENABLEHARDCODEDCULTURENAMES\") == \"1\";",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Prefer more descriptive ifdefs.",
              "createdAt": "2022-08-02T22:49:46Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This essentially says \"skip the hardcoded list on net6,\" right? Why is that correct?",
              "createdAt": "2022-08-02T22:51:23Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The hardcoded list has always been a workaround to the fact that we didn't have an API that would specifically tell us when a culture was valid or not (`CultureInfo.GetCultures(AllCultures)` wasn't made for verification purposes). It's not ideal to use the list at all, and this avoids it because starting in net5.0 this `GetCultureInfo(name, true)` was introduced for specifically this purpose.\r\n\r\nThe only valid case for us to use the list moving foward would be in net472 for backwards compat when some culture or alias isn't supported. But net472 happens to work because on Windows the API we're currently using happens to contain the cultures that aren't included on linux.",
              "createdAt": "2022-08-03T00:01:24Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Does the back compat issue not apply to net6 as well?",
              "createdAt": "2022-08-08T06:08:56Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "it does, `NET5_0_OR_GREATER` is defined in the SDK and would apply to net5.0+. It happens around here:\r\n\r\nhttps://github.com/dotnet/sdk/blob/dd33b56b1c8ab92cef9fd4173585b9915003e0b8/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.BeforeCommon.targets#L207",
              "createdAt": "2022-08-08T22:57:28Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    CultureInfo.GetCultureInfo(name, predefinedOnly: true);\r\n```",
              "createdAt": "2022-08-03T14:08:25Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you disable the construction of the HashSet in the \"modern .NET Core\" case?",
              "createdAt": "2022-08-03T14:18:07Z",
              "path": "src/Tasks/CultureInfoCache.cs",
              "diffHunk": "@@ -56,6 +57,21 @@ static HashSet<string> InitializeValidCultureNames()\n         /// <returns>True if the culture is determined to be valid.</returns>\n         internal static bool IsValidCultureString(string name)\n         {\n+#if NET5_0_OR_GREATER\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n+            {\n+                try\n+                {\n+                    // GetCultureInfo throws if the culture doesn't exist\n+                    CultureInfo.GetCultureInfo(name, true);\n+                    return true;\n+                }\n+                catch\n+                {\n+                    return false;\n+                }\n+            }\n+#endif\n             return ValidCultureNames.Contains(name);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Testing that certain aliases are considered valid cultures. Regression test for https://github.com/dotnet/msbuild/issues/3897.\r\n```",
              "createdAt": "2022-08-04T14:32:55Z",
              "path": "src/Tasks.UnitTests/AssignCulture_Tests.cs",
              "diffHunk": "@@ -218,5 +218,26 @@ public void PseudoLocalization(string culture)\n             Assert.Equal($\"MyResource.{culture}.resx\", t.AssignedFiles[0].ItemSpec);\n             Assert.Equal(\"MyResource.resx\", t.CultureNeutralAssignedFiles[0].ItemSpec);\n         }\n+\n+        /// <summary>\n+        /// Testing that certain aliases are considered valid cultures.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}