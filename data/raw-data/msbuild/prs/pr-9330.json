{
  "number": 9330,
  "title": "Make cache-add APIs experimental",
  "body": "Work item (Internal use): \r\n\r\n### Summary\r\n\r\nMake newly-added, not-yet-released cache-add API surface internal rather than public to avoid having to maintain a clunky interface for the long term.\r\n\r\n### Customer Impact\r\n\r\nMinimal--we've talked to the only known implementer of the new APIs and they have updated based on privates to use reflection.\r\n\r\nLong-term we will design a better, more supportable API to expose, minimizing our maintenance burden.\r\n\r\n### Regression?\r\n\r\nNo, new feature in 17.8/8.0.100.\r\n\r\n### Testing\r\n\r\n@dfederm updated against private MSBuild from this PR and reported success.\r\n\r\n### Risk\r\n\r\nMedium-low. Some of the code change is more complex than just moving public->internal, but it's all in new, not-widely-used API surface.",
  "state": "CLOSED",
  "createdAt": "2023-10-13T21:41:07Z",
  "updatedAt": "2023-10-19T20:44:16Z",
  "closedAt": "2023-10-19T20:44:10Z",
  "mergedAt": null,
  "additions": 0,
  "deletions": 0,
  "changedFiles": 0,
  "headRefName": "exp/privatize-cache",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": []
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-10-13T21:41:13Z",
        "author": null
      },
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-10-18T21:59:17Z",
        "author": null
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we also put all this under Experimental, or does it matter since it's all internal anyway?",
              "createdAt": "2023-10-13T22:02:48Z",
              "path": "src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs",
              "diffHunk": "@@ -9,7 +9,7 @@\n using System.Threading;\n using Microsoft.Build.BackEnd;\n using Microsoft.Build.Execution;\n-using Microsoft.Build.Framework.FileAccess;\n+using Microsoft.Build.Experimental.FileAccess;\n using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.FileAccesses",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "I think I answered my own question",
              "createdAt": "2023-10-13T22:03:09Z",
              "path": "src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs",
              "diffHunk": "@@ -9,7 +9,7 @@\n using System.Threading;\n using Microsoft.Build.BackEnd;\n using Microsoft.Build.Execution;\n-using Microsoft.Build.Framework.FileAccess;\n+using Microsoft.Build.Experimental.FileAccess;\n using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.FileAccesses",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Yeah it seems ok to me this way.",
              "createdAt": "2023-10-18T21:45:02Z",
              "path": "src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs",
              "diffHunk": "@@ -9,7 +9,7 @@\n using System.Threading;\n using Microsoft.Build.BackEnd;\n using Microsoft.Build.Execution;\n-using Microsoft.Build.Framework.FileAccess;\n+using Microsoft.Build.Experimental.FileAccess;\n using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.FileAccesses",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This right?",
              "createdAt": "2023-10-13T22:07:07Z",
              "path": "src/Build/FileAccess/ProcessData.cs",
              "diffHunk": "@@ -21,5 +23,11 @@ namespace Microsoft.Build.Framework.FileAccess\n         uint ParentProcessId,\n         DateTime CreationDateTime,\n         DateTime ExitDateTime,\n-        uint ExitCode);\n+        uint ExitCode) : ITranslatable\n+    {\n+        void ITranslatable.Translate(ITranslator translator)\n+        {\n+            throw new NotImplementedException();",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Ah, maybe that's one reason this is still a draft =P",
              "createdAt": "2023-10-13T22:08:38Z",
              "path": "src/Build/FileAccess/ProcessData.cs",
              "diffHunk": "@@ -21,5 +23,11 @@ namespace Microsoft.Build.Framework.FileAccess\n         uint ParentProcessId,\n         DateTime CreationDateTime,\n         DateTime ExitDateTime,\n-        uint ExitCode);\n+        uint ExitCode) : ITranslatable\n+    {\n+        void ITranslatable.Translate(ITranslator translator)\n+        {\n+            throw new NotImplementedException();",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "It sure wasn't :)",
              "createdAt": "2023-10-14T21:01:01Z",
              "path": "src/Build/FileAccess/ProcessData.cs",
              "diffHunk": "@@ -21,5 +23,11 @@ namespace Microsoft.Build.Framework.FileAccess\n         uint ParentProcessId,\n         DateTime CreationDateTime,\n         DateTime ExitDateTime,\n-        uint ExitCode);\n+        uint ExitCode) : ITranslatable\n+    {\n+        void ITranslatable.Translate(ITranslator translator)\n+        {\n+            throw new NotImplementedException();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: remove commented code",
              "createdAt": "2023-10-16T16:54:35Z",
              "path": "src/Framework/BinaryTranslator.cs",
              "diffHunk": "@@ -427,81 +424,29 @@ public void Translate(ref BuildEventContext value)\n                     _reader.ReadInt32());\n             }\n \n-            /// <inheritdoc/>\n-            public void Translate(ref FileAccessData fileAccessData)\n-            {\n-                ReportedFileOperation reportedFileOperation = default;\n-                RequestedAccess requestedAccess = default;\n-                uint processId = default;\n-                uint error = default;\n-                DesiredAccess desiredAccess = default;\n-                FlagsAndAttributes flagsAndAttributes = default;\n-                string path = default;\n-                string processArgs = default;\n-                bool isAnAugmentedFileAccess = default;\n-                TranslateEnum(ref reportedFileOperation, (int)reportedFileOperation);\n-                TranslateEnum(ref requestedAccess, (int)requestedAccess);\n-                Translate(ref processId);\n-                Translate(ref error);\n-                TranslateEnum(ref desiredAccess, (int)desiredAccess);\n-                TranslateEnum(ref flagsAndAttributes, (int)flagsAndAttributes);\n-                Translate(ref path);\n-                Translate(ref processArgs);\n-                Translate(ref isAnAugmentedFileAccess);\n-                fileAccessData = new FileAccessData(\n-                    reportedFileOperation,\n-                    requestedAccess,\n-                    processId,\n-                    error,\n-                    desiredAccess,\n-                    flagsAndAttributes,\n-                    path,\n-                    processArgs,\n-                    isAnAugmentedFileAccess);\n-            }\n-\n-            /// <inheritdoc/>\n-            public void Translate(ref List<FileAccessData> fileAccessDataList)\n-            {\n-                if (!TranslateNullable(fileAccessDataList))\n-                {\n-                    return;\n-                }\n-\n-                int count = default;\n-                Translate(ref count);\n-                fileAccessDataList = new List<FileAccessData>(count);\n-                for (int i = 0; i < count; i++)\n-                {\n-                    FileAccessData fileAccessData = default;\n-                    Translate(ref fileAccessData);\n-                    fileAccessDataList.Add(fileAccessData);\n-                }\n-            }\n-\n-            /// <inheritdoc/>\n-            public void Translate(ref ProcessData processData)\n-            {\n-                string processName = default;\n-                uint processId = default;\n-                uint parentProcessId = default;\n-                DateTime creationDateTime = default;\n-                DateTime exitDateTime = default;\n-                uint exitCode = default;\n-                Translate(ref processName);\n-                Translate(ref processId);\n-                Translate(ref parentProcessId);\n-                Translate(ref creationDateTime);\n-                Translate(ref exitDateTime);\n-                Translate(ref exitCode);\n-                processData = new ProcessData(\n-                    processName,\n-                    processId,\n-                    parentProcessId,\n-                    creationDateTime,\n-                    exitDateTime,\n-                    exitCode);\n-            }\n+            // /// <inheritdoc/>",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`string processArgs` should be `string? processArgs`",
              "createdAt": "2023-10-16T20:26:46Z",
              "path": "src/Build/FileAccess/FileAccessData.cs",
              "diffHunk": "@@ -0,0 +1,116 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+using Microsoft.Build.BackEnd;\n+\n+namespace Microsoft.Build.Experimental.FileAccess\n+{\n+    /// <summary>\n+    /// File access data.\n+    /// </summary>\n+    [CLSCompliant(false)]\n+    public struct FileAccessData\n+        : ITranslatable\n+    {\n+        private ReportedFileOperation _operation;\n+        private RequestedAccess _requestedAccess;\n+        private uint _processId;\n+        private uint _error;\n+        private DesiredAccess _desiredAccess;\n+        private FlagsAndAttributes _flagsAndAttributes;\n+        private string _path;\n+        private string? _processArgs;\n+        private bool _isAnAugmentedFileAccess;\n+\n+        public FileAccessData(ReportedFileOperation operation, RequestedAccess requestedAccess, uint processId, uint error, DesiredAccess desiredAccess, FlagsAndAttributes flagsAndAttributes, string path, string processArgs, bool isAnAugmentedFileAccess)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}