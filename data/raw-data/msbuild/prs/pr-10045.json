{
  "number": 10045,
  "title": "Remove unnecessary lock in TerminalLogger.UpdateNodeStatus",
  "body": "This is a minor perf improvement.\r\n\r\nIn particular when using the project cache with a high cache rate (thus spamming ProjectFinished events), this lock is taking ~6% of the CPU for the process due to contention. That's a lower bound though because I'm seeing other methods which do take the lock also suffer from high contention (eg `ThreadProc` also takes ~6% CPU), so removing the lock from `UpdateNodeStatus` is likely to reduce contention there as well.\r\n\r\nThis lock isn't necessary since this operation is a simple object replacement in an array. Other similar operations also don't take a lock, (See the write in `ProjectStarted` and the read in `MessageRaised`) which proves that it's not required.",
  "state": "MERGED",
  "createdAt": "2024-04-19T20:35:21Z",
  "updatedAt": "2024-05-01T13:54:38Z",
  "closedAt": "2024-05-01T13:54:38Z",
  "mergedAt": "2024-05-01T13:54:37Z",
  "additions": 6,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "remove-tl-lock",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "58dec175769009890a03f3866aa11b1c979f3269",
          "message": "Remove unnecessary lock in TerminalLogger.UpdateNodeStatus",
          "committedDate": "2024-04-19T20:31:28Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2395e19ee97131b3094c297b24b1e0684c6284c3",
          "message": "Add comment around thread-safety",
          "committedDate": "2024-04-23T15:08:28Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Although from memory safety point of view [this is safe](https://github.com/dotnet/runtime/blob/main/docs/design/specs/Memory-model.md#object-assignment), I feel like it does make the code more susceptible to state tearing and other concurrency bugs. Would you consider using `Volatile.Write` to _document_ the fact that this is writing to a location which is read by other threads concurrently?",
              "createdAt": "2024-04-23T05:56:39Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -701,11 +701,8 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)\n \n     private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? nodeStatus)\n     {\n-        lock (_lock)\n-        {\n-            int nodeIndex = NodeIndexForContext(buildEventContext);\n-            _nodes[nodeIndex] = nodeStatus;\n-        }\n+        int nodeIndex = NodeIndexForContext(buildEventContext);\n+        _nodes[nodeIndex] = nodeStatus;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I don't think `Volatile.Write` is the right mechanism here as it seems to impact ordering of other operations around this, not this operation itself.\r\n\r\nI added a comment to the `_nodes` field.",
              "createdAt": "2024-04-23T15:10:47Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -701,11 +701,8 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)\n \n     private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? nodeStatus)\n     {\n-        lock (_lock)\n-        {\n-            int nodeIndex = NodeIndexForContext(buildEventContext);\n-            _nodes[nodeIndex] = nodeStatus;\n-        }\n+        int nodeIndex = NodeIndexForContext(buildEventContext);\n+        _nodes[nodeIndex] = nodeStatus;",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "I think that's intended. To me the gist of the problem in patterns like this is whether all writes that happened _before_ this one were actually flushed/committed/published - whatever the right term is - to other processors. And if .NET implemented only the memory model as specified in ECMA, on hardware like ARM64 without a memory barrier this could actually misbehave despite the write being atomic. Another processor could read the new reference from the `_nodes` array but the memory pointed to by the reference could still have old contents in it because the writes performed as part of constructing the `NodeStatus` were not properly propagated.",
              "createdAt": "2024-04-23T15:34:42Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -701,11 +701,8 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)\n \n     private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? nodeStatus)\n     {\n-        lock (_lock)\n-        {\n-            int nodeIndex = NodeIndexForContext(buildEventContext);\n-            _nodes[nodeIndex] = nodeStatus;\n-        }\n+        int nodeIndex = NodeIndexForContext(buildEventContext);\n+        _nodes[nodeIndex] = nodeStatus;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}