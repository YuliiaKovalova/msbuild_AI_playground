{
  "number": 8271,
  "title": "Stop dumping stack for BadImageFormatException",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6224\r\n\r\n### Context\r\n\r\nSee issue -- a change was made to add more detail when RAR fails to resolve a reference due to encountering a BIFE. This added too much detail -- not only the message from the inner exception, but also the callstack. We should not dump callstack when there is no bug in MSBuild (or a task/logger).\r\n\r\nOddly enough I hit this again https://github.com/dotnet/msbuild/issues/8140 and didn't remember the original discussion, and therefore again assumed there was a bug.\r\n\r\n### Changes Made\r\n\r\n1. Fix BIFE to include the message from any inner exception. (There was a suggestion in the issue that it also include the exception type, but I don't know of any case where the type is necessary in order to disambiguate what happened, and we don't have precedent for doing it. It would also be ugly.)\r\n2. Revert the original change, now unnecesssary.\r\n\r\n### Testing\r\n\r\nAdded test that fails without the fix.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-12-30T01:59:17Z",
  "updatedAt": "2023-01-06T03:17:56Z",
  "closedAt": "2023-01-06T03:17:56Z",
  "mergedAt": "2023-01-06T03:17:56Z",
  "additions": 17,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "fix.stack",
  "isDraft": false,
  "author": {
    "login": "danmoseley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6436a733c5448ea80bceae4be9a3521a5ca33bbd",
          "message": "Stop dumping stack for BadImageFormatException",
          "committedDate": "2022-12-30T01:55:03Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d3df5a674c94db83a05e0576c0362167e3518d7",
          "message": "fix recursion",
          "committedDate": "2022-12-30T04:46:05Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @KirillOsenkov ",
        "createdAt": "2022-12-30T01:59:37Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Thanks for putting up a PR Dan! Agreed the stack trace looks like it's a bug in MSBuild.",
        "createdAt": "2022-12-30T04:05:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Somehow I forgot that we'd discussed this last year and you've even provided a way to aggregate messages:\r\nhttps://github.com/dotnet/msbuild/issues/6224#issuecomment-909546433",
        "createdAt": "2022-12-30T04:08:53Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@Forgind  does this look good to merge?",
        "createdAt": "2023-01-05T02:41:10Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> @Forgind does this look good to merge?\r\n\r\nLooks good to me!",
        "createdAt": "2023-01-05T21:03:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "could someone merge it then :)",
        "createdAt": "2023-01-05T22:16:39Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "My understanding is that since it's marked with the `merge-when-branch-open` label, magic will happen soon",
        "createdAt": "2023-01-05T22:48:28Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Oh! I see -- I should have figured that out. thanks.",
        "createdAt": "2023-01-05T23:14:42Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Will this recurse into itself infinitely?\r\n\r\nAlso should we display the full chain if there is more than one level of nesting?\r\n\r\nSomething like this perhaps?\r\n\r\n```csharp\r\n    private static string GetExceptionMessage(Exception ex)\r\n    {\r\n        string message = null;\r\n\r\n        while (ex != null)\r\n        {\r\n            if (message == null)\r\n            {\r\n                message = ex.Message;\r\n            }\r\n            else\r\n            {\r\n                message += $\"{message}: {ex.Message}\";\r\n            }\r\n\r\n            ex = ex.InnerException;\r\n        }\r\n\r\n        return message;\r\n    }\r\n```",
              "createdAt": "2022-12-30T04:03:48Z",
              "path": "src/Tasks/AssemblyDependency/BadImageReferenceException.cs",
              "diffHunk": "@@ -29,5 +29,10 @@ private BadImageReferenceException(SerializationInfo info, StreamingContext cont\n             : base(info, context)\n         {\n         }\n+\n+        /// <summary>\n+        /// Gets a message that describes the exception.\n+        /// </summary>\n+        public override string Message => (InnerException == null) ? Message : $\"{Message} {InnerException.Message}\";",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "We only expect certain inner exception types here, some basic corelib ones that shouldn't have their own inner exceptions. I think we'd only want to add such code if we knew there was a case. \r\n\r\nIf we wanted to do this speculatively anyway, there's nothing special about this particular place. We'd have to find every place in the MSBuild codebase that gets a Message and feed it to your helper code above, since corelib exceptions in general do not aggregate messages, presumably by design (see Exception.cs). In fact I always figured the \"message concatenation\" was an MSBuild invention, which works remarkably cleanly (I think I filed a bug long long ago for a particular BCL exception message that did not end in a period..).  AggregateException does it of course, but I think the way it stringifies them is ugly. I've tried in the past to change it.\r\n\r\nI don't think that churn is necessary nor adding such untestable code.",
              "createdAt": "2022-12-30T04:33:05Z",
              "path": "src/Tasks/AssemblyDependency/BadImageReferenceException.cs",
              "diffHunk": "@@ -29,5 +29,10 @@ private BadImageReferenceException(SerializationInfo info, StreamingContext cont\n             : base(info, context)\n         {\n         }\n+\n+        /// <summary>\n+        /// Gets a message that describes the exception.\n+        /// </summary>\n+        public override string Message => (InnerException == null) ? Message : $\"{Message} {InnerException.Message}\";",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "> Will this recurse into itself infinitely?\r\n\r\nOops, fixed. Not sure why tests passed for me.",
              "createdAt": "2022-12-30T04:46:14Z",
              "path": "src/Tasks/AssemblyDependency/BadImageReferenceException.cs",
              "diffHunk": "@@ -29,5 +29,10 @@ private BadImageReferenceException(SerializationInfo info, StreamingContext cont\n             : base(info, context)\n         {\n         }\n+\n+        /// <summary>\n+        /// Gets a message that describes the exception.\n+        /// </summary>\n+        public override string Message => (InnerException == null) ? Message : $\"{Message} {InnerException.Message}\";",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "OK sounds good to me",
              "createdAt": "2022-12-30T05:10:29Z",
              "path": "src/Tasks/AssemblyDependency/BadImageReferenceException.cs",
              "diffHunk": "@@ -29,5 +29,10 @@ private BadImageReferenceException(SerializationInfo info, StreamingContext cont\n             : base(info, context)\n         {\n         }\n+\n+        /// <summary>\n+        /// Gets a message that describes the exception.\n+        /// </summary>\n+        public override string Message => (InnerException == null) ? Message : $\"{Message} {InnerException.Message}\";",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}