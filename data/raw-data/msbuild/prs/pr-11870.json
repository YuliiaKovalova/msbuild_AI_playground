{
  "number": 11870,
  "title": "Use hashing for targets list comparison and enable scheduler tests",
  "body": "### Context\r\nAssignGlobalRequestId is a critical method in Scheduler. This change attempts to optimize the scenario in it.\r\n\r\n### Changes Made\r\nSwitch from 2 string list comparison to hashset against the second list of strings.\r\n\r\n### Testing\r\nCovered by existing tests.",
  "state": "MERGED",
  "createdAt": "2025-05-20T12:44:52Z",
  "updatedAt": "2025-05-29T16:18:15Z",
  "closedAt": "2025-05-29T16:18:15Z",
  "mergedAt": "2025-05-29T16:18:15Z",
  "additions": 60,
  "deletions": 54,
  "changedFiles": 2,
  "headRefName": "dev/ykovalova/scheduler_optimization",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b75dd1885e5ffb9c9befe061f7102dafad295c8f",
          "message": "Use hashing for targets list comparison and enable scheduler tests",
          "committedDate": "2025-05-20T12:42:41Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "47e1503093b04c651880adcaabd101eb2343321c",
          "message": "use more robust aggregation\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>",
          "committedDate": "2025-05-20T12:49:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "15dee5d5f2fd39e03d86828c3cf8979c95b9ca38",
          "message": "fix review comment",
          "committedDate": "2025-05-20T15:28:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d79cb6783d9e79f7ed11ff16309545d176a9e914",
          "message": "cleanup",
          "committedDate": "2025-05-20T16:03:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Using XOR to combine hash codes can cancel out duplicates and increase collision risk. Consider a more robust aggregation (e.g., `hash = hash * 31 + ...`) for better distribution.\n```suggestion\n            int hash = 17; // Start with a non-zero seed\n            foreach (string target in targets)\n            {\n                hash = hash * 31 + StringComparer.OrdinalIgnoreCase.GetHashCode(target);\n```",
              "createdAt": "2025-05-20T12:46:56Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)\n+        {\n+            int hash = 0;\n+            foreach (string target in targets)\n+            {\n+                hash ^= StringComparer.OrdinalIgnoreCase.GetHashCode(target);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This check is duplicated in `TargetsMatch`. I'd consider consolidating all of the checking/comparison logic inside of `TargetsMatch`.",
              "createdAt": "2025-05-20T15:16:22Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2239,39 +2239,30 @@ private bool RequestOrAnyItIsBlockedByCanBeServiced(SchedulableRequest request)\n         }\n \n         /// <summary>\n-        /// Determines if we have a matching request somewhere, and if so, assigns the same request ID.  Otherwise\n-        /// assigns a new request id.\n+        /// Determines if we have a matching request somewhere, and if so, assigns the same request ID.\n+        /// Otherwise assigns a new request id.\n         /// </summary>\n-        /// <remarks>\n-        /// UNDONE: (Performance) This algorithm should be modified so we don't have to iterate over all of the\n-        /// requests to find a matching one.  A HashSet with proper equality semantics and a good hash code for the BuildRequest\n-        /// would speed this considerably, especially for large numbers of projects in a build.\n-        /// </remarks>\n         /// <param name=\"request\">The request whose ID should be assigned</param>\n         private void AssignGlobalRequestId(BuildRequest request)\n         {\n-            bool assignNewId = false;\n-            if (request.GlobalRequestId == BuildRequest.InvalidGlobalRequestId && _schedulingData.GetRequestsAssignedToConfigurationCount(request.ConfigurationId) > 0)\n+            // Quick exit if already assigned or if there are no requests for this configuration\n+            if (request.GlobalRequestId != BuildRequest.InvalidGlobalRequestId\n+                || _schedulingData.GetRequestsAssignedToConfigurationCount(request.ConfigurationId) == 0)\n+            {\n+                request.GlobalRequestId = _nextGlobalRequestId++;\n+                return;\n+            }\n+\n+            // Look for matching requests in the configuration\n+            foreach (SchedulableRequest existingRequest in _schedulingData.GetRequestsAssignedToConfiguration(request.ConfigurationId))\n             {\n-                foreach (SchedulableRequest existingRequest in _schedulingData.GetRequestsAssignedToConfiguration(request.ConfigurationId))\n+                if (existingRequest.BuildRequest.Targets.Count == request.Targets.Count)",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "I saved it here as a fast exit for the loop ",
              "createdAt": "2025-05-20T15:23:51Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2239,39 +2239,30 @@ private bool RequestOrAnyItIsBlockedByCanBeServiced(SchedulableRequest request)\n         }\n \n         /// <summary>\n-        /// Determines if we have a matching request somewhere, and if so, assigns the same request ID.  Otherwise\n-        /// assigns a new request id.\n+        /// Determines if we have a matching request somewhere, and if so, assigns the same request ID.\n+        /// Otherwise assigns a new request id.\n         /// </summary>\n-        /// <remarks>\n-        /// UNDONE: (Performance) This algorithm should be modified so we don't have to iterate over all of the\n-        /// requests to find a matching one.  A HashSet with proper equality semantics and a good hash code for the BuildRequest\n-        /// would speed this considerably, especially for large numbers of projects in a build.\n-        /// </remarks>\n         /// <param name=\"request\">The request whose ID should be assigned</param>\n         private void AssignGlobalRequestId(BuildRequest request)\n         {\n-            bool assignNewId = false;\n-            if (request.GlobalRequestId == BuildRequest.InvalidGlobalRequestId && _schedulingData.GetRequestsAssignedToConfigurationCount(request.ConfigurationId) > 0)\n+            // Quick exit if already assigned or if there are no requests for this configuration\n+            if (request.GlobalRequestId != BuildRequest.InvalidGlobalRequestId\n+                || _schedulingData.GetRequestsAssignedToConfigurationCount(request.ConfigurationId) == 0)\n+            {\n+                request.GlobalRequestId = _nextGlobalRequestId++;\n+                return;\n+            }\n+\n+            // Look for matching requests in the configuration\n+            foreach (SchedulableRequest existingRequest in _schedulingData.GetRequestsAssignedToConfiguration(request.ConfigurationId))\n             {\n-                foreach (SchedulableRequest existingRequest in _schedulingData.GetRequestsAssignedToConfiguration(request.ConfigurationId))\n+                if (existingRequest.BuildRequest.Targets.Count == request.Targets.Count)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we should only create one `HashSet<string>` based on the incoming `BuildRequest`. Then we take each list of targets that we want to compare against and do a set comparison.",
              "createdAt": "2025-05-20T15:18:40Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)\n+        {\n+            int hash = 17; // Start with a non-zero seed\n+            foreach (string target in targets)\n+            {\n+                hash = hash * 31 + StringComparer.OrdinalIgnoreCase.GetHashCode(target);\n+            }\n+\n+            return hash;\n+        }\n+\n+        /// <summary>\n+        /// Determines if two target collections contain the same targets, ignoring order and case.\n+        /// </summary>\n+        private bool TargetsMatch(List<string> firstTargetsList, List<string> secondTargetsList)\n+        {\n+            if (firstTargetsList.Count != secondTargetsList.Count)\n+            {\n+                return false;\n+            }\n+\n+            HashSet<string> set = new HashSet<string>(firstTargetsList, StringComparer.OrdinalIgnoreCase);",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm curious how much this buys us compared to just calling `SetEquals`",
              "createdAt": "2025-05-20T15:19:52Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "For clarification, the build in string hash code functions are somewhat expensive since they enumerate the whole string. Having this check requires enumerating each string in the list to accumulate the comparison hash code, and we then do essentially the same work inside of `SetEquals`.",
              "createdAt": "2025-05-20T15:33:58Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "makes a lot of sense, applied the suggestion",
              "createdAt": "2025-05-20T16:04:18Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There's a boxed enumerator for the call to `SetEquals`. That might not be worth worrying about, but it's worth profiling to see if it causes too many allocations in this path.",
              "createdAt": "2025-05-20T15:24:51Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2271,37 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)\n+        {\n+            int hash = 17; // Start with a non-zero seed\n+            foreach (string target in targets)\n+            {\n+                hash = hash * 31 + StringComparer.OrdinalIgnoreCase.GetHashCode(target);\n+            }\n+\n+            return hash;\n+        }\n+\n+        /// <summary>\n+        /// Determines if two target collections contain the same targets, ignoring order and case.\n+        /// </summary>\n+        private bool TargetsMatch(List<string> firstTargetsList, List<string> secondTargetsList)\n+        {\n+            if (firstTargetsList.Count != secondTargetsList.Count)\n+            {\n+                return false;\n+            }\n+\n+            HashSet<string> set = new HashSet<string>(firstTargetsList, StringComparer.OrdinalIgnoreCase);\n+\n+            return set.SetEquals(secondTargetsList);",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm leaning towards having our own comparison rather than calling `SetEquals`. The constraints in this case are more restrictive than the general `SetEquals` which lets us be more efficient since we don't care about duplicates. This should cover our case after we ensure the collections are the same size:\r\n\r\n    foreach (string target in secondTargetsList)\r\n    {\r\n        if (!firstTargetsSet.Contains(target))\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n\r\nThis avoids:\r\n\r\n- Boxing the `List<string>` enumerator\r\n- Some minimal type casting inside of `SetEquals()`\r\n- Allocation of `BitHelper` class in the `CheckUniqueAndUnfoundElements()` (called by `SetEquals()`)\r\n",
              "createdAt": "2025-05-20T15:54:51Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2273,35 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)\n+        {\n+            int hash = 17; // Start with a non-zero seed\n+            foreach (string target in targets)\n+            {\n+                hash = hash * 31 + StringComparer.OrdinalIgnoreCase.GetHashCode(target);\n+            }\n+\n+            return hash;\n+        }\n+\n+        /// <summary>\n+        /// Determines if two target collections contain the same targets, ignoring order and case.\n+        /// </summary>\n+        private static bool TargetsMatch(HashSet<string> firstTargetsSet, List<string> secondTargetsList)\n+        {\n+            if (firstTargetsSet.Count != secondTargetsList.Count)\n+            {\n+                return false;\n+            }\n+\n+            return firstTargetsSet.SetEquals(secondTargetsList);",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "applied the change, thanks for the explanation.",
              "createdAt": "2025-05-20T16:04:42Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2280,8 +2273,35 @@ private void AssignGlobalRequestId(BuildRequest request)\n                 }\n             }\n \n-            request.GlobalRequestId = _nextGlobalRequestId;\n-            _nextGlobalRequestId++;\n+            // No matching request found, assign a new ID\n+            request.GlobalRequestId = _nextGlobalRequestId++;\n+        }\n+\n+        /// <summary>\n+        /// Computes a hash code for a collection of targets, ignoring order and case.\n+        /// </summary>\n+        private int ComputeTargetsHash(List<string> targets)\n+        {\n+            int hash = 17; // Start with a non-zero seed\n+            foreach (string target in targets)\n+            {\n+                hash = hash * 31 + StringComparer.OrdinalIgnoreCase.GetHashCode(target);\n+            }\n+\n+            return hash;\n+        }\n+\n+        /// <summary>\n+        /// Determines if two target collections contain the same targets, ignoring order and case.\n+        /// </summary>\n+        private static bool TargetsMatch(HashSet<string> firstTargetsSet, List<string> secondTargetsList)\n+        {\n+            if (firstTargetsSet.Count != secondTargetsList.Count)\n+            {\n+                return false;\n+            }\n+\n+            return firstTargetsSet.SetEquals(secondTargetsList);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}