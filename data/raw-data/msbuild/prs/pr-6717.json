{
  "number": 6717,
  "title": "Deadlock at ExecuteSubmission vs LoggingService",
  "body": "Fixes #6712 \r\n\r\n### Context\r\nDuring blocking execution of `LoggingService.WaitForThreadToProcessEvents` from `BuildManager`, event processing can invoke callback into the same `BuildManager` instance and cause deadlock.\r\n\r\n### Changes Made\r\nBlocking execution of `LoggingService.WaitForThreadToProcessEvents` is now not called from inside of lock so thread handling event processing callback can than acquire `BuildManager._syncLock` without deadlock.\r\nCore was reviewed considering possible state mutation during critical sections splitting => `lock{}; other-thread-mutation; lock{}` and considered safe.\r\n\r\n### Testing\r\nManual testing by throwing exception during code pause.\r\n\r\n### Notes\r\nI was trying my best, but still, this code requires careful review!\r\n",
  "state": "MERGED",
  "createdAt": "2021-07-29T13:58:24Z",
  "updatedAt": "2021-12-08T22:01:53Z",
  "closedAt": "2021-08-11T09:59:18Z",
  "mergedAt": "2021-08-11T09:59:18Z",
  "additions": 157,
  "deletions": 93,
  "changedFiles": 4,
  "headRefName": "rokonec/6712-deadlock-at-executesubmission",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d761551fff6039f1c8ac0d698c6c6c5ef80f5165",
          "message": "Removing OnProjectStarted and OnProjectFinished events from ILoggingService",
          "committedDate": "2021-07-28T11:13:15Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c39d009d496e4c049983d6221bc402b721bce149",
          "message": "Revert \"Removing OnProjectStarted and OnProjectFinished events from ILoggingService\"\n\nThis reverts commit d761551fff6039f1c8ac0d698c6c6c5ef80f5165.",
          "committedDate": "2021-07-28T18:11:24Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bc77d210a100884f72fbc640bfac10626cac225",
          "message": "Fix LogingService protection of WaitForThreadToProcessEvents",
          "committedDate": "2021-07-29T13:42:57Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c90484955efa238a80253bb781444b3e564cff11",
          "message": "Do not lock during watingc for all LoggingServicee events to be processed",
          "committedDate": "2021-07-29T13:45:39Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "04a1a67b0213642172000b9324a0c7ae27ea9815",
          "message": "Update VerifyThrow error message",
          "committedDate": "2021-07-29T18:16:45Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a4dc9f28ade0c528c169801f00fffce87d70215",
          "message": "Review notes #1 - cdmihai\n- remaing local variable",
          "committedDate": "2021-08-05T12:27:00Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf23dd0a8448f4d453ff7c4961327e2d72384da5",
          "message": "Fix WaitForThreadToProcessEvents thread safety.",
          "committedDate": "2021-08-05T12:32:56Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> During blocking execution of LoggingService.WaitForThreadToProcessEvents from BuildManager, event processing can invoke callback into the same BuildManager instance and cause deadlock.\r\n\r\nCan you please post sample callstacks where this happens? Which `BuildManager` methods are called while we're waiting for the logging service?",
        "createdAt": "2021-08-03T12:32:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> > During blocking execution of LoggingService.WaitForThreadToProcessEvents from BuildManager, event processing can invoke callback into the same BuildManager instance and cause deadlock.\r\n> \r\n> Can you please post sample callstacks where this happens? Which `BuildManager` methods are called while we're waiting for the logging service?\r\n\r\nIn related issue #6712 there is screen shot of parallel stack view, which defines those conflicting callstacks. I will copy/paste bellow with detailed explanation:\r\n![image](https://user-images.githubusercontent.com/25249058/128039478-a2e6d081-054f-4e07-9016-ccfb7b66493d.png)\r\nRight thread 14088 inside of `BuildManager.ExecuteSubmission`  locks `BuildManager._syncLock` and calls `LoggingService.TerminateLoggingEventQueue` which block and wait for event signalized that all queued messages from LoggingService has been handled.\r\nLeft thread, 19940, is  handling queued messages from LoggingService and is just handling particular LoggingService message which processing calls back into `BuildManager.OnProjectFinished` which requests `lock (_syncLock)` but _syncLokc will not be released until ALL messages, including just processing message, is process. \r\n\r\n",
        "createdAt": "2021-08-03T15:21:24Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I [tried](https://gist.github.com/cdmihai/0955cb217b2cbd66e18c89b20bf68319#1-breaking-the-big-lock-in-multiple-smaller-different-locks) splitting the lock in ExecuteSubmission in the past but ended up reverting it because I just couldn't reason about all the interleaving states :)\r\n\r\nThe deadlock is happening because two threads want to achieve the same high level action at the same time: complete the logging for a given submission. So instead of dividing the locks, a less intrusive change would be to detect when two threads want to complete the same submission and have one of them back off. In this case, OnProjectFinished should back off if it sees that someone else (ExecuteSubmission) is completing the submission.\r\n",
        "createdAt": "2021-08-03T18:47:18Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai \r\n> The deadlock is happening because two threads want to achieve the same high level action at the same time: complete the logging for a given submission.\r\n\r\nIn this particular deadlock instance the submission 'A' trying to be completed by `OnProjectFinished` thread is different from submission 'B' being completed by `BuildManager.ExecuteSubmission`. `LoggingService.TerminateLoggingEventQueue` blocks until ALL events from its current queue are handled, it could be, and mostly probably is, empty but it could also contains many `ProjectFinishedEventArgs` for different projects/submissions.\r\nFrom the code it is not obvious, why completing submissions, in some cases (mostly cancel or failure), require all current logging events to be handled. To me it does not seems to be good/correct design, but it is what we have, and changing it seems more risky to me than changes I have made in this PR.",
        "createdAt": "2021-08-04T14:02:30Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "> From the code it is not obvious, why completing submissions, in some cases (mostly cancel or failure), require all current logging events to be handled. \r\n\r\nIs it simply to ensure that when a build ends, nothing of the log is lost? It would be a surprise if eg., the build copied a file, but it didn't appear in the log as around the same time the build was canceled .",
        "createdAt": "2021-08-05T02:42:54Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "having what",
              "createdAt": "2021-07-29T17:59:57Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1129,45 +1131,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n \n                     resolvedConfiguration.ExplicitlyLoaded = true;\n \n-                    if (_shuttingDown)\n+                    // assign shutting down to local variable to avoid race condition: \"setting _shuttingDown after this point during this method execution\"\n+                    shuttingDown = _shuttingDown;\n+                    if (!shuttingDown)\n                     {\n-                        // We were already canceled!\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());\n-                        submission.CompleteResults(result);\n-                        submission.CompleteLogging(true);\n-                        CheckSubmissionCompletenessAndRemove(submission);\n-                        return;\n-                    }\n-\n-                    if (ProjectCacheIsPresent())\n-                    {\n-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n-                    }\n-                    else\n-                    {\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);\n+                        if (ProjectCacheIsPresent())\n+                        {\n+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n+                        }\n+                        else\n+                        {\n+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);\n+                        }\n                     }\n                 }\n-                catch (ProjectCacheException ex)\n+            }\n+            catch (ProjectCacheException ex)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n+            }\n+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+            {\n+                if (resolvedConfiguration is not null)\n                 {\n-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+                else\n                 {\n-                    if (resolvedConfiguration is not null)\n-                    {\n-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n-                    }\n-                    else\n-                    {\n-                        HandleSubmissionException(submission, ex);\n-                        throw;\n-                    }\n+                    HandleSubmissionException(submission, ex);\n+                    throw;\n                 }\n             }\n+\n+            // We are shutting down so submission has to be completed with BuildAbortedException\n+            Debug.Assert(!Monitor.IsEntered(_syncLock));\n+            if (shuttingDown)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Fixed",
              "createdAt": "2021-07-29T23:23:24Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1129,45 +1131,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n \n                     resolvedConfiguration.ExplicitlyLoaded = true;\n \n-                    if (_shuttingDown)\n+                    // assign shutting down to local variable to avoid race condition: \"setting _shuttingDown after this point during this method execution\"\n+                    shuttingDown = _shuttingDown;\n+                    if (!shuttingDown)\n                     {\n-                        // We were already canceled!\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());\n-                        submission.CompleteResults(result);\n-                        submission.CompleteLogging(true);\n-                        CheckSubmissionCompletenessAndRemove(submission);\n-                        return;\n-                    }\n-\n-                    if (ProjectCacheIsPresent())\n-                    {\n-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n-                    }\n-                    else\n-                    {\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);\n+                        if (ProjectCacheIsPresent())\n+                        {\n+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n+                        }\n+                        else\n+                        {\n+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);\n+                        }\n                     }\n                 }\n-                catch (ProjectCacheException ex)\n+            }\n+            catch (ProjectCacheException ex)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n+            }\n+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+            {\n+                if (resolvedConfiguration is not null)\n                 {\n-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+                else\n                 {\n-                    if (resolvedConfiguration is not null)\n-                    {\n-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n-                    }\n-                    else\n-                    {\n-                        HandleSubmissionException(submission, ex);\n-                        throw;\n-                    }\n+                    HandleSubmissionException(submission, ex);\n+                    throw;\n                 }\n             }\n+\n+            // We are shutting down so submission has to be completed with BuildAbortedException\n+            Debug.Assert(!Monitor.IsEntered(_syncLock));\n+            if (shuttingDown)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: better name: `submissionNeedsCompletion`",
              "createdAt": "2021-08-04T18:18:35Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1548,21 +1563,50 @@ private void HandleSubmissionException(BuildSubmission submission, Exception ex)\n                 }\n             }\n \n-            lock(_syncLock)\n+            bool setFaultedResult;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Move the assert to the top of the method? It's executed almost always anyway.",
              "createdAt": "2021-08-04T20:15:24Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1129,45 +1131,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n \n                     resolvedConfiguration.ExplicitlyLoaded = true;\n \n-                    if (_shuttingDown)\n+                    // assign shutting down to local variable to avoid race condition: \"setting _shuttingDown after this point during this method execution\"\n+                    shuttingDown = _shuttingDown;\n+                    if (!shuttingDown)\n                     {\n-                        // We were already canceled!\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());\n-                        submission.CompleteResults(result);\n-                        submission.CompleteLogging(true);\n-                        CheckSubmissionCompletenessAndRemove(submission);\n-                        return;\n-                    }\n-\n-                    if (ProjectCacheIsPresent())\n-                    {\n-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n-                    }\n-                    else\n-                    {\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);\n+                        if (ProjectCacheIsPresent())\n+                        {\n+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n+                        }\n+                        else\n+                        {\n+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);\n+                        }\n                     }\n                 }\n-                catch (ProjectCacheException ex)\n+            }\n+            catch (ProjectCacheException ex)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having BuildRequestConfiguration\");\n+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n+            }\n+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+            {\n+                if (resolvedConfiguration is not null)\n                 {\n-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+                else\n                 {\n-                    if (resolvedConfiguration is not null)\n-                    {\n-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n-                    }\n-                    else\n-                    {\n-                        HandleSubmissionException(submission, ex);\n-                        throw;\n-                    }\n+                    HandleSubmissionException(submission, ex);\n+                    throw;\n                 }\n             }\n+\n+            // We are shutting down so submission has to be completed with BuildAbortedException\n+            Debug.Assert(!Monitor.IsEntered(_syncLock));",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'd rather keep it close to the lines which shall not be locked. ",
              "createdAt": "2021-08-05T12:24:57Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1129,45 +1131,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread\n \n                     resolvedConfiguration.ExplicitlyLoaded = true;\n \n-                    if (_shuttingDown)\n+                    // assign shutting down to local variable to avoid race condition: \"setting _shuttingDown after this point during this method execution\"\n+                    shuttingDown = _shuttingDown;\n+                    if (!shuttingDown)\n                     {\n-                        // We were already canceled!\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());\n-                        submission.CompleteResults(result);\n-                        submission.CompleteLogging(true);\n-                        CheckSubmissionCompletenessAndRemove(submission);\n-                        return;\n-                    }\n-\n-                    if (ProjectCacheIsPresent())\n-                    {\n-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n-                    }\n-                    else\n-                    {\n-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);\n+                        if (ProjectCacheIsPresent())\n+                        {\n+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));\n+                        }\n+                        else\n+                        {\n+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);\n+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);\n+                        }\n                     }\n                 }\n-                catch (ProjectCacheException ex)\n+            }\n+            catch (ProjectCacheException ex)\n+            {\n+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having BuildRequestConfiguration\");\n+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n+            }\n+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+            {\n+                if (resolvedConfiguration is not null)\n                 {\n-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, \"Cannot call project cache without having \");\n                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n                 }\n-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))\n+                else\n                 {\n-                    if (resolvedConfiguration is not null)\n-                    {\n-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);\n-                    }\n-                    else\n-                    {\n-                        HandleSubmissionException(submission, ex);\n-                        throw;\n-                    }\n+                    HandleSubmissionException(submission, ex);\n+                    throw;\n                 }\n             }\n+\n+            // We are shutting down so submission has to be completed with BuildAbortedException\n+            Debug.Assert(!Monitor.IsEntered(_syncLock));",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this change related to the fix or does it address another issue?",
              "createdAt": "2021-08-04T20:27:49Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1159,12 +1159,15 @@ internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottlin\n         /// </summary>\n         internal void WaitForThreadToProcessEvents()\n         {\n-            // This method may be called in the shutdown submission callback, this callback may be called after the logging service has \n-            // shutdown and nulled out the events we were going to wait on.\n-            if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)\n+            lock (_lockObject)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It is another bug. `TerminateLoggingEventQueue()` put LoggingService into state which will either silently reject events coming into its queue while it is waiting for all existing events to be handled.\r\nAlso `CreateLoggingEventQueue()` modifies `_loggingQueue` which shall be protected for concurrent access.\r\nHowever, I will have to modify it, because the way I have fixed it, it could cause different deadlock, when any registered logger callback into LoggingService for example with intent to log something. That seems to me as quite possible.\r\nI'll modify it and let you know.",
              "createdAt": "2021-08-04T21:35:46Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -1159,12 +1159,15 @@ internal virtual void ProcessLoggingEvent(object buildEvent, bool allowThrottlin\n         /// </summary>\n         internal void WaitForThreadToProcessEvents()\n         {\n-            // This method may be called in the shutdown submission callback, this callback may be called after the logging service has \n-            // shutdown and nulled out the events we were going to wait on.\n-            if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)\n+            lock (_lockObject)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}