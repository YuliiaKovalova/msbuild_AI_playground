{
  "number": 5657,
  "title": "Get target framework info from inner builds in GetTargetFrameworks",
  "body": "In order to support implicitly setting the `TargetPlatformVersion` (for example for a `TargetFramework` of `net5.0-windows`), as well as to eventually support [TargetFramework values as aliases](https://github.com/NuGet/Home/issues/5154), we need to update the project reference protocol.  The `GetTargetFrameworks` target needs to return information not just about the `TargetFrameworks`, but also about the `TargetFrameworkMoniker` and `TargetPlatformMoniker` that it parses out to.  This requires dispatching an inner build to get this information.\r\n\r\nThe new information will be consumed by the `GetReferenceNearestTargetFrameworkTask` task, which is being updated here: https://github.com/NuGet/NuGet.Client/pull/3578\r\n\r\nFYI @nkolev92",
  "state": "MERGED",
  "createdAt": "2020-08-15T00:06:39Z",
  "updatedAt": "2020-12-28T23:27:11Z",
  "closedAt": "2020-08-21T15:59:29Z",
  "mergedAt": "2020-08-21T15:59:29Z",
  "additions": 73,
  "deletions": 14,
  "changedFiles": 4,
  "headRefName": "GetTargetFrameworks-InnerBuild",
  "isDraft": false,
  "author": {
    "login": "dsplaisted"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "80c6cfd76b82a0c7b0496c70758fd5d506092e2e",
          "message": "Get target framework info from inner builds in GetTargetFrameworks",
          "committedDate": "2020-08-14T00:19:34Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f045984e81f3a6457f12f76d846cd76d69b8d5e",
          "message": "Update project reference protocol documetation",
          "committedDate": "2020-08-15T00:01:52Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51e38b5c4e54d70d413815c6aaf6f45b2f97bc01",
          "message": "Light up passing target platform to task based on whether NuGet version supports it",
          "committedDate": "2020-08-15T01:41:06Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e74f444363853de68c7b380c735c3f8d456eec7b",
          "message": "Add GetTargetFrameworksWithPlatformForSingleTargetFramework to static graph protocol",
          "committedDate": "2020-08-18T21:36:14Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Also add `GetTargetFrameworksWithPlatformForSingleTargetFramework` to the target calling protocol here: https://github.com/dotnet/msbuild/blob/df645299a158c787f9884fca2bcd8c295318193f/src/Tasks/Microsoft.Managed.After.targets#L45-L49\r\n\r\nWe could also leave it stale to make sure that it breaks the tests that should break in the sdk if the protocol is not declared: https://github.com/dotnet/sdk/blob/4112eb34e3dd71c0888503af53e7e9d7560ad544/src/Tests/Microsoft.NET.Build.Tests/GivenThatWeWantToBuildAnAppWithoutTransitiveProjectRefs.cs#L34",
        "createdAt": "2020-08-17T21:19:41Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Does d15de13 address the static graph protocol?  Do you think anything else will need to change?\r\n\r\n@rainersigwald Does this look good to merge?",
        "createdAt": "2020-08-18T20:39:09Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> @cdmihai Does d15de13 address the static graph protocol? Do you think anything else will need to change?\r\n\r\nLooks good for Build. If it ends up being called for Clean as well, you have to update that one as well.",
        "createdAt": "2020-08-18T21:10:06Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I like the assertion, we should have them everywhere, but I am morbidly curios how many people it will break :D",
              "createdAt": "2020-08-17T18:54:11Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -21,13 +21,20 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(CustomBeforeMicrosoftCommonCrossTargetingTargets)\" Condition=\"'$(CustomBeforeMicrosoftCommonCrossTargetingTargets)' != '' and Exists('$(CustomBeforeMicrosoftCommonCrossTargetingTargets)')\"/>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' != 'true'\"",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "If people want to call GetTargetFrameworks, I think they can do it from Microsoft.Common.CurrentVersion.targets. That sounds like a more legitimate place to call it if IsCrossTargetingBuild is true.",
              "createdAt": "2020-08-18T15:51:16Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -21,13 +21,20 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(CustomBeforeMicrosoftCommonCrossTargetingTargets)\" Condition=\"'$(CustomBeforeMicrosoftCommonCrossTargetingTargets)' != '' and Exists('$(CustomBeforeMicrosoftCommonCrossTargetingTargets)')\"/>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' != 'true'\"",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I added these checks because previously the body of GetTargetFrameworks was the same in the CrossTargeting and CurrentVersion targets.  I assume that the CrossTargeting targets are only imported for the outer build, and the CurrentVersion targets only in an inner or  non-multi-targeted build.  The checks are basically assertions to verify that is correct.",
              "createdAt": "2020-08-18T19:39:39Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -21,13 +21,20 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Import Project=\"$(CustomBeforeMicrosoftCommonCrossTargetingTargets)\" Condition=\"'$(CustomBeforeMicrosoftCommonCrossTargetingTargets)' != '' and Exists('$(CustomBeforeMicrosoftCommonCrossTargetingTargets)')\"/>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' != 'true'\"",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `'@(_InnerBuildProjects->Count())' != '0'` could be faster and avoid having spurious whitespace accidentally trigger the condition.",
              "createdAt": "2020-08-17T19:06:17Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"\n+             Condition=\"'@(_InnerBuildProjects)' != '' \"",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I'm not sure it's faster; we have special short-circuiting for `== ''`. I think it's ok either way.",
              "createdAt": "2020-08-17T19:52:18Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"\n+             Condition=\"'@(_InnerBuildProjects)' != '' \"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will cause extra msbuild calls (but not extra evaluations as far as I can tell) even for non dotnet5 multi targeting projects. Is it worth doing this extra computation only when it's needed? (dotnet5 and above, or when the TF name requires expanding the platform?)",
              "createdAt": "2020-08-17T19:10:57Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "We want to (eventually) support generic TargetFramework aliasing, so we don't want to restrict this to net5.0 and above.  Also, we don't even know if a TargetFramework is net5.0 or above without the parsing that happens in the inner build (which we could probably work around if we didn't want to eventually support aliasing).",
              "createdAt": "2020-08-17T19:18:58Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "It's extra evaluations in the not-all-TFs-are-used case, right?\r\n\r\nThis seems mostly fine. I wonder if it'll cause scheduling/node-locking problems by shifting around the timing for the evaluations/executions/requests. Hopefully not!",
              "createdAt": "2020-08-17T20:32:36Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Evaluation wise it should not be worse than the previous multitargeting scenario, where it also evaluates all innerbuilds but uses one.",
              "createdAt": "2020-08-17T21:12:50Z",
              "path": "src/Tasks/Microsoft.Common.CrossTargeting.targets",
              "diffHunk": "@@ -46,6 +53,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformFromInnerBuilds\"\n+          DependsOnTargets=\"_ComputeTargetFrameworkItems\">\n+\n+    <MSBuild Projects=\"@(_InnerBuildProjects)\"",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need this condition permanently, or is it just to ease the transition period to get an updated NuGet?",
              "createdAt": "2020-08-17T19:58:55Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1653,11 +1653,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <!-- For each reference, get closest match -->\n+\n+    <!-- Pass the CurrentProjectTargetPlatform parameter to the task only if GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter is true.  This means\n+         that we are using a version of NuGet which supports that parameter on this task. -->",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is just to ease the transition.  Ideally we delete the duplication soon.",
              "createdAt": "2020-08-18T19:40:26Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1653,11 +1653,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <!-- For each reference, get closest match -->\n+\n+    <!-- Pass the CurrentProjectTargetPlatform parameter to the task only if GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter is true.  This means\n+         that we are using a version of NuGet which supports that parameter on this task. -->",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it intentional that the metadata name is plural but the value is singular?",
              "createdAt": "2020-08-17T20:01:29Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1697,20 +1712,41 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </Target>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' == 'true'\"\n+           Text=\"Internal MSBuild error: Non-CrossTargeting GetTargetFrameworks target should not be used in cross targeting (outer) build\" />\n+\n     <ItemGroup>\n       <_ThisProjectBuildMetadata Include=\"$(MSBuildProjectFullPath)\">\n-        <TargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(TargetFrameworks)</TargetFrameworks>\n-        <TargetFrameworks Condition=\"'$(TargetFrameworks)' == ''\">$(TargetFramework)</TargetFrameworks>\n+        <TargetFrameworks>@(_TargetFrameworkInfo)</TargetFrameworks>\n+        <TargetFrameworkMonikers>@(_TargetFrameworkInfo->'%(TargetFrameworkMonikers)')</TargetFrameworkMonikers>\n+        <TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>\n+\n         <HasSingleTargetFramework>true</HasSingleTargetFramework>\n-        <HasSingleTargetFramework Condition=\"'$(IsCrossTargetingBuild)' == 'true'\">false</HasSingleTargetFramework>\n+        \n         <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->\n-      <IsRidAgnostic>false</IsRidAgnostic>\n-      <IsRidAgnostic Condition=\" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' \">true</IsRidAgnostic>\n+        <IsRidAgnostic>false</IsRidAgnostic>\n+        <IsRidAgnostic Condition=\" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' \">true</IsRidAgnostic>\n       </_ThisProjectBuildMetadata>\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n+        Returns=\"@(_TargetFrameworkInfo)\">\n+\n+    <ItemGroup>\n+      <_TargetFrameworkInfo Include=\"$(TargetFramework)\">\n+        <TargetFrameworks>$(TargetFramework)</TargetFrameworks>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah: yes, because this is the single-targeting case.",
              "createdAt": "2020-08-17T20:04:14Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1697,20 +1712,41 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </Target>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' == 'true'\"\n+           Text=\"Internal MSBuild error: Non-CrossTargeting GetTargetFrameworks target should not be used in cross targeting (outer) build\" />\n+\n     <ItemGroup>\n       <_ThisProjectBuildMetadata Include=\"$(MSBuildProjectFullPath)\">\n-        <TargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(TargetFrameworks)</TargetFrameworks>\n-        <TargetFrameworks Condition=\"'$(TargetFrameworks)' == ''\">$(TargetFramework)</TargetFrameworks>\n+        <TargetFrameworks>@(_TargetFrameworkInfo)</TargetFrameworks>\n+        <TargetFrameworkMonikers>@(_TargetFrameworkInfo->'%(TargetFrameworkMonikers)')</TargetFrameworkMonikers>\n+        <TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>\n+\n         <HasSingleTargetFramework>true</HasSingleTargetFramework>\n-        <HasSingleTargetFramework Condition=\"'$(IsCrossTargetingBuild)' == 'true'\">false</HasSingleTargetFramework>\n+        \n         <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->\n-      <IsRidAgnostic>false</IsRidAgnostic>\n-      <IsRidAgnostic Condition=\" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' \">true</IsRidAgnostic>\n+        <IsRidAgnostic>false</IsRidAgnostic>\n+        <IsRidAgnostic Condition=\" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' \">true</IsRidAgnostic>\n       </_ThisProjectBuildMetadata>\n     </ItemGroup>\n   </Target>\n \n+  <Target Name=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n+        Returns=\"@(_TargetFrameworkInfo)\">\n+\n+    <ItemGroup>\n+      <_TargetFrameworkInfo Include=\"$(TargetFramework)\">\n+        <TargetFrameworks>$(TargetFramework)</TargetFrameworks>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we call this task the new way with an item that has only the old information, does it still work? I'd like it to, so that anyone who's cobbled together a custom system that currently works continues working.",
              "createdAt": "2020-08-17T20:34:44Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1653,11 +1653,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <!-- For each reference, get closest match -->\n+\n+    <!-- Pass the CurrentProjectTargetPlatform parameter to the task only if GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter is true.  This means\n+         that we are using a version of NuGet which supports that parameter on this task. -->\n+    \n     <GetReferenceNearestTargetFrameworkTask AnnotatedProjectReferences=\"@(_ProjectReferenceTargetFrameworkPossibilities)\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I think you're asking if the new version of the `GetReferenceNearestTargetFrameworkTask` task will continue to work in the old way (ie by parsing the TargetFrameworks) if it gets passed project items without `TargetFrameworkMonikers` and `TargetPlatformMonikers` \r\n\r\n@nkolev92 Is this the case?  Looking at [the NuGet PR](https://github.com/NuGet/NuGet.Client/pull/3578), it looks like probably it is.",
              "createdAt": "2020-08-18T19:46:02Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1653,11 +1653,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <!-- For each reference, get closest match -->\n+\n+    <!-- Pass the CurrentProjectTargetPlatform parameter to the task only if GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter is true.  This means\n+         that we are using a version of NuGet which supports that parameter on this task. -->\n+    \n     <GetReferenceNearestTargetFrameworkTask AnnotatedProjectReferences=\"@(_ProjectReferenceTargetFrameworkPossibilities)\"",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "Yep, it will work in both. ",
              "createdAt": "2020-08-18T22:08:30Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1653,11 +1653,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </ItemGroup>\n \n     <!-- For each reference, get closest match -->\n+\n+    <!-- Pass the CurrentProjectTargetPlatform parameter to the task only if GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter is true.  This means\n+         that we are using a version of NuGet which supports that parameter on this task. -->\n+    \n     <GetReferenceNearestTargetFrameworkTask AnnotatedProjectReferences=\"@(_ProjectReferenceTargetFrameworkPossibilities)\"",
              "author": {
                "login": "nkolev92"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looking at https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1257284, does that mean this error check shouldn't be here because you can have an inner build that invokes an outer build in a way that it still needs to get the inner build's target frameworks and match them with the new outer build's target frameworks?",
              "createdAt": "2020-12-28T23:27:11Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1697,20 +1712,41 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </Target>\n \n   <Target Name=\"GetTargetFrameworks\"\n+          DependsOnTargets=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n           Returns=\"@(_ThisProjectBuildMetadata)\">\n+\n+    <Error Condition=\"'$(IsCrossTargetingBuild)' == 'true'\"\n+           Text=\"Internal MSBuild error: Non-CrossTargeting GetTargetFrameworks target should not be used in cross targeting (outer) build\" />",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}