{
  "number": 7160,
  "title": "Fix nuget targets and dll loading",
  "body": "This PR is meant to simplify using msbuild built from this repo on top on an existing SDK without relying on implicit dependencies to NuGet that cannot be resolved.\r\n\r\n### Context\r\n\r\nWhen developing with a branch of msbuild on top of an existing public SDK (e.g 6.0.100), msbuild is currently referencing 2 parts of NuGet that are making impossible to test it without grabbing these NuGet files into the folder of msbuild outputs binaries.\r\n\r\n### Changes Made\r\n\r\n- In `src/Build/Utilities/NuGetFrameworkWrapper.cs`, tries to load from a fixed path while it should try to load also from the current context so that an AssemblyLoadContext correctly configured can honor the `Assembly.Load(...)` if `Assembly.LoadFile` is failing.\r\n- Loading of `NuGet.targets` is relying on `MSBuildToolsPath` while it should rely on `MSBuildExtensionsPath`. I assume that files in msbuild repo should never try to depend on props/targets files from `MSBuildToolsPath` that are not delivered by this build itself.",
  "state": "CLOSED",
  "createdAt": "2021-12-20T11:06:50Z",
  "updatedAt": "2023-02-27T17:29:32Z",
  "closedAt": "2023-02-27T17:29:31Z",
  "mergedAt": null,
  "additions": 7,
  "deletions": 3,
  "changedFiles": 3,
  "headRefName": "fix-nuget-targets-and-dll-loading",
  "isDraft": false,
  "author": {
    "login": "xoofx"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c577407bb1d84489f88a511af1466784a49a24e0",
          "message": "Allow loading NuGet.Frameworks from current AssemblyLoadContext resolver if not on the disk",
          "committedDate": "2021-12-20T10:59:18Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre_mutel@live.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab55ffe6e4c7885339d6afc79cbf033fb464c59b",
          "message": "Include NuGet.targets from MSBuildExtensionsPath instead of MSBuildToolsPath",
          "committedDate": "2021-12-20T10:59:26Z",
          "author": {
            "name": "Alexandre Mutel",
            "email": "alexandre_mutel@live.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Can you reset NuGetRestoreTargets in your own build? Seems like it should have the same effect as far as you're concerned.\r\n\r\n I could, but I'm questioning the usage of `MSBuildToolsPath` here to reference a target file that is not part of this repository, while usually everything else that links to something outside of this repo use `MSBuildExtensionsPath`. Why NuGet is rooted like this? What is the rationale that it should be considered as part of msbuild while it is not? So far it's the only import I have found that I have to manually override with a specific property.",
        "createdAt": "2021-12-20T16:18:27Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "The default for assembly loading it to look next to yourself, so I would imagine there's a connection like \"nuget needs MSBuild assemblies and doesn't know where they are, so they all have to be together\" (which may have been an earlier decision that now just can't be changed for backwards compatibility) or something uses the nuget path, strips off nuget, and assumes appending an msbuild assembly will work. I'm just guessing, but I know NuGet used to load Microsoft.Build.dll so early that if you added a reference from M.B.dll to M.B.Framework.dll in the wrong method, it would crash.",
        "createdAt": "2021-12-20T16:26:10Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "`MSBuildExtensionsPath` is identical to `MSBuildToolsPath` on a standard setup these days (that was probably different in the past) so I would not expect conflicts there. I suspect that `MSBuildToolsPath` was used by `NuGet.targets` mainly because it was used in the msbuild repo in other places, except that it should be used only for props/targets files coming only from this repo.\r\n\r\nMaybe someone from NuGet team can help? cc: @nkolev92",
        "createdAt": "2021-12-22T10:09:30Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "NuGet shouldn't be referring to msbuild assemblies directly, so I wouldn't expect any weirdness because of that. \r\n\r\nI think the NuGet discovery in those 2 lines is based on where NuGet would normally be in .NET SDK scenarios, where as the line above it covers the VS MSBuild version. \r\n\r\nI don't really have any more context whether MSBuildToolsPath  or MSBuildExtensionsPath is more appropriate as they are identical in .NET SDK scenarios. ",
        "createdAt": "2021-12-22T20:16:01Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "> NuGet shouldn't be referring to msbuild assemblies directly, so I wouldn't expect any weirdness because of that.\r\n\r\nCurrent NuGet doesn't, but older versions did, right?",
        "createdAt": "2021-12-22T22:17:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I don't have a problem with the nuget load change, but I'm more hesitant about the path change. If people assume that that's where nuget.targets belongs, they won't be able to find it. If people copy things into the bin directory to make them found, msbuild will suddenly stop finding them.\r\n\r\n`dotnet add package` functionality depends on it, but NuGet relies on the assembly loader to figure things out. \r\n\r\nMost .NET, msbuild and nuget assemblies are in the root of the SDK though. It just makes thing simpler.",
        "createdAt": "2021-12-22T23:12:18Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "We've let this sit for a long time, and I think we should just close it. The bootstrap folder is, unfortunately, a poor substitute for the full .NET SDK and fails to build many projects. It is generally easier to test by using `Deploy-MSBuild` to overwrite the MSBuild bits in a test SDK.",
        "createdAt": "2023-02-27T17:29:31Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}