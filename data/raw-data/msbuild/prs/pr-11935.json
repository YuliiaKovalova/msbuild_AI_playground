{
  "number": 11935,
  "title": "Reduce pipe read allocations due to async state and context capturing",
  "body": "### Changes\r\n\r\n- Unroll looped uses of `CommunicationsUtils.ReadAsync` to avoid redundant state machine allocations.\r\n- Add missing `ConfigureAwait(false)` to awaited reads (implicit with `Task.Result`) to reduce allocations due to context capturing.\r\n- Avoid creating a `Task` when `ReadAsync()` completes synchronously and returns a `ValueTask`.\r\n\r\n### Context\r\n\r\nCurrently the pipe read loops on .NET Core go through a helper in `CommunicationsUtilities` that looks like this:\r\n\r\n```cs\r\ninternal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int bytesToRead)\r\n{\r\n\tint totalBytesRead = 0;\r\n\twhile (totalBytesRead < bytesToRead)\r\n\t{\r\n\t\tint bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None);\r\n\t\tif (bytesRead == 0)\r\n\t\t{\r\n\t\t\treturn totalBytesRead;\r\n\t\t}\r\n\t\ttotalBytesRead += bytesRead;\r\n\t}\r\n\treturn totalBytesRead;\r\n}\r\n```\r\n\r\nUnfortunately when used within an outer loop, this leads to a ton of extra allocations due to having to create a new `AsyncStateMachineBox` for every iteration.\r\n\r\nHere's an example:\r\n```\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder+AsyncStateMachineBox<Int32, CommunicationsUtilities+<ReadAsync>d__17>\r\n  Objects : 552567\r\n  Bytes   : 75149112\r\n\r\n 100%  GetStateMachineBox \u2022 71.67 MB / 71.67 MB \u2022 System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.GetStateMachineBox<TStateMachine>(TStateMachine, Task<TResult>)\r\n  \u25ba  96.8%  MoveNext \u2022 69.40 MB / - \u2022 Microsoft.Build.Internal.CommunicationsUtilities+<ReadAsync>d__17.MoveNext()\r\n  \u25ba  3.16%  AwaitUnsafeOnCompleted \u2022 2.27 MB / - \u2022 System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(TAwaiter, TStateMachine, Task<TResult>)\r\n```\r\n\r\nUsing `NodeProviderOutOfProcBase.ReadPacketLoopAsync()` as an example - after this change, we only see the single state machine allocations for the outer loop (1 per pipe client) as it's reused, even when the async method schedules a continuation:\r\n```\r\nSystem.Runtime.CompilerServices.AsyncTaskMethodBuilder+AsyncStateMachineBox<VoidTaskResult, NodeProviderOutOfProcBase+NodeContext+<RunPacketReadLoopAsync>d__20>\r\n  Objects : 15\r\n  Bytes   : 1920\r\n\r\n 100%  GetStateMachineBox \u2022 1.9 KB / 1.9 KB \u2022 System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.GetStateMachineBox<TStateMachine>(TStateMachine, Task<TResult>)\r\n ...\r\n```\r\n\r\n### Profiles\r\n\r\nHere's two profiles comparing total before / after on a .NET Core build (see objects allocated, total allocations, GC). This is accounting for ~8% of allocations on the main node.\r\n\r\n![Pasted image 20250530154531](https://github.com/user-attachments/assets/35d7b0ec-2aa3-46e4-b5ab-5fe442b0d992)\r\n\r\n![Pasted image 20250530154433](https://github.com/user-attachments/assets/b0e96c4b-c671-4575-b492-561d6000989b)\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-30T22:51:46Z",
  "updatedAt": "2025-06-03T05:46:39Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 41,
  "deletions": 22,
  "changedFiles": 3,
  "headRefName": "dev/chcasta/sp1",
  "isDraft": false,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "86ce473b45b56ae1507d8350cec8763dececcf11",
          "message": "Reduce pipe read allocations due to async state and context capturing",
          "committedDate": "2025-05-30T22:28:49Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c7978622f7d03a86e60ffd540da0971adeb40d4",
          "message": "Remove extra semicolon",
          "committedDate": "2025-05-30T23:09:40Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d3fa9ca5d7282294d6b892b7763770383341a40",
          "message": "Unroll additional helper call on node endpoint",
          "committedDate": "2025-06-03T05:46:33Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "There is an extra semicolon at the end of the statement. Please remove the additional semicolon to adhere to the project's coding style.\n```suggestion\n                                    int bytesRead = bytesReadTask.IsCompleted ? bytesReadTask.Result : bytesReadTask.AsTask().ConfigureAwait(false).GetAwaiter().GetResult();\n```",
              "createdAt": "2025-05-30T23:07:58Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientPacketPump.cs",
              "diffHunk": "@@ -275,7 +276,12 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu\n \n                                 while (packetBytesRead < packetLength)\n                                 {\n+#if FEATURE_APM\n                                     int bytesRead = localStream.Read(packetData, packetBytesRead, packetLength - packetBytesRead);\n+#else\n+                                    ValueTask<int> bytesReadTask = localStream.ReadAsync(packetData.AsMemory(packetBytesRead, packetLength - packetBytesRead));\n+                                    int bytesRead = bytesReadTask.IsCompleted ? bytesReadTask.Result : bytesReadTask.AsTask().ConfigureAwait(false).GetAwaiter().GetResult();;",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}