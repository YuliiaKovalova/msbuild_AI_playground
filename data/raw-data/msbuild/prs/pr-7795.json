{
  "number": 7795,
  "title": "Disable Microsoft.IO.Redist in source-build.",
  "body": "This removes the prebuilt Microsoft.IO.Redist in MSBuild for source-build.",
  "state": "MERGED",
  "createdAt": "2022-07-07T19:37:07Z",
  "updatedAt": "2022-07-14T03:09:23Z",
  "closedAt": "2022-07-14T03:09:23Z",
  "mergedAt": "2022-07-14T03:09:23Z",
  "additions": 10,
  "deletions": 6,
  "changedFiles": 3,
  "headRefName": "removeMsftIoSourceBuild",
  "isDraft": false,
  "author": {
    "login": "crummel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6d1747eecc491dd7cfd055e1c8318ca50c1a904b",
          "message": "Disable Microsoft.IO.Redist in source-build.",
          "committedDate": "2022-07-07T19:34:09Z",
          "author": {
            "name": "Chris Rummel",
            "email": "crummel@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf3bcb4450f93d9f4d2fdfd457c2d26bd2782354",
          "message": "Maybe fix source build errors",
          "committedDate": "2022-07-12T18:59:57Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "44a9aa8630651c9c0a3493f49440452d5cfd8da6",
          "message": "Try 2",
          "committedDate": "2022-07-12T21:23:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2f21a6a598a0fec2bb1b9f835c49d4f8713f3d0",
          "message": "Try 3",
          "committedDate": "2022-07-12T22:26:03Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7b89e501f34a6f9d0edf817b087c7bbc5aa3e340",
          "message": "Fix parentheses",
          "committedDate": "2022-07-12T23:01:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ddc53907b37e2a05b397d328da2f6c4aa3f61a1b",
          "message": "(Path.)Combine two cases",
          "committedDate": "2022-07-13T19:31:24Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Oh I see the problem, let me fix it.",
        "createdAt": "2022-07-07T20:57:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, sorry, fix is not as easy as I'd hoped, so I'm not actively looking at it at the moment.",
        "createdAt": "2022-07-07T21:04:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I logged https://github.com/dotnet/source-build/issues/2939 for the TFM issue, but I think that's a long-term fix.  I'm looking at the build failure as a short-term fix now.",
        "createdAt": "2022-07-08T19:58:23Z",
        "author": {
          "login": "crummel"
        }
      },
      {
        "body": "Got this to pass, @rainersigwald, but that involved adding more changes, so cancelling your approval.",
        "createdAt": "2022-07-13T00:25:57Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This case is very confusing to me and it's surprising to see new code with an `#if MONO`. Can you elaborate on what it's needed for?\r\n\r\nDo I understand correctly that there are three cases we care about now:\r\n\r\n1. core (no `Microsoft.IO.Redist`)\r\n2. VS/normal Framework (yes MIOR)\r\n3. Framework-but-in-sourcebuild (no MIOR)\r\n\r\nShould we call `Path.Combine(path, fileName.ToString())` in case 3?",
              "createdAt": "2022-07-13T14:22:10Z",
              "path": "src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs",
              "diffHunk": "@@ -87,8 +87,14 @@ private IEnumerable<string> EnumerateFullFileSystemPaths(string path, string sea\n             {\n                 return FileMatcher.IsAllFilesWildcard(searchPattern) || FileMatcher.IsMatch(fileName, searchPattern);\n             };\n-            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => Path.Join(path.AsSpan(), fileName);\n \n+#if !FEATURE_MSIOREDIST && NETFRAMEWORK && MONO\n+            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => path + '/' + fileName.ToString();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I did that because of the different path separators. I wouldn't expect it to matter, since I don't think we have a source build mono, but I included it for completeness.\r\n\r\nYes; those three cases. And yes, Path.Combine is better than splitting the MONO case from the !MONO case; Path.Join wasn't available, and I confused that momentarily with Path.Combine. I'll make that switch.",
              "createdAt": "2022-07-13T14:44:54Z",
              "path": "src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs",
              "diffHunk": "@@ -87,8 +87,14 @@ private IEnumerable<string> EnumerateFullFileSystemPaths(string path, string sea\n             {\n                 return FileMatcher.IsAllFilesWildcard(searchPattern) || FileMatcher.IsMatch(fileName, searchPattern);\n             };\n-            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => Path.Join(path.AsSpan(), fileName);\n \n+#if !FEATURE_MSIOREDIST && NETFRAMEWORK && MONO\n+            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => path + '/' + fileName.ToString();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I read a little more about Path.Join vs. Path.Combine, and Path.Combine sounds like a bigger switch than what I have here, since Path.Join does barely more than detect the appropriate slash and concatenate them. I don't think it should matter anyway.",
              "createdAt": "2022-07-13T14:51:46Z",
              "path": "src/Build/FileSystem/DirectoryCacheFileSystemWrapper.cs",
              "diffHunk": "@@ -87,8 +87,14 @@ private IEnumerable<string> EnumerateFullFileSystemPaths(string path, string sea\n             {\n                 return FileMatcher.IsAllFilesWildcard(searchPattern) || FileMatcher.IsMatch(fileName, searchPattern);\n             };\n-            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => Path.Join(path.AsSpan(), fileName);\n \n+#if !FEATURE_MSIOREDIST && NETFRAMEWORK && MONO\n+            FindTransform<string> transform = (ref ReadOnlySpan<char> fileName) => path + '/' + fileName.ToString();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}