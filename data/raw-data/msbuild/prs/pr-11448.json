{
  "number": 11448,
  "title": "Address some low-hanging fruit to use newer/better .NET features",
  "body": "This is based only on code inspection / static analysis / searching around. It is not based on profiling. I do not know how much of an impact any of these have; we could choose to cherry-pick from this if there are particular areas that demonstrate gains.",
  "state": "MERGED",
  "createdAt": "2025-02-14T21:48:09Z",
  "updatedAt": "2025-03-14T17:32:52Z",
  "closedAt": "2025-03-14T16:50:24Z",
  "mergedAt": "2025-03-14T16:50:24Z",
  "additions": 1302,
  "deletions": 1070,
  "changedFiles": 188,
  "headRefName": "lowhangingfruit",
  "isDraft": false,
  "author": {
    "login": "stephentoub"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      },
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0931b45d4644a4f8575773919a5b403434d29839",
          "message": "Address some low-hanging fruit to use newer/better .NET features\n\nThis is based only on code inspection / static analysis / searching around. It is not based on profiling.",
          "committedDate": "2025-02-14T21:46:32Z",
          "author": {
            "name": "Stephen Toub",
            "email": "stoub@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa508b87d8c4a6b5560647a223f78fc8197a1bd5",
          "message": "IsAsciiHexDigit behind a changewave (to be super conservative)",
          "committedDate": "2025-02-18T23:02:38Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f645545c5fb868a240986568674723fd62ac2bf",
          "message": "Revert \"IsAsciiHexDigit behind a changewave (to be super conservative)\"\n\nThis reverts commit aa508b87d8c4a6b5560647a223f78fc8197a1bd5.\n\nNo need to worry about speed on this path so let's just match existing behavior.",
          "committedDate": "2025-03-11T21:54:30Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1425fc6ee8e7618bcf77399a2159574dab87e64",
          "message": "Merge branch 'main' into lowhangingfruit",
          "committedDate": "2025-03-14T14:27:55Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "bd5e36c7c01dbea80c329bc1859c078a6fecda83",
          "message": "removing an unused import",
          "committedDate": "2025-03-14T14:33:56Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "e0b8f2b685ca10fedce90bdeb946e0ff1e5f4ba7",
          "message": "Update src/Shared/ProjectWriter.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2025-03-14T14:34:39Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "4c6a1cc70c1480c8edd70b9ad0f145282785bbc2",
          "message": "Update src/Shared/ProjectWriter.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2025-03-14T14:34:49Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "eca8a9ba67d47d60e6f09191b05f1d7fc08f5608",
          "message": "merge aftermath",
          "committedDate": "2025-03-14T14:40:17Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "774b2e4d8aac21dd75a0a774c83460550d2ed11e",
          "message": "Merge branch 'main' into lowhangingfruit",
          "committedDate": "2025-03-14T14:41:59Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "b72917def04e3332598fa07e5525111848bb25b7",
          "message": "fixing some merge issues",
          "committedDate": "2025-03-14T16:11:52Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "981771fefdc3283f05620068dbeb7a6e414fb68c",
          "message": "Merge branch 'lowhangingfruit' of https://github.com/stephentoub/msbuild into lowhangingfruit",
          "committedDate": "2025-03-14T16:12:04Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "cc: @MihaZupan, fyi on the SearchValues usage",
        "createdAt": "2025-02-14T21:48:22Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "100/191 so far, no issues.",
        "createdAt": "2025-03-04T10:59:56Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Perfstar results look promising - the PR has a visible positive impact on Evaluation.",
        "createdAt": "2025-03-12T14:07:31Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Thanks for getting it over the finish line, @SimaTian.",
        "createdAt": "2025-03-14T17:32:50Z",
        "author": {
          "login": "stephentoub"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This one surprises me a bit, what should I learn from this being preferred?",
              "createdAt": "2025-02-14T22:27:57Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2434,7 +2434,7 @@ private void WriteNodeUtilizationGraphLine(ILoggingService loggingService, Build\n \n             bool haveNonIdleNode = false;\n             StringBuilder stringBuilder = new StringBuilder(64);\n-            stringBuilder.AppendFormat(\"{0}:   \", previousEventTime.Ticks);\n+            stringBuilder.Append(previousEventTime.Ticks).Append(\":   \");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Three things:\r\n1. AppendFormat needs to parse the format string\r\n2. AppendFormat takes object arguments, so Ticks is getting boxed into an object\r\n3. On netfx, that boxed object will then have ToString called on it (on core it can do better).\r\n\r\nThe latter doesn't need to do any parsing, and Append has overloads for all the primitives, so it doesn't need to box. And on core, the formatting of the primitive is then done directly into the buffer.\r\n\r\nIf this were only targeting core, it could have also been:\r\n```C#\r\nstringBuilder.Append($\"{previousEventTime.Ticks}:    \");\r\n```\r\nwhich will take advantage of the interpolated string handler support in a dedicated Append overload.\r\nhttps://devblogs.microsoft.com/dotnet/string-interpolation-in-c-10-and-net-6/",
              "createdAt": "2025-02-14T22:49:58Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2434,7 +2434,7 @@ private void WriteNodeUtilizationGraphLine(ILoggingService loggingService, Build\n \n             bool haveNonIdleNode = false;\n             StringBuilder stringBuilder = new StringBuilder(64);\n-            stringBuilder.AppendFormat(\"{0}:   \", previousEventTime.Ticks);\n+            stringBuilder.Append(previousEventTime.Ticks).Append(\":   \");",
              "author": {
                "login": "stephentoub"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "oh man putting the dangling paren in this side of the `#if` is a great readability improvement over what I had been trying",
              "createdAt": "2025-02-14T22:29:23Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -83,7 +84,12 @@ public sealed class ProjectInSolution\n         /// <summary>\n         /// Characters that need to be cleansed from a project name.\n         /// </summary>\n-        private static readonly char[] s_charsToCleanse = { '%', '$', '@', ';', '.', '(', ')', '\\'' };\n+#if NET\n+        private static readonly SearchValues<char> s_charsToCleanse = SearchValues.Create(\n+#else\n+        private static readonly char[] s_charsToCleanse = (",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sorry @simatian https://github.com/dotnet/msbuild/pull/11228#discussion_r1906144062",
              "createdAt": "2025-02-14T22:31:27Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -58,10 +58,18 @@ public class ProjectRootElement : ProjectElementContainer\n \n         private static readonly ProjectRootElementCacheBase.OpenProjectRootElement s_openLoaderPreserveFormattingDelegate = OpenLoaderPreserveFormatting;\n \n+        private const string XmlDeclarationPattern = @\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\";\n+\n         /// <summary>\n         /// Used to determine if a file is an empty XML file if it ONLY contains an XML declaration like &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;.\n         /// </summary>\n-        private static readonly Lazy<Regex> XmlDeclarationRegEx = new Lazy<Regex>(() => new Regex(@\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\"), isThreadSafe: true);\n+#if NET\n+        [GeneratedRegex(XmlDeclarationPattern)]\n+        private static partial Regex XmlDeclarationRegex { get; }\n+#else\n+        private static Regex XmlDeclarationRegex => s_xmlDeclarationRegex ??= new Regex(XmlDeclarationPattern);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "While I was responsible for introducing Lazy, it's often not the right answer, in particular because you can often get the laziness you need without needing to create the Lazy itself.\r\n\r\nIn this case, we don't rely on the object identity of the Regex, so we don't need to worry about race conditions to publish an instance; worse case is two concurrent uses will end up using different instances.\r\n\r\nMy assumption is it'll be relatively rare for there to be such concurrent use on initialization (e.g. two threads in the same process trying to use this property for the first time within the same, say, millisecond), in which case we can avoid paying for the Lazy itself.",
              "createdAt": "2025-02-14T22:55:25Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -58,10 +58,18 @@ public class ProjectRootElement : ProjectElementContainer\n \n         private static readonly ProjectRootElementCacheBase.OpenProjectRootElement s_openLoaderPreserveFormattingDelegate = OpenLoaderPreserveFormatting;\n \n+        private const string XmlDeclarationPattern = @\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\";\n+\n         /// <summary>\n         /// Used to determine if a file is an empty XML file if it ONLY contains an XML declaration like &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;.\n         /// </summary>\n-        private static readonly Lazy<Regex> XmlDeclarationRegEx = new Lazy<Regex>(() => new Regex(@\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\"), isThreadSafe: true);\n+#if NET\n+        [GeneratedRegex(XmlDeclarationPattern)]\n+        private static partial Regex XmlDeclarationRegex { get; }\n+#else\n+        private static Regex XmlDeclarationRegex => s_xmlDeclarationRegex ??= new Regex(XmlDeclarationPattern);",
              "author": {
                "login": "stephentoub"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "#11274 is unifying this with a helper method, can we stick with that?",
              "createdAt": "2025-02-18T21:06:29Z",
              "path": "src/Shared/NamedPipeUtil.cs",
              "diffHunk": "@@ -10,10 +11,12 @@ internal static class NamedPipeUtil\n     {\n         internal static string GetPlatformSpecificPipeName(int? processId = null)\n         {\n-            if (processId is null)\n-            {\n-                processId = Process.GetCurrentProcess().Id;\n-            }\n+            processId ??=\n+#if NET\n+                Environment.ProcessId;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I've removed it as a part of the merge.\r\nThough maybe some information was lost due to the code transfer, I got slightly lost in the scope.",
              "createdAt": "2025-03-14T14:40:39Z",
              "path": "src/Shared/NamedPipeUtil.cs",
              "diffHunk": "@@ -10,10 +11,12 @@ internal static class NamedPipeUtil\n     {\n         internal static string GetPlatformSpecificPipeName(int? processId = null)\n         {\n-            if (processId is null)\n-            {\n-                processId = Process.GetCurrentProcess().Id;\n-            }\n+            processId ??=\n+#if NET\n+                Environment.ProcessId;",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I sure hope this hyper-specific net35 task isn't used in a modern build \ud83d\ude43",
              "createdAt": "2025-02-18T22:15:01Z",
              "path": "src/Tasks/RequiresFramework35SP1Assembly.cs",
              "diffHunk": "@@ -79,7 +79,12 @@ private static Version ConvertFrameworkVersionToString(string version)\n         {\n             if (version.StartsWith(\"v\", StringComparison.OrdinalIgnoreCase))\n             {\n-                return new Version(version.Substring(1));\n+                return Version.Parse(\n+#if NET\n+                    version.AsSpan(1));\n+#else\n+                    version.Substring(1));\n+#endif",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like all we say in docs is\r\n\r\n> Operands must evaluate to a decimal or hexadecimal number or a four-part dotted version. Hexadecimal numbers must begin with 0x.\r\n\r\nBut does any programming language accept `0xA\u0666`? `char.IsAsciiHexChar` sounds like what we would have meant.\r\n\r\nI suppose, being me, I should say we put it behind a changewave. I'll do that.",
              "createdAt": "2025-02-18T22:29:21Z",
              "path": "src/Build/Evaluation/Conditionals/CharacterUtilities.cs",
              "diffHunk": "@@ -22,15 +22,10 @@ internal static bool IsSimpleStringChar(char candidate)\n             return IsSimpleStringStart(candidate) || char.IsDigit(candidate);\n         }\n \n-        internal static bool IsHexAlphabetic(char candidate)\n-        {\n-            return candidate == 'a' || candidate == 'b' || candidate == 'c' || candidate == 'd' || candidate == 'e' || candidate == 'f' ||\n-                candidate == 'A' || candidate == 'B' || candidate == 'C' || candidate == 'D' || candidate == 'E' || candidate == 'F';\n-        }\n-\n         internal static bool IsHexDigit(char candidate)\n         {\n-            return char.IsDigit(candidate) || IsHexAlphabetic(candidate);\n+            return char.IsDigit(candidate) || ((uint)((candidate | 0x20) - 'a') <= 'f' - 'a');\n+            // TODO: Is the intent here really to include Unicode digits, or could this be char.IsAsciiHexChar?",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this going to add runtime overhead on every character? I don't want my change to make things worse :) (I'd rather just remove my TODO and have you forget I asked ;-)",
              "createdAt": "2025-02-18T23:08:54Z",
              "path": "src/Build/Evaluation/Conditionals/CharacterUtilities.cs",
              "diffHunk": "@@ -24,8 +26,18 @@ internal static bool IsSimpleStringChar(char candidate)\n \n         internal static bool IsHexDigit(char candidate)\n         {\n-            return char.IsDigit(candidate) || ((uint)((candidate | 0x20) - 'a') <= 'f' - 'a');\n-            // TODO: Is the intent here really to include Unicode digits, or could this be char.IsAsciiHexChar?\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))",
              "author": {
                "login": "stephentoub"
              }
            },
            {
              "body": "it is cached, but there are few additional comparisons and function calls due to the change wave check.\r\nso if this is on a critical path (and it wery well may be), this might be a bad idea.",
              "createdAt": "2025-02-26T16:34:12Z",
              "path": "src/Build/Evaluation/Conditionals/CharacterUtilities.cs",
              "diffHunk": "@@ -24,8 +26,18 @@ internal static bool IsSimpleStringChar(char candidate)\n \n         internal static bool IsHexDigit(char candidate)\n         {\n-            return char.IsDigit(candidate) || ((uint)((candidate | 0x20) - 'a') <= 'f' - 'a');\n-            // TODO: Is the intent here really to include Unicode digits, or could this be char.IsAsciiHexChar?\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "\"hexadecimal numbers in a condition\" is not a critical path :)\r\n\r\n(But we should make changewave checks JIT to free on principle anyway)",
              "createdAt": "2025-02-26T16:46:23Z",
              "path": "src/Build/Evaluation/Conditionals/CharacterUtilities.cs",
              "diffHunk": "@@ -24,8 +26,18 @@ internal static bool IsSimpleStringChar(char candidate)\n \n         internal static bool IsHexDigit(char candidate)\n         {\n-            return char.IsDigit(candidate) || ((uint)((candidate | 0x20) - 'a') <= 'f' - 'a');\n-            // TODO: Is the intent here really to include Unicode digits, or could this be char.IsAsciiHexChar?\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "After consideration, this being extremely not on any critical paths means \"just match the longstanding behavior and forget about it\". Pushed that.",
              "createdAt": "2025-03-11T21:55:17Z",
              "path": "src/Build/Evaluation/Conditionals/CharacterUtilities.cs",
              "diffHunk": "@@ -24,8 +26,18 @@ internal static bool IsSimpleStringChar(char candidate)\n \n         internal static bool IsHexDigit(char candidate)\n         {\n-            return char.IsDigit(candidate) || ((uint)((candidate | 0x20) - 'a') <= 'f' - 'a');\n-            // TODO: Is the intent here really to include Unicode digits, or could this be char.IsAsciiHexChar?\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Out of curiosity: why is this preferable and/or faster than the variant without .AsTask please?",
              "createdAt": "2025-02-26T07:57:00Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientPacketPump.cs",
              "diffHunk": "@@ -195,7 +195,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu\n #if FEATURE_APM\n                 IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);\n #else\n-                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length);\n+                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "> Out of curiosity: why is this preferable and/or faster than the variant without .AsTask please?\r\n\r\nIt's not for this call site. It's better for the other call sites that just await the result of ReadAsync, in which case if the operation completes synchronously, no `Task<int>` needs to be allocated. `ValueTask<int>` is really just a discriminated union between a `T` and a `Task<T>`, and if ReadAsync completes synchronously, it can return a `ValueTask<int>` that just wraps the `int` and doesn't need the task object.\r\n\r\nIn this case, it does need the task object, so if the `ValueTask<int>` is already wrapping a `Task<int>`, that task will just be returned, and if it's not, it'll get a task using `Task.FromResult`, which is what the async method would have itself done were it returning a `Task<int>` in the synchronous case.",
              "createdAt": "2025-02-26T14:56:48Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientPacketPump.cs",
              "diffHunk": "@@ -195,7 +195,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu\n #if FEATURE_APM\n                 IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);\n #else\n-                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length);\n+                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();",
              "author": {
                "login": "stephentoub"
              }
            },
            {
              "body": "Thank you",
              "createdAt": "2025-02-26T16:35:44Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientPacketPump.cs",
              "diffHunk": "@@ -195,7 +195,7 @@ private void RunReadLoop(Stream localStream, ManualResetEvent localPacketPumpShu\n #if FEATURE_APM\n                 IAsyncResult result = localStream.BeginRead(headerByte, 0, headerByte.Length, null, null);\n #else\n-                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length);\n+                Task<int> readTask = CommunicationsUtilities.ReadAsync(localStream, headerByte, headerByte.Length).AsTask();",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe it was once but nothing is testing it now\r\n\r\n```suggestion\r\n```",
              "createdAt": "2025-03-11T21:41:02Z",
              "path": "src/Shared/ProjectWriter.cs",
              "diffHunk": "@@ -40,28 +39,32 @@ internal sealed class ProjectWriter : XmlTextWriter\n               (?<SUFFIX>\\s*\\))\";\n         // )\n \n-        // regular expression used to match item vector transforms\n-        // internal for unit testing only\n-        internal static readonly Lazy<Regex> itemVectorTransformPattern = new Lazy<Regex>(\n-            () =>\n-                new Regex(itemVectorTransformSpecification,\n-                    RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));\n-\n         // description of an item vector transform, including the optional separator specification, but with no (named) capturing\n         // groups -- see the WriteString() method for details\n+        // regular expression used to match item vector transforms, with no (named) capturing groups\n+        // internal for unit testing only",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe it was once but nothing is testing it now\r\n\r\n```suggestion\r\n```",
              "createdAt": "2025-03-11T21:41:19Z",
              "path": "src/Shared/ProjectWriter.cs",
              "diffHunk": "@@ -28,9 +28,8 @@ internal sealed class ProjectWriter : XmlTextWriter\n         // Note that the pattern is more strict than the rules for valid XML element names.\n         internal const string itemTypeOrMetadataNameSpecification = @\"[A-Za-z_][A-Za-z_0-9\\-]*\";\n \n-        // the portion of an item transform that is the function that we wish to execute on the item\n-        internal const string itemFunctionNameSpecification = @\"[A-Za-z]*\";\n-\n+        // regular expression used to match item vector transforms\n+        // internal for unit testing only",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}