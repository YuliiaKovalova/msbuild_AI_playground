{
  "number": 6138,
  "title": "[vs16.7] NuGet Feed Update",
  "body": "# NuGet Feed Update\r\nThis pull request updates the usage of NuGet.org in cases where it is used in conjunction with other feeds.\r\n\r\n## Is this PR required?\r\nGenerally yes. If the target branch is no longer in use and will not need to be built in the future, please close this PR.\r\n\r\n## This PR is broken build, what do I do?\r\nIf packages are missing, please tag 'dotnet/dnceng' or 'mmitche' on this PR and note the missing packages.\r\nIf there are other unexpected failures, please contact 'dotnet/dnceng'.\r\n",
  "state": "MERGED",
  "createdAt": "2021-02-09T18:09:36Z",
  "updatedAt": "2021-06-28T15:15:22Z",
  "closedAt": "2021-06-28T15:15:18Z",
  "mergedAt": "2021-06-28T15:15:18Z",
  "additions": 20,
  "deletions": 8,
  "changedFiles": 5,
  "headRefName": "feed-update-vs16.7",
  "isDraft": false,
  "author": {
    "login": "dotnet-bot"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "34d381316cb501eda558ac1b49e26c77cc7a1261",
          "message": "Fixup feeds",
          "committedDate": "2021-01-29T19:16:51Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43befa41a33d1637137e2d189f4ee37b5ba3d604",
          "message": "Update to coherent 5.7.0 NuGet references\n\nThis matches the VS version for 16.7 and brings a self-coherent set of NuGet references into this branch.",
          "committedDate": "2021-04-28T19:32:31Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "89350de40990ebe6a2288a8393c3fcb0cd5d32de",
          "message": "Isolate Bootstrap from the VS environment that built it for .NET SDK resolver",
          "committedDate": "2021-04-28T21:47:41Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d254f9574b8b7829c26c86e282a450a04652c490",
          "message": "Disable Mono PR/CI job for 16.7\n\nWe don't expect to service Mono from this branch so not investigating this error:\r\n\r\n```\r\nerror MSB4242: The SDK resolver \"Microsoft.DotNet.MSBuildSdkResolver\" failed to run. hostfxr assembly:<unknown assembly> type:<unknown type> member:(null)\r\n```",
          "committedDate": "2021-06-18T16:59:29Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Failing on:\r\n\r\n```\r\nD:\\a\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.20411.9\\tools\\Tools.proj : error MSB4242: The SDK resolver \"Microsoft.DotNet.MSBuildSdkResolver\" failed to run. Method not found: 'Microsoft.Build.Framework.SdkResult Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.String, System.String, System.Collections.Generic.IDictionary`2<System.String,System.String>, System.Collections.Generic.IDictionary`2<System.String,Microsoft.Build.Framework.SdkResultItem>, System.Collections.Generic.IEnumerable`1<System.String>)'.\r\nD:\\a\\1\\s\\stage1\\bin\\bootstrap\\net472\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ILLink.targets(14,3): error MSB4242: The SDK resolver \"Microsoft.DotNet.MSBuildSdkResolver\" failed to run. Method not found: 'Microsoft.Build.Framework.SdkResult Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.String, System.String, System.Collections.Generic.IDictionary`2<System.String,System.String>, System.Collections.Generic.IDictionary`2<System.String,Microsoft.Build.Framework.SdkResultItem>, System.Collections.Generic.IEnumerable`1<System.String>)'.\r\nD:\\a\\1\\s\\stage1\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(293,5): error MSB4062: The \"NuGet.Build.Tasks.WarnForInvalidProjectsTask\" task could not be loaded from the assembly D:\\a\\1\\s\\stage1\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.dll. Could not load file or assembly 'NuGet.Commands, Version=5.4.0.3, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [D:\\a\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.20411.9\\tools\\Tools.proj]\r\n    0 Warning(s)\r\n    3 Error(s)\r\n\r\n```",
        "createdAt": "2021-02-09T19:23:30Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "/cc @mmitche \r\n\r\nHaving some trouble nailing this down `D:\\a\\1\\s\\stage1\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(293,5): error MSB4062: The \"NuGet.Build.Tasks.WarnForInvalidProjectsTask\" task could not be loaded from the assembly D:\\a\\1\\s\\stage1\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.dll. Could not load file or assembly 'NuGet.Commands, Version=5.4.0.3, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [D:\\a\\1\\s\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.20411.9\\tools\\Tools.proj].`\r\n\r\n I checked both nuget feeds \r\n `\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\"`, and \r\n`\"https://api.nuget.org/v3/index.json\"`\r\n\r\nand they both have the right packages in their feeds. Though NuGet.Commands only shows a 5.4.0 version on both.",
        "createdAt": "2021-02-09T19:49:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "That's an odd error for a feed change. Not something I've seen before.",
        "createdAt": "2021-02-16T20:01:32Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "The error seems a bit different this time around:\r\n```\r\n.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.20411.9\\tools\\Tools.proj(0,0): error MSB4242: The SDK resolver \"Microsoft.DotNet.MSBuildSdkResolver\" failed to run. Method not found: 'Microsoft.Build.Framework.SdkResult Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.String, System.String, System.Collections.Generic.IDictionary`2<System.String,System.String>, System.Collections.Generic.IDictionary`2<System.String,Microsoft.Build.Framework.SdkResultItem>, System.Collections.Generic.IEnumerable`1<System.String>)'.\r\n```\r\nThe method it refers to came in through https://github.com/dotnet/msbuild/pull/5501, which was merged into 16.8 but not 16.7. The normal/easy answer is to update MSBuild so it has the method, but that's a nonstarter here. Instead, I believe we'll need to build with older build tools. If that's right, I'm guessing it's essentially the same problem on earlier versions as well\u2014we'd need to change the build tools to be from the time the particular version came out. That also explains why a later version (i.e., 16.9) was easy to patch.\r\n\r\nThe one part that's confusing me about that explanation, however, is that it would fail _only_ on Windows Full. It seems like that should make it fail on all legs. Any thoughts?",
        "createdAt": "2021-04-05T20:03:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I _think_ [these](https://github.com/dotnet/msbuild/blob/34d381316cb501eda558ac1b49e26c77cc7a1261/eng/build.ps1#L163-L164) are the lines to change? We'd change them to use a specific set of build tools rather than whatever arcade gives us.",
        "createdAt": "2021-04-05T20:09:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-04-05T21:01:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-04-05T21:01:35Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "What's the order of operations here?\r\n\r\n1. We pull the sdk\r\n2. We try to resolve the sdk tools.proj is using\r\n3. We can't resolve it because the resolver we're using from the SDK (note the sdk owns Microsoft.DotNet.MSBuildSdkResolver) is trying to use a method that doesn't exist?",
        "createdAt": "2021-04-05T21:12:08Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I think so. Our global.json points to 3.1.100, which (I think) includes MSBuild 16.4, which should be fine. But we have to get that sdk before we can use it, and that's where we're having trouble? I imagine @dsplaisted would know better.",
        "createdAt": "2021-04-05T21:22:55Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "This is failing because the MSBuild under test (16.7) is too old to support the .NET SDK resolver, which came from the installed VS directory--on my machine that's a prerel 16.10; on the official machines it's probably 16.9 RTM. That SDK would be built against MSBuild 16.9 (or higher) and uses https://github.com/dotnet/msbuild/pull/5501.\r\n\r\nThe fix would be to pin to a specific version of `Microsoft.DotNet.MSBuildSdkResolver`, which is produced in the SDK and presumably published somewhere. That seems like a good idea in general--all of the \"copy LKG from VS into the bootstrap folder\" stuff is a bit of a mess and should be removed if possible.",
        "createdAt": "2021-04-15T19:16:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Were [the lines](https://github.com/dotnet/msbuild/pull/6138#issuecomment-813621648) I suggested the right ones to change? Also, from [my earlier comment](https://github.com/dotnet/msbuild/pull/6138#issuecomment-813618351), why is it failing _only_ on Windows full?",
        "createdAt": "2021-04-15T19:27:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Were [the lines](https://github.com/dotnet/msbuild/pull/6138#issuecomment-813621648) I suggested the right ones to change?\r\n\r\nNo, those are unrelated. I'm talking about\r\n\r\nhttps://github.com/dotnet/msbuild/blob/34d381316cb501eda558ac1b49e26c77cc7a1261/eng/BootStrapMSBuild.targets#L67\r\n\r\n> Also, from [my earlier comment](https://github.com/dotnet/msbuild/pull/6138#issuecomment-813618351), why is it failing _only_ on Windows full?\r\n\r\nBecause that's the only build that populates the bootstrap folder from a VS LKG. The Core flavors use a .NET SDK zip as the lkg/source of truth, and are pinned to a version that is compatible with 16.7.",
        "createdAt": "2021-04-15T19:47:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What is a(n) LKG?\r\n\r\nWere you thinking of pinning the SDK resolver just for servicing branches or also for main? I imagine main isn't pinned right now because we want to be able to use advanced things if we're on an advanced version of MSBuild, and this means it seamlessly tests with the latest bits.\r\n\r\nSo you're thinking we'd have to download a separate SDK, or is the right SDK on the machine somewhere? If the latter, is this just restricting the Include statement you highlighted to a specific version?",
        "createdAt": "2021-04-22T20:53:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "\"LKG\" means Last Known Good; it's the compiler/SDK/toolchain that is used to build the current version of the compiler/sdk/toolchain. We don't really have the concept formalized--the change required here would formalize it.\r\n\r\nThe problem is that in order to build our bootstrap folder, we need a source for the non-MSBuild bits. Right now that source is \"the toolset that built the first-stage build\" but that's not _necessarily_ compatible with the MSBuild that's building, especially if it's from the distant future compared to a servicing branch.\r\n\r\n> So you're thinking we'd have to download a separate SDK\r\n\r\nYeah, that's my thought. We may not need a full SDK if we can get all the parts we need out of NuGet packages that the SDK repo pushes. Then we can pin that reference to the same release band as the branch that's building. I would do that even for main, but set up a subscription for the SDKs.\r\n\r\nAnother possible option here would be to drop the bootstrap step for older branches that are failing this way. The official build doesn't bootstrap so failures here wouldn't necessarily block us from getting a build out. Would hate to lose the test coverage, though.",
        "createdAt": "2021-04-22T21:07:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I am tempted to disable the Mono job for this servicing branch. Someone please talk me out of this.",
        "createdAt": "2021-04-30T15:40:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Mono worked for this branch in the past, so there's no particular reason we should be able to make it work now. It's possible (though looking at the error, very unlikely) that this was random flakiness and everything is good.\r\n\r\nI actually think we should disable it, though. We aren't checking mono for master right now, and while it's reasonably possible we'll need a hotfix for 16.7, it's less likely we'll need one for mono. We'd be putting more effort into maintaining msbuild for a smaller segment of customers instead of focusing on big fish.",
        "createdAt": "2021-04-30T15:44:04Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}