{
  "number": 7152,
  "title": "Port doc comment changes from docs repo",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/7151\r\n\r\n### Context\r\nDoc comments are changed from time to time in the dotnet-api-docs repo. These changes need to be ported back to the MSBuild source, now that the MSBuild source is being used as the source-of-truth for MSBuild reference docs.\r\n\r\n### Changes Made\r\nComment-only changes in a number of source files.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nThe changes that were required can also be found here: https://github.com/dotnet/dotnet-api-docs/pull/7484 - this docs PR was necessary to prevent the dotnet-api-docs changes from being overwritten when the comments were re-read from MSBuild sources for the 17.0 version of MSBuild.",
  "state": "MERGED",
  "createdAt": "2021-12-14T20:08:11Z",
  "updatedAt": "2022-01-08T01:11:01Z",
  "closedAt": "2022-01-05T18:13:09Z",
  "mergedAt": "2022-01-05T18:13:09Z",
  "additions": 64,
  "deletions": 43,
  "changedFiles": 12,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "ghogen"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "258da8d7b5f85ac18bc95b1e8469dde73268bf6a",
          "message": "port comment changes",
          "committedDate": "2021-12-14T20:05:46Z",
          "author": {
            "name": "Gordon Hogenson",
            "email": "ghogen@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31162d71f622eb06be259c1bd4c81c514d2f134b",
          "message": "fix comment marker",
          "committedDate": "2021-12-14T20:15:03Z",
          "author": {
            "name": "Gordon Hogenson",
            "email": "ghogen@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42732afb9df264cc7b2df75b708bbf5506074604",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-12-14T20:32:51Z",
          "author": {
            "name": "Gordon Hogenson",
            "email": "ghogen@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@ghogen just curious, do you do this manually or with a tool like https://github.com/carlossanlop/DocsPortingTool ? ",
        "createdAt": "2021-12-15T23:57:04Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley I did this manually, but yes the DocsPortingTool is designed to handle this kind of thing. It looked like a bit too much overhead for such a small number of changes.",
        "createdAt": "2021-12-16T01:06:57Z",
        "author": {
          "login": "ghogen"
        }
      },
      {
        "body": "@ghogen that's cool, just checking we weren't missing an opportunity to share tech.",
        "createdAt": "2021-12-16T02:56:13Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Note inside remarks have markdown because of auto conversion but we don't need to copy them exactly as markdown. Just plain text is fine. Same as before.\r\n> \r\n> Also, Type `cref`s are simplified. Some might not have `using`s defined in the file. Check and add necessary `using`s if needed!\r\n\r\nWe have a PR for the cref changes at #7194, do we want to merge that first and then rebase this PR?",
        "createdAt": "2022-01-03T20:58:34Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@elachlan This is merged, so add these suggestions to your `cref` PR.",
        "createdAt": "2022-01-06T05:34:01Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Do we have somewhere we said we want short crefs? I had no idea, but rainersigwald said no.",
        "createdAt": "2022-01-06T15:28:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "If we'd originally listed it as info, that may have been a mistake on our part\u2014if so, sorry about that!",
        "createdAt": "2022-01-06T15:29:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I don't feel strongly about the short/long crefs. I do feel strongly that that style issue shouldn't block this change to reduce pain on our docs partners.",
        "createdAt": "2022-01-06T15:49:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ghogen is the markdown important in this issue? Nirmal's suggestions have been applied in another PR and I wanted to make sure whether or not the markdown was required and needed to be preserved.",
        "createdAt": "2022-01-07T08:36:22Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@elachlan @Nirmal4G \r\nThe Markdown is used in the dotnet-api-docs repo, but it's only required if there's special formatting such as for a Note/Caution/Tip construct for example. So I think it's OK to implement those suggestions in the other PR.  Note also, we're doing work now to separate the MSBuild API reference from the .NET reference, which will give us more flexibility, because we can control the process better to avoid changes that occur in multiple repos (which is what led to my PR).\r\n",
        "createdAt": "2022-01-07T17:08:34Z",
        "author": {
          "login": "ghogen"
        }
      },
      {
        "body": "@ghogen\n\n> The Markdown is used in the `dotnet-api-docs` repo, but it's only required if there's special formatting such as for a `Note`/`Caution`/`Tip` construct\u2026\n\nThe XML Doc comments already includes all these in the `remarks` element but as plain-text with a heading indicating the intent. Wouldn't it be possible for the doc engine to take it and convert to markdown and convert back to plain-text as is? That way, we wouldn't need those `CDATA` elements in the XML Doc.\n\n",
        "createdAt": "2022-01-08T01:11:00Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// File version is informational and not equal to the assembly version.\r\n```\r\n\r\n(we don't use the commit height any more)",
              "createdAt": "2021-12-14T20:13:50Z",
              "path": "src/Framework/Sdk/SdkResolverContext.cs",
              "diffHunk": "@@ -39,8 +39,11 @@ public abstract class SdkResolverContext\n         ///     Version of MSBuild currently running.\n         /// </summary>\n         /// <remarks>\n-        ///     File version based on commit height from our public git repository. This is informational\n-        ///     and not equal to the assembly version.\n+        ///    <format type=\"text/markdown\"><![CDATA[\n+        /// ## Remarks\n+        ///     \n+        /// File version is based on commit height from our public git repository. This is informational and not equal to the assembly version.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Initializes the task factory.\r\n```",
              "createdAt": "2021-12-14T20:14:35Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -170,7 +170,7 @@ public TaskPropertyInfo[] GetTaskParameters()\n         }\n \n         /// <summary>\n-        /// Initialze the task factory\n+        /// Initialzes the task factory.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Gets or sets a value that indicates whether to use hard links for the copied files\r\n```\r\n\r\n(this appears to be the Microsoft style per https://docs.microsoft.com/en-us/windows/win32/fileio/hard-links-and-junctions)",
              "createdAt": "2021-12-14T20:16:55Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -101,26 +101,26 @@ public Copy()\n         public ITaskItem DestinationFolder { get; set; }\n \n         /// <summary>\n-        /// How many times to attempt to copy, if all previous\n-        /// attempts failed. Defaults to zero.\n-        /// Warning: using retries may mask a synchronization problem in your\n-        /// build process.\n+        /// Gets or sets the number of times to attempt to copy, if all previous attempts failed.\n+        /// Warning: using retries may mask a synchronization problem in your build process.\n         /// </summary>\n         public int Retries { get; set; } = 10;\n \n         /// <summary>\n-        /// Delay between any necessary retries.\n+        /// Gets or sets the delay, in milliseconds, between any necessary retries.\n         /// Defaults to <see cref=\"RetryDelayMillisecondsDefault\">RetryDelayMillisecondsDefault</see>\n         /// </summary>\n         public int RetryDelayMilliseconds { get; set; }\n \n         /// <summary>\n-        /// Create Hard Links for the copied files rather than copy the files if possible to do so\n+        /// Gets or sets a value that indicates whether to use Hard Links for the copied files",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Gets or sets a value that indicates whether to create symbolic links for the copied files\r\n```",
              "createdAt": "2021-12-14T20:17:23Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -101,26 +101,26 @@ public Copy()\n         public ITaskItem DestinationFolder { get; set; }\n \n         /// <summary>\n-        /// How many times to attempt to copy, if all previous\n-        /// attempts failed. Defaults to zero.\n-        /// Warning: using retries may mask a synchronization problem in your\n-        /// build process.\n+        /// Gets or sets the number of times to attempt to copy, if all previous attempts failed.\n+        /// Warning: using retries may mask a synchronization problem in your build process.\n         /// </summary>\n         public int Retries { get; set; } = 10;\n \n         /// <summary>\n-        /// Delay between any necessary retries.\n+        /// Gets or sets the delay, in milliseconds, between any necessary retries.\n         /// Defaults to <see cref=\"RetryDelayMillisecondsDefault\">RetryDelayMillisecondsDefault</see>\n         /// </summary>\n         public int RetryDelayMilliseconds { get; set; }\n \n         /// <summary>\n-        /// Create Hard Links for the copied files rather than copy the files if possible to do so\n+        /// Gets or sets a value that indicates whether to use Hard Links for the copied files\n+        /// rather than copy the files, if it's possible to do so.\n         /// </summary>\n         public bool UseHardlinksIfPossible { get; set; }\n \n         /// <summary>\n-        /// Create Symbolic Links for the copied files rather than copy the files if possible to do so\n+        /// Gets or sets a value that indicates whether to create Symbolic Links for the copied files",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// This is not the <see cref=\"ToolsetCollection.ToolsVersions\"/>.\r\n```",
              "createdAt": "2021-12-22T06:03:27Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -432,7 +432,7 @@ public static ProjectCollection GlobalProjectCollection\n         /// This is the Windows file version (specifically the value of the FileVersion\n         /// resource), not necessarily the assembly version.\n         /// If you want the assembly version, use Constants.AssemblyVersion.\n-        /// This is not the <see cref=\"ToolsetsVersion\">ToolsetCollectionVersion</see>.\n+        /// This is not the <see cref=\"P:Microsoft.Build.BuildEngine.ToolsetCollection.ToolsVersions*\">ToolsetCollection.ToolsVersions</see>.",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Initializes a new instance of <see cref=\"BuildEventArgsReader\"/> using a <see cref=\"BinaryReader\"/> instance.\r\n```",
              "createdAt": "2021-12-22T06:04:13Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -53,9 +53,9 @@ public class BuildEventArgsReader : IDisposable\n             typeof(BuildEventArgs).GetField(\"senderName\", BindingFlags.Instance | BindingFlags.NonPublic);\n \n         /// <summary>\n-        /// Initializes a new instance of BuildEventArgsReader using a BinaryReader instance\n+        /// Initializes a new instance of <see cref=\"T:Microsoft.Build.Logging.BuildEventArgsReader\"/> using a <see cref=\"T:System.IO.BinaryReader\"/> instance.",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <param name=\"binaryReader\">The <see cref=\"BinaryReader\"/> to read <see cref=\"BuildEventArgs\"/> from.</param>\r\n```",
              "createdAt": "2021-12-22T06:04:33Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -53,9 +53,9 @@ public class BuildEventArgsReader : IDisposable\n             typeof(BuildEventArgs).GetField(\"senderName\", BindingFlags.Instance | BindingFlags.NonPublic);\n \n         /// <summary>\n-        /// Initializes a new instance of BuildEventArgsReader using a BinaryReader instance\n+        /// Initializes a new instance of <see cref=\"T:Microsoft.Build.Logging.BuildEventArgsReader\"/> using a <see cref=\"T:System.IO.BinaryReader\"/> instance.\n         /// </summary>\n-        /// <param name=\"binaryReader\">The BinaryReader to read BuildEventArgs from</param>\n+        /// <param name=\"binaryReader\">The <see cref=\"T:System.IO.BinaryReader\"/> to read <see cref=\"T:Microsoft.Build.Framework.BuildEventArgs\"/> from.</param>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Reads the next log record from the <see cref=\"BinaryReader\"/>.\r\n```",
              "createdAt": "2021-12-22T06:04:49Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -79,8 +79,11 @@ public void Dispose()\n         internal event Action<BinaryLogRecordKind, byte[]> OnBlobRead;\n \n         /// <summary>\n-        /// Reads the next log record from the binary reader. If there are no more records, returns null.\n+        /// Reads the next log record from the <see cref=\"T:System.IO.BinaryReader\"/>.",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// The next <see cref=\"BuildEventArgs\"/>. If there are no more records, returns <see langword=\"null\"/>.\r\n```",
              "createdAt": "2021-12-22T06:05:19Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -79,8 +79,11 @@ public void Dispose()\n         internal event Action<BinaryLogRecordKind, byte[]> OnBlobRead;\n \n         /// <summary>\n-        /// Reads the next log record from the binary reader. If there are no more records, returns null.\n+        /// Reads the next log record from the <see cref=\"T:System.IO.BinaryReader\"/>.\n         /// </summary>\n+        /// <returns>\n+        /// The next <see cref=\"T:Microsoft.Build.Framework.BuildEventArgs\" />. If there are no more records, returns <see langword=\"null\" />.",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        ///  <remarks>\r\n        ///  Note: You must use the <see cref=\"SdkResultFactory\"/> to return a result.\r\n        /// </remarks>\r\n```",
              "createdAt": "2021-12-22T06:08:41Z",
              "path": "src/Framework/Sdk/SdkResolver.cs",
              "diffHunk": "@@ -30,9 +30,12 @@ public abstract class SdkResolver\n         ///     the SDK could not be resolved.  Return <code>null</code> if the resolver is not\n         ///     applicable for a particular <see cref=\"SdkReference\"/>.\n         ///  </returns>   \n-        ///  <remarks>\n-        ///    Note: You must use <see cref=\"Microsoft.Build.Framework.SdkResultFactory\"/> to return a result.\n-        ///  </remarks>\n+        ///  <remarks><format type=\"text/markdown\"><![CDATA[\n+        ///  ## Remarks\n+        ///  > [!NOTE]\n+        ///  > You must use the <xref:Microsoft.Build.Framework.SdkResultFactory> to return a result.\n+        ///  ]]></format>\n+        /// </remarks>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        ///     File version is informational and not equal to the assembly version.\r\n```\r\n\r\nDo we need to include info about how the file version is calculated?",
              "createdAt": "2021-12-22T06:10:34Z",
              "path": "src/Framework/Sdk/SdkResolverContext.cs",
              "diffHunk": "@@ -39,8 +39,11 @@ public abstract class SdkResolverContext\n         ///     Version of MSBuild currently running.\n         /// </summary>\n         /// <remarks>\n-        ///     File version based on commit height from our public git repository. This is informational\n-        ///     and not equal to the assembly version.\n+        ///    <format type=\"text/markdown\"><![CDATA[\n+        /// ## Remarks\n+        ///     \n+        /// File version is informational and not equal to the assembly version.\n+        /// ]]></format>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    ///    Note: Use <see cref=\"SdkResultFactory\"/> to create instances of this class. Do not inherit from this class.\r\n```",
              "createdAt": "2021-12-22T06:13:44Z",
              "path": "src/Framework/Sdk/SdkResult.cs",
              "diffHunk": "@@ -9,7 +9,11 @@ namespace Microsoft.Build.Framework\n     ///     An abstract interface class to indicate SDK resolver success or failure.\n     /// </summary>\n     /// <remarks>\n-    ///   Note: Use <see cref=\"Microsoft.Build.Framework.SdkResultFactory\"/> to create instances of this class. Do not inherit from this class.\n+    ///    <format type=\"text/markdown\"><![CDATA[\n+    /// ## Remarks\n+    /// > [!NOTE]\n+    /// > Use <xref:Microsoft.Build.Framework.SdkResultFactory> to create instances of this class. Do not inherit from this class.\n+    /// ]]></format>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// Currently uses SHA1. The implementation is subject to change between MSBuild versions.\r\n    /// This class is not intended as a cryptographic security measure, only for uniqueness between build executions.\r\n```",
              "createdAt": "2021-12-22T06:14:41Z",
              "path": "src/Tasks/Hash.cs",
              "diffHunk": "@@ -13,8 +13,11 @@ namespace Microsoft.Build.Tasks\n     /// Generates a hash of a given ItemGroup items. Metadata is not considered in the hash.\n     /// </summary>\n     /// <remarks>\n-    /// Currently uses SHA1. Implementation subject to change between MSBuild versions. Not\n-    /// intended as a cryptographic security measure, only uniqueness between build executions.\n+    ///    <format type=\"text/markdown\"><![CDATA[\n+    /// ## Remarks\n+    /// Currently uses SHA1. The implementation is subject to change between MSBuild versions.\n+    /// This class is not intended as a cryptographic security measure, only for uniqueness between build executions.\n+    /// ]]></format>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}