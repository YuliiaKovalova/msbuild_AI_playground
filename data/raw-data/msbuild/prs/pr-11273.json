{
  "number": 11273,
  "title": "Several changes to reduce allocations",
  "body": "Fixes #\r\n\r\n### Context\r\nThere is an appreciable amount of time all of the MSBuild process nodes spend doing GC during a build. Taking steps to reduce allocations. This PR contains a mix of approaches that reduce allocations in several areas.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2025-01-13T19:57:49Z",
  "updatedAt": "2025-05-13T14:48:55Z",
  "closedAt": "2025-05-13T14:48:55Z",
  "mergedAt": null,
  "additions": 547,
  "deletions": 86,
  "changedFiles": 18,
  "headRefName": "dev/erarndt/reduceAllocations",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3e869e9b1f680c464af0b10f8993a517e40893d5",
          "message": "Several changes to reduce allocations",
          "committedDate": "2025-01-10T20:51:58Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ead7d3f6096e8a6c8af2e9e11f261d9b1108222",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/erarndt/reduceAllocations",
          "committedDate": "2025-02-03T19:05:18Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d2b7fdc2dc26cfd8d23066d38f9de3d7e69892b",
          "message": "Move some changes to their own PRs",
          "committedDate": "2025-02-03T19:35:59Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efd8f401147c6d3608c1f3357f1ba706992dae25",
          "message": "Address PR feedback",
          "committedDate": "2025-02-26T22:20:31Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53361981e7467edcf8b6faaf1e3c3816e205e4e5",
          "message": "Merge branch 'main' into dev/erarndt/reduceAllocations",
          "committedDate": "2025-04-28T12:57:53Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "6c6767b24d0b2268378b030eb36c252ab3020212",
          "message": "removing unnecessary using directive",
          "committedDate": "2025-04-28T13:02:05Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "2ff633d34afa52863c985d0c60edda177414b319",
          "message": "fixing merge issues",
          "committedDate": "2025-04-28T13:13:52Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "1bb93475454c1e53ccb34f03078ecbcfc72097da",
          "message": "Update SdkResolverService.cs",
          "committedDate": "2025-04-28T13:14:35Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "3b6dc32b73dea39934a3c1747392ff6ea4b674ad",
          "message": "Merge branch 'main' into dev/erarndt/reduceAllocations",
          "committedDate": "2025-04-29T13:52:07Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #11160",
        "createdAt": "2025-01-14T10:03:44Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Is the plan to split this PR into several smaller ones still in place please?",
        "createdAt": "2025-01-29T15:16:09Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2025-02-26T15:50:40Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2025-02-26T15:50:52Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> Is the plan to split this PR into several smaller ones still in place please?\r\n\r\nCurious about thoughts on splitting this PR.  I can split it up primarily based on file if that's desired.",
        "createdAt": "2025-02-26T22:19:57Z",
        "author": {
          "login": "Erarndt"
        }
      },
      {
        "body": "This one was carved out into smaller ones that are currently being processed.",
        "createdAt": "2025-05-13T14:48:55Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If `foreach` can be optimised this way - shouldn't it be something that should be part of compiler/runtime? Are we possible missing on any already existing opportunity there? @stephentoub?\r\n\r\nOr is this bringing benefit only on NetFx? (in which case we migh possibly want to conditionaly compile it only for NetFx?)\r\n",
              "createdAt": "2025-01-27T14:30:58Z",
              "path": "src/Shared/IEnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,237 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    /// <summary>\n+    /// A set of extension methods for working with immutable dictionaries.\n+    /// </summary>\n+    internal static class IEnumerableExtensions\n+    {\n+        /// <summary>\n+        /// Avoids allocating an enumerator when enumerating an <see cref=\"IEnumerable{T}\"/> in many cases.\n+        /// </summary>\n+        /// <remarks>\n+        /// <para>\n+        /// The <see langword=\"foreach\"/> statement enumerates types that implement <see cref=\"IEnumerable{T}\"/>,\n+        /// but will also enumerate any type that has the required methods. Several collection types take advantage of this\n+        /// to avoid allocating an enumerator on the heap when used with <see langword=\"foreach\"/> by returning a\n+        /// <see langword=\"struct\"/> enumerator. This is in contrast to the interface-based enumerator\n+        /// <see cref=\"IEnumerator{T}\"/> which will always be allocated on the heap.\n+        /// </para>\n+        /// <para>\n+        /// This extension method attempts to create a non-allocating struct enumerator to enumerate\n+        /// <paramref name=\"collection\"/>. It checks the concrete type of the collection and provides a\n+        /// non-allocating path in several cases.\n+        /// </para>\n+        /// <para>\n+        /// Types that can be enumerated without allocation are:\n+        /// </para>\n+        /// <list type=\"bullet\">\n+        ///     <item><description><see cref=\"IList{T}\"/> (and by extension <see cref=\"List{T}\"/> and other popular implementations)</description></item>\n+        ///     <item><description><see cref=\"LinkedList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableHashSet{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ICollection{T}\"/> or <see cref=\"IReadOnlyCollection{T}\"/> having zero count</description></item>\n+        /// </list>\n+        /// <para>\n+        /// If <paramref name=\"collection\"/> is not one of the supported types, the returned enumerator falls back to the\n+        /// interface-based enumerator, which will heap allocate. Benchmarking shows the overhead in such cases is low enough\n+        /// to be within the measurement error.\n+        /// </para>\n+        /// </remarks>\n+        /// <example>\n+        /// <code>\n+        /// <![CDATA[IEnumerable<string> collection = ...;\n+        ///\n+        /// foreach (string item in collection.GetStructEnumerable())\n+        /// {\n+        ///     // ...\n+        /// }]]>\n+        /// </code>\n+        /// </example>\n+        /// <typeparam name=\"T\">The item type that is enumerated.</typeparam>\n+        /// <param name=\"collection\">The collections that will be enumerated.</param>\n+        /// <returns>The enumerator for the collection.</returns>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This appears to be trying to manually special-case a few specific collection types by maintaining a discriminated union of all of their strongly-typed struct enumerators. I would not be surprised if this actually makes things more expensive in various situations, especially on .NET Core where dynamic PGO (on by default as of .NET 8) will already do such special-casing and handle devirtualizing and inlining the enumerator dispatches. In .NET 10 the enumerator allocation itself will also frequently be avoided thanks to stack allocation / escape analysis work currently being done by @AndyAyersMS.",
              "createdAt": "2025-01-27T14:40:47Z",
              "path": "src/Shared/IEnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,237 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    /// <summary>\n+    /// A set of extension methods for working with immutable dictionaries.\n+    /// </summary>\n+    internal static class IEnumerableExtensions\n+    {\n+        /// <summary>\n+        /// Avoids allocating an enumerator when enumerating an <see cref=\"IEnumerable{T}\"/> in many cases.\n+        /// </summary>\n+        /// <remarks>\n+        /// <para>\n+        /// The <see langword=\"foreach\"/> statement enumerates types that implement <see cref=\"IEnumerable{T}\"/>,\n+        /// but will also enumerate any type that has the required methods. Several collection types take advantage of this\n+        /// to avoid allocating an enumerator on the heap when used with <see langword=\"foreach\"/> by returning a\n+        /// <see langword=\"struct\"/> enumerator. This is in contrast to the interface-based enumerator\n+        /// <see cref=\"IEnumerator{T}\"/> which will always be allocated on the heap.\n+        /// </para>\n+        /// <para>\n+        /// This extension method attempts to create a non-allocating struct enumerator to enumerate\n+        /// <paramref name=\"collection\"/>. It checks the concrete type of the collection and provides a\n+        /// non-allocating path in several cases.\n+        /// </para>\n+        /// <para>\n+        /// Types that can be enumerated without allocation are:\n+        /// </para>\n+        /// <list type=\"bullet\">\n+        ///     <item><description><see cref=\"IList{T}\"/> (and by extension <see cref=\"List{T}\"/> and other popular implementations)</description></item>\n+        ///     <item><description><see cref=\"LinkedList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableHashSet{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ICollection{T}\"/> or <see cref=\"IReadOnlyCollection{T}\"/> having zero count</description></item>\n+        /// </list>\n+        /// <para>\n+        /// If <paramref name=\"collection\"/> is not one of the supported types, the returned enumerator falls back to the\n+        /// interface-based enumerator, which will heap allocate. Benchmarking shows the overhead in such cases is low enough\n+        /// to be within the measurement error.\n+        /// </para>\n+        /// </remarks>\n+        /// <example>\n+        /// <code>\n+        /// <![CDATA[IEnumerable<string> collection = ...;\n+        ///\n+        /// foreach (string item in collection.GetStructEnumerable())\n+        /// {\n+        ///     // ...\n+        /// }]]>\n+        /// </code>\n+        /// </example>\n+        /// <typeparam name=\"T\">The item type that is enumerated.</typeparam>\n+        /// <param name=\"collection\">The collections that will be enumerated.</param>\n+        /// <returns>The enumerator for the collection.</returns>",
              "author": {
                "login": "stephentoub"
              }
            },
            {
              "body": "The intent with this helper is to selectively apply it in situations where the allocations are significant, so I'd be hesitant to unconditionally apply it for reasons that @stephentoub mentions. Anecdotally, I've applied this change in a couple of places and reverted the change because I saw an increase in CPU cost that wasn't offset by the reduction in allocations.",
              "createdAt": "2025-01-27T18:52:01Z",
              "path": "src/Shared/IEnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,237 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    /// <summary>\n+    /// A set of extension methods for working with immutable dictionaries.\n+    /// </summary>\n+    internal static class IEnumerableExtensions\n+    {\n+        /// <summary>\n+        /// Avoids allocating an enumerator when enumerating an <see cref=\"IEnumerable{T}\"/> in many cases.\n+        /// </summary>\n+        /// <remarks>\n+        /// <para>\n+        /// The <see langword=\"foreach\"/> statement enumerates types that implement <see cref=\"IEnumerable{T}\"/>,\n+        /// but will also enumerate any type that has the required methods. Several collection types take advantage of this\n+        /// to avoid allocating an enumerator on the heap when used with <see langword=\"foreach\"/> by returning a\n+        /// <see langword=\"struct\"/> enumerator. This is in contrast to the interface-based enumerator\n+        /// <see cref=\"IEnumerator{T}\"/> which will always be allocated on the heap.\n+        /// </para>\n+        /// <para>\n+        /// This extension method attempts to create a non-allocating struct enumerator to enumerate\n+        /// <paramref name=\"collection\"/>. It checks the concrete type of the collection and provides a\n+        /// non-allocating path in several cases.\n+        /// </para>\n+        /// <para>\n+        /// Types that can be enumerated without allocation are:\n+        /// </para>\n+        /// <list type=\"bullet\">\n+        ///     <item><description><see cref=\"IList{T}\"/> (and by extension <see cref=\"List{T}\"/> and other popular implementations)</description></item>\n+        ///     <item><description><see cref=\"LinkedList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableHashSet{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ICollection{T}\"/> or <see cref=\"IReadOnlyCollection{T}\"/> having zero count</description></item>\n+        /// </list>\n+        /// <para>\n+        /// If <paramref name=\"collection\"/> is not one of the supported types, the returned enumerator falls back to the\n+        /// interface-based enumerator, which will heap allocate. Benchmarking shows the overhead in such cases is low enough\n+        /// to be within the measurement error.\n+        /// </para>\n+        /// </remarks>\n+        /// <example>\n+        /// <code>\n+        /// <![CDATA[IEnumerable<string> collection = ...;\n+        ///\n+        /// foreach (string item in collection.GetStructEnumerable())\n+        /// {\n+        ///     // ...\n+        /// }]]>\n+        /// </code>\n+        /// </example>\n+        /// <typeparam name=\"T\">The item type that is enumerated.</typeparam>\n+        /// <param name=\"collection\">The collections that will be enumerated.</param>\n+        /// <returns>The enumerator for the collection.</returns>",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "Gotcha.\r\nSounds helpful on NetFX. We should probably measure impact on `dotnet build` (core) though",
              "createdAt": "2025-01-30T14:45:42Z",
              "path": "src/Shared/IEnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,237 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    /// <summary>\n+    /// A set of extension methods for working with immutable dictionaries.\n+    /// </summary>\n+    internal static class IEnumerableExtensions\n+    {\n+        /// <summary>\n+        /// Avoids allocating an enumerator when enumerating an <see cref=\"IEnumerable{T}\"/> in many cases.\n+        /// </summary>\n+        /// <remarks>\n+        /// <para>\n+        /// The <see langword=\"foreach\"/> statement enumerates types that implement <see cref=\"IEnumerable{T}\"/>,\n+        /// but will also enumerate any type that has the required methods. Several collection types take advantage of this\n+        /// to avoid allocating an enumerator on the heap when used with <see langword=\"foreach\"/> by returning a\n+        /// <see langword=\"struct\"/> enumerator. This is in contrast to the interface-based enumerator\n+        /// <see cref=\"IEnumerator{T}\"/> which will always be allocated on the heap.\n+        /// </para>\n+        /// <para>\n+        /// This extension method attempts to create a non-allocating struct enumerator to enumerate\n+        /// <paramref name=\"collection\"/>. It checks the concrete type of the collection and provides a\n+        /// non-allocating path in several cases.\n+        /// </para>\n+        /// <para>\n+        /// Types that can be enumerated without allocation are:\n+        /// </para>\n+        /// <list type=\"bullet\">\n+        ///     <item><description><see cref=\"IList{T}\"/> (and by extension <see cref=\"List{T}\"/> and other popular implementations)</description></item>\n+        ///     <item><description><see cref=\"LinkedList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableHashSet{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ICollection{T}\"/> or <see cref=\"IReadOnlyCollection{T}\"/> having zero count</description></item>\n+        /// </list>\n+        /// <para>\n+        /// If <paramref name=\"collection\"/> is not one of the supported types, the returned enumerator falls back to the\n+        /// interface-based enumerator, which will heap allocate. Benchmarking shows the overhead in such cases is low enough\n+        /// to be within the measurement error.\n+        /// </para>\n+        /// </remarks>\n+        /// <example>\n+        /// <code>\n+        /// <![CDATA[IEnumerable<string> collection = ...;\n+        ///\n+        /// foreach (string item in collection.GetStructEnumerable())\n+        /// {\n+        ///     // ...\n+        /// }]]>\n+        /// </code>\n+        /// </example>\n+        /// <typeparam name=\"T\">The item type that is enumerated.</typeparam>\n+        /// <param name=\"collection\">The collections that will be enumerated.</param>\n+        /// <returns>The enumerator for the collection.</returns>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> handle devirtualizing and inlining the enumerator dispatches\r\n\r\nJust to reinterate @Erarndt here, MSBuild uses workstation GC, and is often blocked from burning CPU because its stuck behind a single threaded GC performing a Gen0/Gen1 cleaning up these enumerators. While long term we want Server GC for this process which will clean up these allocations with ease, it often better within MSBuild burn additional CPU walking these collections across many threads to avoid the allocation, then it is to be block all threads behind whatever thread triggered the workstation GC. This will be applicable for both .NET Core and .NET Framework, _until_ .NET Core does automatic escape analysis to avoid the allocation.",
              "createdAt": "2025-02-04T09:24:59Z",
              "path": "src/Shared/IEnumerableExtensions.cs",
              "diffHunk": "@@ -0,0 +1,237 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#nullable enable\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Collections.Immutable;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    /// <summary>\n+    /// A set of extension methods for working with immutable dictionaries.\n+    /// </summary>\n+    internal static class IEnumerableExtensions\n+    {\n+        /// <summary>\n+        /// Avoids allocating an enumerator when enumerating an <see cref=\"IEnumerable{T}\"/> in many cases.\n+        /// </summary>\n+        /// <remarks>\n+        /// <para>\n+        /// The <see langword=\"foreach\"/> statement enumerates types that implement <see cref=\"IEnumerable{T}\"/>,\n+        /// but will also enumerate any type that has the required methods. Several collection types take advantage of this\n+        /// to avoid allocating an enumerator on the heap when used with <see langword=\"foreach\"/> by returning a\n+        /// <see langword=\"struct\"/> enumerator. This is in contrast to the interface-based enumerator\n+        /// <see cref=\"IEnumerator{T}\"/> which will always be allocated on the heap.\n+        /// </para>\n+        /// <para>\n+        /// This extension method attempts to create a non-allocating struct enumerator to enumerate\n+        /// <paramref name=\"collection\"/>. It checks the concrete type of the collection and provides a\n+        /// non-allocating path in several cases.\n+        /// </para>\n+        /// <para>\n+        /// Types that can be enumerated without allocation are:\n+        /// </para>\n+        /// <list type=\"bullet\">\n+        ///     <item><description><see cref=\"IList{T}\"/> (and by extension <see cref=\"List{T}\"/> and other popular implementations)</description></item>\n+        ///     <item><description><see cref=\"LinkedList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableHashSet{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ImmutableList{T}\"/></description></item>\n+        ///     <item><description><see cref=\"ICollection{T}\"/> or <see cref=\"IReadOnlyCollection{T}\"/> having zero count</description></item>\n+        /// </list>\n+        /// <para>\n+        /// If <paramref name=\"collection\"/> is not one of the supported types, the returned enumerator falls back to the\n+        /// interface-based enumerator, which will heap allocate. Benchmarking shows the overhead in such cases is low enough\n+        /// to be within the measurement error.\n+        /// </para>\n+        /// </remarks>\n+        /// <example>\n+        /// <code>\n+        /// <![CDATA[IEnumerable<string> collection = ...;\n+        ///\n+        /// foreach (string item in collection.GetStructEnumerable())\n+        /// {\n+        ///     // ...\n+        /// }]]>\n+        /// </code>\n+        /// </example>\n+        /// <typeparam name=\"T\">The item type that is enumerated.</typeparam>\n+        /// <param name=\"collection\">The collections that will be enumerated.</param>\n+        /// <returns>The enumerator for the collection.</returns>",
              "author": {
                "login": "davkean"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please add a comment that RetrievableValuedEntryHashSet<T> is prefered here since it has custome Enumerator implementation returning struct. Otherwise this change might easily get reverted by possible future refactorings",
              "createdAt": "2025-02-04T20:21:55Z",
              "path": "src/Build/Collections/PropertyDictionary.cs",
              "diffHunk": "@@ -551,19 +551,34 @@ internal void Enumerate(Action<string, string> keyValueCallback)\n \n         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)\n         {\n-            List<TResult> result = new();\n             lock (_properties)\n             {\n-                foreach (T property in (ICollection<T>)_properties)\n+                ICollection<T> propertiesCollection = (ICollection<T>)_properties;\n+                List<TResult> result = new(propertiesCollection.Count);\n+                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this `AsReadOnly()` is left and next one  is removed?",
              "createdAt": "2025-02-04T20:27:20Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -522,7 +520,7 @@ private void RegisterResolversManifests(ElementLocation location)\n                 // The collections are never modified after this point.\n                 // So I've made them ReadOnly\n                 _specificResolversManifestsRegistry = specificResolversManifestsRegistry.AsReadOnly();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Updated the other one as well.",
              "createdAt": "2025-02-26T22:21:05Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -522,7 +520,7 @@ private void RegisterResolversManifests(ElementLocation location)\n                 // The collections are never modified after this point.\n                 // So I've made them ReadOnly\n                 _specificResolversManifestsRegistry = specificResolversManifestsRegistry.AsReadOnly();",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}