{
  "number": 6933,
  "title": "RemoveDir returns !HasLoggedErrors",
  "body": "### Context\r\nRemoveDir doesn't follow the typical task convention that returns \"I didn't log any errors.\" Instead, RemoveDir returned \"I actually deleted all directories,\" which can be checked via the `RemovedDirectories` output item.\r\n\r\n### Changes Made\r\nRemoveDir now returns `!Log.HasLoggedErrors`.\r\n\r\n### Testing\r\nI noticed RemoveDir has a total of **one test**. Added another \"basic\" test while I'm here.\r\n\r\n### Notes\r\nI removed the concept of an \"overall success\" because you can deduce it from the output item and the collection passed in. If we should keep it, I can add a boolean output parameter for \"overallsuccess.\"",
  "state": "MERGED",
  "createdAt": "2021-10-11T16:49:38Z",
  "updatedAt": "2021-10-27T07:54:25Z",
  "closedAt": "2021-10-27T07:54:25Z",
  "mergedAt": "2021-10-27T07:54:24Z",
  "additions": 43,
  "deletions": 13,
  "changedFiles": 2,
  "headRefName": "removeDir-update",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5b1221de6d91b8fefa27a9f47fff96d0fe0ae857",
          "message": "RemoveDir returns !HasLoggedErrors",
          "committedDate": "2021-10-11T16:45:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9409709e27b496f51111f49c6c4368158b36484a",
          "message": "Ensure directories are deleted",
          "committedDate": "2021-10-14T18:28:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0dadfab7a9e6bc5fc7ba5791902b2f2a27326d69",
          "message": "Add outputhelper to mockengine",
          "committedDate": "2021-10-14T18:30:12Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33865a6a54330709d9787fcdc9c815f2033b38e6",
          "message": "Update src/Tasks.UnitTests/RemoveDir_Tests.cs\n\nCo-authored-by: Ladi Prosek <ladi.prosek@gmail.com>",
          "committedDate": "2021-10-22T16:54:24Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Are there scenarios where the task will not return the same value with this change?\r\n\r\nThe case that this would \"break\" would be something like a build expecting to do something when removedir fails to delete a directory. The correct way to check that would be to check the number of directories passed in vs the number of directories deleted; `RemovedDirectories`",
        "createdAt": "2021-10-22T16:54:14Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Doesn't failing to delete a directory always log an error, though? Just curious, apologies for the stupid question.",
        "createdAt": "2021-10-22T16:56:46Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Doesn't failing to delete a directory always log an error, though?\r\n\r\nI recall RemoveDir being surprisingly good about logging errors when a deletion failed and tried to return false whenever that happened. For a second I forgot what this PR was solving. Curse the question that forces me to remind myself of the full context here \ud83d\ude01\r\n\r\nThis is an tangential PR from https://github.com/dotnet/msbuild/pull/6912. 6912 solves the real problem that stemmed from https://github.com/dotnet/msbuild/issues/6275 (tasks & taskbuilders were out of sync in understanding that a task \"officially\" logged an error when tasks log Error to Warning conversions)\r\n\r\nThis PR just ensures we keep our own \"best practices.\" So yeah, this is a preventative measure and there shouldn't (\ud83e\udd1e) be a visible change.",
        "createdAt": "2021-10-22T17:15:06Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't see any particular reason to add a new test for this, but if you are:\r\n```suggestion\r\n```\r\nand switch to using Shouldly in both cases.",
              "createdAt": "2021-10-13T22:36:26Z",
              "path": "src/Tasks.UnitTests/RemoveDir_Tests.cs",
              "diffHunk": "@@ -32,6 +34,30 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyNonExistentDirectory\", t.RemovedDirectories[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        public void SimpleDir()\n+        {\n+",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Having a test that actually tests the delete seems like a good idea.",
              "createdAt": "2021-10-14T15:25:15Z",
              "path": "src/Tasks.UnitTests/RemoveDir_Tests.cs",
              "diffHunk": "@@ -32,6 +34,30 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyNonExistentDirectory\", t.RemovedDirectories[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        public void SimpleDir()\n+        {\n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hook up the xunit logging stuff please, Just In Case\u2122\ufe0f.",
              "createdAt": "2021-10-14T15:25:18Z",
              "path": "src/Tasks.UnitTests/RemoveDir_Tests.cs",
              "diffHunk": "@@ -32,6 +34,30 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyNonExistentDirectory\", t.RemovedDirectories[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        public void SimpleDir()\n+        {\n+\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                List<TaskItem> list = new List<TaskItem>();\n+\n+                for (int i = 0; i < 20; i++)\n+                {\n+                    list.Add(new TaskItem(env.CreateFolder().Path));\n+                }\n+\n+                RemoveDir t = new RemoveDir();\n+\n+                t.Directories = list.ToArray();\n+                t.BuildEngine = new MockEngine();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also assert that the directories really got deleted?",
              "createdAt": "2021-10-14T15:27:21Z",
              "path": "src/Tasks.UnitTests/RemoveDir_Tests.cs",
              "diffHunk": "@@ -32,6 +34,30 @@ public void AttributeForwarding()\n             // Output ItemSpec should not be overwritten.\n             Assert.Equal(\"MyNonExistentDirectory\", t.RemovedDirectories[0].ItemSpec);\n         }\n+\n+        [Fact]\n+        public void SimpleDir()\n+        {\n+\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                List<TaskItem> list = new List<TaskItem>();\n+\n+                for (int i = 0; i < 20; i++)\n+                {\n+                    list.Add(new TaskItem(env.CreateFolder().Path));\n+                }\n+\n+                RemoveDir t = new RemoveDir();\n+\n+                t.Directories = list.ToArray();\n+                t.BuildEngine = new MockEngine();\n+\n+                t.Execute().ShouldBeTrue();\n+\n+                Assert.Equal(list.Count, t.RemovedDirectories.Length);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit:\r\n```suggestion\r\n                t.RemovedDirectories.Length.ShouldBe(list.Count);\r\n```\r\nbecause `t.RemovedDirectories.Length` is the actual value and `list.Count` is the expected value.",
              "createdAt": "2021-10-22T10:30:12Z",
              "path": "src/Tasks.UnitTests/RemoveDir_Tests.cs",
              "diffHunk": "@@ -23,14 +33,42 @@ public void AttributeForwarding()\n             ITaskItem i = new TaskItem(\"MyNonExistentDirectory\");\n             i.SetMetadata(\"Locale\", \"en-GB\");\n             t.Directories = new ITaskItem[] { i };\n-            t.BuildEngine = new MockEngine();\n+            t.BuildEngine = new MockEngine(_output);\n \n             t.Execute();\n \n-            Assert.Equal(\"en-GB\", t.RemovedDirectories[0].GetMetadata(\"Locale\"));\n+            t.RemovedDirectories[0].GetMetadata(\"Locale\").ShouldBe(\"en-GB\");\n+            t.RemovedDirectories[0].ItemSpec.ShouldBe(\"MyNonExistentDirectory\");\n+            Directory.Exists(t.RemovedDirectories[0].ItemSpec).ShouldBeFalse();\n+        }\n+\n+        [Fact]\n+        public void SimpleDelete()\n+        {\n+\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                List<TaskItem> list = new List<TaskItem>();\n+\n+                for (int i = 0; i < 20; i++)\n+                {\n+                    list.Add(new TaskItem(env.CreateFolder().Path));\n+                }\n+\n+                RemoveDir t = new RemoveDir();\n+\n+                t.Directories = list.ToArray();\n+                t.BuildEngine = new MockEngine(_output);\n+\n+                t.Execute().ShouldBeTrue();\n+\n+                list.Count.ShouldBe(t.RemovedDirectories.Length);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}