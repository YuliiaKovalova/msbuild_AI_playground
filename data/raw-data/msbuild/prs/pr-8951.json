{
  "number": 8951,
  "title": "Fix copy cancelation",
  "body": "Fix https://github.com/dotnet/msbuild/issues/3891\r\n\r\nCtrl-C calls Cancel() on the task. That signals the cancelation token we [pass into the ActionBlock](https://github.com/dotnet/msbuild/blob/92f3600820b5d5da87e4a0dcf141c709d0817a03/src/Tasks/Copy.cs#L561) which throws an exception that we do not catch.\r\n\r\nNote: the exception is caught in two other places; those are still required as they would otherwise be caught in the generic catch there and log and error.\r\n\r\nNo unit test here is really feasible without exceptional efforts.",
  "state": "MERGED",
  "createdAt": "2023-06-26T01:30:31Z",
  "updatedAt": "2023-06-30T13:42:49Z",
  "closedAt": "2023-06-30T12:20:22Z",
  "mergedAt": "2023-06-30T12:20:22Z",
  "additions": 12,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "fixcopycancel",
  "isDraft": false,
  "author": {
    "login": "danmoseley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "92f3600820b5d5da87e4a0dcf141c709d0817a03",
          "message": "fix copy cancel",
          "committedDate": "2023-06-26T01:26:00Z",
          "author": {
            "name": "Dan Moseley",
            "email": "danmose@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Looks like we need a task-canceled message:\r\n\r\nWas that with these changes? TaskCanceledException is-a OperationCanceledException, so this change should take care of both.\r\n\r\n> It's probably not important either way. It'd be nice to fail if cancelled even if cancelled right after finishing everything but bookkeeping--but doesn't matter much.\r\n\r\nIf cancel happens just after the catch block, there is no way for the task to not succeed -- because there's no code in between that respects the cancelation token. Ideally MSBuild itself marks tasks as failed if it signals the token before the task returns - if it doesn't, it probably should.\r\n\r\nSo as you say I can do it either way. I suggest to leave as is as it's \"correct\" and requires no reasoning.",
        "createdAt": "2023-06-26T19:32:20Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Looks like we need a task-canceled message:\r\n> \r\n> ```\r\n> C:\\play>dotnet msbuild foo.proj\r\n> MSBuild version 17.7.0-preview-23281-03+4ce2ff1f8 for .NET\r\n>   foo Go (0.6s)\r\n>   foo failed with errors (1.5s)\r\n>     \u274c C:\\play\\foo.proj(7,9): error MSB4018: The \"Copy\" task failed unexpectedly.\r\n> C:\\play\\foo.proj(7,9): error MSB4018: System.Threading.Tasks.TaskCanceledException: A task was canceled.\r\n> C:\\play\\foo.proj(7,9): error MSB4018:    at Microsoft.Build.Tasks.Copy.CopyParallel(CopyFileWithState copyFile, Int32 parallelism, List`1& destinationFilesSuccessfullyCopied)\r\n> C:\\play\\foo.proj(7,9): error MSB4018:    at Microsoft.Build.Tasks.Copy.Execute(CopyFileWithState copyFile, Int32 parallelism)\r\n> C:\\play\\foo.proj(7,9): error MSB4018:    at Microsoft.Build.Tasks.Copy.Execute()\r\n> C:\\play\\foo.proj(7,9): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n> C:\\play\\foo.proj(7,9): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n> \r\n> Build failed with errors in 1.6s\r\n> \r\n> C:\\play>S:\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\MSBuild.exe\r\n> MSBuild version 17.8.0-dev-23326-01+92f360082 for .NET Framework\r\n>   foo Go (0.5s)\r\n> \r\n> Build failed in 1.9s\r\n> ```\r\n> \r\n> > Do we maybe want to remove the `IsCancellationRequested` check https://github.com/dotnet/msbuild/pull/8951/files#diff-bfdedf8860a0dc992c6729c5119fb3ae2d56fc4587d803160434089181cbb421R441?\r\n> \r\n> It's probably not important either way. It'd be nice to fail if cancelled even if cancelled right after finishing everything but bookkeeping--but doesn't matter much.\r\n\r\nThis is weird - the exception should have been swallowen. Do you want to retry @rainersigwald ?\r\nKeeping unmerged for one more day if anybody want's to raise any red flag (like this one) - then I'll merge",
        "createdAt": "2023-06-27T09:26:26Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@rainersigwald was your stack above with this change in place?",
        "createdAt": "2023-06-29T22:07:52Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "No, the stack was without this change, the latter (failed with no error) was with it. I think #8975 is a good way to fix that.\r\n\r\nI think we should take this change.",
        "createdAt": "2023-06-29T22:28:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah right. Hmm, when does \"attempting to cancel the build\" appear I wonder?\n\nBut yes let's merge this",
        "createdAt": "2023-06-30T03:18:53Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> when does \"attempting to cancel the build\" appear I wonder?\r\n\r\nI think it'd work better if I hadn't opted into the new logger: https://github.com/dotnet/msbuild/issues/8983.",
        "createdAt": "2023-06-30T13:42:49Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}