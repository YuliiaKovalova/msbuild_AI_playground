{
  "number": 7882,
  "title": "Improve SDK resolver error reporting if none of the SDK resolvers attached are able to resolve a particular SDK",
  "body": "Permits SDK resolvers to return an enumerable of messages in addition to the warnings and errors. Messages are ignored if we end up finding an SDK resolver that can resolve the SDK, but they are aggregated and printed out all at once in an InvalidProjectFileException if we fail to resolve any SDK.\r\n\r\nThis will need changes to other SDK resolvers for it to be fully effective. If this is merged, I will attempt the requisite changes to the NuGetSDKResolver and maybe the C++ SDK resolver.\r\n\r\nNote also that this includes a breaking change, but I suspect it's seldom used, perhaps not used at all by anyone outside Microsoft.",
  "state": "MERGED",
  "createdAt": "2022-08-12T22:24:10Z",
  "updatedAt": "2022-12-06T03:49:36Z",
  "closedAt": "2022-12-06T03:49:36Z",
  "mergedAt": "2022-12-06T03:49:36Z",
  "additions": 346,
  "deletions": 66,
  "changedFiles": 24,
  "headRefName": "sdk-error-reporting",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "152464fe7a301739d1bc89e2d30f15cf79253521",
          "message": "have default SDK resolver send error on failure",
          "committedDate": "2022-08-23T17:43:07Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c072582138c7cd52dcf29482952233edd4860f62",
          "message": "Indicate that only one of the following errors is real\n\nShould make random bools more clear",
          "committedDate": "2022-08-25T00:04:10Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c55ecba30ae60485a8300bbf11659a939bcd311",
          "message": "Fix test",
          "committedDate": "2022-08-25T17:52:11Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af852c4700efee36ca67b313f8d98e37626629fc",
          "message": "Better fix",
          "committedDate": "2022-08-25T18:19:17Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cdbe795a76cdcb5672005db6ead87c2ebc3cac85",
          "message": "Comments",
          "committedDate": "2022-08-25T18:25:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c692860de0aa09a2bcc0ccfc3669185b408643e4",
          "message": "PR feedback",
          "committedDate": "2022-09-14T23:43:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eda5e0fcf420b18534301fb1487c5ce1fa38c309",
          "message": "Fix test and change order of warnings/errors",
          "committedDate": "2022-09-15T21:23:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b0847d3ad721497e63230ae37299de5f3a34a40",
          "message": "all but one comment",
          "committedDate": "2022-10-11T17:15:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "238cbaca56129f0b647bb9b81a0e613ee06b61cd",
          "message": "Update message",
          "committedDate": "2022-10-12T19:50:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b6f97d244c74273d377268805509f14decf7545c",
          "message": "Some feedback",
          "committedDate": "2022-10-24T23:12:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43eea93ed2b438aa24c10d6e1388d047de23cd3b",
          "message": "PR feedback",
          "committedDate": "2022-11-22T20:42:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Try to find a couple examples of what this would look like in the wild in VS (just open the project)",
        "createdAt": "2022-09-26T15:29:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > Try to find a couple examples of what this would look like in the wild in VS (just open the project)\r\n> \r\n> I'd still really like to see this (and the command-line equivalent). It's a bit hard to envision the final results from just the code.\r\n\r\nAR-May helped me with testing, but we didn't know how to test from VS, as opening it just makes VS say it can't load the project without calling into that code path at all. From the command line, it looks like:\r\n\r\n```\r\nC:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj : error : No SDK resolver succeeded in resolving\r\n SDK \"Microsoft.NET.Sdek\". Their error messages are printed below. Only one of the following indicates a real failure:\r\n  C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj : error : C:\\Program Files\\dotnet\\sdk\\7.0.100-rc\r\n.1.22431.12\\Sdks\\Microsoft.NET.Sdek\\Sdk not found. Check that a recent enough .NET SDK is installed and/or increase the\r\n version specified in global.json.\r\n  C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj : error : SDK resolver \"NuGetSdkResolver\" return\r\ned null. SDK resolvers should always return success or failure. This is a bug in the SDK resolver.\r\n  C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj : error : The default SDK resolver failed to res\r\nolve SDK \"Microsoft.NET.Sdek\" because directory \"C:\\Users\\forgind\\Documents\\GitHub\\msbuild\\artifacts\\bin\\bootstrap\\net\r\n472\\MSBuild\\Sdks\\Microsoft.NET.Sdek\\Sdk\" did not exist.\r\n\r\n\r\n\"C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj\" (default target) (1) ->\r\n  C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdek' sp\r\necified could not be found.\r\n```\r\n",
        "createdAt": "2022-10-11T20:42:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I was a little surprised by the global.json error, but it seems to be coming from the MSBuildSdkResolver, so that's appropriate. We might want to tweak that to make it clearer.\r\n\r\n(The build failures are just due to not having built before pushing. Once we have a final state for the other string, I can fix that.)",
        "createdAt": "2022-10-11T21:51:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "should those example errors above have error codes? (and not MSB4236 presumably) -- for Binging purposes.",
        "createdAt": "2022-10-12T14:09:42Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Load the project successfully then introduce an error a la Microsoft.Build.NoTargets/1.0.0 instead of 1.0.12",
        "createdAt": "2022-11-28T16:45:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@rainersigwald, once I tried loading a project successfully before introducing the failure, the improved error message from this PR continued to not be displayed, and the reason was immediately apparent:\r\n<img width=\"1006\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12969783/204408715-e7cd6603-799c-4fed-ba2d-2f8d3298ce6c.png\">\r\n<img width=\"1177\" alt=\"image\" src=\"https://user-images.githubusercontent.com/12969783/204408775-a31f44fe-bc48-4f86-98b2-7983e0dcbdf0.png\">\r\n\r\nI spoke with @MiYanni, and he pointed me to [ConfiguredProjectImpl](https://devdiv.visualstudio.com/DevDiv/_git/CPS?path=/src/Microsoft.VisualStudio.ProjectSystem.Implementation/Projects/ConfiguredProjectImpl.cs). We looked at it together, and it appears that CPS intentionally sets the IgnoreMissingImports flag when loading projects in VS, which means we cannot expect the messages to appear without changing CPS. tmeschter put a change into that file to allow you to fail on unresolved SDK, and that should be in 17.5, but it's in 17.4 if you set an environment variable. Unfortunately, setting that environment variable just led to the CPS bug I'd mentioned earlier. I captured a stack:\r\n```\r\n \tMicrosoft.VisualStudio.Validation.dll!Microsoft.Verify.FailOperation(string message, object[] args)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.ProjectInstancePageRule.GetProjectPropertiesProvider(Microsoft.Build.Framework.XamlTypes.DataSource dataSource)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.ProjectInstancePageRule.GetDataSourceConnector(Microsoft.Build.Framework.XamlTypes.DataSource dataSource, out bool pretranslatedPersistedName, out string defaultProjectPath)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.PropertyPages.PageRuleBase.GetPropertyValueAsync(string propertyName)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.ProjectEvaluationSubscriptionService.BuildPropertiesSnapshot(Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule, System.Collections.Immutable.ImmutableDictionary<string, string> previousVersion, out System.Collections.Immutable.IImmutableSet<string> changedProperties)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.ProjectEvaluationSubscriptionService.UpdateRuleSnapshotCore(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> source, string ruleName, Microsoft.VisualStudio.ProjectSystem.Properties.IRule rule, Microsoft.VisualStudio.ProjectSystem.Properties.IProjectRuleSnapshot previousRuleSnapshot, System.Collections.Immutable.ImmutableList<System.Tuple<string, string>> recentItemRenames, Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> previousSource, out Microsoft.VisualStudio.ProjectSystem.IProjectChangeDiff diff)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.ProjectRuleSubscriptionServiceBase<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>>.UpdateSnapshotCoreAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> source, System.Collections.Immutable.IImmutableSet<string> subscribedElements, Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate> previousResult, Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> previousSource)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.CustomizableBlockSubscriberBase<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>, Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate, string>.UpdateSnapshotAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> source)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.CustomizableBlockSubscriberBase<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>, Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate, string>.Initialize.AnonymousMethod__1()\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob<Microsoft.VisualStudio.Threading.EmptyStruct>(System.Func<System.Threading.Tasks.Task> asyncMethod, Microsoft.VisualStudio.Threading.JoinableTask job)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.RunAsync(System.Func<System.Threading.Tasks.Task> asyncMethod, bool synchronouslyBlocking, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions, System.Delegate entrypointOverride)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.Implementation.dll!Microsoft.VisualStudio.ProjectSystem.Designers.CustomizableBlockSubscriberBase<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>, Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate, string>.Initialize.AnonymousMethod__28_0(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> s)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.TransformBlockSlim<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>, System.Collections.Generic.KeyValuePair<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>, Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.IProjectSubscriptionUpdate>>>.TransformManyBlockSlimAsync.ProcessInputAsync(Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot> input)\tUnknown\r\n \tMicrosoft.VisualStudio.ProjectSystem.dll!Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>>.ProcessInputQueueAsync(Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim<Microsoft.VisualStudio.ProjectSystem.IProjectVersionedValue<Microsoft.VisualStudio.ProjectSystem.Properties.IProjectCatalogSnapshot>>.InputDataBuffer inputQueue)\tUnknown\r\n \tmscorlib.dll!System.Threading.Tasks.Task<System.Threading.Tasks.Task>.InnerInvoke() Line 686\tC#\r\n>\tmscorlib.dll!System.Threading.Tasks.Task.Execute() Line 2498\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 980\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 928\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot) Line 2827\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution) Line 2767\tC#\r\n \tmscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 820\tC#\r\n```\r\n\r\nThe actual error message is:\r\n`<HTML>\r\n<head>\r\n<title>Document</title></head>\r\n<body>\r\n<!--StartFragment-->\r\n\r\n\r\n\u00a0 | Name | Value | Type\r\n-- | -- | -- | --\r\n\u25e2 | $exception | {\"There is no project properties provider for \\\"Persistence = ProjectFileWithInterceptionViaSnapshot\\\".\"} | System.InvalidOperationException\r\n\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</HTML>\r\n`\r\n\r\n@lifengl, is this bug on your radar?",
        "createdAt": "2022-11-29T01:31:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> This is marginally better than before but I think speaks to a fair amount of follow-up work we should coordinate with our partner teams in VS about. At a minimum if we could get newlines in that first error, it would be much clearer.\r\n> \r\n\r\nWhere do you want newlines? It looks appropriate to me\u2014newlines between error messages from different resolvers.\r\n\r\n> Ideally the warning from the NuGet resolver wouldn't be separate from the other messages. I think that's related to my comment about resolver-message ordering.\r\n\r\nYou mean put the NuGet resolver's error into the others? The difference is that the NuGet SDK resolver is currently logging a warning instead of an error. I spoke with baronfel about how to log warnings and errors correctly a while ago, and we decided this format is best, but we should also tweak the NuGet SDK resolver to log an error instead of a warning. In the PR review meeting, you said we should wait to do that until we'd figured out anything else we should change so that we aren't bothering NuGet with several PRs in a row. If you feel that we've reached the point in which we should send that PR (just to change the warning to an error?), then I can. It should be a quick change.",
        "createdAt": "2022-11-29T18:06:47Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we even need to update this code path? This is going to go away once we remove the 17.4 changewave.",
              "createdAt": "2022-09-14T14:02:58Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -110,15 +111,27 @@ public virtual void ClearCaches()\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool throwExceptions)\n         {\n             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n             {\n-                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, throwExceptions);\n             }\n             else\n             {\n-                return ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                SdkResult result = ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, out IEnumerable<string> errors, out IEnumerable<string> warnings);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "I figure it's in support for 17.4 even if we're hoping to eventually get rid of it, so I should. You're right that it hopefully won't matter, though \ud83d\ude42",
              "createdAt": "2022-09-14T21:58:25Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -110,15 +111,27 @@ public virtual void ClearCaches()\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool throwExceptions)\n         {\n             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n             {\n-                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, throwExceptions);\n             }\n             else\n             {\n-                return ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                SdkResult result = ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, out IEnumerable<string> errors, out IEnumerable<string> warnings);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would not it be confusing to have warnings after the message `FailedToResolveSDK` above and before the actual list of errors below? Maybe move this line above or below?",
              "createdAt": "2022-09-14T14:10:18Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -191,11 +211,27 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd\n                 projectPath,\n                 interactive,\n                 isRunningInVisualStudio,\n-                out sdkResult))\n+                out sdkResult,\n+                out IEnumerable<string> moreErrors,\n+                out IEnumerable<string> moreWarnings))\n             {\n                 return sdkResult;\n             }\n \n+            errors.AddRange(moreErrors);\n+            warnings.AddRange(moreWarnings);\n+\n+            if (throwExceptions)\n+            {\n+                loggingContext.LogError(new BuildEventFileInfo(sdkReferenceLocation), \"FailedToResolveSDK\", sdk.Name);\n+            }\n+\n+            LogWarnings(loggingContext, sdkReferenceLocation, warnings);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "That is a good point...I will talk with baronfel about it to see what he recommends.",
              "createdAt": "2022-09-14T23:43:26Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -191,11 +211,27 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd\n                 projectPath,\n                 interactive,\n                 isRunningInVisualStudio,\n-                out sdkResult))\n+                out sdkResult,\n+                out IEnumerable<string> moreErrors,\n+                out IEnumerable<string> moreWarnings))\n             {\n                 return sdkResult;\n             }\n \n+            errors.AddRange(moreErrors);\n+            warnings.AddRange(moreWarnings);\n+\n+            if (throwExceptions)\n+            {\n+                loggingContext.LogError(new BuildEventFileInfo(sdkReferenceLocation), \"FailedToResolveSDK\", sdk.Name);\n+            }\n+\n+            LogWarnings(loggingContext, sdkReferenceLocation, warnings);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Resolver could fail silently without any message at all, returning null (see \"continue\" couple of lines above this line). No error or warning or log messages are added there. Therefore, it is nowhere in logs, and I feel that is not good. \r\nWhat do you think about adding some default message for this case to be shown as well, with the meaning \"Resolver <ResolverName> was run but returned null.\". Either log, or warning, or error. Error might be fine, I think, in case of failed resolution there will be errors for every resolver that was called.",
              "createdAt": "2022-09-14T14:28:59Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -301,7 +353,7 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n \n                 if (result.Success)\n                 {\n-                    LogWarnings(loggingContext, sdkReferenceLocation, result);\n+                    LogWarnings(loggingContext, sdkReferenceLocation, result.Warnings);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Pushed a proposed change for this \ud83d\ude42 Let me know if you don't like the wording.",
              "createdAt": "2022-09-14T23:44:18Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -301,7 +353,7 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n \n                 if (result.Success)\n                 {\n-                    LogWarnings(loggingContext, sdkReferenceLocation, result);\n+                    LogWarnings(loggingContext, sdkReferenceLocation, result.Warnings);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>The default SDK resolver failed to resolve SDK \"{0}\" because directory \"{1}\" did not exist.</value>\r\n```",
              "createdAt": "2022-10-11T14:22:24Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1973,4 +1976,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n       LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names\n     </comment>\n   </data>\n+   <data name=\"DefaultSDKResolverError\" xml:space=\"preserve\">\n+    <value>The DefaultSdkResolver failed to resolve SDK \"{0}\" because directory \"{1}\" did not exist.</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@baronfel this could use some wordsmithing, got opinions?\r\n\r\n```suggestion\r\n    <value>No SDK resolver could resolve SDK \"{0}\". Their error messages are printed below. Failures are expected; only one of the following indicates a real failure:</value>\r\n```",
              "createdAt": "2022-10-11T14:23:37Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "As a naive user, I find this message a bit confusing. I assume what it means is -- this is something like the list of loader errors -- you would expect errors as it \"looks around\", but in this case, they weren't followed by a successful find.\r\n\r\nIf that's the case, I think I'd expect something like this would actually be clearer for me.\r\n`<value>None of the SDK resolvers were able to resolve SDK \"{0}\". Each resolver's error message is shown below.</value>`",
              "createdAt": "2022-10-11T18:50:31Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "My other thought is -- is it implicit that the errors are being emitted in the order they occurred? I guess it probably is, but if not it could mention that. ",
              "createdAt": "2022-10-12T14:10:40Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Strong agree that we should clarify that order is important.",
              "createdAt": "2022-10-12T14:33:04Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Proposed wording:\r\nNone of the SDK resolvers were able to resolve SDK \"{0}\". Their error messages are reproduced below in the order they occurred. Only one SDK resolver is expected to be able to resolve \"{0}\", so only one of the messages below indicates a real failure.\r\n\r\nThoughts? As far as error codes, my code kinda looks like it's removing error codes, but in reality, it leaves them as long as they're part of the message. MSBuild directly controls the DefaultSDKResolver, but that's it; the other SDK resolvers will have to introduce their own error codes separately.",
              "createdAt": "2022-10-12T19:18:17Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "An alternative framing to \"of these errors only one is real\" might be to present it as just an activity trace. When we look at dll load failures, or fusion logs, for example, we don't consider any of the output to be errors. It just says what happened. So eg \r\n\r\n`<value>Could not resolve SDK \"{0}\". Detailed trace from each SDK resolver follows below.</value>`\r\n\r\nor something.",
              "createdAt": "2022-10-12T20:39:58Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1306,6 +1306,9 @@\n   <data name=\"SDKResolverFailed\" xml:space=\"preserve\">\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n+  <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n+    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this a warning, rather than an error?",
              "createdAt": "2022-10-11T14:26:49Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs",
              "diffHunk": "@@ -36,7 +37,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase c\n             // Note: On failure MSBuild will log a generic message, no need to indicate a failure reason here.\n             return FileUtilities.DirectoryExistsNoThrow(sdkPath)\n                 ? factory.IndicateSuccess(sdkPath, string.Empty)\n-                : factory.IndicateFailure(null);\n+                : factory.IndicateFailure(null, new List<string>() { ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"DefaultSDKResolverError\", sdk.Name, sdkPath) });",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also nit: no need to pull in `System.Collections.Generic.List<T>`; you can pass a `string[]` as an `IEnumerable<string>`.",
              "createdAt": "2022-10-11T14:27:32Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs",
              "diffHunk": "@@ -36,7 +37,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase c\n             // Note: On failure MSBuild will log a generic message, no need to indicate a failure reason here.\n             return FileUtilities.DirectoryExistsNoThrow(sdkPath)\n                 ? factory.IndicateSuccess(sdkPath, string.Empty)\n-                : factory.IndicateFailure(null);\n+                : factory.IndicateFailure(null, new List<string>() { ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"DefaultSDKResolverError\", sdk.Name, sdkPath) });",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this really throwing? Or should `throwExceptions` be named something like `errorsAreFatal` or `failOnMissingSdk`?",
              "createdAt": "2022-10-11T14:30:44Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -110,15 +111,33 @@ public virtual void ClearCaches()\n         }\n \n         /// <inheritdoc cref=\"ISdkResolverService.ResolveSdk\"/>\n-        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)\n+        public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool throwExceptions)\n         {\n             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))\n             {\n-                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, throwExceptions);\n             }\n             else\n             {\n-                return ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);\n+                SdkResult result = ResolveSdkUsingAllResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio, out IEnumerable<string> errors, out IEnumerable<string> warnings);\n+\n+                // Warnings are already logged on success.\n+                if (!result.Success)\n+                {\n+                    if (throwExceptions)\n+                    {\n+                        loggingContext.LogError(new BuildEventFileInfo(sdkReferenceLocation), \"FailedToResolveSDK\", sdk.Name);\n+                    }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could not resolve SDK \"{0}\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\r\n\r\nWhen using this, aggregate error messages with {Environment.NewLine + 2 * ' '} then add them to the end rather than logging them individually.\r\n\r\nGet an example similar to before of what it looks like in the wild.\r\nAlso try Debugger.Launch in hacked VS",
              "createdAt": "2022-10-17T15:15:57Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1307,7 +1307,7 @@\n     <value>The SDK resolver \"{0}\" failed while attempting to resolve the SDK \"{1}\". Exception: \"{2}\"</value>\n   </data>\n   <data name=\"FailedToResolveSDK\" xml:space=\"preserve\">\n-    <value>No SDK resolver succeeded in resolving SDK \"{0}\". Their error messages are printed below. Only one of the following indicates a real failure:</value>\n+    <value>None of the SDK resolvers were able to resolve SDK \"{0}\". Their error messages are reproduced below in the order they occurred. Only one SDK resolver is expected to be able to resolve \"{0}\", so only one of the messages below indicates a real failure.</value>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Change to \"SDK resolver \"{0}\" returned null.\" then make bug to replace with this again after updating nuget warnings --> errors.",
              "createdAt": "2022-10-24T15:37:11Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1973,4 +1976,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n       LOCALIZATION: {0} is a file path. {1} is a comma-separated list of target names\n     </comment>\n   </data>\n+   <data name=\"DefaultSDKResolverError\" xml:space=\"preserve\">\n+    <value>MSB4276: The default SDK resolver failed to resolve SDK \"{0}\" because directory \"{1}\" did not exist.</value>\n+  </data>\n+  <data name=\"SDKResolverReturnedNull\" xml:space=\"preserve\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this cause ordering confusion? For instance if there's\r\n\r\n1. Resolver1: Warning1\r\n2. Resolver1: Error1\r\n3. Resolver2: Warning2\r\n4. Resolver2: Error2\r\n\r\ndoes that get reordered for display?",
              "createdAt": "2022-11-22T21:17:50Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes. We put all the errors together and all the warnings together. See https://github.com/dotnet/msbuild/blob/43eea93ed2b438aa24c10d6e1388d047de23cd3b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs#L225-L230, for instance.",
              "createdAt": "2022-11-29T18:01:14Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Since the order is relevant, this seems bad. Can we preserve the order?",
              "createdAt": "2022-11-29T18:18:32Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You mean interleave errors and warnings?",
              "createdAt": "2022-11-29T18:20:58Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes.",
              "createdAt": "2022-11-29T18:21:53Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I discussed that with baronfel two months ago, and we decided this was better.",
              "createdAt": "2022-11-29T18:23:37Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Can you explain the reasoning? Order is relevant so reordering the messages seems like an impediment to debugging to me.",
              "createdAt": "2022-11-29T18:24:42Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If we assume \"error\" means \"this is why we failed to resolve the SDK,\" and \"warning\" means \"here's something else you might want to change,\" then interspersing them means a user might see just one error first, followed by a warning or two then more errors, and assume that that error is the first one they should try to resolve, which is not necessarily true. In other words, if someone sees:\r\n\r\nerror1\r\nwarning1\r\nwarning2\r\nerror2\r\nerror3\r\nwarning3\r\n\r\nThen because there's a gap between the first and second error, they'd treat them as separate and try to figure out why the default sdk resolver failed to resolve the SDK when that might be a complete red herring.\r\n\r\nSecond, (a weaker reason in my view) we don't want to show any errors if any of the SDK resolvers succeeds, again because it is expected that some will fail. That means we have to store the errors and display them later anyway. We're also only showing any errors if the user tells us to, whereas we always show the warnings. Each of these means we cannot just show the warnings and errors as they show up but rather have to keep track of them and log them later. If other things pop up in the interim, they may be logged immediately. That means we've already lost the found-a-bug-reported-a-bug connection; this just takes it one small step further.",
              "createdAt": "2022-11-29T19:15:09Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I do not find this convincing but we can try it.",
              "createdAt": "2022-12-05T16:37:29Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -319,18 +365,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(IList<SdkResolver> resolvers,\n                 results.Add(result);\n             }\n \n-            foreach (SdkResult result in results)\n-            {\n-                LogWarnings(loggingContext, sdkReferenceLocation, result);\n-\n-                if (result.Errors != null)\n-                {\n-                    foreach (string error in result.Errors)\n-                    {\n-                        loggingContext.LogErrorFromText(subcategoryResourceName: null, errorCode: null, helpKeyword: null, file: new BuildEventFileInfo(sdkReferenceLocation), message: error);\n-                    }\n-                }\n-            }\n+            warnings = results.SelectMany(r => r.Warnings ?? Array.Empty<string>());\n+            errors = results.SelectMany(r => r.Errors ?? Array.Empty<string>());",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}