{
  "number": 10659,
  "title": "Recognize direct properties access in ProjectInstance",
  "body": "Fixes #10604\r\n\r\n### Context\r\n`MSBuildTreatWarningsAsErrors` access was not recognized by PropertiesCheck - since it was bypassing Expander.\r\n\r\n### Changes Made\r\nAdded routing of properties access to `ProjectInstance`\r\n\r\n### Testing\r\nAdded unit test case specifically for `MSBuildTreatWarningsAsErrors` (fails without fix)\r\n\r\n### Notes\r\nNot handling accesses via `Project` - as that would get much more involved and is specific for API calls and VS - which are both currently unsupported scenarios",
  "state": "MERGED",
  "createdAt": "2024-09-12T13:42:55Z",
  "updatedAt": "2024-09-13T09:52:32Z",
  "closedAt": "2024-09-13T09:52:31Z",
  "mergedAt": "2024-09-13T09:52:30Z",
  "additions": 43,
  "deletions": 15,
  "changedFiles": 5,
  "headRefName": "proto/props-check-direct-access",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0c0097ec9dcdd35215658db4cdfac6c8d5e0b83d",
          "message": "Recognize direct properties access in ProjectInstance",
          "committedDate": "2024-09-12T13:40:42Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e88ea7592ffeb8e9c6fd206b73c6e8ee48207f54",
          "message": "Track only inner engine calls",
          "committedDate": "2024-09-13T09:12:32Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I think in my head I was envisioning this being a new wrapper around `ProjectInstance.GetPropertyValue()` that had tracking, used only in the parts of the engine that pay special attention to magic properties. Is that something you considered?\r\n\r\nI thought about it, then dismissed it and now on the second thought I decided to follow it :-)\r\n\r\nOriginaly I wanted to have it more universal for cases where msbuild might be called through API (as prep for VS integration). However that will anyway need much more other work (especially as evaluation is separated) - so let's handle the case that is problematic now",
        "createdAt": "2024-09-13T09:15:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why `EmptyLocation`?",
              "createdAt": "2024-09-12T14:47:24Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -1894,6 +1895,11 @@ public string GetPropertyValue(string name)\n             {\n                 unescapedValue = String.Empty;\n             }\n+            else\n+            {\n+                _loggingContext?.ProcessPropertyRead(\n+                    new PropertyReadInfo(name, ElementLocation.EmptyLocation, false, PropertyReadContext.Other));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, I see: because it's the engine itself that's reading it.",
              "createdAt": "2024-09-12T14:49:55Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -1894,6 +1895,11 @@ public string GetPropertyValue(string name)\n             {\n                 unescapedValue = String.Empty;\n             }\n+            else\n+            {\n+                _loggingContext?.ProcessPropertyRead(\n+                    new PropertyReadInfo(name, ElementLocation.EmptyLocation, false, PropertyReadContext.Other));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}