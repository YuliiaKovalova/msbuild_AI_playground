{
  "number": 11862,
  "title": "Fix for Build Requests with Different Flags Not Correctly Scheduled",
  "body": "## Fixes #11701\r\n\r\n### Context\r\nWhen two build requests with the same configuration ID and targets arrive in the scheduler, the second one is expected to be satisfied from the cache with results from the first request. However, the current implementation doesn't properly account for differing `BuildRequestDataFlags` between these requests, leading to potential deadlocks.\r\n\r\n### Problem\r\nIf the first request builds successfully but isn't cached (due to exceptions or skipped targets), the second request can get \"orphaned\" in the scheduler - it's not executed and doesn't send a proper completion callback. This causes Visual Studio to hang indefinitely waiting for a response that never comes.\r\n\r\n### Changes Made\r\n- Modified the scheduler to properly handle cases where a request's results should be in the cache but aren't\r\n- Added detailed comments explaining the previously problematic behavior that caused VS deadlocks\r\n- Ensured that when cache misses occur, the unscheduled request remains in the queue and gets picked up in the next scheduling pass for proper rebuilding\r\n\r\n### Testing\r\n- Added unit tests that verify correct handling of build requests with different flags",
  "state": "OPEN",
  "createdAt": "2025-05-19T17:03:02Z",
  "updatedAt": "2025-05-29T08:39:26Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 147,
  "deletions": 51,
  "changedFiles": 4,
  "headRefName": "dev/ykovalova/fix_hole_in_scheduler",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6c2b26bbbc9048bb1d6e953c9b1e794c7f2d6953",
          "message": "update the case in scheduler of reporting unscheduled overlapping results",
          "committedDate": "2025-05-19T16:59:05Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a22a608b16d95f96fc244392ca7fee6f4c09e8c",
          "message": "adjust the handling of cache miss in scheduler",
          "committedDate": "2025-05-20T09:59:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] This all-caps comment is noisy and doesn\u2019t add clarity. Consider rewriting it in a more descriptive, lower-case form or removing it if it\u2019s just a debug placeholder.\n```suggestion\n                            // This condition indicates a serious issue with the cache. \n                            // The response may be null if the result was never added to the cache, \n                            // which can happen if the result contains an exception.\n```",
              "createdAt": "2025-05-19T17:05:54Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -444,30 +444,32 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result\n                         // There are other requests which we can satisfy based on this result, lets pull the result out of the cache\n                         // and satisfy those requests.  Normally a skipped result would lead to the cache refusing to satisfy the\n                         // request, because the correct response in that case would be to attempt to rebuild the target in case there\n-                        // are state changes that would cause it to now excute.  At this point, however, we already know that the parent\n+                        // are state changes that would cause it to now execute.  At this point, however, we already know that the parent\n                         // request has completed, and we already know that this request has the same global request ID, which means that\n                         // its configuration and set of targets are identical -- from MSBuild's perspective, it's the same.  So since\n                         // we're not going to attempt to re-execute it, if there are skipped targets in the result, that's fine. We just\n                         // need to know what the target results are so that we can log them.\n                         ScheduleResponse response = TrySatisfyRequestFromCache(parentNode, unscheduledRequest.BuildRequest, skippedResultsDoNotCauseCacheMiss: true);\n \n-                        // If we have a response we need to tell the loggers that we satisified that request from the cache.\n+                        // If we have a response we need to tell the loggers that we satisfied that request from the cache.\n                         if (response != null)\n                         {\n                             LogRequestHandledFromCache(unscheduledRequest.BuildRequest, response.BuildResult);\n+\n+                            // Mark the request as complete (and the parent is no longer blocked by this request.)\n+                            unscheduledRequest.Complete(newResult);\n                         }\n                         else\n                         {\n-                            // Response may be null if the result was never added to the cache. This can happen if the result has\n-                            // an exception in it. If that is the case, we should report the result directly so that the\n-                            // build manager knows that it needs to shut down logging manually.\n-                            response = GetResponseForResult(parentNode, unscheduledRequest.BuildRequest, newResult.Clone());\n+                            // IF WE HIT IT, WE ARE IN TROUBLE WITH OUR CACHE.",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The tests mix FluentAssertions (`Should().Be`) and Shouldly-style assertions (`ShouldBe`). Consider standardizing on a single assertion library for consistency.\n```suggestion\n            results.Should().NotBeNull();\n            results.Count.Should().Be(3);\n\n            // Completed _defaultParentRequest\n            results[0].BuildResult.Should().NotBeNull();\n            results[0].BuildResult.BuildRequestDataFlags.Should().Be(BuildRequestDataFlags.None);\n            results[0].Action.Should().Be(ScheduleActionType.SubmissionComplete);\n\n            // After cache miss, the candidate for rescheduling\n            results[1].BuildResult.Should().BeNull();\n            results[1].NodeId.Should().Be(-1);\n            results[1].Action.Should().Be(ScheduleActionType.Schedule);\n            results[1].BuildRequest.BuildRequestDataFlags.Should().Be(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);\n\n            // The candidate for rescheduling has a node assignment for the execution.\n            results[2].BuildResult.Should().BeNull();\n            results[2].NodeId.Should().Be(1);\n            results[2].Action.Should().Be(ScheduleActionType.Schedule);\n            results[2].BuildRequest.BuildRequestDataFlags.Should().Be(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);\n```",
              "createdAt": "2025-05-19T17:05:54Z",
              "path": "src/Build.UnitTests/BackEnd/Scheduler_Tests.cs",
              "diffHunk": "@@ -848,6 +864,74 @@ private BuildRequest CreateProxyBuildRequest(int nodeRequestId, int configId, Pr\n                 proxyTargets);\n         }\n \n+        /// <summary>\n+        /// The test checks how scheduler handles the duplicated requests and cache MISS for this case.\n+        /// It's expected to have it rescheduled for the execution.\n+        /// </summary>\n+        [Fact]\n+        public void ReportResultTest_NoCacheHitForDupes()\n+        {\n+            // Create a duplicate of the existing _defaultParentRequest, but with a different build request flag, so we can't get the result from the cache.\n+            BuildRequest duplicateRequest = CreateBuildRequest(2, configId: DefaultConfigId, Array.Empty<string>(), parentRequest: null, BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);\n+\n+            // Schedule the duplicate request -> it goes to unscheduled request due to duplicated configId\n+            List<ScheduleResponse> responses = [.. _scheduler.ReportRequestBlocked(2, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]))];\n+\n+            // try to get a result for the parent request and see if we get a result for the duplicate request\n+            var results = _scheduler.ReportResult(1, CreateBuildResult(_defaultParentRequest, \"\", BuildResultUtilities.GetSuccessResult()))\n+                .ToList();\n+\n+            results.ShouldNotBeNull();\n+            results.Count.ShouldBe(3);\n+\n+            // Completed _defaultParentRequest\n+            results[0].BuildResult.ShouldNotBeNull();\n+            results[0].BuildResult.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.None);\n+            results[0].Action.ShouldBe(ScheduleActionType.SubmissionComplete);\n+\n+            // After cache miss, the candidate for rescheduling\n+            results[1].BuildResult.ShouldBeNull();\n+            results[1].NodeId.Should().Be(-1);\n+            results[1].Action.ShouldBe(ScheduleActionType.Schedule);\n+            results[1].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);\n+\n+            // The candidate for rescheduling has a node assignment for the execution.\n+            results[2].BuildResult.ShouldBeNull();\n+            results[2].NodeId.Should().Be(1);\n+            results[2].Action.ShouldBe(ScheduleActionType.Schedule);\n+            results[2].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Somewhat unrelated, but as good place as any to ask:\r\nisn't there a saner way of doing these sort of overloads?\r\nI get what these are meant to achieve, but when something goes wrong, stepping through 3+ levels of overloaded wrappers that just call another wrapper is a pain.",
              "createdAt": "2025-05-28T09:04:12Z",
              "path": "src/Build.UnitTests/BackEnd/Scheduler_Tests.cs",
              "diffHunk": "@@ -768,12 +773,13 @@ private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUn\n         }\n \n         /// <summary>\n-        /// Creates a build result for a request\n+        /// Creates a build result for a request.\n         /// </summary>\n         private BuildResult CreateBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Something like default values where possible to limit the overload layering.",
              "createdAt": "2025-05-28T09:05:16Z",
              "path": "src/Build.UnitTests/BackEnd/Scheduler_Tests.cs",
              "diffHunk": "@@ -768,12 +773,13 @@ private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUn\n         }\n \n         /// <summary>\n-        /// Creates a build result for a request\n+        /// Creates a build result for a request.\n         /// </summary>\n         private BuildResult CreateBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}