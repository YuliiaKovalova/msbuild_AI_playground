{
  "number": 8327,
  "title": "dotnet/msbuild#6521 `ObjectModelHelpers` refactoring",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/6521\r\n\r\n### Context\r\n\r\nDid suggested refactoring in the issue.\r\n`NullMetadataOnLegacyOutputItems_InlineTask` won't be fixed as it tests `Deprecated` code, and change is needed there.\r\n\r\n\r\n### Changes Made\r\n- loggers are now passed to evaluation\r\n- ability to set logger verbosity to `MockLogger` and when using  `BuildProjectExpectSuccess` and `BuildProjectExpectFailure`\r\n- same loggers are reused during build when using `BuildProjectExpectSuccess` and `BuildProjectExpectFailure`\r\n- registering logging is now done before the project is evaluated\r\n- improved doc and formatting in changed files\r\n- disposing of `ProjectCollection` in `BuildProjectExpectSuccess` and `BuildProjectExpectFailure`\r\n\r\n### Testing\r\nTesting only changes\r\n\r\n### Notes\r\nThere are other calls to `ObjectModelHelpers.CreateInMemoryProject` which do not dispose `ProjectCollection`. Those needs to be fixed separately.",
  "state": "MERGED",
  "createdAt": "2023-01-20T12:37:36Z",
  "updatedAt": "2023-02-08T02:07:12Z",
  "closedAt": "2023-02-08T02:07:11Z",
  "mergedAt": "2023-02-08T02:07:11Z",
  "additions": 122,
  "deletions": 59,
  "changedFiles": 6,
  "headRefName": "6521-ObjectModelHelpers-ref",
  "isDraft": false,
  "author": {
    "login": "vlada-shubina"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f5ca1c58b751c3269d41f0399f3df60df62dc9b0",
          "message": "dotnet/msbuild#6521 `ObjectModelHelpers` refactoring",
          "committedDate": "2023-02-07T15:22:27Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df79d6bba22f15cb6ac625e1538a5f0b4865f0e4",
          "message": "fixed issue with unclosed stream after logging",
          "committedDate": "2023-02-07T15:22:28Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7904d4426880fb576368d89b4a04927da74f21e",
          "message": "addressed review comments",
          "committedDate": "2023-02-07T15:30:00Z",
          "author": {
            "name": "Vlada Shubina",
            "email": "vshubina@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This was a interesting regression after reusing loggers from `ProjectCollection`.\r\n`ProjectCollection` creates 2 loggers from those registered: `Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger` based on provided, and `Microsoft.Build.BackEnd.Logging.CentralForwardingLogger` which is `Diagnostic`, and leads to the bug.\r\n\r\nTherefore after removing explicit loggers being passed to `Build`, this scenario started to fail too.",
              "createdAt": "2023-01-20T12:47:19Z",
              "path": "src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs",
              "diffHunk": "@@ -642,14 +642,14 @@ public void NullMetadataOnOutputItems_InlineTask()\n                       </Target>\n                     </Project>\";\n \n-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput);\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(projectContents, _testOutput, LoggerVerbosity.Diagnostic);\n             logger.AssertLogContains(\"[foo: ]\");\n         }\n \n         /// <summary>\n         /// If an item being output from a task has null metadata, we shouldn't crash.\n         /// </summary>\n-        [Fact(Skip = \"https://github.com/dotnet/msbuild/issues/6521\")]\n+        [Fact(Skip = \"This test fails when diagnostic logging is available, as deprecated EscapingUtilities.UnescapeAll method cannot handle null value. This is not relevant to non-deprecated version of this method.\")]",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this test fails when loggers are also passed to evaluation, whilst I don't see any reason why it should.\r\nNeed to investigate the reason.",
              "createdAt": "2023-01-20T13:39:30Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -99,7 +100,12 @@ public void TestBinaryLoggerRoundtrip(string projectText)\n             parallelFromBuild.Parameters = \"NOPERFORMANCESUMMARY\";\n \n             // build and log into binary logger, mock logger, serial and parallel console loggers\n-            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild);\n+            // no logging on evaluation\n+            using (ProjectCollection collection = new())",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/issues/8414",
              "createdAt": "2023-02-07T15:37:30Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -99,7 +100,12 @@ public void TestBinaryLoggerRoundtrip(string projectText)\n             parallelFromBuild.Parameters = \"NOPERFORMANCESUMMARY\";\n \n             // build and log into binary logger, mock logger, serial and parallel console loggers\n-            ObjectModelHelpers.BuildProjectExpectSuccess(projectText, binaryLogger, mockLogFromBuild, serialFromBuild, parallelFromBuild);\n+            // no logging on evaluation\n+            using (ProjectCollection collection = new())",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: I believe that `using` declarations are preferred when the scope is an entire method.\r\n\r\n```suggestion\r\n            using ProjectCollection collection = new();\r\n            \r\n            Project project = CreateInMemoryProject(collection, projectContents, loggers);\r\n            project.Build().ShouldBeFalse(\"Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\\\"\");\r\n```",
              "createdAt": "2023-02-06T12:59:38Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -671,113 +672,135 @@ internal static ProjectRootElement CreateInMemoryProjectRootElement(string proje\n         /// <summary>\n         /// Create a project in memory. Load up the given XML.\n         /// </summary>\n-        /// <param name=\"xml\"></param>\n-        /// <returns></returns>\n+        /// <param name=\"xml\">the project to be created in string format.</param>\n+        /// <returns>Returns created <see cref=\"Project\"/>.</returns>\n         internal static Project CreateInMemoryProject(string xml)\n         {\n-            return CreateInMemoryProject(xml, new ConsoleLogger());\n+            return CreateInMemoryProject(xml, new[] { new ConsoleLogger() });\n         }\n \n         /// <summary>\n         /// Create a project in memory. Load up the given XML.\n         /// </summary>\n-        /// <param name=\"xml\"></param>\n-        /// <param name=\"logger\"></param>\n-        /// <returns></returns>\n-        internal static Project CreateInMemoryProject(string xml, ILogger logger /* May be null */)\n+        /// <param name=\"xml\">the project to be created in string format.</param>\n+        /// <param name=\"loggers\">The array of loggers to attach on project evaluation.</param>\n+        /// <returns>Returns created <see cref=\"Project\"/>.</returns>\n+        internal static Project CreateInMemoryProject(string xml, params ILogger[] loggers)\n         {\n-            return CreateInMemoryProject(new ProjectCollection(), xml, logger);\n+            return CreateInMemoryProject(new ProjectCollection(), xml, loggers);\n         }\n \n         /// <summary>\n         /// Create an in-memory project and attach it to the passed-in engine.\n         /// </summary>\n-        /// <param name=\"engine\"></param>\n-        /// <param name=\"xml\"></param>\n-        /// <param name=\"logger\">May be null</param>\n-        /// <returns></returns>\n-        internal static Project CreateInMemoryProject(ProjectCollection e, string xml, ILogger logger /* May be null */)\n+        /// <param name=\"projectCollection\"><see cref=\"ProjectCollection\"/> to use for project creation.</param>\n+        /// <param name=\"xml\">the project to be created in string format.</param>\n+        /// <param name=\"loggers\">The array of loggers to attach on project evaluation. May be null.</param>\n+        /// <returns>Returns created <see cref=\"Project\"/>.</returns>\n+        internal static Project CreateInMemoryProject(ProjectCollection projectCollection, string xml, params ILogger[] loggers)\n         {\n-            return CreateInMemoryProject(e, xml, logger, null);\n+            return CreateInMemoryProject(projectCollection, xml, null, loggers);\n         }\n \n         /// <summary>\n         /// Create an in-memory project and attach it to the passed-in engine.\n         /// </summary>\n-        /// <param name=\"logger\">May be null</param>\n-        /// <param name=\"toolsVersion\">May be null</param>\n+        /// <param name=\"projectCollection\"><see cref=\"ProjectCollection\"/> to use for project creation.</param>\n+        /// <param name=\"xml\">the project to be created in string format.</param>\n+        /// <param name=\"toolsVersion\">The tools version to use on project creation. May be null.</param>\n+        /// <param name=\"loggers\">The array of loggers to attach to project collection before evaluation. May be null.</param>\n+        /// <returns>Returns created <see cref=\"Project\"/>.</returns>\n         internal static Project CreateInMemoryProject(\n             ProjectCollection projectCollection,\n             string xml,\n-            ILogger logger /* May be null */,\n-            string toolsVersion) /* may be null */\n+            string toolsVersion /* may be null */,\n+            params ILogger[] loggers)\n         {\n             XmlReaderSettings readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };\n+            if (loggers != null)\n+            {\n+                foreach (ILogger logger in loggers)\n+                {\n+                    projectCollection.RegisterLogger(logger);\n+                }\n+            }\n \n             Project project = new Project(\n                 XmlReader.Create(new StringReader(CleanupFileContents(xml)), readerSettings),\n-                null,\n+                globalProperties: null,\n                 toolsVersion,\n                 projectCollection);\n \n             Guid guid = Guid.NewGuid();\n             project.FullPath = Path.Combine(TempProjectDir, \"Temporary\" + guid.ToString(\"N\") + \".csproj\");\n             project.ReevaluateIfNecessary();\n \n-            if (logger != null)\n-            {\n-                project.ProjectCollection.RegisterLogger(logger);\n-            }\n-\n             return project;\n         }\n \n         /// <summary>\n         /// Creates a project in memory and builds the default targets.  The build is\n         /// expected to succeed.\n         /// </summary>\n-        /// <param name=\"projectContents\"></param>\n-        /// <returns></returns>\n+        /// <param name=\"projectContents\">The project file content in string format.</param>\n+        /// <param name=\"testOutputHelper\"><see cref=\"ITestOutputHelper\"/> to log to.</param>\n+        /// <param name=\"loggerVerbosity\">The required logging verbosity.</param>\n+        /// <returns>The <see cref=\"MockLogger\"/> that was used during evaluation and build.</returns>\n         internal static MockLogger BuildProjectExpectSuccess(\n             string projectContents,\n-            ITestOutputHelper testOutputHelper = null)\n+            ITestOutputHelper testOutputHelper = null,\n+            LoggerVerbosity loggerVerbosity = LoggerVerbosity.Normal)\n         {\n-            MockLogger logger = new MockLogger(testOutputHelper);\n+            MockLogger logger = new MockLogger(testOutputHelper, verbosity: loggerVerbosity);\n             BuildProjectExpectSuccess(projectContents, logger);\n             return logger;\n         }\n \n+        /// <summary>\n+        /// Creates a project in memory and builds the default targets.  The build is\n+        /// expected to succeed.\n+        /// </summary>\n+        /// <param name=\"projectContents\">The project file content in string format.</param>\n+        /// <param name=\"loggers\">The array of loggers to use.</param>\n         internal static void BuildProjectExpectSuccess(\n             string projectContents,\n             params ILogger[] loggers)\n         {\n-            Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves\n-            project.Build(loggers).ShouldBeTrue();\n+            using (ProjectCollection collection = new())\n+            {\n+                Project project = CreateInMemoryProject(collection, projectContents, loggers);\n+                project.Build().ShouldBeTrue();\n+            }\n         }\n \n         /// <summary>\n         /// Creates a project in memory and builds the default targets.  The build is\n         /// expected to fail.\n         /// </summary>\n-        /// <param name=\"projectContents\"></param>\n-        /// <returns></returns>\n-        internal static MockLogger BuildProjectExpectFailure(\n-            string projectContents)\n+        /// <param name=\"projectContents\">The project file content in string format.</param>\n+        /// <returns>The <see cref=\"MockLogger\"/> that was used during evaluation and build.</returns>\n+        internal static MockLogger BuildProjectExpectFailure(string projectContents)\n         {\n             MockLogger logger = new MockLogger();\n             BuildProjectExpectFailure(projectContents, logger);\n-\n             return logger;\n         }\n \n+        /// <summary>\n+        /// Creates a project in memory and builds the default targets.  The build is\n+        /// expected to fail.\n+        /// </summary>\n+        /// <param name=\"projectContents\">The project file content in string format.</param>\n+        /// <param name=\"loggers\">The array of loggers to use.</param>\n         internal static void BuildProjectExpectFailure(\n             string projectContents,\n-            ILogger logger)\n+            params ILogger[] loggers)\n         {\n-            Project project = CreateInMemoryProject(projectContents, logger);\n-\n-            bool success = project.Build(logger);\n-            Assert.False(success); // \"Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\"\n+            using (ProjectCollection collection = new())\n+            {\n+                Project project = CreateInMemoryProject(collection, projectContents, loggers);\n+                project.Build().ShouldBeFalse(\"Build succeeded, but shouldn't have.  See test output (Attachments in Azure Pipelines) for details\\\"\");\n+            }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Doesn't `param` take care of creating the array here?\r\n\r\n```suggestion\r\n            return CreateInMemoryProject(xml, new ConsoleLogger());\r\n```",
              "createdAt": "2023-02-06T13:02:07Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -671,113 +672,135 @@ internal static ProjectRootElement CreateInMemoryProjectRootElement(string proje\n         /// <summary>\n         /// Create a project in memory. Load up the given XML.\n         /// </summary>\n-        /// <param name=\"xml\"></param>\n-        /// <returns></returns>\n+        /// <param name=\"xml\">the project to be created in string format.</param>\n+        /// <returns>Returns created <see cref=\"Project\"/>.</returns>\n         internal static Project CreateInMemoryProject(string xml)\n         {\n-            return CreateInMemoryProject(xml, new ConsoleLogger());\n+            return CreateInMemoryProject(xml, new[] { new ConsoleLogger() });",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}