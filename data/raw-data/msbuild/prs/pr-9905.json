{
  "number": 9905,
  "title": "Make GeneratedFileUsedEventArgs internal",
  "body": "### Context\r\n\r\n`GeneratedFileUsedEventArgs` do not need to be written to binlog. It's important to have the generated file being embedded into the binlog files, other than that the event doesn't bring additional value.\r\n\r\nWhile forward compatibility of binlog allows us to introduce new events (or events additions) without breaking the viewer - there is still a minor impact that can confuse some users:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/5b302cc6-1d82-4725-8e31-73623c810db2)\r\n\r\n\r\nSo it's safer to not to write the event now.\r\n\r\nMid-term, we should think about generalizing the event - so that it can be used for other scenarios (e.g. response file, .editorconfig file etc.), with the same structured format - https://github.com/dotnet/msbuild/issues/9906\r\n\r\n### Changes Made\r\nMade `GeneratedFileUsedEventArgs` internal and dismounting sending it to the binlog (but kept the pushing of the generated file content itself - as that's the main gain brought by the feature).\r\n~~Added `Message` representation of the event - for the verbouse logging via `ConsoleLogger` and `FileLogger`.~~\r\n\r\n### Testing\r\nKept existing tests.\r\nManual tests with binlog viewer and ConsoleLogger and FileLogger.\r\n\r\nFYI @KirillOsenkov ",
  "state": "MERGED",
  "createdAt": "2024-03-21T20:01:15Z",
  "updatedAt": "2024-03-22T14:09:51Z",
  "closedAt": "2024-03-22T14:09:45Z",
  "mergedAt": "2024-03-22T14:09:45Z",
  "additions": 21,
  "deletions": 44,
  "changedFiles": 6,
  "headRefName": "proto/new-event-args-to-internal",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e043c417bd6ff80b69bba0d4199897e65ccc18e9",
          "message": "Make GeneratedFileUsedEventArgs internal",
          "committedDate": "2024-03-21T19:49:56Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c758f700bdad73286e4650b7652a40165b931a2",
          "message": "Remove stringified representation for text logs",
          "committedDate": "2024-03-22T08:50:20Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Should we then also adjust the way unrecognized events are presented in the UI so users are not confused?\r\n\r\nThis probably doesn't have correct answer :-)\r\nBinlog viewer being more of a 'power-user tool' should not likely hide information about not being able to represent some data in the log.\r\nForward compatibility gives us more agility by allowing us to release changes without breaking the world - but it should be temporary or exceptional situations - where we plan to add support in viewer shortly (as otherwise why would we add a message to the binlog in the first place). This might chage though - if/once binlog will not be only diagnostic source but as well post-process-analysis source (but again - for a specific events where we consciously made the decision)",
        "createdAt": "2024-03-22T08:57:42Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "To be clear, I am not suggesting to not show the error/warning but instead of \"reading errors encountered\", it should probably say something like \"you need a newer version to view all data in this log\".\r\n\r\nIf we wanted to be fancy, new events could indicate how important they are, maybe simply encoded in the numerical value so the above could have a different wording/color according to the severity.",
        "createdAt": "2024-03-22T09:20:22Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I like the ideas!\r\nWe actually had some of those distinct messaging (the event is unknown, but there is a newer version available; the event is unknown while the versioning is not incremented; the event and version is unknown and new version of viewer doesn't exist):\r\n\r\n\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/commit/9481a34a74a6e042a6369813e5f5bfe5ff4192f1#diff-613f1ee280f18ac778935201a021faa4dc7cbd3ae8624e3d40ec020ab58daf8dR222\r\n\r\n\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/commit/9481a34a74a6e042a6369813e5f5bfe5ff4192f1#diff-613f1ee280f18ac778935201a021faa4dc7cbd3ae8624e3d40ec020ab58daf8dR263\r\n\r\n\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/commit/9481a34a74a6e042a6369813e5f5bfe5ff4192f1#diff-613f1ee280f18ac778935201a021faa4dc7cbd3ae8624e3d40ec020ab58daf8dR263\r\n\r\n\r\nBut then decided to simplify it. As - if the update is available - user will be notified anyways. If it is not available - then it's nonstandard situation that event is unknown.",
        "createdAt": "2024-03-22T10:55:17Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This was also a problematic change (new name for an existing value). Presumably it wasn't in main long enough for us to consider leaving it here.",
              "createdAt": "2024-03-22T07:53:14Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public enum BinaryLogRecordKind\n         String,\n         TaskParameter,\n         ResponseFileUsed,\n-        GeneratedFileUsed,",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Correct.\r\nBtw. this wouldn't be an issue for builds or logs, but for theoretically authored custom tooling or extension taking a dependency on the new value. I believe that coding against nightly build is not comming with 100% guarantee of compatibility - however we should finalize our thoughts before we are done with next preview (mainly of 17.10)",
              "createdAt": "2024-03-22T08:36:56Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public enum BinaryLogRecordKind\n         String,\n         TaskParameter,\n         ResponseFileUsed,\n-        GeneratedFileUsed,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}