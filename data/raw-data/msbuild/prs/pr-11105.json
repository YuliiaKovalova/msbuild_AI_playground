{
  "number": 11105,
  "title": "Add a error/recap summary at the end of the build",
  "body": "Partially fixes #10681\r\n\r\n### Context\r\nIn a very large build, errors may have scrolled well offscreen before the end of the build, leaving a terminal window with a sea of green \"project succeeded\" messages followed by an unhelpful \"build failed with 8 errors\".\r\n\r\n### Changes Made\r\nTL can now display a summary of all errors and warnings in a structured way when the build finishes. For now, the only way to enable it is to use the logger parameter `-tlp:Summary`. A heuristic method to determine when to automatically provide the summary will likely be added in a different PR.\r\n\r\n### Testing\r\nManual testing + new automated test.\r\n![image](https://github.com/user-attachments/assets/f35ee4a0-4966-4565-bef2-a05c6c1b67d9)\r\n",
  "state": "MERGED",
  "createdAt": "2024-12-06T13:25:31Z",
  "updatedAt": "2024-12-11T15:38:39Z",
  "closedAt": "2024-12-11T15:38:38Z",
  "mergedAt": "2024-12-11T15:38:38Z",
  "additions": 291,
  "deletions": 67,
  "changedFiles": 20,
  "headRefName": "dev/mipavlik/tl-build-summary",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ee781c866874a0b22fb37d546f985bde1a2820bb",
          "message": "Added the base summary logic",
          "committedDate": "2024-12-06T12:25:30Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2e4eb7fcc47381080462f48b9ed93797189daa11",
          "message": "Added test",
          "committedDate": "2024-12-06T13:14:47Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "67d2d8f61f7e8e973f2cb022dc94c593b56d05b1",
          "message": "Added missing underscore",
          "committedDate": "2024-12-06T13:23:10Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6ed9a0484445c8295a5a2f8679ff3cc1474f02e",
          "message": "Fixing the OSX test",
          "committedDate": "2024-12-06T14:56:26Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d144c5ef698f28d2471a300168c2a12060e90d17",
          "message": "Added warnings to the summary",
          "committedDate": "2024-12-09T13:31:54Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e42543c9f674b4c6d66a7a27904c223d207c6163",
          "message": "Updated XMLDoc",
          "committedDate": "2024-12-09T14:30:02Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68a833873d287369b381190f6296b8bf5930099b",
          "message": "Reusing existing resource to print project header in summary + some refactoring.",
          "committedDate": "2024-12-10T16:48:50Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "My instinct is to include warnings in the recap, and the console logger does. Do you think it should be errors only?",
              "createdAt": "2024-12-06T22:24:43Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,15 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I expected that discussion :) So far, I have implemented it for errors as the original ticket mentions only errors, but I am ready to add warnings as well.\r\n\r\n> ...emit an error recap if errors were emitted...",
              "createdAt": "2024-12-07T11:36:02Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,15 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Feels like we should abstract this out if we're going to do it in 2 places.",
              "createdAt": "2024-12-06T22:27:04Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I wasn't sure whether the final implementation, after resolving all open questions, would be the same, so I kept a separate implementation for now.\r\n\r\n@baronfel, you probably missed my question about whether I should keep the `failed with x error(s)` part of the project line :)",
              "createdAt": "2024-12-07T11:38:17Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Yes - let's start with keeping the formatting in both the mid-build and build summary areas the same as much as possible - so:\r\n\r\n* project name\r\n* tfm (if known)\r\n* diagnostic count\r\n* list of diagnostics\r\n\r\nshould be present in the summary. The main thing we should consider _not_ writing is the dll output.\r\n\r\n",
              "createdAt": "2024-12-09T15:25:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Dll output is displayed for succeeded builds, and they should not be a part of the summary, if I understood it correctly.\r\n\r\nEdit: Actually, it's a successful build when there are only warnings without errors, but the DLL output path is not part of the resource, so we are good :)",
              "createdAt": "2024-12-10T13:00:29Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "It's done.",
              "createdAt": "2024-12-10T16:51:35Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not required for this PR but how are we going to represent the \"auto\" mode?",
              "createdAt": "2024-12-06T22:36:12Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -320,6 +325,12 @@ private void ApplyParameter(string parameterName, string? parameterValue)\n             case \"SHOWCOMMANDLINE\":\n                 TryApplyShowCommandLineParameter(parameterValue);\n                 break;\n+            case \"SUMMARY\":\n+                _showSummary = true;\n+                break;\n+            case \"NOSUMMARY\":\n+                _showSummary = false;\n+                break;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The variable is nullable, so when we know how we want to implement the heuristics, it will be used when the user does not define an explicit parameter.",
              "createdAt": "2024-12-07T11:46:51Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -320,6 +325,12 @@ private void ApplyParameter(string parameterName, string? parameterValue)\n             case \"SHOWCOMMANDLINE\":\n                 TryApplyShowCommandLineParameter(parameterValue);\n                 break;\n+            case \"SUMMARY\":\n+                _showSummary = true;\n+                break;\n+            case \"NOSUMMARY\":\n+                _showSummary = false;\n+                break;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How many of these are here please? This looks like potentially iterating over a huge collection.",
              "createdAt": "2024-12-09T15:08:24Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,17 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors and warnings.\n+    /// </summary>\n+    /// <returns>A sequence of error and warning build messages.</returns>\n+    public IEnumerable<BuildMessage> GetBuildErrorAndWarningMessages()",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Well, it depends on how many errors and warnings were emitted during the build. :)",
              "createdAt": "2024-12-09T16:15:03Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,17 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors and warnings.\n+    /// </summary>\n+    /// <returns>A sequence of error and warning build messages.</returns>\n+    public IEnumerable<BuildMessage> GetBuildErrorAndWarningMessages()",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "This iterates over all messages, right? That is where my concern comes from.",
              "createdAt": "2024-12-09T18:28:06Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,17 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors and warnings.\n+    /// </summary>\n+    /// <returns>A sequence of error and warning build messages.</returns>\n+    public IEnumerable<BuildMessage> GetBuildErrorAndWarningMessages()",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Specifically this\r\n```\r\nBuildMessages.Where(message =>\r\n                message.Severity == MessageSeverity.Error ||\r\n                message.Severity == MessageSeverity.Warning);\r\n```\r\nWhich looks like it goes all messages ever emitted - even for the subsequent .Any() call, which checks if the returned collection is non-empty.",
              "createdAt": "2024-12-09T18:30:08Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,17 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors and warnings.\n+    /// </summary>\n+    /// <returns>A sequence of error and warning build messages.</returns>\n+    public IEnumerable<BuildMessage> GetBuildErrorAndWarningMessages()",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I shared my thought in the different thread.",
              "createdAt": "2024-12-10T10:17:40Z",
              "path": "src/MSBuild/TerminalLogger/Project.cs",
              "diffHunk": "@@ -69,4 +73,17 @@ public void AddBuildMessage(MessageSeverity severity, string message)\n         BuildMessages ??= new List<BuildMessage>();\n         BuildMessages.Add(new BuildMessage(severity, message));\n     }\n+\n+    /// <summary>\n+    /// Filters the build messages to only include errors and warnings.\n+    /// </summary>\n+    /// <returns>A sequence of error and warning build messages.</returns>\n+    public IEnumerable<BuildMessage> GetBuildErrorAndWarningMessages()",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we evaluate the performance impact of this please?\r\nIn the previous comment I asked about the `.GetBuildErrorAndWarningMessages()` iterating over a collection(depending on its size) and here we do a second second pass - for every project with at least one warning or error.\r\n",
              "createdAt": "2024-12-09T15:11:41Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");\n+\n+            foreach (BuildMessage buildMessage in project.GetBuildErrorAndWarningMessages())",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "There is no I/O and all data is in memory. Also, there is only one full iteration per project as `Any()` just checks if the sequence is not empty. The summary is displayed after the build, so the performance of the build itself is not affected by this change.",
              "createdAt": "2024-12-09T16:30:53Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");\n+\n+            foreach (BuildMessage buildMessage in project.GetBuildErrorAndWarningMessages())",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "The underlying GetBuildErrorAndWarningMessages iterates over whole message collection, no matter the size - which happens both here and for the Any() check(to gather the Error/Warning messages to query the Any() against).\r\nSee my other comment.",
              "createdAt": "2024-12-09T18:36:02Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");\n+\n+            foreach (BuildMessage buildMessage in project.GetBuildErrorAndWarningMessages())",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The underlying `GetBuildErrorAndWarningMessages` does not iterate; it creates an instance of the iterator. `Any` uses the iterator until it hits the first item in the sequence, so it could possibly iterate over the whole collection, but only if the error/warning is the last item or if there are no errors/warnings at all, which, I admit, is the desired state.\r\n\r\nWe could introduce a boolean field indicating if there is at least one error/warning in the project message list, but that means we need a condition that will check the severity of the message for each message emission, and this condition would be evaluated even in builds where the summary is disabled. Or we could split messages to different collections, but the possible saving doesn't justify the increased complexity:\r\n\r\nI tried to build OrchardCore (several times) with the summary enabled and having some NuGet errors. The logic took ~6ms on a build that took over a minute. I still don't think the performance is a concern here :)",
              "createdAt": "2024-12-10T10:10:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -469,6 +482,31 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n         _testEndTime = null;\n     }\n \n+    private void RenderBuildSummary()\n+    {\n+        if (!_projects.Any(p => p.Value.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            // No errors to display.\n+            return;\n+        }\n+\n+        Terminal.WriteLine(ResourceUtilities.GetResourceString(\"BuildSummary\"));\n+\n+        foreach (Project project in _projects.Values.Where(p => p.GetBuildErrorAndWarningMessages().Any()))\n+        {\n+            string projectFileName = Path.GetFileNameWithoutExtension(project.File);\n+            string? tfm = project.TargetFramework;\n+            Terminal.WriteLine($\"{Indentation}{projectFileName}{(tfm is null ? string.Empty : \" \")}{AnsiCodes.Colorize(tfm, TerminalLogger.TargetFrameworkColor)}\");\n+\n+            foreach (BuildMessage buildMessage in project.GetBuildErrorAndWarningMessages())",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok, I had to check and make sure the TFM highlighting would work in the summary - thanks!",
              "createdAt": "2024-12-10T17:08:26Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -698,6 +692,35 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n         }\n     }\n \n+    private static string GetProjectFinishedHeader(Project project, string buildResult, string duration)\n+    {\n+        string projectFile = project.File is not null ?\n+            Path.GetFileNameWithoutExtension(project.File) :\n+            string.Empty;\n+\n+        if (string.IsNullOrEmpty(project.TargetFramework))\n+        {\n+            string resourceName = project.IsTestProject ? \"TestProjectFinished_NoTF\" : \"ProjectFinished_NoTF\";\n+\n+            return ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(resourceName,\n+                Indentation,\n+                projectFile,\n+                buildResult,\n+                duration);\n+        }\n+        else\n+        {\n+            string resourceName = project.IsTestProject ? \"TestProjectFinished_WithTF\" : \"ProjectFinished_WithTF\";\n+\n+            return ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(resourceName,\n+                Indentation,\n+                projectFile,\n+                AnsiCodes.Colorize(project.TargetFramework, TargetFrameworkColor),\n+                buildResult,\n+                duration);\n+        }",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}