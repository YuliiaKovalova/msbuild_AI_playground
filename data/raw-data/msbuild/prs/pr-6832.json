{
  "number": 6832,
  "title": "Process-wide caching of ToolsetConfigurationSection",
  "body": "Fixes #6667 \r\n\r\n### Context\r\nTools configuration is read from MSBuild.exe.config multiple time. We can simply cache related configuration section to optimize config file access.\r\nChanges are under opt-out escape hatch.\r\n\r\n### Changes Made\r\nCached in static variable. Caching is not applied in unit tests cases.\r\n\r\n### Testing\r\nRebuilds and incremental build of orchard core.\r\nETL has been captured to verify reading from MSBuild.exe.config was optimized.\r\n\r\n### Notes\r\nWhen measured the real perf difference in both CPU and wall-clock time was negligible/non-verifiable. ",
  "state": "MERGED",
  "createdAt": "2021-09-09T11:16:01Z",
  "updatedAt": "2021-09-14T09:22:15Z",
  "closedAt": "2021-09-14T09:22:15Z",
  "mergedAt": "2021-09-14T09:22:15Z",
  "additions": 63,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "rokonec/6667-toolset-caching",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "64d60f71cebe47994352dd4f9e2b7d942231935c",
          "message": "Process-wide caching of ToolsetConfigurationSection\n\nto eliminate multiple loading MSBuild.exe.config",
          "committedDate": "2021-09-09T09:14:00Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e618d4d7b01db55f0a0b867da2f06d9c69909501",
          "message": "Moved into ChangeWave",
          "committedDate": "2021-09-13T06:24:19Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2021-09-13T09:18:29Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-09-13T09:18:39Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why a separate opt-out rather than a changewave?",
              "createdAt": "2021-09-09T13:46:17Z",
              "path": "src/Build/Definition/ToolsetConfigurationReader.cs",
              "diffHunk": "@@ -250,6 +257,18 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetSubToolsetPropertyD\n         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.\n         /// </summary>\n         private static Configuration ReadApplicationConfiguration()\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I am not completely sure, when to use changewave vs escape-hatches. I am inclining to use changewave when msbuild change its behavior and when probability of regression is considerable. \r\nThe fact that user requires previous behavior of msbuild does not necessary means he wants to reject perf optimizations as well.\r\nThough I might be looking at it wrong. Please let me know if you prefer to use changewave here.",
              "createdAt": "2021-09-09T14:41:11Z",
              "path": "src/Build/Definition/ToolsetConfigurationReader.cs",
              "diffHunk": "@@ -250,6 +257,18 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetSubToolsetPropertyD\n         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.\n         /// </summary>\n         private static Configuration ReadApplicationConfiguration()\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "For a thing like this where we hope it is never needed, I think a changewave is best since they'll \"naturally\" expire as we follow the policy. I tend to favor explicit switches (usually in addition to a changewave) only if we expect to need the configurability \"forever\", like in #6560.\r\n\r\n@BenVillalobos or @marcpopMSFT might have more detailed or different thoughts though.",
              "createdAt": "2021-09-10T14:02:19Z",
              "path": "src/Build/Definition/ToolsetConfigurationReader.cs",
              "diffHunk": "@@ -250,6 +257,18 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetSubToolsetPropertyD\n         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.\n         /// </summary>\n         private static Configuration ReadApplicationConfiguration()\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Makes sense. I have moved it under 17_0 change wave.",
              "createdAt": "2021-09-13T06:24:51Z",
              "path": "src/Build/Definition/ToolsetConfigurationReader.cs",
              "diffHunk": "@@ -250,6 +257,18 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetSubToolsetPropertyD\n         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.\n         /// </summary>\n         private static Configuration ReadApplicationConfiguration()\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "To add onto rainer's thoughts, if there were backlash such that we know a permanent workaround is needed then we can always add the secondary/permanent escape hatch later. Perhaps as part of the wave \"rotating out\" when we've gathered more real world data.",
              "createdAt": "2021-09-13T15:48:56Z",
              "path": "src/Build/Definition/ToolsetConfigurationReader.cs",
              "diffHunk": "@@ -250,6 +257,18 @@ protected override IEnumerable<ToolsetPropertyDefinition> GetSubToolsetPropertyD\n         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.\n         /// </summary>\n         private static Configuration ReadApplicationConfiguration()\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is more supported if someone uses MSBuildLocator to get here, so msbuild.exe.config isn't the exe.config of relevance, and they proceed to use the same (in proc) node to do something else. It still sounds pretty unexpected to me, though.",
              "createdAt": "2021-09-10T21:10:49Z",
              "path": "src/Shared/ToolsetElement.cs",
              "diffHunk": "@@ -15,7 +15,49 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class ToolsetConfigurationReaderHelpers\n     {\n+        /// <summary>\n+        /// Lock for process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static readonly object s_syncLock = new();\n+\n+        /// <summary>\n+        /// Process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;\n+        private static Configuration s_configurationOfCachedSection;\n+\n         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")\n+            {\n+                if (configuration == null)\n+                {\n+                    return null;\n+                }\n+\n+                lock (s_syncLock)\n+                {\n+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.\n+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,\n+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "MSBuild.exe.config should always be the only .exe.config of relevance, even in Locator scenarios.",
              "createdAt": "2021-09-10T21:59:53Z",
              "path": "src/Shared/ToolsetElement.cs",
              "diffHunk": "@@ -15,7 +15,49 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class ToolsetConfigurationReaderHelpers\n     {\n+        /// <summary>\n+        /// Lock for process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static readonly object s_syncLock = new();\n+\n+        /// <summary>\n+        /// Process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;\n+        private static Configuration s_configurationOfCachedSection;\n+\n         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")\n+            {\n+                if (configuration == null)\n+                {\n+                    return null;\n+                }\n+\n+                lock (s_syncLock)\n+                {\n+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.\n+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,\n+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Didn't we find that with in-proc nodes from Locator, it didn't even know about msbuild.exe.config by default? It was using BuilderApp.exe.config, which I could have modified to fit my scenario.",
              "createdAt": "2021-09-10T22:10:01Z",
              "path": "src/Shared/ToolsetElement.cs",
              "diffHunk": "@@ -15,7 +15,49 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class ToolsetConfigurationReaderHelpers\n     {\n+        /// <summary>\n+        /// Lock for process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static readonly object s_syncLock = new();\n+\n+        /// <summary>\n+        /// Process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;\n+        private static Configuration s_configurationOfCachedSection;\n+\n         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")\n+            {\n+                if (configuration == null)\n+                {\n+                    return null;\n+                }\n+\n+                lock (s_syncLock)\n+                {\n+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.\n+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,\n+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ah! There are two things in the app.config:\r\n\r\n1. .NET Framework configuration, such as binding redirects. These are pulled from `{TheActualApp}.exe.config`.\r\n2. MSBuild's configuration section, with toolsets and definitions of things like `$(MSBuildExtensionsPath)`. This is always from `MSBuild.exe.config` and is what is relevant to this PR.",
              "createdAt": "2021-09-10T22:23:51Z",
              "path": "src/Shared/ToolsetElement.cs",
              "diffHunk": "@@ -15,7 +15,49 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class ToolsetConfigurationReaderHelpers\n     {\n+        /// <summary>\n+        /// Lock for process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static readonly object s_syncLock = new();\n+\n+        /// <summary>\n+        /// Process wide ToolsetConfigurationSection section cache\n+        /// </summary>\n+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;\n+        private static Configuration s_configurationOfCachedSection;\n+\n         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)\n+        {\n+            if (Environment.GetEnvironmentVariable(\"MSBUILDCACHETOOLSETCONFIGURATION\") != \"0\")\n+            {\n+                if (configuration == null)\n+                {\n+                    return null;\n+                }\n+\n+                lock (s_syncLock)\n+                {\n+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.\n+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,\n+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}