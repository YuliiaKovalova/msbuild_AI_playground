{
  "number": 11146,
  "title": "Expose processes leveraged by BuildManager",
  "body": "Fixes #11051\r\n\r\n### Context\r\nFor various hangs detection we need worker processes dumps. Let's unblock VS perf team in enabling automatic collection of worker processes dumps.\r\n\r\n### Testing\r\nNo tests provided.\r\nThis is best effort, point in time functionality, that should be used so\r\n\r\n\r\nFYI @davkean \r\n",
  "state": "MERGED",
  "createdAt": "2024-12-13T18:52:01Z",
  "updatedAt": "2025-01-03T13:31:07Z",
  "closedAt": "2025-01-03T13:31:06Z",
  "mergedAt": "2025-01-03T13:31:06Z",
  "additions": 9,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "proto/get-bldmgr-processes",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "64932ca47a360b4cd5f9a0a6c9a2e11cbf004e3c",
          "message": "Expose processes leveraged by BuildManager",
          "committedDate": "2024-12-13T18:49:02Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "495ff16f51b3c91b87adc2a53fc13f87a13fe4d9",
          "message": "Clarify comment",
          "committedDate": "2024-12-13T18:53:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I know we also have some issues that have the error \"Node # has exited unexpectedly\", could a bit more information on the nodes help with that one too?\r\n\r\nTho goal of this PR is to help collect more relevant data with perfWatson on VS hangs - as important context might be in running out-of-proc MSBuild nodes, for which we are missing dumps.\r\nIf the node process crashes - then dump is already automatically collected.\r\nSo I feel there is no other information we can add here for the crashing nodes. But kick me harder if I'm missing something specific you have on mind :-)",
        "createdAt": "2025-01-03T11:15:02Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "can we consider leveraging telemetry for this information too?",
              "createdAt": "2024-12-16T11:01:29Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -819,6 +819,15 @@ void Callback(object? state)\n             ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, parentThreadCulture, parentThreadUICulture);\n         }\n \n+        /// <summary>\n+        /// Point in time snapshot of all worker processes leveraged by this BuildManager.\n+        /// This is meant to be used by VS. External users should not this is only best-effort, point-in-time functionality\n+        ///  without guarantee of 100% correctness and safety.\n+        /// </summary>\n+        /// <returns>Enumeration of <see cref=\"Process\"/> objects that were valid during the time of call to this function.</returns>\n+        public IEnumerable<Process> GetWorkerProcesses()",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Once we have it, we surely can :-)\r\n\r\nWhat exact telemetry would you like to collect?",
              "createdAt": "2024-12-19T12:15:40Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -819,6 +819,15 @@ void Callback(object? state)\n             ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, parentThreadCulture, parentThreadUICulture);\n         }\n \n+        /// <summary>\n+        /// Point in time snapshot of all worker processes leveraged by this BuildManager.\n+        /// This is meant to be used by VS. External users should not this is only best-effort, point-in-time functionality\n+        ///  without guarantee of 100% correctness and safety.\n+        /// </summary>\n+        /// <returns>Enumeration of <see cref=\"Process\"/> objects that were valid during the time of call to this function.</returns>\n+        public IEnumerable<Process> GetWorkerProcesses()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}