{
  "number": 6837,
  "title": "Fix deadlock in BuildManager vs LoggingService",
  "body": "Fixes #6823\r\n\r\n### Context\r\nThere is possible deadlock in BuildManager vs LoggingService when:\r\n- verbosity=diagnostic or higher or /bl\r\n- LoggingService works in `LoggerMode.Synchronous`\r\n\r\n### Changes Made\r\nLoggingService callbacks (OnProjectStarted, OnProjectFinished and OnThreadException) has been modified into async by leveraging existing workQueue.\r\n\r\n### Testing\r\nCompiled Orchardcore in CLI and VS2022.\r\n\r\n### Notes\r\nIf these changes are considered safe, we can optionally revert PR #6717",
  "state": "MERGED",
  "createdAt": "2021-09-10T08:10:44Z",
  "updatedAt": "2021-09-15T14:13:37Z",
  "closedAt": "2021-09-15T14:13:37Z",
  "mergedAt": "2021-09-15T14:13:36Z",
  "additions": 58,
  "deletions": 14,
  "changedFiles": 1,
  "headRefName": "rokonec/6823-hang-in-unit-test",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b0b923ba5ecc020200f78125b862e5cd65a2f8cb",
          "message": "Make callbacks from LoggingService thread safe by async",
          "committedDate": "2021-09-10T07:27:55Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "481ca11c2a4b477ff980123d72c03b6e10234481",
          "message": "Cover it by ChageWave",
          "committedDate": "2021-09-14T16:39:06Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf20f3cea74893b4f884f6644d59d1300e384b90",
          "message": "Do not swallow exception in _workQueue.Completion.Wait()",
          "committedDate": "2021-09-14T16:44:34Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1be67840df62bbfab33045fc0cc59d51cbbef929",
          "message": "Missed ChangeWave",
          "committedDate": "2021-09-14T21:53:19Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed13c5da47c5b35d0da830b685da18c91685bf3f",
          "message": "Small Fix",
          "committedDate": "2021-09-15T08:33:14Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why `WaitAny` when you're passing only one task?",
              "createdAt": "2021-09-13T12:10:36Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,11 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n+                // Wait for all of the actions in the work queue to drain.  _workQueue.Completion.Wait() could throw here if there was an unhandled exception\n                 // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                Task.WaitAny(_workQueue.Completion);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Because `WaitAny` is only `Task.WaitXX` I am aware of which does not throw Exception if awaited task ends up in a Failed state. Exceptions during _workQueue DataFlow processing are handled in `ProcessWorkQueue` the only exceptions left this could throw, AFAIK, is `OperationCanceledException` which we shall swallow anyway.",
              "createdAt": "2021-09-13T20:47:41Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,11 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n+                // Wait for all of the actions in the work queue to drain.  _workQueue.Completion.Wait() could throw here if there was an unhandled exception\n                 // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                Task.WaitAny(_workQueue.Completion);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Interesting! And very unobvious. Would an explicit try/catch with a comment be more appropriate? Or at least a comment.\r\n\r\n(Perf super nit: `WaitAny` takes `params Task[]` so the call allocates an array.)",
              "createdAt": "2021-09-14T06:12:42Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,11 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n+                // Wait for all of the actions in the work queue to drain.  _workQueue.Completion.Wait() could throw here if there was an unhandled exception\n                 // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                Task.WaitAny(_workQueue.Completion);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> at least a comment\r\n\r\nYes, please.",
              "createdAt": "2021-09-14T16:44:57Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,11 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n+                // Wait for all of the actions in the work queue to drain.  _workQueue.Completion.Wait() could throw here if there was an unhandled exception\n                 // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                Task.WaitAny(_workQueue.Completion);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I have though about it more, and it looks like it shall never throws. It will be better if that unexpected exception will surface by `_workQueue.Completion.Wait();`.",
              "createdAt": "2021-09-14T16:46:32Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,11 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n+                // Wait for all of the actions in the work queue to drain.  _workQueue.Completion.Wait() could throw here if there was an unhandled exception\n                 // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                Task.WaitAny(_workQueue.Completion);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this statement also be behind the changewave check? (Apologies for not adding this comment earlier.)",
              "createdAt": "2021-09-14T19:12:08Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,12 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n-                // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n+                // Wait for all of the actions in the work queue to drain.\n+                // _workQueue.Completion.Wait() could throw here if there was an unhandled exception in the work queue,\n+                // but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                _workQueue.Completion.Wait();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It is a good point. It was actually bug, I think, `_workQueue.Complete()` do not wait. But it could have, low probability, chance for regresion. Lets put it under ChangeWave.",
              "createdAt": "2021-09-14T21:53:28Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -832,10 +832,12 @@ public void EndBuild()\n                 ShutdownConnectedNodes(false /* normal termination */);\n                 _noNodesActiveEvent.WaitOne();\n \n-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception\n-                // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the\n+                // Wait for all of the actions in the work queue to drain.\n+                // _workQueue.Completion.Wait() could throw here if there was an unhandled exception in the work queue,\n+                // but the top level exception handler there should catch everything and have forwarded it to the\n                 // OnThreadException method in this class already.\n                 _workQueue.Complete();\n+                _workQueue.Completion.Wait();",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}