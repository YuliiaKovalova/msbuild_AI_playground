{
  "number": 10206,
  "title": "Proposal: Skip existence check for file cache if user specifies ignoremissingimports",
  "body": "### Context\r\nParsing of large amounts of msbuild projects (thousands) can hit some performance issues while utilizing the evaluation APIs.  These performance issues can be overcome with some changes, however, further improvements can be made in the existence path.  If a consumer is utilizing the evaluation APIs and is already specifying IgnoreMissingImports then existence really shouldn't be necessary and instead falling back to I/O try/catch logic that already exists should be sufficient.  These existence checks force a round trip to the OS every time resulting in unnecessary pinvoke paths which can play a role in performance degradation.  Again this is for large amounts of projects and is really for diabolical cases.\r\n\r\n### Changes Made\r\nIf a consumer is specifying IgnoreMissingImports we should ignore existence checks to avoid the unnecessary pinvoke roundtrip to the filesystem.  The user needs to opt into this behavior by specifying the MSBUILDSKIPEXISTENCECHECKFORCACHE env var.  So this feature is behind two gates: need this env var + need to IgnoreMissingImports.\r\n\r\n### Testing\r\nAnecdotally seeing 50% perf improvement with this change when run against larger number of projects.\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2024-06-04T23:44:55Z",
  "updatedAt": "2025-04-02T16:09:39Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 67,
  "deletions": 11,
  "changedFiles": 5,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "cgraig"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9e73c2c548b7c3b55098c042dd7bc238a8d34dd4",
          "message": "Performance improvement when evaluating 60k+ projects, skip existence check support for file cache and lean on exception handling instead.",
          "committedDate": "2024-06-04T23:22:33Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3019460bc2be95b518051bfb7f0c6d45dbfffb36",
          "message": "Revert accidental change",
          "committedDate": "2024-06-04T23:41:21Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9896225862528cca11fd793b0557e811b501c090",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2024-07-26T21:37:54Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97891960e616eb2e160f7a68063509c3d58871b5",
          "message": "Fix API break",
          "committedDate": "2024-07-26T22:24:16Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7ad22d1ddf811612f89bba93d5e4b27762a14366",
          "message": "Merge remote-tracking branch 'upstream/main'",
          "committedDate": "2024-10-23T23:06:26Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dfad19c7fd650d8abbf629fc1c330958f3bca297",
          "message": "Merge branch 'main' into main",
          "committedDate": "2024-10-24T16:13:34Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bcf8974dab7b12ce9cd206cf5f06257013e926ef",
          "message": "Merge remote-tracking branch 'upstream/main'",
          "committedDate": "2024-10-24T16:17:14Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "348cece9ba28c675d127f6bb750b95a512da5fa5",
          "message": "Merge branch 'main' of github.com:cgraig/msbuild",
          "committedDate": "2024-10-24T16:40:01Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b015b95920507514fdf3c826f65e0ae923d9e9fd",
          "message": "Address PR Feedback",
          "committedDate": "2024-10-24T18:01:36Z",
          "author": {
            "name": "Chris Graig",
            "email": "cgraig@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10d6b559fc11de7f4115ed890bf54a6bf37d5446",
          "message": "Merge branch 'main' into main",
          "committedDate": "2025-03-25T16:40:39Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "as far it's under feature flag and IgnoreMissingImports , let's give it a chance",
        "createdAt": "2025-04-02T16:09:30Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Since `SkipExistenceCheck` is only used once, I would just declare it in this constructor.  I found it hard to determine what its values was.",
              "createdAt": "2024-10-23T23:45:06Z",
              "path": "src/Build/Evaluation/Context/EvaluationContext.cs",
              "diffHunk": "@@ -60,25 +64,28 @@ public enum SharingPolicy\n         /// </summary>\n         private ConcurrentDictionary<string, IReadOnlyList<string>> FileEntryExpansionCache { get; }\n \n-        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ISdkResolverService sdkResolverService = null,\n+        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ProjectLoadSettings? projectLoadSettings, ISdkResolverService sdkResolverService = null,\n             ConcurrentDictionary<string, IReadOnlyList<string>> fileEntryExpansionCache = null)\n         {\n             Policy = policy;\n \n+            _projectLoadSettings = projectLoadSettings;\n             SdkResolverService = sdkResolverService ?? new CachingSdkResolverService();\n             FileEntryExpansionCache = fileEntryExpansionCache ?? new ConcurrentDictionary<string, IReadOnlyList<string>>();\n-            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default);\n+            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default, SkipExistenceCheck);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Good call",
              "createdAt": "2024-10-24T16:06:17Z",
              "path": "src/Build/Evaluation/Context/EvaluationContext.cs",
              "diffHunk": "@@ -60,25 +64,28 @@ public enum SharingPolicy\n         /// </summary>\n         private ConcurrentDictionary<string, IReadOnlyList<string>> FileEntryExpansionCache { get; }\n \n-        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ISdkResolverService sdkResolverService = null,\n+        private EvaluationContext(SharingPolicy policy, IFileSystem fileSystem, ProjectLoadSettings? projectLoadSettings, ISdkResolverService sdkResolverService = null,\n             ConcurrentDictionary<string, IReadOnlyList<string>> fileEntryExpansionCache = null)\n         {\n             Policy = policy;\n \n+            _projectLoadSettings = projectLoadSettings;\n             SdkResolverService = sdkResolverService ?? new CachingSdkResolverService();\n             FileEntryExpansionCache = fileEntryExpansionCache ?? new ConcurrentDictionary<string, IReadOnlyList<string>>();\n-            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default);\n+            FileSystem = fileSystem ?? new CachingFileSystemWrapper(FileSystems.Default, SkipExistenceCheck);",
              "author": {
                "login": "cgraig"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be even better that if `skipExistenceCheck` was `true`, it never creates `_existenceCache` and the `Exists()` methods just return true?",
              "createdAt": "2024-10-23T23:48:50Z",
              "path": "src/Shared/FileSystem/CachingFileSystemWrapper.cs",
              "diffHunk": "@@ -15,10 +15,17 @@ internal sealed class CachingFileSystemWrapper : IFileSystem\n         private readonly IFileSystem _fileSystem;\n         private readonly ConcurrentDictionary<string, bool> _existenceCache = new ConcurrentDictionary<string, bool>();\n         private readonly ConcurrentDictionary<string, DateTime> _lastWriteTimeCache = new ConcurrentDictionary<string, DateTime>();\n+        private readonly bool _skipExistenceCheck = false;\n \n         public CachingFileSystemWrapper(IFileSystem fileSystem)\n+            : this(fileSystem, false)\n+        {\n+        }\n+\n+        public CachingFileSystemWrapper(IFileSystem fileSystem, bool skipExistenceCheck = false)\n         {\n             _fileSystem = fileSystem;\n+            _skipExistenceCheck = skipExistenceCheck;",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "yes, that works, good call",
              "createdAt": "2024-10-24T16:08:17Z",
              "path": "src/Shared/FileSystem/CachingFileSystemWrapper.cs",
              "diffHunk": "@@ -15,10 +15,17 @@ internal sealed class CachingFileSystemWrapper : IFileSystem\n         private readonly IFileSystem _fileSystem;\n         private readonly ConcurrentDictionary<string, bool> _existenceCache = new ConcurrentDictionary<string, bool>();\n         private readonly ConcurrentDictionary<string, DateTime> _lastWriteTimeCache = new ConcurrentDictionary<string, DateTime>();\n+        private readonly bool _skipExistenceCheck = false;\n \n         public CachingFileSystemWrapper(IFileSystem fileSystem)\n+            : this(fileSystem, false)\n+        {\n+        }\n+\n+        public CachingFileSystemWrapper(IFileSystem fileSystem, bool skipExistenceCheck = false)\n         {\n             _fileSystem = fileSystem;\n+            _skipExistenceCheck = skipExistenceCheck;",
              "author": {
                "login": "cgraig"
              }
            }
          ]
        }
      }
    ]
  }
}