{
  "number": 8973,
  "title": "Deep clone TaskRegistry and Toolset",
  "body": "Fixes [ADO#1801351](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1801351) and [ADO#1801341](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1801341) and possibly [ADO#1824802](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1824802)\r\n\r\nCredit for rootcausing: @rokonec \r\n\r\n### Context\r\n`TaskRegistry` (and as `Toolset` as well) were not properly clonned during clonning `ProjectInstance` data - that could cause unintended sharing of `TaskRegistry` data between multiple independent evaluation/build threads - allowing concurrent access to `TaskRegistry` and its objects, while such concurency is not supported.\r\n\r\n### Changes Made\r\nMade `TaskRegistry` and `Toolset` classes DeepClonable and properly cloning them during `ProjectInstance` clonning\r\n\r\n### Testing - Perf\r\n\r\nNo observable impact.\r\n\r\n * OrchardCore and Console, build command: `msbuild.exe /nodeReuse:false /bl`\r\n\r\n| Scenario | Mean Duration |\r\n| --- | --- |\r\n| Orchard, MSBuild main, clean build, /bl | 00:01:54.28 |\r\n| Orchard, MSBuild curr branch, clean build, /bl | 00:02:01.36 |\r\n|  |  |\r\n| Orchard, MSBuild main, rebuild, /bl | 00:01:44.46 |\r\n| Orchard, MSBuild curr branch, rebuild, /bl | 00:01:41.81 |\r\n|  |  |\r\n| Orchard, MSBuild main, rebuild | 00:01:36.55 |\r\n| Orchard, MSBuild curr branch, rebuild | 00:01:39.83 |\r\n| --- | --- |\r\n| Console, MSBuild main, clean build | 00:00:01.75 |\r\n| Console, MSBuild curr branch, clean build | 00:00:01.71 |\r\n|  |  |\r\n| Console, MSBuild main, rebuild | 00:00:01.34 |\r\n| Console, MSBuild curr branch, rebuild | 00:00:01.31 |\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-06-28T16:02:08Z",
  "updatedAt": "2023-07-24T07:11:15Z",
  "closedAt": "2023-07-24T07:11:14Z",
  "mergedAt": null,
  "additions": 256,
  "deletions": 121,
  "changedFiles": 12,
  "headRefName": "proto/TaskRegistryDeepCopy",
  "isDraft": true,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "625d3ca927017e5ecfb2721abfb7209a71deedb1",
          "message": "Deep clone TaskRegistry and Toolset",
          "committedDate": "2023-06-28T15:51:06Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16299fd042301bd0e19b854c55940d7fdfc65abd",
          "message": "Handle nulls gracefully",
          "committedDate": "2023-06-29T09:39:09Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2945cf3dd29288e6d2f1ae99093940e2bfe1b17",
          "message": "Shallow copy RootElementCache",
          "committedDate": "2023-06-29T10:42:20Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1503e592f6f348f961a584167722650946c6091",
          "message": "Fix clone tests",
          "committedDate": "2023-06-29T16:21:46Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a20850a4384a499a4a3660e9b8709499ef99230a",
          "message": "Remove the todos",
          "committedDate": "2023-06-29T19:04:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8af7090d46292d7e527b339180387518637cf362",
          "message": "Reflect code review suggestions",
          "committedDate": "2023-06-30T10:07:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "935e0dfefeae8c45a51a2267bad17a2a939af091",
          "message": "Apply code review suggestions",
          "committedDate": "2023-06-30T14:42:04Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Looking at this more, this feels wrong to me. I expect the Toolset and TaskRegistry to be essentially singletons (since we no longer respect a file's toolset specification), and now there will be many of them, causing us to have a lower cache hit rate on lookups.\r\n> \r\n> Do we understand yet what's causing the multithreading in task execution? Or is it one thread executing tasks and one thread evaluating projects? Or what?\r\n\r\nCopying ProjectInstances is exposed publicly (with coment mentioning it's deep copy) - so there might be scenarios we don't know about. Overlaping build and evaluation seems to be one of them (as copy ctor is invoked between eval and build). The mutability concern and need for deep copy was voiced in the original code as well: https://github.com/dotnet/msbuild/pull/8973/files#diff-40f77147ccc6867c10324ec4ddf8110ede2e43499d939b73ef83c7f5febb7a75L564\r\n\r\nHowever, let's make sure we have better understanding and better consensus on solution - so keeping this PR open for now.",
        "createdAt": "2023-06-30T18:21:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Upon detailed investigation with @rainersigwald and @rokonec we'll fix this differently: TaskRegistry is expected to be shareable and logicaly immutable, however it has internal caches, that can be altered on access. so TaskRegistry internal caches will be made thread safe, the actual task registrations are not expected to be changed after initialization - so safeguard code will be added to catch unintended state changes",
        "createdAt": "2023-07-12T16:06:36Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Superseded by https://github.com/dotnet/msbuild/pull/9032",
        "createdAt": "2023-07-24T07:11:14Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: is the `this.*` needed?",
              "createdAt": "2023-06-30T09:09:04Z",
              "path": "src/Build/Definition/Toolset.cs",
              "diffHunk": "@@ -901,79 +920,78 @@ private void RegisterDefaultTasks(ILoggingService loggingServices, BuildEventCon\n         /// </summary>\n         private void InitializeProperties(ILoggingService loggingServices, BuildEventContext buildEventContext)\n         {\n+            if (_expander != null)\n+            {\n+                return;\n+            }\n+\n             try\n             {\n-                if (_propertyBag == null)\n-                {\n-                    List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();\n+                List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,\n #if RUNTIME_TYPE_NETCORE\n-                        Traits.Instance.ForceEvaluateAsFullFramework ? \"Full\" : \"Core\",\n+                    Traits.Instance.ForceEvaluateAsFullFramework ? \"Full\" : \"Core\",\n #elif MONO\n-                        NativeMethodsShared.IsMono ? \"Mono\" : \"Full\");\n+                    NativeMethodsShared.IsMono ? \"Mono\" : \"Full\");\n #else\n-                        \"Full\",\n+                    \"Full\",\n #endif\n-                        mayBeReserved: true));\n+                    mayBeReserved: true));\n \n \n-                    // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the\n-                    // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.\n-                    int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;\n+                // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the\n+                // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.\n+                int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;\n \n-                    // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the\n-                    // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.\n-                    string subToolsetVersion = this.GenerateSubToolsetVersion();\n-                    SubToolset subToolset;\n-                    ICollection<ProjectPropertyInstance> subToolsetProperties = null;\n+                // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the\n+                // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.\n+                string subToolsetVersion = this.GenerateSubToolsetVersion();",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Removed",
              "createdAt": "2023-06-30T10:06:30Z",
              "path": "src/Build/Definition/Toolset.cs",
              "diffHunk": "@@ -901,79 +920,78 @@ private void RegisterDefaultTasks(ILoggingService loggingServices, BuildEventCon\n         /// </summary>\n         private void InitializeProperties(ILoggingService loggingServices, BuildEventContext buildEventContext)\n         {\n+            if (_expander != null)\n+            {\n+                return;\n+            }\n+\n             try\n             {\n-                if (_propertyBag == null)\n-                {\n-                    List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();\n+                List<ProjectPropertyInstance> reservedProperties = new List<ProjectPropertyInstance>();\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.binPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsVersion, ToolsVersion, mayBeReserved: true));\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));\n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.toolsPath, EscapingUtilities.Escape(ToolsPath), mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));\n \n-                    reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,\n+                reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.msbuildRuntimeType,\n #if RUNTIME_TYPE_NETCORE\n-                        Traits.Instance.ForceEvaluateAsFullFramework ? \"Full\" : \"Core\",\n+                    Traits.Instance.ForceEvaluateAsFullFramework ? \"Full\" : \"Core\",\n #elif MONO\n-                        NativeMethodsShared.IsMono ? \"Mono\" : \"Full\");\n+                    NativeMethodsShared.IsMono ? \"Mono\" : \"Full\");\n #else\n-                        \"Full\",\n+                    \"Full\",\n #endif\n-                        mayBeReserved: true));\n+                    mayBeReserved: true));\n \n \n-                    // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the\n-                    // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.\n-                    int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;\n+                // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the\n+                // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.\n+                int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;\n \n-                    // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the\n-                    // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.\n-                    string subToolsetVersion = this.GenerateSubToolsetVersion();\n-                    SubToolset subToolset;\n-                    ICollection<ProjectPropertyInstance> subToolsetProperties = null;\n+                // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the\n+                // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.\n+                string subToolsetVersion = this.GenerateSubToolsetVersion();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f ",
              "createdAt": "2023-06-30T09:25:45Z",
              "path": "src/Build/Definition/Toolset.cs",
              "diffHunk": "@@ -190,11 +189,6 @@ public class Toolset : ITranslatable\n         /// </summary>\n         private Expander<ProjectPropertyInstance, ProjectItemInstance> _expander;\n \n-        /// <summary>\n-        /// Bag of properties for the expander to expand the properties and items in the using tasks files\n-        /// </summary>\n-        private PropertyDictionary<ProjectPropertyInstance> _propertyBag;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f ",
              "createdAt": "2023-06-30T09:26:55Z",
              "path": "src/Build/Definition/Toolset.cs",
              "diffHunk": "@@ -901,79 +920,78 @@ private void RegisterDefaultTasks(ILoggingService loggingServices, BuildEventCon\n         /// </summary>\n         private void InitializeProperties(ILoggingService loggingServices, BuildEventContext buildEventContext)\n         {\n+            if (_expander != null)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please explain why - in comment.  The fact that it is about reusing already cloned instance by line above might  not be obvious for reader.\r\n",
              "createdAt": "2023-06-30T09:36:18Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -561,9 +561,13 @@ internal ProjectInstance(Evaluation.Project.Data data, string directory, string\n             this.CreateTargetsSnapshot(data.Targets, data.DefaultTargets, data.InitialTargets, data.BeforeTargets, data.AfterTargets);\n             this.CreateImportsSnapshot(data.ImportClosure, data.ImportClosureWithDuplicates);\n \n-            this.Toolset = data.Toolset; // UNDONE: This isn't immutable, should be cloned or made immutable; it currently has a pointer to project collection\n             this.SubToolsetVersion = data.SubToolsetVersion;\n-            this.TaskRegistry = data.TaskRegistry;\n+            this.TaskRegistry = data.TaskRegistry?.DeepClone();\n+\n+            // If the task registry uses toolset identical to the one in data instance - deep clone it just once.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same as above please update comment to state that we are reusing already cloned Toolset",
              "createdAt": "2023-06-30T09:38:36Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -641,11 +645,12 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject\n                     ProjectItemDefinitionInstance>)this).AfterTargets = CreateCloneDictionary(\n                     ((IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance,\n                         ProjectItemDefinitionInstance>)that).AfterTargets, StringComparer.OrdinalIgnoreCase);\n-                this.TaskRegistry =\n-                    that.TaskRegistry; // UNDONE: This isn't immutable, should be cloned or made immutable; it currently has a pointer to project collection\n \n-                // These are immutable so we don't need to clone them:\n-                this.Toolset = that.Toolset;\n+                this.TaskRegistry = that.TaskRegistry.DeepClone();\n+                // If the task registry uses toolset identical to the one in project instance - deep clone it just once.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If it's immutable, does it need to be cloned?",
              "createdAt": "2023-06-30T14:13:03Z",
              "path": "src/Build/Definition/ProjectImportPathMatch.cs",
              "diffHunk": "@@ -24,36 +32,39 @@ internal ProjectImportPathMatch(string propertyName, List<string> searchPaths)\n             ErrorUtilities.VerifyThrowArgumentNull(propertyName, nameof(propertyName));\n             ErrorUtilities.VerifyThrowArgumentNull(searchPaths, nameof(searchPaths));\n \n-            PropertyName = propertyName;\n-            SearchPaths = searchPaths;\n-            MsBuildPropertyFormat = $\"$({PropertyName})\";\n+            _propertyName = propertyName;\n+            _searchPaths = searchPaths;\n+            _msBuildPropertyFormat = $\"$({PropertyName})\";\n         }\n \n         public ProjectImportPathMatch(ITranslator translator)\n         {\n             ((ITranslatable)this).Translate(translator);\n         }\n \n+        internal ProjectImportPathMatch DeepClone()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "ah good point - removing...",
              "createdAt": "2023-06-30T14:30:11Z",
              "path": "src/Build/Definition/ProjectImportPathMatch.cs",
              "diffHunk": "@@ -24,36 +32,39 @@ internal ProjectImportPathMatch(string propertyName, List<string> searchPaths)\n             ErrorUtilities.VerifyThrowArgumentNull(propertyName, nameof(propertyName));\n             ErrorUtilities.VerifyThrowArgumentNull(searchPaths, nameof(searchPaths));\n \n-            PropertyName = propertyName;\n-            SearchPaths = searchPaths;\n-            MsBuildPropertyFormat = $\"$({PropertyName})\";\n+            _propertyName = propertyName;\n+            _searchPaths = searchPaths;\n+            _msBuildPropertyFormat = $\"$({PropertyName})\";\n         }\n \n         public ProjectImportPathMatch(ITranslator translator)\n         {\n             ((ITranslatable)this).Translate(translator);\n         }\n \n+        internal ProjectImportPathMatch DeepClone()",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "(removed)",
              "createdAt": "2023-06-30T14:42:18Z",
              "path": "src/Build/Definition/ProjectImportPathMatch.cs",
              "diffHunk": "@@ -24,36 +32,39 @@ internal ProjectImportPathMatch(string propertyName, List<string> searchPaths)\n             ErrorUtilities.VerifyThrowArgumentNull(propertyName, nameof(propertyName));\n             ErrorUtilities.VerifyThrowArgumentNull(searchPaths, nameof(searchPaths));\n \n-            PropertyName = propertyName;\n-            SearchPaths = searchPaths;\n-            MsBuildPropertyFormat = $\"$({PropertyName})\";\n+            _propertyName = propertyName;\n+            _searchPaths = searchPaths;\n+            _msBuildPropertyFormat = $\"$({PropertyName})\";\n         }\n \n         public ProjectImportPathMatch(ITranslator translator)\n         {\n             ((ITranslatable)this).Translate(translator);\n         }\n \n+        internal ProjectImportPathMatch DeepClone()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Was this assertion always wrong? Have we added mutability where we shouldn't have, or just \"in a way that requires we change this\"?",
              "createdAt": "2023-06-30T14:46:32Z",
              "path": "src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs",
              "diffHunk": "@@ -480,8 +481,8 @@ public void CloneTaskRegistry()\n             ProjectInstance first = GetSampleProjectInstance();\n             ProjectInstance second = first.DeepCopy();\n \n-            // Task registry object should be immutable",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Unfortunately this is older then GH history so I can only provide guessing - and my guess is the ProjectInstance and owned object graph (including TaskRegistry) was always meant to be instantiated once and then used only sequantially. So immutability and deepclonning was never strongly followed - as it was mostly ok in majority of cases (a specific set of VS actions and conditions needs to be made - e.g. in-proc build or cancel and rebuild - to hit the unwanted sharing of TaskRegistry/Toolset).\r\nTaskRegistry looks _almost_ immutable, with exception of the internal matching caches, lazy initialized state of held TaskFactoryWrapper instances (the reason for the 3rd state corruption perf issue), plus something else (I forgot now) - so the path of DeepCopying turned out to be easier and safer than attempting to make TaskRegistry and Toolset truly immutable",
              "createdAt": "2023-06-30T15:13:57Z",
              "path": "src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs",
              "diffHunk": "@@ -480,8 +481,8 @@ public void CloneTaskRegistry()\n             ProjectInstance first = GetSampleProjectInstance();\n             ProjectInstance second = first.DeepCopy();\n \n-            // Task registry object should be immutable",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "tl;dr; the added mutability shouldn't be added without adding deep cloning IMHO",
              "createdAt": "2023-06-30T15:19:10Z",
              "path": "src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs",
              "diffHunk": "@@ -480,8 +481,8 @@ public void CloneTaskRegistry()\n             ProjectInstance first = GetSampleProjectInstance();\n             ProjectInstance second = first.DeepCopy();\n \n-            // Task registry object should be immutable",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The extra copies seem ok based on your results so far, but we could also consider using our ImmutableDictionary, our wrapper CopyOnWriteDictionary, or a similar type to get copy-on-write behavior and minimize allocations (since it seems modifications are rare).",
              "createdAt": "2023-06-30T15:00:12Z",
              "path": "src/Build/BackEnd/Components/Communications/CloningExtensions.cs",
              "diffHunk": "@@ -0,0 +1,47 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Execution;\n+\n+namespace Microsoft.Build.BackEnd;\n+\n+internal static class CloningExtensions\n+{\n+    public static PropertyDictionary<ProjectPropertyInstance>? DeepClone(\n+        this PropertyDictionary<ProjectPropertyInstance>? properties)\n+        => properties == null ? null : new(properties.Select<ProjectPropertyInstance, ProjectPropertyInstance>(p => p.DeepClone()));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What causes mutation of `_properties`? It feels like it should be static for a subtoolset, and indeed that subtoolset instances should be single-instanced rather than cloned themselves.",
              "createdAt": "2023-06-30T15:20:31Z",
              "path": "src/Build/Definition/SubToolset.cs",
              "diffHunk": "@@ -50,6 +50,9 @@ private SubToolset(ITranslator translator)\n             ((ITranslatable)this).Translate(translator);\n         }\n \n+        internal SubToolset DeepClone()\n+            => new SubToolset(_subToolsetVersion, _properties?.DeepClone());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": ":thumbsup:\r\nThe code could (and likely should) verify the `IsImmutable` member of all `_properties` and skip clonning if they are all `true`.\r\nWithout that unfortunately the code gives no guarantees.\r\n\r\nOr possibly the SubToolset itself should be created immutable (with properties flipped to immutable) - as currently this is not a case",
              "createdAt": "2023-07-07T15:35:43Z",
              "path": "src/Build/Definition/SubToolset.cs",
              "diffHunk": "@@ -50,6 +50,9 @@ private SubToolset(ITranslator translator)\n             ((ITranslatable)this).Translate(translator);\n         }\n \n+        internal SubToolset DeepClone()\n+            => new SubToolset(_subToolsetVersion, _properties?.DeepClone());",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}