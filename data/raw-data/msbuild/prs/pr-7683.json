{
  "number": 7683,
  "title": "Propagete Console properties to MSBuild Server",
  "body": "Fixes #7658\r\n\r\n### Context\r\nSee #7658\r\n\r\n### Changes Made\r\nMSBuild Server clients detects: ConsoleBufferWidth, AcceptAnsiColorCodes, ConsoleIsScreen, ConsoleBackgroundColor of current console and sent it to Server in `ServerNodeBuildCommand`.\r\nServer overrides `ConsoleConfigueation`  so our loggers can get **target** console configuration.\r\n\r\n### Testing\r\nManual\r\n\r\n### Notes\r\nThere are no expected functional changes for NON Server and hence also VS scenarios.",
  "state": "MERGED",
  "createdAt": "2022-06-07T12:24:43Z",
  "updatedAt": "2022-06-20T17:04:07Z",
  "closedAt": "2022-06-20T17:04:07Z",
  "mergedAt": "2022-06-20T17:04:07Z",
  "additions": 439,
  "deletions": 87,
  "changedFiles": 22,
  "headRefName": "rokonec/msbuildserver-console",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8080b4c167af3a46db4092eac4a71e1b3545a969",
          "message": "Solving memory leak by reusing BuildManager and ProjectRoolElementCache",
          "committedDate": "2022-05-31T08:12:53Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e41cf8a6ff737fe197b89d7c856444a9f39b89b6",
          "message": "Do not clear project root element cache if in auto reload.",
          "committedDate": "2022-05-31T08:13:09Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "447225c121b96cdadf7bec6ca0e8d2ffb15900e2",
          "message": "Reduce if\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-05-31T08:13:21Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f67732f52593a7a50dc03869885b11514e5d88f",
          "message": "Sending and applying target console configuration to Server",
          "committedDate": "2022-06-02T13:20:03Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9c15ac6352644cf9cbe424b090fcb9112ac46a7",
          "message": "AddPrefeConsoleColor CLI doc",
          "committedDate": "2022-06-03T12:51:08Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c2691b13d7e734359fbbccc5c759844648ffbe19",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-07T12:57:54Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "173060e286dab2cd0d850ff8c914d4b5fe9b7499",
          "message": "Update XLF",
          "committedDate": "2022-06-08T07:34:10Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc1a56e6f56ae81b6e844813a08fa948d045075e",
          "message": "Merge branch 'feature/msbuild-server' into rokonec/msbuildserver-console",
          "committedDate": "2022-06-08T08:22:06Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1bf7ff0a25c3fa2387894875c2c86a154881d41b",
          "message": "Temporary debug tracing to catch CI flaky test.",
          "committedDate": "2022-06-08T15:20:20Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cfd91992fd839dcd0a63e2869a06865ac2e2727b",
          "message": "Revert \"Temporary debug tracing to catch CI flaky test.\"\n\nThis reverts commit 1bf7ff0a25c3fa2387894875c2c86a154881d41b.",
          "committedDate": "2022-06-10T11:33:18Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ac3129c99a0c495b2d130fd886126f1631b44e6",
          "message": "Typo\n\nCo-authored-by: AR-May <67507805+AR-May@users.noreply.github.com>",
          "committedDate": "2022-06-20T08:44:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60179f8bfc42219edee6158e0ab29363f05decdc",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-20T08:49:48Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c9dff03b8faa8b9ab8077f73bbab7d3355dbd76",
          "message": "Merge branch 'feature/msbuild-server' into rokonec/msbuildserver-console\n\n# Conflicts:\n#\tsrc/Build/BackEnd/Node/OutOfProcServerNode.cs",
          "committedDate": "2022-06-20T09:31:02Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a8192faf2e8cde140a94a973dc94d5022892bbb",
          "message": "Encapsulate client console properties",
          "committedDate": "2022-06-20T14:45:26Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T11:35:24Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T11:35:33Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run\r\n",
        "createdAt": "2022-06-08T12:35:37Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T12:35:46Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T13:12:02Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T13:12:11Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T14:04:44Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T14:04:53Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T14:35:33Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T14:35:41Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run\r\n",
        "createdAt": "2022-06-08T16:28:53Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T16:29:02Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T17:58:08Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T17:58:16Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T18:59:16Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T18:59:25Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T19:26:39Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T19:26:46Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-08T20:52:10Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T20:52:20Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run\r\n",
        "createdAt": "2022-06-08T21:24:42Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T21:24:55Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run\r\n",
        "createdAt": "2022-06-08T21:57:38Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-08T21:57:47Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-09T07:33:14Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-09T07:33:24Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-06-16T07:33:17Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-06-16T07:33:26Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: why not just \r\n`public int ConsoleBufferWidth { get; }` & instantiating this,  instead of referencing a field in this property?",
              "createdAt": "2022-06-08T15:09:01Z",
              "path": "src/Build/BackEnd/Node/ServerNodeBuildCommand.cs",
              "diffHunk": "@@ -49,20 +52,50 @@ internal sealed class ServerNodeBuildCommand : INodePacket\n         /// </summary>\n         public CultureInfo UICulture => _uiCulture;\n \n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        public int ConsoleBufferWidth => _consoleBufferWidth;",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Unfortunately backing field is needed in this class as it is used for set/get in de/ser. \r\nSee method Translate",
              "createdAt": "2022-06-08T15:23:47Z",
              "path": "src/Build/BackEnd/Node/ServerNodeBuildCommand.cs",
              "diffHunk": "@@ -49,20 +52,50 @@ internal sealed class ServerNodeBuildCommand : INodePacket\n         /// </summary>\n         public CultureInfo UICulture => _uiCulture;\n \n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        public int ConsoleBufferWidth => _consoleBufferWidth;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "very minor: any value in validating .ctor params?\r\nAll new code params are value types, so no risk of nulls or things in BAD state.",
              "createdAt": "2022-06-08T15:10:21Z",
              "path": "src/Build/BackEnd/Node/ServerNodeBuildCommand.cs",
              "diffHunk": "@@ -49,20 +52,50 @@ internal sealed class ServerNodeBuildCommand : INodePacket\n         /// </summary>\n         public CultureInfo UICulture => _uiCulture;\n \n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        public int ConsoleBufferWidth => _consoleBufferWidth;\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        public bool ConsoleIsScreen => _consoleIsScreen;\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// </summary>\n+        public ConsoleColor ConsoleBackgroundColor => _consoleBackgroundColor;\n+\n         /// <summary>\n         /// Private constructor for deserialization\n         /// </summary>\n         private ServerNodeBuildCommand()\n         {\n         }\n \n-        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)\n+        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture,\n+            int consoleBufferWidth, bool acceptAnsiColorCodes, bool consoleIsScreen, ConsoleColor consoleBackgroundColor)\n         {\n             _commandLine = commandLine;\n             _startupDirectory = startupDirectory;\n             _buildProcessEnvironment = buildProcessEnvironment;\n             _culture = culture;\n             _uiCulture = uiCulture;\n+\n+            _consoleBufferWidth = consoleBufferWidth;\n+            _acceptAnsiColorCodes = acceptAnsiColorCodes;\n+            _consoleIsScreen = consoleIsScreen;\n+            _consoleBackgroundColor = consoleBackgroundColor;",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "I believe it would have negligible affect on code quality",
              "createdAt": "2022-06-14T18:38:22Z",
              "path": "src/Build/BackEnd/Node/ServerNodeBuildCommand.cs",
              "diffHunk": "@@ -49,20 +52,50 @@ internal sealed class ServerNodeBuildCommand : INodePacket\n         /// </summary>\n         public CultureInfo UICulture => _uiCulture;\n \n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        public int ConsoleBufferWidth => _consoleBufferWidth;\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        public bool AcceptAnsiColorCodes => _acceptAnsiColorCodes;\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        public bool ConsoleIsScreen => _consoleIsScreen;\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// </summary>\n+        public ConsoleColor ConsoleBackgroundColor => _consoleBackgroundColor;\n+\n         /// <summary>\n         /// Private constructor for deserialization\n         /// </summary>\n         private ServerNodeBuildCommand()\n         {\n         }\n \n-        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)\n+        public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture,\n+            int consoleBufferWidth, bool acceptAnsiColorCodes, bool consoleIsScreen, ConsoleColor consoleBackgroundColor)\n         {\n             _commandLine = commandLine;\n             _startupDirectory = startupDirectory;\n             _buildProcessEnvironment = buildProcessEnvironment;\n             _culture = culture;\n             _uiCulture = uiCulture;\n+\n+            _consoleBufferWidth = consoleBufferWidth;\n+            _acceptAnsiColorCodes = acceptAnsiColorCodes;\n+            _consoleIsScreen = consoleIsScreen;\n+            _consoleBackgroundColor = consoleBackgroundColor;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "one type per file",
              "createdAt": "2022-06-08T15:13:21Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "'one type per file' is not followed in MSBuild code base. I had been asked in different PR to join it into one file.\r\nWe would have to negotiate new coding standards used for new MSBuild code.",
              "createdAt": "2022-06-08T15:26:23Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "one type per file",
              "createdAt": "2022-06-08T15:13:37Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.\n+    /// </summary>\n+    internal class TargetConsoleConfiguration : IConsoleConfiguration",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "minor, could this be a struct if instances will be short lived?",
              "createdAt": "2022-06-08T15:14:14Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.\n+    /// </summary>\n+    internal class TargetConsoleConfiguration : IConsoleConfiguration",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "This is long lived instance with lifetime of one build.",
              "createdAt": "2022-06-08T15:34:55Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.\n+    /// </summary>\n+    internal class TargetConsoleConfiguration : IConsoleConfiguration",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "if you don't expect descendants, does it make sense to seal?",
              "createdAt": "2022-06-08T15:14:34Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.\n+    /// </summary>\n+    internal class TargetConsoleConfiguration : IConsoleConfiguration",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "In internal classed I believe in using seal only when, for some reason, deriving is prohibited or strongly discouraged.\r\nIn this particular class people might find value to derive from it and create for example `TargetConsoleConfigurationWithAdditonalProperty`.",
              "createdAt": "2022-06-08T15:33:45Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.\n+    /// </summary>\n+    internal class TargetConsoleConfiguration : IConsoleConfiguration",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    /// It is supposed to be Console from other process to which output from this process will be redirected.\r\n```",
              "createdAt": "2022-06-16T13:45:31Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1278,4 +1240,204 @@ private bool ApplyVerbosityParameter(string parameterValue)\n \n         #endregion\n     }\n+\n+    /// <summary>\n+    /// Console configuration needed for proper Console logging.\n+    /// </summary>\n+    internal interface IConsoleConfiguration\n+    {\n+        /// <summary>\n+        /// Buffer width of destination Console.\n+        /// Console loggers are supposed, on Windows OS, to be wrapping to avoid output trimming.\n+        /// -1 console buffer width can't be obtained.\n+        /// </summary>\n+        int BufferWidth { get; }\n+\n+        /// <summary>\n+        /// True if console output accept ANSI colors codes.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool AcceptAnsiColorCodes { get; }\n+\n+        /// <summary>\n+        /// True if console output is screen. It is expected that non screen output is post-processed and often does not need wrapping and coloring.\n+        /// False if output is redirected to non screen type such as file or nul.\n+        /// </summary>\n+        bool OutputIsScreen { get; }\n+\n+        /// <summary>\n+        /// Background color of client console, -1 if not detectable\n+        /// Some platforms do not allow getting current background color. There\n+        /// is not way to check, but not-supported exception is thrown. Assume\n+        /// black, but don't crash.\n+        /// </summary>\n+        ConsoleColor BackgroundColor { get; }\n+    }\n+\n+    /// <summary>\n+    /// Console configuration of target Console at which we will render output.\n+    /// It is supposed to be Console fromm other process to which output from this process will be redirected.",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Why not to have here `IConsoleConfiguration` or `TargetConsoleConfiguration` here instead of 4 different variables that anyway means the same?",
              "createdAt": "2022-06-16T15:38:47Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -77,6 +77,28 @@ public sealed class MSBuildClient\n         private int _numConsoleWritePackets;\n         private long _sizeOfConsoleWritePackets;\n \n+        /// <summary>\n+        /// Width of the Console output device or -1 if unknown.\n+        /// </summary>\n+        private int _consoleBufferWidth;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "After considering it all,  I will do this change.",
              "createdAt": "2022-06-20T14:34:04Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -77,6 +77,28 @@ public sealed class MSBuildClient\n         private int _numConsoleWritePackets;\n         private long _sizeOfConsoleWritePackets;\n \n+        /// <summary>\n+        /// Width of the Console output device or -1 if unknown.\n+        /// </summary>\n+        private int _consoleBufferWidth;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: How do you feel about separating this logic in another class?",
              "createdAt": "2022-06-16T15:43:24Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -220,13 +239,89 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can\n             return _exitResult;\n         }\n \n-        private void SupportVT100()\n+        private void ConfigureAndQueryConsoleProperties()",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Not a bad idea, but I will rather keep it as is.",
              "createdAt": "2022-06-20T14:52:30Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -220,13 +239,89 @@ public MSBuildClientExitResult Execute(string commandLine, CancellationToken can\n             return _exitResult;\n         }\n \n-        private void SupportVT100()\n+        private void ConfigureAndQueryConsoleProperties()",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nice!",
              "createdAt": "2022-06-16T16:00:29Z",
              "path": "src/Build/BackEnd/Node/OutOfProcServerNode.cs",
              "diffHunk": "@@ -320,13 +321,34 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)\n                 return;\n             }\n \n-            // set build process context\n+            // Set build process context\n             Directory.SetCurrentDirectory(command.StartupDirectory);\n             CommunicationsUtilities.SetEnvironment(command.BuildProcessEnvironment);\n             Thread.CurrentThread.CurrentCulture = command.Culture;\n             Thread.CurrentThread.CurrentUICulture = command.UICulture;\n \n-            // configure console output redirection\n+            // Configure console configuration so Loggers can change their behavior based on Target (client) Console properties.\n+            ConsoleConfiguration.Provider = new TargetConsoleConfiguration(command.ConsoleBufferWidth, command.AcceptAnsiColorCodes, command.ConsoleIsScreen, command.ConsoleBackgroundColor);\n+\n+            // Also try our best to increase chance custom Loggers which use Console static members will work as expected.",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}