{
  "number": 9621,
  "title": "Log SDK resolution result",
  "body": "Fixes #9413\r\n\r\n### Context\r\nWe currently log [when we are starting to resolve SDK](https://github.com/dotnet/msbuild/blob/9a0cef6f75bf13ffbbde956b8f7d7ad7d6e0d996/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs#L315) and [when we failed to resolve SDK](https://github.com/dotnet/msbuild/blob/9a0cef6f75bf13ffbbde956b8f7d7ad7d6e0d996/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs#L134) but not when we succeeded or any resolvers' attempts.\r\n\r\nCurrently we log:\r\n- If any of the resolvers succeeded, we log warnings only from its result\r\n- If all the resolvers fail, we accumulate the warnings and errors from each of them. In the end, depending on the log flag, we either log one error containing all the errors or do not to log any errors, while logging all warnings.\r\n\r\n### Changes Made\r\n1. Log each resolver's  unsuccessful attempt with its warnings and errors as a message\r\n2. Log success message when SDK is resolved by the resolver\r\n3. Remove \"Resolving SDK ...\" message as it doesn't give us much\r\n\r\n### Testing\r\nUnit tests + manual \r\n\r\n### Notes\r\nExample of new log output:\r\n![Screenshot 2024-01-11 170404](https://github.com/dotnet/msbuild/assets/114938397/704484e7-bc07-4513-8a02-edb3f967b9b7)\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-10T12:35:17Z",
  "updatedAt": "2024-01-12T14:32:00Z",
  "closedAt": "2024-01-12T14:31:55Z",
  "mergedAt": "2024-01-12T14:31:55Z",
  "additions": 243,
  "deletions": 100,
  "changedFiles": 16,
  "headRefName": "log-sdk-resolution-result",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cb088ac8ae339a23aa621a67df4572331c8763c0",
          "message": "log success message when sdk is resolved",
          "committedDate": "2024-01-10T12:19:50Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b8fab1d9fb94bbf39e87848fa48a86d4cddf38b8",
          "message": "fix typo",
          "committedDate": "2024-01-10T12:30:11Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efbec2a32b64020fc71e41eded6f170488ec7449",
          "message": "change message text",
          "committedDate": "2024-01-10T12:33:31Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7dd051143f92d0a1ac9c8837bdc9fa3f96ec2c3d",
          "message": "include sdk result and sdk resolver info in the message",
          "committedDate": "2024-01-10T14:28:12Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "04da0af19fe146465eac8152bb890256d3722e9d",
          "message": "1. remove SdkResolving log\n2. log each SDK resolver attempt + errors and warnings as message\n3. rephrese the success message",
          "committedDate": "2024-01-11T15:54:27Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85388448ea35c9a8b49105fafae29b5ad6025f4c",
          "message": "Merge branch 'main' into log-sdk-resolution-result",
          "committedDate": "2024-01-12T09:30:25Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c938d3ce37ad87ac6cb13b5a7d451e2bc22a28b0",
          "message": "include \"Warnings\" and \"Errors\" in the message so they could be translated",
          "committedDate": "2024-01-12T10:01:02Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e152a54e4b552c5b0ad2d3752b2276e91a9a5a43",
          "message": "add back the line",
          "committedDate": "2024-01-12T10:10:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9597569ca394cee2ae85f37d5829ddc574e94221",
          "message": "add localization comment and fix typo",
          "committedDate": "2024-01-12T11:36:49Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c42fa93fac32bc42dc9d631d840696e8b476f97",
          "message": "update localization strings",
          "committedDate": "2024-01-12T11:53:39Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "370c663d8f57ea0348988d6f79f0d53be0821e7a",
          "message": "Update src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs\n\nCo-authored-by: Ladi Prosek <ladi.prosek@gmail.com>",
          "committedDate": "2024-01-12T13:29:02Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I didn't include the SDK resolver info that resolved the SDK in the success message since we don't mention it in the failure message. Let me know if you think we should log anything else.",
        "createdAt": "2024-01-10T12:38:50Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "I am still trying to figure out how useful would be to log particular SDK resolvers outcome so user UX would be:\r\n\r\n```\r\n- Resolving SDK net8.1\r\n  - DefaultSDK resolver: Can't find SDK on path C:\\VS\\Current\\SDK\\8.1\r\n  - DevSDK resolver: Env variable PICK_ME_PICK_ME_I_AM_THE_BEST_SDK is not set\r\n  - Nuget SDK resolver: Selected SDK from downloaded JozoMrkvicka.SDKs.TrueSDK-8.1 nuget\r\n- SDK 8.1 resolved to C:\\NugetCache\\JozoMrkvicka.SDKs.TrueSDK\\8.1\r\n```\r\n\r\nas oppose to \r\n\r\n```\r\n- Resolving SDK net8.1\r\n- SDK 8.1 resolved to C:\\NugetCache\\JozoMrkvicka.SDKs.TrueSDK\\8.1\r\n```\r\n\r\nwith reasoning that when user investigate why it stopped resolving when it just worked fine so far he could see the differences and details.\r\n\r\n@rainersigwald  @baronfel what is your take at this?\r\n\r\n",
        "createdAt": "2024-01-10T14:57:59Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Agree \ud83d\udcaf @rokonec - getting all results could be very helpful. ",
        "createdAt": "2024-01-10T14:58:50Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> If resolution fails, warnings and errors will now be logged twice - as low-important messages and as actual warnings and errors by pre-existing code. I may be splitting hair but I think ideally they would appear in the log exactly once. It is also somewhat inconsistent that the existing logic uses individual log events and the new one string-joins all warnings into one message.\r\n> \r\n\r\nYes, warnings and errors will now be logged twice - as low-important messages and as actual warnings and errors in case when all resolvers failed. I don't like the duplication too. I opted for this approach because we aim to preserve timestamps for each resolver's attempt. The current logic is that in case of resolver succeeded then we want to see only warnings coming from its result and don't want to see other resolvers' warnings. That is why I log them as joined warnings in low-importance message and not as warnings.\r\n\r\nAlternatively, we could log warnings and errors for each resolver in a single low-importance message before resolution succeeds. In this way, if the resolution fails, we would only see the warnings and errors at the end, a per the current behavior. However, we would lose the timestamps of each resolver's attempt, as opposed to the original change.\r\nWhat do you think @ladipro, @rokonec ?",
        "createdAt": "2024-01-12T11:31:03Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2024-01-12T11:43:25Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "<samp>\nCommenter does not have sufficient privileges for PR 9621 in repo dotnet/msbuild<br>\r\n\n</samp>",
        "createdAt": "2024-01-12T11:43:31Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> However, we would lose the timestamps of each resolver's attempt, as opposed to the original change.\r\n> What do you think @ladipro, @rokonec ?\r\n\r\nI like it the way it is now. i.e.:\r\n1) low priority messages for each resolver, visible only in /bl and detailed verbosity\r\n2) if it failed summarize high importance error visible with almost every verbosity which will repeat all from 1)\r\n3) if if succeed just show the final outcome and customer can find details in 1)\r\n\r\nI believe it will deliver customers clear intuitive UX. In this particular case I don't mind duplication as I believe it is better UX with it than without it. It can be optimized to not show 1) when 2) but I prefer consistency of logging in both success and failure path.",
        "createdAt": "2024-01-12T11:47:26Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe the log line should include information from the `result` as it may not be obvious how exactly it was resolved given the `sdk` (the request).",
              "createdAt": "2024-01-10T12:43:47Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -355,6 +355,8 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n \n                 if (result.Success)\n                 {\n+                    loggingContext.LogComment(MessageImportance.Low, \"SucceededToResolveSDK\", sdk.ToString());",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done. I included info on the sdk resolver that resolved the sdk and some info on the result. These properties are asserted in the tests, that is why I included them in the message: `Success` (the message already says that it is a success), `SdkReference` (the resolved sdk in the message), `Warnings` (are logged after the success message), `Path` and `Version`(added in the message).\r\nLet me know if you think I should log anything else from result",
              "createdAt": "2024-01-10T14:33:29Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -355,6 +355,8 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n \n                 if (result.Success)\n                 {\n+                    loggingContext.LogComment(MessageImportance.Low, \"SucceededToResolveSDK\", sdk.ToString());",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Message wording nitpick: what about something like\r\n\r\n```\r\nThe SDK \"{0}\" was successfully resolved by the \"{1}\" resolver to location \"{2}\" and version \"{3}\".\r\n```\r\n\r\nOther than that, love to see this!",
              "createdAt": "2024-01-10T14:57:10Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1324,6 +1324,9 @@\n     <value>Could not resolve SDK \"{0}\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\n   {1}</value>\n   </data>\n+  <data name=\"SucceededToResolveSDK\" xml:space=\"preserve\">\n+    <value>The SDK \"{0}\" was successfully resolved by the SDK resolver \"{1}\". SDK Result: \"Path : {2}, Version : {3}\"</value>",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Thank you for the PR! I was thinking about those verifications of logger and thought maybe we can simply introduce the test that verifies that the message is actually logged in success path and not otherwise , to keep the tests in mode \"signle responsiblity\" depending on what test actually checks, what do you think? ",
              "createdAt": "2024-01-10T15:55:30Z",
              "path": "src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs",
              "diffHunk": "@@ -196,6 +201,7 @@ public void AssertFirstResolverErrorsSupressedWhenResolved()\n             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation(\"file\"), \"sln\", \"projectPath\", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);\n \n             result.Path.ShouldBe(\"resolverpath2\");\n+            _logger.BuildMessageEvents.Any(i => i.Message.StartsWith($\"The SDK \\\"{sdk}\\\" was successfully resolved\")).ShouldBeTrue();",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Thanks! Done.",
              "createdAt": "2024-01-11T15:55:36Z",
              "path": "src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs",
              "diffHunk": "@@ -196,6 +201,7 @@ public void AssertFirstResolverErrorsSupressedWhenResolved()\n             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation(\"file\"), \"sln\", \"projectPath\", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);\n \n             result.Path.ShouldBe(\"resolverpath2\");\n+            _logger.BuildMessageEvents.Any(i => i.Message.StartsWith($\"The SDK \\\"{sdk}\\\" was successfully resolved\")).ShouldBeTrue();",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`Warnings` and `Errors` needs to be localizable even for low priority messages.",
              "createdAt": "2024-01-12T09:17:37Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -369,6 +369,13 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n                     sdkResult = result;\n                     return true;\n                 }\n+                else\n+                {\n+                    string resultWarningsAndErrors = (result.Warnings?.Any() == true ? \"\\nWarnings:\\n\" + string.Join(\"\\n\", result.Warnings) : string.Empty)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thanks!\r\nI included `Warnings` and `Errors` in the message so they can be translated. Example of a new message: \r\n```\r\nThe \"SdkResolver\" resolver attempted to resolve the SDK \"SDK\".\r\nWarnings: null\r\nErrors: Error1\r\nError2\r\n```",
              "createdAt": "2024-01-12T10:07:46Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -369,6 +369,13 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n                     sdkResult = result;\n                     return true;\n                 }\n+                else\n+                {\n+                    string resultWarningsAndErrors = (result.Warnings?.Any() == true ? \"\\nWarnings:\\n\" + string.Join(\"\\n\", result.Warnings) : string.Empty)",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please do use `{Environment.NewLine}` instead of \\n in `string.join`",
              "createdAt": "2024-01-12T09:24:54Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -369,6 +369,13 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n                     sdkResult = result;\n                     return true;\n                 }\n+                else\n+                {\n+                    string resultWarningsAndErrors = (result.Warnings?.Any() == true ? \"\\nWarnings:\\n\" + string.Join(\"\\n\", result.Warnings) : string.Empty)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Here it is not obvious what {2} is. Localization team might need to know. Please include loc hints like for example:\r\n``` XML\r\n    <comment>\r\n      LOCALIZATION: \"{2}\" is new line separated errors and warnings or empty if no errors or warnings.\r\n    </comment>\r\n```",
              "createdAt": "2024-01-12T09:29:44Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1324,6 +1324,12 @@\n     <value>Could not resolve SDK \"{0}\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\n   {1}</value>\n   </data>\n+  <data name=\"SucceededToResolveSDK\" xml:space=\"preserve\">\n+    <value>The SDK \"{0}\" was successfully resolved by the \"{1}\" resolver to location \"{2}\" and version \"{3}\".</value>\n+  </data>\n+  <data name=\"SDKResolverAttempt\" xml:space=\"preserve\">\n+    <value>The \"{0}\" resolver attempted to resolve the SDK \"{1}\". {2}</value>",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo \"attemopted\"",
              "createdAt": "2024-01-12T10:16:57Z",
              "path": "src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs",
              "diffHunk": "@@ -184,6 +183,21 @@ public void AssertFirstResolverWithPatternCanResolve()\n             _logger.BuildMessageEvents.Select(i => i.Message).ShouldNotContain(\"MockSdkResolver1 running\");\n         }\n \n+        [Fact]\n+        public void AssertSdkResolutionMessagesAreLogged()\n+        {\n+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());\n+            SdkReference sdk = new SdkReference(\"1sdkName\", \"referencedVersion\", \"minimumVersion\");\n+\n+            var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation(\"file\"), \"sln\", \"projectPath\", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);\n+\n+            // First resolver attemopted to resolve, but failed.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: It would probably be safer to include the comment `LOCALIZATION:  Do not localize the word SDK.` here, just like the existing strings.",
              "createdAt": "2024-01-12T10:24:59Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1324,6 +1324,17 @@\n     <value>Could not resolve SDK \"{0}\". Exactly one of the probing messages below indicates why we could not resolve the SDK. Investigate and resolve that message to correctly specify the SDK.\n   {1}</value>\n   </data>\n+  <data name=\"SucceededToResolveSDK\" xml:space=\"preserve\">\n+    <value>The SDK \"{0}\" was successfully resolved by the \"{1}\" resolver to location \"{2}\" and version \"{3}\".</value>\n+  </data>\n+  <data name=\"SDKResolverAttempt\" xml:space=\"preserve\">\n+    <value>The \"{0}\" resolver attempted to resolve the SDK \"{1}\".\n+Warnings: {2}\n+Errors: {3}</value>\n+    <comment>\n+      LOCALIZATION: \"{2}\" is new line separated warnings or \"null\". \"{3}\" is new line separated errors or \"null\".\n+    </comment>\n+  </data>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Very minor suggestion:\r\n\r\n```suggestion\r\n                else if (loggingContext.LoggingService.MinimumRequiredMessageImportance >= MessageImportance.Low)\r\n```\r\n\r\nto avoid the string allocations if there is no logger consuming low-importance messages.",
              "createdAt": "2024-01-12T12:39:07Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -369,6 +369,13 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk\n                     sdkResult = result;\n                     return true;\n                 }\n+                else",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}