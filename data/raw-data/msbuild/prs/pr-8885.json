{
  "number": 8885,
  "title": "Removing sln level turn off of setplatform feature",
  "body": "### Summary\r\n\r\nAllow dynamic platform resolution for projects not mentioned in a solution.\r\n\r\n### Customer Impact\r\n\r\nEnables adoption of dynamic platform resolution for dev-desktop scenarios in a large internal repo.\r\n\r\n### Regression?\r\n\r\nNo.\r\n\r\n### Testing\r\n\r\nThis was tested in the VS repo on the VC sln which covers lots of scenarios\r\n\r\n### Risk\r\n\r\nLow--feature has low adoption because of sticking points like this, so blast radius of regression is low.\r\n\r\n## Details\r\n\r\n### Context\r\n\r\nCurrently we turn off dynamic platform resolution for a whole solution if a single project in the solution is assigned a configuration. This is problematic as some projects are outside of the scope of the solution but still have certain targets that run on them that are architecture specific. These projects will build as the wrong architecture because no configuration is defined and no platform negotiation takes place.\r\n\r\n### Changes Made\r\nI removed the conditional that turns platform negotiation off on a sln level. The logic to turn this off on a project level is already in place through checking is a projectreference has setplatform appended to it. This will make sure no projects with configurations defined will be negotiated for as MSbuild ads setplatform metadata to projectreferences with configurations.\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-14T20:46:44Z",
  "updatedAt": "2023-07-12T21:26:20Z",
  "closedAt": "2023-07-12T21:26:20Z",
  "mergedAt": "2023-07-12T21:26:20Z",
  "additions": 110,
  "deletions": 5,
  "changedFiles": 3,
  "headRefName": "dev/michaelshea/sln",
  "isDraft": false,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-consider"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "657005a80eabcbdd9b96f307f2f746861702a69b",
          "message": "Removing sln level turn off of setplatform feature\n\nCurrently we turn off dynamic platform resolution for a whole solution\nif a single project in the solution is assigned a configuration. This is\nproblematic as some projects are outside of the scope of the solution\nbut still have certain targets that run on them that are architecture\nspecific. These projects will build as the wrong architecture because no\nconfiguration is defined and no platform negotiation takes place.\n\nI removed the conditional that turns platform negotiation off on a sln\nlevel. The logic to turn this off on a project level is already in place\nthrough checking is a projectreference has setplatform appended to it.\nThis will make sure no projects with configurations defined will be\nnegotiated for as MSbuild adds setplatform metadata to projectreferences\nwith configurations.",
          "committedDate": "2023-07-12T18:55:00Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you please add a test covering this?",
        "createdAt": "2023-06-20T18:09:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Also, what's the impact on graph + platform negotiation?",
        "createdAt": "2023-06-20T18:11:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Can you please add a test covering this?\r\n\r\nBy this do you mean automation? or a description of the testing we went through in order to validate this change",
        "createdAt": "2023-06-26T18:00:59Z",
        "author": {
          "login": "MIchaelRShea"
        }
      },
      {
        "body": "I'd prefer an automated test in this repo, yeah. If there aren't any end-to-end tests for this feature area maybe only the graph stuff gets tested.",
        "createdAt": "2023-06-26T18:09:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: consider a variable for `Porject1`\r\nThat way the value would only have to be maintained in a single place.",
              "createdAt": "2023-06-28T15:10:45Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder Project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "This is a good idea that we should consider applying more broadly--as is it mostly fits the pattern of the existing tests.",
              "createdAt": "2023-06-28T15:20:13Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder Project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "changed the project names to variables",
              "createdAt": "2023-07-06T15:14:26Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder Project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: consider resources or test assets for these various template-like content. Currently, anyone could accidently break the format.",
              "createdAt": "2023-06-28T15:12:25Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder Project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFolder Project1SubFolder = testEnvironment.CreateFolder(Path.Combine(Project1Folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFile Project1 = testEnvironment.CreateFile(Project1SubFolder, \"Project1.csproj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                             <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                             <Platform>x64</Platform>\n+                         </PropertyGroup>\n+                         <ItemGroup>\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project2\\Project2\\2.proj\"\" />\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project3\\Project3\\3.proj\"\" />\n+                         </ItemGroup>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder Project2Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFolder Project2SubFolder = testEnvironment.CreateFolder(Path.Combine(Project2Folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFile Project2 = testEnvironment.CreateFile(Project2SubFolder, \"2.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+                TransientTestFolder Project3Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFolder Project3SubFolder = testEnvironment.CreateFolder(Path.Combine(Project3Folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFile Project3 = testEnvironment.CreateFile(Project3SubFolder, \"3.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(folder, \"SimpleProject.sln\",\n+                    @\"",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "We don't have good infrastructure for this today. Many test assets are hardcoded, but many need string interpolation at runtime, and the main way all of our tests work is in this style. IMO we should fairly aggressively switch to [raw string literals](https://learn.microsoft.com/dotnet/csharp/programming-guide/strings/#raw-string-literals) and consider a better static-test-asset strategy. But you don't have to do that now, @MIchaelRShea.",
              "createdAt": "2023-06-28T15:24:01Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder Project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFolder Project1SubFolder = testEnvironment.CreateFolder(Path.Combine(Project1Folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFile Project1 = testEnvironment.CreateFile(Project1SubFolder, \"Project1.csproj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                             <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                             <Platform>x64</Platform>\n+                         </PropertyGroup>\n+                         <ItemGroup>\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project2\\Project2\\2.proj\"\" />\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project3\\Project3\\3.proj\"\" />\n+                         </ItemGroup>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder Project2Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFolder Project2SubFolder = testEnvironment.CreateFolder(Path.Combine(Project2Folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFile Project2 = testEnvironment.CreateFile(Project2SubFolder, \"2.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+                TransientTestFolder Project3Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFolder Project3SubFolder = testEnvironment.CreateFolder(Path.Combine(Project3Folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFile Project3 = testEnvironment.CreateFile(Project3SubFolder, \"3.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(folder, \"SimpleProject.sln\",\n+                    @\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // Note: Dynamic platform resolution is not enabled for sln-based builds,\r\n                // unless the project isn't known to the solution.\r\n```",
              "createdAt": "2023-06-28T15:29:24Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -161,11 +164,15 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             referenceGlobalProperties.Remove(ConfigurationMetadataName);\n                             referenceGlobalProperties.Remove(PlatformMetadataName);\n                         }\n+                        else\n+                        {\n+                            ConfigurationDefined = true;\n+                        }\n                     }\n                 }\n \n                 // Note: Dynamic platform resolution is not enabled for sln-based builds.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "extreme nit: prefer the cheapest and most likely to fail checks in short-circuiting comparisons. Here there are a couple of bools which cost nothing to check, and a method call which is comparatively more expensive. It's not a very expensive method so this doesn't change much, but it's an easy refactor:\r\n\r\n```suggestion\r\n                if (enableDynamicPlatformResolution && !configurationDefined && !projectReferenceItem.HasMetadata(SetPlatformMetadataName))\r\n```",
              "createdAt": "2023-06-28T15:34:47Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -161,11 +165,15 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             referenceGlobalProperties.Remove(ConfigurationMetadataName);\n                             referenceGlobalProperties.Remove(PlatformMetadataName);\n                         }\n+                        else\n+                        {\n+                            configurationDefined = true;\n+                        }\n                     }\n                 }\n \n                 // Note: Dynamic platform resolution is not enabled for sln-based builds.\n-                else if (!projectReferenceItem.HasMetadata(SetPlatformMetadataName) && enableDynamicPlatformResolution)\n+                if (!projectReferenceItem.HasMetadata(SetPlatformMetadataName) && enableDynamicPlatformResolution && !configurationDefined)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "commited this change",
              "createdAt": "2023-06-28T15:49:47Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -161,11 +165,15 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                             referenceGlobalProperties.Remove(ConfigurationMetadataName);\n                             referenceGlobalProperties.Remove(PlatformMetadataName);\n                         }\n+                        else\n+                        {\n+                            configurationDefined = true;\n+                        }\n                     }\n                 }\n \n                 // Note: Dynamic platform resolution is not enabled for sln-based builds.\n-                else if (!projectReferenceItem.HasMetadata(SetPlatformMetadataName) && enableDynamicPlatformResolution)\n+                if (!projectReferenceItem.HasMetadata(SetPlatformMetadataName) && enableDynamicPlatformResolution && !configurationDefined)",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these explanations I added correct @MIchaelRShea?",
              "createdAt": "2023-06-28T15:35:51Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,99 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder project1Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFolder project1SubFolder = testEnvironment.CreateFolder(Path.Combine(project1Folder.Path, \"Project1\"), createFolder: true);\n+                TransientTestFile project1 = testEnvironment.CreateFile(project1SubFolder, \"Project1.csproj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                             <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                             <Platform>x64</Platform>\n+                         </PropertyGroup>\n+                         <ItemGroup>\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project2\\Project2\\2.proj\"\" />\n+                             <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)\\..\\..\\Project3\\Project3\\3.proj\"\" />\n+                         </ItemGroup>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder project2Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFolder project2SubFolder = testEnvironment.CreateFolder(Path.Combine(project2Folder.Path, \"Project2\"), createFolder: true);\n+                TransientTestFile project2 = testEnvironment.CreateFile(project2SubFolder, \"2.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+                TransientTestFolder project3Folder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFolder project3SubFolder = testEnvironment.CreateFolder(Path.Combine(project3Folder.Path, \"Project3\"), createFolder: true);\n+                TransientTestFile project3 = testEnvironment.CreateFile(project3SubFolder, \"3.proj\",\n+                    @\"<Project>\n+                        <PropertyGroup>\n+                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                            <Platforms>AnyCPU;x64</Platforms>\n+                        </PropertyGroup>\n+                    </Project>\n+                    \");\n+\n+\n+                // Slashes here (and in the .slnf) are hardcoded as backslashes intentionally to support the common case.\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(folder, \"SimpleProject.sln\",\n+                    @\"\n+                    Microsoft Visual Studio Solution File, Format Version 12.00\n+                    # Visual Studio Version 16\n+                    VisualStudioVersion = 16.0.29326.124\n+                    MinimumVisualStudioVersion = 10.0.40219.1\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"Project1\"\", \"\"Project1\\Project1\\Project1.csproj\"\", \"\"{79B5EBA6-5D27-4976-BC31-14422245A59A}\"\"\n+                    EndProject\n+                    Project(\"\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\"\") = \"\"2\"\", \"\"Project2\\Project2\\2.proj\"\", \"\"{8EFCCA22-9D51-4268-90F7-A595E11FCB2D}\"\"\n+                    EndProject\n+                    Global\n+                        GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                            Debug|x64 = Debug|x64\n+                            Release|x64 = Release|x64\n+                            EndGlobalSection\n+                        GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|x64.ActiveCfg = Debug|x64\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Debug|x64.Build.0 = Debug|x64\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|x64.ActiveCfg = Release|x64\n+                            {79B5EBA6-5D27-4976-BC31-14422245A59A}.Release|x64.Build.0 = Release|x64\n+\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|x64.ActiveCfg = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Debug|x64.Build.0 = Debug|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|x64.ActiveCfg = Release|Any CPU\n+                            {8EFCCA22-9D51-4268-90F7-A595E11FCB2D}.Release|x64.Build.0 = Release|Any CPU\n+                        EndGlobalSection\n+                        GlobalSection(SolutionProperties) = preSolution\n+                            HideSolutionNode = FALSE\n+                        EndGlobalSection\n+                        GlobalSection(ExtensibilityGlobals) = postSolution\n+                            SolutionGuid = {DE7234EC-0C4D-4070-B66A-DCF1B4F0CFEF}\n+                        EndGlobalSection\n+                    EndGlobal\n+                \");\n+\n+                ProjectCollection projectCollection = testEnvironment.CreateProjectCollection().Collection;\n+                MockLogger logger = new();\n+                projectCollection.RegisterLogger(logger);\n+                ProjectGraphEntryPoint entryPoint = new(solutionFile.Path, new Dictionary<string, string>());\n+\n+                // We want to make sure negotiation respects configuration if defined but negotiates if not.\n+                ProjectGraph graphFromSolution = new(entryPoint, projectCollection);\n+                logger.AssertNoErrors();\n+                GetFirstNodeWithProjectNumber(graphFromSolution, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(\"AnyCPU\", \"Project2 should have followed the sln config to AnyCPU\");\n+                GetFirstNodeWithProjectNumber(graphFromSolution, 3).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(\"x64\", \"Project3 isn't in the solution so it should have negotiated to x64 to match Project1\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super nit: `Sln` or even better `SolutionFile`",
              "createdAt": "2023-07-07T08:22:00Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -351,5 +351,102 @@ public void PlatformIsChosenAsDefault()\n                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GetPropertyValue(\"Platform\").ShouldBe(GetFirstNodeWithProjectNumber(graph, 1).ProjectInstance.GetPropertyValue(\"Platform\"));\n             }\n         }\n+\n+        // Validate configurations are defined in project reference protocol\n+        [Fact]\n+        public void SLNWithoutAllConfigurations()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}