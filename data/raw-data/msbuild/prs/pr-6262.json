{
  "number": 6262,
  "title": "Exp/serializable projectevaluation",
  "body": "Fixes #6260\r\n\r\n### Context\r\nThe evaluation result is being cached now on the CPS side to speed up solution load. For the cases where CPS has it's linked read-only Project, we would like to create a ProjectInstance as well from it, instead of triggering a evaluation for the sake of creating a ProjectInstance\r\n\r\n### Changes Made\r\n- Add a constructor to ProjectInstance that builds itself from the Project.\r\n- Also exposed the existing GetAllGlobs override to ProjectLink. Previously never exposed since ProjectLink was used only for csproj that does not really care about globs.\r\n\r\n### Testing\r\nAdded a test for the new constructor.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-03-16T00:59:02Z",
  "updatedAt": "2021-04-15T14:09:53Z",
  "closedAt": "2021-03-23T15:40:48Z",
  "mergedAt": "2021-03-23T15:40:48Z",
  "additions": 170,
  "deletions": 46,
  "changedFiles": 7,
  "headRefName": "exp/serializable-projectevaluation",
  "isDraft": false,
  "author": null,
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "425abc4aff94a9cee5d3efc7e531c9f48257b920",
          "message": "Serializable project evaluation related changes",
          "committedDate": "2021-03-15T18:30:48Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c832a2a32844bca8e77cc7c919575975028ef60f",
          "message": "Fix up test load settings",
          "committedDate": "2021-03-15T23:47:01Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4aa2186157427d5cb1cd560de79b910f8e6cfd78",
          "message": "Merge branch 'main' into exp/serializable-projectevaluation",
          "committedDate": "2021-03-17T23:06:06Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d56ce90e25b3b91bc9af2401b07c8afa2facd1f7",
          "message": "Additional bug fixes",
          "committedDate": "2021-03-17T23:11:51Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c7c20f1604ab2118211c70ca605c7c79a0aedfb",
          "message": "Comment and fix typo",
          "committedDate": "2021-03-19T19:56:10Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `itemTypeCount` (capital C).",
              "createdAt": "2021-03-19T13:10:00Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2797,34 +2855,30 @@ private void CreateGlobalPropertiesSnapshot(Evaluation.Project.Data data)\n         /// <summary>\n         /// Create evaluated include cache snapshot\n         /// </summary>\n-        private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache, Evaluation.Project.Data data, Dictionary<ProjectItem, ProjectItemInstance> projectItemToInstanceMap)\n+        private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache, ICollection<ProjectItem> items, Dictionary<ProjectItem, ProjectItemInstance> projectItemToInstanceMap)\n         {\n             if (!keepEvaluationCache)\n             {\n                 return;\n             }\n \n             _itemsByEvaluatedInclude = new MultiDictionary<string, ProjectItemInstance>(StringComparer.OrdinalIgnoreCase);\n-            foreach (var key in data.ItemsByEvaluatedIncludeCache.Keys)\n+            foreach (var item in items)\n             {\n-                var projectItems = data.ItemsByEvaluatedIncludeCache[key];\n-                foreach (var projectItem in projectItems)\n-                {\n-                    _itemsByEvaluatedInclude.Add(key, projectItemToInstanceMap[projectItem]);\n-                }\n+                _itemsByEvaluatedInclude.Add(item.EvaluatedInclude, projectItemToInstanceMap[item]);\n             }\n         }\n \n         /// <summary>\n         /// Create Items snapshot\n         /// </summary>\n-        private Dictionary<ProjectItem, ProjectItemInstance> CreateItemsSnapshot(Evaluation.Project.Data data, bool keepEvaluationCache)\n+        private Dictionary<ProjectItem, ProjectItemInstance> CreateItemsSnapshot(ICollection<ProjectItem> items, int itemTypecount, bool keepEvaluationCache)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you please add a comment to these changes? It's not clear why the fallback to `item.EvaluatedInclude` is needed.",
              "createdAt": "2021-03-19T13:13:40Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2852,7 +2906,12 @@ private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache,\n                     }\n                 }\n \n-                ProjectItemInstance instance = new ProjectItemInstance(this, item.ItemType, ((IItem)item).EvaluatedIncludeEscaped, item.EvaluatedIncludeBeforeWildcardExpansionEscaped, directMetadata, inheritedItemDefinitions, item.Xml.ContainingProject.EscapedFullPath);\n+                var evaluatedIncludeEscaped = ((IItem)item).EvaluatedIncludeEscaped;\n+                evaluatedIncludeEscaped ??= item.EvaluatedInclude;\n+                var evaluatedIncludeBeforeWildcardExpansionEscaped = item.EvaluatedIncludeBeforeWildcardExpansionEscaped;\n+                evaluatedIncludeBeforeWildcardExpansionEscaped ??= item.EvaluatedInclude;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Added. It's for external ProjectLink based support.",
              "createdAt": "2021-03-19T19:57:45Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2852,7 +2906,12 @@ private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache,\n                     }\n                 }\n \n-                ProjectItemInstance instance = new ProjectItemInstance(this, item.ItemType, ((IItem)item).EvaluatedIncludeEscaped, item.EvaluatedIncludeBeforeWildcardExpansionEscaped, directMetadata, inheritedItemDefinitions, item.Xml.ContainingProject.EscapedFullPath);\n+                var evaluatedIncludeEscaped = ((IItem)item).EvaluatedIncludeEscaped;\n+                evaluatedIncludeEscaped ??= item.EvaluatedInclude;\n+                var evaluatedIncludeBeforeWildcardExpansionEscaped = item.EvaluatedIncludeBeforeWildcardExpansionEscaped;\n+                evaluatedIncludeBeforeWildcardExpansionEscaped ??= item.EvaluatedInclude;",
              "author": {
                "login": "arunchndr"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How is this different from the other [ProjectInstance(Evaluation.Project.Data)](https://github.com/dotnet/msbuild/blob/97463e3cdb3ce4ccf9638eb68fd9f82646ca6a11/src/Build/Instance/ProjectInstance.cs#L451) constructor which is called from [Project.CreateProjectInstance](https://github.com/dotnet/msbuild/blob/97463e3cdb3ce4ccf9638eb68fd9f82646ca6a11/src/Build/Definition/Project.cs#L1333)? They seem the same to me, so I'd rather not add this additional constructor (unless I'm missing something).\r\n\r\n",
              "createdAt": "2021-03-19T18:45:51Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -326,6 +326,59 @@ public ProjectInstance(ProjectRootElement xml, IDictionary<string, string> globa\n         {\n         }\n \n+        /// <summary>\n+        /// Creates a ProjectInstance from an external created <see cref=\"Project\"/>.\n+        /// Properties and items are cloned immediately and only the instance data is stored.\n+        /// </summary>\n+        public ProjectInstance(Project project, ProjectInstanceSettings settings)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "The intent of this new public constructor is that it `/// Creates a ProjectInstance from an external created <see cref=\"Project\"/>.`\r\n\r\n`Data` and the `Data `based constructor are both internal. Going that route would mean exposing the internal implementation detail that is `Data` and making it a linkable object that the client has to construct their external Project around and pass that in for this purpose. ",
              "createdAt": "2021-03-19T19:51:05Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -326,6 +326,59 @@ public ProjectInstance(ProjectRootElement xml, IDictionary<string, string> globa\n         {\n         }\n \n+        /// <summary>\n+        /// Creates a ProjectInstance from an external created <see cref=\"Project\"/>.\n+        /// Properties and items are cloned immediately and only the instance data is stored.\n+        /// </summary>\n+        public ProjectInstance(Project project, ProjectInstanceSettings settings)",
              "author": {
                "login": "arunchndr"
              }
            },
            {
              "body": "Ah, okay, let me rephrase it to ensure that I got it right: your scenario is to create a `ProjectInstance` object residing in Process_1 based on a `Project` object residing in Process_2. You want to avoid marshaling the `Project.Data` object from Process_2 to Process_1 and instead have the `ProjectInstance` constructor from Process_1 do remote calls for each `Project` data field (one \"rpc\" call for properties, one for items, one for targets, etc).\r\n\r\nYea, in this case reading the data directly from the remote Project object is more straighforward than manually coding up a stub/proxy for `Project.Data` as well. Assuming the two processes always reside on the same machine, otherwise the rpc overhead might make it worth it to serialize the entire Project.Data over one rpc call.\r\n\r\nHowever, I'd just delete the old `ProjectInstance(Evaluation.Project.Data)` constructor. It's just code duplication with your new constructor.",
              "createdAt": "2021-03-19T21:25:48Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -326,6 +326,59 @@ public ProjectInstance(ProjectRootElement xml, IDictionary<string, string> globa\n         {\n         }\n \n+        /// <summary>\n+        /// Creates a ProjectInstance from an external created <see cref=\"Project\"/>.\n+        /// Properties and items are cloned immediately and only the instance data is stored.\n+        /// </summary>\n+        public ProjectInstance(Project project, ProjectInstanceSettings settings)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Yes, that's a good summary. The old `ProjectInstance(Evaluation.Project.Data)` constructor still will get used as-is in the non cached mode in VS where MSBuild gets called for actual evaluation. I would like to keep it that way for feature isolation reasons, atleast until the cache mode feature which will initially go in behind a feature flag gets more test coverage.",
              "createdAt": "2021-03-22T22:08:02Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -326,6 +326,59 @@ public ProjectInstance(ProjectRootElement xml, IDictionary<string, string> globa\n         {\n         }\n \n+        /// <summary>\n+        /// Creates a ProjectInstance from an external created <see cref=\"Project\"/>.\n+        /// Properties and items are cloned immediately and only the instance data is stored.\n+        /// </summary>\n+        public ProjectInstance(Project project, ProjectInstanceSettings settings)",
              "author": {
                "login": "arunchndr"
              }
            }
          ]
        }
      }
    ]
  }
}