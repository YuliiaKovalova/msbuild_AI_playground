{
  "number": 8101,
  "title": "Use `EntryPointNodes` in lieu of `GraphRoots` in `GetTargetLists` (#8\u2026",
  "body": "Fixes #8056 \r\n\r\n### Context\r\n\r\n`GraphRoots` won't contain referenced projects (even if they're entry points), so use `EntryPointNodes` when obtaining the entry point nodes in `GetTargetLists`. This will result in `Build` being added to the referenced project's target list, which will in the case of #8056 result in `Pack` being called.\r\n\r\n### Changes Made\r\n`GetTargetLists` now uses `EntryPointNodes` in lieu of `GraphRoots` in obtaining the entry point nodes.\r\n\r\n### Testing\r\nVerified that a referenced entry project has the default target in its target list.\r\n\r\n### Notes\r\n`EntryPointNodes` was initially used (see https://github.com/dotnet/msbuild/commit/a1ac094e14c59d806ad4a621779a9ec5d96de09a) but was later changed to `GraphRoots` [here](https://github.com/dotnet/msbuild/pull/4218/commits/335267ca3f55741d97df191e94bff114e8ef1fc8).\r\n\r\n@rainersigwald Do you have any insight as to why this change was made? You made [this comment](https://github.com/dotnet/msbuild/pull/4218#pullrequestreview-217423992) about non-graph-root outer build -- it seems relevant to the change made, so I was wondering if you could elaborate on it.",
  "state": "MERGED",
  "createdAt": "2022-10-28T18:56:39Z",
  "updatedAt": "2022-11-04T13:30:43Z",
  "closedAt": "2022-11-04T08:50:23Z",
  "mergedAt": "2022-11-04T08:50:23Z",
  "additions": 16,
  "deletions": 27,
  "changedFiles": 2,
  "headRefName": "UseActualEntryPoints",
  "isDraft": false,
  "author": {
    "login": "DmitriyShepelev"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cbf2cc17e2ecf8210b66f261821fbf59cb6ebe1f",
          "message": "Use `EntryPointNodes` in lieu of `GraphRoots` in `GetTargetLists` (#8056)",
          "committedDate": "2022-10-28T18:54:54Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76ec794bd300a63ec575e8427edd4d5332ae13ec",
          "message": "Generify test case to default targets instead of Build & include\nAHelperOuter",
          "committedDate": "2022-11-01T18:40:38Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "cc: @dfederm ",
        "createdAt": "2022-10-28T20:14:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think my questions then were here (https://github.com/dotnet/msbuild/pull/4218#discussion_r267830872), with replies.\r\n\r\nBasically, in a non-graph build of `Foo.csproj` -> `Multitargeted.csproj`, the outer build's `Build` target in `Multitargeted.csproj` will not run; only the selected inner build will run.\r\n\r\nBut if you have a solution that points to both, the outer build _will_ run. Passing two projects as entry points in a graph is analogous to that, I think.\r\n\r\nSo I think the commit you linked switching from EntryPointNodes to GraphRoots is incorrect.\r\n\r\n",
        "createdAt": "2022-11-01T14:15:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this list not include `GetTargetFrameworks` (or whatever the test equivalent is)?\r\n\r\nI would expect it to merge, so that the outer build of another project can do its select-a-TF process and so the outer build of the referenced multitargeting project can do `Pack`.",
              "createdAt": "2022-11-01T14:18:20Z",
              "path": "src/Build.UnitTests/Graph/ProjectGraph_Tests.cs",
              "diffHunk": "@@ -1299,6 +1277,19 @@ public void GetTargetsListProjectReferenceTargetsOrDefaultComplexPropagation()\n             }\n         }\n \n+        [Fact]\n+        public void ReferencedMultitargetingEntryPointNodeTargetListContainsBuildTarget()\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                TransientTestFile entryProject1 = CreateProjectFile(env, 1, projectReferences: new[] { 2 });\n+                TransientTestFile entryProject2 = CreateProjectFile(env, 2, extraContent: MultitargetingSpecificationPropertyGroup);\n+                var graph = new ProjectGraph(new HashSet<string> { entryProject1.Path, entryProject2.Path });\n+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(null);\n+                targetLists[key: GetOuterBuild(graph, 2)].ShouldBe(expected: new[] { \"Build\" });",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I initially wanted to make the test case as simple as possible to test the inclusion of `Build` in the referenced node's target list. I've updated the test case to be more robust and generic, verifying the inclusion of the `GetTargetFrameworks` equivalent `AHelperOuter`.",
              "createdAt": "2022-11-01T18:45:26Z",
              "path": "src/Build.UnitTests/Graph/ProjectGraph_Tests.cs",
              "diffHunk": "@@ -1299,6 +1277,19 @@ public void GetTargetsListProjectReferenceTargetsOrDefaultComplexPropagation()\n             }\n         }\n \n+        [Fact]\n+        public void ReferencedMultitargetingEntryPointNodeTargetListContainsBuildTarget()\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                TransientTestFile entryProject1 = CreateProjectFile(env, 1, projectReferences: new[] { 2 });\n+                TransientTestFile entryProject2 = CreateProjectFile(env, 2, extraContent: MultitargetingSpecificationPropertyGroup);\n+                var graph = new ProjectGraph(new HashSet<string> { entryProject1.Path, entryProject2.Path });\n+                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(null);\n+                targetLists[key: GetOuterBuild(graph, 2)].ShouldBe(expected: new[] { \"Build\" });",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      }
    ]
  }
}