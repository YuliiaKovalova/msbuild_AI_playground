{
  "number": 8860,
  "title": "Reduce allocation in UsedUninitializedProperties",
  "body": "Fixes [AB#1824492](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1824492)\r\n\r\n### Context\r\n\r\nThis class would always allocate a `Dictionary<string, IElementLocation>`, even when the object is unused. This allocation was showing up as contributing to GC pauses by GCPauseWatson.\r\n\r\n### Changes Made\r\n\r\nTo reduce those allocations, we defer such an allocation until it is actually needed.\r\n\r\n### Testing\r\n\r\nAdded unit tests.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-08T01:53:44Z",
  "updatedAt": "2023-06-13T05:10:49Z",
  "closedAt": "2023-06-13T05:07:52Z",
  "mergedAt": "2023-06-13T05:07:52Z",
  "additions": 78,
  "deletions": 19,
  "changedFiles": 3,
  "headRefName": "dev/drnoakes/fix-1824492-UsedUninitializedProperties-allocations",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0574a5b7aad68654902d00eb3852edfef8f0c2b8",
          "message": "Reduce allocation in UsedUninitializedProperties\n\nThis class would always allocate a `Dictionary<string, IElementLocation>`, even when the object is unused. This allocation was showing up as contributing to GC pauses by GCPauseWatson.\n\nTo reduce those allocations, we defer such an allocation until it is actually needed.",
          "committedDate": "2023-06-08T01:52:11Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b592c1a724a9ff6af1bbac6184029c39587ada01",
          "message": "Seal class",
          "committedDate": "2023-06-13T04:40:31Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: `sealed`",
              "createdAt": "2023-06-08T07:45:21Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -5279,26 +5277,45 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o\n         }\n     }\n \n+#nullable enable\n     /// <summary>\n     /// This class wraps information about properties which have been used before they are initialized.\n     /// </summary>\n     internal class UsedUninitializedProperties",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done. +1 for seal-all-the-things.",
              "createdAt": "2023-06-13T04:41:37Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -5279,26 +5277,45 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o\n         }\n     }\n \n+#nullable enable\n     /// <summary>\n     /// This class wraps information about properties which have been used before they are initialized.\n     /// </summary>\n     internal class UsedUninitializedProperties",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit:\r\n\r\n```suggestion\r\n            _properties ??= new(StringComparer.OrdinalIgnoreCase);\r\n```",
              "createdAt": "2023-06-08T07:45:49Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -5279,26 +5277,45 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o\n         }\n     }\n \n+#nullable enable\n     /// <summary>\n     /// This class wraps information about properties which have been used before they are initialized.\n     /// </summary>\n     internal class UsedUninitializedProperties\n     {\n         /// <summary>\n-        /// This class wraps information about properties which have been used before they are initialized.\n+        /// Lazily allocated collection of properties and the element which used them.\n         /// </summary>\n-        internal UsedUninitializedProperties()\n+        private Dictionary<string, IElementLocation>? _properties;\n+\n+        internal void TryAdd(string propertyName, IElementLocation elementLocation)\n         {\n-            Properties = new Dictionary<string, IElementLocation>(StringComparer.OrdinalIgnoreCase);\n+            if (_properties is null)\n+            {\n+                _properties = new(StringComparer.OrdinalIgnoreCase);\n+            }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I prefer the current way since it avoids calling an unnecessary ContainsKey in the created-new case.",
              "createdAt": "2023-06-08T19:34:10Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -5279,26 +5277,45 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o\n         }\n     }\n \n+#nullable enable\n     /// <summary>\n     /// This class wraps information about properties which have been used before they are initialized.\n     /// </summary>\n     internal class UsedUninitializedProperties\n     {\n         /// <summary>\n-        /// This class wraps information about properties which have been used before they are initialized.\n+        /// Lazily allocated collection of properties and the element which used them.\n         /// </summary>\n-        internal UsedUninitializedProperties()\n+        private Dictionary<string, IElementLocation>? _properties;\n+\n+        internal void TryAdd(string propertyName, IElementLocation elementLocation)\n         {\n-            Properties = new Dictionary<string, IElementLocation>(StringComparer.OrdinalIgnoreCase);\n+            if (_properties is null)\n+            {\n+                _properties = new(StringComparer.OrdinalIgnoreCase);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Totally! I missed the `else`. Resolving the conversation and pretending this never happened.",
              "createdAt": "2023-06-08T20:21:29Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -5279,26 +5277,45 @@ private object LateBindExecute(Exception ex, BindingFlags bindingFlags, object o\n         }\n     }\n \n+#nullable enable\n     /// <summary>\n     /// This class wraps information about properties which have been used before they are initialized.\n     /// </summary>\n     internal class UsedUninitializedProperties\n     {\n         /// <summary>\n-        /// This class wraps information about properties which have been used before they are initialized.\n+        /// Lazily allocated collection of properties and the element which used them.\n         /// </summary>\n-        internal UsedUninitializedProperties()\n+        private Dictionary<string, IElementLocation>? _properties;\n+\n+        internal void TryAdd(string propertyName, IElementLocation elementLocation)\n         {\n-            Properties = new Dictionary<string, IElementLocation>(StringComparer.OrdinalIgnoreCase);\n+            if (_properties is null)\n+            {\n+                _properties = new(StringComparer.OrdinalIgnoreCase);\n+            }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}