{
  "number": 8839,
  "title": "Catch the illegal argument exception in Net Framework!",
  "body": "Fixes [#8762 ](https://github.com/dotnet/msbuild/issues/8762)\r\n\r\n### Context\r\nCatch the exceptions when extensionsPathPropValue is null or importExpandedWithDefaultPath is empty.\r\nIn NET Framework, Path.* function also throws exceptions if the path contains invalid characters\r\n\r\n### Changes Made\r\nCatch the exception.\r\n\r\n### Testing\r\nFallbackImportWithInvalidProjectValue\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-05T10:20:47Z",
  "updatedAt": "2023-10-10T14:08:14Z",
  "closedAt": "2023-10-10T14:08:12Z",
  "mergedAt": "2023-10-10T14:08:12Z",
  "additions": 48,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "Jennybai/issue8762",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": {
    "title": "VS 17.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cfe5df466fdee0d399ada7607dc10c998048e87a",
          "message": "Catch the illegal argument exception in Net framework",
          "committedDate": "2023-06-05T10:09:12Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "657c63ba2dd8933c7a90206221457dfbc9bce542",
          "message": "Fix comment",
          "committedDate": "2023-06-05T10:23:59Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d012946e302f6f0b5eb65b2840abae33da8e799",
          "message": "Add exception details in ouput",
          "committedDate": "2023-06-06T06:59:26Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "022865970f38beae6113fc353f8b410030fc947d",
          "message": "refactor test case",
          "committedDate": "2023-06-06T08:22:28Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a764608129bb1b4c50eb41a6b6c698f4782ee05",
          "message": "Refactor the test case",
          "committedDate": "2023-06-08T07:43:20Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "There can be multiple reasons for ArgumentException in here - let's not loose that information. Either add it to the error message, or (probably better) - propagate it to the `InvalidProjectFileException` InnerException.",
              "createdAt": "2023-06-05T14:02:44Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Done",
              "createdAt": "2023-06-06T09:04:12Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You did a good job making this fit in with the rest of this class, but since it's a new test let's use some of the more modern helpers:\r\n\r\n```suggestion\r\n            using TestEnvironment testEnvironment = TestEnvironment.Create();\r\n\r\n            string mainProjectPath = testEnvironment.CreateTestProjectWithFiles(\"main.proj\", mainTargetsFileContent).ProjectFile;\r\n\r\n            var projectCollection = GetProjectCollection();\r\n            projectCollection.ResetToolsetsForTests(WriteConfigFileAndGetReader(\"VSToolsPath\", \"temp\"));\r\n            var logger = new MockLogger();\r\n            projectCollection.RegisterLogger(logger);\r\n\r\n            Assert.Throws<InvalidProjectFileException>(() => projectCollection.LoadProject(mainProjectPath));\r\n            logger.AssertLogContains(\"MSB4102\");\r\n```",
              "createdAt": "2023-06-06T20:51:08Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -842,6 +843,42 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()\n                 FileUtilities.DeleteDirectoryNoThrow(extnDir1, true);\n             }\n         }\n+        /// <summary>\n+        /// Fall-back search path on a property that is not valid. https://github.com/dotnet/msbuild/issues/8762\n+        /// </summary>\n+        /// <param name=\"projectValue\">imported project value expression</param>\n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"\")]\n+        [InlineData(\"|\")]\n+        public void FallbackImportWithInvalidProjectValue(string projectValue)\n+        {\n+            string mainTargetsFileContent = $\"\"\"\n+                <Project>\n+                    <PropertyGroup>\n+                    <VSToolsPath>{projectValue}</VSToolsPath>\n+                </PropertyGroup>\n+                <Import Project=\"$(VSToolsPath)\"/>\n+                </Project>\n+                \"\"\";\n+\n+            string mainProjectPath = null;\n+\n+            try\n+            {\n+                mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory(\"main.proj\", mainTargetsFileContent);\n+                var projectCollection = GetProjectCollection();\n+                projectCollection.ResetToolsetsForTests(WriteConfigFileAndGetReader(\"VSToolsPath\", \"temp\"));\n+                var logger = new MockLogger();\n+                projectCollection.RegisterLogger(logger);\n+\n+                Assert.Throws<InvalidProjectFileException>(() => projectCollection.LoadProject(mainProjectPath));\n+                logger.AssertLogContains(\"MSB4102\");\n+            }\n+            finally\n+            {\n+                FileUtilities.DeleteNoThrow(mainProjectPath);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated",
              "createdAt": "2023-10-10T09:04:01Z",
              "path": "src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs",
              "diffHunk": "@@ -842,6 +843,42 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()\n                 FileUtilities.DeleteDirectoryNoThrow(extnDir1, true);\n             }\n         }\n+        /// <summary>\n+        /// Fall-back search path on a property that is not valid. https://github.com/dotnet/msbuild/issues/8762\n+        /// </summary>\n+        /// <param name=\"projectValue\">imported project value expression</param>\n+        [WindowsFullFrameworkOnlyTheory]\n+        [InlineData(\"\")]\n+        [InlineData(\"|\")]\n+        public void FallbackImportWithInvalidProjectValue(string projectValue)\n+        {\n+            string mainTargetsFileContent = $\"\"\"\n+                <Project>\n+                    <PropertyGroup>\n+                    <VSToolsPath>{projectValue}</VSToolsPath>\n+                </PropertyGroup>\n+                <Import Project=\"$(VSToolsPath)\"/>\n+                </Project>\n+                \"\"\";\n+\n+            string mainProjectPath = null;\n+\n+            try\n+            {\n+                mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory(\"main.proj\", mainTargetsFileContent);\n+                var projectCollection = GetProjectCollection();\n+                projectCollection.ResetToolsetsForTests(WriteConfigFileAndGetReader(\"VSToolsPath\", \"temp\"));\n+                var logger = new MockLogger();\n+                projectCollection.RegisterLogger(logger);\n+\n+                Assert.Throws<InvalidProjectFileException>(() => projectCollection.LoadProject(mainProjectPath));\n+                logger.AssertLogContains(\"MSB4102\");\n+            }\n+            finally\n+            {\n+                FileUtilities.DeleteNoThrow(mainProjectPath);\n+            }",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a good approach to work around the .NET Framework behavior, but I wonder if we can instead take advantage of the .NET Core behavior even in .NET Framework, using the `Microsoft.IO.Redist` package. Can you please try rewriting `FileUtilities.MakeRelative` to use `Microsoft.IO.Path.GetRelativePath` on .NET Framework, which shouldn't throw and should also be faster?",
              "createdAt": "2023-06-06T21:37:11Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException ex)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald Thanks for your suggestions. But Path.GetRelativePath still throw exceptions when the path is empty.",
              "createdAt": "2023-06-07T07:01:49Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException ex)",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "The latest non-prerelease version of Microsoft.IO.Redist is 6.0.0.  New versions are no longer built due to <https://github.com/dotnet/runtime/pull/58359>.  .NET 6 will go out of support on November 12, 2024; will any version of Microsoft.IO.Redist be supported after that?",
              "createdAt": "2023-08-10T07:07:26Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException ex)",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "@rainersigwald  This fix is not only for .Net Framework.   Both .Net and .NET Framework, has the exception when extensionsPathPropValue is null or importExpandedWithDefaultPath is empty.  You can see the this from the test.  So, I think we don't need to use the Microsoft.IO.Redist package for .net framework.  The exceptions are thrown for both.",
              "createdAt": "2023-08-15T10:07:40Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -2547,7 +2547,16 @@ private void ThrowForImportedProjectWithSearchPathsNotFound(ProjectImportPathMat\n                         importElement.Project.Replace(searchPathMatch.MsBuildPropertyFormat, extensionsPathPropValue),\n                         ExpanderOptions.ExpandProperties, importElement.ProjectLocation);\n \n-                relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                try\n+                {\n+                    relativeProjectPath = FileUtilities.MakeRelative(extensionsPathPropValue, importExpandedWithDefaultPath);\n+                }\n+                catch (ArgumentException ex)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}