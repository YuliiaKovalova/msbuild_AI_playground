{
  "number": 6908,
  "title": "Switch to VS 2022 pools",
  "body": "They're still prerelease but it's time.",
  "state": "MERGED",
  "createdAt": "2021-10-04T19:45:42Z",
  "updatedAt": "2021-11-15T23:23:59Z",
  "closedAt": "2021-11-15T23:23:56Z",
  "mergedAt": "2021-11-15T23:23:56Z",
  "additions": 161,
  "deletions": 137,
  "changedFiles": 20,
  "headRefName": "exp/vs2022-pools",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "240146c5ed9accb41e5cbabe54c8ecc84ac7db8d",
          "message": "Switch to VS 2022 pools",
          "committedDate": "2021-10-04T19:44:50Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e0c0bd38f676927e7de9ea455955b060323d8c0",
          "message": "Update tests to not assume there's a 4.0 runtime on the computer.\n\nVS 2022 doesn't have it, so updating to that pool requires not assuming\nit. This should be more stable but it now has a variable as its\n\"TargetFrameworkVersion\"\n(MSBuildConstants.StandardTestTargetFrameworkVersion) in case we need to\nchange it. Also cleaned up some Tools=\"\" in tests and made some other\nsimplifications. The only part that should have any product effect is in\nToolLocationHelper where, if we had previously allocated a new empty List to\nreplace an empty List, we just used that other list.",
          "committedDate": "2021-11-15T22:17:10Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c698755de0254349d70988371c11672b4f355d83",
          "message": "Fix tiny typo",
          "committedDate": "2021-11-15T22:21:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "At least some of the tests are failing because MSBuild defaults to target .NET 4.0 (for ancient legacy reasons) and VS2022 no longer supports installing the 4.0 developer pack (for cleaning-up-ancient-legacy reasons). Cleaning that up might be a bit of a mess but I guess we'll have to do it.",
        "createdAt": "2021-10-20T21:03:15Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This removal is harmless and probably good but not directly related, to be clear.",
              "createdAt": "2021-11-12T21:13:11Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -374,10 +374,11 @@ public void PropertyOverridesContainSemicolon()\n             ObjectModelHelpers.CreateFileInTempProjectDirectory(\n                 @\"bug'533'369\\Sub;Dir\\ConsoleApplication1\\ConsoleApplication1.csproj\", @\"\n \n-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems bad. We shouldn't be changing anything in the product. Is this affected some other way?",
              "createdAt": "2021-11-12T21:14:35Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -1601,7 +1601,7 @@ public void VenusSolutionDefaultTargetFrameworkVersion()\n \n             // v4.0 by default\n             ProjectInstance msbuildProject = CreateVenusSolutionProject();\n-            Assert.Equal(\"v4.0\", msbuildProject.GetPropertyValue(\"TargetFrameworkVersion\"));\n+            Assert.Equal(\"v4.8\", msbuildProject.GetPropertyValue(\"TargetFrameworkVersion\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There is no `ToolsVersion=\"4.8\"`. By the time .NET 4.8 had rolled around we had stopped bumping our version with the .NET version and used the VS version instead. Please either roll these back or delete ToolsVersion entirely.",
              "createdAt": "2021-11-12T21:15:49Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -135,13 +136,13 @@ public void ExplicitAnyCPULibraryProjectIsNot32BitPreferred()\n \n                 Project project = ObjectModelHelpers.CreateInMemoryProject(\n                     @\"\n-                   <Project DefaultTargets=`Build` ToolsVersion=`4.0` xmlns=`msbuildnamespace`>\n+                   <Project DefaultTargets=`Build` ToolsVersion=`4.8` xmlns=`msbuildnamespace`>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This test feels TFM-specific. How did you validate that it was safe to update?",
              "createdAt": "2021-11-12T21:17:07Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -434,7 +435,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()\n \n         /// <summary>\n         /// Check that with an explicit platformtarget of anycpu, exe type assemblies that are \n-        /// targeting .NET 4.0 do not get forced to anycpu32bitpreferred by default. \n+        /// targeting .NET 4.8 do not get forced to anycpu32bitpreferred by default. \n         /// </summary>\n         [Fact]\n         public void ExplicitAnyCPU40ExeProjectIsNot32BitPreferred()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I can't leave it at 4.0, since that wouldn't be on the box, so I don't think I have a choice unless I remove it entirely.",
              "createdAt": "2021-11-12T22:27:21Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -434,7 +435,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()\n \n         /// <summary>\n         /// Check that with an explicit platformtarget of anycpu, exe type assemblies that are \n-        /// targeting .NET 4.0 do not get forced to anycpu32bitpreferred by default. \n+        /// targeting .NET 4.8 do not get forced to anycpu32bitpreferred by default. \n         /// </summary>\n         [Fact]\n         public void ExplicitAnyCPU40ExeProjectIsNot32BitPreferred()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, that's the question at hand: was this actually specific to 4.0 and thus can now be removed or disabled unless the specific build machine has that SDK installed?",
              "createdAt": "2021-11-12T22:31:26Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -434,7 +435,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()\n \n         /// <summary>\n         /// Check that with an explicit platformtarget of anycpu, exe type assemblies that are \n-        /// targeting .NET 4.0 do not get forced to anycpu32bitpreferred by default. \n+        /// targeting .NET 4.8 do not get forced to anycpu32bitpreferred by default. \n         /// </summary>\n         [Fact]\n         public void ExplicitAnyCPU40ExeProjectIsNot32BitPreferred()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This came in with the initial code commit, so I don't have anything specific I can reference. From reading the comment, I would suspect the important part is that it isn't being pushed to anycpu32bitpreferred when it's supposed to be AnyCPU. That also aligns with the only assert in the test. I don't think the TF actually matters.",
              "createdAt": "2021-11-12T23:39:25Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -434,7 +435,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()\n \n         /// <summary>\n         /// Check that with an explicit platformtarget of anycpu, exe type assemblies that are \n-        /// targeting .NET 4.0 do not get forced to anycpu32bitpreferred by default. \n+        /// targeting .NET 4.8 do not get forced to anycpu32bitpreferred by default. \n         /// </summary>\n         [Fact]\n         public void ExplicitAnyCPU40ExeProjectIsNot32BitPreferred()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> This came in with the initial code commit, so I don't have anything specific I can reference.\r\n\r\nThat doesn't need to be a blocker for you since you're inside the firewall. This was implemented in (internal link) https://vstfdevdiv/DevDiv2/DevDiv/_versionControl/changeset/320633/ with the message\r\n\r\n> Some class library projects were failing with an error regarding AnyCPU32BitPreferred not being an allowed target type for library projects. This was due to two issues:\r\n> \r\n> * The managed compilers were only remapping AnyCPU to AnyCPU32BitPreferred when AnyCPU was explicitly set, which meant that projects that did not explicitly set PlatformTarget to AnyCPU would silently fail to remap and thus silently succeed in the build.\r\n> * The managed and Jupiter targets were setting the Prefer32Bit flag to true across the board for 4.5 projects, when they should have been only doing so if the project had a supported outputtype (exe, winexe, or appcontainerexe).\r\n>\r\n> This shelveset fixes both issues: the managed compilers now remap to AnyCPU32BitPreferred when the PlatformTarget is empty, as well as when it is explicitly AnyCPU; and the managed and Jupiter targets now only set Prefer32Bit to true if the project is one of the supported output types.\r\n\r\nSo it looks like the best fix would be to change the comment and possibly test names to `4.0+`.",
              "createdAt": "2021-11-15T17:40:00Z",
              "path": "src/Build.UnitTests/TargetsFile_Test.cs",
              "diffHunk": "@@ -434,7 +435,7 @@ public void AnyCPU40ExeProjectIsNot32BitPreferred()\n \n         /// <summary>\n         /// Check that with an explicit platformtarget of anycpu, exe type assemblies that are \n-        /// targeting .NET 4.0 do not get forced to anycpu32bitpreferred by default. \n+        /// targeting .NET 4.8 do not get forced to anycpu32bitpreferred by default. \n         /// </summary>\n         [Fact]\n         public void ExplicitAnyCPU40ExeProjectIsNot32BitPreferred()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are the changes in this file necessary? I wouldn't expect them to be and would love to not update product code in this PR at all.",
              "createdAt": "2021-11-12T21:18:29Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -2325,9 +2325,11 @@ private void AddGlobalProperties(ProjectRootElement traversalProject)\n             ProjectPropertyElement tfv20Property = frameworkVersionProperties.AddProperty(\"TargetFrameworkVersion\", \"v2.0\");\n             ProjectPropertyElement tfv35Property = frameworkVersionProperties.AddProperty(\"TargetFrameworkVersion\", \"v3.5\");\n             ProjectPropertyElement tfv40Property = frameworkVersionProperties.AddProperty(\"TargetFrameworkVersion\", \"v4.0\");\n+            ProjectPropertyElement tfv48Property = frameworkVersionProperties.AddProperty(\"TargetFrameworkVersion\", \"v4.8\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please revert this file; we don't want to do anything with toolsets.",
              "createdAt": "2021-11-12T21:18:57Z",
              "path": "src/Build/Definition/ToolsetReader.cs",
              "diffHunk": "@@ -182,6 +182,13 @@ ToolsetDefinitionLocations locations\n                                     string.Empty));\n                         }\n \n+                        var v48Dir = FrameworkLocationHelper.GetPathToDotNetFramework(Version.Parse(\"4.8\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Changing our own test assembly TFs should not be required.",
              "createdAt": "2021-11-12T21:19:13Z",
              "path": "src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj",
              "diffHunk": "@@ -5,6 +5,7 @@\n \n   <PropertyGroup>\n     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>\n+    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "As I read it this should have been passing before because .NET 4.5 reference assemblies weren't installed. Is it right to update it? If so please update the comments above too.",
              "createdAt": "2021-11-12T21:21:15Z",
              "path": "src/Utilities.UnitTests/ToolLocationHelper_Tests.cs",
              "diffHunk": "@@ -1957,15 +1957,15 @@ public void GetPathToReferenceAssembliesDefaultLocationNullFrameworkName()\n         /// </summary>\n         [Fact]\n         [Trait(\"Category\", \"mono-osx-failing\")]\n-        public void GetPathToReferenceAssembliesDefaultLocation45()\n+        public void GetPathToReferenceAssembliesDefaultLocation48()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I believe the first method for finding \"Version45\" isn't particularly accurate. It looks for the appropriate folder where it should be, but that ends in \"v4.0\" rather than \"v4.5\" because of in-place replacements. Then, when it finds it, it returns successfully.\r\n\r\nThe method for finding all paths is more intelligent in that it actually finds version 4.5 if it exists. If not, it says Count is 0 and fails. Updating to 48 means it's actually there, so Count was 1, and this passed.\r\n\r\nI might be misremembering some part of that. Honestly, I think we should really just unify these two paths, but they're rather confusing, and I don't want to commit to not messing that up.",
              "createdAt": "2021-11-12T22:35:32Z",
              "path": "src/Utilities.UnitTests/ToolLocationHelper_Tests.cs",
              "diffHunk": "@@ -1957,15 +1957,15 @@ public void GetPathToReferenceAssembliesDefaultLocationNullFrameworkName()\n         /// </summary>\n         [Fact]\n         [Trait(\"Category\", \"mono-osx-failing\")]\n-        public void GetPathToReferenceAssembliesDefaultLocation45()\n+        public void GetPathToReferenceAssembliesDefaultLocation48()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Please include this information in a comment or the commit message.",
              "createdAt": "2021-11-15T17:40:58Z",
              "path": "src/Utilities.UnitTests/ToolLocationHelper_Tests.cs",
              "diffHunk": "@@ -1957,15 +1957,15 @@ public void GetPathToReferenceAssembliesDefaultLocationNullFrameworkName()\n         /// </summary>\n         [Fact]\n         [Trait(\"Category\", \"mono-osx-failing\")]\n-        public void GetPathToReferenceAssembliesDefaultLocation45()\n+        public void GetPathToReferenceAssembliesDefaultLocation48()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you define a constant named something like `StandardTestTargetFrameworkVersion` so that we can update these in a single pass if we need to in the future?",
              "createdAt": "2021-11-12T21:22:03Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -374,10 +374,11 @@ public void PropertyOverridesContainSemicolon()\n             ObjectModelHelpers.CreateFileInTempProjectDirectory(\n                 @\"bug'533'369\\Sub;Dir\\ConsoleApplication1\\ConsoleApplication1.csproj\", @\"\n \n-                <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                <Project DefaultTargets=`Build` xmlns=`msbuildnamespace`>\n                   <PropertyGroup>\n                     <Configuration Condition=` '$(Configuration)' == '' `>Debug</Configuration>\n                     <Platform Condition=` '$(Platform)' == '' `>AnyCPU</Platform>\n+                    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <summary>\r\n        /// Framework version against which our test projects should be built.\r\n        /// </summary>\r\n        /// <remarks>\r\n        /// The targeting pack for this version of .NET Framework must be installed\r\n        /// on any machine that wants to run tests successfully, so this can be\r\n        /// periodically updated.\r\n        /// </remarks>\r\n```",
              "createdAt": "2021-11-15T17:42:24Z",
              "path": "src/Shared/Constants.cs",
              "diffHunk": "@@ -77,6 +77,11 @@ internal static class MSBuildConstants\n         /// </summary>\n         internal const string DefaultTargetsMarker = \".default\";\n \n+        /// <summary>\n+        /// Framework version against which our test projects should be built.\n+        /// </summary>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}