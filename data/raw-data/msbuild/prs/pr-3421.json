{
  "number": 3421,
  "title": "More automated code refactoring and .NET 1 data structure reduction",
  "body": "src\\Build\\ - partial tree\r\nFor #3320\r\n",
  "state": "MERGED",
  "createdAt": "2018-06-18T23:23:53Z",
  "updatedAt": "2021-10-12T00:01:32Z",
  "closedAt": "2018-06-21T16:37:59Z",
  "mergedAt": "2018-06-21T16:37:59Z",
  "additions": 1969,
  "deletions": 4385,
  "changedFiles": 97,
  "headRefName": "dev/erikmav/resharper6",
  "isDraft": false,
  "author": {
    "login": "erikmav"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a122acf4c547ab66d43314eb29b69944ace1104b",
          "message": "More automated code refactoring - src\\Build",
          "committedDate": "2018-06-12T18:02:24Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d8fa13fe622ccff843c298ca73777f3354aa4bd",
          "message": "More modernizing",
          "committedDate": "2018-06-18T17:33:37Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a14d8b1f40cfa23dc31f8e13595c8a0fc844beda",
          "message": "step",
          "committedDate": "2018-06-18T20:56:23Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0302a66a47760551ee793dd5c089bd6d28b1f2ff",
          "message": "step",
          "committedDate": "2018-06-18T23:22:13Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4d0fa63b3f74f6b3d2c8d90153b2ca459f89fee",
          "message": "Remove debugging comments and traces",
          "committedDate": "2018-06-19T01:27:40Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbf88f6c2b99a8d17f22c870648d9be4de9ef350",
          "message": "PR comment",
          "committedDate": "2018-06-19T16:39:55Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ac0a78ab11954cf13bed9725ef9186dd8a0aac9",
          "message": "More PR comments",
          "committedDate": "2018-06-19T19:50:45Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "89edfc4c5ab53c217b5e69b661cf155734ff0d9c",
          "message": "PR comment",
          "committedDate": "2018-06-19T20:05:45Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "939de240f9457d3833674b9b39b1ddeb51e81a30",
          "message": "step",
          "committedDate": "2018-06-19T20:07:12Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e7fb08025c3b74c2db228138c8a977749112d62",
          "message": "Revert \"step\"\n\nThis reverts commit 939de240f9457d3833674b9b39b1ddeb51e81a30.",
          "committedDate": "2018-06-19T20:13:34Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5acf8d92950d24a0500226ecaf8b4f8592e7c3ae",
          "message": "Fix UT",
          "committedDate": "2018-06-19T21:49:33Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Rather than delete this change to `project.GetPropertyValue(\"a\").ShouldBe(\"2\")`? I suppose it could be testing that it didn't throw, but more likely a mstest -> nunit -> xunit conversion issue.",
              "createdAt": "2018-06-19T03:02:36Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -1269,7 +1266,6 @@ public void ProjectCollectionChangedEvent2()\n             project.SetProperty(\"a\", \"1\");\n             collection.SetGlobalProperty(\"a\", \"1\");\n             VerifyProjectCollectionEvents(collection, true, \"2\");\n-            project.GetPropertyValue(\"a\").Equals(\"2\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "AndyGerlicher"
              }
            },
            {
              "body": "I found after enabling this and the others like it in Assert.IsTrue() lines that they were in fact wrong - because there is no full path on the project XML provided to the ProjCollection, the project is not added to the collection, and so changes to the collection global properties were not propagating. After debugging for awhile I figured I'd dump the lines instead of asserting false, since they're useless.\r\n\r\nLMK if you disagree, I can restore under a false assertion.",
              "createdAt": "2018-06-19T04:34:05Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -1269,7 +1266,6 @@ public void ProjectCollectionChangedEvent2()\n             project.SetProperty(\"a\", \"1\");\n             collection.SetGlobalProperty(\"a\", \"1\");\n             VerifyProjectCollectionEvents(collection, true, \"2\");\n-            project.GetPropertyValue(\"a\").Equals(\"2\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "That sounds concerning. Should we fix the full-path thing instead?",
              "createdAt": "2018-06-19T17:01:04Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -1269,7 +1266,6 @@ public void ProjectCollectionChangedEvent2()\n             project.SetProperty(\"a\", \"1\");\n             collection.SetGlobalProperty(\"a\", \"1\");\n             VerifyProjectCollectionEvents(collection, true, \"2\");\n-            project.GetPropertyValue(\"a\").Equals(\"2\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The doc comment on ProjectCollection.OnAfterRenameLoadedProject() says no:\r\n\r\n        /// Stores the project in the list of loaded projects if it has a name.\r\n        /// Does not store the project if it has no name because it has not been saved to disk yet.\r\n        /// If the project previously had a name, but was not in the collection already, throws InvalidOperationException.\r\n        /// If the project was not previously in the collection, sets the collection's global properties on it.\r\n",
              "createdAt": "2018-06-19T17:55:57Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -1269,7 +1266,6 @@ public void ProjectCollectionChangedEvent2()\n             project.SetProperty(\"a\", \"1\");\n             collection.SetGlobalProperty(\"a\", \"1\");\n             VerifyProjectCollectionEvents(collection, true, \"2\");\n-            project.GetPropertyValue(\"a\").Equals(\"2\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I assume this was because the value was never used? Should delete the xml comment as well please.",
              "createdAt": "2018-06-19T03:06:50Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1326,15 +1292,14 @@ private void IssueBuildRequest(BuildRequestBlocker blocker)\n         /// <param name=\"isLastTask\"><code>true</code> if this is the last task for this queue, otherwise <code>false</code>.</param>\n         /// <returns>True if the task was scheduled, false otherwise.</returns>\n         /// <remarks>This method will return false if an attempt is made to schedule an action after the queue has been shut down.</remarks>\n-        private bool QueueAction(Action action, bool isLastTask)",
              "author": {
                "login": "AndyGerlicher"
              }
            },
            {
              "body": "Correct on unused. Fixed in next push.",
              "createdAt": "2018-06-19T16:39:38Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -1326,15 +1292,14 @@ private void IssueBuildRequest(BuildRequestBlocker blocker)\n         /// <param name=\"isLastTask\"><code>true</code> if this is the last task for this queue, otherwise <code>false</code>.</param>\n         /// <returns>True if the task was scheduled, false otherwise.</returns>\n         /// <remarks>This method will return false if an attempt is made to schedule an action after the queue has been shut down.</remarks>\n-        private bool QueueAction(Action action, bool isLastTask)",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you pull the first one of these outside the `Assert.Throws`? The test would be more accurate then.",
              "createdAt": "2018-06-19T16:42:47Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -353,23 +369,19 @@ public void ErrorTwoProjectsEquivalentOneCollection()\n         {\n             Assert.Throws<InvalidOperationException>(() =>\n             {\n-                Project project = new Project();\n-                project.FullPath = \"c:\\\\x\";\n-\n-                Project project2 = new Project();\n-                project2.FullPath = \"c:\\\\x\";\n-            }\n-           );\n+                _ = new Project { FullPath = \"c:\\\\x\" };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done in next push",
              "createdAt": "2018-06-19T17:59:14Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -353,23 +369,19 @@ public void ErrorTwoProjectsEquivalentOneCollection()\n         {\n             Assert.Throws<InvalidOperationException>(() =>\n             {\n-                Project project = new Project();\n-                project.FullPath = \"c:\\\\x\";\n-\n-                Project project2 = new Project();\n-                project2.FullPath = \"c:\\\\x\";\n-            }\n-           );\n+                _ = new Project { FullPath = \"c:\\\\x\" };",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure this comment makes sense any more.",
              "createdAt": "2018-06-19T16:58:51Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -569,9 +576,9 @@ public void ChangingGlobalPropertiesUpdatesCollection()\n         [Fact]\n         public void SettingGlobalPropertiesOnCollectionUpdatesProjects()\n         {\n-            ProjectCollection collection = new ProjectCollection();\n-            Project project1 = new Project(collection);\n-            project1.FullPath = \"c:\\\\y\"; // load into collection\n+            var collection = new ProjectCollection();\n+            var project1 = new Project(collection) { FullPath = \"c:\\\\y\" };\n+            // load into collection",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Removed",
              "createdAt": "2018-06-19T17:59:31Z",
              "path": "src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs",
              "diffHunk": "@@ -569,9 +576,9 @@ public void ChangingGlobalPropertiesUpdatesCollection()\n         [Fact]\n         public void SettingGlobalPropertiesOnCollectionUpdatesProjects()\n         {\n-            ProjectCollection collection = new ProjectCollection();\n-            Project project1 = new Project(collection);\n-            project1.FullPath = \"c:\\\\y\"; // load into collection\n+            var collection = new ProjectCollection();\n+            var project1 = new Project(collection) { FullPath = \"c:\\\\y\" };\n+            // load into collection",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does `[DebuggerStepThrough]` work for autoprops? I thought it would be unnecessary.",
              "createdAt": "2018-06-19T17:07:28Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs",
              "diffHunk": "@@ -171,68 +144,33 @@ internal BuildRequestEntry(BuildRequest request, BuildRequestConfiguration reque\n         /// <summary>\n         /// Returns the object used to lock for synchronization of long-running operations.\n         /// </summary>\n-        public Object GlobalLock\n-        {\n-            [DebuggerStepThrough]\n-            get\n-            { return _dataMonitor; }\n-        }\n+        public Object GlobalLock { [DebuggerStepThrough] get; }\n \n         /// <summary>\n         /// Returns the root directory for the project being built by this request.\n         /// </summary>\n-        public string ProjectRootDirectory\n-        {\n-            get\n-            {\n-                if (_projectRootDirectory == null)\n-                {\n-                    _projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath);\n-                }\n-\n-                return _projectRootDirectory;\n-            }\n-        }\n+        public string ProjectRootDirectory => _projectRootDirectory ??\n+                                              (_projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath));\n \n         /// <summary>\n         /// Returns the current state of the build request.\n         /// </summary>\n-        public BuildRequestEntryState State\n-        {\n-            [DebuggerStepThrough]\n-            get\n-            { return _state; }\n-        }\n+        public BuildRequestEntryState State { [DebuggerStepThrough] get; private set; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Didn't find a strong opinion when looking around for this. I'll proceed to remove these from the auto props - some here and more in later PRs.",
              "createdAt": "2018-06-19T18:02:52Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs",
              "diffHunk": "@@ -171,68 +144,33 @@ internal BuildRequestEntry(BuildRequest request, BuildRequestConfiguration reque\n         /// <summary>\n         /// Returns the object used to lock for synchronization of long-running operations.\n         /// </summary>\n-        public Object GlobalLock\n-        {\n-            [DebuggerStepThrough]\n-            get\n-            { return _dataMonitor; }\n-        }\n+        public Object GlobalLock { [DebuggerStepThrough] get; }\n \n         /// <summary>\n         /// Returns the root directory for the project being built by this request.\n         /// </summary>\n-        public string ProjectRootDirectory\n-        {\n-            get\n-            {\n-                if (_projectRootDirectory == null)\n-                {\n-                    _projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath);\n-                }\n-\n-                return _projectRootDirectory;\n-            }\n-        }\n+        public string ProjectRootDirectory => _projectRootDirectory ??\n+                                              (_projectRootDirectory = Path.GetDirectoryName(RequestConfiguration.ProjectFullPath));\n \n         /// <summary>\n         /// Returns the current state of the build request.\n         /// </summary>\n-        public BuildRequestEntryState State\n-        {\n-            [DebuggerStepThrough]\n-            get\n-            { return _state; }\n-        }\n+        public BuildRequestEntryState State { [DebuggerStepThrough] get; private set; }",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Further simplification to\r\n\r\n```c#\r\n_activelyBuildingTargets?.Count > 0\r\n```\r\n\r\n?",
              "createdAt": "2018-06-19T17:09:35Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -264,33 +254,19 @@ private BuildRequestConfiguration(INodePacketTranslator translator)\n         /// Flag indicating whether the configuration is allowed to cache.  This does not mean that the configuration will\n         /// actually cache - there are several criteria which must for that.\n         /// </summary>\n-        public bool IsCacheable\n-        {\n-            get;\n-            set;\n-        }\n+        public bool IsCacheable { get; set; }\n \n         /// <summary>\n         /// When reset caches is false we need to only keep around the configurations which are being asked for during the design time build.\n         /// Other configurations need to be cleared. If this configuration is marked as ExplicitlyLoadedConfiguration then it should not be cleared when \n         /// Reset Caches is false.\n         /// </summary>\n-        public bool ExplicitlyLoaded\n-        {\n-            get;\n-            set;\n-        }\n+        public bool ExplicitlyLoaded { get; set; }\n \n         /// <summary>\n         /// Flag indicating whether or not the configuration is actually building.\n         /// </summary>\n-        public bool IsActivelyBuilding\n-        {\n-            get\n-            {\n-                return (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);\n-            }\n-        }\n+        public bool IsActivelyBuilding => (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That reduces to `int? > 0` which I don't think works. You'd need to do something like `(_activelyBuildingTargets?.Count ?? 0) > 0`, but IMHO that's worse than what's there now.",
              "createdAt": "2018-06-19T18:01:36Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -264,33 +254,19 @@ private BuildRequestConfiguration(INodePacketTranslator translator)\n         /// Flag indicating whether the configuration is allowed to cache.  This does not mean that the configuration will\n         /// actually cache - there are several criteria which must for that.\n         /// </summary>\n-        public bool IsCacheable\n-        {\n-            get;\n-            set;\n-        }\n+        public bool IsCacheable { get; set; }\n \n         /// <summary>\n         /// When reset caches is false we need to only keep around the configurations which are being asked for during the design time build.\n         /// Other configurations need to be cleared. If this configuration is marked as ExplicitlyLoadedConfiguration then it should not be cleared when \n         /// Reset Caches is false.\n         /// </summary>\n-        public bool ExplicitlyLoaded\n-        {\n-            get;\n-            set;\n-        }\n+        public bool ExplicitlyLoaded { get; set; }\n \n         /// <summary>\n         /// Flag indicating whether or not the configuration is actually building.\n         /// </summary>\n-        public bool IsActivelyBuilding\n-        {\n-            get\n-            {\n-                return (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);\n-            }\n-        }\n+        public bool IsActivelyBuilding => (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "`int? {comparison} int` is [well-defined](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/using-nullable-types#operators): it returns `false`. So I still think I want this change.",
              "createdAt": "2018-06-19T18:10:26Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -264,33 +254,19 @@ private BuildRequestConfiguration(INodePacketTranslator translator)\n         /// Flag indicating whether the configuration is allowed to cache.  This does not mean that the configuration will\n         /// actually cache - there are several criteria which must for that.\n         /// </summary>\n-        public bool IsCacheable\n-        {\n-            get;\n-            set;\n-        }\n+        public bool IsCacheable { get; set; }\n \n         /// <summary>\n         /// When reset caches is false we need to only keep around the configurations which are being asked for during the design time build.\n         /// Other configurations need to be cleared. If this configuration is marked as ExplicitlyLoadedConfiguration then it should not be cleared when \n         /// Reset Caches is false.\n         /// </summary>\n-        public bool ExplicitlyLoaded\n-        {\n-            get;\n-            set;\n-        }\n+        public bool ExplicitlyLoaded { get; set; }\n \n         /// <summary>\n         /// Flag indicating whether or not the configuration is actually building.\n         /// </summary>\n-        public bool IsActivelyBuilding\n-        {\n-            get\n-            {\n-                return (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);\n-            }\n-        }\n+        public bool IsActivelyBuilding => (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done. Not sure why R# didn't want to do that, it's usually all over null prop",
              "createdAt": "2018-06-19T18:26:50Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -264,33 +254,19 @@ private BuildRequestConfiguration(INodePacketTranslator translator)\n         /// Flag indicating whether the configuration is allowed to cache.  This does not mean that the configuration will\n         /// actually cache - there are several criteria which must for that.\n         /// </summary>\n-        public bool IsCacheable\n-        {\n-            get;\n-            set;\n-        }\n+        public bool IsCacheable { get; set; }\n \n         /// <summary>\n         /// When reset caches is false we need to only keep around the configurations which are being asked for during the design time build.\n         /// Other configurations need to be cleared. If this configuration is marked as ExplicitlyLoadedConfiguration then it should not be cleared when \n         /// Reset Caches is false.\n         /// </summary>\n-        public bool ExplicitlyLoaded\n-        {\n-            get;\n-            set;\n-        }\n+        public bool ExplicitlyLoaded { get; set; }\n \n         /// <summary>\n         /// Flag indicating whether or not the configuration is actually building.\n         /// </summary>\n-        public bool IsActivelyBuilding\n-        {\n-            get\n-            {\n-                return (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);\n-            }\n-        }\n+        public bool IsActivelyBuilding => (_activelyBuildingTargets != null) && (_activelyBuildingTargets.Count > 0);",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this pattern produce better codegen? I think the old way is more readable.",
              "createdAt": "2018-06-19T17:10:11Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -557,61 +526,35 @@ public Lookup BaseLookup\n             {\n                 ErrorUtilities.VerifyThrow(!IsCached, \"Configuration is cached, we shouldn't be accessing the lookup.\");\n \n-                if (null == _baseLookup)\n-                {\n-                    _baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith);\n-                }\n-\n-                return _baseLookup;\n+                return _baseLookup ??\n+                       (_baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "R# likes one-liners (well, 2 in this case) over 4-liners. Reverted.",
              "createdAt": "2018-06-19T18:28:15Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -557,61 +526,35 @@ public Lookup BaseLookup\n             {\n                 ErrorUtilities.VerifyThrow(!IsCached, \"Configuration is cached, we shouldn't be accessing the lookup.\");\n \n-                if (null == _baseLookup)\n-                {\n-                    _baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith);\n-                }\n-\n-                return _baseLookup;\n+                return _baseLookup ??\n+                       (_baseLookup = new Lookup(Project.ItemsToBuildWith, Project.PropertiesToBuildWith));",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Going to an autoprop makes this look very wrong here. It's _used_ everywhere, but should be _set_ only in unit tests. I think I'd rather see this reverted.",
              "createdAt": "2018-06-19T17:15:42Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -452,13 +389,13 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, Tuple<string, Elem\n         /// <returns>True of the outputs were gathered successfully, false otherwise.</returns>\n         bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation parameterLocation, bool outputTargetIsItem, string outputTargetName)\n         {\n-            ErrorUtilities.VerifyThrow(_taskFactoryWrapper != null, \"Need a taskFactoryWrapper to retrieve outputs from.\");\n+            ErrorUtilities.VerifyThrow(_UNITTESTONLY_TaskFactoryWrapper != null, \"Need a taskFactoryWrapper to retrieve outputs from.\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You're right, I thought I reverted this already. Fixed.",
              "createdAt": "2018-06-19T18:29:08Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -452,13 +389,13 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, Tuple<string, Elem\n         /// <returns>True of the outputs were gathered successfully, false otherwise.</returns>\n         bool ITaskExecutionHost.GatherTaskOutputs(string parameterName, ElementLocation parameterLocation, bool outputTargetIsItem, string outputTargetName)\n         {\n-            ErrorUtilities.VerifyThrow(_taskFactoryWrapper != null, \"Need a taskFactoryWrapper to retrieve outputs from.\");\n+            ErrorUtilities.VerifyThrow(_UNITTESTONLY_TaskFactoryWrapper != null, \"Need a taskFactoryWrapper to retrieve outputs from.\");",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Preserve comment in a `/// <remarks>` ?",
              "createdAt": "2018-06-19T17:18:02Z",
              "path": "src/Build/Collections/ItemDictionary.cs",
              "diffHunk": "@@ -407,32 +396,14 @@ internal Enumerator(IEnumerable<ICollection<T>> listEnumerable)\n             /// <summary>\n             /// Get the current item\n             /// </summary>\n-            public T Current\n-            {\n-                get\n-                {\n-                    // Undefined if enumerator is before or after collection: we return null",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done",
              "createdAt": "2018-06-19T18:44:56Z",
              "path": "src/Build/Collections/ItemDictionary.cs",
              "diffHunk": "@@ -407,32 +396,14 @@ internal Enumerator(IEnumerable<ICollection<T>> listEnumerable)\n             /// <summary>\n             /// Get the current item\n             /// </summary>\n-            public T Current\n-            {\n-                get\n-                {\n-                    // Undefined if enumerator is before or after collection: we return null",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please revert this file. It's copy-\ud83c\udf5d, and these changes will make it hard to pull improvements to the base type in here.",
              "createdAt": "2018-06-19T17:22:09Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -78,12 +77,12 @@ namespace Microsoft.Build.Collections\n     /// the same time. \n     /// </summary>\n     /// <typeparam name=\"T\"></typeparam>\n-    [DebuggerTypeProxy(typeof(Microsoft.Build.Collections.HashSetDebugView<>))]\n+    [DebuggerTypeProxy(typeof(HashSetDebugView<>))]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Point. Need to fix the original source then pull back. :) Kept one line of change (removal) pasted below since it's a perf win in a critical path:\r\n\r\n _slots[i].hashCode = hashCode;",
              "createdAt": "2018-06-19T18:49:12Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -78,12 +77,12 @@ namespace Microsoft.Build.Collections\n     /// the same time. \n     /// </summary>\n     /// <typeparam name=\"T\"></typeparam>\n-    [DebuggerTypeProxy(typeof(Microsoft.Build.Collections.HashSetDebugView<>))]\n+    [DebuggerTypeProxy(typeof(HashSetDebugView<>))]",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This type appears unused. Delete it entirely?",
              "createdAt": "2018-06-19T17:23:27Z",
              "path": "src/Build/Collections/Triple.cs",
              "diffHunk": "@@ -18,53 +15,30 @@ namespace Microsoft.Build.Collections\n     /// <typeparam name=\"C\">Type of third object</typeparam>\n     internal struct Triple<A, B, C>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good catch",
              "createdAt": "2018-06-19T18:50:01Z",
              "path": "src/Build/Collections/Triple.cs",
              "diffHunk": "@@ -18,53 +15,30 @@ namespace Microsoft.Build.Collections\n     /// <typeparam name=\"C\">Type of third object</typeparam>\n     internal struct Triple<A, B, C>",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There's been a [Framework `WeakReference<T>`](https://docs.microsoft.com/en-us/dotnet/api/system.weakreference-1?view=netframework-4.7.1#applies-to) since 4.5. Can we switch to that and just delete this?",
              "createdAt": "2018-06-19T17:25:25Z",
              "path": "src/Build/Collections/WeakReference.cs",
              "diffHunk": "@@ -39,7 +34,7 @@ internal class WeakReference<T>\n         /// </summary>\n         internal WeakReference(T target)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Removed. Audited all WeakReference usage in the codebase. OpportunisticIntern.cs could really benefit from WeakReference<T> but because it's in Shared it can't use it until the last of the .NET 3.5 code back compat is removed. I did update OpportunisticIntern.cs in the usual ways; please review after the next push.",
              "createdAt": "2018-06-19T19:30:52Z",
              "path": "src/Build/Collections/WeakReference.cs",
              "diffHunk": "@@ -39,7 +34,7 @@ internal class WeakReference<T>\n         /// </summary>\n         internal WeakReference(T target)",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you get rid of\r\n\r\n```diff\r\n+// </copyright>\r\n+// <summary>Definition of ProjectSdkElement class.</summary>\r\n+//-----------------------------------------------------------------------\r\n```\r\n\r\n?",
              "createdAt": "2018-06-19T17:30:37Z",
              "path": "src/Build/Construction/ProjectSdkElement.cs",
              "diffHunk": "@@ -1,4 +1,11 @@\n-\ufeffusing Microsoft.Build.Internal;\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+//-----------------------------------------------------------------------\n+// </copyright>\n+// <summary>Definition of ProjectSdkElement class.</summary>\n+//-----------------------------------------------------------------------",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2018-06-19T18:50:34Z",
              "path": "src/Build/Construction/ProjectSdkElement.cs",
              "diffHunk": "@@ -1,4 +1,11 @@\n-\ufeffusing Microsoft.Build.Internal;\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+//-----------------------------------------------------------------------\n+// </copyright>\n+// <summary>Definition of ProjectSdkElement class.</summary>\n+//-----------------------------------------------------------------------",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since it's an autoprop with no setter, you can delete this comment",
              "createdAt": "2018-06-19T17:42:25Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -881,20 +861,8 @@ internal int MaxNodeCount\n         /// - So that the owner of this project collection can force the XML to be loaded again\n         /// from disk, by doing <see cref=\"UnloadAllProjects\"/>.\n         /// </summary>\n-        internal ProjectRootElementCache ProjectRootElementCache\n-        {\n-            get\n-            {\n-                // no locks required because this field is only set in the constructor.\n-                return _projectRootElementCache;\n-            }\n-\n-            private set\n-            {\n-                // no locks required because this field is only set in the constructor.\n-                _projectRootElementCache = value;\n-            }\n-        }\n+        // No locks required because this field is only set in the constructor.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done",
              "createdAt": "2018-06-19T18:51:04Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -881,20 +861,8 @@ internal int MaxNodeCount\n         /// - So that the owner of this project collection can force the XML to be loaded again\n         /// from disk, by doing <see cref=\"UnloadAllProjects\"/>.\n         /// </summary>\n-        internal ProjectRootElementCache ProjectRootElementCache\n-        {\n-            get\n-            {\n-                // no locks required because this field is only set in the constructor.\n-                return _projectRootElementCache;\n-            }\n-\n-            private set\n-            {\n-                // no locks required because this field is only set in the constructor.\n-                _projectRootElementCache = value;\n-            }\n-        }\n+        // No locks required because this field is only set in the constructor.",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could get rid of `result` entirely, right?\r\n\r\n```c#\r\n             if (!_dictionary.TryGetValue(key, out WeakReference<V> wrappedValue))\r\n             {\r\n                 value = null;\r\n                 return false;\r\n             }\r\n```",
              "createdAt": "2018-06-19T19:57:36Z",
              "path": "src/Build/Collections/WeakValueDictionary.cs",
              "diffHunk": "@@ -175,15 +174,13 @@ public bool TryGetValue(K key, out V value)\n                 return true;\n             }\n \n-            value = wrappedValue.Target;\n-\n-            if (value == null)\n+            if (!wrappedValue.TryGetTarget(out value))\n             {\n                 _dictionary.Remove(key);\n                 return false;\n             }\n \n-            return result;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Needed near the top of the method as a return from a TryGetValue()",
              "createdAt": "2018-06-19T20:04:00Z",
              "path": "src/Build/Collections/WeakValueDictionary.cs",
              "diffHunk": "@@ -175,15 +174,13 @@ public bool TryGetValue(K key, out V value)\n                 return true;\n             }\n \n-            value = wrappedValue.Target;\n-\n-            if (value == null)\n+            if (!wrappedValue.TryGetTarget(out value))\n             {\n                 _dictionary.Remove(key);\n                 return false;\n             }\n \n-            return result;",
              "author": {
                "login": "erikmav"
              }
            },
            {
              "body": "Oh wait duh I get it. Done in next push",
              "createdAt": "2018-06-19T20:05:35Z",
              "path": "src/Build/Collections/WeakValueDictionary.cs",
              "diffHunk": "@@ -175,15 +174,13 @@ public bool TryGetValue(K key, out V value)\n                 return true;\n             }\n \n-            value = wrappedValue.Target;\n-\n-            if (value == null)\n+            if (!wrappedValue.TryGetTarget(out value))\n             {\n                 _dictionary.Remove(key);\n                 return false;\n             }\n \n-            return result;",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Was this intended to be a breaking change? This seems to have broken our usage of the indexer. @AndyGerlicher ",
              "createdAt": "2018-07-17T20:19:40Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -496,7 +475,7 @@ internal bool ResultBelongsToRootRequest\n         /// <returns>The results for the specified target</returns>\n         /// <exception>KeyNotFoundException is returned if the specified target doesn't exist when reading this property.</exception>\n         /// <exception>ArgumentException is returned if the specified target already has results.</exception>\n-        public ITargetResult this[string target]\n+        public TargetResult this[string target]",
              "author": {
                "login": "uniqueiniquity"
              }
            }
          ]
        }
      }
    ]
  }
}