{
  "number": 6640,
  "title": "Specify project info in affinity missmatch error",
  "body": "Improves an obscure error message. Cherry-picked this commit out of #6635 because 16.11 loc window is closed.",
  "state": "MERGED",
  "createdAt": "2021-06-30T00:01:31Z",
  "updatedAt": "2021-08-11T09:58:04Z",
  "closedAt": "2021-08-11T09:58:03Z",
  "mergedAt": "2021-08-11T09:58:03Z",
  "additions": 48,
  "deletions": 30,
  "changedFiles": 16,
  "headRefName": "improve_affinity_mismatch_message",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d9670e88b461702d15e57723a11fcbc68bbec8a6",
          "message": "Specify project config in affinity missmatch error",
          "committedDate": "2021-06-29T23:59:18Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa86176a8249c81a346b8422239690040f87abd2",
          "message": "Update src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
          "committedDate": "2021-07-13T22:46:52Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Seems to be depending on a new ErrorUtilies [method](https://github.com/dotnet/msbuild/pull/6569/files#diff-c1611180fcf63ae9d87c44ab3bc36b86a4602afedcb59cfe8cb5c9988b1fe823R50-R56) introduced in #6569. Let's just wait until that PR gets into 16.11 and 16.11 merges back into main.",
        "createdAt": "2021-06-30T00:05:06Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-08-09T14:32:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-08-09T14:33:08Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "...in the build process?",
              "createdAt": "2021-07-05T18:48:39Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1760,7 +1760,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,\n \n                         if (affinityMismatch)\n                         {\n-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"AffinityConflict\", requestAffinity, existingRequestAffinity)));\n+                            ErrorUtilities.VerifyThrowInternalError(\n+                                _configCache.HasConfiguration(request.ConfigurationId),\n+                                \"A request should have a configuration if it makes it this far into the scheduled\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "```suggestion\r\n                                \"A request should have a configuration if it makes it this far in the build process.\");\r\n```",
              "createdAt": "2021-07-13T22:46:44Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1760,7 +1760,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,\n \n                         if (affinityMismatch)\n                         {\n-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"AffinityConflict\", requestAffinity, existingRequestAffinity)));\n+                            ErrorUtilities.VerifyThrowInternalError(\n+                                _configCache.HasConfiguration(request.ConfigurationId),\n+                                \"A request should have a configuration if it makes it this far into the scheduled\");",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This shouldn't be too perf sensitive, but you should be able to avoid one allocation if you use IEnumerable.Enumerate (and EscapedValue for the value).",
              "createdAt": "2021-07-05T18:49:54Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1760,7 +1760,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,\n \n                         if (affinityMismatch)\n                         {\n-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"AffinityConflict\", requestAffinity, existingRequestAffinity)));\n+                            ErrorUtilities.VerifyThrowInternalError(\n+                                _configCache.HasConfiguration(request.ConfigurationId),\n+                                \"A request should have a configuration if it makes it this far into the scheduled\");\n+\n+                            var config = _configCache[request.ConfigurationId];\n+                            var globalProperties = string.Join(\n+                                \";\",\n+                                config.GlobalProperties.ToDictionary().Select(kvp => $\"{kvp.Key}={kvp.Value}\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also, I don't think there is, but this is making me think there should be an overload of string.Join that takes a character, an enumerable, and a function and calls the function on each part of the enumerable then joins them together with the character. It would make this both cleaner and more efficient. What do you think?",
              "createdAt": "2021-07-05T18:51:05Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1760,7 +1760,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,\n \n                         if (affinityMismatch)\n                         {\n-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"AffinityConflict\", requestAffinity, existingRequestAffinity)));\n+                            ErrorUtilities.VerifyThrowInternalError(\n+                                _configCache.HasConfiguration(request.ConfigurationId),\n+                                \"A request should have a configuration if it makes it this far into the scheduled\");\n+\n+                            var config = _configCache[request.ConfigurationId];\n+                            var globalProperties = string.Join(\n+                                \";\",\n+                                config.GlobalProperties.ToDictionary().Select(kvp => $\"{kvp.Key}={kvp.Value}\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "All good points, but I'd delay these changes until they actually hurt perf.",
              "createdAt": "2021-07-13T22:45:43Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1760,7 +1760,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,\n \n                         if (affinityMismatch)\n                         {\n-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"AffinityConflict\", requestAffinity, existingRequestAffinity)));\n+                            ErrorUtilities.VerifyThrowInternalError(\n+                                _configCache.HasConfiguration(request.ConfigurationId),\n+                                \"A request should have a configuration if it makes it this far into the scheduled\");\n+\n+                            var config = _configCache[request.ConfigurationId];\n+                            var globalProperties = string.Join(\n+                                \";\",\n+                                config.GlobalProperties.ToDictionary().Select(kvp => $\"{kvp.Key}={kvp.Value}\"));",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}