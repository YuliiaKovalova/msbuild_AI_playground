{
  "number": 6804,
  "title": "Log message arguments for warnings and errors",
  "body": "We were only logging the arguments for messages, but not for errors or warnings. Fortunately we can fix this and avoid incrementing the binlog format version.\r\n\r\nFirst this moves the logic to set the `Arguments` flag into a common code path close to `Message`, and only sets the flag when the arguments are present and we're either a message, warning or error. Previously it was only set for messages (and all types derived from `Message`).\r\n\r\nTechnically all `BuildStatusEventArgs` and `CustomBuildEventArgs` also inherit from `LazyFormattedBuildEventArgs`, but the serialization for them is fully manual and we don't even write the message for them at all. We ensure that if by any accident an instance of `BuildStatus` or some other random type such as `CustomBuildEventArgs` sets the `Arguments`, we don't set the flag because we're not going to be writing arguments for those.\r\n\r\nFor reference, the inheritance hierarchy of all event args is here:\r\nhttps://github.com/dotnet/msbuild/blob/864047de115b74992485b08c5d2eaa43ca95ee68/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L146-L175\r\n\r\nWe extract a method to log the arguments, and call it for errors and warnings.\r\n\r\nNote that this doesn't change the `BuildEventArgsReader` at all, which proves that a file format version change is not necessary.\r\n\r\nThis also ensures that the tests for error, warning and message hit both code paths, with and without arguments.\r\n\r\nI've also verified that the codegen for the fancy new pattern matching syntax I used does what I want:\r\n![image](https://user-images.githubusercontent.com/679326/131754759-44c4e7d8-2f36-42ca-89eb-3eb11765c76a.png)\r\n\r\nFixes https://github.com/dotnet/msbuild/issues/6790.\r\n\r\n![image](https://user-images.githubusercontent.com/679326/131754535-cf2705fa-bbd5-4fe5-a646-3d82c1948ff6.png)\r\n\r\nTo test, I used an inline task that logs an error with format arguments:\r\nhttps://github.com/KirillOsenkov/Misc/blob/main/InlineTask.proj",
  "state": "MERGED",
  "createdAt": "2021-09-01T22:42:53Z",
  "updatedAt": "2021-09-17T18:15:59Z",
  "closedAt": "2021-09-17T12:37:18Z",
  "mergedAt": "2021-09-17T12:37:18Z",
  "additions": 57,
  "deletions": 27,
  "changedFiles": 2,
  "headRefName": "dev/kirillo/errorArguments",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Logging",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f03e404144e7f14b97031beb3480f5e83a53936e",
          "message": "Log message arguments for warnings and errors\n\nWe were only logging the arguments for messages, but not for errors or warnings. Fortunately we can fix this and avoid incrementing the binlog format version.\n\nFirst this moves the logic to set the Arguments flag into a common codepath close to Message, and only sets the flag when the arguments are present and we're either a message, warning or error. Previously it was only set for messages (and all types derived from Message).\n\nTechnically all BuildStatusEventArgs and CustomBuildEventArgs also inherit from LazyFormattedBuildEventArgs, but the serialization for them is fully manual and we don't even write the message for them at all. We ensure that if by any accident an instance of BuildStatus or some other random type such as CustomBuildEventArgs sets the Arguments, we don't set the flag because we're not going to be writing arguments for those.\n\nWe extract a method to log the arguments, and call it for errors and warnings.\n\nNote that this doesn't change the BuildEventArgsReader at all, which proves that a file format version change is not necessary.\n\nThis also ensures that the tests for error, warning and message hit both codepaths, with and without arguments.\n\nFixes https://github.com/dotnet/msbuild/issues/6790.",
          "committedDate": "2021-09-01T22:35:37Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d28b596caaa93c209229fb0f128f4878b17b1b25",
          "message": "Use pattern matching\n\nCo-authored-by: Drew Noakes <git@drewnoakes.com>",
          "committedDate": "2021-09-14T20:05:24Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "KirillOsenkov@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI @jimmylewis ",
        "createdAt": "2021-09-01T22:46:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Could you share what file this is that caused the original issue to be filed? It looks like it came from a .targets file?\r\n\r\nI'd look at the inline task:\r\nhttps://github.com/KirillOsenkov/Misc/blob/main/InlineTask.proj",
        "createdAt": "2021-09-13T23:36:21Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The original was an error in MicroBuild signing, they pass arguments to the message when logging an error. The binlog had {0} instead of the actual argument values.",
        "createdAt": "2021-09-14T00:33:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I'd look at the inline task:\r\n\r\nBecause it was coming from a .targets file I was wondering if there was an explicit <Error that contained a {0}",
        "createdAt": "2021-09-14T19:28:51Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if it makes more sense to write `0` if arguments.Length == 0, the reason being that if you expect some list of arguments and get nothing, that's unexpected. If you get `0`, that's at least a valid answer.",
              "createdAt": "2021-09-13T16:21:27Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -626,7 +623,23 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru\n             }\n         }\n \n-        private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e, BuildEventArgsFieldFlags flags, bool writeMessage = true, bool writeImportance = false)\n+        private void WriteArguments(object[] arguments)\n+        {\n+            if (arguments == null || arguments.Length == 0)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, we actually can\u2019t do that because the reader doesn\u2019t expect to read the argument count integer if the flags don\u2019t include the Arguments. The Flags enum that we write at the beginning of the record defines whether we\u2019ll be writing the argument block at all, including the argument count. The absense of arguments applies whether it\u2019s null or empty.",
              "createdAt": "2021-09-13T17:41:52Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -626,7 +623,23 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru\n             }\n         }\n \n-        private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e, BuildEventArgsFieldFlags flags, bool writeMessage = true, bool writeImportance = false)\n+        private void WriteArguments(object[] arguments)\n+        {\n+            if (arguments == null || arguments.Length == 0)",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Also the absense of arguments is the vast majority of cases, so not writing the zero saves a lot of space.",
              "createdAt": "2021-09-13T17:42:50Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -626,7 +623,23 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru\n             }\n         }\n \n-        private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e, BuildEventArgsFieldFlags flags, bool writeMessage = true, bool writeImportance = false)\n+        private void WriteArguments(object[] arguments)\n+        {\n+            if (arguments == null || arguments.Length == 0)",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Cool! Didn't know you can do that \ud83d\ude42",
              "createdAt": "2021-09-13T16:23:01Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -697,6 +705,15 @@ private static BuildEventArgsFieldFlags GetBuildEventArgsFieldFlags(BuildEventAr\n             if (writeMessage)\n             {\n                 flags |= BuildEventArgsFieldFlags.Message;\n+\n+                // We're only going to write the arguments for messages,\n+                // warnings and errors. Only set the flag for these.\n+                if (e is LazyFormattedBuildEventArgs lazyFormattedBuildEventArgs &&\n+                    lazyFormattedBuildEventArgs.RawArguments is { Length: > 0 } &&",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can take this even further if you want, doing away with the temporary variable altogether and using a single pattern:\r\n\r\n```suggestion\r\n                if (e is LazyFormattedBuildEventArgs { RawArguments: { Length: > 0 } } and\r\n                    (BuildMessageEventArgs or BuildWarningEventArgs or BuildErrorEventArgs))\r\n```",
              "createdAt": "2021-09-14T10:39:38Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -697,6 +705,15 @@ private static BuildEventArgsFieldFlags GetBuildEventArgsFieldFlags(BuildEventAr\n             if (writeMessage)\n             {\n                 flags |= BuildEventArgsFieldFlags.Message;\n+\n+                // We're only going to write the arguments for messages,\n+                // warnings and errors. Only set the flag for these.\n+                if (e is LazyFormattedBuildEventArgs lazyFormattedBuildEventArgs &&\n+                    lazyFormattedBuildEventArgs.RawArguments is { Length: > 0 } &&\n+                    (e is BuildMessageEventArgs or BuildWarningEventArgs or BuildErrorEventArgs))",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}