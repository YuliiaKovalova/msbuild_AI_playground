{
  "number": 6174,
  "title": "Tasks `Log.HasLoggedError` now respects `MSBuildWarningsAsErrors`",
  "body": "Fixes #5511\r\n\r\n### Context\r\nTasks have a Log.HasLoggedErrors property that does not respect warnings that were thrown as errors when listed under `MSBuildWarningsAsErrors`.\r\n\r\n### Changes Made\r\n- IBuildEngine8 has a hashset of warnings to be converted into errors.\r\n- ILoggingService has a method to extract warnings to be logged as errors based on the build context.\r\n- TaskHostConfiguration had warningsaserrors hashset added to it so that the OOPTaskHostNode can set up properly.\r\n\r\n### Testing\r\n- `TaskReturnsTrueButLogsError_BuildShouldContinue`\r\n- `WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError`\r\n- `TestTranslationWithWarningsAsErrors`\r\n- [x] Confirmed this fixes the repro in the linked issue.\r\n- [x] Need to test batched builds, as a `TaskHost` is generated per 'bucket'\r\n\r\n### Notes\r\nComment from Rainer in previous PR about this: https://github.com/dotnet/msbuild/pull/5957 \r\n\r\n> The PR that introduced warning-as-error is #1355--#1928 extended it to allow the project level properties.\r\n> \r\n> Since that's done in the logging infrastructure rather than at the point of logging, I think that's the problem. Unfortunately I don't know if there's an easy way to move it. Can you investigate that angle? Is the warning-as-errors stuff available in TaskHost and if not how hard would it be to get it there?\r\n> \r\n> I don't think we should attack the problem for TaskLoggingHelper alone--if you attack it at the IBuildEngine API layer, it'll work for everything, not just tasks that use the helper classes.",
  "state": "MERGED",
  "createdAt": "2021-02-18T21:49:34Z",
  "updatedAt": "2021-03-13T00:39:10Z",
  "closedAt": "2021-03-13T00:39:07Z",
  "mergedAt": "2021-03-13T00:39:07Z",
  "additions": 771,
  "deletions": 150,
  "changedFiles": 20,
  "headRefName": "warnaserr-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8ca466df1e302b14ace01b3337ec6d2f9723aa2f",
          "message": "Add IBuildEngine8 with a hashset of all warnings to be logged as errors",
          "committedDate": "2021-02-08T23:50:02Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff95db2cc8b1fe48a7f4fbcf63f0097744c78bb9",
          "message": "Add GetWarningsAsErrors method to ILoggingService. TaskLoggingHelper checks BuildEngine.WarningsAsErrors before logging warnings. TaskHost calls GetWarningsAsErrors from ILoggingService",
          "committedDate": "2021-02-09T00:55:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16cd7f0db175ddfddda394753c44642ee3e9a9db",
          "message": "Try adding warningsaserrors into taskhostconfiguration so OOP taskhost knows what warningsaserrors are.",
          "committedDate": "2021-02-16T20:10:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b61f12320ad8a8f6a362784bd0d343e34c8bd7b",
          "message": "TaskHostConfiguration now translates warningsaserrors",
          "committedDate": "2021-02-16T22:15:48Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "07fbbb71588fc1af75c029e44f8bd04afb0b47fc",
          "message": "Update src/Utilities/Task.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-02-19T21:25:58Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8da9849d121f7617940ceae710313cdf4178a98a",
          "message": "run build.cmd and update ref files",
          "committedDate": "2021-02-19T22:36:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f587903a7509acf7e9912e283dea328a1ca98e9",
          "message": "WarningsAsErrors can be null if not specified",
          "committedDate": "2021-02-19T23:18:12Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf90ca0f1628c724d1e9f9c4f87806954c4808b5",
          "message": "Null check on warningsaserrors instead of buildengine",
          "committedDate": "2021-02-19T23:22:48Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fda18f5ab3f4c59d5dea304d6c2f5e144cc15ce1",
          "message": "Unit Test: Add check for tasks logging warnings that are turned into errors. Add Task that logs a warning and returns !Log.HasLoggedErrors (as standard tasks tend to do)",
          "committedDate": "2021-02-19T23:24:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a93c5a74eb58278461e71d537795d8d603c316a",
          "message": "Ensure build stops when task logs a warning->error",
          "committedDate": "2021-02-19T23:43:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cdb831e3aa6cbc5e2d22c870bf7b7f85f331e4a3",
          "message": "Add test for translation of taskhostconfiguration and warningsaserrors",
          "committedDate": "2021-02-20T00:26:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6cd307413c9b7dab46edb8d6a7385b8cd26cbe60",
          "message": "Add test that shows even if a task logs an error but returns true the build will continue. Add custom task that returns and logs what you want.",
          "committedDate": "2021-02-23T20:31:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53c5b0e28d69c2ec36bfd065e776619f10ce077d",
          "message": "BuildEngine may not be an IBE8",
          "committedDate": "2021-02-23T20:53:27Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4af8ce6d0067c798965982a3fd4c765b641a61ba",
          "message": "Exclude warnings->messages from warnings->errors because the former takes priority. Cache the hashset in TaskHost",
          "committedDate": "2021-02-23T23:28:23Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b396ed50c966f23cc83019d34945f5c78827a734",
          "message": "Consider when WarningsAsErrors is an empty set that means we treat ALL warnings as errors.\nAdd tests verifying various builds and results for warnings as errors",
          "committedDate": "2021-02-24T01:10:56Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "764df599151350b9a012be50e3451a8ed6498f10",
          "message": "Properly remove all warningsasmessages from warningsaserrors. handle case where an empty set means all warnings are errors. Rename function for clarity",
          "committedDate": "2021-02-25T18:16:53Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fdd2419a607f16f984a63879b588bbe37a700566",
          "message": "Add customization to what CustomLogAndReturn task returns",
          "committedDate": "2021-03-01T19:50:22Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d7b16ac30219a9d6b849f71702804df16bf8c37",
          "message": "Finalize tests. Remove test that _should not work but does_.",
          "committedDate": "2021-03-01T21:26:07Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83f1b667ba7afc8e24f55bfdbac28ce51c9b17f0",
          "message": "Code review suggestion",
          "committedDate": "2021-03-01T23:44:57Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63be12632b005fb27ec7fc89ee63c5e6060b98bd",
          "message": "Minor code cleanup",
          "committedDate": "2021-03-02T22:44:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28f55cb044cf09485bc13d6f6bf8193c9c6f1e69",
          "message": "Explicitly call last overload of LogError",
          "committedDate": "2021-03-02T23:30:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "787982a278a459048d09c3855ff414bb71d91bea",
          "message": "Add null check for taskloggingcontext for test compatibility",
          "committedDate": "2021-03-03T00:40:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2c230cd581a8c753447c7fc2dfad1a7cd4903c1",
          "message": "Add tests for task-batches",
          "committedDate": "2021-03-05T20:55:14Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7aa9763f147a3fb10dc9c1f16aaf235f708cf312",
          "message": "Minor PR feedback",
          "committedDate": "2021-03-08T02:21:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "febb509393b9aac8595762ee1017a76941973995",
          "message": "Add arg names to taskhostconfig tests",
          "committedDate": "2021-03-08T02:56:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ccb51c1e7d6cb4c13ee6098896edbf49a76d8f7",
          "message": "Reword 'thrown' to 'logged' to avoid confusion",
          "committedDate": "2021-03-08T02:59:18Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7670dea33cb66c08c3cafdaa359db0b3b77e7a36",
          "message": "IBE8 now has ShouldTreatWarningAsError method",
          "committedDate": "2021-03-08T18:04:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a485da33022ae5d427c0b502be7fd546f396cd2",
          "message": "WarningsAsErrors set turned into ICollection (taskhost side)",
          "committedDate": "2021-03-08T18:19:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "924423b87583bf90c8d1583dac13b2cf95fb483a",
          "message": "Binary translator converts an ICollection of strings. OOPTHN now translates ICollection",
          "committedDate": "2021-03-08T19:31:48Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a969d83f19a59a96faa4fa82473781881abc6ff3",
          "message": "Rename arg to collection",
          "committedDate": "2021-03-08T19:33:37Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b65e272f3bd1230dda6128dafce3a53008ea7845",
          "message": "Make ICollection translate method more generic",
          "committedDate": "2021-03-08T20:29:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9856364b555efc41db84b3f88581453ab6d75a23",
          "message": "PR changes. Adding comments.",
          "committedDate": "2021-03-10T23:26:13Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind This is a great idea imo. This begs a few questions, like what is the key in this dictionary. It could be <string, string>, then the value would have to be a semicolon delimited list, then tasks are parsing more strings and therefore allocating. \r\n\r\nPerhaps <string, object>? Where the task that needs to use, say, dictionary[\"WarningsAsErrors] would know that the value is a list and would perform (dictionary[\"WarningsAsErrors] as List<string>).contains(\"msb1234\") or something equivalent?\r\n\r\nThis might be complicated for the OOP task host that needs to translate these objects through the binary formatter. And we may need to special case every object. I'm slowly convincing myself <string, object> is a bad idea.\r\n\r\n@cdmihai thoughts?",
        "createdAt": "2021-02-19T21:25:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Well, it has to translate them through the BinaryFormatter now, but that has to change eventually. I do like the reusability of `object` over string, but maybe as a middle ground, <string, serializable object>? That makes calling Translate on them relatively easy but avoids the excess allocations from my suggestion.\r\n\r\nAlso, if we're going this way, one thing to not do in this PR but possibly consider for the future is whether we could have a second dictionary of <string, delegate> that we could use for methods. Smaller win, in my view, for more ugliness, but that would hopefully mean we could stop making more IBuildEngines. I live for the day when you can just say `if (BuildEngine.<nameOfDict>.TryGet(<key>, out ...)) ... without needing to check whether your BuildEngine is a new enough BuildEngine. That's probably a pipe dream, though.",
        "createdAt": "2021-02-19T22:41:03Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Regarding the `dict<string, object>` to avoid revving up the IBE interface, I don't like it :). Users would have to know the magic string and then explicitly cast the delegate object to its actual type in order to use the delegate's return type and arg types. I'd rather we add one last IBE interface that has a reference to an abstract class containing the functionality of future IBEs: `IBuildEngine9.EngineServices`, with `EngineServices` an abstract class that keeps on accumulating APIs.\r\n\r\nThe downside to the abstract class approach is that newer tasks that depend on a new `EngineServices` API won't be able to function as easily with older versions of msbuild that do not have that API. With the current interface numbering scheme and with the `dict<string, object>` scheme, tasks can query functionality at runtime. With the abstract class, tasks that really want back-compat (supporting older msbuilds) will have to use reflection on `EngineServices`. On the other hand, I don't think it's that common for tasks to support older engines and the few that do can use reflection.\r\n\r\nBut let's not design / implement this in this PR.",
        "createdAt": "2021-02-22T21:41:22Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Currently, users need to know the exact name of property they need, which is the semantic equivalent of needing to know the exact string. To be clear, I consider Dictionary<string, delegate> as the more controversial and probably undesirable cousin of having Dictionary<string, object : Translatable> with the values specifically for things like properties. You presumably know what type they should be if you're trying to use them, just as you would need to figure out the type of a property. Letting it be object instead of string makes it more flexible if we need unusual objects later.\r\n\r\nI do like the abstract class plan, although a simpler approach might be to have IBuildEngine9 (possibly renamed) be an abstract class itself, and have it extend IBuildEngine8 and be extended as if it were an interface. As long as we provide a default implementation for everything, it should prevent people from being broken just for extending it. Reflection is kinda slow.\r\n\r\nDo you want to set up a meeting to talk about it?",
        "createdAt": "2021-02-22T23:02:44Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I created https://github.com/dotnet/msbuild/issues/6183 to track discussion for making a more generalized IBuildEngine interface.\r\n\r\n@Forgind, you created IBuildEngine7, how do you know whether that new property works in a OOP task host node? Basically, where does OOPTHN get this value if the user sets it?\r\n\r\nI was under the impression we needed to pass that value to the OOPTaskHostNode through `TaskHostConfiguration`.\r\n/cc @cdmihai for this question as well.",
        "createdAt": "2021-02-23T01:03:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'm slightly confused by your question, so I'll answer what I think you're asking. Let me know if I'm wrong.\r\n\r\nWherever I have access to the BuildEngine, I can say `if be is IBuildEngine7 be7` (or the equivalent) then use be7 to access my property.\r\n\r\nAn out-of-proc TaskHost node is an IBuildEngine(7), so I can try to access properties directly without casting. A newer TH will succeed, and an older TH won't have the newer code that tries.\r\n\r\nDid that answer your question?",
        "createdAt": "2021-02-23T16:38:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Yes~ish. I see how my question was confusing. IBE7 added a property that a task could set on its own. IBE8 will need information passed to it that a task can then access. From a taskhost perspective it's not difficult at all. OOPTHN is a slightly different story.\r\n\r\nMy confusion comes from the OOPTHN and how it receives this data. From what I could gather (and please correct me if I'm wrong /cc: @cdmihai or @KirillOsenkov \ud83d\ude42), an OOPTHN needs to be passed initialization data in the form of a `TaskHostConfigurationData`. See here: https://github.com/dotnet/msbuild/blob/master/src/MSBuild/OutOfProcTaskHostNode.cs#L604. So that's how I need to give it the warnings that will be translated into errors.\r\n\r\nAnother question, do we not have tests for OOPTHN? I can't seem to find anything testing that specifically. Or is testing the translation data enough?",
        "createdAt": "2021-02-23T20:03:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: Test failures have to do with `WarningsAsMessages`. Apparently that takes precedence over `WarningsAsErrors`.",
        "createdAt": "2021-02-23T21:30:48Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos, we have the same impression on how OOPTHN gets its data. But always leave room for surprise ...",
        "createdAt": "2021-02-23T22:37:53Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Adding which warnings should be treated as errors to the TaskHostConfiguration sounds right to me.",
        "createdAt": "2021-02-23T23:34:42Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Current failing tests, it repros on running the cibuild bootstrapped msbuild script.\r\n```\r\nMSB4254: The MSBuild task is building project(s) \"\"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\xgsgpevo.slz\\tmpd327c2f9b2b44a92b1ac89182251db5b.tmp\"\" which are not specified in the ProjectReference item. In isolated builds this probably means that the references are not explicitly specified as a ProjectReference item in \"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\xgsgpevo.slz\\tmp65202fb4e3174d70a0ec0ef0aa7c0560.tmp\"  C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\xgsgpevo.slz\\tmp65202fb4e3174d70a0ec0ef0aa7c0560.tmp\r\n```\r\n\r\nLocally the project looks fine. I'll try debugging the build script.",
        "createdAt": "2021-02-25T19:25:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This is from a test? Is it a new test? From what I can tell, that means you have project A that invokes the MSBuild task on project B, except B isn't a \"known\" reference to A, specified via ProjectReference. Fix should be as simple as adding a ProjectReference from A to B.",
        "createdAt": "2021-02-26T16:33:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind these are from preexisting tests such as:\r\n\r\nUndeclaredReferenceEnforcementShouldFailOnPreviouslyBuiltButUndeclaredReferences\r\nUndeclaredReferenceEnforcementShouldFailOnUndeclaredReference \r\nCacheEnforcementShouldFailWhenReferenceWasNotPreviouslyBuiltWithoutContinueOnError\r\n\r\nUnfortunately I need to download dogfood VS to debug this. I tried deploying a bootstrapped msbuild on a pre-stringtools commit and hit some errors. (296b3671db)",
        "createdAt": "2021-02-26T21:38:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Those are the graph /isolate constraints. I would not expect this PR to touch any of that, so it's pretty weird that they're affected. Could mean that extra msbuild task calls get executed now whereas on master they're not.",
        "createdAt": "2021-02-26T21:44:19Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai I suspect it has something to do with `ContinueOnError`, that's the only thread I can see that seems remotely related.",
        "createdAt": "2021-02-26T21:48:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Just looking at the first one, it's supposed to throw that error, so the surprise isn't _that_ it's throwing the error but that it isn't catching it and returning \"test passed.\" In my quick pass through this PR, nothing stood out as a likely culprit. Since they're preexisting tests, maybe reset and run the tests with each commit one-by-one? Maybe AssertBuild works subtly differently now, and it's throwing errors in a different order than before?",
        "createdAt": "2021-02-26T22:02:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I hadn't considered testing commit by commit, good idea.",
        "createdAt": "2021-02-26T22:05:31Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: Didn't see this fail in 997b8fc781.",
        "createdAt": "2021-02-27T00:49:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Turns out that test wasn't actually failing, I was failing to read the log properly. Added a null check for test compat.",
        "createdAt": "2021-03-03T18:35:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "So I've been having some shower thoughts: do we need to even expose the set/collection of warnings as errors? \r\n\r\nWhat if we just add `bool ShouldLogWarningAsError(string code)` on `IBuildEngine8` instead and then the implementation can return true if you have all warnings as errors, or hit the HashSet for specific ones?",
        "createdAt": "2021-03-06T20:45:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I don't see anything wrong with that.",
        "createdAt": "2021-03-07T16:57:20Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@KirillOsenkov That was the original implementation. One issue with that (at the time) was the OOPTaskHost not having access to a logging service and therefore not knowing what would be converted from warn->err.\r\n\r\nI think we've solved that at this point by giving OOPTHN a collection of warnings to be treated as errors. So we can come back to that version of IBE8 and a tasklogginghelper no longer needs to manually check.",
        "createdAt": "2021-03-08T02:20:21Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Sounds good. And what do you think about replacing the `HashSet<string>` with `ICollection<string>` type?\r\n\r\nApologies if I'm being pedantic :)",
        "createdAt": "2021-03-08T04:13:03Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Sorry I haven't had a chance to look at this sooner, let me dive into it...",
        "createdAt": "2021-03-08T17:39:49Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl To be fair, I should have pinged sooner. Just a heads up, I'm about to change IBE8 to have `bool ShouldLogWarningAsError(string code)` instead of the set containing the warning codes as mentioned above.",
        "createdAt": "2021-03-08T17:55:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@KirillOsenkov (and any other reviewers familiar with the binary formatter) Requesting a specific pass over my last four commits. Having WarningsAsErrors be an ICollection required adding an overload to the ITranslator interface and I'd like to be sure that the way I did it is okay. I mostly looked at how it was done with an IList and went with it. Looks good to me and it passes tests but I'd like to be sure.",
        "createdAt": "2021-03-08T21:58:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Looks good to me.",
        "createdAt": "2021-03-08T22:26:56Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public IBuildEngine8 BuildEngine8 => (IBuildEngine8)BuildEngine;\r\n```",
              "createdAt": "2021-02-18T23:25:20Z",
              "path": "src/Utilities/Task.cs",
              "diffHunk": "@@ -94,6 +94,11 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)\n         /// </summary>\n         public IBuildEngine7 BuildEngine7 => (IBuildEngine7)BuildEngine;\n \n+        /// <summary>\n+        /// Retrieves the <see cref=\"IBuildEngine8\" /> version of the build engine interface provided by the host.\n+        /// </summary>\n+        public IBuildEngine7 BuildEngine8 => (IBuildEngine8)BuildEngine;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this may not work with tasks that implement ITask directly. Can you please add another test just like this one but calling a task implementing ITask directly?",
              "createdAt": "2021-02-22T23:17:41Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Interesting. Going to brain dump this before making the test.\r\n\r\nSomeone implementing ITask wouldn't have access to a TaskLoggingHelper (like Task does) and thus have to log a warning through the `BuildEngine.LogWarningEvent`. The build engine would log it to the logging service as a warning and at `LoggingService.RouteBuildEvent` it would be translated into an error.\r\n\r\nBut I think the build would continue because it entirely depends on what the task returned right? So long as the task returns true despite logging an error, the build will complete.\r\n\r\nQuestion, what context would someone implement itask vs inheriting from task?",
              "createdAt": "2021-02-23T00:27:39Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Don't really know why people would do it, but according to this [GH search](https://sourcegraph.com/search?q=lang%3Acsharp+%28content%3A%22%3A+ITask+%22+or+content%3A%22%3A+ITask%5Cn%22%29+and+content%3A%22using+Microsoft.Build.Framework%22+count%3A1000&patternType=literal) they do it.\r\n\r\n> So long as the task returns true despite logging an error, the build will complete.\r\n\r\nI think MSBuild might either warn or error that the ITask instance returned true but an error was logged. Not super sure about this though, so worth writing a test to pin the behaviour :)\r\nOn the other hand, since an ITask implementation cannot know whether any errors were logged (because it does not have access to `Log`), it can't really condition its return value. So maybe this whole scenario does not make sense and we can ignore it.",
              "createdAt": "2021-02-23T02:15:34Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I agree that there's no need to check this on an ITask. Something interesting about the error task. It explicitly returns false otherwise the build would continue: https://github.com/dotnet/msbuild/blob/f0eebf2872d76ab0cd43fdc4153ba636232b222f/src/Tasks/Error.cs#L47 that's a very strange disconnect that sounds to me like it should be an issue to fix. But if that's just how msbuild has been since the beginning of time...should we consider fixing it?",
              "createdAt": "2021-02-23T20:37:34Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It comes from an era where an error was an error, so returning false made sense :)\r\n\r\nI'd wait until somebody reports an issue and then update both Error and Warning.",
              "createdAt": "2021-02-23T22:41:38Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Sorry, why is that wrong? A task returns false if it logged an error. The Error task is designed to log an error, hence always returns \"HasLoggedAnError.\"",
              "createdAt": "2021-02-23T23:32:38Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I should have included it in the code sample, but the error task called `Log.LogError` and simply returns false, not `Log.HasLoggedErrors`.\r\n\r\nEdit: So if the error task returned true, the build would continue despite it having logged an error. So we'd see the rest of the build but we'd get a `Build Failed`.",
              "createdAt": "2021-02-23T23:44:26Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Right...it has always logged an error because it logs an error right before the return statement.\r\n\r\nRight, and people who log errors tend to want execution to stop at that point. No point continuing if something went irredeemably wrong.",
              "createdAt": "2021-02-24T00:18:42Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -272,6 +272,34 @@ private string GetTestProject(bool? treatAllWarningsAsErrors = null, string warn\n             </Project>\";\n         }\n \n+        [Fact]\n+        public void WarningsAsErrors_ExpectBuildToStopWhenTaskLogsWarningAsError()\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <UsingTask TaskName = \"\"ReturnFailureWithoutLoggingErrorTask\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <UsingTask TaskName = \"\"LogWarningReturnHasLoggedError\"\" AssemblyName=\"\"Microsoft.Build.Engine.UnitTests\"\"/>\n+                    <PropertyGroup>\n+                        <MSBuildWarningsAsErrors>MSB1234</MSBuildWarningsAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <LogWarningReturnHasLoggedError WarningCode=\"\"MSB1234\"\"/>\n+                        <ReturnFailureWithoutLoggingErrorTask/>\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectFailure();\n+\n+                logger.WarningCount.ShouldBe(0);\n+                logger.ErrorCount.ShouldBe(1);\n+\n+                // The build should STOP when a task logs an error, make sure ReturnFailureWithoutLoggingErrorTask doesn't run. \n+                logger.AssertLogDoesntContain(\"MSB4181\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just to make this a little easier to reason about...\r\n```suggestion\r\n            // This warning will be converted to an error if:\r\n            // 1. Its code exists within WarningsAsErrors\r\n            // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)\r\n            if (BuildEngine is IBuildEngine8 be8 && (be8.WarningsAsErrors.Contains(warningCode) || be8.WarningsAsErrors.Count == 0))\r\n```",
              "createdAt": "2021-02-26T21:57:10Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -1016,6 +1016,35 @@ public void LogWarning\n             // that gives the user something.\n             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));\n \n+            IBuildEngine8 be8 = (BuildEngine as IBuildEngine8);\n+\n+            // This warning will be converted to an error if:\n+            // 1. Its code exists within WarningsAsErrors\n+            // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)\n+            if (be8?.WarningsAsErrors?.Contains(warningCode) == true || be8?.WarningsAsErrors?.Count == 0)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we actually need to make this a public API? Isn't it enough to just ensure that HasLoggedErrors works as expected?",
              "createdAt": "2021-03-05T23:08:22Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Good point. I'll remove public on warningsaserrors",
              "createdAt": "2021-03-06T00:04:45Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "So do we need IBuildEngine8 then?",
              "createdAt": "2021-03-06T00:22:25Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I may have been confused by the original question. WarningsAsErrors needs to be visible to the tasklogginghelper so it can determine if it actually logged an error when it tries to log a warning. Without IBE8 having this hashset I'm not aware of a to get that info.",
              "createdAt": "2021-03-06T01:29:42Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Interface members are public by default so if you remove the public keyword nothing will change, it will still be a public member on a public interface.\r\n\r\nSo I guess to answer Mihai's question we do need an `IBuildEngine8` and it does need to have the `WarningsAsErrors` member, right? Just to confirm.",
              "createdAt": "2021-03-06T02:49:44Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I'm thinking, should we make the return type `ICollection<string>`? It would still be backed by a HashSet<string> but we'd return a more general type. HashSet<T> feels like an implementation detail. Contains(T) would still be implemented efficiently by the HashSet<T>.\r\n\r\nFeels like we're painting ourselves in the corner here, instead of leaving room for potential other implementations in the future shall the need arise.",
              "createdAt": "2021-03-06T02:55:37Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "We need an IBuildEngine8 that provides _some way_ of telling tasks that what it is about to log will turn into an error. I like the idea from your other comment suggesting we turn it into a method. I'll comment my thoughts related to that there.\r\n\r\nAlso, turning this into an ICollection<string> makes sense.",
              "createdAt": "2021-03-08T02:11:14Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "The whole interface could be private :) But that would partition the entire supertype API in a private part and a public part. The public parts keep on revving their number, and the private part can stay constant. So we'd have a private `TheTrueBuildEngineInterface` which would extend two other interfaces: `IBuildEngine{number}`, the public bit of the API and `IPrivateBuildEngine`, the private part. On the other hand this gets way less messy if we had the final abstract class to end all versioned interfaces. The abstract class can have both public and private abstract methods. You could make this PR wait for the abstract class, or go ahead with IBE8, or do the public/private split. I think the public/private split is a bit ugly, I'd rather have a public API than yet another tiny wtf in the code :)",
              "createdAt": "2021-03-08T18:17:04Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I'm not sure I understand the value of the private part of the public/private split interfaces? I do like the final abstract class plan, but marcpopMSFT suggested we should wait for rainersigwald before making that kind of decision, so I shelved my planned implementation of that for now.",
              "createdAt": "2021-03-08T19:36:47Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> I'm not sure I understand the value of the private part of the public/private split interfaces\r\n\r\nI was assuming it somehow prevents fixing `TaskLoggingHelper.HasLoggedErrors` to return true when logging warnings-as-errors, but it turns out it's not needed. Why do tasks require a new API in addition to the existing `TaskLoggingHelper.HasLoggedErrors`? In order to allow them to inhibit logging a warning if turns out to be an error? That does not sound like safe behaviour :)",
              "createdAt": "2021-03-08T19:50:42Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Ah, I see, and you're right. I got so focused on the solution that I forgot about the motivating problem. That sounds reasonable to me, though\u2014@BenVillalobos, could this interface be internal? Maybe have IBuildEngine7 extend WarningsAsErrorsBuildEngine?",
              "createdAt": "2021-03-08T20:28:50Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> I think the public/private split is a bit ugly, I'd rather have a public API than yet another tiny wtf in the code :)\r\n\r\nThis is where I'm at with IBuildEngine. IMO we take one more \"this is the way we've done it\" IBE PR and stop at IBE9 when we implement the abstract class. Otherwise why would we extend private IBE interfaces after we add the abstract class?\r\n\r\nIt sounds like it would be even messier to have a single private IBE8, all previous IBE's are public, then we make the abstract class and have no use for private IBE's.",
              "createdAt": "2021-03-08T21:55:46Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Mkay, took another look at the code. So TaskLoggingHelper gets an `IBuildEngine`, and that's how it interacts with the `TaskHost:IBuildEngine{N}` which knows about warnings-as-errors from its TaskLoggingContext. Beyond keeping it public, any solution I can think of is pretty messy. So public it is then :)",
              "createdAt": "2021-03-08T23:42:57Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,16 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to allow tasks know if a warning\n+    /// they logged was turned into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        public HashSet<string> WarningsAsErrors { get; }",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's a good practice to specify the parameter name when passing `null`, `false`, `true` or other literal as an argument.",
              "createdAt": "2021-03-06T02:57:30Z",
              "path": "src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs",
              "diffHunk": "@@ -419,6 +457,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()\n                 \"TaskName\",\n                 @\"c:\\MyTasks\\MyTask.dll\",\n                 parameters,\n+                null,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Because when reading the code I have no idea what that parameter is and what type it is.",
              "createdAt": "2021-03-06T02:58:05Z",
              "path": "src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs",
              "diffHunk": "@@ -419,6 +457,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()\n                 \"TaskName\",\n                 @\"c:\\MyTasks\\MyTask.dll\",\n                 parameters,\n+                null,",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider returning `ICollection<string>` here.",
              "createdAt": "2021-03-06T03:00:20Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -219,6 +219,14 @@ bool IncludeTaskInputs\n         /// <returns><code>true</code> if the build submission logged an errors, otherwise <code>false</code>.</returns>\n         bool HasBuildSubmissionLoggedErrors(int submissionId);\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as warnings that will not be treated as messages.</returns>\n+        HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If you format the file, a space will appear between `if` and `(` :) Best to add one :)",
              "createdAt": "2021-03-06T03:01:15Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can probably remove the question mark since we've checked for null above?",
              "createdAt": "2021-03-06T03:02:06Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)\n+            {\n+                return null;\n+            }\n+\n+            int key = GetWarningsAsErrorOrMessageKey(context);\n+\n+            HashSet<string> warningsAsErrorsExcludingMessages = new HashSet<string>(_warningsAsErrorsByProject?[key]);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Returning null for methods that return collections is unexpected. If you change the return type to `ICollection<string>` you'll be able to also return `Array.Empty<string>()` which is preferable.",
              "createdAt": "2021-03-06T03:03:01Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)\n+            {\n+                return null;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I've changed WarningsAsErrors to generally be of type ICollection, but returning an empty array would change the implementation of warnings as errors. If we want to do that, we should do it in another PR.",
              "createdAt": "2021-03-08T21:51:07Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)\n+            {\n+                return null;",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This contract seems unclear. As a rule, null or empty collections shouldn't have different semantic meanings, otherwise it's very confusing. If you need to, perhaps make this explicit and either add a bool out parameter or return a tuple or a data type?",
              "createdAt": "2021-03-06T03:05:29Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)\n+            {\n+                return null;\n+            }\n+\n+            int key = GetWarningsAsErrorOrMessageKey(context);\n+\n+            HashSet<string> warningsAsErrorsExcludingMessages = new HashSet<string>(_warningsAsErrorsByProject?[key]);\n+\n+            if(_warningsAsMessagesByProject != null)\n+            {\n+                warningsAsErrorsExcludingMessages.ExceptWith(_warningsAsMessagesByProject[key]);\n+\n+                // A non-null empty set means all warnings are errors. Avoid this.",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "I generally agree, but this was written with the intent of matching the current implementation (which I'm open to changing).\r\n\r\nSee these files:\r\n1. [Line 1582 of LoggingService.cs](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/Logging/LoggingService.cs#L1586)\r\n2. [Line 1242 of RequestBuilder.cs](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1242)\r\n\r\nWe talked a bit about it in PR review and didn't come to a strong conclusion for any particular side.\r\n\r\nIt's worth mentioning that if we switch IBE8 from having a hashset to having a method that returns true or false, we can change the underlying implementation with less hassle. Whereas if we merge this and decide to add a type or extra information to determine warningsaserrors, we'd need to add an IBE9 or modify IBE8.\r\n\r\n/cc: @jeffkl as the original author",
              "createdAt": "2021-03-08T17:29:38Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -515,6 +515,40 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n             return _buildSubmissionIdsThatHaveLoggedErrors?.Contains(submissionId) == true;\n         }\n \n+        /// <summary>\n+        /// Returns a hashset of warnings to be logged as errors for the specified project instance ID.\n+        /// Note that WarningsAsMessages takes priority over WarningsAsErrors and are excluded from the set.\n+        ///\n+        /// If all warnings to be treated as errors should also be treated as messages, return null otherwise\n+        /// all warnings will be treated as errors. <see cref=\"RequestBuilder.ConfigureWarningsAsErrorsAndMessages()\"/>\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n+        public HashSet<string> GetWarningsToBeLoggedAsErrorsByProject(BuildEventContext context)\n+        {\n+            if(_warningsAsErrorsByProject == null)\n+            {\n+                return null;\n+            }\n+\n+            int key = GetWarningsAsErrorOrMessageKey(context);\n+\n+            HashSet<string> warningsAsErrorsExcludingMessages = new HashSet<string>(_warningsAsErrorsByProject?[key]);\n+\n+            if(_warningsAsMessagesByProject != null)\n+            {\n+                warningsAsErrorsExcludingMessages.ExceptWith(_warningsAsMessagesByProject[key]);\n+\n+                // A non-null empty set means all warnings are errors. Avoid this.",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sort System namespaces first?",
              "createdAt": "2021-03-06T03:05:43Z",
              "path": "src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs",
              "diffHunk": "@@ -5,6 +5,7 @@\n using Microsoft.Build.Framework;\n using Microsoft.Build.Shared;\n using Microsoft.Build.Execution;\n+using System.Collections.Generic;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "perhaps logged or reported? Throw implies exception I think",
              "createdAt": "2021-03-06T03:07:20Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -103,6 +105,7 @@ internal class TaskHostConfiguration : INodePacket\n         /// <param name=\"taskLocation\">Location of the assembly the task is to be loaded from.</param>\n         /// <param name=\"taskParameters\">Parameters to apply to the task.</param>\n         /// <param name=\"globalParameters\">global properties for the current project.</param>\n+        /// <param name=\"warningsAsErrors\">Warning codes to be thrown as errors for the current project.</param>",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it'll be better if we make this contract explicit. An empty collection for all warnings as errors is confusing. \r\n\r\nDo we already have WarningsAsErrors somewhere? If not, we could use a trick and return an implementation of `ICollection<string>` that always returns `true` from the `Contains()` method.",
              "createdAt": "2021-03-06T03:10:57Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -1016,6 +1016,28 @@ public void LogWarning\n             // that gives the user something.\n             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));\n \n+            // This warning will be converted to an error if:\n+            // 1. Its code exists within WarningsAsErrors\n+            // 2. If WarningsAsErrors is a non-null empty set (treat all warnings as errors)\n+            if (BuildEngine is IBuildEngine8 be8 && be8.WarningsAsErrors != null && (be8.WarningsAsErrors.Contains(warningCode) || be8.WarningsAsErrors.Count == 0))",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the `public` keyword is redundant here, the general convention is to avoid modifiers on interface members",
              "createdAt": "2021-03-09T19:39:31Z",
              "path": "src/Framework/IBuildEngine8.cs",
              "diffHunk": "@@ -0,0 +1,22 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System.Collections.Generic;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// This interface extends <see cref=\"IBuildEngine7\" /> to let tasks know if a warning\n+    /// they are about to log will be converted into an error.\n+    /// </summary>\n+    public interface IBuildEngine8 : IBuildEngine7\n+    {\n+        /// <summary>\n+        /// Determines whether the logging service will convert the specified\n+        /// warning code into an error.\n+        /// </summary>\n+        /// <param name=\"warningCode\">The warning code to check.</param>\n+        /// <returns>A boolean to determine whether the warning should be treated as an error.</returns>\n+        public bool ShouldTreatWarningAsError(string warningCode);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like these are always true?",
              "createdAt": "2021-03-10T19:10:52Z",
              "path": "src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+namespace Microsoft.Build.UnitTests\n+{\n+    public class CustomLogAndReturnTask : Task\n+    {\n+        public string WarningCode { get; set; }\n+\n+        public string ErrorCode { get; set; }\n+\n+        public bool ReturnHasLoggedErrors { get; set; }\n+\n+        [Required]\n+        public bool Return { get; set; }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            if (WarningsAsErrors == null)\r\n```\r\n\r\n(Should be the same but looks a little cleaner to me.)",
              "createdAt": "2021-03-10T19:16:32Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -676,6 +676,38 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie\n         public bool AllowFailureWithoutError { get; set; } = false;\n         #endregion\n \n+        #region IBuildEngine8 Members\n+        private ICollection<string> _warningsAsErrors;\n+\n+        /// <summary>\n+        /// Contains all warnings that should be logged as errors.\n+        /// Non-null empty set when all warnings should be treated as errors.\n+        /// </summary>\n+        private ICollection<string> WarningsAsErrors\n+        {\n+            get\n+            {\n+                // Test compatibility\n+                if(_taskLoggingContext == null)\n+                {\n+                    return null;\n+                }\n+\n+                return _warningsAsErrors ??= _taskLoggingContext.GetWarningsAsErrors();\n+            }\n+        }\n+\n+        public bool ShouldTreatWarningAsError(string warningCode)\n+        {\n+            if (_taskLoggingContext == null || WarningsAsErrors == null)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comment?",
              "createdAt": "2021-03-10T19:17:24Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -676,6 +676,38 @@ public void LogTelemetry(string eventName, IDictionary<string, string> propertie\n         public bool AllowFailureWithoutError { get; set; } = false;\n         #endregion\n \n+        #region IBuildEngine8 Members\n+        private ICollection<string> _warningsAsErrors;\n+\n+        /// <summary>\n+        /// Contains all warnings that should be logged as errors.\n+        /// Non-null empty set when all warnings should be treated as errors.\n+        /// </summary>\n+        private ICollection<string> WarningsAsErrors\n+        {\n+            get\n+            {\n+                // Test compatibility\n+                if(_taskLoggingContext == null)\n+                {\n+                    return null;\n+                }\n+\n+                return _warningsAsErrors ??= _taskLoggingContext.GetWarningsAsErrors();\n+            }\n+        }\n+\n+        public bool ShouldTreatWarningAsError(string warningCode)\n+        {\n+            if (_taskLoggingContext == null || WarningsAsErrors == null)\n+            {\n+                return false;\n+            }\n+\n+            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}