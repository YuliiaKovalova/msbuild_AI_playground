{
  "number": 9047,
  "title": "Optimize exclude computation on ItemGroupIntrinsicTask target call",
  "body": "Fixes #8984\r\n\r\n### Context\r\nWhen glob expansion runs in a target via ItemGroupIntrinsicTask, it implicitly invokes `EngineFileUtilities.GetFileListEscaped` for Excludes evaluation.\r\n\r\n### Changes Made\r\nTraverse Exclude only if EngineFileUtilities.GetFileListEscaped wasn't called in order to avoid double traversal.\r\n\r\n### Testing\r\nExisting cases cover this change.",
  "state": "MERGED",
  "createdAt": "2023-07-18T11:33:45Z",
  "updatedAt": "2023-07-24T08:52:06Z",
  "closedAt": "2023-07-24T08:52:06Z",
  "mergedAt": "2023-07-24T08:52:06Z",
  "additions": 48,
  "deletions": 36,
  "changedFiles": 2,
  "headRefName": "dev/ykovalova/bug_optimize_exclude",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ca4619c86531cb6bfa115f476f6436dbd8d93eec",
          "message": "optimize exclude computation",
          "committedDate": "2023-07-18T11:33:17Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fea04809f3d034cf30a1b62a3233b0d173a23802",
          "message": "undo check changes",
          "committedDate": "2023-07-18T12:34:38Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59c319750f5e8958a0b25a415a481e482531688f",
          "message": "extend condition for paths evaluation",
          "committedDate": "2023-07-18T14:19:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a54e4e82371f123648dbbb186a77eb9a2fe1d7c8",
          "message": "update condition",
          "committedDate": "2023-07-18T14:42:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "04015edaf89c709ad65179a6de3265b68f1256fb",
          "message": "fix review comment",
          "committedDate": "2023-07-19T08:46:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1a5a7696e6afa718a066be79531d8d223e7d162",
          "message": "fix review comment",
          "committedDate": "2023-07-19T09:00:38Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d82e094d6d1339f3cd27792f92e4e71b43e0d9f1",
          "message": "Update src/Build/Utilities/EngineFileUtilities.cs\n\nCo-authored-by: Ladi Prosek <ladi.prosek@gmail.com>",
          "committedDate": "2023-07-19T09:07:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Please consider taking advantage of short-circuit evaluation of conditions wherever practical. In this case `excludeSpecsEscaped.Any()` doesn't have to run if the filespec has wildcards.",
              "createdAt": "2023-07-19T08:20:51Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -191,10 +191,11 @@ internal static bool FilespecHasWildcards(string filespecEscaped)\n             FileMatcher.SearchAction action = FileMatcher.SearchAction.None;\n             string excludeFileSpec = string.Empty;\n \n-            if (!FilespecHasWildcards(filespecEscaped) ||\n-                FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards))\n+            var noWildcards = !FilespecHasWildcards(filespecEscaped) || FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards);\n+            var noExcludeSpecs = excludeSpecsEscaped == null || !excludeSpecsEscaped.Any();\n+            // It is possible to return original string if no entries in Exclude set and no wildcard matches. \n+            if (noWildcards && noExcludeSpecs)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f ",
              "createdAt": "2023-07-19T08:25:37Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -413,27 +413,28 @@ private void GetBatchableValuesFromBuildItemGroupChild(List<string> parameterVal\n \n             // Split Include on any semicolons, and take each split in turn\n             var includeSplits = ExpressionShredder.SplitSemiColonSeparatedList(evaluatedInclude);\n-            ProjectItemInstanceFactory itemFactory = new ProjectItemInstanceFactory(this.Project, originalItem.ItemType);\n+            ProjectItemInstanceFactory itemFactory = new ProjectItemInstanceFactory(Project, originalItem.ItemType);\n+\n+            // EngineFileUtilities.GetFileListEscaped api invocation evaluates excludes by default.\n+            // If the code process any expression like \"@(x)\", we need to handle excludes explicitly using EvaluateExcludePaths().\n+            bool anyTransformExprProceeded = false;\n \n             foreach (string includeSplit in includeSplits)\n             {\n                 // If expression is \"@(x)\" copy specified list with its metadata, otherwise just treat as string\n-                bool throwaway;\n-\n-                IList<ProjectItemInstance> itemsFromSplit = expander.ExpandSingleItemVectorExpressionIntoItems(includeSplit,\n+                IList<ProjectItemInstance> itemsFromSplit = expander.ExpandSingleItemVectorExpressionIntoItems(\n+                    includeSplit,\n                     itemFactory,\n                     ExpanderOptions.ExpandItems,\n                     false /* do not include null expansion results */,\n-                    out throwaway,\n+                    out _,\n                     originalItem.IncludeLocation);\n \n                 if (itemsFromSplit != null)\n                 {\n                     // Expression is in form \"@(X)\", so add these items directly.\n-                    foreach (ProjectItemInstance item in itemsFromSplit)\n-                    {\n-                        items.Add(item);\n-                    }\n+                    items.AddRange(itemsFromSplit);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be:\r\n\r\n```suggestion\r\n            if (noWildcards && excludeSpecsEscaped?.Any() != true)\r\n```\r\n\r\nto cover both null and and empty `excludeSpecsEscaped`.",
              "createdAt": "2023-07-19T09:04:49Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -191,8 +191,10 @@ internal static bool FilespecHasWildcards(string filespecEscaped)\n             FileMatcher.SearchAction action = FileMatcher.SearchAction.None;\n             string excludeFileSpec = string.Empty;\n \n-            if (!FilespecHasWildcards(filespecEscaped) ||\n-                FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards))\n+            var noWildcards = !FilespecHasWildcards(filespecEscaped) || FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards);\n+\n+            // It is possible to return original string if no wildcard matches and no entries in Exclude set. \n+            if (noWildcards && excludeSpecsEscaped?.Any() == false)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}