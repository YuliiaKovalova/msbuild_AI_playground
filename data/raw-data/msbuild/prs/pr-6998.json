{
  "number": 6998,
  "title": "Check if Documentis null before creating elementlocation object",
  "body": "### Context\r\nWhen ownerDocumentWithLocation.FullPath is null, then ElementLocation is always created.  This is because ElementLocation.Empty.File is \" \" (empty not null).\r\nThis can occurs when a project is created from memory or loaded from a stream which loses all file information.  \r\n\r\n### Changes Made\r\nAdd null check.\r\n\r\n### Testing\r\nStandard unittest\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-10-28T20:48:04Z",
  "updatedAt": "2021-11-01T08:01:41Z",
  "closedAt": "2021-11-01T08:01:41Z",
  "mergedAt": "2021-11-01T08:01:41Z",
  "additions": 3,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "dev/yuehuang/main",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7e77bdb44a08970bd966d9349de8b92357936f63",
          "message": "Check if doc is null before creating elementlocation",
          "committedDate": "2021-10-28T20:34:09Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ccf2e14155f0501302d9c2a03c4dec7799942d6f",
          "message": "simplify",
          "committedDate": "2021-10-29T00:11:33Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Truth to be said, I do not fully understand these lines. I do not know why and when OwnerDocument.FullPath changes since object creation. When the existing code is not fully understood it is recommended to keep its behavior intact.\r\n\r\nYour changes could cause regression if  during object construction FullPath != null, but for some reason it become null later. In such case your changes would return original location while `before` code will return new Location with File sets to String.Empty. \r\n\r\nThe bug here is that Location constructor interpet null file as String.Empty by following code `this.file = file ?? String.Empty;` This later cause mismatch as String.Empty != null.\r\n\r\nI recommend this code:\r\n`if (!String.Equals(_elementLocation.File ?? String.Empty, ownerDocumentWithLocation.FullPath && String.Empty, StringComparison.OrdinalIgnoreCase))`\r\nas this will preserve current intended behavior and it will still work if later Location constructor changes and will allow null in `.File`.\r\nI believe this code also deserves some comment explaining  why we use those `&& String.Empty`  so future \"good intended\" refactoring does not break it.\r\n\r\n@rainersigwald do you recall the reason of this? Only thing which came to my mind is in memory generated XML which is later saved like those which nuget restores does.\r\n\r\n",
              "createdAt": "2021-10-28T21:31:40Z",
              "path": "src/Build/ElementLocation/XmlAttributeWithLocation.cs",
              "diffHunk": "@@ -72,7 +72,7 @@ internal ElementLocation Location\n             {\n                 // Caching the element location object saves significant memory\n                 XmlDocumentWithLocation ownerDocumentWithLocation = (XmlDocumentWithLocation)OwnerDocument;\n-                if (!String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))\n+                if (!string.IsNullOrEmpty(ownerDocumentWithLocation.FullPath) && !String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thanks. That is safer.",
              "createdAt": "2021-10-28T23:23:46Z",
              "path": "src/Build/ElementLocation/XmlAttributeWithLocation.cs",
              "diffHunk": "@@ -72,7 +72,7 @@ internal ElementLocation Location\n             {\n                 // Caching the element location object saves significant memory\n                 XmlDocumentWithLocation ownerDocumentWithLocation = (XmlDocumentWithLocation)OwnerDocument;\n-                if (!String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))\n+                if (!string.IsNullOrEmpty(ownerDocumentWithLocation.FullPath) && !String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same as the comment above.",
              "createdAt": "2021-10-28T21:33:29Z",
              "path": "src/Build/ElementLocation/XmlElementWithLocation.cs",
              "diffHunk": "@@ -92,7 +92,7 @@ internal ElementLocation Location\n             {\n                 // Caching the element location object saves significant memory\n                 XmlDocumentWithLocation ownerDocumentWithLocation = (XmlDocumentWithLocation)OwnerDocument;\n-                if (!String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))\n+                if (!string.IsNullOrEmpty(ownerDocumentWithLocation.FullPath) && !String.Equals(_elementLocation.File, ownerDocumentWithLocation.FullPath, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}