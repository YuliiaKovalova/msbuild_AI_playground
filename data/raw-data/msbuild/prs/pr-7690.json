{
  "number": 7690,
  "title": "Add Microsoft.Build.dll to the arm64 directory",
  "body": "\r\nFixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1526195/\r\n\r\n### Context\r\nNuGet Pack expects Microsoft.Build.dll to exist in the same directory as the running exe. On ARM64 machines, nuget pack results in M.Build.dll not being discovered under `/arm64/`\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nThis is a \"just in case\" PR to have around as I perform investigation to see if NuGet should be doing something differently.",
  "state": "MERGED",
  "createdAt": "2022-06-08T19:58:36Z",
  "updatedAt": "2022-11-28T23:04:17Z",
  "closedAt": "2022-11-28T23:04:17Z",
  "mergedAt": "2022-11-28T23:04:17Z",
  "additions": 3,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "nuget-pack-msbuild-dll",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": {
    "title": "VS 17.5"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9fdfcd3b743e4d53e7362f5398809ee332999813",
          "message": "Add Microsoft.Build.dll to the arm64 directory\n\nNuGet Pack expects Microsoft.Build.dll to exist in the same directory\nas the running exe.",
          "committedDate": "2022-06-08T19:55:17Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c4e12f1581ed9eed45a5d459e24e29849f659962",
          "message": "Merge branch 'main' into nuget-pack-msbuild-dll",
          "committedDate": "2022-10-14T21:15:32Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "With reference to this https://github.com/dotnet/msbuild/pull/7736#issuecomment-1164901473\r\n\r\nWould MSBuild and its dependents break (_with appropriate fixes and redirects of course_) if we point all to the current layout instead of `amd64`, `arm64` and friends? With MSBuild being Any CPU as you said, does it even matter to have architecture subdirectories?\r\n\r\nIf this is possible, we could save some disk space!!",
        "createdAt": "2022-06-26T09:35:51Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Would MSBuild and its dependents break (_with appropriate fixes and redirects of course_) if we point all to the current layout instead of `amd64`, `arm64` and friends? With MSBuild being Any CPU as you said, does it even matter to have architecture subdirectories?\r\n> \r\n> If this is possible, we could save some disk space!!\r\n\r\nWe must have the architecture subdirectories for executables, because that's the only way to flip the Windows architecture bit for `msbuild.exe` and `msbuildtaskhost.exe`.\r\n\r\nFor the other assemblies, `MSBuild.exe` and `devenv.exe` should only ever use the copies in `bin`, but we've observed breaks in first-party and third-party applications that manually load the copies from `bin\\amd64`, so we are shipping them for compat. For `arm64`, we're hoping to never ship them in the first place so users are forced to use the ones from `bin` and we can reduce install size. But if there are uses that can't accommodate that, we can ship the assemblies again--like in this PR.\r\n\r\n@BenVillalobos don't forget to close or undraft this, as necessary :)",
        "createdAt": "2022-09-08T16:06:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@BenVillalobos, same for this one\u2014still necessary?",
        "createdAt": "2022-10-06T21:27:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I can't install the package that would let me confirm that we need this, and the issue hasn't gotten any other hits. Closing.\r\n\r\nIf it gets more hits I'll dig further in.",
        "createdAt": "2022-10-14T00:31:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "See my latest comment in https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1526195?src=WorkItemMention&src-action=artifact_link.\r\n\r\nTL;DR: NuGet manually checks for Microsoft.Build.dll wherever MSBuild happens to be found on the PATH. Given we should support existing scenarios, and NuGet is a pretty big internal customer of ours, we shouldn't expect them to manually account for an 'msbuildism' like this. IMO we merge this PR so other customers can expect things to behave the same, even on new architectures.",
        "createdAt": "2022-10-14T19:51:33Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Makes sense to me-should this be 17.4?\n",
        "createdAt": "2022-10-14T20:39:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald This is in a _super specific_ scenario in classic csproj scenarios running nuget.exe directly. It doesn't repro running `dotnet pack` so it seems like a \"low traffic\" issue. Also, running the same repro on the sln instead of the project outputs the desired behavior. I'm leaning towards no. cc @marcpopMSFT , who seems to agree",
        "createdAt": "2022-10-14T22:16:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@aortiz-msft may also have a \"should this fix to `nuget.exe pack` be pushed to 17.4?\". If you don't think it's super important we'll fix for 17.5.",
        "createdAt": "2022-10-17T14:01:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}