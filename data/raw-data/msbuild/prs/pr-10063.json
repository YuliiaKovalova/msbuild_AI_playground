{
  "number": 10063,
  "title": "[GB18030] Fix \"Unable to translate Unicode character\"",
  "body": "Fixes #10066\r\n[GB18030] Failed to run the WebAPI project that named as GB18030 provided level3 strings\r\n\r\n### Context\r\nOS: Windows 11 Enterprise 22H2 ZH-CN\r\nAffected Build: 9.0.0-preview.4.24209.5, Aso repro on 8.0.300-preview.24203.14(8.0.2)\r\n\r\nSteps to reproduce:\r\n\r\nUse CLI to create WebAPI project copying GB18030 characters, for example:\r\n```\r\ndotnet new webapi -controllers -o \u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ud879\udeae\u2fd5#\r\ncd \u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ud879\udeae\u2fd5#\r\ndotnet run\r\n```\r\n\r\nWithout this PR:\r\n```\r\ndotnet run\r\nBuilding...\r\nRestore complete (0.5s)\r\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\r\n  \u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5# failed with 2 error(s) (2.9s) \u2192 bin/Debug/net9.0/\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5#.dll\r\n    /workspaces/runtime/.dotnet/sdk/9.0.100-preview.3.24204.13/Microsoft.Common.CurrentVersion.targets(5578,5): error MSB3491: Could not write lines to file \"obj/Debug/net9.0/\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5#.csproj.FileListAbsolute.txt\". Unable to translate Unicode character \\\\uD86E at index 2368 to specified code page.\r\n    /workspaces/runtime/.dotnet/sdk/9.0.100-preview.3.24204.13/Microsoft.Common.CurrentVersion.targets(5823,5): error MSB3491: Could not write lines to file \"obj/Debug/net9.0/\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5#.csproj.FileListAbsolute.txt\". Unable to translate Unicode character \\\\uD86E at index 2368 to specified code page.\r\n\r\nBuild failed with 2 error(s) in 3.8s\r\n\r\nThe build failed. Fix the build errors and run again.\r\n```\r\n\r\nWith this PR:\r\n```\r\ndotnet run\r\nBuilding...\r\nRestore complete (0.5s)\r\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\r\n  \u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5# succeeded (0.6s) \u2192 bin/Debug/net9.0/\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5#.dll\r\n\r\nBuild succeeded in 1.5s\r\ninfo: Microsoft.Hosting.Lifetime[14]\r\n      Now listening on: http://localhost:5210\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Application started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Hosting environment: Development\r\ninfo: Microsoft.Hosting.Lifetime[0]\r\n      Content root path: /workspaces/reproGB/\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ufffd\ufffd\u2fd5#\r\n^Cinfo: Microsoft.Hosting.Lifetime[0]\r\n      Application is shutting down...\r\n```\r\n\r\n### Changes Made\r\nChanged the way we create a substring to prevent cutting surrogates in half.\r\n\r\n### Testing\r\nAdded a test for new substring function.\r\n\r\n### Regerssion\r\nYes, after https://github.com/dotnet/msbuild/issues/9346.\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-24T07:56:30Z",
  "updatedAt": "2024-05-22T20:18:07Z",
  "closedAt": "2024-04-25T10:30:15Z",
  "mergedAt": "2024-04-25T10:30:15Z",
  "additions": 55,
  "deletions": 2,
  "changedFiles": 4,
  "headRefName": "fix-2031987",
  "isDraft": false,
  "author": {
    "login": "ilonatommy"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ilonatommy"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d9ad3577ad4b351778de25a370630258d8fc4cbc",
          "message": "Fix \"Unable to translate Unicode character\"",
          "committedDate": "2024-04-24T07:50:09Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e0fea3a8c5a3da6d6105dc9d7de7f2f79c114fce",
          "message": "Half-fix",
          "committedDate": "2024-04-24T13:35:41Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8fc3eede0ee5579bbe3f59317e99e0602783b6aa",
          "message": "Expose SubstringByTextElements in IntrinsicFunctions + test.",
          "committedDate": "2024-04-24T15:19:20Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "259728cf6522ec844498802d948feaa40c16b19a",
          "message": "Feedback.",
          "committedDate": "2024-04-25T08:05:27Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7fca5a39ded8bf35a0b4d2f1ccad80c4a8bd919",
          "message": "Merge branch 'main' into fix-2031987",
          "committedDate": "2024-04-25T08:38:31Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This change looks more like a workaround. Do we understand why \\uD86E fails to be encoded to UTF-8? For what it's worth, this test program runs fine for me:\r\n\r\n```C#\r\nvar defaultEncoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: true);\r\nFile.WriteAllText(\"C:\\\\temp\\\\encoded.txt\", \"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", defaultEncoding);\r\n```\r\n\r\n`defaultEncoding` is the default used by the `WriteLinesToFile` task and the string is equivalent to the problematic project name, as far as I can tell.",
        "createdAt": "2024-04-24T11:50:05Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "True, actually smallest repro does not help here either:\r\n```\r\n  <Target Name=\"MyTask\" AfterTargets=\"Build\">\r\n    <WriteLinesToFile\r\n      File=\"\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ud879\udeae\u2fd5#\\msEncoding.txt\"\r\n      Lines=\"\u3407\ud840\udc60\ud86a\ude30\ud86e\udc0a\ud86e\udda0\ud879\udeae\u2fd5#\"\r\n      Overwrite=\"true\"/>\r\n  </Target>\r\n```\r\nworks.\r\nDo you have an idea how to add a test to this repo to debug it better?\r\n\r\nEdit:\r\nit's comes down to a problem with `MSBuildCopyMarkerName` contents. You're right that the fix was not addressing the underlying issue. I will update the PR when I find the proper fix.",
        "createdAt": "2024-04-24T12:04:48Z",
        "author": {
          "login": "ilonatommy"
        }
      },
      {
        "body": "If we moved\r\n```\r\n<MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\r\n```\r\nto C#:\r\n```\r\npublic sealed class ShortenAndHashProjectName : Task\r\n    {\r\n        [Required]\r\n        public string ProjectName { get; set; }\r\n\r\n        [Output]\r\n        public string ShortProjectName { get; set; }\r\n\r\n        public override bool Execute()\r\n        {\r\n            if (ProjectName.Length <= 17)\r\n            {\r\n                ShortProjectName = ProjectName;\r\n                return true;\r\n            }\r\n\r\n            // if the last char of string is a surrogate, cutting it in half would confuse encoder\r\n            int length = char.IsHighSurrogate(ProjectName[7]) ? 9 : 8;\r\n            string truncatedProjectName = ProjectName.Substring(0, length);\r\n            string originalProjectNameHash = StableStringHash(ProjectName);\r\n            ShortProjectName = $\"{truncatedProjectName}.{originalProjectNameHash}\".ToString(\"X8\");\r\n            return true;\r\n    }\r\n```\r\nit should fix the issue. MsBuild does not provide a way to detect surrogates and if the last char is a beginning of surrogate, it cuts it in half.\r\nWhy is shortening the project name necessary?",
        "createdAt": "2024-04-24T13:24:47Z",
        "author": {
          "login": "ilonatommy"
        }
      },
      {
        "body": "Tagging @JanKrivanek as this is an unfortunate regression introduced with the recent stable hash changes. Jan, do you think we can get away without shortening? if not, it would probably make sense to add a string shortening property function which would be safe with respect to surrogates.",
        "createdAt": "2024-04-24T13:27:36Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Oh good find!\r\n\r\nShortening was one of the requests that the change was addressing. Let's move it to prop function",
        "createdAt": "2024-04-24T13:31:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@ilonatommy, rather than a task, we would prefer the functionality to be exposed as an intrinsic property function. Here's a PR where one was recently added: https://github.com/dotnet/msbuild/pull/9665",
        "createdAt": "2024-04-24T13:36:52Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@JanKrivanek could you please take over? I'm not sure how to test the changes and how to access `StableStringHash` method correctly.",
        "createdAt": "2024-04-24T13:36:58Z",
        "author": {
          "login": "ilonatommy"
        }
      },
      {
        "body": "The new prop function should be added to the doc page: https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-property-functions. Not urgent but we should make sure we don't forget.",
        "createdAt": "2024-04-25T08:48:08Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We've been adding intrinsics to the giant `TryExecuteWellKnownFunction` method in `Expander` to avoid the cost of reflection. It's not a huge deal but I think it would be better to add this one as well, especially since we know it's used in pretty much all builds.",
              "createdAt": "2024-04-24T15:37:07Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -627,6 +628,12 @@ internal static bool AreFeaturesEnabled(Version wave)\n             return ChangeWaves.AreFeaturesEnabled(wave);\n         }\n \n+        internal static string SubstringByTextElements(string input, int start, int length)\n+        {\n+            StringInfo stringInfo = new StringInfo(input);\n+            return stringInfo.SubstringByTextElements(start, length);\n+        }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Those are now text elements rather than codepoints.  Which has consequences:\r\n\r\n* `$(MSBuildCopyMarkerName.Length)` can still be greater than 17 after this shortening.\r\n* If `$(MSBuildProjectFile)` is `\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66.proj`, then StringInfo.SubstringByTextElements(0, 8) will throw ArgumentOutOfRangeException.  That string has 27 UTF-16 code units but only 7 text elements.",
              "createdAt": "2024-04-25T11:12:43Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "If you're going to have an [MSBuild]::SubstringByTextElements intrinsic function, then either it should check for out-of-range arguments itself, or there should be an [MSBuild]::CountTextElements function as well.  Otherwise it's too difficult to use reliably in projects.",
              "createdAt": "2024-04-25T11:24:50Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "But I think what this really needs is a property function that returns all the text elements that entirely fit within the specified substring, with arguments given in UTF-16 code units.  So that the resulting string never has more UTF-16 code units than requested.  Because those are what matters for file name lengths in NTFS.",
              "createdAt": "2024-04-25T11:28:26Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "These are excellent points. We may get away with this functionality to be just a best-effort \"make the file name reasonably long\" but we definitely must fix the possible ArgumentOutOfRangeException and it's worth thinking about a more useful property function too.",
              "createdAt": "2024-04-25T12:19:58Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Should we consider moving the entire operation to a new, dedicated property function so we could just do \r\n\r\n```xml\r\n<MSBuildCopyMarkerName>$([MSBuild]::ShortUniqueProjectName())</MSBuildCopyMarkerName>\r\n```\r\n\r\nor similar?",
              "createdAt": "2024-04-25T14:00:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'd still keep it general for other strings as well - there seems to be other usages in org on path args that might need revision: https://github.com/search?q=repo%3Adotnet%2Fsdk+path%3A**%2F*.targets+substring&type=code",
              "createdAt": "2024-04-29T07:10:36Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "After re-checking the list of places where we use `substring`, none of them require a PR.\r\n- code in net5 - we do not backport to it\r\n- https://github.com/dotnet/sdk/blob/52acdcaad568cc56ca67b33b6b2ea7fa1e489d24/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L301 - the substring is done on a hash of a string, so it's always in a form e.g. `_NormalizedPublishDirHash = 13cbcd0c3203541f1c707c5ea0b45e9f20f4d3cf71f0e2b68e723cab7e9427c3` - no surrogates.\r\n- https://github.com/dotnet/sdk/blob/1f91c5339897b46f5119ed5d43d9b29be237aca5/src/BuiltInTools/dotnet-watch/DotNetWatch.targets#L87 - the substring is executed only if the `Identity` starts with a 7-char string: `wwwroot/`, so the `Substring(8)` will never cut a surrogate in half.",
              "createdAt": "2024-05-22T20:18:07Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -388,8 +388,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   \n   <PropertyGroup Condition=\"'$(MSBuildCopyMarkerName)' == ''\">\n     <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>\n-    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and a filename hash. -->\n-    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>\n+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 codepoints of the filename and a filename hash. -->\n+    <MSBuildCopyMarkerName Condition=\"'$(MSBuildCopyMarkerName.Length)' &gt; '17'\">$([MSBuild]::SubstringByTextElements($(MSBuildProjectFile), 0, 8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"X8\"))</MSBuildCopyMarkerName>",
              "author": {
                "login": "ilonatommy"
              }
            }
          ]
        }
      }
    ]
  }
}