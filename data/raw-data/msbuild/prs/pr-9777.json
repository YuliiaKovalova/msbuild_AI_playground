{
  "number": 9777,
  "title": "Fix events for sdk resolvers load",
  "body": "Fixes #9679\r\n\r\n### Context\r\nIt seems like events in sdk resolver service are misleading. We emit some events even when resolvers were taken from process-wide cache and not actually loaded.\r\n\r\n### Changes Made\r\nMoved the events emission to SdkResolverLoader, so that the events concerning loading are not emitted when a cached value was used.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-02-23T13:17:53Z",
  "updatedAt": "2024-03-01T16:46:43Z",
  "closedAt": "2024-03-01T16:31:54Z",
  "mergedAt": "2024-03-01T16:31:54Z",
  "additions": 44,
  "deletions": 28,
  "changedFiles": 3,
  "headRefName": "fix-events-for-sdk-load",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "03c1890ba1553311a451e133dbd2b42d3fcb4617",
          "message": "Fix events for sdk load",
          "committedDate": "2024-02-23T13:10:37Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50f3210b51be8b1d5ae4646f1aab15db6f067499",
          "message": "Merge branch 'main' into fix-events-for-sdk-load",
          "committedDate": "2024-02-23T13:29:42Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "61a092efd2ad54349aed6c59a277d4fa1166659e",
          "message": "Address PR comments",
          "committedDate": "2024-02-28T09:35:49Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f81dc1e56e01d76c075b2140d399e43364624e35",
          "message": "Fix formatting.",
          "committedDate": "2024-02-28T09:42:46Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9858b333ff76cd82d1271d6410b7dd0a701f05e8",
          "message": "Fix formatting - 2",
          "committedDate": "2024-02-28T12:12:31Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2979350f24939e4721ca34d3bcad69323ed55ba3",
          "message": "Update src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2024-02-28T17:05:29Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Thank youf ror the PR! Overall looks good, however will it be possible to add testing for the changed code?\r\n\r\nOnly logging is changed, I believe that we do not cover it with tests. ",
        "createdAt": "2024-02-28T09:18:17Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "We currently don't test our `EventSource` event logging but it would be nice if we did. May be worth filing an issue for it.",
        "createdAt": "2024-02-28T09:27:51Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> We currently don't test our `EventSource` event logging but it would be nice if we did. May be worth filing an issue for it.\r\n\r\nI agree, let's file an issue for that and discuss this option.",
        "createdAt": "2024-02-28T09:37:44Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think this is worth measuring. It's just an instantiation of a couple of objects.",
              "createdAt": "2024-02-27T10:27:26Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -36,15 +37,20 @@ internal class SdkResolverLoader\n \n         internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n         {\n+\n+            MSBuildEventSource.Log.SdkResolverLoadResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n \n+            MSBuildEventSource.Log.SdkResolverLoadResolversStop(string.Empty, resolvers.Count);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": " It also it reports the number of resolvers loaded and without these events the log would not report the correct number of loaded resolvers. But we are probably not super interested in that, so theoretically we can drop them. ",
              "createdAt": "2024-02-27T15:48:37Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -36,15 +37,20 @@ internal class SdkResolverLoader\n \n         internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n         {\n+\n+            MSBuildEventSource.Log.SdkResolverLoadResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n \n+            MSBuildEventSource.Log.SdkResolverLoadResolversStop(string.Empty, resolvers.Count);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Yes, we're not really _loading_ any resolvers here so I think we wouldn't miss anything without this event.",
              "createdAt": "2024-02-28T09:27:48Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -36,15 +37,20 @@ internal class SdkResolverLoader\n \n         internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n         {\n+\n+            MSBuildEventSource.Log.SdkResolverLoadResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n \n+            MSBuildEventSource.Log.SdkResolverLoadResolversStop(string.Empty, resolvers.Count);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Agreed, removed them.",
              "createdAt": "2024-02-28T09:43:57Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -36,15 +37,20 @@ internal class SdkResolverLoader\n \n         internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n         {\n+\n+            MSBuildEventSource.Log.SdkResolverLoadResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n \n+            MSBuildEventSource.Log.SdkResolverLoadResolversStop(string.Empty, resolvers.Count);",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I wonder if this shouldn't be moved to a `finally` block. Same for the other Stop calls in this file.",
              "createdAt": "2024-02-27T10:30:09Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -62,13 +68,18 @@ internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation loc\n                 LoadResolvers(potentialResolver, location, resolvers);\n             }\n \n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I agree, that's a good pattern to have to make sure that the stop event was sent. Fixed.",
              "createdAt": "2024-02-28T09:36:51Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -62,13 +68,18 @@ internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation loc\n                 LoadResolvers(potentialResolver, location, resolvers);\n             }\n \n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: You could still keep the `return FindPotentialSdkResolversManifests(...` inside the `try` block. No need to introduce a local variable.",
              "createdAt": "2024-02-28T13:01:07Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -39,36 +40,52 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n-\n             return resolvers;\n         }\n \n         internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n         {\n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n-                new List<SdkResolver> { new DefaultSdkResolver() }\n-                : new List<SdkResolver>();\n+                    new List<SdkResolver> { new DefaultSdkResolver() }\n+                    : new List<SdkResolver>();\n+            try\n+            {   \n+                var potentialResolvers = FindPotentialSdkResolvers(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n \n-            var potentialResolvers = FindPotentialSdkResolvers(\n-                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n+                if (potentialResolvers.Count == 0)\n+                {\n+                    return resolvers;\n+                }\n \n-            if (potentialResolvers.Count == 0)\n-            {\n-                return resolvers;\n+                foreach (var potentialResolver in potentialResolvers)\n+                {\n+                    LoadResolvers(potentialResolver, location, resolvers);\n+                }\n             }\n-\n-            foreach (var potentialResolver in potentialResolvers)\n+            finally\n             {\n-                LoadResolvers(potentialResolver, location, resolvers);\n+                MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);\n             }\n \n             return resolvers.OrderBy(t => t.Priority).ToList();\n         }\n \n         internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)\n         {\n-            return FindPotentialSdkResolversManifests(\n+            MSBuildEventSource.Log.SdkResolverFindResolversManifestsStart();\n+            IReadOnlyList<SdkResolverManifest> allResolversManifests = null;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I need access to resolvers count for the Stop event in the `finally` block. So, I think that we need the local variable here.",
              "createdAt": "2024-02-28T13:14:54Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -39,36 +40,52 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n-\n             return resolvers;\n         }\n \n         internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n         {\n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n-                new List<SdkResolver> { new DefaultSdkResolver() }\n-                : new List<SdkResolver>();\n+                    new List<SdkResolver> { new DefaultSdkResolver() }\n+                    : new List<SdkResolver>();\n+            try\n+            {   \n+                var potentialResolvers = FindPotentialSdkResolvers(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n \n-            var potentialResolvers = FindPotentialSdkResolvers(\n-                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n+                if (potentialResolvers.Count == 0)\n+                {\n+                    return resolvers;\n+                }\n \n-            if (potentialResolvers.Count == 0)\n-            {\n-                return resolvers;\n+                foreach (var potentialResolver in potentialResolvers)\n+                {\n+                    LoadResolvers(potentialResolver, location, resolvers);\n+                }\n             }\n-\n-            foreach (var potentialResolver in potentialResolvers)\n+            finally\n             {\n-                LoadResolvers(potentialResolver, location, resolvers);\n+                MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);\n             }\n \n             return resolvers.OrderBy(t => t.Priority).ToList();\n         }\n \n         internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)\n         {\n-            return FindPotentialSdkResolversManifests(\n+            MSBuildEventSource.Log.SdkResolverFindResolversManifestsStart();\n+            IReadOnlyList<SdkResolverManifest> allResolversManifests = null;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Of course! Please ignore me.",
              "createdAt": "2024-02-28T13:22:12Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -39,36 +40,52 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n-\n             return resolvers;\n         }\n \n         internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n         {\n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n-                new List<SdkResolver> { new DefaultSdkResolver() }\n-                : new List<SdkResolver>();\n+                    new List<SdkResolver> { new DefaultSdkResolver() }\n+                    : new List<SdkResolver>();\n+            try\n+            {   \n+                var potentialResolvers = FindPotentialSdkResolvers(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n \n-            var potentialResolvers = FindPotentialSdkResolvers(\n-                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n+                if (potentialResolvers.Count == 0)\n+                {\n+                    return resolvers;\n+                }\n \n-            if (potentialResolvers.Count == 0)\n-            {\n-                return resolvers;\n+                foreach (var potentialResolver in potentialResolvers)\n+                {\n+                    LoadResolvers(potentialResolver, location, resolvers);\n+                }\n             }\n-\n-            foreach (var potentialResolver in potentialResolvers)\n+            finally\n             {\n-                LoadResolvers(potentialResolver, location, resolvers);\n+                MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);\n             }\n \n             return resolvers.OrderBy(t => t.Priority).ToList();\n         }\n \n         internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)\n         {\n-            return FindPotentialSdkResolversManifests(\n+            MSBuildEventSource.Log.SdkResolverFindResolversManifestsStart();\n+            IReadOnlyList<SdkResolverManifest> allResolversManifests = null;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@jeffkl, I believe that you added some of these events. Can you please confirm that renaming is ok, i.e. nothing on your side depends on the names. Thank you!",
              "createdAt": "2024-02-28T13:03:42Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -476,13 +476,13 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)\n         }\n \n         [Event(62, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStart()\n+        public void SdkResolverLoadAllResolversStart()\n         {\n             WriteEvent(62);\n         }\n \n         [Event(63, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStop(int resolverCount)\n+        public void SdkResolverLoadAllResolversStop(int resolverCount)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I am not personally aware of any dependency on the names of these events",
              "createdAt": "2024-03-01T16:25:42Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -476,13 +476,13 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)\n         }\n \n         [Event(62, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStart()\n+        public void SdkResolverLoadAllResolversStart()\n         {\n             WriteEvent(62);\n         }\n \n         [Event(63, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStop(int resolverCount)\n+        public void SdkResolverLoadAllResolversStop(int resolverCount)",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "My read of https://learn.microsoft.com/en-us/dotnet/core/diagnostics/eventsource-instrumentation#best-practices rule 7 is that renaming should imply giving these new numbers, but it's not that clear to me.",
              "createdAt": "2024-03-01T16:46:12Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -476,13 +476,13 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)\n         }\n \n         [Event(62, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStart()\n+        public void SdkResolverLoadAllResolversStart()\n         {\n             WriteEvent(62);\n         }\n \n         [Event(63, Keywords = Keywords.All)]\n-        public void SdkResolverServiceInitializeStop(int resolverCount)\n+        public void SdkResolverLoadAllResolversStop(int resolverCount)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                MSBuildEventSource.Log.SdkResolverFindResolversManifestsStop(allResolversManifests?.Count ?? 0);\r\n```",
              "createdAt": "2024-02-28T13:58:07Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs",
              "diffHunk": "@@ -39,36 +40,52 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n                 new List<SdkResolver> { new DefaultSdkResolver() }\n                 : new List<SdkResolver>();\n-\n             return resolvers;\n         }\n \n         internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n         {\n+            MSBuildEventSource.Log.SdkResolverLoadAllResolversStart();\n             var resolvers = !string.Equals(IncludeDefaultResolver, \"false\", StringComparison.OrdinalIgnoreCase) ?\n-                new List<SdkResolver> { new DefaultSdkResolver() }\n-                : new List<SdkResolver>();\n+                    new List<SdkResolver> { new DefaultSdkResolver() }\n+                    : new List<SdkResolver>();\n+            try\n+            {   \n+                var potentialResolvers = FindPotentialSdkResolvers(\n+                    Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n \n-            var potentialResolvers = FindPotentialSdkResolvers(\n-                Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"SdkResolvers\"), location);\n+                if (potentialResolvers.Count == 0)\n+                {\n+                    return resolvers;\n+                }\n \n-            if (potentialResolvers.Count == 0)\n-            {\n-                return resolvers;\n+                foreach (var potentialResolver in potentialResolvers)\n+                {\n+                    LoadResolvers(potentialResolver, location, resolvers);\n+                }\n             }\n-\n-            foreach (var potentialResolver in potentialResolvers)\n+            finally\n             {\n-                LoadResolvers(potentialResolver, location, resolvers);\n+                MSBuildEventSource.Log.SdkResolverLoadAllResolversStop(resolvers.Count);\n             }\n \n             return resolvers.OrderBy(t => t.Priority).ToList();\n         }\n \n         internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)\n         {\n-            return FindPotentialSdkResolversManifests(\n+            MSBuildEventSource.Log.SdkResolverFindResolversManifestsStart();\n+            IReadOnlyList<SdkResolverManifest> allResolversManifests = null;\n+            try\n+            {\n+                allResolversManifests = FindPotentialSdkResolversManifests(\n                 Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot, \"SdkResolvers\"), location);\n+            }\n+            finally\n+            {\n+                MSBuildEventSource.Log.SdkResolverFindResolversManifestsStop(allResolversManifests is null ? 0 : allResolversManifests.Count);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}