{
  "number": 11454,
  "title": "Don't mark synthesized projects dirty when SDKs define properties",
  "body": "### Context\r\nFixes #11394\r\nThis is a regression. The bug appeared after [Expand MSBuildSdkResolver](https://github.com/dotnet/sdk/pull/45364). \r\n\r\n### Customer impact\r\nWithout this fix the customers that opt-into `MsBuildUseSimpleProjectRootElementCacheConcurrency` will get `System.NotImplementedException`. This includes `slngen` and `quickbuild`.\r\n\r\n### Details\r\nThe `NotImplementedException` is thrown here:\r\nhttps://github.com/dotnet/msbuild/blob/aff54559404d31214c71aa2ea6d2caa6003b0334/src/Build/Evaluation/SimpleProjectRootElementCache.cs#L133-L136\r\nPreviously the `SdkResult` of `MSBuildSdkResolver` was empty and `ProjectRootElement` was never created for it. Now, it contains 2 properties, and when `ProjectRootElement` is created, every change marks it as dirty. The fix is not to mark it dirty when it is from `SdkResult`\r\n\r\n### Changes made\r\nImplemented internal `CreateNotDirty` that creates `ProjectRootElement` that cannot be dirtied.\r\n\r\n### Testing\r\nAdded unit test for `CreateNotDirty`. Also manually tested that the exception is not thrown anymore.\r\n\r\nRisks\r\n_Low_ - existing tests ensure that other scenarios are not broken, added new test, also tested manually this exact case.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2025-02-17T17:22:29Z",
  "updatedAt": "2025-05-26T14:28:22Z",
  "closedAt": "2025-02-21T11:34:23Z",
  "mergedAt": null,
  "additions": 38,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "simple-cache-bug",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "128541b4fb2553445695d91195e8e671b0e65ec6",
          "message": "add ProjectRootElement.CreateNotDirty that creates projct that will not be marked dirty",
          "committedDate": "2025-02-17T12:32:12Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e80433c933847df47ab680a726d50ab61ea9e185",
          "message": "add test",
          "committedDate": "2025-02-18T09:31:59Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ef78bc9aa746e584a9e2762d8958d8d7a963b55",
          "message": "rename variable",
          "committedDate": "2025-02-18T09:40:24Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f71890c855d7118fa18ebe9d3b6ca78931db6238",
          "message": "Update src/Build/Construction/ProjectRootElement.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2025-02-18T16:26:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a0b591da44cb1f59e66f8e4ea24a93d30cea3d47",
          "message": "use ProjectRootElementCacheBase of the current project instead of global one",
          "committedDate": "2025-02-18T17:18:46Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0da07496379529d1b28e3a8544469e7e6c92289",
          "message": "Merge branch 'simple-cache-bug' of https://github.com/surayya-MS/msbuild into simple-cache-bug",
          "committedDate": "2025-02-18T17:20:52Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "67844bf5e011f72ff4f9344af388b4c8b02c4cf5",
          "message": "address comments",
          "committedDate": "2025-02-20T09:26:59Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "49ad02fd97bc1bcd087087b381ada99158136d10",
          "message": "Merge branch 'main' into simple-cache-bug",
          "committedDate": "2025-02-20T09:27:51Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "43fbc4f2e6b568e3a91f53e36f9fc128b089a2b2",
          "message": "fix",
          "committedDate": "2025-02-20T14:19:40Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a18fe30637faf76f6979fd82225d2431e5b75131",
          "message": "Merge branch 'simple-cache-bug' of https://github.com/surayya-MS/msbuild into simple-cache-bug",
          "committedDate": "2025-02-20T14:20:07Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f05950806e68c3728fe5e770b6022e6fa1bdd44e",
          "message": "Merge branch 'main' into simple-cache-bug",
          "committedDate": "2025-02-20T14:24:28Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing this PR in favor of https://github.com/dotnet/msbuild/pull/11478 to target vs17.13",
        "createdAt": "2025-02-21T11:34:23Z",
        "author": {
          "login": "surayya-MS"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Initialize an in-memory, empty ProjectRootElement instance that CANNOT be saved later.\r\n```",
              "createdAt": "2025-02-18T16:10:05Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory, empty ProjectRootElement instance that can be saved later.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the global project collection appropriate? Shouldn't we use the projectcollection that the project we're in mid-evaluation for uses?",
              "createdAt": "2025-02-18T16:10:55Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory, empty ProjectRootElement instance that can be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I used `ProjectCollection.GlobalProjectCollection` because the method `Create()` called in `Evalutor` uses it.\r\n\r\nYes, this makes sense. I will check if this works too",
              "createdAt": "2025-02-18T17:02:34Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory, empty ProjectRootElement instance that can be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "it worked. thanks! done",
              "createdAt": "2025-02-18T17:19:55Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory, empty ProjectRootElement instance that can be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider naming variables in way that implies \"presence\" rather than \"absence\", as it's much more mentally taxing to trying to imagine an absence of something vs having something. There have been few researched done in this area.\r\n\r\nAnother issue here is readability and comprehension - we're assigning here a variable which \"can be dirty\" to something that \"can't be dirty\". It took me several minutes to try to process this, and yet I'm still unsure what this means...",
              "createdAt": "2025-02-19T22:51:42Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -176,6 +176,14 @@ internal ProjectRootElement(XmlReader xmlReader, ProjectRootElementCacheBase pro\n             ProjectParser.Parse(document, this);\n         }\n \n+        private readonly bool _cannotBeDirtied = false;\n+\n+        private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache, NewProjectFileOptions projectFileOptions, bool canBeDirty)\n+            : this(projectRootElementCache, projectFileOptions)\n+        {\n+            _cannotBeDirtied = canBeDirty;",
              "author": {
                "login": "RussKie"
              }
            },
            {
              "body": "Thanks! Previously I named the variable `_canBeDirty` then later changed to `_cannotbeDirtied` and missed renaming the variable here too.\r\nI'll rename everything back to `canBeDirty`",
              "createdAt": "2025-02-20T09:03:25Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -176,6 +176,14 @@ internal ProjectRootElement(XmlReader xmlReader, ProjectRootElementCacheBase pro\n             ProjectParser.Parse(document, this);\n         }\n \n+        private readonly bool _cannotBeDirtied = false;\n+\n+        private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache, NewProjectFileOptions projectFileOptions, bool canBeDirty)\n+            : this(projectRootElementCache, projectFileOptions)\n+        {\n+            _cannotBeDirtied = canBeDirty;",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[typo] If this means that a new empty instance is created in-memory, then the comma is incorrect here. Otherwise, the bit before the comma looks incomplete.",
              "createdAt": "2025-02-19T22:56:01Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory, empty ProjectRootElement instance that CANNOT be saved later.",
              "author": {
                "login": "RussKie"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would prefer a more descriptive name like `CreateEphemeral`. Let's follow up with that once this is in `main` to not reset testing.",
              "createdAt": "2025-02-20T21:28:29Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.\n+        /// </summary>\n+        internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase projectRootElementCache)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "i will address this in the follow-up PR",
              "createdAt": "2025-02-21T11:35:29Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.\n+        /// </summary>\n+        internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase projectRootElementCache)",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nit] Consider using parameter name before opaque values (I'm sure there's a proper term for this but I can't recall it):\r\n```suggestion\r\n            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, ???: false);\r\n```",
              "createdAt": "2025-02-20T21:40:42Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.\n+        /// </summary>\n+        internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase projectRootElementCache)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(projectRootElementCache);\n+\n+            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, false);",
              "author": {
                "login": "RussKie"
              }
            },
            {
              "body": "i will address this in the follow-up PR",
              "createdAt": "2025-02-21T11:35:15Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -712,6 +720,18 @@ internal ProjectExtensionsElement ProjectExtensions\n         internal string LastDirtyReason\n             => _dirtyReason == null ? null : String.Format(CultureInfo.InvariantCulture, _dirtyReason, _dirtyParameter);\n \n+        /// <summary>\n+        /// Initialize an in-memory empty ProjectRootElement instance that CANNOT be saved later.\n+        /// The ProjectRootElement will not be marked dirty.\n+        /// Uses the global project collection.\n+        /// </summary>\n+        internal static ProjectRootElement CreateNotDirty(ProjectRootElementCacheBase projectRootElementCache)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(projectRootElementCache);\n+\n+            return new ProjectRootElement(projectRootElementCache, Project.DefaultNewProjectTemplateOptions, false);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}