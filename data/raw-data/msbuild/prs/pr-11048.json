{
  "number": 11048,
  "title": "General performance plan one pager",
  "body": "One pager for the next iteration.",
  "state": "MERGED",
  "createdAt": "2024-11-28T13:39:18Z",
  "updatedAt": "2025-01-14T13:51:35Z",
  "closedAt": "2025-01-14T13:51:33Z",
  "mergedAt": "2025-01-14T13:51:33Z",
  "additions": 41,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/perf-onepager",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": {
    "title": ".NET 10"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "05966ccbd19fe0d45b8aea15abf3f543a83bfeca",
          "message": "General performance plan one pager.",
          "committedDate": "2024-11-28T13:38:53Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9c26d98da7e27e01454aadb6e28115d6e92ee4bb",
          "message": "Update documentation/specs/proposed/General_perf_onepager.md\n\nCo-authored-by: Jan Krivanek <jankrivanek@microsoft.com>",
          "committedDate": "2024-11-29T13:22:50Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3409bef2d35ef20e4699d434810c3a450e80a1a4",
          "message": "Update documentation/specs/proposed/General_perf_onepager.md\n\nCo-authored-by: Jan Krivanek <jankrivanek@microsoft.com>",
          "committedDate": "2024-11-29T13:23:28Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed2a589f0197634579b935f2b0125c2bd7207066",
          "message": "Update documentation/specs/proposed/General_perf_onepager.md\n\nCo-authored-by: Jan Krivanek <jankrivanek@microsoft.com>",
          "committedDate": "2024-11-29T13:23:47Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f22802b0a9370fe982adcf9d542c53aa2f83b5b",
          "message": "Resolving comments",
          "committedDate": "2024-12-02T14:38:00Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33d0b6b472495bc6e8af95dbc9baaa53df09b5a9",
          "message": "Update documentation/specs/proposed/General_perf_onepager.md\n\nCo-authored-by: Chet Husk <baronfel@users.noreply.github.com>",
          "committedDate": "2024-12-03T12:08:22Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b9bac4db439e515985f7cf35e27cee23beab5ce",
          "message": "Unified spaces",
          "committedDate": "2025-01-14T13:25:01Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c3a80eb8bd997f785f242d72ab91969c4137463",
          "message": "Unified spacing",
          "committedDate": "2025-01-14T13:27:59Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I'd like to see a section outlining the different 'customers' (hosts/users) of MSBuild to help inform the discussion of the impact for each use case. For example, the list might be:\r\n> \r\n> * VS driving builds via APIs (but not the orchestration side of MSBuild) and doing project evaluations\r\n> * DevKit/Ionide/Draco lang/other VSCode extensions doing evaluations in-memory and driving builds via the CLI\r\n> * Some SDK commands doing evaluations in-memory and builds via the API\r\n> * The Build/Pack/Publish/Clean/etc commands all doing builds via the CLI (and sometimes doing evaluations in-memory immediately before that)\r\n> * CLI based users doing evaluations using the -getProperty/-getItem/-getTargetResults flags\r\n\r\n*cough* https://github.com/dotnet/msbuild/pull/11002",
        "createdAt": "2024-12-04T20:17:36Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: indentation makes the markup interpret this as a code\r\n```suggestion\r\n - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\r\n - Overall build times should be reduced. \r\n - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\r\n```",
              "createdAt": "2024-11-28T15:07:48Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Same with all the sections below",
              "createdAt": "2024-11-28T15:07:59Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\r\n\r\nAn example of this. I dropped 175ms in Startup in the Visual Studio performance lab, this reduced startup time @ 75th in 17.12 by up to 1 second in telemetry. \r\n\r\nThis is because the lab is testing perfect conditions; everything is already in the I/O cache, there's nothing else running and stealing resources, etc. In the real world this isn't the case, someone might have just rebooted, things might not be in the I/O cache, there's things going on in the background, defender is running, etc so these very small wins can translate to very big wins in the wild. \r\n\r\nOn top of this, if you just continue to make small but very repeatible changes and you have 10 of these small 50ms changes, and now of a sudden you have 500ms saved in the lab and even more in the wild.",
              "createdAt": "2024-11-29T06:49:29Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.",
              "author": {
                "login": "davkean"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    - Some ideas and performance measurement findings might need to be skipped due to technical limitations or complexity/improvements ratio.\r\n```",
              "createdAt": "2024-11-28T15:08:45Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate\n+    - David Kean - as a VS performance expert\n+\n+## Risks\n+\n+    - Performance improvements might not be as significant as expected.\n+    - We can break existing functionality while making changes.\n+    - We can thow away some ideas due to technical limitations or complexity/improvements ratio.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "One way to limit this is timebox; start with the real easy wins, if you are spending too much time on one win, just move onto the next one until you run out. I'm super confident based on working in this code base, looking at traces and perf in general, we will find more easy wins than we'll be able to fix.",
              "createdAt": "2024-11-29T06:56:42Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate\n+    - David Kean - as a VS performance expert\n+\n+## Risks\n+\n+    - Performance improvements might not be as significant as expected.\n+    - We can break existing functionality while making changes.\n+    - We can thow away some ideas due to technical limitations or complexity/improvements ratio.",
              "author": {
                "login": "davkean"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nOur goal in this scope is to find small and medium size opprotunities (Achievable within a single sprint with 1-2 dev investment). Bigger functionalities such as evaluation caching and RAR caching are described in separate documents.\r\n```",
              "createdAt": "2024-11-28T15:09:46Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate\n+    - David Kean - as a VS performance expert\n+\n+## Risks\n+\n+    - Performance improvements might not be as significant as expected.\n+    - We can break existing functionality while making changes.\n+    - We can thow away some ideas due to technical limitations or complexity/improvements ratio.\n+\n+## Cost\n+\n+Performance improvements are a long-term investment. We need to balance the cost of the improvements with the expected benefits.\n+We will need to invest time in collecting data, analyzing the data, and implementing improvements.\n+\n+Our goal in this scope is to find small and medium size opprotunities. Bigger functionalities such as evaluation caching and RAR caching are described in separate documents.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We might want to name some of the strategies to be used:\r\n * Top hits in PRISM\r\n * ETW measurements on batch build / incrmental build and VS build / incremental build on small and mid solutions and detecting opportunities to improve\r\n * Reviewing some of the earlier identified opportunities: https://github.com/dotnet/msbuild/issues?q=is%3Aissue%20state%3Aopen%20label%3Aperformance",
              "createdAt": "2024-11-29T06:25:21Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate\n+    - David Kean - as a VS performance expert\n+\n+## Risks\n+\n+    - Performance improvements might not be as significant as expected.\n+    - We can break existing functionality while making changes.\n+    - We can thow away some ideas due to technical limitations or complexity/improvements ratio.\n+\n+## Cost\n+\n+Performance improvements are a long-term investment. We need to balance the cost of the improvements with the expected benefits.\n+We will need to invest time in collecting data, analyzing the data, and implementing improvements.\n+\n+Our goal in this scope is to find small and medium size opprotunities. Bigger functionalities such as evaluation caching and RAR caching are described in separate documents.\n+\n+## Plan\n+    \n+    - Collect data on the current performance bottlenecks.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Visual Studio can 100% help with this, we have:\r\n\r\n1) Performance lab traces with representative samples across almost all project types, including C++, .NET Framework and .NET Core.\r\n\r\n2) Real world telemetry of our builds in the wild. I would focus first on on rebuild scenario where we actually call MSBuild as we mostly try and avoid skipping msbuild when we can due to performance reasons, so other measurements (such as incremental/up-to-date) wouldn't be an accurate representation of MSBuild's up-to-date or incremental cost in the wild.\r\n\r\n3) We are already collecting, or can collect real world traces from machines in the wild for:\r\n   - High CPU usage\r\n   - High GC-time\r\n   - Thread pool starvation\r\n   - Solution load (for evaluation time)\r\n   - Builds (just turning this on, this week)\r\n   - Basically any scenario tracked by ETW or telemetry (we might have to add some of these to MSBuild itself so that our tracing system (via PerfWatson) can watch for it and trace it.\r\n \r\nThese are analyzed, blamed and then aggregated through our analyzers. These produce bug-level failures that that are ranked by the top issues in the wild. From here we can find very easy low hanging fruit across the entire product. It can, or will identify, big ticket items as well, such as RAR, JITing overhead, lack of Server GC (so GC can't compete), CPU starvation + cost of context switches (due to MSBuild firing up more thread pools than CPUs across all nodes). I suggest we start with the easy, and low hanging fruit and then build the case for big ticket items. I can help with this.\r\n\r\nOnce we have data, I will come and present and teach you folks how to read this data, download traces, understand the data, etc.\r\n   \r\n  ",
              "createdAt": "2024-11-29T07:06:02Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+\n+## Impact\n+    \n+    - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+    - Overall build times should be reduced. \n+    - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate\n+    - David Kean - as a VS performance expert\n+\n+## Risks\n+\n+    - Performance improvements might not be as significant as expected.\n+    - We can break existing functionality while making changes.\n+    - We can thow away some ideas due to technical limitations or complexity/improvements ratio.\n+\n+## Cost\n+\n+Performance improvements are a long-term investment. We need to balance the cost of the improvements with the expected benefits.\n+We will need to invest time in collecting data, analyzing the data, and implementing improvements.\n+\n+Our goal in this scope is to find small and medium size opprotunities. Bigger functionalities such as evaluation caching and RAR caching are described in separate documents.\n+\n+## Plan\n+    \n+    - Collect data on the current performance bottlenecks.",
              "author": {
                "login": "davkean"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would pick a strawman, such as \"Reduce Visual Studio rebuild time at @ 75th by 20%.\". Number doesn't really matter, but we should aim to have a real world telemetry measurement that we can track, and avoid regressions.\r\n\r\nWe already have telemetry and tracking of this on our performance dashboards on ShipReady. Unlike almost every single one of VS's performance metrics, release over release, rebuild has actually gotten worse, despite hardware getting better.",
              "createdAt": "2024-11-29T06:53:38Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "It's difficult right now to set a target number when we don't know exactly what is possible to achieve within this scope. I would keep it as a best-effort task, and we can sync on selecting particular improvements based on priorities, such as UI delay, rebuild time, etc.",
              "createdAt": "2024-12-02T14:36:06Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I would pick build **_and_** evaluation time. Both are heavily important for Visual Studio.",
              "createdAt": "2024-11-29T06:54:28Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "I considered evaluation as part of the build internally, but I will express it explicitly.",
              "createdAt": "2024-12-02T13:42:18Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "We do in-procs evaluations without builds.",
              "createdAt": "2024-12-02T13:54:16Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching opportunities to improve the build times.",
              "author": {
                "login": "davkean"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Thanks for this! Super excited to help out where I can.\r\n\r\nI wouldn't exclude \"C++\" nor \"SDK projects\" in this where that overlaps and falls into the MSBuild \"core bucket\" or this repository. Some of our data might find issues with other code too (bad tasks/targets), external executables called as build, .NET SDK itself, etc.\r\n\r\nOne more thing I would add would be to ensure that we have:\r\n\r\n1) The right telemetry in place to avoid regressions in the wild. We already have this for Visual Studio rebuild, however, we want to fix other scenarios, we should have telemetry in place so that a) we can track that we're making a difference and b) don't regress it.\r\n\r\n2) Tests. There's no point fixing performance if someone can make a change very next build and regress it. We have tests in the VS lab, but if we're interested in very specific scenarios, we must have tests running somewhere (our lab can be that if you like) to avoid regressions.\r\n\r\nThis is how VS does it:\r\n\r\n1) Identity scenarios we care about\r\n2) Write tests in lab to track that scenario\r\n3) Have the _right_ telemetry that also tracks scenario and put on \"ShipReady\" to monitor and automatically file bugs when it regresses.\r\n4) Fix, measure, merge, repeat and watch as lab and telemetry goes down.\r\n\r\nNow you folks will be new to a lot of this, and my team can help bring you up to speed how this works and help where needed.\r\n",
              "createdAt": "2024-11-29T07:13:35Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "I didn't want to exclude any project type :) .NET was just the first thing that came to mind. I will write it more generically.\r\n\r\nI like your enthusiasm :) We will have a working lab tailored for MSBuild to detect regressions. With the Visual Studio lab data, we can cover more scenarios, which is great. Looking forward to joining forces and speeding up Visual Studio.",
              "createdAt": "2024-12-02T13:51:36Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,42 @@\n+# General performance improvements\n+MSBuild is the main tool used for building .NET projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    - Chet Husk (PM) - as a customer advocate\r\n```",
              "createdAt": "2024-12-02T15:53:28Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,41 @@\n+# General performance improvements\n+MSBuild is the main tool used for building various types of projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching for opportunities to improve evaluation and build times. We can utilize the data collected by ETW traces, the VS perf lab, and previously identified performance issues.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+## Impact\n+    \n+ - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+ - Overall build times should be reduced. \n+ - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Correcting your own name in a teammate's PR... Sorry, it looks like I need a vacation :)",
              "createdAt": "2024-12-03T12:09:57Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,41 @@\n+# General performance improvements\n+MSBuild is the main tool used for building various types of projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching for opportunities to improve evaluation and build times. We can utilize the data collected by ETW traces, the VS perf lab, and previously identified performance issues.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+## Impact\n+    \n+ - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+ - Overall build times should be reduced. \n+ - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders\n+\n+    - Chet Hust (PM) - as a customer advocate",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The formatting in these sections ended up very weird. I think its too many spaces before the list start.",
              "createdAt": "2024-12-11T09:07:34Z",
              "path": "documentation/specs/proposed/General_perf_onepager.md",
              "diffHunk": "@@ -0,0 +1,41 @@\n+# General performance improvements\n+MSBuild is the main tool used for building various types of projects. It is used by Visual Studio, the .NET CLI, and other build tools. The performance of MSBuild is critical to the productivity of developers. This document outlines our goals to improve overall performance of MSBuild.\n+\n+## Goals and Motivation\n+\n+We are aiming for:\n+ - Searching for opportunities to improve evaluation and build times. We can utilize the data collected by ETW traces, the VS perf lab, and previously identified performance issues.\n+ - Reducing MSBuild overhead in the Visual Studio IDE.\n+ - Collecting data to understand the current performance bottlenecks.\n+\n+This document does not cover specific performance improvements, but rather outlines the general goals and motivation for the performance improvements.\n+\n+## Impact\n+    \n+ - Opening project/solution, branch switching and other operations using MSBuild code in VS should be less impacted by the MSBuild.\n+ - Overall build times should be reduced. \n+ - Even a small improvement can save a lot of time and computing resources across all builds done daily worldwide.\n+\n+## Stakeholders",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      }
    ]
  }
}