{
  "number": 9972,
  "title": "Do not allow GetType and compare ignoring case",
  "body": "Fixes #9967\r\n\r\n### Context\r\nThe GetType method is still available if called like \"gettype\" \r\n\r\n### Changes Made\r\nCompare the method name ignoring the case\r\n\r\n### Testing\r\nAdded two tests\r\n- Cover when it is not allowed\r\n- Cover when GetType is enabled using env variable \"MSBUILDENABLEALLPROPERTYFUNCTIONS\"\r\n",
  "state": "MERGED",
  "createdAt": "2024-04-04T08:11:05Z",
  "updatedAt": "2024-06-14T10:04:24Z",
  "closedAt": "2024-04-05T10:06:46Z",
  "mergedAt": "2024-04-05T10:06:46Z",
  "additions": 67,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "dev/f-alizada/fix-gettype-methodname-comparison",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c820d6be9da35ff71afdf3caf8a25b0ee34c3281",
          "message": "Do not allow GetType and compare ignoring case",
          "committedDate": "2024-04-04T08:07:57Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1abd1ab4b0c0aab61c389e6990792434378a18c",
          "message": "Address pr comments",
          "committedDate": "2024-04-05T08:12:28Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Please consider to put it under change wave.\r\n\r\nThank you @rokonec for the review, the possible breaking change was discussed in the issue. \r\nThere is a documentation stating that GetType is not supported: https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/calling-gettype-property-functions\r\nI'm not against putting the change begind the changewave however, there is a already a flag that will allow to do that: \r\nhttps://github.com/dotnet/msbuild/blob/c820d6be9da35ff71afdf3caf8a25b0ee34c3281/src/Build/Evaluation/Expander.cs#L5302-L5311\r\nWhat do you think? \r\nFYI @baronfel \r\n",
        "createdAt": "2024-04-04T09:55:00Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "> there is a already a flag that will allow to do that\r\n\r\n@f-alizada in this case it is not a big deal. However, if I understand it correctly, we try to make it easier for customer by putting ALL functional changes into changewave and using escapehatches for long term (infinite) support of some optional features. in this particular case it make sense to me that it will be under both opt-in escape hatch and changewave.\r\n\r\nThat being said, customer could have been already broken with former case sensitive change, so maybe in this case we can leave it without changewave.\r\n\r\nWhat is your take on it @rainersigwald ",
        "createdAt": "2024-04-04T10:50:33Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Wouldn't this assertion fail with non-English locale? Would it be enough to look for `MSB4185`?",
              "createdAt": "2024-04-05T07:15:20Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4978,6 +4978,56 @@ public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData_Respect\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"getType\")]\n+        [InlineData(\"GetType\")]\n+        [InlineData(\"gettype\")]\n+        public void GetTypeMethod_ShouldNotBeAllowed(string methodName)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var root = env.CreateFolder();\n+\n+                var projectFile = env.CreateFile(root, \".proj\",\n+                    @$\"<Project>\n+    <PropertyGroup>\n+        <foo>aa</foo>\n+        <typeval>$(foo.{methodName}().FullName)</typeval>\n+    </PropertyGroup>\n+</Project>\");\n+                var exception = Should.Throw<InvalidProjectFileException>(() =>\n+                {\n+                    new ProjectInstance(projectFile.Path);\n+                });\n+                exception.BaseMessage.ShouldContain($\"The function \\\"{methodName}\\\" on type \\\"System.String\\\" is not available for execution as an MSBuild property function.\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thank you for pointing out. \r\nIn my opinion verifying that code exists in the message does not provide 100% certainty that the message is correct , + it has additinal protection on message error change \r\nwhat do you think if before the test to set the currentCultureInfo?  \r\n```\r\ncurrentThread.CurrentCulture = new CultureInfo(\"en\");\r\ncurrentThread.CurrentUICulture = new CultureInfo(\"en\");\r\n```\r\n",
              "createdAt": "2024-04-05T07:36:09Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4978,6 +4978,56 @@ public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData_Respect\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"getType\")]\n+        [InlineData(\"GetType\")]\n+        [InlineData(\"gettype\")]\n+        public void GetTypeMethod_ShouldNotBeAllowed(string methodName)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var root = env.CreateFolder();\n+\n+                var projectFile = env.CreateFile(root, \".proj\",\n+                    @$\"<Project>\n+    <PropertyGroup>\n+        <foo>aa</foo>\n+        <typeval>$(foo.{methodName}().FullName)</typeval>\n+    </PropertyGroup>\n+</Project>\");\n+                var exception = Should.Throw<InvalidProjectFileException>(() =>\n+                {\n+                    new ProjectInstance(projectFile.Path);\n+                });\n+                exception.BaseMessage.ShouldContain($\"The function \\\"{methodName}\\\" on type \\\"System.String\\\" is not available for execution as an MSBuild property function.\");",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Thank you for the quick response. I don't have a strong opinion. Setting the culture (and restoring it after the test) looks like a good approach. Or maybe asserting that the code and `methodName` are both present would also provide reasonable coverage.",
              "createdAt": "2024-04-05T08:03:03Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4978,6 +4978,56 @@ public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData_Respect\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"getType\")]\n+        [InlineData(\"GetType\")]\n+        [InlineData(\"gettype\")]\n+        public void GetTypeMethod_ShouldNotBeAllowed(string methodName)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var root = env.CreateFolder();\n+\n+                var projectFile = env.CreateFile(root, \".proj\",\n+                    @$\"<Project>\n+    <PropertyGroup>\n+        <foo>aa</foo>\n+        <typeval>$(foo.{methodName}().FullName)</typeval>\n+    </PropertyGroup>\n+</Project>\");\n+                var exception = Should.Throw<InvalidProjectFileException>(() =>\n+                {\n+                    new ProjectInstance(projectFile.Path);\n+                });\n+                exception.BaseMessage.ShouldContain($\"The function \\\"{methodName}\\\" on type \\\"System.String\\\" is not available for execution as an MSBuild property function.\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thank you! Updated to have the cultureInfo set before the test, however left the approach of verifying the message itself  instead of the code and method name :) ",
              "createdAt": "2024-04-05T08:16:23Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4978,6 +4978,56 @@ public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData_Respect\n             }\n         }\n \n+        [Theory]\n+        [InlineData(\"getType\")]\n+        [InlineData(\"GetType\")]\n+        [InlineData(\"gettype\")]\n+        public void GetTypeMethod_ShouldNotBeAllowed(string methodName)\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+                var root = env.CreateFolder();\n+\n+                var projectFile = env.CreateFile(root, \".proj\",\n+                    @$\"<Project>\n+    <PropertyGroup>\n+        <foo>aa</foo>\n+        <typeval>$(foo.{methodName}().FullName)</typeval>\n+    </PropertyGroup>\n+</Project>\");\n+                var exception = Should.Throw<InvalidProjectFileException>(() =>\n+                {\n+                    new ProjectInstance(projectFile.Path);\n+                });\n+                exception.BaseMessage.ShouldContain($\"The function \\\"{methodName}\\\" on type \\\"System.String\\\" is not available for execution as an MSBuild property function.\");",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}