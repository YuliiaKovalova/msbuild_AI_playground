{
  "number": 8211,
  "title": "CopyTask: Fallback to SymbolicLinks if HardLinks fail",
  "body": "Fixes [#6247 ](https://github.com/dotnet/msbuild/issues/6247)\r\n\r\n### Context\r\nMSB3891: Both \"UseHardlinksIfPossible\" and \"UseSymboliclinksIfPossible\" were specified in the project file. Please choose one or the other.\r\n\r\n### Changes Made\r\nSupport both UseHardlinksIfPossible and UseSymboliclinksIfPossible are on. Initialize variable hardLinkCreated and symbolicLinkCreated. When source file and destination file are not in the same folder. It failed to create hard link and fallback to  create symbolic link.\r\n\r\n### Testing\r\nUpdate test case CopyWithHardAndSymbolicLinks() to support both UseHardlinksIfPossible and UseSymboliclinksIfPossible on\r\n\r\n**Manually test in different drivers when don't have permission create symbolic link**\r\n**Output is as bellow:**\r\nCopyFiles:\r\n  Creating hard link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\".\r\n  Could not use a hard link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\". Copying the file with symbolic link instead. The system cannot move the file to a different disk drive. (Exception from HRESULT: 0\r\n  x80070011)\r\n  Creating symbolic link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\".\r\n  Could not use a link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\". Copying the file instead. A required privilege is not held by the client. (Exception from HRESULT: 0x80070522)\r\n  Copying file from \"E:\\Test\\ConsoleApp2\\ConsoleApp2\\Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\".\r\nDone Building Project \"E:\\Test\\ConsoleApp2\\ConsoleApp2\\ConsoleApp2.csproj\" (default targets).\r\n\r\n**Manually test in different drivers when developers have permission create symbolic link**\r\n\r\nCopyFiles:\r\n  Creating hard link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\".\r\n  Could not use a hard link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\". Copying the file with symbolic link instead. The system cannot move the file to a different disk drive. (Exception from HRESULT: 0\r\n  x80070011)\r\n  Creating symbolic link to copy \"Program.cs\" to \"c:\\MyProject\\Destination\\Program.cs\".\r\nDone Building Project \"E:\\Test\\ConsoleApp2\\ConsoleApp2\\ConsoleApp2.csproj\" (default targets).",
  "state": "MERGED",
  "createdAt": "2022-12-02T13:32:57Z",
  "updatedAt": "2022-12-16T15:12:29Z",
  "closedAt": "2022-12-12T02:08:20Z",
  "mergedAt": "2022-12-12T02:08:20Z",
  "additions": 102,
  "deletions": 95,
  "changedFiles": 17,
  "headRefName": "jennybai/issues6247",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "70263b8d049d89eb22fa32ec89b281257fa6bcbd",
          "message": "CopyTask: Fallback to SymbolicLinks if HardLinks fail",
          "committedDate": "2022-12-02T13:27:39Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db669ea8a48ea5bb27dd708e244ffd0151f1122c",
          "message": "Update test CopyWithHardAndSymbolicLinks and delete\nresource Copy.ExactlyOneTypeOfLink",
          "committedDate": "2022-12-05T03:15:24Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "761b07bf42f63ab5a4cd915a430791102d2a2bd2",
          "message": "catch ceating dest folder error",
          "committedDate": "2022-12-05T04:01:47Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c9d9a8f110b4bf7f7271e4357663322d022f5b3",
          "message": "Change des folder",
          "committedDate": "2022-12-05T06:52:08Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4eddfac5c5f72b648f3609bad97347f97eb3b938",
          "message": "Remove me.AssertLogContains(\"0x80070011\"); for test",
          "committedDate": "2022-12-05T07:21:21Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10bc03ccffd1e998f7db31d19a283936741e4f83",
          "message": "Merge branch 'jennybai/issues6247' of https://github.com/dotnet/msbuild into jennybai/issues6247",
          "committedDate": "2022-12-05T07:21:23Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a717d6b097da06e76bb62a1d9d8628e37d40479",
          "message": "Calling GetHRForLastWin32Error GetExceptionForHR try to clear\nout the previous message",
          "committedDate": "2022-12-05T08:15:41Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82e141eb73cf1531c3d9bf53515c62e1ee37ae2e",
          "message": "remove test exception",
          "committedDate": "2022-12-05T09:08:43Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eeef5a55978593d6847cb05aaff1255ebb28c55b",
          "message": "Calling GetHRForLastWin32Error / GetExceptionForHR",
          "committedDate": "2022-12-05T12:36:03Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ef8d1b827c38babd225cace2542c5a3454d3658",
          "message": "Update test case",
          "committedDate": "2022-12-07T06:01:11Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a18701311c2a35a7f4d9098b59c8a7e46424c9a",
          "message": "Update comment",
          "committedDate": "2022-12-07T08:26:50Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cea1afa97022aabad038db382fe8aa77979ba234",
          "message": "Update Copy_Tests.cs\n\nDelete blank line",
          "committedDate": "2022-12-08T02:18:58Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "CopyWithHardAndSymbolicLinks is failing, by the way; you can probably just delete that or (better) say that scenario should succeed and test the results.",
        "createdAt": "2022-12-02T19:36:03Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Jozkee ",
        "createdAt": "2022-12-08T01:27:10Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "unrelated to this PR, there seem to be some unlocalized strings in this path\r\nhttps://github.com/dotnet/msbuild/blob/85ee5a3083488dcc1f64b1e84951be6ce5be2c98/src/Tasks/NativeMethods.cs#L816\r\nhttps://github.com/dotnet/msbuild/blob/85ee5a3083488dcc1f64b1e84951be6ce5be2c98/src/Tasks/NativeMethods.cs#L850",
        "createdAt": "2022-12-08T14:07:07Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> , it will only cause task failure if _all_ configured types of link fail to create. Is that the correct behavior?\r\n\r\nYes, It is.",
        "createdAt": "2022-12-09T03:25:47Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Is there an artifact so I can use this version?",
        "createdAt": "2022-12-16T05:49:07Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "Unfortunately, I believe the pre-release version of MSBuild is only available to internals, so you'll have to wait for preview 3 to ship if you want official bits. You should be able to build this yourself and deploy it to an existing installation, but I don't think that's officially supported.",
        "createdAt": "2022-12-16T07:05:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Thanks, if possible I want to get #3730 in that version as well. What is the cutoff data for a PR?",
        "createdAt": "2022-12-16T07:09:06Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "> Thanks, if possible I want to get #3730 in that version as well. What is the cutoff data for a PR?\r\n\r\nWhile you may be able to make a reasonable inference from past release cadences, that is internal Microsoft information we can't share, sorry.",
        "createdAt": "2022-12-16T15:12:29Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\nextra blank line",
              "createdAt": "2022-12-02T19:31:01Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -274,28 +276,46 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 destinationFileExists = destinationFileState.FileExists;\n             }\n \n-            bool linkCreated = false;\n+            bool symboliclinkCreated = false;\n+            bool hardlinkCreated = false;\n             string errorMessage = string.Empty;\n \n             // If we want to create hard or symbolic links, then try that first\n             if (UseHardlinksIfPossible)\n             {\n-                TryCopyViaLink(HardLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out linkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeHardLink(destination, source, ref errorMessage));\n+                TryCopyViaLink(HardLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out hardlinkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeHardLink(destination, source, ref errorMessage));\n+                if(!hardlinkCreated)\n+                {\n+                    if(UseSymboliclinksIfPossible)\n+                    {\n+                        Log.LogMessage(MessageImportance.Normal, RetryingAsSymbolicLink, sourceFileState.Name, destinationFileState.Name, errorMessage);\n+                    }\n+                    else\n+                    {\n+                        Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileState.Name, destinationFileState.Name, errorMessage);\n+                    }\n+                }\n             }\n-            else if (UseSymboliclinksIfPossible)\n+\n+            if (!hardlinkCreated && UseSymboliclinksIfPossible)\n             {\n-                TryCopyViaLink(SymbolicLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out linkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeSymbolicLink(destination, source, ref errorMessage));\n+                TryCopyViaLink(SymbolicLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out symboliclinkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeSymbolicLink(destination, source, ref errorMessage));\n+                if(!symboliclinkCreated)\n+                {\n+",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Deleted",
              "createdAt": "2022-12-05T03:18:51Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -274,28 +276,46 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 destinationFileExists = destinationFileState.FileExists;\n             }\n \n-            bool linkCreated = false;\n+            bool symboliclinkCreated = false;\n+            bool hardlinkCreated = false;\n             string errorMessage = string.Empty;\n \n             // If we want to create hard or symbolic links, then try that first\n             if (UseHardlinksIfPossible)\n             {\n-                TryCopyViaLink(HardLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out linkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeHardLink(destination, source, ref errorMessage));\n+                TryCopyViaLink(HardLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out hardlinkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeHardLink(destination, source, ref errorMessage));\n+                if(!hardlinkCreated)\n+                {\n+                    if(UseSymboliclinksIfPossible)\n+                    {\n+                        Log.LogMessage(MessageImportance.Normal, RetryingAsSymbolicLink, sourceFileState.Name, destinationFileState.Name, errorMessage);\n+                    }\n+                    else\n+                    {\n+                        Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileState.Name, destinationFileState.Name, errorMessage);\n+                    }\n+                }\n             }\n-            else if (UseSymboliclinksIfPossible)\n+\n+            if (!hardlinkCreated && UseSymboliclinksIfPossible)\n             {\n-                TryCopyViaLink(SymbolicLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out linkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeSymbolicLink(destination, source, ref errorMessage));\n+                TryCopyViaLink(SymbolicLinkComment, MessageImportance.Normal, sourceFileState, destinationFileState, ref destinationFileExists, out symboliclinkCreated, ref errorMessage, (source, destination, errMessage) => NativeMethods.MakeSymbolicLink(destination, source, ref errorMessage));\n+                if(!symboliclinkCreated)\n+                {\n+",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can presumably delete Copy.ExactlyOneTypeOfLink, right?",
              "createdAt": "2022-12-02T19:33:59Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -653,12 +667,6 @@ private bool ValidateInputs()\n                 return false;\n             }\n \n-            // First check if create hard or symbolic link option is selected. If both then return an error\n-            if (UseHardlinksIfPossible & UseSymboliclinksIfPossible)\n-            {\n-                Log.LogErrorWithCodeFromResources(\"Copy.ExactlyOneTypeOfLink\", \"UseHardlinksIfPossible\", \"UseSymboliclinksIfPossible\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Have deleted that",
              "createdAt": "2022-12-05T03:19:10Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -653,12 +667,6 @@ private bool ValidateInputs()\n                 return false;\n             }\n \n-            // First check if create hard or symbolic link option is selected. If both then return an error\n-            if (UseHardlinksIfPossible & UseSymboliclinksIfPossible)\n-            {\n-                Log.LogErrorWithCodeFromResources(\"Copy.ExactlyOneTypeOfLink\", \"UseHardlinksIfPossible\", \"UseSymboliclinksIfPossible\");",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nsymbolicLinkCreated and hardLinkCreated.",
              "createdAt": "2022-12-02T19:34:29Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -274,28 +276,46 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 destinationFileExists = destinationFileState.FileExists;\n             }\n \n-            bool linkCreated = false;\n+            bool symboliclinkCreated = false;\n+            bool hardlinkCreated = false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Updated",
              "createdAt": "2022-12-05T03:19:19Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -274,28 +276,46 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 destinationFileExists = destinationFileState.FileExists;\n             }\n \n-            bool linkCreated = false;\n+            bool symboliclinkCreated = false;\n+            bool hardlinkCreated = false;",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When verify the logs,  for some reason when this test runs with all other tests we are getting the incorrect result from CreateHardLink error message (a message associated with another test). Calling GetHRForLastWin32Error \r\n GetExceptionForHR seems to clear out the previous message and allow us to get the right message in the Copy task.  But for mac and linux. the error is still there.\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=101777&view=ms.vss-test-web.build-test-results-tab&runId=2180158&resultId=104184&paneView=debug",
              "createdAt": "2022-12-05T13:11:32Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2075,10 +2095,10 @@ public void CopyWithHardAndSymbolicLinks()\n \n                 bool success = t.Execute();\n \n-                Assert.False(success);\n-\n+                Assert.True(success);\n+                me.AssertLogContains(\"0x80070011\");",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How to define a different destination folder from source folder applicable for all the OS? @Forgind ",
              "createdAt": "2022-12-05T13:13:07Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "This test was sorta doing that previously. FileUtilities.GetTemporaryFile() should get a random file in the temp directory, and this initializes destFolder to be a different folder (a subfolder). If you want them fully separate, you could put the source file in a subfolder under temp and the destination in a separate subfolder under temp.",
              "createdAt": "2022-12-06T00:39:41Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry, I didn't describe this issue well before. The UseHardlinksIfPossible doesn't work when the source and target are on different drives. This test is for failing to create hard link in different driveS, and fallback to create a symbolic link. I'm wondering how to create different source and destination folders with different drivers applicable for all the OS.",
              "createdAt": "2022-12-06T08:03:17Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Ah, clever. I'm not aware of a similar system on mac/linux with multiple drives. I was tempted to suggest writing into protected memory, but that'll succeed if you have admin privileges, which is bad. I can't think of any other good options off the top of my head. @rainersigwald?",
              "createdAt": "2022-12-06T16:06:18Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think it's reasonable to have a fully-automated test for this case, because we don't have a good way to inject failures for hardlink or symlink creation. \r\n\r\nThere is no guarantee that users or automated build machines have multiple physical disk drives installed, so using the \"can't hardlink across drives\" technique isn't reliable.\r\n\r\nI would do manual testing to confirm the functionality, but the only test I'd check in is the \"can you specify both options\" one.",
              "createdAt": "2022-12-06T16:39:00Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm curious if this is because the MakeHardLink method doesn't ask for the error if we succeeded...perhaps it's being set anyway in some cases? Looking at that method, windows has a different method it calls from mac/linux\u2014they call Marshal.GetLastWin32Error(). Not sure if that's important, but it might explain your comment below.",
              "createdAt": "2022-12-06T00:41:36Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Do you mean the error The system cannot move the file to a different disk drive. (0x80070011) on windows. But on the mac and linux, they are not ?",
              "createdAt": "2022-12-06T12:05:31Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "This was in reference to https://github.com/dotnet/msbuild/pull/8211#discussion_r1039581467; you said GetHRForLastWin32Error and GetExceptionForHR cleared the error on windows but not mac/linux; perhaps you have to call GetLastWin32Error?",
              "createdAt": "2022-12-06T16:08:03Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Have you, by chance, ever run tests with admin privileges? There's a bug in the cleanup logic here. Specifically, it creates the source and dest files, and at the end of the test, it calls Helpers.DeleteFiles(sourceFile, destFile); That method loops through each file and deletes it if it exists, then deletes the directory containing it if it's empty...but when we delete the source file, the directory isn't empty; it has the destination folder/file. When we delete the destination file, its folder just contains the destination file, so we delete that. Afterwards, the source folder _never gets deleted_. That means we can't write to it. You should fix that \ud83d\ude42",
              "createdAt": "2022-12-06T00:47:29Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";\n             string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n             string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n \n+            try\n+            {\n+                Directory.CreateDirectory(destFolder);\n+                string nothingFile = Path.Combine(destFolder, \"nothing.txt\");\n+                File.WriteAllText(nothingFile, \"nothing\");\n+                File.Delete(nothingFile);\n+            }\n+            catch (Exception)\n+            {\n+                Console.WriteLine(\"CopyWithHardAndSymbolicLinks test could not access the detination folder.\");\n+                // Something caused us to not be able to access our the detination folder, don't fail.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Create a new issue https://github.com/dotnet/msbuild/issues/8228  to triage that.",
              "createdAt": "2022-12-07T05:48:23Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2052,11 +2051,32 @@ public class CopyHardAndSymbolicLink_Tests\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+            // Workaround: For some reason when this test runs with all other tests we are getting\n+            // the incorrect result from CreateHardLink error message (a message associated with\n+            // another test). Calling GetHRForLastWin32Error / GetExceptionForHR seems to clear\n+            // out the previous message and allow us to get the right message in the Copy task.\n+            int errorCode = Marshal.GetHRForLastWin32Error();\n+            Marshal.GetExceptionForHR(errorCode);\n+            \n             string sourceFile = FileUtilities.GetTemporaryFile();\n-            string temp = Path.GetTempPath();\n+            const string temp = @\"d:\\\\temp\";\n             string destFolder = Path.Combine(temp, \"2A333ED756AF4dc392E728D0F864A398\");\n             string destFile = Path.Combine(destFolder, Path.GetFileName(sourceFile));\n \n+            try\n+            {\n+                Directory.CreateDirectory(destFolder);\n+                string nothingFile = Path.Combine(destFolder, \"nothing.txt\");\n+                File.WriteAllText(nothingFile, \"nothing\");\n+                File.Delete(nothingFile);\n+            }\n+            catch (Exception)\n+            {\n+                Console.WriteLine(\"CopyWithHardAndSymbolicLinks test could not access the detination folder.\");\n+                // Something caused us to not be able to access our the detination folder, don't fail.",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is this? At minimum, it deserves a comment.",
              "createdAt": "2022-12-06T00:48:50Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2075,10 +2095,10 @@ public void CopyWithHardAndSymbolicLinks()\n \n                 bool success = t.Execute();\n \n-                Assert.False(success);\n-\n+                Assert.True(success);\n+                me.AssertLogContains(\"0x80070011\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Here is output \"The system cannot move the file to a different disk drive. (0x80070011)\" when failed to create a hardLink in different drivers. I wil leave a comment here.",
              "createdAt": "2022-12-06T07:58:17Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2075,10 +2095,10 @@ public void CopyWithHardAndSymbolicLinks()\n \n                 bool success = t.Execute();\n \n-                Assert.False(success);\n-\n+                Assert.True(success);\n+                me.AssertLogContains(\"0x80070011\");",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra space",
              "createdAt": "2022-12-08T01:06:12Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2049,9 +2048,13 @@ public CopyNotHardLink_Tests(ITestOutputHelper testOutputHelper)\n \n     public class CopyHardAndSymbolicLink_Tests\n     {\n+        /// <summary>\n+        /// Verify build sucessfully when UseHardlinksIfPossible and UseSymboliclinksIfPossible are true \n+        /// </summary>\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "deleted",
              "createdAt": "2022-12-08T03:37:51Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -2049,9 +2048,13 @@ public CopyNotHardLink_Tests(ITestOutputHelper testOutputHelper)\n \n     public class CopyHardAndSymbolicLink_Tests\n     {\n+        /// <summary>\n+        /// Verify build sucessfully when UseHardlinksIfPossible and UseSymboliclinksIfPossible are true \n+        /// </summary>\n         [Fact]\n         public void CopyWithHardAndSymbolicLinks()\n         {\n+",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}