{
  "number": 7404,
  "title": "Fixes dotnet / msbuild#6313 FormatUrl",
  "body": "Fixes #6313\r\n\r\n### Context\r\nThe standard task [FormatUrl](https://docs.microsoft.com/en-us/visualstudio/msbuild/formaturl-task) was disabled for .Net Core. \r\n\r\n### Changes Made\r\n\r\n- Removed the 'TaskRequiresFrameworkFailure' error for .Net Core for the FormatUrl task.\r\n- Added a new unit test class for the FormatUrl class.\r\n\r\n#### Additional related changes:\r\nWhen testing with a debug build before making any changes, the debug build would report\r\n```\r\nCalled LogErrorFromResources instead of LogErrorWithCodeFromResources, but message 'The task \"FormatUrl\" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild. See https://aka.ms/msbuild/MSB4803 for further details.' does have an error code 'MSB4803'\r\n```\r\n\r\nTwo other tasks use the 'TaskRequiresFrameworkFailure' error: LC and ResolveComReference. Both were using `LogErrorFromResources`. Both have been changed to use `LogErrorWithCodeFromResources`.\r\n\r\nA minor spelling error was corrected in a comment in the `PathUtil.Resolve(string)` method. This method is used by the `FormatUrl` class.\r\n\r\n### Testing\r\n#### FormatUrl Task\r\nInitially before making any changes, tested manually with a test project file.\r\n\r\nWith the changes, built the code and ran the unit tests on .Net 6.0.\r\n\r\nAlso repeated the manual test.\r\n\r\n'FormatUrlTest.proj' test project file:\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Test\">\r\n        <FormatUrl InputUrl=\"https://localhost/test\">\r\n            <Output TaskParameter=\"OutputUrl\" PropertyName=\"out\" />\r\n        </FormatUrl>\r\n        <Message Text=\"out = $(out)\" Importance=\"high\" />\r\n        <FormatUrl InputUrl=\"formarlurltest.proj\">\r\n            <Output TaskParameter=\"OutputUrl\" PropertyName=\"out\" />\r\n        </FormatUrl>\r\n        <Message Text=\"out = $(out)\" Importance=\"high\" />\r\n        <FormatUrl InputUrl=\"https://www.microsoft.com/foo/../bar\">\r\n            <Output TaskParameter=\"OutputUrl\" PropertyName=\"out\" />\r\n        </FormatUrl>\r\n        <Message Text=\"out = $(out)\" Importance=\"high\" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nExecuted with the command:\r\n```\r\ndotnet ./artifacts/bin/bootstrap/net6.0/MSBuild/MSBuild.dll FormatUrlTest.proj /t:Test\r\n```\r\n\r\n#### LC and ResolveComReference Tasks\r\nManually tested with test project files before and after changing the LogError* method.\r\n\r\nLcTest.proj\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Test\">\r\n        <LC Sources=\"\" LicenseTarget=\"foo\" TargetFrameworkVersion=\"net5.0-windows\" />\r\n    </Target>\r\n</Project>\r\n```\r\n```\r\ndotnet ./artifacts/bin/bootstrap/net6.0/MSBuild/MSBuild.dll LcTest.proj /t:Test\r\n```\r\n\r\nResolveComReferenceTest.proj\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Test\">\r\n        <ResolveComReference />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\n```\r\ndotnet ./artifacts/bin/bootstrap/net6.0/MSBuild/MSBuild.dll ResolveComReferenceTest.proj /t:Test\r\n```\r\n\r\n(There are unit test classes for the LC and ResolveComReference tasks but the classes are explicitly excluded from compilation within the Microsoft.Build.Tasks.UnitTests.csproj project file.)",
  "state": "MERGED",
  "createdAt": "2022-02-20T00:11:34Z",
  "updatedAt": "2022-03-18T23:41:15Z",
  "closedAt": "2022-03-18T17:58:38Z",
  "mergedAt": "2022-03-18T17:58:37Z",
  "additions": 215,
  "deletions": 11,
  "changedFiles": 5,
  "headRefName": "FormatUrl",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d4d4c695dff87281cb38cec656aa53c69eb06380",
          "message": "enable FormatUrl for .NET Core and add unit test",
          "committedDate": "2022-02-19T23:11:27Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb33952b1328c052a6facceb8d33be14910f77d8",
          "message": "TaskRequiresFrameworkFailure - replace Log method",
          "committedDate": "2022-02-19T23:13:01Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "553feedfd70805d740dad711d0a363182baab42e",
          "message": "fix minor spelling error",
          "committedDate": "2022-02-19T23:13:48Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83874de79e8acc54c4b5e412068ead0020c6c288",
          "message": "Modify whitespace test to be *nix specific",
          "committedDate": "2022-02-20T20:14:41Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a1a4f03129a63fdb7a733fb6202ad0080a6a66b",
          "message": "Add whitespace test for Windows",
          "committedDate": "2022-02-21T00:56:03Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "44991de258a08bc04dbe60ecc30bd34509e02574",
          "message": "Change to use Shouldly and hard-coded test values",
          "committedDate": "2022-02-22T23:46:56Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a94f3e865acfe9089e2d28d25f8878bdba27a06",
          "message": "UrlLocalHostTest - remove use of UriBuilder",
          "committedDate": "2022-02-23T00:25:29Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "936a15908abc1dd7624bf15086323b6a96d82d86",
          "message": "Merge branch 'dotnet:main' into FormatUrl",
          "committedDate": "2022-02-25T23:12:05Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "78b753bfe9048d5026090a0ea87ec66b6e21ed20",
          "message": "added tests for absolute vs relative paths",
          "committedDate": "2022-02-26T00:16:15Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e95773c96c1fe9191858a4c1c9dd532cb35685b",
          "message": "Merge branch 'dotnet:main' into FormatUrl",
          "committedDate": "2022-02-26T22:40:26Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7fa86d97776adc0de18f0cd701c330dff833bdd5",
          "message": "add test for no provided InputUrl parameter",
          "committedDate": "2022-02-27T00:20:01Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "233e3994ab430bf028ddb99caafa069fa328f3e6",
          "message": "Merge branch 'dotnet:main' into FormatUrl",
          "committedDate": "2022-03-13T17:15:20Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b3994399278dd5cdb64f2c2bef2fdd4bdb461f5",
          "message": "Fix build error after merge from origin",
          "committedDate": "2022-03-13T17:37:19Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24e207ce14aa7d01a2033984a0cb2e85017a0f4c",
          "message": "Merge branch 'dotnet:main' into FormatUrl",
          "committedDate": "2022-03-15T18:53:13Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "One of the unit tests is behaving differently on Windows compared to macOS. I'll make a fix.\r\n\r\nOn macOS and Linux `Path.GetFullPath(\" \")` is not throwing an `ArgumentException`. Is [dotnet/runtime](https://github.com/dotnet/runtime) or [dotnet/sdk](https://github.com/dotnet/sdk) the proper place to file an issue for `Path.GetFullPath`?",
        "createdAt": "2022-02-20T15:41:32Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> One of the unit tests is behaving differently on Windows compared to macOS. I'll make a fix.\r\n> \r\n> On macOS and Linux `Path.GetFullPath(\" \")` is not throwing an `ArgumentException`. Is [dotnet/runtime](https://github.com/dotnet/runtime) or [dotnet/sdk](https://github.com/dotnet/sdk) the proper place to file an issue for `Path.GetFullPath`?\r\n\r\nfile it in runtime.",
        "createdAt": "2022-02-21T22:37:58Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> > One of the unit tests is behaving differently on Windows compared to macOS. I'll make a fix.\r\n> > On macOS and Linux `Path.GetFullPath(\" \")` is not throwing an `ArgumentException`. Is [dotnet/runtime](https://github.com/dotnet/runtime) or [dotnet/sdk](https://github.com/dotnet/sdk) the proper place to file an issue for `Path.GetFullPath`?\r\n> \r\n> file it in runtime.\r\n\r\nFiled dotnet/runtime#65683 for the Path.GetFullPath issue.",
        "createdAt": "2022-02-22T00:32:30Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is new code, can you omit this? Though for tests I'm not going to be very picky if it's hard here.",
              "createdAt": "2022-02-22T15:17:07Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Removed unused `using` statements.\r\nAdded `using Shouldly;`.\r\nRemoved `#nullable disable`.\r\n",
              "createdAt": "2022-02-22T23:55:35Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We've shifted to preferring Shouldly in tests that are new or recently touched because it helps simplify this sort of thing by having clearer assert messages. Would you mind adopting this pattern?\r\n\r\n```suggestion\r\n            t.InputUrl = null;\r\n\r\n            t.Execute().ShouldBeTrue();\r\n\r\n            t.OutputUrl.ShouldBe(string.Empty);\r\n```",
              "createdAt": "2022-02-22T15:23:21Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Changed from Xunit asserts to Shouldly asserts.",
              "createdAt": "2022-02-22T23:57:01Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is an interesting case. Should we support it on UNIX, or should it throw since you can't resolve a UNC path? I guess we aren't necessarily _using_ the resolved URL and may want to _embed_ a UNC URL even when building on UNIX, so I guess leave it as is?",
              "createdAt": "2022-02-22T15:25:27Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Regardless of the OS, the FormatUrl task will format a UNC.",
              "createdAt": "2022-02-22T23:59:16Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't like this kind of assert, because it's very close to the implementation, so it's not clear it's really testing anything. Is it feasible to hardcode a result here?",
              "createdAt": "2022-02-22T15:26:58Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I could replace the `LocalPathTest()` method with two test methods: one using a hard-coded Windows-style local file path and one using a *nix-style local file path. (For now I have changed to Shouldly but kept the dynamic values.)",
              "createdAt": "2022-02-23T00:04:29Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "On macOS, `FormatUrl`, when given 'c:\\folder\\filename.ext', will not produce 'file:///c:/folder/filename.ext'. I suspect a similar issue on Windows when `FormatUrl` is given a unix style path. (I will test and confirm.)",
              "createdAt": "2022-02-26T00:14:12Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Likewise could this be something like\r\n\r\n```suggestion\r\n            t.InputUrl = \"https://localhost/Example/Path\";\r\n```\r\n?",
              "createdAt": "2022-02-22T15:28:00Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a URL using localhost.\n+        /// </summary>\n+        [Fact]\n+        public void UrlLocalHostTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var uriBuilder = new UriBuilder(Uri.UriSchemeHttps, \"localhost\") { Path = \"Example/Path\" };\n+\n+            t.InputUrl = uriBuilder.ToString();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "(And so on for the other tests)",
              "createdAt": "2022-02-22T15:29:42Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a URL using localhost.\n+        /// </summary>\n+        [Fact]\n+        public void UrlLocalHostTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var uriBuilder = new UriBuilder(Uri.UriSchemeHttps, \"localhost\") { Path = \"Example/Path\" };\n+\n+            t.InputUrl = uriBuilder.ToString();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "removed use of UriBuilder in the UrlLocalHostTest",
              "createdAt": "2022-02-23T00:26:32Z",
              "path": "src/Tasks.UnitTests/FormatUrl_Tests.cs",
              "diffHunk": "@@ -0,0 +1,217 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+using Microsoft.Build.Tasks;\n+using Microsoft.Build.Utilities;\n+using Xunit;\n+using Xunit.Abstractions;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.UnitTests\n+{\n+    sealed public class FormatUrl_Tests\n+    {\n+        private readonly ITestOutputHelper _out;\n+\n+        public FormatUrl_Tests(ITestOutputHelper testOutputHelper)\n+        {\n+            _out = testOutputHelper;\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is null.\n+        /// </summary>\n+        [Fact]\n+        public void NullTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = null;\n+            var expected = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is empty.\n+        /// </summary>\n+        [Fact]\n+        public void EmptyTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var expected = t.InputUrl = string.Empty;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.AnyUnix)]\n+        public void WhitespaceTestOnUnix()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // From the documentation, Path.GetFullPath(\" \") should throw an ArgumentException but it doesn't on macOS and Linux.\n+            // If the behavior of Path.GetFullPath(string) changes, this unit test will need to be updated.\n+            var expected = new Uri(Path.GetFullPath(t.InputUrl)).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is white space.\n+        /// </summary>\n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void WhitespaceTestOnWindows()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = \" \";\n+            // Path.GetFullPath(\" \") should throw an ArgumentException.\n+            Assert.Throws<ArgumentException>(() => t.Execute());\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a UNC.\n+        /// </summary>\n+        [Fact]\n+        public void UncPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = @\"\\\\server\\filename.ext\";\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a local file path.\n+        /// </summary>\n+        [Fact]\n+        public void LocalPathTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            t.InputUrl = Environment.CurrentDirectory;\n+            var expected = new Uri(t.InputUrl).AbsoluteUri;\n+\n+            Assert.True(t.Execute()); // \"success\"\n+#if DEBUG\n+            _out.WriteLine(\"InputUrl \" + ((null == t.InputUrl) ? \"is null.\" : $\"= '{t.InputUrl}'.\"));\n+            _out.WriteLine(\"expected \" + ((null == expected) ? \"is null.\" : $\"= '{expected}'.\"));\n+            _out.WriteLine(\"OutputUrl \" + ((null == t.OutputUrl) ? \"is null.\" : $\"= '{t.OutputUrl}'.\"));\n+#endif\n+            Assert.Equal(expected, t.OutputUrl);\n+        }\n+\n+        /// <summary>\n+        /// The URL to format is a URL using localhost.\n+        /// </summary>\n+        [Fact]\n+        public void UrlLocalHostTest()\n+        {\n+            var t = new FormatUrl();\n+            t.BuildEngine = new MockEngine(_out);\n+\n+            var uriBuilder = new UriBuilder(Uri.UriSchemeHttps, \"localhost\") { Path = \"Example/Path\" };\n+\n+            t.InputUrl = uriBuilder.ToString();",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}