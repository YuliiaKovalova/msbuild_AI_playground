{
  "number": 11543,
  "title": "Resolve net task host params from the project properties",
  "body": "based on: https://github.com/dotnet/msbuild/pull/11393\r\n\r\nfixes: https://github.com/dotnet/msbuild/issues/11343\r\n\r\nexperimental VS instance https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/616996\r\nThis PR contains logic that helps to resolve NetTaskHost execution params based on the project properties.\r\n`DOTNET_EXPERIMENTAL_HOST_PATH` => resolves path to dotnet.exe\r\n`RuntimeIdentifierGraphPath` => gives the path to the sdk version resolved for the given project.\r\n\r\nThe values are passed to `NodeProviderOutOfProcTaskHost` by using taskHostParameters. \r\nThe exception is generated on attempt to use this functionality for sdk9 and lower.\r\n\r\n### For further flexibility the packet versioning support was added in NodePacketType.\r\n### MSBuild Packet Schema with Version Information\r\n\r\n## Packet Structure Overview\r\n\r\nMSBuild's packet communication protocol supports versioning through an extended header mechanism. This document outlines the binary structure of packets with and without version information.\r\n\r\n## Basic Packet Format\r\n\r\n| Position | Size (bytes) | Description |\r\n|----------|--------------|-------------|\r\n| 0        | 1            | Packet Type Byte |\r\n| 1-4      | 4            | Packet Length (32-bit integer) |\r\n| 5+       | Variable     | Packet Body |\r\n\r\n## Packet Type Byte (Position 0) Bit Layout\r\n\r\n| Bits     | Purpose |\r\n|----------|---------|\r\n| 0-5      | Base packet type (values 0-63) |\r\n| 6 (0x40) | Extended header flag - When set, indicates version information follows |\r\n| 7 (0x80) | Reserved for future use or special packet types |\r\n\r\n**Important Note**: Special server command packets (0xF0-0xFF) ignore the extended header flag regardless of its value.\r\n\r\n## Packet Formats\r\n\r\n### Standard Packet (No Version Information)\r\n\r\n| Position | Size (bytes) | Description |\r\n|----------|--------------|-------------|\r\n| 0        | 1            | Packet Type (bit 6 not set) |\r\n| 1-4      | 4            | Packet Length |\r\n| 5+       | Variable     | Packet Body (in original format) |\r\n\r\n### Versioned Packet (With Version Information)\r\n\r\n| Position | Size (bytes) | Description |\r\n|----------|--------------|-------------|\r\n| 0        | 1            | Packet Type with bit 6 set |\r\n| 1-4      | 4            | Packet Length (includes version byte) |\r\n| 5        | 1            | Version Byte |\r\n| 6+       | Variable     | Packet Body (format depends on version) |\r\n\r\n## Version Byte Values\r\n\r\n| Value | Description |\r\n|-------|-------------|\r\n| 1     | Original packet format (baseline) |\r\n| 2     | Second generation format with extended fields |\r\n| 3+    | Future format extensions |\r\n\r\n\r\n![{AC560B48-040C-46AC-8A1A-AF237D127AFB}](https://github.com/user-attachments/assets/0f787748-4dc9-4b08-a7d6-6d092f7a5bb5)\r\n\r\n\r\n## Implementation Notes\r\n\r\n- Older clients will ignore bit 6 in the packet type byte\r\n- Newer clients will check bit 6 to determine if version information follows\r\n- The packet length field ensures all clients can properly navigate the packet data\r\n- Version 1 is considered the baseline format compatible with older clients\r\n\r\n## Migration Strategy\r\n\r\nWhen adding new fields to existing packet types:\r\n\r\n1. Create a new version of the packet format\r\n2. Set the extended header flag when writing packets\r\n3. Include version byte with the new version number\r\n4. Ensure packet readers check for version information\r\n5. Maintain backward compatibility with version 1 format\r\n",
  "state": "OPEN",
  "createdAt": "2025-03-05T14:57:13Z",
  "updatedAt": "2025-05-30T14:21:39Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 459,
  "deletions": 210,
  "changedFiles": 29,
  "headRefName": "dev/ykovalova/use_project_props_for_sdk_resolution",
  "isDraft": true,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cd3ef65ce3cd5f0b74e1c6a6be20b1cf8555ba84",
          "message": "Bump to 9.0.100-rc.2.24474.11",
          "committedDate": "2024-10-09T17:56:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1ebe41ce6ed3041c7492db1ce28f2f62cc30d2b",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2024-10-15T13:34:02Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f840c14b54b6f9acb9fa2d5d2fe94728f811dad0",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2024-10-23T13:02:48Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3eff6e8c2536b8b9f8ba440d09334e540f1605d",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2024-10-29T10:41:56Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5791ace836d751ed07de3a4d7ce1f93ecbfe1adf",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2024-12-16T13:44:11Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a24f4c24b791b6581e4498f1d4b954106a423a7",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2025-01-07T10:32:11Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f0a46e45c88c3e56e303e5b410be525c9f943bcc",
          "message": "draft for dotnet host support",
          "committedDate": "2025-02-04T17:54:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "90a63c13e955c9b176cda49ec54f401085959f6c",
          "message": "cleanup",
          "committedDate": "2025-02-04T18:07:02Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e0db3b1e777e53cda8b1af9f8786d464be26fa63",
          "message": "more changes",
          "committedDate": "2025-02-04T18:37:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b892e990d25d19ef80ac42b3af5f11b02478bec",
          "message": "handle issue with net task host communication",
          "committedDate": "2025-02-05T13:56:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6f8bf9980d152e44b61b6d2098acecbfc875ba2",
          "message": "add new runtime value to xsd",
          "committedDate": "2025-02-05T14:05:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1781fbb3cefa83a918e4d820116e3a336355bc1",
          "message": "add comment",
          "committedDate": "2025-02-05T15:46:01Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65691df33618c42e2ca0125f1dc6d47ea4b72f9e",
          "message": "adjust net task host implementation",
          "committedDate": "2025-02-17T08:58:46Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "be15f3f6a62bcaad8f41169a80129623c148d896",
          "message": "Merge branch 'dotnet:main' into dev/ykovalova/support_launching_net_taskhost",
          "committedDate": "2025-02-17T08:59:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "35f93e1cb668a9e310f8b4e60c9f8d304f711ade",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2025-03-03T10:20:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "050941163c40fce1eb743fda39dcb424bd49fb0e",
          "message": "Merge branch 'main' into dev/ykovalova/support_launching_net_taskhost",
          "committedDate": "2025-03-03T11:34:33Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bae84bd7f4bec13bfaefe1317f5bb88748cf01b0",
          "message": "temp",
          "committedDate": "2025-03-04T17:47:50Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33fcee027dfcbbc45d8830155497c410f129a8c7",
          "message": "resolve net task host params from the project properties",
          "committedDate": "2025-03-05T14:56:34Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01baf54d004474af167be04cc10f4dddf3311d68",
          "message": "Update BootstrapSdkVersion in Versions.props",
          "committedDate": "2025-03-05T15:41:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6890eaa46e4325fa2f4450095d3a43bcf39567a",
          "message": "add null ref check",
          "committedDate": "2025-03-05T20:22:20Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c215043c141845d54ab1ec85cf4f297ac7b8cf8",
          "message": "add version validation",
          "committedDate": "2025-03-06T12:49:10Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "20f93027ef4801c40b10e6d0440fd2e448a0abae",
          "message": "add packet versioning support",
          "committedDate": "2025-03-06T14:31:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d34adec193df604ad11ed5810c164fd5196d0b10",
          "message": "Merge branch 'main' into dev/ykovalova/use_project_props_for_sdk_resolution",
          "committedDate": "2025-03-06T15:02:14Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1d72fab826e6417fa71425bace511ea301b165f",
          "message": "cleanup TaskHostConfiguration",
          "committedDate": "2025-03-06T15:29:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76f7d1f23d6ad4b3384fcf44e1429ee50d0792bb",
          "message": "Merge branch 'dev/ykovalova/support_launching_net_taskhost' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/support_launching_net_taskhost",
          "committedDate": "2025-03-06T15:29:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2d6844843f79c65980c37f219a4ac840596ba824",
          "message": "extend version tracking infra",
          "committedDate": "2025-03-06T16:44:34Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0764a61522e84ba31776fe1e3ffdfdfc99435d91",
          "message": "Merge branch 'dev/ykovalova/use_project_props_for_sdk_resolution' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/use_project_props_for_sdk_resolution",
          "committedDate": "2025-03-06T16:44:39Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "80c7a24e9a4375791fbe1dffb4bf8febd24d7f63",
          "message": "adjust msbuildserver to the packet version extended flag presence",
          "committedDate": "2025-03-07T08:53:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98324e95e11464a0d2ea6cf7bf16363122c8d58d",
          "message": "loosen the version check on handshake for taskhost",
          "committedDate": "2025-03-07T11:57:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9669a5dc359a393ded555ca9558d6977ca67d3b",
          "message": "loosen the version check for net task host",
          "committedDate": "2025-03-07T12:01:47Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2434531d6e65731bdb7a1e12e96d1a9194f77b76",
          "message": "Merge branch 'main' into dev/ykovalova/support_launching_net_taskhost",
          "committedDate": "2025-04-03T09:16:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c742aa1feb2ce051f3a462ca85e105f442031eb1",
          "message": "fix typo in naming",
          "committedDate": "2025-04-03T09:23:44Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6635cbe5b8c501843ee25ac0bd3b142e6931e8a",
          "message": "Merge branch 'dev/ykovalova/support_launching_net_taskhost' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/support_launching_net_taskhost",
          "committedDate": "2025-04-03T09:24:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e176948f1b80134cb7098e8ed8d0365b3f67f9b",
          "message": "fix conflicts",
          "committedDate": "2025-04-03T10:32:48Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0061addc9a515800bf8dd6bd4a066610a97567df",
          "message": "merge",
          "committedDate": "2025-04-07T10:23:53Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13a68ba7a8a47c231dcd346e1d4ebbe1d58074bf",
          "message": "fix merge",
          "committedDate": "2025-04-07T10:52:17Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97c5286230ad60b0888e6a5d58b08eb44e00d23e",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2025-05-22T10:00:38Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37cdaaf8d3f36a2a00d88d923d96545663a2d893",
          "message": "fix review comments",
          "committedDate": "2025-05-27T13:39:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86dacaa37092c7a12d6f23fac9175db972cfd110",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2025-05-27T13:39:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a159d426449de65147d19792cd7672d8095a19f",
          "message": "merge conflicts",
          "committedDate": "2025-05-27T13:46:53Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ec992169c38ef916857eecc3ee015188c140ebeb",
          "message": "fix merge leftovers",
          "committedDate": "2025-05-27T14:04:14Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86e6d43cb141922ca00a784b6f8837179cc13def",
          "message": "update version validation",
          "committedDate": "2025-05-28T08:43:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac6dab8f3a60a23526dc15b938d41d184673bcd7",
          "message": "cleanup",
          "committedDate": "2025-05-28T08:57:08Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "851ebba7706feecc235e052fbc227ee09d7be190",
          "message": "cleanup",
          "committedDate": "2025-05-28T09:05:05Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06e57929ee5f1ed276e3c6d2f2757930e54312bd",
          "message": "update condition",
          "committedDate": "2025-05-28T09:09:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17589bbbe0bc149e15209dcd8a2ae886af49ca06",
          "message": "merge with main",
          "committedDate": "2025-05-29T15:14:37Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "32476d491bec814d7dd6ab1da6422b1c66ba9b08",
          "message": "merge",
          "committedDate": "2025-05-30T14:18:02Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: we should be able to find a better property - using the RID graph as a side effect may be prone to breakage or re-arrangement in the SDK.",
              "createdAt": "2025-03-05T15:19:15Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -521,28 +524,35 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b\n         /// <summary>\n         /// Returns the set of parameters that can contribute to a task's identity, and their values for this particular task.\n         /// </summary>\n-        private IDictionary<string, string> GatherTaskIdentityParameters(Expander<ProjectPropertyInstance, ProjectItemInstance> expander)\n+        private IDictionary<string, string> GatherTaskIdentityParameters(Expander<ProjectPropertyInstance, ProjectItemInstance> expander, Lookup lookup)\n         {\n             ErrorUtilities.VerifyThrowInternalNull(_taskNode, \"taskNode\"); // taskNode should never be null when we're calling this method.\n \n             string msbuildArchitecture = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildArchitecture ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildArchitectureLocation ?? ElementLocation.EmptyLocation);\n             string msbuildRuntime = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildRuntime ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildRuntimeLocation ?? ElementLocation.EmptyLocation);\n \n-            IDictionary<string, string> taskIdentityParameters = null;\n+            IDictionary<string, string> taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n \n             // only bother to create a task identity parameter set if we're putting anything in there -- otherwise,\n             // a null set will be treated as equivalent to all parameters being \"don't care\".\n             if (msbuildRuntime != String.Empty || msbuildArchitecture != String.Empty)\n             {\n-                taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n-\n                 msbuildArchitecture = msbuildArchitecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : msbuildArchitecture.Trim();\n                 msbuildRuntime = msbuildRuntime == String.Empty ? XMakeAttributes.MSBuildRuntimeValues.any : msbuildRuntime.Trim();\n \n                 taskIdentityParameters.Add(XMakeAttributes.runtime, msbuildRuntime);\n                 taskIdentityParameters.Add(XMakeAttributes.architecture, msbuildArchitecture);\n             }\n \n+            string hostPath = lookup.GetProperty(\"DOTNET_EXPERIMENTAL_HOST_PATH\")?.EvaluatedValue;\n+            string msBuildAssemblyPath = Path.GetDirectoryName(lookup.GetProperty(\"RuntimeIdentifierGraphPath\")?.EvaluatedValue) ?? string.Empty;",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "it's a workaround. we plan to add a separate property later ",
              "createdAt": "2025-03-05T15:40:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs",
              "diffHunk": "@@ -521,28 +524,35 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b\n         /// <summary>\n         /// Returns the set of parameters that can contribute to a task's identity, and their values for this particular task.\n         /// </summary>\n-        private IDictionary<string, string> GatherTaskIdentityParameters(Expander<ProjectPropertyInstance, ProjectItemInstance> expander)\n+        private IDictionary<string, string> GatherTaskIdentityParameters(Expander<ProjectPropertyInstance, ProjectItemInstance> expander, Lookup lookup)\n         {\n             ErrorUtilities.VerifyThrowInternalNull(_taskNode, \"taskNode\"); // taskNode should never be null when we're calling this method.\n \n             string msbuildArchitecture = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildArchitecture ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildArchitectureLocation ?? ElementLocation.EmptyLocation);\n             string msbuildRuntime = expander.ExpandIntoStringAndUnescape(_taskNode.MSBuildRuntime ?? String.Empty, ExpanderOptions.ExpandAll, _taskNode.MSBuildRuntimeLocation ?? ElementLocation.EmptyLocation);\n \n-            IDictionary<string, string> taskIdentityParameters = null;\n+            IDictionary<string, string> taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n+\n \n             // only bother to create a task identity parameter set if we're putting anything in there -- otherwise,\n             // a null set will be treated as equivalent to all parameters being \"don't care\".\n             if (msbuildRuntime != String.Empty || msbuildArchitecture != String.Empty)\n             {\n-                taskIdentityParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n-\n                 msbuildArchitecture = msbuildArchitecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : msbuildArchitecture.Trim();\n                 msbuildRuntime = msbuildRuntime == String.Empty ? XMakeAttributes.MSBuildRuntimeValues.any : msbuildRuntime.Trim();\n \n                 taskIdentityParameters.Add(XMakeAttributes.runtime, msbuildRuntime);\n                 taskIdentityParameters.Add(XMakeAttributes.architecture, msbuildArchitecture);\n             }\n \n+            string hostPath = lookup.GetProperty(\"DOTNET_EXPERIMENTAL_HOST_PATH\")?.EvaluatedValue;\n+            string msBuildAssemblyPath = Path.GetDirectoryName(lookup.GetProperty(\"RuntimeIdentifierGraphPath\")?.EvaluatedValue) ?? string.Empty;",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private readonly string _runtime;\r\n```",
              "createdAt": "2025-03-28T16:01:11Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -43,6 +42,11 @@ internal class TaskHostConfiguration : INodePacket\n         /// </summary>\n         private CultureInfo _uiCulture = CultureInfo.CurrentUICulture;\n \n+        /// <summary>\n+        /// Task host runtime.\n+        /// </summary>\n+        private string _runtime;",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a list of all the runtime names and their meaning?",
              "createdAt": "2025-03-28T16:01:45Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,20 +425,27 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            byte[] appDomainConfigBytes = null;\n \n-            // Set the configuration bytes just before serialization in case the SetConfigurationBytes was invoked during lifetime of this instance.\n-            if (translator.Mode == TranslationDirection.WriteToStream)\n+            // Skip AppDomain configuration when targeting .NET Task Host (Runtime=\"Net\").",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "not sure, @rainersigwald might know more.",
              "createdAt": "2025-05-27T13:15:13Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,20 +425,27 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            byte[] appDomainConfigBytes = null;\n \n-            // Set the configuration bytes just before serialization in case the SetConfigurationBytes was invoked during lifetime of this instance.\n-            if (translator.Mode == TranslationDirection.WriteToStream)\n+            // Skip AppDomain configuration when targeting .NET Task Host (Runtime=\"Net\").",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private readonly ImmutableArray<string> _versionHandshakeGroup = [\"fileVersionMajor\", \"fileVersionMinor\", \"fileVersionBuild\", \"fileVersionPrivate\"];\r\n```\r\n\r\nGiven this collection doesn't change consider a non-mutating type to make future mutations an explicit decision. \r\n\r\n",
              "createdAt": "2025-03-28T16:03:48Z",
              "path": "src/Shared/NodeEndpointOutOfProcBase.cs",
              "diffHunk": "@@ -115,6 +116,8 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint\n         /// </summary>\n         private BinaryWriter _binaryWriter;\n \n+        private readonly IList<string> _versionHandshakeGroup = [\"fileVersionMajor\", \"fileVersionMinor\", \"fileVersionBuild\", \"fileVersionPrivate\"];",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is the runtime host name treated as ordinal ignore case but the version handshake groups are ordinal? ",
              "createdAt": "2025-03-28T16:05:06Z",
              "path": "src/Shared/NodeEndpointOutOfProcBase.cs",
              "diffHunk": "@@ -405,12 +408,21 @@ private void PacketPumpProc()\n                             );\n #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter\n \n-                            if (handshakePart != handshakeComponents[i])\n+                            if (handshakePart != handshakeComponents[i].Value)\n                             {\n-                                CommunicationsUtilities.Trace(\"Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.\", handshakePart, handshakeComponents[i]);\n-                                _pipeServer.WriteIntForHandshake(i + 1);\n-                                gotValidConnection = false;\n-                                break;\n+                                // NET Task host allows to connect to MSBuild.dll with the different handshake version.\n+                                // We agreed to hardcode a value of 99 to bypass the protection for this scenario.\n+                                if (_versionHandshakeGroup.Contains(handshakeComponents[i].Key) && handshakeComponents[i].Value == Handshake.NetTaskHostHandshakeVersion)",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "I set these group entries as nameof of Handshake fields. ",
              "createdAt": "2025-05-27T13:30:46Z",
              "path": "src/Shared/NodeEndpointOutOfProcBase.cs",
              "diffHunk": "@@ -405,12 +408,21 @@ private void PacketPumpProc()\n                             );\n #pragma warning restore SA1111, SA1009 // Closing parenthesis should be on line of last parameter\n \n-                            if (handshakePart != handshakeComponents[i])\n+                            if (handshakePart != handshakeComponents[i].Value)\n                             {\n-                                CommunicationsUtilities.Trace(\"Handshake failed. Received {0} from host not {1}. Probably the host is a different MSBuild build.\", handshakePart, handshakeComponents[i]);\n-                                _pipeServer.WriteIntForHandshake(i + 1);\n-                                gotValidConnection = false;\n-                                break;\n+                                // NET Task host allows to connect to MSBuild.dll with the different handshake version.\n+                                // We agreed to hardcode a value of 99 to bypass the protection for this scenario.\n+                                if (_versionHandshakeGroup.Contains(handshakeComponents[i].Key) && handshakeComponents[i].Value == Handshake.NetTaskHostHandshakeVersion)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "TIL: that `ReadByte` returns `int` not `byte`. ",
              "createdAt": "2025-03-28T16:06:01Z",
              "path": "src/Shared/INodePacket.cs",
              "diffHunk": "@@ -240,6 +250,34 @@ NodePacketType Type\n         {\n             get;\n         }\n+\n         #endregion\n     }\n+\n+    internal static class PacketTypeExtensions\n+    {\n+        public const byte PacketVersion = 1;\n+\n+        private const byte ExtendedHeaderFlag = 0x40; // Bit 6 indicates extended header with version\n+\n+        /// <summary>\n+        /// Determines if a packet has an extended header by checking if the extended header flag is set.\n+        /// are never interpreted as having extended headers, even if they happen to have the flag bit set.\n+        /// </summary>\n+        /// <param name=\"rawType\">The raw packet type byte.</param>\n+        /// <returns>True if the packet has an extended header, false otherwise</returns>\n+        public static bool HasExtendedHeader(byte rawType) => (rawType & ExtendedHeaderFlag) != 0;\n+\n+        // Get base type, stripping the extended header flag\n+        public static NodePacketType GetNodePacketType(byte rawType) => (NodePacketType)(rawType & ~ExtendedHeaderFlag);\n+\n+        // Create a type with extended header flag\n+        public static byte CreateExtendedHeaderType(NodePacketType type) => (byte)((byte)type | ExtendedHeaderFlag);\n+\n+        // Read extended header (returns version)\n+        public static byte ReadVersion(Stream stream) => (byte)stream.ReadByte();",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public const int NetTaskHostHandshakeVersion = 99;\r\n```\r\n\r\nOr possible `static readonly` ",
              "createdAt": "2025-03-28T16:07:31Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -39,48 +39,50 @@ internal enum HandshakeOptions\n         None = 0,\n \n         /// <summary>\n-        /// Process is a TaskHost\n+        /// Process is a TaskHost.\n         /// </summary>\n         TaskHost = 1,\n \n         /// <summary>\n-        /// Using the 2.0 CLR\n+        /// Using the 2.0 CLR.\n         /// </summary>\n         CLR2 = 2,\n \n         /// <summary>\n-        /// 64-bit Intel process\n+        /// 64-bit Intel process.\n         /// </summary>\n         X64 = 4,\n \n         /// <summary>\n-        /// Node reuse enabled\n+        /// Node reuse enabled.\n         /// </summary>\n         NodeReuse = 8,\n \n         /// <summary>\n-        /// Building with BelowNormal priority\n+        /// Building with BelowNormal priority.\n         /// </summary>\n         LowPriority = 16,\n \n         /// <summary>\n-        /// Building with administrator privileges\n+        /// Building with administrator privileges.\n         /// </summary>\n         Administrator = 32,\n \n         /// <summary>\n-        /// Using the .NET Core/.NET 5.0+ runtime\n+        /// Using the .NET Core/.NET 5.0+ runtime.\n         /// </summary>\n         NET = 64,\n \n         /// <summary>\n-        /// ARM64 process\n+        /// ARM64 process.\n         /// </summary>\n         Arm64 = 128,\n     }\n \n     internal class Handshake\n     {\n+        public static int NetTaskHostHandshakeVersion = 99;",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The comment says DOTNET_EXPERIMENTAL_HOST_PATH but the code is using MSBUILD_EXE_NAME. Not quite following that bit. ",
              "createdAt": "2025-03-28T16:09:46Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -374,51 +374,51 @@ internal static void ClearCachedTaskHostPaths()\n         /// </summary>\n         internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);\n-            if ((hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)\n+            ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));\n+\n+            if (IsHandshakeOptionEnabled(HandshakeOptions.CLR2))\n             {\n                 return TaskHostNameForClr2TaskHost;\n             }\n             else\n             {\n                 if (s_msbuildName == null)\n                 {\n-                    s_msbuildName = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\");\n-\n-                    if (s_msbuildName == null)\n-                    {\n-                        s_msbuildName = (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET\n-                            ? \"MSBuild.dll\"\n-                            : \"MSBuild.exe\";\n-                    }\n+                    // for NET the executable is resolved from DOTNET_EXPERIMENTAL_HOST_PATH\n+                    s_msbuildName = IsHandshakeOptionEnabled(HandshakeOptions.NET)\n+                        ? string.Empty\n+                        : Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\") ?? Constants.MSBuildExecutableName;",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "DOTNET_EXPERIMENTAL_HOST_PATH is set as a project property that we will read later in [TaskBuilder.cs](https://github.com/dotnet/msbuild/pull/11543/files/98324e95e11464a0d2ea6cf7bf16363122c8d58d#diff-670154276685f1ec88f8e9537063d667c06005cace1ce2aa75e5bb61cc091ed6)\r\n\r\npreviously for HandshakeOptions.NET it was hardcoded here as 'MSBuild.dll' ",
              "createdAt": "2025-03-31T10:21:27Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -374,51 +374,51 @@ internal static void ClearCachedTaskHostPaths()\n         /// </summary>\n         internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);\n-            if ((hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)\n+            ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));\n+\n+            if (IsHandshakeOptionEnabled(HandshakeOptions.CLR2))\n             {\n                 return TaskHostNameForClr2TaskHost;\n             }\n             else\n             {\n                 if (s_msbuildName == null)\n                 {\n-                    s_msbuildName = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\");\n-\n-                    if (s_msbuildName == null)\n-                    {\n-                        s_msbuildName = (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET\n-                            ? \"MSBuild.dll\"\n-                            : \"MSBuild.exe\";\n-                    }\n+                    // for NET the executable is resolved from DOTNET_EXPERIMENTAL_HOST_PATH\n+                    s_msbuildName = IsHandshakeOptionEnabled(HandshakeOptions.NET)\n+                        ? string.Empty\n+                        : Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\") ?? Constants.MSBuildExecutableName;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "I'm still missing though what DOTNET_EXPERIMENTAL_HOST_PATH has to do with this line of code. ",
              "createdAt": "2025-03-31T16:54:27Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -374,51 +374,51 @@ internal static void ClearCachedTaskHostPaths()\n         /// </summary>\n         internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);\n-            if ((hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)\n+            ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));\n+\n+            if (IsHandshakeOptionEnabled(HandshakeOptions.CLR2))\n             {\n                 return TaskHostNameForClr2TaskHost;\n             }\n             else\n             {\n                 if (s_msbuildName == null)\n                 {\n-                    s_msbuildName = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\");\n-\n-                    if (s_msbuildName == null)\n-                    {\n-                        s_msbuildName = (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET\n-                            ? \"MSBuild.dll\"\n-                            : \"MSBuild.exe\";\n-                    }\n+                    // for NET the executable is resolved from DOTNET_EXPERIMENTAL_HOST_PATH\n+                    s_msbuildName = IsHandshakeOptionEnabled(HandshakeOptions.NET)\n+                        ? string.Empty\n+                        : Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\") ?? Constants.MSBuildExecutableName;",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "I see your concern, I will update the comment for it.",
              "createdAt": "2025-04-03T09:21:52Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -374,51 +374,51 @@ internal static void ClearCachedTaskHostPaths()\n         /// </summary>\n         internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);\n-            if ((hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)\n+            ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));\n+\n+            if (IsHandshakeOptionEnabled(HandshakeOptions.CLR2))\n             {\n                 return TaskHostNameForClr2TaskHost;\n             }\n             else\n             {\n                 if (s_msbuildName == null)\n                 {\n-                    s_msbuildName = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\");\n-\n-                    if (s_msbuildName == null)\n-                    {\n-                        s_msbuildName = (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET\n-                            ? \"MSBuild.dll\"\n-                            : \"MSBuild.exe\";\n-                    }\n+                    // for NET the executable is resolved from DOTNET_EXPERIMENTAL_HOST_PATH\n+                    s_msbuildName = IsHandshakeOptionEnabled(HandshakeOptions.NET)\n+                        ? string.Empty\n+                        : Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\") ?? Constants.MSBuildExecutableName;",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In .NET core will this be `msbuild.exe` or `dotnet.exe`? ",
              "createdAt": "2025-03-31T16:51:35Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -201,19 +202,19 @@ protected IList<NodeContext> GetNodes(string msbuildLocation,\n             }\n #endif\n \n-            if (String.IsNullOrEmpty(msbuildLocation))\n+            if (String.IsNullOrEmpty(msbuildExecutableLocation))\n             {\n-                msbuildLocation = _componentHost.BuildParameters.NodeExeLocation;\n+                msbuildExecutableLocation = _componentHost.BuildParameters.NodeExeLocation;\n             }\n \n-            if (String.IsNullOrEmpty(msbuildLocation))\n+            if (String.IsNullOrEmpty(msbuildExecutableLocation))\n             {\n                 string msbuildExeName = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_NAME\");",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      }
    ]
  }
}