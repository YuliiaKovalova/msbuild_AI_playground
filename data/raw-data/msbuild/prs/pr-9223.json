{
  "number": 9223,
  "title": "Update native File.Exists",
  "body": "Fixes [#4272](https://github.com/dotnet/msbuild/issues/4247)\r\n\r\n### Context\r\nThe root of the problem here is that our custom Windows-only implementation of File.Exists behaves differently than the regular one in BCL\r\n\r\n\r\n### Changes Made\r\nRewrite the WindowsFileSystem.FileExists implementation like this:\r\n\r\n```\r\n#if NETFRAMEWORK\r\n            return Microsoft.IO.File.Exists(path);\r\n#else\r\n            return File.Exists(path);\r\n#endif\r\n```\r\n\r\n### Testing\r\n\r\nProjectItemSpecTooLong()\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-09-18T09:35:02Z",
  "updatedAt": "2024-12-15T15:43:10Z",
  "closedAt": "2024-09-23T05:52:05Z",
  "mergedAt": "2024-09-23T05:52:05Z",
  "additions": 16,
  "deletions": 16,
  "changedFiles": 4,
  "headRefName": "jennybai/issue4247",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      },
      {
        "login": "JaynieBai"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "12642d55ce40feffad7d4cb34808889f4a52e925",
          "message": "Enable test ProjectItemSpecTooLong",
          "committedDate": "2023-09-18T09:34:08Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7a2b3f23f4b7c392fc8f448ee182d16bb03b686",
          "message": "Get full path",
          "committedDate": "2023-10-31T07:16:16Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1547851c3d39705ef63ec88fd1ceb57f9c75659",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into jennybai/issue4247",
          "committedDate": "2023-12-29T02:41:48Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea825e00da454a6c0189c60bbf6fe63168a524cf",
          "message": "Get the rootlength from tempProject",
          "committedDate": "2023-12-29T07:49:08Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eddaf2c3a72837bc97211e8d71aaf54791d76184",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into jennybai/issue4247",
          "committedDate": "2024-03-29T06:55:43Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "786c148d5776d454976db44215e6aee227ff05ce",
          "message": "Update the test exception",
          "committedDate": "2024-03-29T07:23:22Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "19bde2c06d7c76eb37309ddc96d2d44cce8a65d5",
          "message": "Update the test description",
          "committedDate": "2024-03-29T07:24:59Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "07abf934622e50ff8233023833c63b00748a5e9d",
          "message": "Merge branch 'jennybai/issue4247' of https://github.com/dotnet/msbuild into jennybai/issue4247",
          "committedDate": "2024-03-29T07:34:34Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "057b285855871823a994b340829163d63048076b",
          "message": "Update test description",
          "committedDate": "2024-03-29T07:43:22Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cee1569b4f29f9118e38fb41eb91b8e992812ab9",
          "message": "Merge branch 'main' into jennybai/issue4247",
          "committedDate": "2024-09-10T09:38:34Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51237eda55240f7e6cb2095094ca272aee1d8081",
          "message": "Update WindowsFileSystem.FileExists",
          "committedDate": "2024-09-10T10:25:56Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf2962c18a7cab4b9907385eeb66af262799d99d",
          "message": "revert test description",
          "committedDate": "2024-09-10T10:29:42Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8315ad13d1744e4f1d18630749c93daa9c70886a",
          "message": "Adds all assembly redirects to the config file",
          "committedDate": "2024-09-20T10:07:19Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "448584c261026eaefc62b184db7c079f55ae8acc",
          "message": "Merge branch 'main' into jennybai/issue4247",
          "committedDate": "2024-09-23T02:33:24Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@JaynieBai Could you comment on this PR and fill the description?",
        "createdAt": "2023-10-26T14:25:14Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2023-11-01T01:52:47Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-11-01T01:52:57Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "It looks like the root of the problem here is that our custom Windows-only implementation of `File.Exists` behaves differently than the regular one in BCL. Here it is:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/053feb0db1845c96e2e9a60e676039d1503b916f/src/Framework/NativeMethods.cs#L1725-L1731\r\n\r\nBCL API accepts paths like `..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\mydir\\myfile` while ours does not. I think we should make sure that the fix is done at the right layer (or if it needs to be done at all). What are our guarantees when it comes to such paths? Are there other places where we currently have a similar Windows-only problem? Does the proposed fix of always normalizing paths with `GetFullPathNoThrow` have a negative perf impact on Linux and Mac where we likely don't need it?\r\n\r\n@JaynieBai, can you please check why exactly `FileSystems.Default.FileExists(projectPath)` is failing without the proposed fix? Is it because the argument is longer than MAX_PATH, because it contains unbalanced `..`'s, or because it contains any `..`'s at all?",
        "createdAt": "2024-04-09T12:17:19Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> It looks like the root of the problem here is that our custom Windows-only implementation of `File.Exists` behaves differently than the regular one in BCL. Here it is:\r\n> \r\n> https://github.com/dotnet/msbuild/blob/053feb0db1845c96e2e9a60e676039d1503b916f/src/Framework/NativeMethods.cs#L1725-L1731\r\n> \r\n> BCL API accepts paths like `..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\mydir\\myfile` while ours does not. I think we should make sure that the fix is done at the right layer (or if it needs to be done at all). What are our guarantees when it comes to such paths? Are there other places where we currently have a similar Windows-only problem? Does the proposed fix of always normalizing paths with `GetFullPathNoThrow` have a negative perf impact on Linux and Mac where we likely don't need it?\r\n> \r\n> @JaynieBai, can you please check why exactly `FileSystems.Default.FileExists(projectPath)` is failing without the proposed fix? Is it because the argument is longer than MAX_PATH, because it contains unbalanced `..`'s, or because it contains any `..`'s at all? \r\n\r\nI Find  FileSystems.Default.FileExists calls the unmanage function `GetFileAttributesEx`. So write the following code and find when file is prefixed with different length of \"..\\\\\". The  outputs of File.Exists and GetFileAttributesEx are different. Not sure the reason now. @f-alizada  Could you have a look?\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n    int[] numbers = new int[] {7, 8, 50, 57, 101, 250 };\r\n    for(int j=0 ; j<numbers.Length; j++)\r\n    {\r\n        string file = null;\r\n        for (int i = 0; i < numbers[j]; i++)\r\n        {\r\n            file += \"..\\\\\";\r\n        }\r\n        file += \"Users\\\\file.tmp\";\r\n        var test = File.Exists(file);\r\n        Console.WriteLine(\"FileLength:\" + file.Length);\r\n        Console.WriteLine(\"File.Exists Output:\" + test);\r\n        WIN32_FILE_ATTRIBUTE_DATA data = new WIN32_FILE_ATTRIBUTE_DATA();\r\n        var result = GetFileAttributesEx(file, 0, ref data);\r\n        Console.WriteLine(\"FileSystems.Default.FileExists Output: \" + result);\r\n        if (!result)\r\n        {\r\n            int error = Marshal.GetLastWin32Error();\r\n            Console.WriteLine($\"Error {error} occurred while getting file attributes.\");\r\n        }\r\n    }\r\n}\r\n\r\n[DllImport(\"kernel32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]\r\n[return: MarshalAs(UnmanagedType.Bool)]\r\ninternal static extern bool GetFileAttributesEx(String name, int fileInfoLevel, ref WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);\r\n\r\n/// <summary>\r\n/// Contains information about a file or directory; used by GetFileAttributesEx.\r\n/// </summary>\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct WIN32_FILE_ATTRIBUTE_DATA\r\n{\r\n    internal int fileAttributes;\r\n    internal uint ftCreationTimeLow;\r\n    internal uint ftCreationTimeHigh;\r\n    internal uint ftLastAccessTimeLow;\r\n    internal uint ftLastAccessTimeHigh;\r\n    internal uint ftLastWriteTimeLow;\r\n    internal uint ftLastWriteTimeHigh;\r\n    internal uint fileSizeHigh;\r\n    internal uint fileSizeLow;\r\n}\r\n```\r\n.NET Framework Output\r\n\r\n```\r\nFileLength:35\r\nFile.Exists Output:False\r\nFileSystems.Default.FileExists Output: False\r\nError 3 occurred while getting file attributes.\r\nFileLength:38\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: True\r\nFileLength:164\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: True\r\nFileLength:185\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 3 occurred while getting file attributes.\r\nFileLength:317\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 3 occurred while getting file attributes.\r\nFileLength:764\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 3 occurred while getting file attributes.\r\n```\r\n.Net Output\r\n```\r\nFileLength:35\r\nFile.Exists Output:False\r\nFileSystems.Default.FileExists Output: False\r\nError 0 occurred while getting file attributes.\r\nFileLength:38\r\nFile.Exists Output:False\r\nFileSystems.Default.FileExists Output: False\r\nError 0 occurred while getting file attributes.\r\nFileLength:164\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: True\r\nFileLength:185\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 0 occurred while getting file attributes.\r\nFileLength:317\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 0 occurred while getting file attributes.\r\nFileLength:764\r\nFile.Exists Output:True\r\nFileSystems.Default.FileExists Output: False\r\nError 0 occurred while getting file attributes.\r\n```\r\n",
        "createdAt": "2024-04-12T07:56:25Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "I agree with @ladipro here that we need to make sure a change happens on a correct abstraction layer and isolated only to the failing scenario, given the perf concerns. \r\n\r\n@rainersigwald do you have some knowledge why we have a custom Windows-only implementation of File.Exists here?",
        "createdAt": "2024-06-12T18:40:32Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Synced with @AR-May on this - our conclusion: The root of the problem is in our custom implementation of FileExists (`FileExistsWindows`). The suggested course of action (@JaynieBai):\r\n* Compare performance of standard `File.Exists` and our custom `FileExistsWindows` (you can use BenchmarkDotNet for this) - and see if there is a significant difference (report the results here)\r\n* If there are no significant differences - let's replace our custom impl. with the standard impl\r\n* If there is a difference - ping the team - we'll need to have different (more specific) bug created for fixing the `FileExistsWindows`",
        "createdAt": "2024-07-09T11:57:12Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "BenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.4037/23H2/2023Update/SunValley3)\r\nAMD Ryzen 7 5700X, 1 CPU, 16 logical and 8 physical cores\r\n  [Host]     : .NET Framework 4.8.1 (4.8.9261.0), X64 RyuJIT VectorSize=256\r\n  DefaultJob : .NET Framework 4.8.1 (4.8.9261.0), X64 RyuJIT VectorSize=256\r\n\r\n\r\n| Method  | Mean     | Error    | StdDev   | Allocated |\r\n|-------- |---------:|---------:|---------:|----------:|\r\n| Native  | 59.18 us | 1.025 us | 1.052 us |         - |\r\n| Managed | 61.09 us | 0.804 us | 0.752 us |      96 B |\r\n\r\nNo big difference in time, but managed implementation allocates.",
        "createdAt": "2024-08-29T09:04:42Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "Thanks @MichalPavlik! We should probably file a bug with Runtime team.\r\n\r\nI'm wondering how does this allocation influence overall build perf. @JaynieBai - can you run OrchardCore build with current version (custom FileExists impl) vs version where we'd switch to `File.Exists`?\r\nIf the change is not measurable I'd still vote to get off of our custom implementation and adopt the File.Exists",
        "createdAt": "2024-09-02T12:51:29Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek, it was a little bit misleading as I forgot to test `Microsoft.IO.Redist` implementation.\r\n\r\nBenchmarkDotNet v0.13.12, Windows 11 (10.0.22631.4037/23H2/2023Update/SunValley3)\r\nAMD Ryzen 7 5700X, 1 CPU, 16 logical and 8 physical cores\r\n  [Host]     : .NET Framework 4.8.1 (4.8.9261.0), X64 RyuJIT VectorSize=256\r\n  DefaultJob : .NET Framework 4.8.1 (4.8.9261.0), X64 RyuJIT VectorSize=256\r\n\r\n\r\n| Method           | Mean     | Error    | StdDev   | Allocated |\r\n|----------------- |---------:|---------:|---------:|----------:|\r\n| Native           | 58.10 us | 0.648 us | 0.574 us |         - |\r\n| Managed          | 60.87 us | 0.870 us | 0.814 us |      96 B |\r\n| Managed_IORedist | 59.39 us | 0.984 us | 0.920 us |         - |\r\n\r\nThis one doesn't allocate :)\r\nAnd I can share also result from my VM. Although it runs on virtual disk drive, maybe the ReFS/DevDrive has some impact :)\r\n\r\n| Method           | Mean     | Error    | StdDev   | Allocated |\r\n|----------------- |---------:|---------:|---------:|----------:|\r\n| Native           | 26.13 us | 0.483 us | 0.452 us |         - |\r\n| Managed          | 28.64 us | 0.206 us | 0.172 us |      96 B |\r\n| Managed_IORedist | 27.41 us | 0.525 us | 0.605 us |         - |",
        "createdAt": "2024-09-03T10:43:56Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@JanKrivanek, @JaynieBai Replacing the `FileExistsWindows` should resolve #9986. Any chance to use MS.IO.Redist version for file existence check? Frankly, I would replace all P/Invokes in `WindowsFileSystem`, but as new PR for different issue :)",
        "createdAt": "2024-09-05T08:38:00Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I have no strong preference between the 2 (`MS.IO.Redist` vs `System.IO`) - but I'm definitely in favor of getting rid the custom implementation.",
        "createdAt": "2024-09-05T12:12:52Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JaynieBai, please rewrite the `WindowsFileSystem.FileExists` implementation with something like this:\r\n\r\n```C#\r\n#if NETFRAMEWORK\r\n            return Microsoft.IO.File.Exists(path);\r\n#else\r\n            return File.Exists(path);\r\n#endif\r\n```\r\n\r\nThis simple focused change is enough for now. We will talk about the rest of P/Invokes later.",
        "createdAt": "2024-09-06T07:03:16Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@MichalPavlik Microsoft.Build.UnitTests.XMakeAppTests.ConfigurationInvalid  failed since not find the project file when build with copied MSBuild in the temp folder.\r\nBut actually, the project file is there, and build with  RunnerUtilities.ExecBootstrapedMSBuild from the bootstrap MSBuild.exe , it succeeds.",
        "createdAt": "2024-09-11T08:32:33Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "This was tricky. The reason why is MS.IO.Redist returning `false` in this case is due to `IOException` swallowing inside the `MS.IO.File.Exists` method. When the method is called inside of a MSBuild copy with modified `app.config`, an exception is thrown:\r\n\r\n`System.IO.FileLoadException: 'Could not load file or assembly 'System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'`\r\n\r\nThis exception is silently ignored as `FileLoadException` is a subtype of `IOException`. The current version of `System.Memory` assembly distributed with MSBuild is `4.0.1.2`. Adding `bindingRedirect` to the `configContent` resolves the issue, but it's a workaround that we would need to maintain. Or we would have to extract the `assemblyBinding` from existing `app.config` and inject to the generated one.\r\n\r\n@rainersigwald Is this test critical enough to have such a complicated functional test? If so, then we have these options:\r\n- Make the test more complex by adding current assemblyBinding to the created app.config\r\n- Try to test this differently - using new temporary AppDomain (with modified config) if possible, or unit test if possible\r\n- Using old `System.IO.File.Exists` (which allocates 96 bytes) without modifying the test\r\n- Something else :)\r\n\r\nI would personally prefer to find a way how to simplify the test if we really need this one. These kind of tests can fail on magnitude of reasons, and investigation is costly.\r\n\r\nEdit: Bug report created - https://github.com/dotnet/maintenance-packages/issues/117",
        "createdAt": "2024-09-18T17:12:13Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "No opinions so far. Let's use the simplest way :) @JaynieBai, please replace the `configContent` assignment with this:\r\n\r\n```C#\r\nXElement configRuntimeElement = XDocument.Load(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + \".config\").Root.Element(\"runtime\");\r\n\r\nstring configContent = $@\"<?xml version =\"\"1.0\"\"?>\r\n                            <configuration>\r\n                                <configSections>\r\n                                    <section name=\"\"msbuildToolsets\"\" type=\"\"Microsoft.Build.Evaluation.ToolsetConfigurationSection, Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\" />\r\n                                    <foo/>\r\n                                </configSections>\r\n                                <startup>\r\n                                    <supportedRuntime version=\"\"v4.0\"\"/>\r\n                                </startup>\r\n                                <foo/>\r\n                                <msbuildToolsets default=\"\"X\"\">\r\n                                <foo/>\r\n                                    <toolset toolsVersion=\"\"X\"\">\r\n                                        <foo/>\r\n                                    <property name=\"\"MSBuildBinPath\"\" value=\"\"Y\"\"/>\r\n                                    <foo/>\r\n                                    </toolset>\r\n                                <foo/>\r\n                                </msbuildToolsets>\r\n                                {configRuntimeElement}\r\n                            </configuration>\";\r\n ```\r\n\r\nIt adds all assembly redirects to the config file and the `Exists` method will work as expected.",
        "createdAt": "2024-09-19T08:23:26Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "Ah sorry. I like that plan @MichalPavlik.",
        "createdAt": "2024-09-19T15:03:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> `FileLoadException`\r\n\r\nhttps://github.com/dotnet/msbuild/pull/9223#issuecomment-2359007085\r\n\r\nI am not sure if the teams working on this component is also part of the team for Azure DevOps agents. But I would just let you know, that I just reported an issues happening in Azure DevOps self hosted agents, because of this recent change to MS.IO.Redist. https://developercommunity.visualstudio.com/t/MSBuild-Task-stopped-finding-MSBuildexe/10813148",
        "createdAt": "2024-12-15T15:42:24Z",
        "author": {
          "login": "Ligtorn"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Will it be possible to get the length of the rootPath from the tempProject instead of tempPath? the reasoning behind that is: \r\n1 - In case the tempPath root length would differ from the root length of projectPath\r\n\r\nwhat do you think? ",
              "createdAt": "2023-11-06T09:33:46Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -69,15 +68,15 @@ public void ProjectItemSpecTooLong()\n                 }\n \n                 int rootLength = Path.GetPathRoot(tempPath).Length;\n-                string tempPathNoRoot = tempPath.Substring(rootLength);\n+                string tempPathNoRoot = tempProject.Substring(rootLength);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "+1",
              "createdAt": "2023-11-14T10:14:08Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -69,15 +68,15 @@ public void ProjectItemSpecTooLong()\n                 }\n \n                 int rootLength = Path.GetPathRoot(tempPath).Length;\n-                string tempPathNoRoot = tempPath.Substring(rootLength);\n+                string tempPathNoRoot = tempProject.Substring(rootLength);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thanks for your suggestions. Have updated",
              "createdAt": "2023-12-29T07:56:09Z",
              "path": "src/Build.UnitTests/BackEnd/MSBuild_Tests.cs",
              "diffHunk": "@@ -69,15 +68,15 @@ public void ProjectItemSpecTooLong()\n                 }\n \n                 int rootLength = Path.GetPathRoot(tempPath).Length;\n-                string tempPathNoRoot = tempPath.Substring(rootLength);\n+                string tempPathNoRoot = tempProject.Substring(rootLength);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It seems like we shorten the path always after this change. I guess the explanation for the change is \"So, when project path includes multiple reductant \"..\\\\\" not longer than the max path, it will report MSBuild.ProjectFileNotFound.\". I am a bit confused: if the path is not too long, how \"MSBuild.ProjectFileNotFound\" is thrown? I would think that the file would be found in this case.",
              "createdAt": "2023-11-20T09:19:50Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -314,14 +314,14 @@ public async Task<bool> ExecuteInternal()\n             {\n                 ITaskItem project = Projects[i];\n \n-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);\n+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "When project path includes multiple reductant \"..\\\" not longer than the max path. The code here `FileSystems.Default.FileExists(projectPath) `will return false.\r\nhttps://github.com/dotnet/msbuild/blob/b59f07e4312eb6e3e33e59241453606c81992738/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs#L343-L392",
              "createdAt": "2023-12-29T08:30:58Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -314,14 +314,14 @@ public async Task<bool> ExecuteInternal()\n             {\n                 ITaskItem project = Projects[i];\n \n-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);\n+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Is this discussion still relevant?",
              "createdAt": "2024-09-20T12:47:57Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -314,14 +314,14 @@ public async Task<bool> ExecuteInternal()\n             {\n                 ITaskItem project = Projects[i];\n \n-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);\n+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "It's related. But it has been resolved by our new changes",
              "createdAt": "2024-09-23T02:35:32Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -314,14 +314,14 @@ public async Task<bool> ExecuteInternal()\n             {\n                 ITaskItem project = Projects[i];\n \n-                string projectPath = FileUtilities.AttemptToShortenPath(project.ItemSpec);\n+                string projectPath = FileUtilities.GetFullPathNoThrow(project.ItemSpec);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "One more question: \r\nIt seems that the test fails when: \"Fails when long paths are enabled.\"\r\nIs there any chance to cover this by tests? long paths enabled/disabled ? ",
              "createdAt": "2024-03-28T09:59:36Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "This test fails since https://github.com/Microsoft/msbuild/blob/94e11e0a773bc8956caf128335433231bb06fed5/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs#L314.  The project file including multiple reductant \"..\\\" and didn't get shorten there since it is not over than max path in the function. So the test fails with file not found exception https://github.com/dotnet/msbuild/blob/7ca3c98fad986066bbf2802c863236b4a0f4e34a/src/Shared/FileUtilities.cs#L1192-L1200\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/94e11e0a773bc8956caf128335433231bb06fed5/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs#L314 is a bug.  I think this test could verify the bug. It passes the actual long path.",
              "createdAt": "2024-03-29T07:10:27Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "In such scenario the test does not cover the case when the long path are enabled. \r\nCurrently we have static: \r\n\r\n```\r\nfor (int i = 0; i < 250; i++)\r\n {\r\n           projectFile1 += \"..\\\\\";\r\n }\r\n```\r\nwhich does not guarantee to exceed the max path length .\r\nand the resulting length does not depend on the actual max allowed path, but actual value of max allowed path could be 32,767 : https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry\r\n\r\nI would suggest to build the projectFile1 length based on current max file path length, to actually cover the case on different machines, without additional configuration, what do you think? \r\n\r\nPlease let me know if I'm missing something. \r\n",
              "createdAt": "2024-04-02T08:01:32Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "The maxpath is int.MaxValue if longpath is enabled.  We can't define a project file which length is longer than that.\r\nhttps://github.com/dotnet/msbuild/blob/494047fc6f53e60048d23f0cc2350a042ba02526/src/Framework/NativeMethods.cs#L584-L595",
              "createdAt": "2024-04-08T08:58:44Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Thank you for the clarifications! yes agree, resolving the comment. ",
              "createdAt": "2024-04-09T10:25:16Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Having that the test should be working on both solution it is not required for the project file to exceed max path. ",
              "createdAt": "2024-04-09T10:25:59Z",
              "path": "src/Tasks.UnitTests/MSBuild_Tests.cs",
              "diffHunk": "@@ -39,7 +39,6 @@ public void Dispose()\n         /// throw a path too long exception\n         /// </summary>\n         [Fact]\n-        [ActiveIssue(\"https://github.com/dotnet/msbuild/issues/4247\")]",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}