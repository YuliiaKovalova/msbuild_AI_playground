{
  "number": 7844,
  "title": "Fix ProjectReferenceTargets for Publish and Rebuild",
  "body": "Fixes https://github.com/dotnet/sdk/issues/24414\r\n\r\nPreviously Publish was declaring that it literally only called `GetCopyToPublishDirectoryItems` on its project references, which is clearly incorrect.\r\n\r\nThis adds the other targets which Publish calls on its project references.\r\n\r\nAlso fixed the declaration for `Rebuild`'s outer build. All Rebuild's outer build does is dispatch to the inner Clean and Build targets and Rebuild's outer never actually interacts with any ProjectReference. So it needs no `ProjectReferenceTargets` configuration.",
  "state": "MERGED",
  "createdAt": "2022-07-21T19:54:50Z",
  "updatedAt": "2022-07-29T18:16:29Z",
  "closedAt": "2022-07-28T07:46:04Z",
  "mergedAt": "2022-07-28T07:46:04Z",
  "additions": 11,
  "deletions": 8,
  "changedFiles": 1,
  "headRefName": "fix-graph-publish",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5ead4c53472486c7629d7be037271d281e2b08a9",
          "message": "Fix ProjectReferenceTargets for Publish",
          "committedDate": "2022-07-21T19:53:14Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dbdc3ae3f046da585603daed366e54bdaef91e3b",
          "message": "Account for --no-build",
          "committedDate": "2022-07-25T21:12:19Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "607c522bdbff5db4469b80ca7f4183c9a16abefe",
          "message": "Tune Rebuild outer build for accuracy",
          "committedDate": "2022-07-25T21:37:12Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2867af815fa87bd6dc23812df1124bb1267c319",
          "message": "PR comment",
          "committedDate": "2022-07-26T23:57:42Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think Rebuild in an outer build currently calls the inner builds with Clean;Build instead? Not that I think that's right, but that might be something to fix as well.",
              "createdAt": "2022-07-22T16:11:59Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>\n+    <ProjectReferenceTargetsForPublish>$(ProjectReferenceTargetsForBuild);GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+\n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForClean)\" Condition=\" '$(ProjectReferenceTargetsForClean)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" />\n+    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" OuterBuild=\"true\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'll see what it'll take to make this work. I think it's actually as easy as just removing this line and `ProjectReferenceTargetsForRebuildInOuterBuild`. IE the Rebuild outer build never communicates with the ProjectReferences; all it does is dispatch to the inner builds.",
              "createdAt": "2022-07-25T21:19:13Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>\n+    <ProjectReferenceTargetsForPublish>$(ProjectReferenceTargetsForBuild);GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+\n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForClean)\" Condition=\" '$(ProjectReferenceTargetsForClean)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" />\n+    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" OuterBuild=\"true\" />",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Yup, removing this line entirely is more correct.",
              "createdAt": "2022-07-25T21:37:58Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>\n+    <ProjectReferenceTargetsForPublish>$(ProjectReferenceTargetsForBuild);GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+\n     <ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForGetCopyToPublishDirectoryItems)</ProjectReferenceTargetsForGetCopyToPublishDirectoryItems>\n   </PropertyGroup>\n \n   <ItemGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n-    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuildInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Build\" Targets=\"$(ProjectReferenceTargetsForBuild)\" Condition=\" '$(ProjectReferenceTargetsForBuild)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\"/>\n+    <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForCleanInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForCleanInOuterBuild)' != '' \" OuterBuild=\"true\" />\n     <ProjectReferenceTargets Include=\"Clean\" Targets=\"$(ProjectReferenceTargetsForClean)\" Condition=\" '$(ProjectReferenceTargetsForClean)' != '' \" />\n \n-    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" />\n+    <ProjectReferenceTargets Include=\"Rebuild\" Targets=\"$(ProjectReferenceTargetsForRebuildInOuterBuild)\" Condition=\" '$(ProjectReferenceTargetsForRebuildInOuterBuild)' != '' \" OuterBuild=\"true\" />",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are there optimization opportunities we might be missing if we call build explicitly here, and something else could have determined that we could skip building? Like I think there's some switch you can pass to publish to say that you've already built, and we shouldn't build again.",
              "createdAt": "2022-07-22T16:12:58Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Team triage (because ^ was a bit unclear):\r\nThere's normally a `dotnet publish --no-build`. With this, that wouldn't be an option for graph builds. Is that something you intend, or were you just assuming people always build before publishing? If that's intentional, we're ok with it, to be clear.",
              "createdAt": "2022-07-25T15:25:10Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yea, this was something I was thinking about trying to address, but it's difficult. The `NoBuild` property isn't always set on the referencing project; it's sometimes passed as an additional property to the referenced projects (eg sfproj).\r\n\r\nHowever, I do think we can handle `--no-build`, so at least that scenario will be covered.",
              "createdAt": "2022-07-25T17:59:04Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Ok, tested with both `/t:Publish /bl /graph /isolate` and `/t:Publish /bl /graph /isolate /p:NoBuild=true` and both seem to work now.",
              "createdAt": "2022-07-25T21:13:04Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -50,21 +50,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish chains Build, so inherit it -->\n+    <ProjectReferenceTargetsForPublishInOuterBuild>$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForPublishInOuterBuild)</ProjectReferenceTargetsForPublishInOuterBuild>",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I was momentarily confused by this until I realized this was essentially Condition=\"'$(NoBuild)' != 'true'\". Can we just make it that?",
              "createdAt": "2022-07-26T23:45:35Z",
              "path": "src/Tasks/Microsoft.Managed.After.targets",
              "diffHunk": "@@ -38,33 +38,36 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   -->\n   <PropertyGroup Condition=\"'$(IsGraphBuild)' == 'true'\">\n     <!-- Empty case is for outer builds which do not import the target files that set BuildProjectReferences -->\n-    <_MainReferenceTarget Condition=\"'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'\">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTarget>\n-    <_MainReferenceTarget Condition=\"'$(_MainReferenceTarget)' == ''\">GetTargetPath</_MainReferenceTarget>\n+    <_MainReferenceTargetForBuild Condition=\"'$(BuildProjectReferences)' == '' or '$(BuildProjectReferences)' == 'true'\">.projectReferenceTargetsOrDefaultTargets</_MainReferenceTargetForBuild>\n+    <_MainReferenceTargetForBuild Condition=\"'$(_MainReferenceTargetForBuild)' == ''\">GetTargetPath</_MainReferenceTargetForBuild>\n \n     <ProjectReferenceTargetsForBuildInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForBuildInOuterBuild)</ProjectReferenceTargetsForBuildInOuterBuild>\n-    <ProjectReferenceTargetsForBuild>$(_MainReferenceTarget);GetNativeManifest;$(_RecursiveTargetForContentCopying);GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n+    <ProjectReferenceTargetsForBuild>$(_MainReferenceTargetForBuild);GetNativeManifest;$(_RecursiveTargetForContentCopying);GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForBuild)</ProjectReferenceTargetsForBuild>\n \n     <ProjectReferenceTargetsForCleanInOuterBuild>GetTargetFrameworks;$(ProjectReferenceTargetsForCleanInOuterBuild)</ProjectReferenceTargetsForCleanInOuterBuild>\n     <ProjectReferenceTargetsForClean>Clean;GetTargetFrameworksWithPlatformForSingleTargetFramework;$(ProjectReferenceTargetsForClean)</ProjectReferenceTargetsForClean>\n \n-    <ProjectReferenceTargetsForRebuildInOuterBuild>$(ProjectReferenceTargetsForCleanInOuterBuild);$(ProjectReferenceTargetsForBuildInOuterBuild);$(ProjectReferenceTargetsForRebuildInOuterBuild)</ProjectReferenceTargetsForRebuildInOuterBuild>\n     <ProjectReferenceTargetsForRebuild>$(ProjectReferenceTargetsForClean);$(ProjectReferenceTargetsForBuild);$(ProjectReferenceTargetsForRebuild)</ProjectReferenceTargetsForRebuild>\n \n-    <ProjectReferenceTargetsForPublish>GetCopyToPublishDirectoryItems;$(ProjectReferenceTargetsForPublish)</ProjectReferenceTargetsForPublish>\n+    <!-- Publish has the same logic as Build for the main reference target except it also takes $(NoBuild) into account. -->\n+    <_MainReferenceTargetForPublish Condition=\"'$(NoBuild)' == 'true'\">GetTargetPath</_MainReferenceTargetForPublish>\n+    <_MainReferenceTargetForPublish Condition=\"'$(_MainReferenceTargetForPublish)' == ''\">$(_MainReferenceTargetForBuild)</_MainReferenceTargetForPublish>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}