{
  "number": 7817,
  "title": "Fix Graph and ProjectCache UTs",
  "body": "This fixes some broken Graph and ProjectCache UTs (which aren't failing PR or CI builds since they're disabled by #4501...) and also does some minor refactoring/cleanup of the UTs",
  "state": "MERGED",
  "createdAt": "2022-07-12T20:53:44Z",
  "updatedAt": "2022-07-29T18:16:50Z",
  "closedAt": "2022-07-15T18:49:56Z",
  "mergedAt": "2022-07-15T18:49:56Z",
  "additions": 330,
  "deletions": 341,
  "changedFiles": 4,
  "headRefName": "fix-graph-uts",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bece472a368887db9488f9416980c2a2e5e20431",
          "message": "Fix Graph and ProjectCache UTs",
          "committedDate": "2022-07-12T21:14:27Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4bce012df0215f34bc5ddc9c146353434b522853",
          "message": "Fix formatting",
          "committedDate": "2022-07-14T17:02:21Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I didn't see anything that should actually change behavior, just cleanup. Did I miss something? (Not counting UTs)\r\n\r\nThere is a very minor behavior change in `BuildManager` which fixes the handling of circular dependencies for graph builds. It just fails in the correct way now. Specifically the `GraphBuildResult` has `CircularDependency == true` instead of having `Exception` populated. The behavior is basically the same though ultimately.",
        "createdAt": "2022-07-12T21:36:53Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "I saw that, but I thought you'd just promoted it out of the exception block below. The build event contexts should be able to be shared.",
        "createdAt": "2022-07-12T21:55:23Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok to drop the clone?",
              "createdAt": "2022-07-14T13:56:00Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -446,7 +443,7 @@ public static IEnumerable<object[]> SuccessfulGraphsWithBuildParameters\n                         yield return new object[]\n                         {\n                             graph,\n-                            ((BuildParameters) buildParameters.First()).Clone()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yup, `MultiProcWithAndWithoutInProcNode` yield returns new objects every time, so no need to clone this.",
              "createdAt": "2022-07-14T16:11:05Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -446,7 +443,7 @@ public static IEnumerable<object[]> SuccessfulGraphsWithBuildParameters\n                         yield return new object[]\n                         {\n                             graph,\n-                            ((BuildParameters) buildParameters.First()).Clone()",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}