{
  "number": 8024,
  "title": "Fallback when server client fails due to mutex connection timeout error.",
  "body": "Fixes #7993\r\n\r\n### Summary\r\nIn the MSBuild server, we identify the state of the server via mutexes. Sometimes, for reason yet unknown to us, mutex could throw the exception `System.IO.IOException: Connection timed out`. When this occurs, we fallback to old behavior building without server. We fixed some of those in #8000, but now found more situations when this happens.\r\n\r\n### Customer Impact\r\nMSBuild non-Windows users could have intermittent error when building with `dotnet build`. \r\nThis does not affect Visual Studio. \r\n\r\n### Regression?\r\nYes, this is a regression.\r\n\r\n### Testing\r\nUnit tests.\r\n\r\n### Risk\r\nLow risk. The fix adds additional try-catch blocks to process this situation.\r\n\r\n### Code Reviewers\r\n[TODO]\r\n\r\n### Description of the fix\r\n- Add a try-catch block to catch and process the `IOException` exception when mutexes are used.\r\n- Add a new client exit type for this kind of error.\r\n",
  "state": "MERGED",
  "createdAt": "2022-10-05T15:18:16Z",
  "updatedAt": "2022-12-20T14:37:06Z",
  "closedAt": "2022-10-10T14:14:23Z",
  "mergedAt": "2022-10-10T14:14:23Z",
  "additions": 55,
  "deletions": 23,
  "changedFiles": 3,
  "headRefName": "catch-mutex-errors-in-msbuild-server",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "073f2ba7595e4b28a4326d9a5591e864b1898086",
          "message": "Add the try-catch block for mutex connection timeout exception.",
          "committedDate": "2022-10-05T15:38:07Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "133463e3c16b6ceacc629a8565be63445e6e1932",
          "message": "Change the exit type for mutex connection timeout exception in TryLaunchServer.",
          "committedDate": "2022-10-05T15:38:07Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "538fb7503667c3d93744137a4485f842756effef",
          "message": "Address PR comments.",
          "committedDate": "2022-10-06T09:02:19Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "228639686a3d6c6e1a71abac60a8286a38ac63a4",
          "message": "Address PR comments - 2.",
          "committedDate": "2022-10-07T09:53:33Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm confused about a few things for this PR.\r\n\r\nFirst, is it intended to go into 17.4 or 17.5? You filled out the template as if it's aimed at 17.4, but I heard we were turning server off for 17.4, which makes this seem like it isn't high enough priority to meet the QB approval bar?\r\n\r\nSecond, is this its final form? It seems more like it's trying to gather information about what's going wrong when it crashes rather than actually fixing the underlying problem. Are you planning to have a follow-up PR to fix the real issue and remove these try/catches? If so, should we remove the \"fixes\" line?\r\n\r\nThird, how should \"UnknownServerState\" be treated by the rest of MSBuild? I'm wondering if you should just shut down the server in that case and restart it with the next build rather than get into an unknown state.",
        "createdAt": "2022-10-06T17:07:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind \r\n> Second, is this its final form?\r\n\r\n1. So far we have seen this bug only on CI and linux. Since Server is going to be be opt-in, it does not matter if we release it in 17.4 or 17.5 as the risk this bug will hunt someone whom opt-in is very small and IMHO acceptable.\r\n\r\n1. We believe it is bug in runtime and shall be fixed in runtime. Since we don't understand root cause of this bug we are backing to non-server as the best-effort. Once we realize this bug is no more, I'd vote for reverting this code.\r\n\r\n1. We can't connect to server so we can't instruct it to shut down. Proper recovery is unknown.",
        "createdAt": "2022-10-07T07:09:37Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Looks like `src\\Build\\PublicAPI\\net\\PublicAPI.Unshipped.txt` is missing\r\n`\r\nMicrosoft.Build.Experimental.MSBuildClientExitType.UnknownServerState = 5 -> Microsoft.Build.Experimental.MSBuildClientExitType\r\n`...\r\n\r\nEdit: Disregard given #8116 merge.",
        "createdAt": "2022-12-19T19:30:10Z",
        "author": {
          "login": "DmitriyShepelev"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Please add link to related GH issue to this comment.",
              "createdAt": "2022-10-05T17:54:07Z",
              "path": "src/Build/BackEnd/Client/MSBuildClientExitType.cs",
              "diffHunk": "@@ -24,6 +24,13 @@ public enum MSBuildClientExitType\n         /// The build stopped unexpectedly, for example,\n         /// because a named pipe between the server and the client was unexpectedly closed.\n         /// </summary>\n-        Unexpected\n+        Unexpected,\n+        /// <summary>\n+        /// The client is not able to identify the server state.\n+        /// </summary>\n+        /// <remarks>\n+        /// This may happen when mutex that is regulating the server state throws.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Caller of TryLaunchServer do override _exitResult.MSBuildClientExitType of false. I recommend caller does it only if MSBuildClientExitType has not been initialized yet.",
              "createdAt": "2022-10-05T17:56:31Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -465,23 +476,33 @@ private bool TrySendPacket(Func<INodePacket> packetResolver)\n         private bool TryLaunchServer()\n         {\n             string serverLaunchMutexName = $@\"Global\\msbuild-server-launch-{_handshake.ComputeHash()}\";\n+\n             try\n             {\n                 // For unknown root cause, opening mutex can sometimes throw 'Connection timed out' exception. See: https://github.com/dotnet/msbuild/issues/7993\n                 using var serverLaunchMutex = ServerNamedMutex.OpenOrCreateMutex(serverLaunchMutexName, out bool mutexCreatedNew);\n+\n                 if (!mutexCreatedNew)\n                 {\n                     // Some other client process launching a server and setting a build request for it. Fallback to usual msbuild app build.\n                     CommunicationsUtilities.Trace(\"Another process launching the msbuild server, falling back to former behavior.\");\n                     _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;\n                     return false;\n                 }\n+            }\n+            catch (IOException ex) when (ex is not PathTooLongException)\n+            {\n+                CommunicationsUtilities.Trace(\"Failed to obtain the current build server state: {0}\",  ex);\n+                _exitResult.MSBuildClientExitType = MSBuildClientExitType.UnknownServerState;\n+                return false;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Nice catch.",
              "createdAt": "2022-10-06T09:03:12Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -465,23 +476,33 @@ private bool TrySendPacket(Func<INodePacket> packetResolver)\n         private bool TryLaunchServer()\n         {\n             string serverLaunchMutexName = $@\"Global\\msbuild-server-launch-{_handshake.ComputeHash()}\";\n+\n             try\n             {\n                 // For unknown root cause, opening mutex can sometimes throw 'Connection timed out' exception. See: https://github.com/dotnet/msbuild/issues/7993\n                 using var serverLaunchMutex = ServerNamedMutex.OpenOrCreateMutex(serverLaunchMutexName, out bool mutexCreatedNew);\n+\n                 if (!mutexCreatedNew)\n                 {\n                     // Some other client process launching a server and setting a build request for it. Fallback to usual msbuild app build.\n                     CommunicationsUtilities.Trace(\"Another process launching the msbuild server, falling back to former behavior.\");\n                     _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;\n                     return false;\n                 }\n+            }\n+            catch (IOException ex) when (ex is not PathTooLongException)\n+            {\n+                CommunicationsUtilities.Trace(\"Failed to obtain the current build server state: {0}\",  ex);\n+                _exitResult.MSBuildClientExitType = MSBuildClientExitType.UnknownServerState;\n+                return false;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Please also Trace IOException.HResult",
              "createdAt": "2022-10-06T14:19:36Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -465,23 +476,33 @@ private bool TrySendPacket(Func<INodePacket> packetResolver)\n         private bool TryLaunchServer()\n         {\n             string serverLaunchMutexName = $@\"Global\\msbuild-server-launch-{_handshake.ComputeHash()}\";\n+\n             try\n             {\n                 // For unknown root cause, opening mutex can sometimes throw 'Connection timed out' exception. See: https://github.com/dotnet/msbuild/issues/7993\n                 using var serverLaunchMutex = ServerNamedMutex.OpenOrCreateMutex(serverLaunchMutexName, out bool mutexCreatedNew);\n+\n                 if (!mutexCreatedNew)\n                 {\n                     // Some other client process launching a server and setting a build request for it. Fallback to usual msbuild app build.\n                     CommunicationsUtilities.Trace(\"Another process launching the msbuild server, falling back to former behavior.\");\n                     _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;\n                     return false;\n                 }\n+            }\n+            catch (IOException ex) when (ex is not PathTooLongException)\n+            {\n+                CommunicationsUtilities.Trace(\"Failed to obtain the current build server state: {0}\",  ex);\n+                _exitResult.MSBuildClientExitType = MSBuildClientExitType.UnknownServerState;\n+                return false;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "After communication with Jiri Vorlicek please also Trace IOException.HResult\r\nIt will help runtime team to narrow it down.\r\n",
              "createdAt": "2022-10-06T14:19:02Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -165,33 +164,45 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n #endif\n \n             CommunicationsUtilities.Trace(\"Executing build with command line '{0}'\", descriptiveCommandLine);\n-            bool serverIsAlreadyRunning = ServerIsRunning();\n-            if (KnownTelemetry.BuildTelemetry != null)\n-            {\n-                KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? \"hot\" : \"cold\";\n-            }\n-            if (!serverIsAlreadyRunning)\n+\n+            try\n             {\n-                CommunicationsUtilities.Trace(\"Server was not running. Starting server now.\");\n-                if (!TryLaunchServer())\n+                bool serverIsAlreadyRunning = ServerIsRunning();\n+                if (KnownTelemetry.BuildTelemetry != null)\n+                {\n+                    KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? \"hot\" : \"cold\";\n+                }\n+                if (!serverIsAlreadyRunning)\n                 {\n-                    _exitResult.MSBuildClientExitType = MSBuildClientExitType.LaunchError;\n+                    CommunicationsUtilities.Trace(\"Server was not running. Starting server now.\");\n+                    if (!TryLaunchServer())\n+                    {\n+                        _exitResult.MSBuildClientExitType = (_exitResult.MSBuildClientExitType == MSBuildClientExitType.Success) ? MSBuildClientExitType.LaunchError : _exitResult.MSBuildClientExitType;\n+                        return _exitResult;\n+                    }\n+                }\n+\n+                // Check that server is not busy.\n+                bool serverWasBusy = ServerWasBusy();\n+                if (serverWasBusy)\n+                {\n+                    CommunicationsUtilities.Trace(\"Server is busy, falling back to former behavior.\");\n+                    _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;\n                     return _exitResult;\n                 }\n-            }\n \n-            // Check that server is not busy.\n-            bool serverWasBusy = ServerWasBusy();\n-            if (serverWasBusy)\n-            {\n-                CommunicationsUtilities.Trace(\"Server is busy, falling back to former behavior.\");\n-                _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;\n-                return _exitResult;\n+                // Connect to server.\n+                if (!TryConnectToServer(serverIsAlreadyRunning ? 1_000 : 20_000))\n+                {\n+                    return _exitResult;\n+                }\n             }\n-\n-            // Connect to server.\n-            if (!TryConnectToServer(serverIsAlreadyRunning ? 1_000 : 20_000))\n+            catch (IOException ex) when (ex is not PathTooLongException)\n             {\n+                // For unknown root cause, Mutex.TryOpenExisting can sometimes throw 'Connection timed out' exception preventing to obtain the build server state through it (Running or not, Busy or not).\n+                // See: https://github.com/dotnet/msbuild/issues/7993\n+                CommunicationsUtilities.Trace(\"Failed to obtain the current build server state: {0}\", ex);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}