{
  "number": 9153,
  "title": "Stub tasks that are not supported on .NET",
  "body": "Fixes #3499 \r\n\r\n### Context\r\nFollowing the pattern used for the `ResolveComReference` task, create stubs for .NET that provide a clear error message indicating the task is not supported on .NET.\r\n\r\n### Changes Made\r\nThe following tasks have been updated:\r\n- `AL`\r\n- `AspNetCompiler`\r\n- `GenerateBootstrapper`\r\n- `GenerateTrustInfo`\r\n- `GetFrameworkSdkPath`\r\n- `RegisterAssembly`\r\n- `ResolveComReference`\r\n- `ResolveNativeReference`\r\n- `UnregisterAssembly`\r\n- `UpdateManifest`\r\n- `WinMDExp`\r\n\r\n~~Additionally, the Utilities project has been updated so that `AppDomainIsolatedTask` (base class of `AppDomainIsolatedTaskExtension` and a dependency of `ResolveComReference`) is included for '.NETFramework' only.~~\r\n\r\n### Testing\r\nTested on macOS and Windows 11 with test project files (attached as [TaskTest.zip](https://github.com/dotnet/msbuild/files/12412788/TaskTest.zip).)\r\n\r\n### Notes\r\nI don't have a full understanding of the interactions of the preprocessor symbols. (e.g. Is `FEATURE_APPDOMAIN` only valid for `NETFRAMEWORK`?) There may be improvements that can be made to the conditionals in the source and in the .targets file.\r\n\r\nShould unit tests be added for the stubs?",
  "state": "MERGED",
  "createdAt": "2023-08-22T20:34:15Z",
  "updatedAt": "2023-09-28T23:11:15Z",
  "closedAt": "2023-09-27T14:05:01Z",
  "mergedAt": "2023-09-27T14:05:01Z",
  "additions": 800,
  "deletions": 73,
  "changedFiles": 15,
  "headRefName": "StubRegUnregAssemblyTasks",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": {
    "title": "VS 17.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e0a377b5ebcd6b7509355ae0b72de4f1a71007cd",
          "message": "stub tasks not supported on .NET Core to provide a clear error message",
          "committedDate": "2023-08-22T19:51:11Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "327d1145b271c81522b2fc991a68221cbd672f6f",
          "message": "Merge branch 'dotnet:main' into StubRegUnregAssemblyTasks",
          "committedDate": "2023-08-22T20:07:09Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d0c7837f4a6c497bad9707aabc8e4f5f7e814e2",
          "message": "Revert change to Microsoft.Build.Utilities.csproj",
          "committedDate": "2023-08-28T21:08:56Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d5ed8d2341a4ac9452ceb2189fcfea1c8578114",
          "message": "make stubs sealed; remove #nullable disable; remove suppression of SA1201",
          "committedDate": "2023-08-28T23:54:04Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53829303d75fa915c3f9b11b82586c7b21524ac5",
          "message": "Add CP0007 suppressions for tasks that are stubs on Core",
          "committedDate": "2023-08-29T15:59:01Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87cb574311446f352655cf469a848812a1b60c31",
          "message": "remove Required attribute from .NET stub tasks",
          "committedDate": "2023-08-30T02:11:40Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4084c61f5aeee2d683a1d54cbe6de6f5ef320586",
          "message": "update Microsoft.Common.tasks",
          "committedDate": "2023-08-30T02:17:38Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81706c52102fc99a174b246b8e38d1f306b0f12a",
          "message": "add for .Net Framework but Obsolete and no-op",
          "committedDate": "2023-08-30T03:00:00Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6dab8559d325296614cd0478c7f03770bcd0633d",
          "message": "Merge branch 'dotnet:main' into StubRegUnregAssemblyTasks",
          "committedDate": "2023-08-30T19:24:32Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "175b36b5b715b04d01c378cb69d833725b4b9c4d",
          "message": "Merge branch 'dotnet:main' into StubRegUnregAssemblyTasks",
          "committedDate": "2023-09-13T20:40:50Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40443c8ab5a614484cf2eec7cc3a98e2807adac3",
          "message": "Merge branch 'main' into StubRegUnregAssemblyTasks",
          "committedDate": "2023-09-26T22:31:11Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I added a `TaskRequiresFramework` type and that is breaking the `Microsoft.NET.ApiCompat.ValidatePackage`. Can someone review the PR and determine if the \"APICompat suppression file\" should be updated?",
        "createdAt": "2023-08-22T23:57:00Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> ... once the classes are `static`.\r\n\r\nDid you mean `sealed`?",
        "createdAt": "2023-08-28T23:48:54Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> > ... once the classes are `static`.\r\n> \r\n> Did you mean `sealed`?\r\n\r\nSure did!",
        "createdAt": "2023-08-29T15:45:40Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need `'$(DisableOutOfProcTaskHost)' == ''`? I think it should be valid for any core runtime.",
              "createdAt": "2023-08-28T18:09:36Z",
              "path": "src/Tasks/Microsoft.Common.tasks",
              "diffHunk": "@@ -65,6 +65,7 @@\n \n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Condition=\"'$(DisableOutOfProcTaskHost)' != ''\" />\n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR4\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\n+  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"NET\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That is a question that I had.\r\n\r\nFor `RegisterAssembly` and `UnregisterAssembly` should the `UsingTask`'s be as follows:\r\n\r\n```xml\r\n  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Condition=\"'$(MSBuildRuntimeType)' == 'Core' or '$(DisableOutOfProcTaskHost)' != ''\" />\r\n  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR4\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\r\n  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR2\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\r\n```",
              "createdAt": "2023-08-28T23:24:41Z",
              "path": "src/Tasks/Microsoft.Common.tasks",
              "diffHunk": "@@ -65,6 +65,7 @@\n \n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Condition=\"'$(DisableOutOfProcTaskHost)' != ''\" />\n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR4\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\n+  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"NET\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'\" />",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Yes, that looks great.",
              "createdAt": "2023-08-29T15:47:23Z",
              "path": "src/Tasks/Microsoft.Common.tasks",
              "diffHunk": "@@ -65,6 +65,7 @@\n \n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Condition=\"'$(DisableOutOfProcTaskHost)' != ''\" />\n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR4\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\n+  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"NET\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "done",
              "createdAt": "2023-08-30T02:18:01Z",
              "path": "src/Tasks/Microsoft.Common.tasks",
              "diffHunk": "@@ -65,6 +65,7 @@\n \n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Condition=\"'$(DisableOutOfProcTaskHost)' != ''\" />\n   <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"CLR4\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' != 'Core'\" />\n+  <UsingTask TaskName=\"Microsoft.Build.Tasks.RegisterAssembly\"                      AssemblyName=\"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" Runtime=\"NET\" Condition=\"'$(DisableOutOfProcTaskHost)' == '' and '$(MSBuildRuntimeType)' == 'Core'\" />",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why change this? We have had it compiled in with `[Obsolete]` to help guide people away from using it, so this is a breaking change.",
              "createdAt": "2023-08-28T18:27:10Z",
              "path": "src/Utilities/Microsoft.Build.Utilities.csproj",
              "diffHunk": "@@ -35,7 +35,11 @@\n     <PackageReference Include=\"System.Security.Permissions\" />\n     <PackageReference Include=\"System.Text.Encoding.CodePages\" />\n   </ItemGroup>\n-  \n+\n+  <ItemGroup Condition=\"$(TargetFrameworkIdentifier) != '.NETFramework'\">\n+    <Compile Remove=\"AppDomainIsolatedTask.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please make the netcore version `sealed`--otherwise it can be derived from and someone can call `TaskExtension.Log` or other things and get _very_ confused.",
              "createdAt": "2023-08-28T18:32:34Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -387,6 +392,131 @@ public override bool Execute()\n             return base.Execute();\n         }\n \n+        #endregion\n+    }\n+\n+#else\n+\n+    /// <summary>\n+    /// Stub AL task for .NET Core\n+    /// </summary>\n+    public class AL : TaskRequiresFramework, IALTaskContract",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "They should have been sealed. I had two classes sealed in the original commit. I only missed most of the classes. :roll_eyes:",
              "createdAt": "2023-08-28T23:47:19Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -387,6 +392,131 @@ public override bool Execute()\n             return base.Execute();\n         }\n \n+        #endregion\n+    }\n+\n+#else\n+\n+    /// <summary>\n+    /// Stub AL task for .NET Core\n+    /// </summary>\n+    public class AL : TaskRequiresFramework, IALTaskContract",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Change committed",
              "createdAt": "2023-08-28T23:55:14Z",
              "path": "src/Tasks/Al.cs",
              "diffHunk": "@@ -387,6 +392,131 @@ public override bool Execute()\n             return base.Execute();\n         }\n \n+        #endregion\n+    }\n+\n+#else\n+\n+    /// <summary>\n+    /// Stub AL task for .NET Core\n+    /// </summary>\n+    public class AL : TaskRequiresFramework, IALTaskContract",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Question that I'm not sure about: should these attributes be on the interface? Should we drop them entirely from the stub version? It'd be annoying to be crafting an invocation of a target, working with a bunch of errors about how you must supply a value for whatever, only to eventually specify everything and then get \"sorry that doesn't work on core\"",
              "createdAt": "2023-08-28T18:36:36Z",
              "path": "src/Tasks/UpdateManifest.cs",
              "diffHunk": "@@ -35,4 +40,48 @@ public override bool Execute()\n             return true;\n         }\n     }\n+\n+#else\n+\n+    public class UpdateManifest : TaskRequiresFramework, IUpdateManifestTaskContract\n+    {\n+        public UpdateManifest()\n+            : base(nameof(UpdateManifest))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I will remove the `[Required]` attributes on the stub versions.\r\n\r\nAttributes on an interface are not applied to a class implementing the interface.\r\n\r\nThe results of a quick test of moving the `[Output]` attribute from a class to an interface:\r\n\r\n```\r\nTaskALTest.proj(3,9): error MSB4803: The task \"AL\" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild. See https://aka.ms/msbuild/MSB4803 for further details.\r\nTaskALTest.proj(4,11): error MSB4065: The \"OutputAssembly\" parameter is not marked for output by the \"AL\" task.\r\n```\r\n\r\n[TaskALTest.proj.txt](https://github.com/dotnet/msbuild/files/12466273/TaskALTest.proj.txt)\r\n\r\nNote that the error for using a non-`Output` parameter as an output doesn't pre-empt the \"not supported\" error. In that respect, the `[Output]` attribute doesn't cause an issue.",
              "createdAt": "2023-08-29T15:28:23Z",
              "path": "src/Tasks/UpdateManifest.cs",
              "diffHunk": "@@ -35,4 +40,48 @@ public override bool Execute()\n             return true;\n         }\n     }\n+\n+#else\n+\n+    public class UpdateManifest : TaskRequiresFramework, IUpdateManifestTaskContract\n+    {\n+        public UpdateManifest()\n+            : base(nameof(UpdateManifest))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Removed `[Required]`",
              "createdAt": "2023-08-30T02:13:17Z",
              "path": "src/Tasks/UpdateManifest.cs",
              "diffHunk": "@@ -35,4 +40,48 @@ public override bool Execute()\n             return true;\n         }\n     }\n+\n+#else\n+\n+    public class UpdateManifest : TaskRequiresFramework, IUpdateManifestTaskContract\n+    {\n+        public UpdateManifest()\n+            : base(nameof(UpdateManifest))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Thanks for checking on this! I definitely assumed that an attribute on a base type/interface would have applied to a derived class . . .",
              "createdAt": "2023-08-30T14:11:22Z",
              "path": "src/Tasks/UpdateManifest.cs",
              "diffHunk": "@@ -35,4 +40,48 @@ public override bool Execute()\n             return true;\n         }\n     }\n+\n+#else\n+\n+    public class UpdateManifest : TaskRequiresFramework, IUpdateManifestTaskContract\n+    {\n+        public UpdateManifest()\n+            : base(nameof(UpdateManifest))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "No need to pull this into new code.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2023-08-28T18:38:27Z",
              "path": "src/Tasks/TaskRequiresFramework.cs",
              "diffHunk": "@@ -0,0 +1,30 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NETFRAMEWORK\n+\n+using System;\n+\n+#nullable disable\n+",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Change committed",
              "createdAt": "2023-08-28T23:55:28Z",
              "path": "src/Tasks/TaskRequiresFramework.cs",
              "diffHunk": "@@ -0,0 +1,30 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NETFRAMEWORK\n+\n+using System;\n+\n+#nullable disable\n+",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did this warning only fire for this file?",
              "createdAt": "2023-08-28T18:39:08Z",
              "path": "src/Tasks/ResolveNativeReference.cs",
              "diffHunk": "@@ -340,4 +346,62 @@ public override bool Execute()\n         }\n         #endregion\n     }\n+\n+#else\n+\n+    public class ResolveNativeReference : TaskRequiresFramework, IResolveNativeReferenceTaskConract\n+    {\n+        public ResolveNativeReference()\n+            : base(nameof(ResolveNativeReference))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]\n+        public ITaskItem[] NativeReferences { get; set; }\n+\n+        [Required]\n+        public string[] AdditionalSearchPaths { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainingReferenceFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedPrerequisiteAssemblies { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedComComponents { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedTypeLibraries { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseTlbFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseEtcFiles { get; set; }\n+\n+        #endregion\n+    }\n+\n+#endif\n+\n+#pragma warning disable SA1201 // Elements should appear in the correct order",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "No, the other files are impacted but the warning is in the IDE editor (Visual Studio and Visual Studio for Mac) and not in the `build.sh` (or `build.cmd`) build.\r\n\r\nI'll remove the `#pragma warning` lines for SA1201.",
              "createdAt": "2023-08-28T23:39:39Z",
              "path": "src/Tasks/ResolveNativeReference.cs",
              "diffHunk": "@@ -340,4 +346,62 @@ public override bool Execute()\n         }\n         #endregion\n     }\n+\n+#else\n+\n+    public class ResolveNativeReference : TaskRequiresFramework, IResolveNativeReferenceTaskConract\n+    {\n+        public ResolveNativeReference()\n+            : base(nameof(ResolveNativeReference))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]\n+        public ITaskItem[] NativeReferences { get; set; }\n+\n+        [Required]\n+        public string[] AdditionalSearchPaths { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainingReferenceFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedPrerequisiteAssemblies { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedComComponents { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedTypeLibraries { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseTlbFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseEtcFiles { get; set; }\n+\n+        #endregion\n+    }\n+\n+#endif\n+\n+#pragma warning disable SA1201 // Elements should appear in the correct order",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Change committed",
              "createdAt": "2023-08-28T23:55:38Z",
              "path": "src/Tasks/ResolveNativeReference.cs",
              "diffHunk": "@@ -340,4 +346,62 @@ public override bool Execute()\n         }\n         #endregion\n     }\n+\n+#else\n+\n+    public class ResolveNativeReference : TaskRequiresFramework, IResolveNativeReferenceTaskConract\n+    {\n+        public ResolveNativeReference()\n+            : base(nameof(ResolveNativeReference))\n+        {\n+        }\n+\n+        #region Properties\n+\n+        [Required]\n+        public ITaskItem[] NativeReferences { get; set; }\n+\n+        [Required]\n+        public string[] AdditionalSearchPaths { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainingReferenceFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedPrerequisiteAssemblies { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedComComponents { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedTypeLibraries { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseTlbFiles { get; set; }\n+\n+        [Output]\n+        public ITaskItem[] ContainedLooseEtcFiles { get; set; }\n+\n+        #endregion\n+    }\n+\n+#endif\n+\n+#pragma warning disable SA1201 // Elements should appear in the correct order",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This being public but `!NETFRAMEWORK` is causing an alert\r\n\r\n```xml\r\n  <Suppression>\r\n    <DiagnosticId>CP0001</DiagnosticId>\r\n    <Target>T:Microsoft.Build.Tasks.TaskRequiresFramework</Target>\r\n    <Left>ref/netstandard2.0/Microsoft.Build.Tasks.Core.dll</Left>\r\n    <Right>ref/net472/Microsoft.Build.Tasks.Core.dll</Right>\r\n  </Suppression>\r\n```\r\n\r\nI'm not _completely_ opposed to allowlisting this, but we could also make it a no-op `[Obsolete]` type in framework and avoid the error. @jrdodds got a strong opinion?",
              "createdAt": "2023-08-29T16:09:28Z",
              "path": "src/Tasks/TaskRequiresFramework.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NETFRAMEWORK\n+\n+using System;\n+\n+namespace Microsoft.Build.Tasks\n+{\n+    public abstract class TaskRequiresFramework : TaskExtension",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I don't have a strong opinion either way. I'm fine with the no-op [Obsolete] type approach.",
              "createdAt": "2023-08-30T02:55:15Z",
              "path": "src/Tasks/TaskRequiresFramework.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+#if !NETFRAMEWORK\n+\n+using System;\n+\n+namespace Microsoft.Build.Tasks\n+{\n+    public abstract class TaskRequiresFramework : TaskExtension",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}