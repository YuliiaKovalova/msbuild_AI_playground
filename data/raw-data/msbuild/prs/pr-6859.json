{
  "number": 6859,
  "title": "Eval cond perf",
  "body": "This incorporates several changes to try to speed up the average time it takes to evaluate conditions. Specifically, it attempts to avoid repeat computations by combining Can...Evaluate and ...Evaluate into Try...Evaluate, only checks whether something is empty once each, and exits early if it's clearly empty or not empty. Look at this commit-by-commit! Also note that commits 2+3 should be combined, commits 4 and 7 cancel each other out, and commits 5+8 should be combined. I also will need to add comments for the new Try*Evaluate methods, but I think this is otherwise ready.\r\n\r\nEdit: squashed this down to 3 cleaner commits.\r\n\r\n### Testing\r\nI tried building OrchardCore before and after this change. EvaluateCondition seemed to take about 10% of total Evaluate time before, and this shaved off about a third of that.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-09-15T23:35:01Z",
  "updatedAt": "2021-10-26T12:17:49Z",
  "closedAt": "2021-10-26T12:17:49Z",
  "mergedAt": "2021-10-26T12:17:49Z",
  "additions": 143,
  "deletions": 201,
  "changedFiles": 11,
  "headRefName": "eval-cond-perf",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e02b3d998f7c4b39bd960f75446a74cda489bc27",
          "message": "Early exit",
          "committedDate": "2021-09-20T16:45:15Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "64354ffaa325fa0ddace363f9790d4e462b1a3a7",
          "message": "Prevent double computation\n\nWhen calculating a value to see if we can do a type of comparison, store\nthat value so we don't have to calculate it again. Use Try*Evaluate\ninstead of Can*Evaluate and *Evaluate.",
          "committedDate": "2021-09-20T16:52:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "762ac1d16cef349166315d4ebc8067eccee38724",
          "message": "Use search for @",
          "committedDate": "2021-09-20T16:52:03Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9456c464db1abc03b9eebf4e70d67ffbe75ea9f",
          "message": "Fix incorrect bool check",
          "committedDate": "2021-09-22T23:41:23Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16a30b3d743048fda810e0169573845630616656",
          "message": "Throw error",
          "committedDate": "2021-10-04T19:34:41Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e4c0d40640287f3350e59b858cb2b11d733e49e",
          "message": "Replace Can*Evaluate and *Evaluate with Try*Evaluate\n\nRemoves all *Evaluate and Can*Evaluate except in OperatorExpressionNodes, for which CanBoolEvaluate always returns true, so using a simple BoolEvaluate makes sense.\n\nNote that for the NumericComparisonExpressionNode, we could save a tiny amount of time by only calling TryEvaluate when it's actually used (and using if/else as before), but that would since something can be both a number and a version, that would mean we would have to check both regardless of what we had previously found, which means it would be noticeably messier for (probably) very little perf gain, so I opted against that. Switch statements are so pretty \ud83d\ude42",
          "committedDate": "2021-10-11T17:17:55Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2aac6e2b1ded22944aab261b64860b6f6617f665",
          "message": "Do not abbreviate variable name",
          "committedDate": "2021-10-11T17:18:11Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0134385bfb480d51f7f2a5a54cce7d95e562e6c5",
          "message": "Switch switch to tuple\n\nApparently that's the best supported way",
          "committedDate": "2021-10-11T17:53:04Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "625fd3f3e587b238514542d8c358376c0c57aa19",
          "message": "Switch order of check\n\nI tested once with and once without this change, and with this change, Evaluate was 3% faster...that sounds noisy, but I'll still take it.",
          "committedDate": "2021-10-11T18:31:46Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62760c1cac87d8436dd446dd60624b89834b6e12",
          "message": "Throw exception where necessary",
          "committedDate": "2021-10-11T18:48:31Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm looking at the last test failure, and it seems to be for a condition like:\r\n('a'=='a')==a\r\n\r\nThe first part of that evaluates fine, but the second part doesn't evaluate and is supposed to throw an \"improperly constructed\" exception.\r\n\r\nThis change skips over evaluating the second properly because it recognizes it as a non-bool and says they aren't equal. I can change it to maintain exact behavior of what we had before, but this doesn't seem particularly worse to me. Thoughts?",
        "createdAt": "2021-09-17T17:22:42Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> This change skips over evaluating the second properly because it recognizes it as a non-bool and says they aren't equal. \r\n\r\nIt'll be harder to get this PR in if it's meant for perf but we've changed something observable to customers (outside of faster builds).\r\n\r\nWhat if we consider this PR a perf improvement _and_ modify it a bit for https://github.com/dotnet/msbuild/issues/6277? It sounds like this PR could set the stage for that other issue.",
        "createdAt": "2021-09-17T17:59:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/12969783/135913293-8e331d07-59b2-479f-a26d-da34e4ae892f.png)\r\n\r\nI tried putting in the \"throw error\" commit (which I think should resolve the error problem), and although I only ran a few tests, it was _faster_ than without it. It doesn't make sense to me, since it should be defaulting to a string comparison more often, but \u00af\\\\_(\u30c4)_/\u00af It's hard to argue with both more correct and faster.",
        "createdAt": "2021-10-04T19:36:37Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't know if there are other cases similar to MSBuildToolsVersion. I would guess not, at a glance. Maybe make this:\r\n```suggestion\r\n                double? rightNumericValue = RightChild.TryNumericEvaluate(state);\r\n                if (rightNumericValue is not null)\r\n                {\r\n                    return Compare(leftNumericValue.Value, rightNumericValue);\r\n                }\r\n                else if (!LeftChild.DebuggerDisplay.Equals(\"$(MSBuildToolsVersion)\")\r\n                {\r\n                    return false;\r\n                }\r\n```",
              "createdAt": "2021-09-17T17:25:53Z",
              "path": "src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs",
              "diffHunk": "@@ -48,36 +48,49 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState\n             // and we know which do, then we already have enough information to evaluate this expression.\n             // That means we don't have to fully expand a condition like \" '@(X)' == '' \" \n             // which is a performance advantage if @(X) is a huge item list.\n-            if (LeftChild.EvaluatesToEmpty(state) || RightChild.EvaluatesToEmpty(state))\n+            bool leftEmpty = LeftChild.EvaluatesToEmpty(state);\n+            bool rightEmpty = RightChild.EvaluatesToEmpty(state);\n+            if (leftEmpty || rightEmpty)\n             {\n                 UpdateConditionedProperties(state);\n \n-                return Compare(LeftChild.EvaluatesToEmpty(state), RightChild.EvaluatesToEmpty(state));\n+                return Compare(leftEmpty, rightEmpty);\n             }\n \n-            if (LeftChild.CanNumericEvaluate(state) && RightChild.CanNumericEvaluate(state))\n+            double? leftNumericValue = LeftChild.TryNumericEvaluate(state);\n+            if (leftNumericValue is not null)\n             {\n-                return Compare(LeftChild.NumericEvaluate(state), RightChild.NumericEvaluate(state));\n+                // The left child evaluating to a number and the right child not evaluating to a number\n+                // is insufficient to say they are not equal because $(MSBuildToolsVersion) evaluates to\n+                // the string \"Current\" most of the time but when doing numeric comparisons, is treated\n+                // as a version and returns \"17.0\" (or whatever the current tools version is). This means\n+                // that if '$(MSBuildToolsVersion)' is \"equal\" to BOTH '17.0' and 'Current' (if 'Current'\n+                // is 17.0).\n+                double? rightNumericValue = RightChild.TryNumericEvaluate(state);\n+                if (rightNumericValue is not null)\n+                {\n+                    return Compare(leftNumericValue.Value, rightNumericValue);\n+                }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I wonder if you can use the conventional Try* pattern here for a more readable (my opinion) code.\r\n\r\n```suggestion\r\n            if (!TryConvertDecimalOrHexToDouble(number, out double returnValue))\r\n```\r\n\r\nSame for all the `TryConvert*` methods you're introducing.",
              "createdAt": "2021-09-20T14:06:27Z",
              "path": "src/Shared/ConversionUtilities.cs",
              "diffHunk": "@@ -123,30 +136,43 @@ internal static double ConvertHexToDouble(string number)\n         /// </summary>\n         internal static double ConvertDecimalOrHexToDouble(string number)\n         {\n-            if (ConversionUtilities.ValidDecimalNumber(number))\n+            double? returnValue = TryConvertDecimalOrHexToDouble(number);\n+            if (returnValue is null)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Maybe use a `switch`? And/or comment, the last `else` block is especially hard to understand.\r\n\r\n```suggestion\r\n                    switch (_value.Length)\r\n                    {\r\n                        case 0: _cachedExpandedValue = String.Empty; return true;\r\n                        case 1:\r\n                        case 2: _cachedExpandedValue = _value; return false;\r\n                        default:\r\n                        {\r\n                            if (_value[1] != '(' || _value[_value.Length - 1] != ')' || (_value[0] != '$' && _value[0] != '%' && _value[0] != '@'))\r\n                            {\r\n                                // This isn't just a property, item, or metadata value, and it isn't empty.\r\n                                return false;\r\n                            }                        \r\n                        }\r\n                    }\r\n```",
              "createdAt": "2021-09-20T14:17:35Z",
              "path": "src/Build/Evaluation/Conditionals/StringExpressionNode.cs",
              "diffHunk": "@@ -98,6 +126,25 @@ internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationS\n             {\n                 if (_expandable)\n                 {\n+                    if (_value.Length > 2)\n+                    {\n+                        if (_value[1] != '(' || _value[_value.Length - 1] != ')' || (_value[0] != '$' && _value[0] != '%' && _value[0] != '@'))\n+                        {\n+                            // This isn't just a property, item, or metadata value, and it isn't empty.\n+                            return false;\n+                        }\n+                    }\n+                    else if (_value.Length == 0)\n+                    {\n+                        _cachedExpandedValue = String.Empty;\n+                        return true;\n+                    }\n+                    else\n+                    {\n+                        _cachedExpandedValue = _value;\n+                        return false;\n+                    }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sounds good! The 1/2 case is for if it's nonempty but not long enough to have @/$/%, (, and ), so it has some characters that stay as they are. I can add a comment to make that clearer.",
              "createdAt": "2021-09-20T14:42:11Z",
              "path": "src/Build/Evaluation/Conditionals/StringExpressionNode.cs",
              "diffHunk": "@@ -98,6 +126,25 @@ internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationS\n             {\n                 if (_expandable)\n                 {\n+                    if (_value.Length > 2)\n+                    {\n+                        if (_value[1] != '(' || _value[_value.Length - 1] != ')' || (_value[0] != '$' && _value[0] != '%' && _value[0] != '@'))\n+                        {\n+                            // This isn't just a property, item, or metadata value, and it isn't empty.\n+                            return false;\n+                        }\n+                    }\n+                    else if (_value.Length == 0)\n+                    {\n+                        _cachedExpandedValue = String.Empty;\n+                        return true;\n+                    }\n+                    else\n+                    {\n+                        _cachedExpandedValue = _value;\n+                        return false;\n+                    }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I'd check this in the caller to avoid the asymmetry. Should be easy if you switch to the `bool Try(.., out value)` pattern suggested in my other comment.",
              "createdAt": "2021-09-20T14:30:42Z",
              "path": "src/Build/Evaluation/Conditionals/NotEqualExpressionNode.cs",
              "diffHunk": "@@ -15,17 +15,17 @@ internal sealed class NotEqualExpressionNode : MultipleComparisonNode\n         /// <summary>\n         /// Compare numbers\n         /// </summary>\n-        protected override bool Compare(double left, double right)\n+        protected override bool Compare(double left, double? right)\n         {\n-            return left != right;\n+            return right is null || left != right.Value;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ideally we should avoid abbreviations, so `startIndex` would be better in my opinion",
              "createdAt": "2021-10-11T01:39:06Z",
              "path": "src/Build/Evaluation/ExpressionShredder.cs",
              "diffHunk": "@@ -110,12 +110,14 @@ internal static List<ItemExpressionCapture> GetReferencedItemExpressions(string\n         {\n             List<ItemExpressionCapture> subExpressions = null;\n \n-            if (expression.IndexOf('@') < 0)\n+            int startInd = expression.IndexOf('@', start, end - start);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I suspect it's totally irrelevant here, but this set off my nano-optimization sense. I suspect that if this were a critically hot loop, and depending on input characteristics, you might observe a speedup with this reordering:\r\n\r\n```suggestion\r\n                            if (_value[1] != '(' || (_value[0] != '$' && _value[0] != '%' && _value[0] != '@') || _value[_value.Length - 1] != ')')\r\n```\r\n\r\nFor a long `_value` the CPU might have to fault in the memory for the end of the string when accessing it, but we're guaranteed that the second character of the string was loaded at the same time as the first, so this can avoid cache misses.\r\n\r\nOur strings are usually short so this probably won't generally matter, and even if it did it probably wouldn't matter much. But I know this kind of thing is up your alley so I figured I'd mention it :)",
              "createdAt": "2021-10-11T14:12:00Z",
              "path": "src/Build/Evaluation/Conditionals/StringExpressionNode.cs",
              "diffHunk": "@@ -98,6 +97,25 @@ internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationS\n             {\n                 if (_expandable)\n                 {\n+                    switch (_value.Length)\n+                    {\n+                        case 0:\n+                            _cachedExpandedValue = String.Empty;\n+                            return true;\n+                        // If the length is 1 or 2, it can't possibly be a property, item, or metadata, and it isn't empty.\n+                        case 1:\n+                        case 2:\n+                            _cachedExpandedValue = _value;\n+                            return false;\n+                        default:\n+                            if (_value[1] != '(' || _value[_value.Length - 1] != ')' || (_value[0] != '$' && _value[0] != '%' && _value[0] != '@'))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nice comment \ud83d\udc4d\ud83c\udffb",
              "createdAt": "2021-10-11T14:14:08Z",
              "path": "src/Build/Evaluation/Conditionals/MultipleComparisonExpressionNode.cs",
              "diffHunk": "@@ -48,36 +48,47 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState\n             // and we know which do, then we already have enough information to evaluate this expression.\n             // That means we don't have to fully expand a condition like \" '@(X)' == '' \" \n             // which is a performance advantage if @(X) is a huge item list.\n-            if (LeftChild.EvaluatesToEmpty(state) || RightChild.EvaluatesToEmpty(state))\n+            bool leftEmpty = LeftChild.EvaluatesToEmpty(state);\n+            bool rightEmpty = RightChild.EvaluatesToEmpty(state);\n+            if (leftEmpty || rightEmpty)\n             {\n                 UpdateConditionedProperties(state);\n \n-                return Compare(LeftChild.EvaluatesToEmpty(state), RightChild.EvaluatesToEmpty(state));\n+                return Compare(leftEmpty, rightEmpty);\n             }\n \n-            if (LeftChild.CanNumericEvaluate(state) && RightChild.CanNumericEvaluate(state))\n+            if (LeftChild.TryNumericEvaluate(state, out double leftNumericValue))\n             {\n-                return Compare(LeftChild.NumericEvaluate(state), RightChild.NumericEvaluate(state));\n+                // The left child evaluating to a number and the right child not evaluating to a number\n+                // is insufficient to say they are not equal because $(MSBuildToolsVersion) evaluates to\n+                // the string \"Current\" most of the time but when doing numeric comparisons, is treated\n+                // as a version and returns \"17.0\" (or whatever the current tools version is). This means\n+                // that if '$(MSBuildToolsVersion)' is \"equal\" to BOTH '17.0' and 'Current' (if 'Current'\n+                // is 17.0).",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should `NumericEvaluate` be reimplemented in terms of `TryNumericEvaluate` to reduce code duplication?",
              "createdAt": "2021-10-11T14:20:29Z",
              "path": "src/Build/Evaluation/Conditionals/StringExpressionNode.cs",
              "diffHunk": "@@ -84,6 +84,37 @@ internal override bool CanVersionEvaluate(ConditionEvaluator.IConditionEvaluatio\n             return Version.TryParse(GetExpandedValue(state), out _);\n         }\n \n+        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result)\n+        {\n+            return ConversionUtilities.TryConvertStringToBool(GetExpandedValue(state), out result);\n+        }\n+\n+        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result)\n+        {\n+            if (ShouldBeTreatedAsVisualStudioVersion(state))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Or alternately should we entirely remove the non-`Try` versions?",
              "createdAt": "2021-10-11T14:20:50Z",
              "path": "src/Build/Evaluation/Conditionals/StringExpressionNode.cs",
              "diffHunk": "@@ -84,6 +84,37 @@ internal override bool CanVersionEvaluate(ConditionEvaluator.IConditionEvaluatio\n             return Version.TryParse(GetExpandedValue(state), out _);\n         }\n \n+        internal override bool TryBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state, out bool result)\n+        {\n+            return ConversionUtilities.TryConvertStringToBool(GetExpandedValue(state), out result);\n+        }\n+\n+        internal override bool TryNumericEvaluate(ConditionEvaluator.IConditionEvaluationState state, out double result)\n+        {\n+            if (ShouldBeTreatedAsVisualStudioVersion(state))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (!LeftChild.TryBoolEvaluate(state, out bool boolValue))\r\n            {\r\n                ProjectErrorUtilities.ThrowInvalidProject\r\n                         state.ElementLocation,\r\n                         \"ExpressionDoesNotEvaluateToBoolean\",\r\n                         LeftChild.GetUnexpandedValue(state),\r\n                         LeftChild.GetExpandedValue(state),\r\n                         state.Condition);\r\n            }\r\n```\r\n\r\nto avoid the `GetUnexpandedValue()` and `GetExpandedValue()` calls in the happy case, as discussed.",
              "createdAt": "2021-10-22T12:34:06Z",
              "path": "src/Build/Evaluation/Conditionals/NotExpressionNode.cs",
              "diffHunk": "@@ -17,12 +18,14 @@ internal sealed class NotExpressionNode : OperatorExpressionNode\n         /// </summary>\n         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n         {\n-            return !LeftChild.BoolEvaluate(state);\n-        }\n-\n-        internal override bool CanBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n-        {\n-            return LeftChild.CanBoolEvaluate(state);\n+            ProjectErrorUtilities.VerifyThrowInvalidProject\n+                    (LeftChild.TryBoolEvaluate(state, out bool boolValue),\n+                     state.ElementLocation,\n+                     \"ExpressionDoesNotEvaluateToBoolean\",\n+                     LeftChild.GetUnexpandedValue(state),\n+                     LeftChild.GetExpandedValue(state),\n+                     state.Condition);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Just finished pushing the VerifyThrow --> Throw change in the other PR.",
              "createdAt": "2021-10-25T16:23:17Z",
              "path": "src/Build/Evaluation/Conditionals/NotExpressionNode.cs",
              "diffHunk": "@@ -17,12 +18,14 @@ internal sealed class NotExpressionNode : OperatorExpressionNode\n         /// </summary>\n         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n         {\n-            return !LeftChild.BoolEvaluate(state);\n-        }\n-\n-        internal override bool CanBoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n-        {\n-            return LeftChild.CanBoolEvaluate(state);\n+            ProjectErrorUtilities.VerifyThrowInvalidProject\n+                    (LeftChild.TryBoolEvaluate(state, out bool boolValue),\n+                     state.ElementLocation,\n+                     \"ExpressionDoesNotEvaluateToBoolean\",\n+                     LeftChild.GetUnexpandedValue(state),\n+                     LeftChild.GetExpandedValue(state),\n+                     state.Condition);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also probably worth optimizing by not making these calls in the happy case.",
              "createdAt": "2021-10-22T12:39:02Z",
              "path": "src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs",
              "diffHunk": "@@ -38,46 +38,29 @@ internal abstract class NumericComparisonExpressionNode : OperatorExpressionNode\n         /// </summary>\n         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n         {\n-            bool isLeftNum = LeftChild.CanNumericEvaluate(state);\n-            bool isLeftVersion = LeftChild.CanVersionEvaluate(state);\n-            bool isRightNum = RightChild.CanNumericEvaluate(state);\n-            bool isRightVersion = RightChild.CanVersionEvaluate(state);\n-            bool isNumeric = isLeftNum && isRightNum;\n-            bool isVersion = isLeftVersion && isRightVersion;\n-            bool isValidComparison = isNumeric || isVersion || (isLeftNum && isRightVersion) || (isLeftVersion && isRightNum);\n+            bool isLeftNum = LeftChild.TryNumericEvaluate(state, out double leftNum);\n+            bool isLeftVersion = LeftChild.TryVersionEvaluate(state, out Version leftVersion);\n+            bool isRightNum = RightChild.TryNumericEvaluate(state, out double rightNum);\n+            bool isRightVersion = RightChild.TryVersionEvaluate(state, out Version rightVersion);\n \n             ProjectErrorUtilities.VerifyThrowInvalidProject\n-                (isValidComparison,\n+                ((isLeftNum || isLeftVersion) && (isRightNum || isRightVersion),\n                  state.ElementLocation,\n                 \"ComparisonOnNonNumericExpression\",\n                  state.Condition,\n                  /* helpfully display unexpanded token and expanded result in error message */\n-                 LeftChild.CanNumericEvaluate(state) ? RightChild.GetUnexpandedValue(state) : LeftChild.GetUnexpandedValue(state),\n-                 LeftChild.CanNumericEvaluate(state) ? RightChild.GetExpandedValue(state) : LeftChild.GetExpandedValue(state));\n+                 isLeftNum ? RightChild.GetUnexpandedValue(state) : LeftChild.GetUnexpandedValue(state),\n+                 isLeftNum ? RightChild.GetExpandedValue(state) : LeftChild.GetExpandedValue(state));",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These calls can be avoided in the happy case.",
              "createdAt": "2021-10-22T12:43:49Z",
              "path": "src/Build/Evaluation/Conditionals/OrExpressionNode.cs",
              "diffHunk": "@@ -19,29 +19,29 @@ internal sealed class OrExpressionNode : OperatorExpressionNode\n         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n         {\n             ProjectErrorUtilities.VerifyThrowInvalidProject\n-                    (LeftChild.CanBoolEvaluate(state),\n+                    (LeftChild.TryBoolEvaluate(state, out bool leftBool),\n                      state.ElementLocation,\n                      \"ExpressionDoesNotEvaluateToBoolean\",\n                      LeftChild.GetUnexpandedValue(state),\n                      LeftChild.GetExpandedValue(state),",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These calls can be avoided in the happy case.",
              "createdAt": "2021-10-22T12:44:29Z",
              "path": "src/Build/Evaluation/Conditionals/OrExpressionNode.cs",
              "diffHunk": "@@ -19,29 +19,29 @@ internal sealed class OrExpressionNode : OperatorExpressionNode\n         internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState state)\n         {\n             ProjectErrorUtilities.VerifyThrowInvalidProject\n-                    (LeftChild.CanBoolEvaluate(state),\n+                    (LeftChild.TryBoolEvaluate(state, out bool leftBool),\n                      state.ElementLocation,\n                      \"ExpressionDoesNotEvaluateToBoolean\",\n                      LeftChild.GetUnexpandedValue(state),\n                      LeftChild.GetExpandedValue(state),\n                      state.Condition);\n \n-            if (LeftChild.BoolEvaluate(state))\n+            if (leftBool)\n             {\n                 // Short circuit\n                 return true;\n             }\n             else\n             {\n                 ProjectErrorUtilities.VerifyThrowInvalidProject\n-                    (RightChild.CanBoolEvaluate(state),\n+                    (RightChild.TryBoolEvaluate(state, out bool rightBool),\n                      state.ElementLocation,\n                      \"ExpressionDoesNotEvaluateToBoolean\",\n                      RightChild.GetUnexpandedValue(state),\n                      RightChild.GetExpandedValue(state),",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}