{
  "number": 11000,
  "title": "Support custom culture in RAR",
  "body": "Fixes #10536\r\nContributes to https://github.com/dotnet/msbuild/issues/10996\r\n\r\n### Context\r\nCustom culture on EmbeddedResource items is supported by `AssignTask` (from https://github.com/dotnet/msbuild/pull/10026), but it's then ignored by RAR task (and CreateManifestResourceName as well) \r\n\r\n### Changes Made\r\nWe are no more checking the recoginzed culture against the known list. Putting this behind changewave - as it has pottential to break esoteric scenarios of binaries with .resource.dll existing in subdirs, but actually not being a satelite assemblies\r\n\r\n\r\n### Testing\r\nManual testing on a scenario from the bug\r\nTailored tests added in https://github.com/dotnet/msbuild/pull/11023 (will be uncommented after merging this PR)\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-19T18:44:39Z",
  "updatedAt": "2025-04-25T21:01:00Z",
  "closedAt": "2024-11-28T15:39:37Z",
  "mergedAt": "2024-11-28T15:39:37Z",
  "additions": 263,
  "deletions": 37,
  "changedFiles": 22,
  "headRefName": "proto/custom-culture",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fdd00c28e580cf342a3d3c4770e08bb59c4ff724",
          "message": "Support custom culture",
          "committedDate": "2024-11-19T18:40:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ab881f8936e9274ebf45d97db72770488568187",
          "message": "Add ChangeWave info",
          "committedDate": "2024-11-21T11:30:10Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55d15fc9d09a6973ba7a64860cb15b7f6836efcf",
          "message": "Warn on unintended culture overwrite",
          "committedDate": "2024-11-21T14:05:40Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ef8076ec6a5090ee2414e3963626a818347eb090",
          "message": "Fix the warning call",
          "committedDate": "2024-11-25T11:19:42Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e9a51199c0ddb26bb53b8c6820df5be88411cbe",
          "message": "Merge branch 'main' into proto/custom-culture",
          "committedDate": "2024-11-27T15:58:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c87f3e6f1193f9ed4efd2756a6ff7fafc2679ed9",
          "message": "Add and fix unittests",
          "committedDate": "2024-11-28T11:02:23Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "662efa053efa3572925e0a8af45ca3f772063653",
          "message": "Apply PR comments",
          "committedDate": "2024-11-28T11:08:09Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "For changes featured in ChangeWaves please update the [changewave doc](https://github.com/dotnet/msbuild/blob/8f6b8ad0ace90c777c66711c907227fcfb6f2efe/documentation/wiki/ChangeWaves.md).",
        "createdAt": "2024-11-20T10:08:36Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "This code seems to be deployed with MSBuild version 17.13.19+0d9f5a35a for .NET Framework. Why isn't the https://learn.microsoft.com/en-us/visualstudio/msbuild/change-waves?view=vs-2022 document up to date with the commits in this PR?",
        "createdAt": "2025-04-25T21:00:58Z",
        "author": {
          "login": "jwoodward10"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "So after the change wave is rotated out, we can discard this if altogether and execute unconditionally?",
              "createdAt": "2024-11-26T09:37:54Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -971,7 +971,8 @@ private void FindSatellites(\n                     // Is there a candidate satellite in that folder?\n                     string cultureName = Path.GetFileName(subDirectory);\n \n-                    if (CultureInfoCache.IsValidCultureString(cultureName))\n+                    // Custom or unknown cultures can be met as well\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14) || CultureInfoCache.IsValidCultureString(cultureName))",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Exactly.\r\nWhenever removing stale changewaves, it's expected to remove conditionality that becames peremanent (including  removing code that becames unreachable - not a case here though)",
              "createdAt": "2024-11-26T09:57:19Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -971,7 +971,8 @@ private void FindSatellites(\n                     // Is there a candidate satellite in that folder?\n                     string cultureName = Path.GetFileName(subDirectory);\n \n-                    if (CultureInfoCache.IsValidCultureString(cultureName))\n+                    // Custom or unknown cultures can be met as well\n+                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14) || CultureInfoCache.IsValidCultureString(cultureName))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't see any collection in the file changes. What is this used for please?",
              "createdAt": "2024-11-26T09:46:52Z",
              "path": "src/Tasks/AssignCulture.cs",
              "diffHunk": "@@ -3,6 +3,7 @@\n \n using System;\n using System.Collections.Generic;\n+using Microsoft.Build.Collections;",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The `MSBuildNameIgnoreCaseComparer` added is defined there",
              "createdAt": "2024-11-26T09:57:59Z",
              "path": "src/Tasks/AssignCulture.cs",
              "diffHunk": "@@ -3,6 +3,7 @@\n \n using System;\n using System.Collections.Generic;\n+using Microsoft.Build.Collections;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this `if (!string.IsNullOrEmpty(culture))` being double checked has confused me somewhat, because if !string.IsNullOrEmpty(culture) evaluates to false, we go to the else branch and then evaluate it again.\r\nthis on the first read was looked like \"we're changing the behavior without change wave\".\r\nAfter a second read it makes sense and is fine. Still slightly confusing.",
              "createdAt": "2024-11-26T10:43:40Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -101,12 +101,25 @@ internal static string CreateManifestNameImpl(\n             }\n \n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n-            Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+            Culture.ItemCultureInfo info;\n \n-            // If the item has a culture override, respect that.\n-            if (!string.IsNullOrEmpty(culture))\n+            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n             {\n-                info.culture = culture;\n+                info = new Culture.ItemCultureInfo()\n+                {\n+                    culture = culture,\n+                    cultureNeutralFilename =\n+                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase)\n+                };\n+            }\n+            else\n+            {\n+                info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+                // If the item has a culture override, respect that.\n+                if (!string.IsNullOrEmpty(culture))",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Added clarifying comment - pointing out the changewave",
              "createdAt": "2024-11-28T11:03:19Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -101,12 +101,25 @@ internal static string CreateManifestNameImpl(\n             }\n \n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n-            Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+            Culture.ItemCultureInfo info;\n \n-            // If the item has a culture override, respect that.\n-            if (!string.IsNullOrEmpty(culture))\n+            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n             {\n-                info.culture = culture;\n+                info = new Culture.ItemCultureInfo()\n+                {\n+                    culture = culture,\n+                    cultureNeutralFilename =\n+                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase)\n+                };\n+            }\n+            else\n+            {\n+                info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+                // If the item has a culture override, respect that.\n+                if (!string.IsNullOrEmpty(culture))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "it should be under 17.14",
              "createdAt": "2024-11-26T15:48:12Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -33,6 +33,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [Add ParameterName and PropertyName to TaskParameterEventArgs](https://github.com/dotnet/msbuild/pull/10130)\n - [Emit eval props if requested by any sink](https://github.com/dotnet/msbuild/pull/10243)\n - [Load Microsoft.DotNet.MSBuildSdkResolver into default load context (MSBuild.exe only)](https://github.com/dotnet/msbuild/pull/10603)\n+- [Support custom culture in RAR](https://github.com/dotnet/msbuild/pull/11000)",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Thanks!\r\nMoved",
              "createdAt": "2024-11-28T11:04:37Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -33,6 +33,7 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n - [Add ParameterName and PropertyName to TaskParameterEventArgs](https://github.com/dotnet/msbuild/pull/10130)\n - [Emit eval props if requested by any sink](https://github.com/dotnet/msbuild/pull/10243)\n - [Load Microsoft.DotNet.MSBuildSdkResolver into default load context (MSBuild.exe only)](https://github.com/dotnet/msbuild/pull/10603)\n+- [Support custom culture in RAR](https://github.com/dotnet/msbuild/pull/11000)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        int lastOccurrenceIndex = fromString.LastIndexOf(substring, comparison);\r\n```\r\n?",
              "createdAt": "2024-11-26T15:50:27Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -31,4 +31,24 @@ internal static string GenerateRandomString(int length)\n         string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');\n         return randomBase64String.Substring(0, length);\n     }\n+\n+    /// <summary>\n+    /// Removes last occurence of <paramref name=\"substring\"/> from <paramref name=\"fromString\"/>, if present.\n+    /// </summary>\n+    /// <param name=\"fromString\">String to be altered.</param>\n+    /// <param name=\"substring\">String to be removed.</param>\n+    /// <param name=\"comparison\">The comparison to use for finding.</param>\n+    /// <returns>The original string (if no occurrences found) or a new string, with last instance of <paramref name=\"substring\"/> removed.</returns>\n+    internal static string RemoveLastInstanceOf(this string fromString, string substring, StringComparison comparison = StringComparison.Ordinal)\n+    {\n+        int lastOccurrenceIndex = fromString.LastIndexOf(substring, StringComparison.Ordinal);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "applied",
              "createdAt": "2024-11-28T11:05:19Z",
              "path": "src/Framework/StringUtils.cs",
              "diffHunk": "@@ -31,4 +31,24 @@ internal static string GenerateRandomString(int length)\n         string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');\n         return randomBase64String.Substring(0, length);\n     }\n+\n+    /// <summary>\n+    /// Removes last occurence of <paramref name=\"substring\"/> from <paramref name=\"fromString\"/>, if present.\n+    /// </summary>\n+    /// <param name=\"fromString\">String to be altered.</param>\n+    /// <param name=\"substring\">String to be removed.</param>\n+    /// <param name=\"comparison\">The comparison to use for finding.</param>\n+    /// <returns>The original string (if no occurrences found) or a new string, with last instance of <paramref name=\"substring\"/> removed.</returns>\n+    internal static string RemoveLastInstanceOf(this string fromString, string substring, StringComparison comparison = StringComparison.Ordinal)\n+    {\n+        int lastOccurrenceIndex = fromString.LastIndexOf(substring, StringComparison.Ordinal);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: use `ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14` check first in this statement because its cheaper",
              "createdAt": "2024-11-26T15:53:28Z",
              "path": "src/Tasks/AssignCulture.cs",
              "diffHunk": "@@ -158,6 +159,15 @@ public override bool Execute()\n                             // https://github.com/dotnet/msbuild/issues/3064\n                             ConversionUtilities.ValidBooleanFalse(AssignedFiles[i].GetMetadata(ItemMetadataNames.withCulture)));\n \n+                        // The culture was explicitly specified, but not opted in via 'RespectAlreadyAssignedItemCulture' and different will be used\n+                        if (!string.IsNullOrEmpty(existingCulture) &&\n+                            !MSBuildNameIgnoreCaseComparer.Default.Equals(existingCulture, info.culture) &&\n+                            ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "why do we need this line?\r\n```info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);```",
              "createdAt": "2024-11-26T16:04:46Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -101,12 +101,25 @@ internal static string CreateManifestNameImpl(\n             }\n \n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n-            Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+            Culture.ItemCultureInfo info;\n \n-            // If the item has a culture override, respect that.\n-            if (!string.IsNullOrEmpty(culture))\n+            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n             {\n-                info.culture = culture;\n+                info = new Culture.ItemCultureInfo()\n+                {\n+                    culture = culture,\n+                    cultureNeutralFilename =\n+                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase)\n+                };\n+            }\n+            else\n+            {\n+                info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "It's the original behavior of this method - so needed when changewave is opted out.\r\n\r\nAlso - if no explicit culture is specified - we still should try to infer it",
              "createdAt": "2024-11-28T11:07:42Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -101,12 +101,25 @@ internal static string CreateManifestNameImpl(\n             }\n \n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n-            Culture.ItemCultureInfo info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);\n+            Culture.ItemCultureInfo info;\n \n-            // If the item has a culture override, respect that.\n-            if (!string.IsNullOrEmpty(culture))\n+            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n             {\n-                info.culture = culture;\n+                info = new Culture.ItemCultureInfo()\n+                {\n+                    culture = culture,\n+                    cultureNeutralFilename =\n+                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase)\n+                };\n+            }\n+            else\n+            {\n+                info = Culture.GetItemCultureInfo(embeddedFileName, dependentUponFileName, treatAsCultureNeutral);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}