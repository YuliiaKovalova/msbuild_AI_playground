{
  "number": 7308,
  "title": "Infer taskhost needed Fixes #6357",
  "body": "Fixes #6357\r\n\r\n### Context\r\nIf the user makes a 32-bit task and doesn't specify that in the using task and also doesn't explicitly request a task host, they get a confusing message about not being able to load some file or assembly when building with 64-bit MSBuild. Same is true for the reverse situation.\r\n\r\n### Changes Made\r\nCurrently, it seems to correct identify MSBuild's bitness and that of a task and scrapes the information appropriately. It makes a task host that also infers that it should not load the assembly fully, which causes an issue.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nBefore I investigate the issue I mentioned in Changes Made, I thought I should check the scope of this issue. Thoughts on just sending a better error message when I see that (smaller, easier change) versus pushing forward on automatically \"fixing\" it for the user?",
  "state": "CLOSED",
  "createdAt": "2022-01-20T19:32:55Z",
  "updatedAt": "2022-07-18T00:47:36Z",
  "closedAt": "2022-07-18T00:47:36Z",
  "mergedAt": null,
  "additions": 995,
  "deletions": 239,
  "changedFiles": 37,
  "headRefName": "infer-taskhost-needed",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "88c5b5b85ac04467c94a4cafa9db4b8a67f36008",
          "message": "Create TypeInformation object and pass it around\n\nReplaces LoadedType for cases when we don't actually have a LoadedType. Loading the type requires loading (and locking) the assembly.",
          "committedDate": "2021-12-06T19:46:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a7857cddd70efc5eb3b05a439b76d08519e33f1",
          "message": "Find first five",
          "committedDate": "2021-12-06T23:52:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0a7f422fb2cd661adf426041b0d42970eb1c78a",
          "message": "Complete (but incorrect) version",
          "committedDate": "2021-12-08T00:40:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b5c180e9baddc541a36ad7ce3bad194ae4cce30d",
          "message": "Checkpoint",
          "committedDate": "2021-12-21T23:04:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c379772eff10b830a62df51f367a32cc0e771721",
          "message": "Next checkpoint",
          "committedDate": "2021-12-23T01:04:13Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2682e4d484a339691377450491682b4521681225",
          "message": "Cache TypeInformation from SRM",
          "committedDate": "2021-12-23T22:25:13Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8b1414ac16d547662cfa4924d49caaf77ffbdbf",
          "message": "Find path",
          "committedDate": "2021-12-27T19:32:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5061c0568239afebb5f6b6704d1c914b64a4b966",
          "message": "Unwrap \"Object Handle\"",
          "committedDate": "2021-12-27T19:32:46Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbaac4d3394db2b5442792acc5a81fc96f226909",
          "message": "Refactor",
          "committedDate": "2021-12-27T19:32:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8df77ccdcd444ca358db6abbd16d54e1e3bb6dcd",
          "message": "Most recent changes",
          "committedDate": "2021-12-28T17:37:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e0a9599f7a66329b944659ea3af460931af22631",
          "message": "Cleanup",
          "committedDate": "2021-12-29T17:36:08Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb471b5bce1c8f8f8e06a78da00e1e2be89ef137",
          "message": "Fixes",
          "committedDate": "2021-12-29T17:36:17Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a40d79187ecd8773fd6f615c7f9e9c59c1a970f",
          "message": "Implement task property types",
          "committedDate": "2022-01-06T00:43:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "701af8f1704f96166c21e996c5fe26797c636baf",
          "message": "Fix all but one test",
          "committedDate": "2022-01-12T23:25:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "129ea53c4d27a55670e22182552c4c7329010c3a",
          "message": "One failing test",
          "committedDate": "2022-01-13T21:19:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "827fe2a3e4185996be3bd7323dde5ef45013294f",
          "message": "Little things",
          "committedDate": "2022-01-14T01:27:35Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "548203590fd8fdca324f8e1f21e0786a4f7ef4d4",
          "message": "Merge https://github.com/dotnet/msbuild into taskhost-issue",
          "committedDate": "2022-01-14T01:30:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "caae7368ed084996a1121d9dc7dcc9ecb6b2e4b7",
          "message": "Passed ALL tests!",
          "committedDate": "2022-01-14T01:50:28Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ea6b6ce509495123bdedd5e6b1c2f0fa0338797",
          "message": "Cleanup",
          "committedDate": "2022-01-14T21:57:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2372b028ef001e3b64d3eff2fb44916d8e5733ef",
          "message": "Assert that users should pass a path\n\nWhen they request a task host.",
          "committedDate": "2022-01-18T21:47:00Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5e54de2676aa68012b2f97fadc8704ad060b6239",
          "message": "Allow M.B",
          "committedDate": "2022-01-19T01:01:47Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c80e662ea14d5d7f104cef1f9052356596fee4c6",
          "message": "Add back path finding logic",
          "committedDate": "2022-01-19T01:03:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "973bd00a577d776538c9f198841f26fe3de6161b",
          "message": "Infer task host if wrong arch and sorta fix it",
          "committedDate": "2022-01-20T19:25:07Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1650dc0807e2893a98d4e3482bbbe5793b7ddddf",
          "message": "Works!",
          "committedDate": "2022-01-21T20:18:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "380c097faa19f68949be47ce4ce2f20b009551c0",
          "message": "Add runtime change support",
          "committedDate": "2022-01-27T20:51:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f59a00d1ad50a800efa1d1702a185940d5aea933",
          "message": "Other commit (?)",
          "committedDate": "2022-04-13T21:39:04Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Note that this is based on #7132.",
        "createdAt": "2022-01-20T20:39:49Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Before I investigate the issue I mentioned in Changes Made, I thought I should check the scope of this issue. Thoughts on just sending a better error message when I see that (smaller, easier change) versus pushing forward on automatically \"fixing\" it for the user?\r\n\r\nI would like to pursue the automatic fix because it will smooth the transition, but we could have an intermediate state with a better error.",
        "createdAt": "2022-01-21T14:47:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There's some concern over the increase in size for the new assemblies - how much of an increase are we talking per new supported combination?  If it's small on the order of 5MB per, then that seems like a win. Otherwise we might need to look at the impacts to SDK size overall and prioritize combinations.\r\n\r\n@rainersigwald do you have any insight here?",
        "createdAt": "2022-02-08T23:05:40Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel for this PR there is no size impact; it applies to .NET Framework MSBuild in VS/Build Tools scenarios which all always have 32- and 64-bit `MSBuild.exe` (.NET 4.7.2) and `MSBuildTaskHost.exe` (.NET 3.5).\r\n\r\nSize impact is in #711 and would be on the order of 15MB/runtime environment (based on the recursive size of `C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64` in my dogfood dev17).",
        "createdAt": "2022-02-08T23:12:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I found the same folder and compressed it with Window's built in compression utilities to simulate what the situation would be from the SDK download perspective - it zips to 5.4 MB, which for 2 additional sets of assemblies (x64/x86) is 10.8 MB, and the current SDK for Windows is 188MB shipped, for a total increase of 5.75% increase. That seems acceptable, but I wonder - in the future could MSBuild for the target SDK platform be included in the SDK download, and the various cross-compat assemblies be shipped as an optional workloads?",
        "createdAt": "2022-02-08T23:24:15Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "this is probably missing ARM64?",
              "createdAt": "2022-02-09T19:13:09Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -285,65 +307,370 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly\n \n                 _isDesiredType = typeFilter;\n                 _assemblyLoadInfo = loadInfo;\n-                _typeNameToType = new ConcurrentDictionary<string, Type>(StringComparer.OrdinalIgnoreCase);\n+                _typeNameToTypeInformation = new ConcurrentDictionary<string, TypeInformation>(StringComparer.OrdinalIgnoreCase);\n+                _typeNameToTypeInformationTaskHost = new ConcurrentDictionary<string, TypeInformation>(StringComparer.OrdinalIgnoreCase);\n                 _publicTypeNameToType = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);\n             }\n \n             /// <summary>\n             /// Determine if a given type name is in the assembly or not. Return null if the type is not in the assembly\n             /// </summary>\n-            internal LoadedType GetLoadedTypeByTypeName(string typeName)\n+            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested, out bool taskHostFactoryNeeded)\n             {\n                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));\n \n+                taskHostFactoryNeeded = taskHostFactoryExplicitlyRequested;\n+                if (!taskHostFactoryNeeded && _assemblyLoadInfo.AssemblyFile is not null)\n+                {\n+                    ProcessorArchitecture taskArch = AssemblyName.GetAssemblyName(_assemblyLoadInfo.AssemblyFile).ProcessorArchitecture;\n+                    bool msbuildIs64Bit = RuntimeInformation.ProcessArchitecture == Architecture.X64;\n+                    taskHostFactoryNeeded = msbuildIs64Bit ? Required32Bit(taskArch) : Required64Bit(taskArch);\n+                }\n+\n                 // Only one thread should be doing operations on this instance of the object at a time.\n+                TypeInformation typeInfo = taskHostFactoryNeeded ?\n+                    _typeNameToTypeInformationTaskHost.GetOrAdd(typeName, key => FindTypeInformationUsingSystemReflectionMetadata(typeName)) :\n+                    _typeNameToTypeInformation.GetOrAdd(typeName, key => FindTypeInformationUsingLoadedType(typeName)\n+                    );\n+\n+                return typeInfo;\n+            }\n+\n+            private bool Required32Bit(ProcessorArchitecture arch)\n+            {\n+                return arch == ProcessorArchitecture.X86 || arch == ProcessorArchitecture.Arm;\n+            }\n+\n+            private bool Required64Bit(ProcessorArchitecture arch)\n+            {\n+                return arch == ProcessorArchitecture.IA64 || arch == ProcessorArchitecture.Amd64;",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "For now yes, but it's still a draft \ud83d\ude42",
              "createdAt": "2022-02-14T19:57:30Z",
              "path": "src/Shared/TypeLoader.cs",
              "diffHunk": "@@ -285,65 +307,370 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly\n \n                 _isDesiredType = typeFilter;\n                 _assemblyLoadInfo = loadInfo;\n-                _typeNameToType = new ConcurrentDictionary<string, Type>(StringComparer.OrdinalIgnoreCase);\n+                _typeNameToTypeInformation = new ConcurrentDictionary<string, TypeInformation>(StringComparer.OrdinalIgnoreCase);\n+                _typeNameToTypeInformationTaskHost = new ConcurrentDictionary<string, TypeInformation>(StringComparer.OrdinalIgnoreCase);\n                 _publicTypeNameToType = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);\n             }\n \n             /// <summary>\n             /// Determine if a given type name is in the assembly or not. Return null if the type is not in the assembly\n             /// </summary>\n-            internal LoadedType GetLoadedTypeByTypeName(string typeName)\n+            internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostFactoryExplicitlyRequested, out bool taskHostFactoryNeeded)\n             {\n                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));\n \n+                taskHostFactoryNeeded = taskHostFactoryExplicitlyRequested;\n+                if (!taskHostFactoryNeeded && _assemblyLoadInfo.AssemblyFile is not null)\n+                {\n+                    ProcessorArchitecture taskArch = AssemblyName.GetAssemblyName(_assemblyLoadInfo.AssemblyFile).ProcessorArchitecture;\n+                    bool msbuildIs64Bit = RuntimeInformation.ProcessArchitecture == Architecture.X64;\n+                    taskHostFactoryNeeded = msbuildIs64Bit ? Required32Bit(taskArch) : Required64Bit(taskArch);\n+                }\n+\n                 // Only one thread should be doing operations on this instance of the object at a time.\n+                TypeInformation typeInfo = taskHostFactoryNeeded ?\n+                    _typeNameToTypeInformationTaskHost.GetOrAdd(typeName, key => FindTypeInformationUsingSystemReflectionMetadata(typeName)) :\n+                    _typeNameToTypeInformation.GetOrAdd(typeName, key => FindTypeInformationUsingLoadedType(typeName)\n+                    );\n+\n+                return typeInfo;\n+            }\n+\n+            private bool Required32Bit(ProcessorArchitecture arch)\n+            {\n+                return arch == ProcessorArchitecture.X86 || arch == ProcessorArchitecture.Arm;\n+            }\n+\n+            private bool Required64Bit(ProcessorArchitecture arch)\n+            {\n+                return arch == ProcessorArchitecture.IA64 || arch == ProcessorArchitecture.Amd64;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}