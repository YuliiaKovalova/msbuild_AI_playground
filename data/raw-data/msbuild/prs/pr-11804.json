{
  "number": 11804,
  "title": "Reduce allocations in TaskExecutionHost",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-07T22:18:13Z",
  "updatedAt": "2025-05-13T17:45:14Z",
  "closedAt": "2025-05-13T08:21:37Z",
  "mergedAt": "2025-05-13T08:21:37Z",
  "additions": 20,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/taskExecutionHost",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "326071c3078d75a5fb36558ea17115687b5debd7",
          "message": "Reduce allocations in TaskExecutionHost",
          "committedDate": "2025-05-07T22:17:10Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf381f3905189ccb3da2e388616ba21950931af3",
          "message": "Update TaskExecutionHost.cs\n\nI think this parenthesis was deleted by error.\r\nIf it was a different one, more thorough look will be needed",
          "committedDate": "2025-05-09T12:29:56Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] The code in the different branches for CopyOnWriteDictionary and Dictionary is nearly identical apart from the type check. Consider refactoring the common iteration and escaping logic into a shared helper method or lambda to reduce duplication and improve maintainability.",
              "createdAt": "2025-05-07T22:18:39Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1423,11 +1424,27 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n \n                                     static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(IDictionary customMetadata)\n                                     {\n-                                        foreach (DictionaryEntry de in customMetadata)\n+                                        if (customMetadata is CopyOnWriteDictionary<string> copyOnWriteDictionary)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the penalty for using the interface here please? Is it boxing in this case or something else?\r\n(e.g. from what I read, we use specialized iterations based on type, so I assume there is something to be gained, hence the boxing question)",
              "createdAt": "2025-05-09T12:34:51Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1423,9 +1424,26 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n \n                                     static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(IDictionary customMetadata)\n                                     {\n-                                        foreach (DictionaryEntry de in customMetadata)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The goal here is to avoid boxing the struct enumerator of these collections. In sufficiently hot paths, the allocations can really add up.",
              "createdAt": "2025-05-12T17:24:42Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1423,9 +1424,26 @@ private void GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetN\n \n                                     static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(IDictionary customMetadata)\n                                     {\n-                                        foreach (DictionaryEntry de in customMetadata)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}