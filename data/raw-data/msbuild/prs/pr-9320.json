{
  "number": 9320,
  "title": "AppDomain configuration is serialized without using BinFmt",
  "body": "Fixes #8922\r\n\r\n### Context\r\nMSBuild uses binary formatter for AppDomainSetup serialization. We can transfer only configuration bytes.\r\n\r\n### Changes Made\r\nByte array representing the configuration is used instead of serialization of the AppDomainSetup type.\r\n\r\n### Testing\r\nNew unit tests are passing.\r\n\r\n### Notes\r\nThe change is behind a 17.10 changewave and ```IsBinaryFormatterSerializationAllowed``` trait.\r\n",
  "state": "MERGED",
  "createdAt": "2023-10-11T11:32:11Z",
  "updatedAt": "2023-10-19T07:38:54Z",
  "closedAt": "2023-10-18T13:49:18Z",
  "mergedAt": "2023-10-18T13:49:18Z",
  "additions": 164,
  "deletions": 4,
  "changedFiles": 6,
  "headRefName": "dev/mipavlik/task-appdomainconfig-serialization",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2f93aea7dda59623279dd1f2020021fe2621fbba",
          "message": "AppDomain configuration is serialized without using BinFmt",
          "committedDate": "2023-10-11T11:29:22Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c4f8cf1722dfcecccaebebd34cde10397f923aac",
          "message": "Added new unit tests. Fixed 'null' bug.",
          "committedDate": "2023-10-17T08:42:52Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ee6aefddbaf9f20511459e2d3f30ae7c8fd7b27",
          "message": "Fix CG alerts caused by RoslynTools.MSBuild 17.7.2 (#9310)\n\nRoslynTools.MSBuild 17.7.2 caused two CG alerts when doing signing validation. dotnet/arcade#14055 and its linked PRs have more context.",
          "committedDate": "2023-10-17T10:48:24Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87b844b7ed4a4c07fb85b4e748451423bdc29e34",
          "message": "Fix policheck error (#9311)\n\nFixes policheck:Error\r\n\r\nChanges Made\r\n\r\nSkip the non en-us locale resource files.\r\nSkip the file that contains the specified entity names in the deprecated folder\r\nChange country to country/region based on https://policheck.microsoft.com/Pages/TermInfo.aspx?LCID=9&TermID=79570\r\n\r\nTesting\r\nTest with MSBuild pipeline build https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8509007&view=logs&j=7d9eef18-6720-5c1f-4d30-89d7b76728e9&t=c5a86041-9185-53e8-42a2-1cadc4486f0d&l=5251. There are no active results now.",
          "committedDate": "2023-10-17T10:48:24Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "64dfc0ce9c25e393abdd7327b5d7dba53e14d697",
          "message": "Mention unification in RAR found-conflicts message (#9226)\n\n* Mention unification in RAR found-conflicts message\r\n\r\nConsider a message like\r\n\r\n```\r\nwarning MSB3277: Found conflicts between different versions of \"System.Runtime.InteropServices.RuntimeInformation\" that could not be resolved.\r\n    There was a conflict between \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n    \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n    References which depend on \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\VisualStudio\\VS17PrevPublic\\Common7\\IDE\\PublicAssemblies\\System.Runtime.InteropServices.RuntimeInformation.dll].\r\n        C:\\VisualStudio\\VS17PrevPublic\\Common7\\IDE\\PublicAssemblies\\System.Runtime.InteropServices.RuntimeInformation.dll\r\n            Project file item includes which caused reference \"C:\\VisualStudio\\VS17PrevPublic\\Common7\\IDE\\PublicAssemblies\\System.Runtime.InteropServices.RuntimeInformation.dll\".\r\n                System.Runtime.InteropServices.RuntimeInformation\r\n    References which depend on \"System.Runtime.InteropServices.RuntimeInformation, Version=4.0.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n        C:\\Users\\user\\.nuget\\packages\\azure.core\\1.25.0\\lib\\net461\\Azure.Core.dll\r\n            Project file item includes which caused reference \"C:\\Users\\user\\.nuget\\packages\\azure.core\\1.25.0\\lib\\net461\\Azure.Core.dll\".\r\n                C:\\Users\\user\\.nuget\\packages\\azure.core\\1.25.0\\lib\\net461\\Azure.Core.dll\r\n                C:\\Users\\user\\.nuget\\packages\\azure.identity\\1.8.0\\lib\\netstandard2.0\\Azure.Identity.dll\r\n                C:\\Users\\user\\.nuget\\packages\\azure.security.keyvault.secrets\\4.4.0\\lib\\netstandard2.0\\Azure.Security.KeyVault.Secrets.dll\r\n                C:\\Users\\user\\.nuget\\packages\\nuget.services.keyvault\\2.111.0\\lib\\net472\\NuGet.Services.KeyVault.dll\r\n                C:\\Users\\user\\.nuget\\packages\\nuget.services.configuration\\2.111.0\\lib\\net472\\NuGet.Services.Configuration.dll\r\n```\r\n\r\nWhat the message _means_ is that the first reference is the winner, and\r\nwhat was chosen there will require unification for all the other\r\nassemblies listed in the second part of the message. But what it says is\r\nthat the list of assemblies in the second part of the message depend on\r\nthe second version, which is not necessarily true--in fact, that's the\r\nlist of  references that _can be unified_ to that version.\r\n\r\nThis isn't a full fix for #4757 but hopefully makes the message a bit\r\nless misleading.\r\n\r\n* Update tests\r\n\r\n* fixup! Update tests",
          "committedDate": "2023-10-17T10:48:25Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7098c57cdbf653e9f501e45a49c4364e91951e79",
          "message": "Correct success for /preprocess /targets builds (#8908)\n\n* Correct success\r\n\r\nThis is not yet a problem but only because neither /preprocess nor /targets are supported for solution files.\r\n\r\nThe root of the problem is if someone chooses to specify both /preprocess and /targets. If /preprocess fails but /targets succeeds, it currently will erroneously display success. This fixes that.\r\n\r\nAs I said, that scenario doesn't currently exist but only because /targets cannot succeed unless /preprocess succeeded, but that is not guaranteed going forward. Notably, if /preprocess is extended to support solution files before /targets is, this will become an issue.\r\n\r\n* Make isTargets not run if !success\r\n\r\n---------\r\n\r\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2023-10-17T10:48:25Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4cb483bb36a2da7c069ea54d255c7febed8f23d",
          "message": "Enable Windows Disabled Drive Enumeration Tests (#9266)\n\nFixes #7330\r\n(plus one subtask of #8329)\r\n\r\nChanges Made\r\nBased on Add ability to create temp mapped drive for integration tests #8366 fixes to enable other Drive enumeration integration tests with a dummy folder in windows\r\nRemove one test data https://github.com/dotnet/msbuild/blob/fecef0fdffe59ba8b0251701a23be48bbd552726/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs#L1010-L1012C45 since there is no warning when inlude is not null and exclude with enumerating wildcards. The related logical code is\r\nmsbuild/src/Build/Utilities/EngineFileUtilities.cs\r\n\r\nLine 339 in fecef0f\r\n\r\n private static void LogDriveEnumerationWarningWithTargetLoggingContext(TargetLoggingContext targetLoggingContext, IElementLocation includeLocation, IElementLocation excludeLocation, bool excludeFileSpecIsEmpty, bool disableExcludeDriveEnumerationWarning, string fileSpec) \r\n. There is no condition satisfied.\r\nAssociate unix Enumeration Tests long time run with issue Unix drive enumeration imports not expanded? #8373",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f79b38f7a857e5e69fa03115d4dcddcf440a34b0",
          "message": "Packages sourcing doc (#8475)\n\nPreliminary design proposal for the Packages Sourcing feature",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4aec098aa569744cf6b811d8710c91c6d086e30e",
          "message": "Catch the illegal argument exception in Net Framework! (#8839)\n\nFixes #8762\r\n\r\nContext\r\nCatch the exceptions when extensionsPathPropValue is null or importExpandedWithDefaultPath is empty.\r\nIn NET Framework, Path.* function also throws exceptions if the path contains invalid characters\r\n\r\nChanges Made\r\nCatch the exception.\r\n\r\nTesting\r\nFallbackImportWithInvalidProjectValue\r\n\r\nNotes",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d374923b78a024d15dc86a9b582fb1c1b916e63f",
          "message": "Remove stale .vsconfig components (#8862)\n\n.NET (Core) stuff is implied by ManagedDesktop now, and we require only\r\n\"some .NET Framework SDK\", so no need to specify explicitly as one will\r\nbe delivered by ManagedDesktop.\r\n\r\nWe do still target .NET Framework 3.5, though . . .",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9de0dd89a1a5065914c00c007d8aafc6a398e205",
          "message": "Update dependencies from https://github.com/dotnet/roslyn build 20231004.4 (#9314)\n\nMicrosoft.Net.Compilers.Toolset\r\n From Version 4.8.0-3.23501.1 -> To Version 4.8.0-3.23504.4\r\n\r\nCo-authored-by: dotnet-maestro[bot] <dotnet-maestro[bot]@users.noreply.github.com>",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56cb905c63b3179f3e2fa406e6e8f34b63e488e3",
          "message": "Re-enable IdenticalSubmissionsShouldCompleteAndNotHangTheBuildOnMissingTargetExceptions (#9253)\n\nFixes #9245\r\n\r\nContext\r\nThe test was disabled to unblock PR CI.\r\n\r\nChanges Made\r\nIncreased the relevant timeout.\r\n\r\nTesting\r\nThe test is reliably passing now.\r\n\r\nNotes\r\nThis turned out to be an issue with the sleep command we use on Windows. In some cases PowerShell can take a super long time to start. I have been able to reproduce locally by enabling Fusion logging. Thread times of the powershell process:\r\n\r\nimage\r\n\r\nWe spend almost 10 seconds just loading assemblies, so the timeout of 10 seconds for the entire build was not enough.\r\n\r\nI don't have a full understanding of the mechanism that slows down PowerShell this much. At this point I'm happy we were able to confirm it's not a product issue, although I'm wondering if there is a better and more light-weight sleep command we could use on Windows instead (e.g. ping 127.0.0.1 -n <seconds>). Reviewers please opine.\r\n\r\nEDIT: In my trace, file system operations block extensively with wdfilter.sys on the stack, so the likely explanation for the issue appearing all of a sudden is a Defender update.",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "48b97b2fba688e8133130899b931f7c1c833245c",
          "message": "Delete ExcludeFromStyleCop (#9247)\n\nContext\r\nThe ExcludeFromStyleCop is not effective anymore. Even if it was, it's not clear why we would want to exclude so many files from style checks.\r\n\r\nChanges Made\r\nDeleted all occurrences of <ExcludeFromStyleCop>true</ExcludeFromStyleCop> from project files.\r\n\r\nTesting\r\nBuild (CLI and VS).",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb02c2cbe2fdf0d116a38304c8859fdf0b6295cf",
          "message": "Make repo buildable with VS 17.8.0 Preview 3.0 (#9319)\n\nAdded IDE0305 to `.editorconfig` as a suggestion.",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98ac0d87a4702856c40b4d2be0ca6a81ea3d8023",
          "message": "Add a job for experimental Framework MSBuild insertion to a pipeline (#9309)\n\nContext\r\nWe need to add an extra job to .exp-insertions.yml pipeline for creating experimental Framework MSBuild.\r\n\r\nChanges Made\r\nPipeline refactored, a job added\r\nFixed bug in deploy script code path for Framework MSBuild\r\nTesting\r\nManual run of the pipeline",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f471b78ab8f8b98b1e5c0a101dcd6fa78aa1013d",
          "message": "Localized file check-in by OneLocBuild Task: Build definition ID 9434: Build ID 8527872 (#9316)\n\n* Localized file check-in by OneLocBuild Task: Build definition ID 9434: Build ID 8509770\r\n\r\n* Localized file check-in by OneLocBuild Task: Build definition ID 9434: Build ID 8514818",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "dotnet bot",
            "email": "dotnet-bot@dotnetfoundation.org"
          }
        }
      },
      {
        "commit": {
          "oid": "8f7335fecf86bb1a3b455f21a532ef8b6c7d52af",
          "message": "Update dependencies from https://github.com/dotnet/roslyn build 20231010.8 (#9333)\n\nMicrosoft.Net.Compilers.Toolset\r\n From Version 4.8.0-3.23504.4 -> To Version 4.8.0-3.23510.8\r\n\r\nCo-authored-by: dotnet-maestro[bot] <dotnet-maestro[bot]@users.noreply.github.com>",
          "committedDate": "2023-10-17T10:48:26Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "619dca4dae7f1ff51ec6260aaef8420dc596bb41",
          "message": "Cleanup: Delete NGen of T (#9263)\n\nContext\r\nThe sole purpose of introducing the type seems to have been silencing a legacy code analyzer rule. The rule does not exist anymore / has not been brought over to Roslyn (dotnet/roslyn-analyzers#722) and it's now hurting performance, if anything. Types like HashSet<int> are part of the mscorlib native image and it's wasteful to duplicate the code in our binaries. The rest is handled by IBC/OptProf.\r\n\r\nChanges Made\r\nDeleted NGen and its uses.\r\n\r\nTesting\r\nExperimental insertion to confirm no regressions.",
          "committedDate": "2023-10-17T10:48:27Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96dd5791ea22632fdf9fe10d12e74f0020301e7e",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild",
          "committedDate": "2023-10-17T10:50:43Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0348063962c80753c176cc3f160cf00c1e904254",
          "message": "Added change wave with checks",
          "committedDate": "2023-10-17T11:11:59Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e69ceb777f44da4cdc8ba25ea2a4843c10180d2",
          "message": "Type member changed to local variable",
          "committedDate": "2023-10-17T12:19:38Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "30f830f738d9ef3fc6150fed66318291b909c638",
          "message": "Update src/Build/BackEnd/Node/NodeConfiguration.cs\n\nCo-authored-by: Ladi Prosek <laprosek@microsoft.com>",
          "committedDate": "2023-10-18T07:52:24Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0df3f80083773c7adf48915754c336de15214401",
          "message": "Update src/Shared/TaskHostConfiguration.cs\n\nCo-authored-by: Ladi Prosek <laprosek@microsoft.com>",
          "committedDate": "2023-10-18T07:52:36Z",
          "author": {
            "name": "MichalPavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f6635ee1d377c14839a4209b8f7d6fa98ae8d0d",
          "message": "Renamed local variable",
          "committedDate": "2023-10-18T10:50:13Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d689c87701b746d454616125eefeacb11f57d40",
          "message": "Added record to change waves docs",
          "committedDate": "2023-10-18T12:34:55Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I guess this change should be reversable by env variable/change wave...",
        "createdAt": "2023-10-11T13:10:30Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> I guess this change should be reversable by env variable/change wave...\r\n\r\nLet's put it behind 17_10 ChangeWave introduced by https://github.com/dotnet/msbuild/pull/9318",
        "createdAt": "2023-10-11T13:13:06Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> The [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.appdomainsetup.getconfigurationbytes?view=netframework-4.8.1) says that `GetConfigurationBytes()` returns null if `SetConfigurationBytes()` has not been called. So it doesn't look like it's a replacement for serialization, unfortunately.\r\n> \r\n> https://dotnetfiddle.net/Zi96aB\r\n\r\n@MichalPavlik - can you look into whether there can be any viable serialization alternative? Alternatively what are all the codepaths that leverage the AppDomainSetup and what feature(s) would be affected (and how) by the lack of transfering of this",
        "createdAt": "2023-10-11T17:55:01Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> The [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.appdomainsetup.getconfigurationbytes?view=netframework-4.8.1) says that `GetConfigurationBytes()` returns null if `SetConfigurationBytes()` has not been called. So it doesn't look like it's a replacement for serialization, unfortunately.\r\n> \r\n> https://dotnetfiddle.net/Zi96aB\r\n\r\n@ladipro - I'll need to look once again once I have some free cycles (or @MichalPavlik  can look in the meantime) - but IIRC from my past (though a very quick and possibly errorneous) investigation - the only place where transfered `AppDomainSetup` was actually used is this:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/TaskLoader.cs#L91-L99\r\n\r\nwhere it uses just the Get/Set ConmfigurationBytes. If that's really the only usage - then serializing the config bytes upfront (whether they have been set or not) should be OK, correct? The other question is if that preexisting code is correct - but we have no complains about the functionality currently.",
        "createdAt": "2023-10-12T09:14:42Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek I believe that the ultimate source of `appDomainSetup` in the code you linked is here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/BackEnd/BuildManager/BuildManager.cs#L2817\r\n\r\nThe Get/SetConfigurationBytes calls are done for completeness but we definitely rely on the rest as well.\r\n\r\nTo hit the relevant code path, build the following project with `MSBUILDNOINPROCNODE=1`:\r\n\r\n```xml\r\n<Project>\r\n  <Target Name='Build'>\r\n    <RegisterAssembly Assemblies=\"nonexistent.dll\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nWith the changes in the PR is fails with\r\n```\r\nerror MSB4061: The \"RegisterAssembly\" task could not be instantiated from \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Object reference not set to an instance of an object.\r\n```",
        "createdAt": "2023-10-12T09:37:35Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Needless to say, we should add the missing test coverage as part of this work.",
        "createdAt": "2023-10-12T09:39:41Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "\r\n100% agree on the need to have the associated codepaths covered by the tests - @MichalPavlik can you please ensure those are added? And then compare results prior and after change?\r\n\r\nI'd like to see what code is consuming the remoted `AppDomainSetup` (to confirm there is any beyond the `TaskLoader` getting the configuration bytes) and ideally what specifically is it accessing. Then we should think about how to extract and transfer such additional state.",
        "createdAt": "2023-10-12T19:56:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> The Get/SetConfigurationBytes calls are done for completeness but we definitely rely on the rest as well.\r\n\r\nI take this back, I couldn't find anything else consuming the `AppDomainSetup` as a whole. The build is failing because we don't always create the `AppDomainSetup` on the receiving side - the bug you just pointed out.\r\n\r\nWhat do you think about refactoring the code a bit so that only the `byte[]` is passed around? This would help both readability (it's clearer what's actually used) and a tiny bit of perf (no need to create an instance of `AppDomainSetup` when the only thing it carries are the configuration bytes).",
        "createdAt": "2023-10-12T21:37:49Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> What do you think about refactoring the code a bit so that only the `byte[]` is passed around? This would help both readability (it's clearer what's actually used) and a tiny bit of perf (no need to create an instance of `AppDomainSetup` when the only thing it carries are the configuration bytes).\r\n\r\nAbsolutely!",
        "createdAt": "2023-10-16T20:39:11Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be executed even if config bytrs are null.\r\n(applies to same code above as well)",
              "createdAt": "2023-10-12T21:14:59Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -458,6 +464,13 @@ internal static INodePacket FactoryForDeserialization(ITranslator translator)\n         {\n             TaskHostConfiguration configuration = new TaskHostConfiguration();\n             configuration.Translate(translator);\n+#if FEATURE_APPDOMAIN\n+            if (configuration._appDomainConfigBytes != null)\n+            {\n+                configuration._appDomainSetup = new AppDomainSetup();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this still needed?\r\nIf yes - how is it used",
              "createdAt": "2023-10-12T21:16:09Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -182,6 +187,7 @@ internal class TaskHostConfiguration : INodePacket\n             _culture = culture;\n             _uiCulture = uiCulture;\n #if FEATURE_APPDOMAIN\n+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();\n             _appDomainSetup = appDomainSetup;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "When you create a new instance of the type (not by deserialization), then we need to set the byte[] for serialization.",
              "createdAt": "2023-10-16T12:51:03Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -182,6 +187,7 @@ internal class TaskHostConfiguration : INodePacket\n             _culture = culture;\n             _uiCulture = uiCulture;\n #if FEATURE_APPDOMAIN\n+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();\n             _appDomainSetup = appDomainSetup;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Sorry - the comment was assigned to wrong line (mobile tiny UX :-)). It was meant for `_appDomainSetup` - that one should not be needed anywhere.",
              "createdAt": "2023-10-16T20:38:04Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -182,6 +187,7 @@ internal class TaskHostConfiguration : INodePacket\n             _culture = culture;\n             _uiCulture = uiCulture;\n #if FEATURE_APPDOMAIN\n+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();\n             _appDomainSetup = appDomainSetup;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I had offline discussion with Ladi. We agreed that extracting config bytes should be done just before the serialization. I modified the code but we need reference to the AppDomainSetup.",
              "createdAt": "2023-10-17T08:50:35Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -182,6 +187,7 @@ internal class TaskHostConfiguration : INodePacket\n             _culture = culture;\n             _uiCulture = uiCulture;\n #if FEATURE_APPDOMAIN\n+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();\n             _appDomainSetup = appDomainSetup;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks unused outside of `Translate`. Can it be a local variable there?",
              "createdAt": "2023-10-17T11:11:49Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -44,6 +44,11 @@ internal class TaskHostConfiguration : INodePacket\n         private CultureInfo _uiCulture = CultureInfo.CurrentUICulture;\n \n #if FEATURE_APPDOMAIN\n+        /// <summary>\n+        /// The app domain configuration bytes sent via RPC.\n+        /// </summary>\n+        private byte[] _appDomainConfigBytes;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sure, it was remnant of the original implementation.",
              "createdAt": "2023-10-17T12:15:49Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -44,6 +44,11 @@ internal class TaskHostConfiguration : INodePacket\n         private CultureInfo _uiCulture = CultureInfo.CurrentUICulture;\n \n #if FEATURE_APPDOMAIN\n+        /// <summary>\n+        /// The app domain configuration bytes sent via RPC.\n+        /// </summary>\n+        private byte[] _appDomainConfigBytes;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks unused outside of `Translate`. Can it be a local variable there?",
              "createdAt": "2023-10-17T11:12:18Z",
              "path": "src/Build/BackEnd/Node/NodeConfiguration.cs",
              "diffHunk": "@@ -28,6 +28,11 @@ internal class NodeConfiguration : INodePacket\n         private BuildParameters _buildParameters;\n \n #if FEATURE_APPDOMAIN\n+        /// <summary>\n+        /// The app domain configuration bytes sent via RPC.\n+        /// </summary>\n+        private byte[] _appDomainConfigBytes;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sure, it was remnant of the original implementation.",
              "createdAt": "2023-10-17T12:15:54Z",
              "path": "src/Build/BackEnd/Node/NodeConfiguration.cs",
              "diffHunk": "@@ -28,6 +28,11 @@ internal class NodeConfiguration : INodePacket\n         private BuildParameters _buildParameters;\n \n #if FEATURE_APPDOMAIN\n+        /// <summary>\n+        /// The app domain configuration bytes sent via RPC.\n+        /// </summary>\n+        private byte[] _appDomainConfigBytes;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it really intended to use `||` here? I.e. opting into the previous behavior requires disabling the change-wave **and** setting the escape hatch?",
              "createdAt": "2023-10-17T11:19:47Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I was following https://github.com/dotnet/msbuild/pull/9318/files#diff-39cbfa4c8cd24d6a641a794b405985440b851ee5ff3ba29c98af486227e79b39R589 as I was told to. I'm not sure if it's intention though.",
              "createdAt": "2023-10-17T12:17:52Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Tagging @JanKrivanek to confirm.",
              "createdAt": "2023-10-17T12:37:48Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "All good - this is inline with other related changeways. It's to prevent users from shooting into their foot by opting into BinFmt behavior that'd lead to runtime error.",
              "createdAt": "2023-10-18T06:55:15Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thank you for confirming!",
              "createdAt": "2023-10-18T07:03:33Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Please document the changewave (along with the discussed caveat) in the ChangeWaves.md file. Similarly to:\r\n\r\nhttps://github.com/dotnet/msbuild/pull/9262/files#diff-854a463890211b66f6c60646fe5d85736e82b0daaa2152561a055b333db480a8R30",
              "createdAt": "2023-10-18T07:10:33Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +422,26 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Naming convention:\r\n\r\n```suggestion\r\n                byte[] appDomainConfigBytes = null;\r\n```",
              "createdAt": "2023-10-18T07:00:51Z",
              "path": "src/Build/BackEnd/Node/NodeConfiguration.cs",
              "diffHunk": "@@ -161,7 +162,28 @@ public void Translate(ITranslator translator)\n             translator.Translate(ref _buildParameters, BuildParameters.FactoryForDeserialization);\n             translator.TranslateArray(ref _forwardingLoggers, LoggerDescription.FactoryForTranslation);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)\n+            {\n+                byte[] _appDomainConfigBytes = null;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Naming convention:\r\n\r\n```suggestion\r\n                byte[] appDomainConfigBytes = null;\r\n```",
              "createdAt": "2023-10-18T07:01:16Z",
              "path": "src/Shared/TaskHostConfiguration.cs",
              "diffHunk": "@@ -417,7 +417,28 @@ public void Translate(ITranslator translator)\n             translator.TranslateCulture(ref _culture);\n             translator.TranslateCulture(ref _uiCulture);\n #if FEATURE_APPDOMAIN\n-            translator.TranslateDotNet(ref _appDomainSetup);\n+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10) || !Traits.Instance.EscapeHatches.IsBinaryFormatterSerializationAllowed)\n+            {\n+                byte[] _appDomainConfigBytes = null;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}