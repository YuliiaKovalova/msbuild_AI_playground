{
  "number": 10652,
  "title": "Add BuildCheck basic telemetry",
  "body": "Fixes #10634\r\n\r\n### Context\r\n* [x] Extract data from the nodes and merge in main node\r\n* [x] Send the data via telemetry logging\r\n* [x] Test\r\n",
  "state": "MERGED",
  "createdAt": "2024-09-11T12:36:22Z",
  "updatedAt": "2024-09-13T15:51:18Z",
  "closedAt": "2024-09-13T15:51:16Z",
  "mergedAt": "2024-09-13T15:51:16Z",
  "additions": 725,
  "deletions": 89,
  "changedFiles": 33,
  "headRefName": "proto/buildcheck-telemetry",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "db3a69bce75f65c4d5ad114b4ee159cb6ae33b03",
          "message": "Add initial version of telemetry data extracting",
          "committedDate": "2024-09-11T12:34:57Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c963c2387cfe9090d5572ce4c7dc11e8721dd5b2",
          "message": "Initial tracing data transport",
          "committedDate": "2024-09-11T13:52:52Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7f208ef140f46debfaf07daacf1b0a9e8a33e3c1",
          "message": "Move buildcheck enabled telemetry to buildtelemetry",
          "committedDate": "2024-09-11T14:52:49Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7aab19b330a04a297aaacc81087481946dafa785",
          "message": "Add unittests",
          "committedDate": "2024-09-11T16:06:20Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fcdaff4b828b0852c4b5831860f827b66e305eb",
          "message": "Fix typos",
          "committedDate": "2024-09-11T16:11:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "928dc4ee94f100d2476ecc5296e8ff8a46b00942",
          "message": "Add CheckFriendlyName to telemetry",
          "committedDate": "2024-09-11T16:40:26Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c456f85b30afdf25e8d3a6dc850bb7647191ce87",
          "message": "Add SAC telemetry",
          "committedDate": "2024-09-13T09:51:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e152e92af0fdf258453d343b2519d1ea0159f618",
          "message": "Merge branch 'main' into proto/buildcheck-telemetry",
          "committedDate": "2024-09-13T13:30:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "145439639a5f5fe893f404851c19bb978c61fcf5",
          "message": "Adjust after merging",
          "committedDate": "2024-09-13T13:33:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "this list could get pretty long, right? shouldn't we key these by rule id for efficient lookup?",
              "createdAt": "2024-09-11T14:07:40Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -29,38 +47,101 @@ public CheckWrapper(Check check)\n     // In such case - configuration will be same for all projects. So we do not need to store it per project in a collection.\n     internal CheckConfigurationEffective? CommonConfig { get; private set; }\n \n-    // start new project\n+    /// <summary>\n+    /// Ensures the check being configured for a new project (as each project can have different settings)\n+    /// </summary>\n+    /// <param name=\"fullProjectPath\"></param>\n+    /// <param name=\"effectiveConfigs\">Resulting merged configurations per rule (merged from check default and explicit user editorconfig).</param>\n+    /// <param name=\"editorConfigs\">Configurations from editorconfig per rule.</param>\n     internal void StartNewProject(\n         string fullProjectPath,\n-        IReadOnlyList<CheckConfigurationEffective> userConfigs)\n+        IReadOnlyList<CheckConfigurationEffective> effectiveConfigs,\n+        IReadOnlyList<CheckConfiguration> editorConfigs)\n     {\n+        // Let's first update the telemetry data for the rules.\n+        int idx = 0;\n+        foreach (BuildCheckRuleTelemetryData ruleTelemetryData in _ruleTelemetryData)\n+        {\n+            CheckConfigurationEffective effectiveConfig = effectiveConfigs[Math.Max(idx, effectiveConfigs.Count - 1)];\n+            if (editorConfigs[idx].Severity != null)\n+            {\n+                ruleTelemetryData.ExplicitSeverities.Add(editorConfigs[idx].Severity!.Value.ToDiagnosticSeverity());\n+            }\n+\n+            if (effectiveConfig.IsEnabled)\n+            {\n+                ruleTelemetryData.ProjectNamesWhereEnabled.Add(fullProjectPath);\n+            }\n+\n+            idx++;\n+        }\n+\n         if (!_isInitialized)\n         {\n             _isInitialized = true;\n-            CommonConfig = userConfigs[0];\n+            CommonConfig = effectiveConfigs[0];\n \n-            if (userConfigs.Count == 1)\n+            if (effectiveConfigs.Count == 1)\n             {\n                 return;\n             }\n         }\n \n         // The Common configuration is not common anymore - let's nullify it and we will need to fetch configuration per project.\n-        if (CommonConfig == null || !userConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))\n+        if (CommonConfig == null || !effectiveConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))\n         {\n             CommonConfig = null;\n         }\n     }\n \n+    internal void AddDiagnostic(CheckConfigurationEffective configurationEffective)\n+    {\n+        BuildCheckRuleTelemetryData? telemetryData =\n+            _ruleTelemetryData.FirstOrDefault(td => td.RuleId.Equals(configurationEffective.RuleId));",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "This is for a single Check - so usually the array will have single item, rarely couple.",
              "createdAt": "2024-09-11T14:35:11Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -29,38 +47,101 @@ public CheckWrapper(Check check)\n     // In such case - configuration will be same for all projects. So we do not need to store it per project in a collection.\n     internal CheckConfigurationEffective? CommonConfig { get; private set; }\n \n-    // start new project\n+    /// <summary>\n+    /// Ensures the check being configured for a new project (as each project can have different settings)\n+    /// </summary>\n+    /// <param name=\"fullProjectPath\"></param>\n+    /// <param name=\"effectiveConfigs\">Resulting merged configurations per rule (merged from check default and explicit user editorconfig).</param>\n+    /// <param name=\"editorConfigs\">Configurations from editorconfig per rule.</param>\n     internal void StartNewProject(\n         string fullProjectPath,\n-        IReadOnlyList<CheckConfigurationEffective> userConfigs)\n+        IReadOnlyList<CheckConfigurationEffective> effectiveConfigs,\n+        IReadOnlyList<CheckConfiguration> editorConfigs)\n     {\n+        // Let's first update the telemetry data for the rules.\n+        int idx = 0;\n+        foreach (BuildCheckRuleTelemetryData ruleTelemetryData in _ruleTelemetryData)\n+        {\n+            CheckConfigurationEffective effectiveConfig = effectiveConfigs[Math.Max(idx, effectiveConfigs.Count - 1)];\n+            if (editorConfigs[idx].Severity != null)\n+            {\n+                ruleTelemetryData.ExplicitSeverities.Add(editorConfigs[idx].Severity!.Value.ToDiagnosticSeverity());\n+            }\n+\n+            if (effectiveConfig.IsEnabled)\n+            {\n+                ruleTelemetryData.ProjectNamesWhereEnabled.Add(fullProjectPath);\n+            }\n+\n+            idx++;\n+        }\n+\n         if (!_isInitialized)\n         {\n             _isInitialized = true;\n-            CommonConfig = userConfigs[0];\n+            CommonConfig = effectiveConfigs[0];\n \n-            if (userConfigs.Count == 1)\n+            if (effectiveConfigs.Count == 1)\n             {\n                 return;\n             }\n         }\n \n         // The Common configuration is not common anymore - let's nullify it and we will need to fetch configuration per project.\n-        if (CommonConfig == null || !userConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))\n+        if (CommonConfig == null || !effectiveConfigs.All(t => t.IsSameConfigurationAs(CommonConfig)))\n         {\n             CommonConfig = null;\n         }\n     }\n \n+    internal void AddDiagnostic(CheckConfigurationEffective configurationEffective)\n+    {\n+        BuildCheckRuleTelemetryData? telemetryData =\n+            _ruleTelemetryData.FirstOrDefault(td => td.RuleId.Equals(configurationEffective.RuleId));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "'CherResult' seems like it may be a typo to me (as well as the file name).",
              "createdAt": "2024-09-11T14:08:32Z",
              "path": "src/Build/BuildCheck/Utilities/CherResultSeverityExtensions.cs",
              "diffHunk": "@@ -0,0 +1,31 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+internal static class CherResultSeverityExtensions",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    private const string FailedAcquisitionEventName = \"buildcheck/acquisitionfailure\";\r\n```\r\n\r\nminor typo in identifier name -> will need to be cleaned up in other references as well",
              "createdAt": "2024-09-11T14:13:32Z",
              "path": "src/Framework/Telemetry/BuildCheckTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.Linq;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Framework.Telemetry;\n+\n+internal class BuildCheckTelemetry\n+{\n+    private const string FailedAcquistionEventName = \"buildcheck/acquisitionfailure\";",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "making sure I understand - this event is a 'summary' kind of event with roll-up information, and the subsequent events can be joined to this summary via 'SubmissionId' to get details, or just sliced by 'RuleId' to get per-rule aggregations.\r\n\r\nThat all correct?",
              "createdAt": "2024-09-11T14:15:42Z",
              "path": "src/Framework/Telemetry/BuildCheckTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.Linq;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Framework.Telemetry;\n+\n+internal class BuildCheckTelemetry\n+{\n+    private const string FailedAcquistionEventName = \"buildcheck/acquisitionfailure\";\n+    private const string RunEventName = \"buildcheck/run\";\n+    private const string RuleStatsEventName = \"buildcheck/rule\";\n+    private Guid _submissionId = Guid.NewGuid();\n+\n+    /// <summary>\n+    /// Translates failed acquisition event to telemetry transport data.\n+    /// </summary>\n+    internal (string, IDictionary<string, string>) ProcessCustomCheckLoadingFailure(string assemblyName,\n+        Exception exception)\n+    {\n+        var properties = new Dictionary<string, string>();\n+        properties[\"SubmissionId\"] = _submissionId.ToString();\n+        properties[\"AssemblyName\"] = assemblyName;\n+        string? exceptionType = exception.GetType().FullName;\n+        if (exceptionType != null)\n+        {\n+            properties[\"ExceptionType\"] = exceptionType;\n+        }\n+        if (exception.Message != null)\n+        {\n+            properties[\"ExceptionMessage\"] = exception.Message;\n+        }\n+\n+        return (FailedAcquistionEventName, properties);\n+    }\n+\n+    /// <summary>\n+    /// Translates BuildCheck tracing data to telemetry transport data.\n+    /// </summary>\n+    internal IEnumerable<(string, IDictionary<string, string>)> ProcessBuildCheckTracingData(BuildCheckTracingData data)\n+    {\n+        int rulesCount = data.TelemetryData.Count;\n+        int customRulesCount = data.TelemetryData.Count(t => !t.Value.IsBuiltIn);\n+        int violationsCount = data.TelemetryData.Sum(t => t.Value.ViolationsCount);\n+        long runtimeTicks = data.ExtractCheckStats().Sum(v => v.Value.Ticks);\n+        runtimeTicks += data.InfrastructureTracingData.Sum(v => v.Value.Ticks);\n+        TimeSpan totalRuntime = new TimeSpan(runtimeTicks);\n+\n+        var properties = new Dictionary<string, string>();\n+        properties[\"SubmissionId\"] = _submissionId.ToString();\n+        properties[\"RulesCount\"] = rulesCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"CustomRulesCount\"] = customRulesCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"ViolationsCount\"] = violationsCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"TotalRuntimeInMilliseconds\"] = totalRuntime.TotalMilliseconds.ToString(CultureInfo.InvariantCulture);\n+\n+        yield return (RunEventName, properties);",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Exactly.\r\n\r\nThere doesn't seem to be other 'summarization' key (or I was looking wrong in existing telemetry data) - so adding an artificial guid.",
              "createdAt": "2024-09-11T14:37:41Z",
              "path": "src/Framework/Telemetry/BuildCheckTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,95 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.Linq;\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Framework.Telemetry;\n+\n+internal class BuildCheckTelemetry\n+{\n+    private const string FailedAcquistionEventName = \"buildcheck/acquisitionfailure\";\n+    private const string RunEventName = \"buildcheck/run\";\n+    private const string RuleStatsEventName = \"buildcheck/rule\";\n+    private Guid _submissionId = Guid.NewGuid();\n+\n+    /// <summary>\n+    /// Translates failed acquisition event to telemetry transport data.\n+    /// </summary>\n+    internal (string, IDictionary<string, string>) ProcessCustomCheckLoadingFailure(string assemblyName,\n+        Exception exception)\n+    {\n+        var properties = new Dictionary<string, string>();\n+        properties[\"SubmissionId\"] = _submissionId.ToString();\n+        properties[\"AssemblyName\"] = assemblyName;\n+        string? exceptionType = exception.GetType().FullName;\n+        if (exceptionType != null)\n+        {\n+            properties[\"ExceptionType\"] = exceptionType;\n+        }\n+        if (exception.Message != null)\n+        {\n+            properties[\"ExceptionMessage\"] = exception.Message;\n+        }\n+\n+        return (FailedAcquistionEventName, properties);\n+    }\n+\n+    /// <summary>\n+    /// Translates BuildCheck tracing data to telemetry transport data.\n+    /// </summary>\n+    internal IEnumerable<(string, IDictionary<string, string>)> ProcessBuildCheckTracingData(BuildCheckTracingData data)\n+    {\n+        int rulesCount = data.TelemetryData.Count;\n+        int customRulesCount = data.TelemetryData.Count(t => !t.Value.IsBuiltIn);\n+        int violationsCount = data.TelemetryData.Sum(t => t.Value.ViolationsCount);\n+        long runtimeTicks = data.ExtractCheckStats().Sum(v => v.Value.Ticks);\n+        runtimeTicks += data.InfrastructureTracingData.Sum(v => v.Value.Ticks);\n+        TimeSpan totalRuntime = new TimeSpan(runtimeTicks);\n+\n+        var properties = new Dictionary<string, string>();\n+        properties[\"SubmissionId\"] = _submissionId.ToString();\n+        properties[\"RulesCount\"] = rulesCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"CustomRulesCount\"] = customRulesCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"ViolationsCount\"] = violationsCount.ToString(CultureInfo.InvariantCulture);\n+        properties[\"TotalRuntimeInMilliseconds\"] = totalRuntime.TotalMilliseconds.ToString(CultureInfo.InvariantCulture);\n+\n+        yield return (RunEventName, properties);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ok, this is the key transmission point - this LGTM.",
              "createdAt": "2024-09-11T14:20:55Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContext.cs",
              "diffHunk": "@@ -43,4 +44,18 @@ public void DispatchAsErrorFromText(string? subcategoryResourceName, string? err\n     public void DispatchAsWarningFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)\n         => loggingService\n             .LogWarningFromText(eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);\n+\n+    public void DispatchFailedAcquisitionTelemetry(string assemblyName, Exception exception)\n+    {\n+        var telemetryTransportData = KnownTelemetry.BuildCheckTelemetry.ProcessCustomCheckLoadingFailure(assemblyName, exception);\n+        loggingService.LogTelemetry(eventContext, telemetryTransportData.Item1, telemetryTransportData.Item2);\n+    }\n+\n+    public void DispatchTelemetry(BuildCheckTracingData data)\n+    {\n+        foreach ((string, IDictionary<string, string>) telemetryTransportData in KnownTelemetry.BuildCheckTelemetry.ProcessBuildCheckTracingData(data))\n+        {\n+            loggingService.LogTelemetry(eventContext, telemetryTransportData.Item1, telemetryTransportData.Item2);",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will not cause _full_ GDPR reclassification, we just need to classify this one new property. It's not a hurdle.\r\n\r\nIt seems odd to add this to the logging telemetry - I think we already have 'general build' telemetry (the \"msbuild/build\" event processed [here](https://github.com/dotnet/sdk/blob/71ebd47cba756870c456081848b0d525eefb1732/src/Cli/dotnet/commands/dotnet-msbuild/MSBuildLogger.cs#L131-L135)) that this would be more fitting to attach to. ",
              "createdAt": "2024-09-11T14:23:16Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -16,6 +16,11 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool TerminalLogger { get; set; }\n \n+    /// <summary>\n+    /// True if buildcheck was used.\n+    /// </summary>\n+    public bool BuildCheckEnabled { get; set; }",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Thx.\r\nMoved to 'msbuild/build'",
              "createdAt": "2024-09-11T14:53:17Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -16,6 +16,11 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool TerminalLogger { get; set; }\n \n+    /// <summary>\n+    /// True if buildcheck was used.\n+    /// </summary>\n+    public bool BuildCheckEnabled { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "thank you for making this test - the recent telemetry scare was indeed on my mind :)",
              "createdAt": "2024-09-11T21:12:40Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -530,6 +532,27 @@ public void RoundtripAssemblyLoadBuild()\n                 e => string.Join(\", \", e.RawArguments ?? Array.Empty<object>()));\n         }\n \n+        [Fact]\n+        public void RoundtripBuildCheckTracingEventArgs()\n+        {\n+            string key1 = \"AA\";\n+            TimeSpan span1 = TimeSpan.FromSeconds(5);\n+            string key2 = \"b\";\n+            TimeSpan span2 = TimeSpan.FromSeconds(15);\n+            string key3 = \"cCc\";\n+            TimeSpan span3 = TimeSpan.FromSeconds(50);\n+\n+            Dictionary<string, TimeSpan> stats = new() { { key1, span1 }, { key2, span2 }, { key3, span3 } };\n+\n+            BuildCheckTracingEventArgs args = new BuildCheckTracingEventArgs(stats);\n+\n+            Roundtrip(args,\n+                e => e.TracingData.InfrastructureTracingData.Keys.Count.ToString(),\n+                e => e.TracingData.InfrastructureTracingData.Keys.ToCsvString(false),\n+                e => e.TracingData.InfrastructureTracingData.Values\n+                    .Select(v => v.TotalSeconds.ToString(CultureInfo.InvariantCulture)).ToCsvString(false));",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "for the built-in checks, why the overrides if the base class of `InternalCheck` defaults this member to `true` anyway?",
              "createdAt": "2024-09-11T21:13:49Z",
              "path": "src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs",
              "diffHunk": "@@ -49,6 +49,8 @@ public override void Initialize(ConfigurationContext configurationContext)\n \n     public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEnvironmentVariableReadAction(ProcessEnvironmentVariableReadAction);\n \n+    internal override bool IsBuiltIn => true;",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Only 'worker node embedded checks' inherit from `InternalCheck`\r\nWe might want yet another class denoting `BuiltInCheck` (that the `InternalCheck` would be derived from).\r\n\r\nThat depends on future decision on if we want to prevent external users from using some Microsoft perceived RuleIds and how we want to implement that (internal overload just for ourselves feel tempting - that would however cut of 1P contributors in their repos)",
              "createdAt": "2024-09-12T06:20:17Z",
              "path": "src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs",
              "diffHunk": "@@ -49,6 +49,8 @@ public override void Initialize(ConfigurationContext configurationContext)\n \n     public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEnvironmentVariableReadAction(ProcessEnvironmentVariableReadAction);\n \n+    internal override bool IsBuiltIn => true;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sice we are adding telemetry - I'd realy realy want to get numbers on this.\r\n\r\n@baronfel - please scream if you have any concerns with adding this datapoint.",
              "createdAt": "2024-09-13T09:53:49Z",
              "path": "src/Framework/Telemetry/BuildTelemetry.cs",
              "diffHunk": "@@ -74,6 +74,16 @@ internal class BuildTelemetry : TelemetryBase\n         /// </summary>\n         public string? Host { get; set; }\n \n+        /// <summary>\n+        /// True if buildcheck was used.\n+        /// </summary>\n+        public bool? BuildCheckEnabled { get; set; }\n+\n+        /// <summary>\n+        /// True if Smart Application Control was enabled.\n+        /// </summary>\n+        public bool? SACEnabled { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}