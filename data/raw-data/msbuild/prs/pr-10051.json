{
  "number": 10051,
  "title": "Add binlog filepath uniquification option",
  "body": "Fixes #8817\r\n\r\n### Context\r\nThere are cases where explicit unique binlog paths cannot be specified and the implicit overwriting behavior is complicating the invectigations (e.g. the implicit separate restore step invoked by sdk - as per #9614).\r\n\r\nFor those cases let's introduce a simplistic uniquification opt-in mechanism: When specifying a '{}' substring withing the binlog path parameter - this is going to be expanded into a timestamp plus random stamp.\r\n\r\nBehavior:\r\n\r\n* Only '{}' is recognized and expanded. If the brackets have any content - it's intentionally left untouched (this can be added in future iteration if there is any need)\r\n* If '{}' is present, then the '.binlog' extension is ensured (whether specified in original name or not)\r\n* Each '{}' in the binlog path argument is replaced with timestamp and random string stamp\r\n* Custom expander can be injected - this is mainly for unit tests, but can be used if anyone wants different uniquification\r\n* Intentionally no build-time information (entrypoint project, target, etc) is added - KISS principle. All needed information can be located within the binlog. We can iterate on this if requested and needed.\r\n\r\n\r\nSamples:\r\n\r\n* `-bl:{}` --> `20240423-102016--16636--anxG+w.binlog`\r\n* `-bl:LogFile=MyBinlog-{}.binlog` --> `MyBinlog-20240423-102016--16636--anxG+w.binlog`\r\n* `-bl:{something}.binlog` --> `{something}.binlog`\r\n\r\n### Changes Made\r\nThe parameters parsing is extended, so that it can recognize and expand '{}'\r\n\r\n### Testing\r\nExisting tests. + added tailored tests for pre-existing and new naming interpretation\r\n\r\n### Notes\r\nThis can technically be breaking - but the likelyhood is quite low (I tried to search GH and ADO for usage of binlog, where explicit path would be specified and contained '{}' - and found none). S I'd prefer clean experience rather then adding additional commandline arguments. It is still behind the change wave - if anything goes wrong.\r\n\r\n\r\nFYI @KirillOsenkov ",
  "state": "MERGED",
  "createdAt": "2024-04-22T11:24:36Z",
  "updatedAt": "2025-01-31T17:35:48Z",
  "closedAt": "2024-04-23T19:41:37Z",
  "mergedAt": "2024-04-23T19:41:37Z",
  "additions": 149,
  "deletions": 9,
  "changedFiles": 5,
  "headRefName": "proto/binlog-unique-names",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "055473f239cfb65eb4dab89cde8f971b1d425573",
          "message": "Add binlog filepath uniquification option",
          "committedDate": "2024-04-22T11:10:49Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87508bcbafbf63eda681c2f4e87d5fd9742fb5bd",
          "message": "Fix comment indentation",
          "committedDate": "2024-04-22T11:50:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa1f1515a387dd5b0b7a0af9326cb902d579f018",
          "message": "Grace handle '=' chars in path",
          "committedDate": "2024-04-22T13:29:11Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a414be9bb8d87616633f8b27646900366787a61f",
          "message": "Reflect PR comments",
          "committedDate": "2024-04-23T10:19:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2024-04-22T18:13:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-04-22T18:13:53Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "I like the design!\r\n\r\nI feel pretty strongly that we should remove the interface and just use `Func<string>` to obtain the random string. If it's null, fall back to the default (current) implementation. \r\n\r\nNothing in this PR should be adding any new public API.\r\n\r\nAlso would be nice if the process ID of the node was featured in the random string.\r\n\r\nAlso let's add a dash between date and time.",
        "createdAt": "2024-04-23T02:37:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I like the design!\r\n> \r\n> I feel pretty strongly that we should remove the interface and just use `Func<string>` to obtain the random string. If it's null, fall back to the default (current) implementation.\r\n> \r\n> Nothing in this PR should be adding any new public API.\r\n> \r\n> Also would be nice if the process ID of the node was featured in the random string.\r\n> \r\n> Also let's add a dash between date and time.\r\n\r\nUpdate format based on suggestions - the sample result is in the updated PR description",
        "createdAt": "2024-04-23T10:22:37Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Finally had a need to use this and unfortunately powershell eats the `{}` so you have to call, for example, `msbuild -m '-bl:{}'`.",
        "createdAt": "2025-01-31T17:33:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "*shakes fist* POWERSHELLLLL",
        "createdAt": "2025-01-31T17:35:47Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If the parameter presented but with incorrect extension, do we want to fail fast and report the error? ",
              "createdAt": "2024-04-22T13:24:34Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +451,69 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            bool isFileParam = hasPathPrefix || parameter.IndexOf('=') < 0;\n+\n+            if (!isFileParam)\n+            {\n+                filePath = null;\n+                return false;\n+            }\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "In this case I'd preffer more friendly behavior - if the user forget to add the extension, it's automatically added.\r\n\r\nI added it only for the case of wildcarded paths - not to break the general existing path... but I believe that in the short future we should have as general behavior (there is likely no good in throwing exception telling you you should add an extension)",
              "createdAt": "2024-04-23T10:18:40Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +451,69 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            bool isFileParam = hasPathPrefix || parameter.IndexOf('=') < 0;\n+\n+            if (!isFileParam)\n+            {\n+                filePath = null;\n+                return false;\n+            }\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we move this method to shared codebase helpers utils or something similar to have a possibility to reuse it by contributors? :) ",
              "createdAt": "2024-04-22T13:26:39Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +451,69 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            bool isFileParam = hasPathPrefix || parameter.IndexOf('=') < 0;\n+\n+            if (!isFileParam)\n+            {\n+                filePath = null;\n+                return false;\n+            }\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }\n+            return true;\n+        }\n+\n+        private string GetUniqueStamp()\n+            => PathParameterExpander.ExpandParameter(string.Empty);\n+\n+        private class BinlogPathParameterExpander : IBinlogPathParameterExpander\n+        {\n+            public string ExpandParameter(string parameters)\n+                => $\"{DateTime.UtcNow.ToString(\"yyyyMMddHHmmss\")}-{GenerateRandomString(6)}\";\n+\n+            private string GenerateRandomString(int length)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I moved it to Build.Framework",
              "createdAt": "2024-04-23T10:16:40Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +451,69 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            bool isFileParam = hasPathPrefix || parameter.IndexOf('=') < 0;\n+\n+            if (!isFileParam)\n+            {\n+                filePath = null;\n+                return false;\n+            }\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }\n+            return true;\n+        }\n+\n+        private string GetUniqueStamp()\n+            => PathParameterExpander.ExpandParameter(string.Empty);\n+\n+        private class BinlogPathParameterExpander : IBinlogPathParameterExpander\n+        {\n+            public string ExpandParameter(string parameters)\n+                => $\"{DateTime.UtcNow.ToString(\"yyyyMMddHHmmss\")}-{GenerateRandomString(6)}\";\n+\n+            private string GenerateRandomString(int length)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarify why we are creating _logFile here? ",
              "createdAt": "2024-04-22T13:31:51Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -637,6 +639,61 @@ public void SuppressCommandOutputForNonDiagVerbosity()\n             }\n         }\n \n+        [Theory]\n+        // Wildcard - new scenario\n+        [InlineData(\"mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"mylog-{}-foo-{}\", \"mylog-xxxxx-foo-xxxxx.binlog\")]\n+        [InlineData(\"\\\"mylog-{}-foo\\\"\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-{}-foo.binlog\", \"foo\\\\bar\\\\mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        // No wildcard - pre-existing scenarios\n+        [InlineData(\"mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        [InlineData(\"\\\"mylog-foo.binlog\\\"\", \"mylog-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-foo.binlog\", \"foo\\\\bar\\\\mylog-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        public void BinlogFileNameParameterParsing(string parameters, string expectedBinlogFile)\n+        {\n+            var binaryLogger = new BinaryLogger\n+            {\n+                Parameters = parameters\n+            };\n+            var stampProvider = A.Fake<IBinlogPathParameterExpander>();\n+            string random = \"xxxxx\";\n+            A.CallTo(() => stampProvider.ExpandParameter(A<string>.Ignored)).Returns(random);\n+            binaryLogger.PathParameterExpander = stampProvider;\n+\n+            var eventSource = A.Fake<IEventSource>();\n+\n+            binaryLogger.Initialize(eventSource);\n+            string expectedLog = Path.GetFullPath(expectedBinlogFile);\n+            binaryLogger.FilePath.Should().BeEquivalentTo(expectedLog);\n+            binaryLogger.Shutdown();\n+            File.Exists(binaryLogger.FilePath).ShouldBeTrue();\n+            FileUtilities.DeleteNoThrow(binaryLogger.FilePath);\n+\n+            File.Create(_logFile);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Added the clarifying comment",
              "createdAt": "2024-04-23T10:16:19Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -637,6 +639,61 @@ public void SuppressCommandOutputForNonDiagVerbosity()\n             }\n         }\n \n+        [Theory]\n+        // Wildcard - new scenario\n+        [InlineData(\"mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"mylog-{}-foo-{}\", \"mylog-xxxxx-foo-xxxxx.binlog\")]\n+        [InlineData(\"\\\"mylog-{}-foo\\\"\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-{}-foo.binlog\", \"foo\\\\bar\\\\mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        // No wildcard - pre-existing scenarios\n+        [InlineData(\"mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        [InlineData(\"\\\"mylog-foo.binlog\\\"\", \"mylog-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-foo.binlog\", \"foo\\\\bar\\\\mylog-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        public void BinlogFileNameParameterParsing(string parameters, string expectedBinlogFile)\n+        {\n+            var binaryLogger = new BinaryLogger\n+            {\n+                Parameters = parameters\n+            };\n+            var stampProvider = A.Fake<IBinlogPathParameterExpander>();\n+            string random = \"xxxxx\";\n+            A.CallTo(() => stampProvider.ExpandParameter(A<string>.Ignored)).Returns(random);\n+            binaryLogger.PathParameterExpander = stampProvider;\n+\n+            var eventSource = A.Fake<IEventSource>();\n+\n+            binaryLogger.Initialize(eventSource);\n+            string expectedLog = Path.GetFullPath(expectedBinlogFile);\n+            binaryLogger.FilePath.Should().BeEquivalentTo(expectedLog);\n+            binaryLogger.Shutdown();\n+            File.Exists(binaryLogger.FilePath).ShouldBeTrue();\n+            FileUtilities.DeleteNoThrow(binaryLogger.FilePath);\n+\n+            File.Create(_logFile);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I thought you said simplistic ;) Just use a `Func<string>` here (or `Func<string, string>`) and keep the default value null.\r\n\r\nIf there are currently no callers setting it from outside, we should make it internal.",
              "createdAt": "2024-04-23T02:33:19Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -135,6 +135,12 @@ public enum ProjectImportsCollectionMode\n         /// </summary>\n         public string Parameters { get; set; }\n \n+        /// <summary>\n+        /// Optional expander of wildcard(s) within the path parameter of a binlog <see cref=\"Parameters\"/>.\n+        /// See <see cref=\"IBinlogPathParameterExpander\"/> for more details.\n+        /// </summary>\n+        public IBinlogPathParameterExpander PathParameterExpander { private get; set; } = new BinlogPathParameterExpander();",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Absolutely.. it was just my excessive love for interfaces. And then I needed to expose it due to easier mocking.\r\nLm flip to func - which will solve both of those",
              "createdAt": "2024-04-23T07:34:38Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -135,6 +135,12 @@ public enum ProjectImportsCollectionMode\n         /// </summary>\n         public string Parameters { get; set; }\n \n+        /// <summary>\n+        /// Optional expander of wildcard(s) within the path parameter of a binlog <see cref=\"Parameters\"/>.\n+        /// See <see cref=\"IBinlogPathParameterExpander\"/> for more details.\n+        /// </summary>\n+        public IBinlogPathParameterExpander PathParameterExpander { private get; set; } = new BinlogPathParameterExpander();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This was confusing at first - checking the file is there, then deleting it and creating again for the invariant in the constructor. Other tests use env to create `TransientTestFolder`. \r\nAs a suggestion: also set the directory of the binlog file as a `TransientTestFolder`",
              "createdAt": "2024-04-23T11:37:37Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -637,6 +639,61 @@ public void SuppressCommandOutputForNonDiagVerbosity()\n             }\n         }\n \n+        [Theory]\n+        // Wildcard - new scenario\n+        [InlineData(\"mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"mylog-{}-foo-{}\", \"mylog-xxxxx-foo-xxxxx.binlog\")]\n+        [InlineData(\"\\\"mylog-{}-foo\\\"\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-{}-foo.binlog\", \"foo\\\\bar\\\\mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        // No wildcard - pre-existing scenarios\n+        [InlineData(\"mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        [InlineData(\"\\\"mylog-foo.binlog\\\"\", \"mylog-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-foo.binlog\", \"foo\\\\bar\\\\mylog-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        public void BinlogFileNameParameterParsing(string parameters, string expectedBinlogFile)\n+        {\n+            var binaryLogger = new BinaryLogger\n+            {\n+                Parameters = parameters\n+            };\n+            string random = \"xxxxx\";\n+            binaryLogger.PathParameterExpander = _ => random;\n+\n+            var eventSource = A.Fake<IEventSource>();\n+\n+            binaryLogger.Initialize(eventSource);\n+            string expectedLog = Path.GetFullPath(expectedBinlogFile);\n+            binaryLogger.FilePath.Should().BeEquivalentTo(expectedLog);\n+            binaryLogger.Shutdown();\n+            File.Exists(binaryLogger.FilePath).ShouldBeTrue();\n+            FileUtilities.DeleteNoThrow(binaryLogger.FilePath);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Unfortunately the TransientTestFolder cannot be used here.\r\nI want to test here absolute and as well relative paths - with and without nesting. Relative paths are 'absolutized' by the logger - relative to the current execution folder. That means that the resulting log can be present within the bin folder - one that we should not (and won't be able to) delete",
              "createdAt": "2024-04-23T19:40:59Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -637,6 +639,61 @@ public void SuppressCommandOutputForNonDiagVerbosity()\n             }\n         }\n \n+        [Theory]\n+        // Wildcard - new scenario\n+        [InlineData(\"mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"mylog-{}-foo-{}\", \"mylog-xxxxx-foo-xxxxx.binlog\")]\n+        [InlineData(\"\\\"mylog-{}-foo\\\"\", \"mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-{}-foo.binlog\", \"foo\\\\bar\\\\mylog-xxxxx-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-{}-foo\", \"mylog-xxxxx-foo.binlog\")]\n+        // No wildcard - pre-existing scenarios\n+        [InlineData(\"mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        [InlineData(\"\\\"mylog-foo.binlog\\\"\", \"mylog-foo.binlog\")]\n+        [InlineData(\"foo\\\\bar\\\\mylog-foo.binlog\", \"foo\\\\bar\\\\mylog-foo.binlog\")]\n+        [InlineData(\"ProjectImports=None;LogFile=mylog-foo.binlog\", \"mylog-foo.binlog\")]\n+        public void BinlogFileNameParameterParsing(string parameters, string expectedBinlogFile)\n+        {\n+            var binaryLogger = new BinaryLogger\n+            {\n+                Parameters = parameters\n+            };\n+            string random = \"xxxxx\";\n+            binaryLogger.PathParameterExpander = _ => random;\n+\n+            var eventSource = A.Fake<IEventSource>();\n+\n+            binaryLogger.Initialize(eventSource);\n+            string expectedLog = Path.GetFullPath(expectedBinlogFile);\n+            binaryLogger.FilePath.Should().BeEquivalentTo(expectedLog);\n+            binaryLogger.Shutdown();\n+            File.Exists(binaryLogger.FilePath).ShouldBeTrue();\n+            FileUtilities.DeleteNoThrow(binaryLogger.FilePath);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also, out of curiosity, why did you decide to use the pattern of date/time/process id/string? Why not guid for example? ",
              "createdAt": "2024-04-23T11:47:07Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +454,47 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }\n+            return true;\n+        }\n+\n+        private string GetUniqueStamp()\n+            => (PathParameterExpander ?? ExpandPathParameter)(string.Empty);\n+\n+        private static string ExpandPathParameter(string parameters)\n+            => $\"{DateTime.UtcNow.ToString(\"yyyyMMdd-HHmmss\")}--{ProcessId}--{StringUtils.GenerateRandomString(6)}\";",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Guid would do the trick as well.\r\nThe time and process-id is bit more descriptive and together with the randomized string brings same disambiguation result",
              "createdAt": "2024-04-23T12:09:38Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +454,47 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }\n+            return true;\n+        }\n+\n+        private string GetUniqueStamp()\n+            => (PathParameterExpander ?? ExpandPathParameter)(string.Empty);\n+\n+        private static string ExpandPathParameter(string parameters)\n+            => $\"{DateTime.UtcNow.ToString(\"yyyyMMdd-HHmmss\")}--{ProcessId}--{StringUtils.GenerateRandomString(6)}\";",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I strongly want to push back on GUIDs - they are actively user hostile and don't help the user identity which binlog matches with which build invocation. ",
              "createdAt": "2024-04-23T12:49:46Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -451,5 +454,47 @@ private void ProcessParameters(out bool omitInitialInfo)\n                 throw new LoggerException(message, e, errorCode, helpKeyword);\n             }\n         }\n+\n+        private bool TryInterpretPathParameter(string parameter, out string filePath)\n+        {\n+            bool hasPathPrefix = parameter.StartsWith(\"LogFile=\", StringComparison.OrdinalIgnoreCase);\n+\n+            if (hasPathPrefix)\n+            {\n+                parameter = parameter.Substring(\"LogFile=\".Length);\n+            }\n+\n+            parameter = parameter.Trim('\"');\n+\n+            bool isWildcard = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12) && parameter.Contains(\"{}\");\n+            bool hasProperExtension = parameter.EndsWith(\".binlog\", StringComparison.OrdinalIgnoreCase);\n+            filePath = parameter;\n+\n+            if (!isWildcard)\n+            {\n+                return hasProperExtension;\n+            }\n+\n+            filePath = parameter.Replace(\"{}\", GetUniqueStamp(), StringComparison.Ordinal);\n+\n+            if (!hasProperExtension)\n+            {\n+                filePath += \".binlog\";\n+            }\n+            return true;\n+        }\n+\n+        private string GetUniqueStamp()\n+            => (PathParameterExpander ?? ExpandPathParameter)(string.Empty);\n+\n+        private static string ExpandPathParameter(string parameters)\n+            => $\"{DateTime.UtcNow.ToString(\"yyyyMMdd-HHmmss\")}--{ProcessId}--{StringUtils.GenerateRandomString(6)}\";",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      }
    ]
  }
}