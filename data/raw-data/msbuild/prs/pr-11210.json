{
  "number": 11210,
  "title": "changing expander regex ",
  "body": "to use code generated version instead of compiled one where applicable according to this[ .NET article.](https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-source-generators)\r\nThis nets a small but visible performance gain with only a minor code update.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-02T15:43:56Z",
  "updatedAt": "2025-01-03T15:23:19Z",
  "closedAt": "2025-01-03T15:23:17Z",
  "mergedAt": "2025-01-03T15:23:17Z",
  "additions": 53,
  "deletions": 17,
  "changedFiles": 1,
  "headRefName": "regex-codegen-addition",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "04453943e8770ba119c4dc37d0e2a0ed0c5d2f2e",
          "message": "changing expander regex to use code generated version instead of compiled one where applicable",
          "committedDate": "2025-01-02T15:41:27Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "7dbfd3712334857e0ff5a85084d42b818621fdba",
          "message": "review update",
          "committedDate": "2025-01-03T13:38:09Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "c9aa5b9d23eb3f94ad34aed337bca8392abb148c",
          "message": "Merge branch 'main' into regex-codegen-addition",
          "committedDate": "2025-01-03T14:16:11Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Contributes to https://github.com/dotnet/msbuild/issues/7598",
        "createdAt": "2025-01-03T11:56:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "It looks good!\r\nI have found other places with Regex usage in MSBuild:\r\nhttps://github.com/search?q=repo%3Adotnet%2Fmsbuild%20%20Lazy%3CRegex%3E&type=code\r\n\r\nDo you plan to adapt them too to the new practice? ",
        "createdAt": "2025-01-03T12:22:07Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "> It looks good! I have found other places with Regex usage in MSBuild: https://github.com/search?q=repo%3Adotnet%2Fmsbuild%20%20Lazy%3CRegex%3E&type=code\r\n> \r\n> Do you plan to adapt them too to the new practice?\r\n\r\nThanks.\r\nI will take a look. The new pattern is easily applicable only when the pattern is known at a compile time. E.g. constant or with a limited enough pool of options to be reasonably enumerated by hand so it might not be as straightforward.\r\nI started with this one as it is used quite a bit within the context of the expander.\r\n\r\nI noticed this one as it was visible in profiler, that being said, unifying the rest is a good idea - I will see what I can do.\r\nbefore:\r\n![regex-before](https://github.com/user-attachments/assets/d6aea745-d9cb-4d5b-8c22-991f26cccab1)\r\n\r\nafter:\r\n![regex-after](https://github.com/user-attachments/assets/2cffc4ac-aee8-49bf-a2f9-7dc7e38f2995)\r\n\r\nso the impact in context of MSBUild is in the range of ~0.1%, but still visible. \r\nThe speedup is much more visible when doing targeted testing:\r\n```\r\nstatic partial class Test\r\n{\r\n    internal const string itemTypeOrMetadataNameSpecification = @\"[A-Za-z_][A-Za-z_0-9\\-]*\";\r\n\r\n    // the portion of an item transform that is the function that we wish to execute on the item\r\n    internal const string itemFunctionNameSpecification = @\"[A-Za-z]*\";\r\n\r\n    private const string ItemMetadataSpecification = @\"%\\(\\s* (?<ITEM_SPECIFICATION>(?<ITEM_TYPE>\" + itemTypeOrMetadataNameSpecification + @\")\\s*\\.\\s*)? (?<NAME>\" + itemTypeOrMetadataNameSpecification + @\") \\s*\\)\";\r\n    \r\n    [GeneratedRegex(ItemMetadataSpecification)]\r\n    private static partial Regex GeneratedPattern();\r\n\r\n    public static Regex ItemMetadataPattern = new Regex(ItemMetadataSpecification,\r\n                   RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled );\r\n\r\n    public static string benchmark_regex(string expression)\r\n    {\r\n        return Test.ItemMetadataPattern.Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\r\n        //return Test.GeneratedPattern().Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\r\n    }\r\n}\r\n```\r\nold, compiled regex:\r\n![regex-compiled](https://github.com/user-attachments/assets/8f1026f2-f06c-4184-9a0a-47abdd1863b7)\r\n\r\nnew, generated regex:\r\n![regex-generated](https://github.com/user-attachments/assets/a4465d29-9ef7-44d1-a44f-8ec5aefc630d)\r\n\r\nNow my test strings for matching are not all that representative so this targeted illustration isn't pefect:\r\n```\r\nstring[] tests = { \"some random string\", \"%(test.test)\", \"%(test.test.test)%(test.test)%(test.test)\" , \"asdfa.sdfasdfa\", \"%dasfsd.2dsfa\", \"%(dasfsd2.dsfa)\" };\r\nvar match = 0;\r\nfor (int i = 0; i != 10000000; i++)\r\n{\r\n    foreach (var test in tests)\r\n    {\r\n        //Console.WriteLine(Test.benchmark_regex(test));\r\n        if (Test.benchmark_regex(test).StartsWith(\"y\", StringComparison.Ordinal));\r\n        {\r\n            match++;\r\n        }\r\n    }\r\n}\r\n```\r\nNamely in Expander, we're already doing some fail-soon pre-scanning so some of the edge cases might be slightly different.\r\n\r\nI'm pondering how much more we could gain by tweaking the Regex.Replace itself, but that is in the realm of speculation.\r\n\r\n",
        "createdAt": "2025-01-03T14:16:07Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this rather be a getter? (it's a bit weird to see a method name that doesn't have any verb)",
              "createdAt": "2025-01-03T12:00:29Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3086,24 +3086,40 @@ internal string GetMetadataValueFromMatch(Match match)\n         /// Regular expressions used by the expander.\n         /// The expander currently uses regular expressions rather than a parser to do its work.\n         /// </summary>\n-        private static class RegularExpressions\n+        private static partial class RegularExpressions\n         {\n             /**************************************************************************************************************************\n             * WARNING: The regular expressions below MUST be kept in sync with the expressions in the ProjectWriter class -- if the\n             * description of an item vector changes, the expressions must be updated in both places.\n             *************************************************************************************************************************/\n \n+\n+\n+#if NET7_0_OR_GREATER\n+            [GeneratedRegex(ItemMetadataSpecification, RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture)]\n+            internal static partial Regex ItemMetadataPattern();\n+#else\n             /// <summary>\n             /// Regular expression used to match item metadata references embedded in strings.\n             /// For example, %(Compile.DependsOn) or %(DependsOn).\n             /// </summary>\n             internal static readonly Lazy<Regex> ItemMetadataPattern = new Lazy<Regex>(\n                 () => new Regex(ItemMetadataSpecification,\n                     RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));\n+#endif\n \n-            /// <summary>\n-            /// Name of the group matching the \"name\" of a metadatum.\n-            /// </summary>\n+            internal static Regex ItemMetadataPatternWrapper()",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "it looks like a getter candidate too :)",
              "createdAt": "2025-01-03T12:13:18Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3128,6 +3152,15 @@ private static class RegularExpressions\n                     ItemVectorWithTransformLHS + @\")\" + ItemMetadataSpecification + @\"(?!\" +\n                     ItemVectorWithTransformRHS + @\"))\",\n                     RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));\n+#endif\n+            internal static Regex NonTransformItemMetadataPatternWrapper()",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it possible to move this string to some const and reuse it in these 2 places?\r\n```\r\n@\"((?<=\" + ItemVectorWithTransformLHS + @\")\" + ItemMetadataSpecification + @\"(?!\" +\r\n                            ItemVectorWithTransformRHS + @\")) | ((?<!\" + ItemVectorWithTransformLHS + @\")\" +\r\n                            ItemMetadataSpecification + @\"(?=\" + ItemVectorWithTransformRHS + @\")) | ((?<!\" +\r\n                            ItemVectorWithTransformLHS + @\")\" + ItemMetadataSpecification + @\"(?!\" +\r\n                            ItemVectorWithTransformRHS + @\"))\"\r\n```\r\n\r\n                            \r\n                            ",
              "createdAt": "2025-01-03T12:18:48Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3116,6 +3132,14 @@ private static class RegularExpressions\n             /// </summary>\n             internal const string ItemTypeGroup = \"ITEM_TYPE\";\n \n+#if NET7_0_OR_GREATER\n+            [GeneratedRegex(@\"((?<=\" + ItemVectorWithTransformLHS + @\")\" + ItemMetadataSpecification + @\"(?!\" +",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}