{
  "number": 7109,
  "title": "Associate Project Cache log messages with the project execution",
  "body": "This change creates a `projectContextId` during project cache execution to use for logging. Then that same `projectContextId` is used for the build execution (if needed) so that the cache-related log messages are structured under the build execution for that project.\r\n\r\nAlthough the cache-related log messages come before the \"project started\" event, the somehow still get nested under it, both in console logging(!?) and binary logging. This is what we want anyway though, so I won't question it.\r\n\r\nExample of the change in structure. Left is current, right is new:\r\n![image](https://user-images.githubusercontent.com/6445614/144328069-622665be-bf0c-42db-bdf4-ecc7fac309d8.png)\r\n\r\nIn a future change I plan to clean up the hard-coded log messages that the `ProjectCacheService` uses in favor of properly localized string which also look more \"MSBuild-y\".\r\n\r\nNote that commits are broken down to perhaps make reviewing more bite-sized. Feel free to review each commit as opposed to the whole PR at once.",
  "state": "MERGED",
  "createdAt": "2021-12-01T23:04:57Z",
  "updatedAt": "2022-07-29T18:17:07Z",
  "closedAt": "2021-12-06T15:02:55Z",
  "mergedAt": "2021-12-06T15:02:55Z",
  "additions": 381,
  "deletions": 104,
  "changedFiles": 8,
  "headRefName": "dfederm/project-cache-logging",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4f8a1796bd65c83ef5d848c5d7623fc745f99b6c",
          "message": "Fix typo",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "004d8484ec4083d7583f03ffd14e35d2a2d6f961",
          "message": "Allow projectContextId to be provided to the logging context",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "964eef3a586b128d5ec7869eca5f6d0a125126a0",
          "message": "Generate a projectContextId in ProjectCacheService",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ffd9b2a65866db391aaf371ab247b03171267fd",
          "message": "Fix the VS workaroudn case, and fix projectContextId sanity checks",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "afb5ff3229e6f1406a49da015eeb7b1f69c996d5",
          "message": "Fix race condition",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3149317b964bb6cd7549696018ab7b26223da179",
          "message": "Fix newline formatting in LoggingServicesLogMethod_Tests",
          "committedDate": "2021-12-03T23:10:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2021-12-02T19:50:52Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "<samp>\nCommenter does not have sufficient privileges for PR 7109 in repo dotnet/msbuild<br>\r\n\n</samp>",
        "createdAt": "2021-12-02T19:50:57Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-12-02T21:42:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-12-02T21:43:00Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Renamed this for clarity. Personally, I understand `configurationId` as a concept more than `projectId`, although admittedly the `ProjectId`/`ProjectInstanceId` are exposed on a public API (`ProjectStartedEventArgs.ProjectId` and `BuildEventContext.ProjectInstanceId`) while internally it's pretty much always `configurationId`. So I'm open to reverting the rename if desired, but my reasoning is that this is an \"internal\" name here so should be consistent with other internal usage. Also having both `projectId` and `projectContextId` in the same signature wold be quite confusing.",
              "createdAt": "2021-12-01T23:09:46Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -477,15 +486,26 @@ MessageImportance MinimumRequiredMessageImportance\n         /// </summary>\n         /// <param name=\"nodeBuildEventContext\">The logging context of the node which is building this project.</param>\n         /// <param name=\"submissionId\">The id of the build submission.</param>\n-        /// <param name=\"projectId\">The id of the project instance which is about to start</param>\n+        /// <param name=\"configurationId\">The id of the project configuration which is about to start</param>",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald Is `Scheduler.InProcNodeId` (value of `1`) actually appropriate here, or should I use `BuildEventContext.InvalidNodeId` (value of `-2`)?",
              "createdAt": "2021-12-01T23:11:38Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -483,9 +483,12 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-        }\n+            => new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)\n+            // Because the project cache always runs on the in-proc node, always associate logging with the in-proc node.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Hmm. I think I prefer `Invalid` because this isn't really running on a node, it's running on the scheduler.",
              "createdAt": "2021-12-01T23:17:04Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -483,9 +483,12 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-        }\n+            => new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)\n+            // Because the project cache always runs on the in-proc node, always associate logging with the in-proc node.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, apparently this makes a difference in the console logger. If I use the in-proc node, then it seems to next correctly (and magically; no idea how it actually is working... some sort of buffering?). If I use an invalid node then they seem to become \"deferred messages\".\r\n\r\nIf I use `BuildEventContext.InvalidNodeId`:\r\n![image](https://user-images.githubusercontent.com/6445614/144334207-cc4ce65b-c9cf-4747-a3f4-4f3ba61f3b5d.png)\r\n\r\nIf I use `Scheduler.InProcNodeId`:\r\n![image](https://user-images.githubusercontent.com/6445614/144334088-f9ec61f3-d207-425c-a121-1eba8922ddcd.png)\r\n",
              "createdAt": "2021-12-02T00:09:17Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -483,9 +483,12 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-        }\n+            => new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)\n+            // Because the project cache always runs on the in-proc node, always associate logging with the in-proc node.",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "A convincing reason!",
              "createdAt": "2021-12-02T19:43:25Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs",
              "diffHunk": "@@ -483,9 +483,12 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n-        }\n+            => new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)\n+            // Because the project cache always runs on the in-proc node, always associate logging with the in-proc node.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": ":cough:",
              "createdAt": "2021-12-01T23:14:23Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -38,7 +37,8 @@ internal ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, BuildReque\n             requestEntry.RequestConfiguration.Project.PropertiesToBuildWith,\n             requestEntry.RequestConfiguration.Project.ItemsToBuildWith,\n             requestEntry.Request.ParentBuildEventContext,\n-            requestEntry.RequestConfiguration.Project.EvaluationId\n+            requestEntry.RequestConfiguration.Project.EvaluationId,\n+            requestEntry.Request.BuildEventContext.ProjectContextId // TODO: Bad",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Woops, yea that was \"between commits\". The overall change should be correct though, so if we squash merge it should be fine. If you prefer to merge multiple commits I'll go back and clean it up. Let me know.",
              "createdAt": "2021-12-01T23:37:29Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -38,7 +37,8 @@ internal ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, BuildReque\n             requestEntry.RequestConfiguration.Project.PropertiesToBuildWith,\n             requestEntry.RequestConfiguration.Project.ItemsToBuildWith,\n             requestEntry.Request.ParentBuildEventContext,\n-            requestEntry.RequestConfiguration.Project.EvaluationId\n+            requestEntry.RequestConfiguration.Project.EvaluationId,\n+            requestEntry.Request.BuildEventContext.ProjectContextId // TODO: Bad",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "ah, sorry, I reviewed by commit and didn't notice that you'd fixed it. No problem just having it in history . . .",
              "createdAt": "2021-12-02T19:50:04Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -38,7 +37,8 @@ internal ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, BuildReque\n             requestEntry.RequestConfiguration.Project.PropertiesToBuildWith,\n             requestEntry.RequestConfiguration.Project.ItemsToBuildWith,\n             requestEntry.Request.ParentBuildEventContext,\n-            requestEntry.RequestConfiguration.Project.EvaluationId\n+            requestEntry.RequestConfiguration.Project.EvaluationId,\n+            requestEntry.Request.BuildEventContext.ProjectContextId // TODO: Bad",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the point of this?",
              "createdAt": "2021-12-02T21:33:45Z",
              "path": "src/Build.UnitTests/BackEnd/MockLoggingService.cs",
              "diffHunk": "@@ -474,9 +474,11 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(0, 0, 0, 0, 0, 0, 0);\n-        }\n+            => new BuildEventContext(0, 0, 0, 0, 0, 0, 0);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ah, MockLoggingService. Needs to implement the interface.",
              "createdAt": "2021-12-02T21:37:55Z",
              "path": "src/Build.UnitTests/BackEnd/MockLoggingService.cs",
              "diffHunk": "@@ -474,9 +474,11 @@ public void LogBuildFinished(bool success)\n \n         /// <inheritdoc />\n         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)\n-        {\n-            return new BuildEventContext(0, 0, 0, 0, 0, 0, 0);\n-        }\n+            => new BuildEventContext(0, 0, 0, 0, 0, 0, 0);\n+\n+        /// <inheritdoc />\n+        public BuildEventContext CreateProjectCacheBuildEventContext(int submissionId, int evaluationId, int projectInstanceId)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It is I, the nit-picker:\r\n\r\n```suggestion\r\n        }\r\n\r\n        /// <summary>\r\n```",
              "createdAt": "2021-12-03T23:03:02Z",
              "path": "src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs",
              "diffHunk": "@@ -810,26 +811,149 @@ public void ProjectStartedNullParentBuildEventContext()\n         /// Test the case where ProjectFile is good and TargetNames is null.\n         /// Expect an event to be logged\n         /// </summary>\n+        [Theory]\n+        [InlineData(\"ProjectFile\", null)] // Good project File and null target names\n+        [InlineData(\"ProjectFile\", \"\")] // Good project File and empty target names\n+        [InlineData(null, null)] // Null project file and null target names\n+        [InlineData(\"\", null)] // // Empty project file null target Names\n+        [InlineData(\"\", \"\")] // Empty project File and Empty target Names\n+        [InlineData(\"ProjectFile\", \"TargetNames\")] // Good inputs\n+        public void ProjectStartedEventTests(string projectFile, string targetNames)\n+        {\n+            string message;\n+            if (!String.IsNullOrEmpty(targetNames))\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithTargetNames\", Path.GetFileName(projectFile), targetNames);\n+            }\n+            else\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithDefaultTargets\", Path.GetFileName(projectFile));\n+            }\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(\"file\", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", new string[0], null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, \"4.0\");\n+            cache.AddConfiguration(config);\n+\n+            BuildEventContext context = service.LogProjectStarted(s_buildEventContext, 1, 2, s_buildEventContext, projectFile, targetNames, null, null);\n+            BuildEventContext parentBuildEventContext = s_buildEventContext;\n+            VerifyProjectStartedEventArgs(service, context.ProjectContextId, message, projectFile, targetNames, parentBuildEventContext, context);\n+\n+            service.ResetProcessedBuildEvent();\n+        }\n+        /// <summary>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        }\r\n\r\n        /// <summary>\r\n```",
              "createdAt": "2021-12-03T23:03:10Z",
              "path": "src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs",
              "diffHunk": "@@ -810,26 +811,149 @@ public void ProjectStartedNullParentBuildEventContext()\n         /// Test the case where ProjectFile is good and TargetNames is null.\n         /// Expect an event to be logged\n         /// </summary>\n+        [Theory]\n+        [InlineData(\"ProjectFile\", null)] // Good project File and null target names\n+        [InlineData(\"ProjectFile\", \"\")] // Good project File and empty target names\n+        [InlineData(null, null)] // Null project file and null target names\n+        [InlineData(\"\", null)] // // Empty project file null target Names\n+        [InlineData(\"\", \"\")] // Empty project File and Empty target Names\n+        [InlineData(\"ProjectFile\", \"TargetNames\")] // Good inputs\n+        public void ProjectStartedEventTests(string projectFile, string targetNames)\n+        {\n+            string message;\n+            if (!String.IsNullOrEmpty(targetNames))\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithTargetNames\", Path.GetFileName(projectFile), targetNames);\n+            }\n+            else\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithDefaultTargets\", Path.GetFileName(projectFile));\n+            }\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(\"file\", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", new string[0], null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, \"4.0\");\n+            cache.AddConfiguration(config);\n+\n+            BuildEventContext context = service.LogProjectStarted(s_buildEventContext, 1, 2, s_buildEventContext, projectFile, targetNames, null, null);\n+            BuildEventContext parentBuildEventContext = s_buildEventContext;\n+            VerifyProjectStartedEventArgs(service, context.ProjectContextId, message, projectFile, targetNames, parentBuildEventContext, context);\n+\n+            service.ResetProcessedBuildEvent();\n+        }\n+        /// <summary>\n+        /// Expect the returned BuildEventContext to have the provided ProjectContextId\n+        /// </summary>\n         [Fact]\n-        public void ProjectStartedEventTests()\n+        public void ProjectStartedProvidedProjectContextId()\n         {\n-            // Good project File and null target names\n-            LogProjectStartedTestHelper(\"ProjectFile\", null);\n+            const int SubmissionId = 1;\n+            const int EvaluationId = 2;\n+            const int ConfigurationId = 3;\n+            const string ProjectFile = \"SomeProjectFile\";\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(ProjectFile, new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", Array.Empty<string>(), null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(ConfigurationId, data, \"4.0\");\n+            cache.AddConfiguration(config);\n+\n+            BuildEventContext projectCacheBuildEventContext = service.CreateProjectCacheBuildEventContext(SubmissionId, EvaluationId, ConfigurationId, ProjectFile);\n+            projectCacheBuildEventContext.NodeId.ShouldBe(Scheduler.InProcNodeId);\n+            projectCacheBuildEventContext.ProjectContextId.ShouldNotBe(BuildEventContext.InvalidProjectContextId);\n+\n+            BuildEventContext nodeBuildEventContext = new BuildEventContext(Scheduler.InProcNodeId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n+            BuildEventContext projectStartedBuildEventContext = service.LogProjectStarted(\n+                nodeBuildEventContext,\n+                submissionId: SubmissionId,\n+                configurationId: ConfigurationId,\n+                parentBuildEventContext: BuildEventContext.Invalid,\n+                projectFile: ProjectFile,\n+                targetNames: \"TargetNames\",\n+                properties: null,\n+                items: null,\n+                evaluationId: EvaluationId,\n+                projectContextId: projectCacheBuildEventContext.ProjectContextId);\n+            projectStartedBuildEventContext.ProjectContextId.ShouldBe(projectCacheBuildEventContext.ProjectContextId);\n+        }\n+        /// <summary>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        }\r\n\r\n        /// <summary>\r\n```",
              "createdAt": "2021-12-03T23:03:25Z",
              "path": "src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs",
              "diffHunk": "@@ -810,26 +811,149 @@ public void ProjectStartedNullParentBuildEventContext()\n         /// Test the case where ProjectFile is good and TargetNames is null.\n         /// Expect an event to be logged\n         /// </summary>\n+        [Theory]\n+        [InlineData(\"ProjectFile\", null)] // Good project File and null target names\n+        [InlineData(\"ProjectFile\", \"\")] // Good project File and empty target names\n+        [InlineData(null, null)] // Null project file and null target names\n+        [InlineData(\"\", null)] // // Empty project file null target Names\n+        [InlineData(\"\", \"\")] // Empty project File and Empty target Names\n+        [InlineData(\"ProjectFile\", \"TargetNames\")] // Good inputs\n+        public void ProjectStartedEventTests(string projectFile, string targetNames)\n+        {\n+            string message;\n+            if (!String.IsNullOrEmpty(targetNames))\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithTargetNames\", Path.GetFileName(projectFile), targetNames);\n+            }\n+            else\n+            {\n+                message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"ProjectStartedPrefixForTopLevelProjectWithDefaultTargets\", Path.GetFileName(projectFile));\n+            }\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(\"file\", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", new string[0], null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, \"4.0\");\n+            cache.AddConfiguration(config);\n+\n+            BuildEventContext context = service.LogProjectStarted(s_buildEventContext, 1, 2, s_buildEventContext, projectFile, targetNames, null, null);\n+            BuildEventContext parentBuildEventContext = s_buildEventContext;\n+            VerifyProjectStartedEventArgs(service, context.ProjectContextId, message, projectFile, targetNames, parentBuildEventContext, context);\n+\n+            service.ResetProcessedBuildEvent();\n+        }\n+        /// <summary>\n+        /// Expect the returned BuildEventContext to have the provided ProjectContextId\n+        /// </summary>\n         [Fact]\n-        public void ProjectStartedEventTests()\n+        public void ProjectStartedProvidedProjectContextId()\n         {\n-            // Good project File and null target names\n-            LogProjectStartedTestHelper(\"ProjectFile\", null);\n+            const int SubmissionId = 1;\n+            const int EvaluationId = 2;\n+            const int ConfigurationId = 3;\n+            const string ProjectFile = \"SomeProjectFile\";\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(ProjectFile, new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", Array.Empty<string>(), null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(ConfigurationId, data, \"4.0\");\n+            cache.AddConfiguration(config);\n+\n+            BuildEventContext projectCacheBuildEventContext = service.CreateProjectCacheBuildEventContext(SubmissionId, EvaluationId, ConfigurationId, ProjectFile);\n+            projectCacheBuildEventContext.NodeId.ShouldBe(Scheduler.InProcNodeId);\n+            projectCacheBuildEventContext.ProjectContextId.ShouldNotBe(BuildEventContext.InvalidProjectContextId);\n+\n+            BuildEventContext nodeBuildEventContext = new BuildEventContext(Scheduler.InProcNodeId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n+            BuildEventContext projectStartedBuildEventContext = service.LogProjectStarted(\n+                nodeBuildEventContext,\n+                submissionId: SubmissionId,\n+                configurationId: ConfigurationId,\n+                parentBuildEventContext: BuildEventContext.Invalid,\n+                projectFile: ProjectFile,\n+                targetNames: \"TargetNames\",\n+                properties: null,\n+                items: null,\n+                evaluationId: EvaluationId,\n+                projectContextId: projectCacheBuildEventContext.ProjectContextId);\n+            projectStartedBuildEventContext.ProjectContextId.ShouldBe(projectCacheBuildEventContext.ProjectContextId);\n+        }\n+        /// <summary>\n+        /// Expect an exception to be thrown if an unknown project context id is passed in for the in-proc node\n+        /// </summary>\n+        [Fact]\n+        public void ProjectStartedProvidedUnknownProjectContextIdInProcNode()\n+        {\n+            const int SubmissionId = 1;\n+            const int EvaluationId = 2;\n+            const int ConfigurationId = 3;\n+            const string ProjectFile = \"SomeProjectFile\";\n+            const int ProjectContextId = 123;\n+\n+            MockHost componentHost = new MockHost();\n+            ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);\n+            ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);\n+\n+            BuildRequestData data = new BuildRequestData(ProjectFile, new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), \"toolsVersion\", Array.Empty<string>(), null);\n+            BuildRequestConfiguration config = new BuildRequestConfiguration(ConfigurationId, data, \"4.0\");\n+            cache.AddConfiguration(config);\n \n-            // Good project File and empty target names\n-            LogProjectStartedTestHelper(\"ProjectFile\", string.Empty);\n+            BuildEventContext nodeBuildEventContext = new BuildEventContext(Scheduler.InProcNodeId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);\n+            Assert.Throws<InternalErrorException>(() =>\n+            {\n+                service.LogProjectStarted(\n+                    nodeBuildEventContext,\n+                    submissionId: SubmissionId,\n+                    configurationId: ConfigurationId,\n+                    parentBuildEventContext: BuildEventContext.Invalid,\n+                    projectFile: ProjectFile,\n+                    targetNames: \"TargetNames\",\n+                    properties: null,\n+                    items: null,\n+                    evaluationId: EvaluationId,\n+                    projectContextId: ProjectContextId);\n+            });\n+        }\n+        /// <summary>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}