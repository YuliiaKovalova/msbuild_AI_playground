{
  "number": 7720,
  "title": "Enable tasks require for building WinUI projects in dotnet build",
  "body": "Build some tasks for .NET 6 that were previously .NET Framework only (but are really Windows-only, and should work fine in `dotnet build`).\r\n\r\nFixes #7452",
  "state": "MERGED",
  "createdAt": "2022-06-20T20:42:10Z",
  "updatedAt": "2022-06-23T18:57:31Z",
  "closedAt": "2022-06-23T18:57:29Z",
  "mergedAt": "2022-06-23T18:57:29Z",
  "additions": 115,
  "deletions": 6,
  "changedFiles": 9,
  "headRefName": "winui-tasks",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.3"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ea4f86f90ad6d6651413e91eb215d38ead23e9ec",
          "message": "Enable tasks needed for WinUI projects",
          "committedDate": "2022-06-20T20:31:56Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "07909fd16b8b8affea4333fb91de882788343afc",
          "message": "Lock to Windows only",
          "committedDate": "2022-06-20T20:36:36Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "48599a43d3b13366a6d4fb5b0b5e4ebc42231132",
          "message": "Enable tests",
          "committedDate": "2022-06-20T20:40:11Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1e3d640bd23e19ed6fa45c7482531a5fb7f20b6",
          "message": "fixup! Enable tests",
          "committedDate": "2022-06-20T22:06:54Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebb690c08ed09ad9173c6543f2eb47c327d0b92a",
          "message": "#if around CodeBase",
          "committedDate": "2022-06-21T18:41:24Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Comment was made before the most recent commit for PR 7720 in repo dotnet/msbuild",
        "createdAt": "2022-06-20T22:19:01Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "@dellis1972 @eerhardt, with this I can build a template WinUI app--do either of you have a more complicated repo I can run some tests on to make sure I'm not missing something obvious?",
        "createdAt": "2022-06-21T14:55:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One test to try is setting `<WindowsPackageType>None</WindowsPackageType>` in your WinUI project. `dotnet build` / `dotnet publish`.\r\n\r\nThat should make a publish folder with an xcopyable Windows app .exe. From my testing before, doing that should cause `GetInstalledSDKLocations` task to be executed (which failed previously). It would be good to verify the task was run with a binlog.",
        "createdAt": "2022-06-21T15:06:35Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Looks like the template did that for me, and it successfully builds, though when run I get\r\n\r\n```\r\n---------------------------\r\nWinUIApp1.exe - This application could not be started\r\n---------------------------\r\nThis application requires the Windows App Runtime\r\n    Version 1.1-preview3\r\n    (MSIX package version >= 1000.485.2229.0)\r\n\r\nDo you want to install a compatible Windows App Runtime now?\r\n---------------------------\r\nYes   No   \r\n---------------------------\r\n```\r\n\r\nDoes that indicate a build problem or is it expected?",
        "createdAt": "2022-06-21T15:14:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Looks like the template did that for me, and it successfully builds\r\n\r\nDid you check if the `GetInstalledSDKLocations` was executed?\r\n\r\n> This application requires the Windows App Runtime\r\nDoes that indicate a build problem or is it expected?\r\n\r\nyeah, that is expected. You can get rid of that by setting `<WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>` in your project. See https://docs.microsoft.com/en-us/windows/apps/package-and-deploy/self-contained-deploy/deploy-self-contained-apps",
        "createdAt": "2022-06-21T15:23:03Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Awesome, thanks @eerhardt!\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/174871121-3f27502f-fa5d-4efa-9e83-41cc58c5742e.png)\r\n",
        "createdAt": "2022-06-21T18:22:45Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Design question: In prior versions of the SDK, attempting to run this task would fail unconditionally because there was no `UsingTask` for it. Now it might pass or might do something unexpected on Windows. Should we add a changewave check that makes it unconditionally fail, in case that was somehow critical to someone? I can't think of a way that it might have been, and generally \"removing an unconditional error\" is not considered a breaking change, so I lean toward \"no\".",
              "createdAt": "2022-06-21T14:44:04Z",
              "path": "src/Tasks/GetInstalledSDKLocations.cs",
              "diffHunk": "@@ -122,6 +124,12 @@ public string TargetPlatformIdentifier\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                Log.LogErrorWithCodeFromResources(\"General.TaskRequiresWindows\", nameof(GetInstalledSDKLocations));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "To summarize what Rainer's suggesting (based on our conversation offline):\r\n\r\nCalling this task would outright fail anyone's build (previously). This change would let the task run, which is _technically_ undesirable behavior for the customer that expects this task to fail their build for some reason. The only situations I can think of where fixing this would put customers in a bad state is one where _the customer is already in a bad state_ (they could be using the `Error` task), so I'm not convinced this is an issue we need to worry about.\r\n\r\nDue diligence: @marcpopMSFT, please tell us we don't need to worry about this \ud83d\ude43",
              "createdAt": "2022-06-22T20:40:09Z",
              "path": "src/Tasks/GetInstalledSDKLocations.cs",
              "diffHunk": "@@ -122,6 +124,12 @@ public string TargetPlatformIdentifier\n         /// </summary>\n         public override bool Execute()\n         {\n+            if (!NativeMethodsShared.IsWindows)\n+            {\n+                Log.LogErrorWithCodeFromResources(\"General.TaskRequiresWindows\", nameof(GetInstalledSDKLocations));",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This was flagged by a NETSDK analyzer error: `CodeBase` doesn't work on Core. It sounds like it's ok to use `Location` everywhere; anybody see a need to `#if` it?",
              "createdAt": "2022-06-21T14:44:52Z",
              "path": "src/Tasks/GetSDKReferenceFiles.cs",
              "diffHunk": "@@ -1084,7 +1091,7 @@ internal bool IsAssemblyListCacheFileUpToDate(string sdkIdentity, string sdkRoot\n                 string currentAssembly = String.Empty;\n                 try\n                 {\n-                    currentAssembly = Assembly.GetExecutingAssembly().CodeBase;\n+                    currentAssembly = Assembly.GetExecutingAssembly().Location;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "When you run on .NET Framework there can be a difference, for example when you are running shadow copied, downloaded from the internet, or loaded from memory. I'm not sure if any of those are supported by MSBuild.\r\n\r\nTo be 100% \"safe\", you could `#if`. I guess I'd go back and see why someone used CodeBase, my guess is that there is a reason.",
              "createdAt": "2022-06-21T18:33:33Z",
              "path": "src/Tasks/GetSDKReferenceFiles.cs",
              "diffHunk": "@@ -1084,7 +1091,7 @@ internal bool IsAssemblyListCacheFileUpToDate(string sdkIdentity, string sdkRoot\n                 string currentAssembly = String.Empty;\n                 try\n                 {\n-                    currentAssembly = Assembly.GetExecutingAssembly().CodeBase;\n+                    currentAssembly = Assembly.GetExecutingAssembly().Location;",
              "author": {
                "login": "eerhardt"
              }
            },
            {
              "body": "Hmm. Microsoft-internal (+ VPN) link: https://vstfdevdiv/DevDiv2/DevDiv/_versionControl/changeset/394484/\r\n\r\nIt was in the initial checkin, so it wasn't a bugfix we can easily examine in isolation and there's no specific comment on reasoning. I'll go ahead and `#if`.",
              "createdAt": "2022-06-21T18:39:53Z",
              "path": "src/Tasks/GetSDKReferenceFiles.cs",
              "diffHunk": "@@ -1084,7 +1091,7 @@ internal bool IsAssemblyListCacheFileUpToDate(string sdkIdentity, string sdkRoot\n                 string currentAssembly = String.Empty;\n                 try\n                 {\n-                    currentAssembly = Assembly.GetExecutingAssembly().CodeBase;\n+                    currentAssembly = Assembly.GetExecutingAssembly().Location;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}