{
  "number": 7013,
  "title": "CurrentHost was not properly set when DisableInProcNode = false",
  "body": "Fixes #6782\r\nFollow-up of #6890\r\n\r\n### Context\r\nTried `DisableInProcNode = false` and couldn't make it work.\r\nAfter some investigations, it turns out the code in `NodeProviderOutOfProcBase.GetCurrentHost()` has some issues:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/24b33188f385cee07804cc63ec805216b3f8b72f/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L593\r\n\r\nIn my case, `CurrentMSBuildToolsDirectory` returns `C:\\Program Files\\dotnet\\sdk\\6.0.100\\MSBuild.dll`.\r\n`FileUtilities.GetFolderAbove()` 2 levels makes it try to resolve `dotnet.exe` from `C:\\Program Files\\dotnet\\sdk\\dotnet.exe` instead of `C:\\Program Files\\dotnet\\dotnet.exe`.\r\nI believe this is because the filename itself was not taken into account (it counts as 1 extra step for `FileUtilities.GetFolderAbove()`)\r\n\r\n### Changes Made\r\nUsed `CurrentMSBuildToolsDirectory` rather than `CurrentMSBuildExePath`.\r\nAnother option would be to use 3 for `FileUtilities.GetFolderAbove`, but since the function explicitely contains \"folder\" in its name, I preferred to avoid the case where it is later changed to ignore the top-level file rather than considering it as a folder.\r\n\r\n### Testing\r\nI tested with a simple console app.\r\n(Note: without being careful it could quickly crash the PC as mentioned in #6782 because it calls itself in infinite loop (instead of `dotnet.exe`), unless you add some check on `args.Length` as done in this test code)\r\n\r\n```C#\r\nusing Microsoft.Build.Execution;\r\nusing Microsoft.Build.Locator;\r\n\r\n// Avoid infinite loop => system crash (until MSBuild bug to properly resolve dotnet.exe is fixed)\r\nif (args.Length > 0) return;\r\n\r\nvar projectPath = @\"C:\\dev\\ConsoleApp8\\ConsoleApp8.csproj\";\r\n\r\nMSBuildLocator.RegisterDefaults();\r\nRunTest();\r\n\r\nvoid RunTest()\r\n{\r\n    var mainBuildManager = new BuildManager();\r\n    var pc = new Microsoft.Build.Evaluation.ProjectCollection();\r\n    var parameters = new BuildParameters(pc) { DisableInProcNode = true };\r\n\r\n    // Run a MSBuild /t:Restore <projectfile>\r\n    var request = new BuildRequestData(projectPath, new Dictionary<string, string>(), null, new[] { \"Restore\" }, null, BuildRequestDataFlags.None);\r\n    mainBuildManager.Build(parameters, request);\r\n}\r\n```\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-11-03T14:29:26Z",
  "updatedAt": "2021-11-29T12:35:34Z",
  "closedAt": "2021-11-05T09:00:34Z",
  "mergedAt": "2021-11-05T09:00:34Z",
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "wrong_currenthost",
  "isDraft": false,
  "author": {
    "login": "xen2"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3ccd988276ba45b0efdd4cd9272cbed78fca5cbb",
          "message": "Since MSBuild.exe filename was not taken into account with GetFolderAbove count, dotnet executable was looked up in sdk subfolder",
          "committedDate": "2021-11-03T14:17:00Z",
          "author": {
            "name": "Virgile Bello",
            "email": "virgile@stride3d.net"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Actually, I looked again, and I have a dotnet.exe in both `dotnet` and `sdk`. I'm not sure which is \"standard;\" I should probably make sure it's expected in `dotnet` but not `sdk`.",
        "createdAt": "2021-11-03T22:27:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Sounds like it's weird that I have dotnet.exe in sdk, so this looks good. \ud83d\udc4d",
        "createdAt": "2021-11-03T22:46:20Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Actually, I looked again, and I have a dotnet.exe in both dotnet and sdk. I'm not sure which is \"standard;\" I should probably make sure it's expected in dotnet but not sdk.\r\n\r\nHa, that explains it!\r\nDouble-checked on two computers and both of them have it only in `dotnet` top-level folder, not in `sdk`.\r\n\r\nIn that case, feel free to switch to the other approach `FileUtilities.GetFolderAbove(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, 3)` rather than `FileUtilities.GetFolderAbove(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, 2)` if you prefer.",
        "createdAt": "2021-11-04T00:06:35Z",
        "author": {
          "login": "xen2"
        }
      },
      {
        "body": "I don't really have a preference between the two, but I can check in our PR review meeting whether anyone else does.",
        "createdAt": "2021-11-04T06:46:42Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Ran exactly into this bug today, I was going mad! Then I debugged and found also the issue, but found that it was also already fixed here, thank you @xen2! \ud83e\udd17 ",
        "createdAt": "2021-11-29T08:51:46Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> Ran exactly into this bug today, I was going mad! Then I debugged and found also the issue, but found that it was also already fixed here, thank you @xen2! \ud83e\udd17\r\n\r\nSmall world! ;)\r\nYou're welcome!",
        "createdAt": "2021-11-29T12:35:16Z",
        "author": {
          "login": "xen2"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}