{
  "number": 8082,
  "title": "#5982 adding FEATURE_OS_APIS ifdef.",
  "body": "#5982 \r\n\r\nThe above collaboration makes sense for this specific issue, these Operating Systems APIs are only available in .NET 5.0 so adding the const FEATURE_OS_APIS only when it is available in .NET 5.0 and defining those ifdefs in the constant file to ensure it only gets added to the dictionary at that point in time.\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2022-10-22T03:09:45Z",
  "updatedAt": "2023-02-28T22:27:26Z",
  "closedAt": "2023-02-28T22:27:26Z",
  "mergedAt": null,
  "additions": 22,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "#5982-expose-operting-system-apis",
  "isDraft": true,
  "author": null,
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8c82cc4340c3f3d42856eeae2c5db61ccaaf112d",
          "message": "#5982 adding FEATURE_OS_APIS ifdef.",
          "committedDate": "2022-10-22T02:10:39Z",
          "author": {
            "name": "Mike Mulchrone",
            "email": "mulchronemike0191@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "969e62f2f3e7955273f3479f01fcf881898d42ad",
          "message": "#5982 moving constants to the appropriate property group.",
          "committedDate": "2022-10-24T22:04:54Z",
          "author": {
            "name": "Mike Mulchrone",
            "email": "mulchronemike0191@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9828dc962225c0f53da52e6d53d37a30ddad257f",
          "message": "#5982 adding unit test",
          "committedDate": "2022-10-24T23:40:44Z",
          "author": {
            "name": "Mike Mulchrone",
            "email": "mulchronemike0191@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hey @WingZer0o, just wanted to check in--anything we can do to help you move forward here?",
        "createdAt": "2022-12-05T20:37:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm going to close this for now but would be happy if you want to pick it up again.",
        "createdAt": "2023-02-28T22:27:26Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This kind of condition is a bit of a gotcha. The APIs were added in .NET 5.0, but we don't actually target that--we now target .NET 7.0. So this won't be defined! Instead you can use a compatibility check:\r\n\r\n```suggestion\r\n   <PropertyGroup Condition=\"$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net5.0'))\">\r\n```\r\n\r\nBut we already have a few conditions like this, so I'd put it in the `'$(TargetFramework)' == 'netcoreapp2.1' or '$(TargetFramework)' == '$(LatestDotNetCoreForMSBuild)'` block above.",
              "createdAt": "2022-10-24T13:59:15Z",
              "path": "src/Directory.BeforeCommon.targets",
              "diffHunk": "@@ -117,4 +117,8 @@\n     <FeatureMSIORedist>true</FeatureMSIORedist>\n   </PropertyGroup>\n \n+   <PropertyGroup Condition=\"'$(TargetFramework)' == 'net5.0'\">",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So what you are saying here is the net5.0 property group can be replaced entirely with `<PropertyGroup Condition=\"$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net5.0'))\">`.\r\n\r\nAs far as the test cases go, I will take a look at the existing test cases.",
              "createdAt": "2022-10-24T16:27:41Z",
              "path": "src/Directory.BeforeCommon.targets",
              "diffHunk": "@@ -117,4 +117,8 @@\n     <FeatureMSIORedist>true</FeatureMSIORedist>\n   </PropertyGroup>\n \n+   <PropertyGroup Condition=\"'$(TargetFramework)' == 'net5.0'\">",
              "author": null
            },
            {
              "body": "I have made the following changes and added a test to compensate for the addition in the Constants file. Let me know your thoughts.",
              "createdAt": "2022-10-24T23:41:36Z",
              "path": "src/Directory.BeforeCommon.targets",
              "diffHunk": "@@ -117,4 +117,8 @@\n     <FeatureMSIORedist>true</FeatureMSIORedist>\n   </PropertyGroup>\n \n+   <PropertyGroup Condition=\"'$(TargetFramework)' == 'net5.0'\">",
              "author": null
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you describe a bit more what the intent of this test is? Most of the tests in this file are of the form \"Expand a property expression and validate the results\", which is more or less what I expected here--but maybe I don't see what you're aiming for.",
              "createdAt": "2022-10-25T15:07:45Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "What I was testing was the addition of this to the ConcurrentDictionary within the Constants file to check for its existence and being added properly. However, I am a little lost on testing the other change listed in `src/Directory.BeforeCommon.targets`\r\n\r\nCan you expand on that a little for me? ",
              "createdAt": "2022-10-25T15:52:20Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": null
            },
            {
              "body": "The initial feature request #5982 was to add some new property functions where they're available, so users can use the new functions in their MSBuild logic or conditions.\r\n\r\nYou've done that, by adding `OperatingSystem` to the \"available types\". So there should be some new expressions, like `$([System.OperatingSystem]::IsWindows())`, that should work now. I'd like to see some tests that use those expressions.\r\n\r\nThis helps with two things:\r\n\r\n1. It guards against regressions, accidentally removing those APIs.\r\n2. It shows us in this PR what the user experience for the expressions is.",
              "createdAt": "2022-10-26T16:16:11Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This does not seem to be the case with IsWindows(), IsMacOS(), and IsLinux() when adding test cases as inline data as the commit was associated with a suggestion listed in the original commented. Any suggestions?\r\n\r\n```\r\nMicrosoft.Build.UnitTests.Evaluation.Expander_Tests.PropertyFunctionRuntimeInformation(propertyFunction: \"$([System.OperatingSystem]::IsWindows)\", expectedExpansion: \"True\")\r\n  \u2009Source:\u2009Expander_Tests.cs\u2009line\u20092837\r\n  \u2009Duration:\u2009142 ms\r\n\r\n  Message:\u2009\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException : The function \"IsWindows\" on type \"System.OperatingSystem\" is not available for execution as an MSBuild property function.  C:\\Code\\dotnet\\msbuild\\artifacts\\bin\\Microsoft.Build.Engine.UnitTests\\Debug\\net472\\mock.targets\r\n\r\n  Stack Trace:\u2009\r\nProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\u2009line\u2009405\r\nProjectErrorUtilities.ThrowInvalidProject[T1,T2](IElementLocation elementLocation, String resourceName, T1 arg0, T2 arg1)\u2009line\u200998\r\nFunction`1.Execute(Object objectInstance, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation)\u2009line\u20093368\r\nPropertyExpander`1.ExpandPropertyBody(String propertyBody, Object propertyValue, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem)\u2009line\u20091374\r\nPropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem, LoggingContext loggingContext)\u2009line\u20091222\r\nPropertyExpander`1.ExpandPropertiesLeaveEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties, IFileSystem fileSystem, LoggingContext loggingContext)\u2009line\u20091083\r\nExpander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation, LoggingContext loggingContext)\u2009line\u2009446\r\nExpander_Tests.PropertyFunctionRuntimeInformation(String propertyFunction, String expectedExpansion)\u2009line\u20092853\r\n```\r\n",
              "createdAt": "2022-10-27T01:18:00Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": null
            },
            {
              "body": "It looks like that's failing on the `net472` binaries of MSBuild, which makes sense, since the API is new to .NET 5.\r\n\r\nSo now . . . what should we do about that? We haven't yet exposed any types' functions that are available only on one TargetFramework. The easiest thing would be to make the tests conditional as well (with `[SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, \"OperatingSystem is .NET 5.0+\")]`).\r\n\r\nHowever, I'd like to improve the experience when they're used on .NET Framework MSBuild (like \"in Visual Studio\", a common use case :)). The most complicated option would be to reimplement all of the APIs so that the property function versions of them worked everywhere, but that might be a fair amount of code to maintain. Though maybe we could hardcode a bunch of it: `IsWindows=true` and everything else is false, for instance.\r\n\r\nOr we could try to have a better error that says something like `OperatingSystem methods are not available on .NET Framework`.\r\n\r\n@Forgind did you have a design for this in mind when you marked the bug as good-first-issue?",
              "createdAt": "2022-10-27T13:56:03Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I marked this as good-first-issue in 2020, so I have no recollection of what I was thinking. I suspect that I hadn't considered the net472 case and had assumed the PR would look just like what this one does now.\r\n\r\nThat said, I glanced through the list of APIs not available in net472, and only two of them looked like they can't be either \"return false\" or \"return true\", and those last two should be fairly easy to write, so I'm in favor of reimplementing them all.",
              "createdAt": "2022-10-27T15:03:04Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I agree, we can assume running on net472 means running on Windows (i.e. ignore the Mono msbuild use case).\r\n\r\nFor the reimplementation of `IsWindowsVersionAtLeast()` we can just borrow the code from here: https://github.com/dotnet/runtime/blob/8c496e71e9617db81dc2c2747cf1d74bc1a84ad2/src/libraries/System.Private.CoreLib/src/System/OperatingSystem.cs#L305-L327",
              "createdAt": "2022-10-28T10:17:05Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "Thanks for the assistance, this turned out to be a little more complicated of an error that I originally thought, but I would be more than happy to work through it with everyone involved and eventually get it merged and closed out and make sure I am understanding the change\r\n\r\nWhere would be the best place to reimplement? The project where these tests are associated with? \r\n\r\nThose inline tests were mimicked just as you described, IsWindows() = true, IsMac() = false, IsLinux() = false.\r\n\r\nSo since this is not available as a property function and you described an extensive solution beyond making the InLineData tests that I was working on conditional. The target framework is currently .NET 5.0+ which currently allows backwards compatibility if implemented correctly for our .net4.7.2 error right here? ",
              "createdAt": "2022-10-28T12:07:18Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": null
            },
            {
              "body": "> this turned out to be a little more complicated of an error that I originally thought\r\n\r\nYes, sorry about that!\r\n\r\n> but I would be more than happy to work through it with everyone involved and eventually get it merged and closed out and make sure I am understanding the change\r\n\r\nFabulous! We're not in a big rush to have this feature and we can work with you along the way.\r\n\r\nI think the easiest way to implement this would be to create a new type named `System.OperatingSystem` here in our codebase, with `#if` around it so it only compiles for .NET Framework.\r\n\r\nWe do this for a couple of other things, for example for `SupportedOSPlatform`:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/3777dcaf7edb3e86a070037ba53e742dd1872873/src/Framework/SupportedOSPlatform.cs#L4-L6\r\n\r\nThat should make all the code compile without the `#if`s in `Constants.cs`, but it won't make the tests pass until you've also implemented all of the methods of `OperatingSystem` in the simplified form we're thinking of where you can hardcode most of them to be the right return value on Windows.",
              "createdAt": "2022-10-28T14:36:44Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> For the reimplementation of `IsWindowsVersionAtLeast()` we can just borrow the code from here: https://github.com/dotnet/runtime/blob/8c496e71e9617db81dc2c2747cf1d74bc1a84ad2/src/libraries/System.Private.CoreLib/src/System/OperatingSystem.cs#L305-L327\r\n\r\nUnfortunately I don't think we can, because it uses `Environment.OSVersion`, which differs on Windows between net472 and net5.0+: https://learn.microsoft.com/dotnet/core/compatibility/core-libraries/5.0/environment-osversion-returns-correct-version\r\n\r\n@WingZer0123 for now make that method throw a `PlatformNotSupportedException` while we figure out what to do.",
              "createdAt": "2022-10-28T14:38:28Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Am I correct in the checking the references for SupportOSPlatform.\r\n\r\nThese seems quite similar to what you are describing. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n`\r\n    [SupportedOSPlatform(\"windows\")]\r\n    private static bool IsLongPathsEnabledRegistry()\r\n    {\r\n        using (RegistryKey fileSystemKey = Registry.LocalMachine.OpenSubKey(WINDOWS_FILE_SYSTEM_REGISTRY_KEY))\r\n        {\r\n            object longPathsEnabledValue = fileSystemKey?.GetValue(WINDOWS_LONG_PATHS_ENABLED_VALUE_NAME, 0);\r\n            return fileSystemKey != null && Convert.ToInt32(longPathsEnabledValue) == 1;\r\n        }\r\n    }`\r\n\r\n`\r\n    /// <summary>\r\n    /// Gets a flag indicating if we are running under Linux\r\n    /// </summary>\r\n    [SupportedOSPlatformGuard(\"linux\")]\r\n    internal static bool IsLinux\r\n    {\r\n#if CLR2COMPATIBILITY\r\n            get { return false; }\r\n#else\r\n        get { return RuntimeInformation.IsOSPlatform(OSPlatform.Linux); }\r\n#endif\r\n    }`\r\n\r\n`    internal static bool IsBSD\r\n    {\r\n#if CLR2COMPATIBILITY\r\n            get { return false; }\r\n#else\r\n        get\r\n        {\r\n            return RuntimeInformation.IsOSPlatform(OSPlatform.Create(\"FREEBSD\")) ||\r\n                   RuntimeInformation.IsOSPlatform(OSPlatform.Create(\"NETBSD\")) ||\r\n                   RuntimeInformation.IsOSPlatform(OSPlatform.Create(\"OPENBSD\"));\r\n        }\r\n#endif\r\n    }`",
              "createdAt": "2022-10-28T20:13:32Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": null
            },
            {
              "body": "@rainersigwald the `Environment.OSVersion` should work fine even for net472 since msbuild is opting in to the compatibility manifest here: https://github.com/dotnet/msbuild/blob/9bcc06cbe19ae2482ab18eab90a82fd079b26897/src/MSBuild/MSBuild.exe.manifest#L22-L23",
              "createdAt": "2022-10-31T11:44:27Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "akoeplinger"
              }
            },
            {
              "body": "I noticed that doesn't include Windows 11, but I think Windows 11 was basically a shell over Windows 10, so that's fine, right?",
              "createdAt": "2022-10-31T15:24:45Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes that's fine, `8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a` means both Win10 and Win11 according to https://learn.microsoft.com/en-us/windows/win32/sysinfo/targeting-your-application-at-windows-8-1",
              "createdAt": "2022-11-02T15:44:04Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -2850,6 +2851,18 @@ public void PropertyFunctionRuntimeInformation(string propertyFunction, string e\n             Assert.Equal(expectedExpansion, result);\n         }\n \n+        [Fact]\n+        public void TestFeatureOSAPIs()",
              "author": {
                "login": "akoeplinger"
              }
            }
          ]
        }
      }
    ]
  }
}