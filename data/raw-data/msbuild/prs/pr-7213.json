{
  "number": 7213,
  "title": "Provide nice error when an environment variable is not expanded on the command line, including the full command line for all switch errors Fixes #7210",
  "body": "Fixes #7210\r\n\r\n### Context\r\nWhen you specify an environment variable on the command line or via Directory.Build.rsp, and that environment variable is not defined, it puts the literal in instead. MSBuild misinterprets that as a duplicate project file and fails. This works around that.\r\n\r\n### Changes Made\r\nIgnore environment variable \"projects\" if another project is found. (Otherwise doesn't check.)\r\n\r\n### Testing\r\nTried with a simplified repro. Fixed the problem.\r\n\r\n### Notes\r\nMaybe consider giving a better error message instead of ignoring the environment variable?",
  "state": "MERGED",
  "createdAt": "2022-01-04T01:21:29Z",
  "updatedAt": "2022-02-18T21:57:12Z",
  "closedAt": "2022-02-18T21:57:11Z",
  "mergedAt": "2022-02-18T21:57:11Z",
  "additions": 552,
  "deletions": 111,
  "changedFiles": 20,
  "headRefName": "ignore-environment-variable-switches",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "66ae06afe3b347f5f81892d0a2d57563354a7ce3",
          "message": "Ignore env variable switches",
          "committedDate": "2022-01-04T01:19:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df38393ccc238f93ffb0a471e2120c7ef4f8ea84",
          "message": "Log command line on switch error",
          "committedDate": "2022-01-05T00:17:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab4b6ba82a352439506f2355b2184148f4d17a52",
          "message": "Add hack to string",
          "committedDate": "2022-01-05T00:40:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4bf36137e2d25216771d6214ad763d0c07c420b9",
          "message": "Always point to the environment variable",
          "committedDate": "2022-01-05T19:34:33Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11a2359263c9328e7ab05efc31828e6afa968590",
          "message": "Create new error",
          "committedDate": "2022-01-05T19:54:19Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "062b313daf516e7840da7d45e7c5996fa595c6ce",
          "message": "Move check earlier\n\nIt otherwise only caught an environment variable if it was the first \"project\" switch but not if it was the duplicate.",
          "committedDate": "2022-01-05T20:16:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41427e43c544370988cecf1b13d3b886eac4e691",
          "message": "Add test for new behavior",
          "committedDate": "2022-01-05T20:16:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76afef41ab5f337cafa74a7665475713df44493a",
          "message": "Delete unused method",
          "committedDate": "2022-01-05T20:18:01Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "44a87c90e7960280d1581dea0db6389918258461",
          "message": "Include rsps in command line",
          "committedDate": "2022-01-06T20:21:09Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d9d090e9d5435e756f0e7c24c409b6a9c7dff37",
          "message": "Use TestEnvironment",
          "committedDate": "2022-01-06T20:46:57Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ba4283c4a80e711f58dd4a73b27e42e357d7021e",
          "message": "Include response file paths in command line",
          "committedDate": "2022-01-07T20:37:54Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e9d5c707bd4b77f82afcb999cc352114344e7c5",
          "message": "Fix resource string",
          "committedDate": "2022-01-07T20:39:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6174c75846dd7754b482a0dfdc2c1fc0eb1837a6",
          "message": "Build",
          "committedDate": "2022-01-07T20:39:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad31551207f078219cdac2c7cdad8796857efdfe",
          "message": "Adjust format",
          "committedDate": "2022-01-10T18:20:25Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4753c7d607dca1d0edd749e028d6e61d57c61d78",
          "message": "Merge branch 'main' into ignore-environment-variable-switches",
          "committedDate": "2022-01-10T18:22:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af1f39c598e14be3f1224b54586fccde1558ae00",
          "message": "Make it easier on the loc team",
          "committedDate": "2022-01-14T23:28:07Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "596a7c1e12923479c0e5f17c210bdd28b09a4041",
          "message": "Even easier",
          "committedDate": "2022-01-14T23:30:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5af781574742766d9db1da3a7e6431bac9ebe257",
          "message": "Properly make easier",
          "committedDate": "2022-01-14T23:34:53Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55e99553906414438d780de4b4d05c215bfd501e",
          "message": "Release properly\n\nCouldn't find this for some reason. Found it now",
          "committedDate": "2022-01-15T00:12:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7fcf1778f8198a7bba2cbdb4111ceda1bfca98a9",
          "message": "Use ' ' and make tests pass\n\nI don't know why it suddenly realized that Execute sets MSBuildLoadMicrosoftTargetsReadOnly and started complaining about it, but it did. This effectively unsets it after relevant tests.",
          "committedDate": "2022-01-20T00:56:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e624a5e0e7587a712186519d1a5b5c9346ec668a",
          "message": "Merge branch 'main' into ignore-environment-variable-switches",
          "committedDate": "2022-01-31T16:46:07Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5113a6709b685d8b24cd95d02d3e18f658867769",
          "message": "PR comments + added test",
          "committedDate": "2022-02-08T00:11:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f50182afd9fe24e31108c48a7ba5637d665a8a34",
          "message": "Little TestEnvironment cleanup",
          "committedDate": "2022-02-08T00:12:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50894f04f63c75e2a255c8a6edd70fff551d932c",
          "message": "GC SwitchesFromResponseFile",
          "committedDate": "2022-02-08T18:50:05Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4244db29ac03f473c08adca4547a3b123bfd16aa",
          "message": "Ensure initialized",
          "committedDate": "2022-02-08T23:13:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c6c2c35b05312bc1fa5c892def6faf81e15023a",
          "message": "Keep switches in order",
          "committedDate": "2022-02-14T17:38:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af3d14bccadbb47c5b01de2a25e08731601e7c31",
          "message": "Merge branch 'main' into ignore-environment-variable-switches",
          "committedDate": "2022-02-16T01:49:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d7e80f24b95f784dcdbd8f2d6bcba50a6ad37cf",
          "message": "Add commandLine arg",
          "committedDate": "2022-02-16T17:00:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@CarlHeinrichs, what do you think?",
        "createdAt": "2022-01-04T01:21:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I am generally opposed to addressing the linked issue by overriding the default (and OS specific) command line expansion rules. If the shell passes `%nonexistentvar%` to all programs by design, there's IMO no good reason to have MSBuild try to detect and ignore it. It's not systematic and not worth the added complexity. I'm afraid that detecting and expanding environment variables in our code is asking for trouble. `IsEnvironmentVariable`, for example, should be platform specific, e.g. `$somevar` doesn't work on Windows.",
        "createdAt": "2022-01-04T09:10:13Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I am generally opposed to addressing the linked issue by overriding the default (and OS specific) command line expansion rules. If the shell passes `%nonexistentvar%` to all programs by design, there's IMO no good reason to have MSBuild try to detect and ignore it. It's not systematic and not worth the added complexity. I'm afraid that detecting and expanding environment variables in our code is asking for trouble. `IsEnvironmentVariable`, for example, should be platform specific, e.g. `$somevar` doesn't work on Windows.\r\n\r\nI should definitely make IsEnvironmentVariable platform-specific. I can't think of a reason you'd want an unexpanded environment variable as part of your command line, though. I'm not exactly expanding it but ignoring it if and only if there's an alternate \"project\" candidate. The other option I was considering is detecting something like that and giving a custom error about \"why do you have an unexpanded environment variable in your command line?\" Since current behavior is throwing a confusing error, that would be just making the error clearer rather than changing behavior.\r\n\r\nI could also put the current change under a changewave if you'd like or have it additionally throw a warning such that it doesn't silently ignore an environment variable. Open to any of these.",
        "createdAt": "2022-01-04T14:57:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "My point is that many tools could use a similar logic (hey, this argument looks like an unexpanded env var and the command line otherwise makes sense so let's ignore it) but they don't. We shouldn't do it just because in our case it happens to be easy.\r\n\r\nI would vote for adding a good command line logging instead. For example, I don't think you will find the full command line (as combined from response files) in the binlog today. When MSBuild is complaining about a command line argument or switch, it should always print the full command line together with the error so the user can tell what went wrong. I believe that it would have been enough for the linked issue to be a non-issue.",
        "createdAt": "2022-01-04T21:11:07Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I like the idea of adding the full command line to switch-related error messages, so I added that. I'm still tempted to, instead of silently ignoring unexpanded env vars, make a new error that says \"hey, your env var didn't expand, see?\" instead. How would you feel about that?\r\n\r\n(And also make the env var style os-specific.)",
        "createdAt": "2022-01-05T00:21:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@ladipro, I consider my last commit the \"minimum\" version, but there are a couple caveats. Most notably, we have to parse the command line not include the .rsp before parsing the .rsp because there can be switches that tell you to parse a particular .rsp, and there can be a switch to say not to parse the automatically found one. That means that if there's an error earlier in the command line parsing process, there's no way it will know about switches from .rsps, so the command line will necessarily be incomplete.\r\n\r\nThat aside, this should give you the full command line (not including extra switches from .rsps) plus any switches from .rsps we'd parsed. It does not specify where switches come from, but I can do something a little hacky to make that pretty clean. Currently, I add .rsp switches via:\r\n`commandLine += ' ' + string.Join(\" \", argsFromResponseFile);`\r\n\r\nWhat would you think of making that:\r\n`commandLine += $\"' '{responseFile}': '{string.Join(\" \", argsFromResponseFile)}\";`\r\n\r\nThe advantage of something like that is that I can specify the exact path of every response file, and it's quick and easy. That doesn't include any words because they wouldn't be localized. Alternatively, I can add another string to localize like:\r\n`' Switches added from response file '{0}': '{1}` and fill in 0 and 1 appropriately on this line.",
        "createdAt": "2022-01-06T20:34:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind thank you! \r\n\r\n> What would you think of making that:\r\n> commandLine += $\"' '{responseFile}': '{string.Join(\" \", argsFromResponseFile)}\";\r\n\r\nThis would be awesome. I don't have a strong opinion on the format of the output. Presumably the above would be clear enough.\r\n\r\nCode-wise, I'm wondering if passing the command line string to `CommandLineSwitches` at construction time instead of having it as an argument of all `Set*Error` methods wouldn't be cleaner. With the change to print `responseFile: argsFromResponseFile` there should be no need to pass it by ref and mutate it, if I'm understanding the logic correctly.\r\n\r\n",
        "createdAt": "2022-01-07T10:45:12Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> @Forgind thank you!\r\n> \r\n> > What would you think of making that:\r\n> > commandLine += $\"' '{responseFile}': '{string.Join(\" \", argsFromResponseFile)}\";\r\n> \r\n> This would be awesome. I don't have a strong opinion on the format of the output. Presumably the above would be clear enough.\r\n\r\nGreat! Will do.\r\n\r\n> Code-wise, I'm wondering if passing the command line string to `CommandLineSwitches` at construction time instead of having it as an argument of all `Set*Error` methods wouldn't be cleaner. With the change to print `responseFile: argsFromResponseFile` there should be no need to pass it by ref and mutate it, if I'm understanding the logic correctly.\r\n\r\nThis is tricky, and it might be easier to explain in PR reviews, but \"the\" command line mutates every time we encounter an .rsp. It's important to have all the switches we are currently aware of because if we've found an error, it must be among those, but at no point until we're finished are we confident that we have all the switches in our command line. If we were to try to set it once upon creating the CommandLineSwitches object, it would have the command line input by the user, but as you pointed out, that misses extra switches we find later. Since the list of known switches can change after processing any individual switch, we won't really have a chance to refresh CommandLineSwitches unless we either make a lot of them or accept that it isn't an intrinsic part of the object.",
        "createdAt": "2022-01-07T20:12:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Change format to:\r\nExpanded command line: 'msbuild thing /switch'\r\n<fullPath>\\Directory.Build.rsp: /switch2 /switch3\r\n<fullPath>\\Directory.Build2.rsp: /switch4 /switch5\r\n\r\n(Or full command line)",
        "createdAt": "2022-01-10T16:37:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Now looks like:\r\n```\r\nMSBUILD : error MSB1060: Undefined environment variable passed in as switch.\r\n    Full command line: artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\MSBuild.exe  C:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\myTemp.csproj\r\nC:\\Users\\forgind\\Desktop\\Archives\\Bug-specific\\myTemp\\Directory.Build.rsp: %ENVIRONMENTVARIABLE%\r\nSwitch: %ENVIRONMENTVARIABLE%\r\n\r\nFor switch syntax, type \"MSBuild -help\"\r\n```",
        "createdAt": "2022-01-10T18:20:09Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can this use the `TestEnvironment` class? Similar to this:\r\nhttps://github.com/dotnet/msbuild/blob/797fd829a374a880f63fd4eea4ea6990404c48f4/src/Build.OM.UnitTests/Definition/Project_Tests.cs#L4104-L4106",
              "createdAt": "2022-01-06T13:16:07Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1176,11 +1176,37 @@ public void ProcessWarnAsMessageSwitchEmpty()\n         {\n             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();\n \n-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { \"/warnasmessage\" }), commandLineSwitches);\n+            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { \"/warnasmessage\" }), commandLineSwitches, /*This is a hack so the error message contains the exact resource string.*/ \"{0}\");\n \n             VerifySwitchError(commandLineSwitches, \"/warnasmessage\", AssemblyResources.GetString(\"MissingWarnAsMessageParameterError\"));\n         }\n \n+        /// <summary>\n+        /// Verify that environment variables cannot be passed in as command line switches.\n+        /// Also verifies that the full command line is properly passed when a switch error occurs.\n+        /// </summary>\n+        [Fact]\n+        public void ProcessEnvironmentVariableSwitch()\n+        {\n+            string savedEnvironmentVariable = Environment.GetEnvironmentVariable(\"ENVIRONMENTVARIABLE\");",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                        string.Join(' ', commandLine)\r\n```\r\n",
              "createdAt": "2022-01-10T15:35:24Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -604,7 +603,12 @@ string commandLine\n                         ref inputResultsCaches,\n                         ref outputResultsCache,\n                         ref lowPriority,\n-                        recursing: false\n+                        recursing: false,\n+#if FEATURE_GET_COMMANDLINE\n+                        commandLine\n+#else\n+                        string.Join(\" \", commandLine)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "There isn't a string.Join overload for char.",
              "createdAt": "2022-01-14T22:45:19Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -604,7 +603,12 @@ string commandLine\n                         ref inputResultsCaches,\n                         ref outputResultsCache,\n                         ref lowPriority,\n-                        recursing: false\n+                        recursing: false,\n+#if FEATURE_GET_COMMANDLINE\n+                        commandLine\n+#else\n+                        string.Join(\" \", commandLine)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> There isn't a string.Join overload for char.\r\n\r\n. . . until .NET Core 2.0.",
              "createdAt": "2022-01-14T23:01:56Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -604,7 +603,12 @@ string commandLine\n                         ref inputResultsCaches,\n                         ref outputResultsCache,\n                         ref lowPriority,\n-                        recursing: false\n+                        recursing: false,\n+#if FEATURE_GET_COMMANDLINE\n+                        commandLine\n+#else\n+                        string.Join(\" \", commandLine)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This code is under an ifdef and does not run on Framework. Just a nit and I wrote it only because you're adding a call to the `char`-taking overload in this PR (line ~1653).",
              "createdAt": "2022-01-17T08:45:08Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -604,7 +603,12 @@ string commandLine\n                         ref inputResultsCaches,\n                         ref outputResultsCache,\n                         ref lowPriority,\n-                        recursing: false\n+                        recursing: false,\n+#if FEATURE_GET_COMMANDLINE\n+                        commandLine\n+#else\n+                        string.Join(\" \", commandLine)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I thought I'd tested it at that location, but I was wrong. Thanks!",
              "createdAt": "2022-01-18T16:07:37Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -604,7 +603,12 @@ string commandLine\n                         ref inputResultsCaches,\n                         ref outputResultsCache,\n                         ref lowPriority,\n-                        recursing: false\n+                        recursing: false,\n+#if FEATURE_GET_COMMANDLINE\n+                        commandLine\n+#else\n+                        string.Join(\" \", commandLine)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ah, now I see why the command line string has to be passed by ref. I'm still not sure if this is the best approach. Ideally the command line would be kept in a more structured format (e.g. a dictionary mapping \"response file\" to \"args from the response file\") and maybe in a static field so it doesn't have to be passed around everywhere.\r\n\r\nAside from nicer and more allocation friendly code, It would make it possible to have a richer format of the output. I'm having second thoughts about the bare `<response file>: <command line>`, whether it is clear/expressive enough. ",
              "createdAt": "2022-01-11T21:21:35Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1901,25 +1911,27 @@ private static void GatherResponseFileSwitch(string unquotedCommandLineArg, Comm\n                             }\n                         }\n \n-                        GatherCommandLineSwitches(argsFromResponseFile, commandLineSwitches);\n+                        commandLine += $\"\\n{responseFile}: {string.Join(\" \", argsFromResponseFile)}\";",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it's unfortunate that so many resource strings are changed and will need attention from the localization team. Do you think the command line could be printed using only one shared resource instead?",
              "createdAt": "2022-01-11T21:24:48Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -83,7 +83,8 @@\n     </comment>\n   </data>\n   <data name=\"CannotAutoDisableAutoResponseFile\" UESanitized=\"false\" Visibility=\"Public\">\n-    <value>MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</value>\n+    <value>MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.\n+    Full command line: {0}</value>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not provide a default argument so you don't have to pass an empty string to these many callers?",
              "createdAt": "2022-01-31T17:48:16Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -476,7 +476,8 @@ public void TargetsSwitchIdentificationTests(string @switch)\n         public void TargetsSwitchParameter()\n         {\n             CommandLineSwitches switches = new CommandLineSwitches();\n-            MSBuildApp.GatherCommandLineSwitches(new List<string>() { \"/targets:targets.txt\" }, switches);\n+            string command = string.Empty;\n+            MSBuildApp.GatherCommandLineSwitches(new List<string>() { \"/targets:targets.txt\" }, switches, command);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point \ud83d\ude42",
              "createdAt": "2022-02-07T19:43:33Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -476,7 +476,8 @@ public void TargetsSwitchIdentificationTests(string @switch)\n         public void TargetsSwitchParameter()\n         {\n             CommandLineSwitches switches = new CommandLineSwitches();\n-            MSBuildApp.GatherCommandLineSwitches(new List<string>() { \"/targets:targets.txt\" }, switches);\n+            string command = string.Empty;\n+            MSBuildApp.GatherCommandLineSwitches(new List<string>() { \"/targets:targets.txt\" }, switches, command);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this needed?",
              "createdAt": "2022-01-31T17:56:55Z",
              "path": "src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs",
              "diffHunk": "@@ -28,13 +28,12 @@ public class ProjectSchemaValidationHandlerTest\n          * \n          **********************************************************************/\n         [Fact]\n-        public void VerifyInvalidProjectSchema\n-            (\n-            )\n+        public void VerifyInvalidProjectSchema()\n         {\n             string[] msbuildTempXsdFilenames = Array.Empty<string>();\n             string projectFilename = null;\n             string oldValueForMSBuildOldOM = null;\n+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable(\"MSBuildLoadMicrosoftTargetsReadOnly\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I don't know why it suddenly started noticing this, but there's an invariant check that we didn't change any environment variables, and this one gets set automatically  early in Execute. This just ensures it isn't set before it checks that invariant.",
              "createdAt": "2022-02-07T19:43:02Z",
              "path": "src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs",
              "diffHunk": "@@ -28,13 +28,12 @@ public class ProjectSchemaValidationHandlerTest\n          * \n          **********************************************************************/\n         [Fact]\n-        public void VerifyInvalidProjectSchema\n-            (\n-            )\n+        public void VerifyInvalidProjectSchema()\n         {\n             string[] msbuildTempXsdFilenames = Array.Empty<string>();\n             string projectFilename = null;\n             string oldValueForMSBuildOldOM = null;\n+            string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable(\"MSBuildLoadMicrosoftTargetsReadOnly\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this really need to live for the full lifetime of the process? Isn't it transient and done with at the end of command-line parsing?",
              "createdAt": "2022-01-31T17:58:16Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -394,6 +396,8 @@ private struct DetectedParameterizedSwitch\n         private DetectedParameterizedSwitch[] _parameterizedSwitches;\n         // NOTE: the above arrays are instance members because this class is not required to be a singleton\n \n+        internal static Dictionary<string, string> SwitchesFromResponseFiles = new();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It doesn't...would it be sufficient to just set it to null after the command line parsing step is over? I can't attach it to an individual CommandLineSwitches object because we make multiple, and I'd need to somehow know about all the other ones and have them share what they'd parsed.",
              "createdAt": "2022-02-07T19:47:54Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -394,6 +396,8 @@ private struct DetectedParameterizedSwitch\n         private DetectedParameterizedSwitch[] _parameterizedSwitches;\n         // NOTE: the above arrays are instance members because this class is not required to be a singleton\n \n+        internal static Dictionary<string, string> SwitchesFromResponseFiles = new();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That's definitely better if you can't create it as a local and pass it to the individual objects.",
              "createdAt": "2022-02-08T15:15:53Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -394,6 +396,8 @@ private struct DetectedParameterizedSwitch\n         private DetectedParameterizedSwitch[] _parameterizedSwitches;\n         // NOTE: the above arrays are instance members because this class is not required to be a singleton\n \n+        internal static Dictionary<string, string> SwitchesFromResponseFiles = new();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If I make it as a local, it will live for the entire build unless I move around a lot of code. The function I would make it in is Xmake.Execute.",
              "createdAt": "2022-02-08T18:46:49Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -394,6 +396,8 @@ private struct DetectedParameterizedSwitch\n         private DetectedParameterizedSwitch[] _parameterizedSwitches;\n         // NOTE: the above arrays are instance members because this class is not required to be a singleton\n \n+        internal static Dictionary<string, string> SwitchesFromResponseFiles = new();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are there new tests for the rsp file stuff? I expected to see some here.",
              "createdAt": "2022-01-31T18:20:41Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -51,7 +51,8 @@ public void GatherCommandLineSwitchesTwoProperties()\n             var arguments = new List<string>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "What new tests are you thinking? I didn't change how we parse rsps or handle their switches; I just observe that they were parsed so we can tell you where a switch came from when we print the full command line.",
              "createdAt": "2022-02-07T19:46:13Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -51,7 +51,8 @@ public void GatherCommandLineSwitchesTwoProperties()\n             var arguments = new List<string>();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "At minimum, I'd say a test where there are some rsps and the test validates that they're in the error message.",
              "createdAt": "2022-02-07T19:48:13Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -51,7 +51,8 @@ public void GatherCommandLineSwitchesTwoProperties()\n             var arguments = new List<string>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, gotcha. I'll see if I can find a relevant test to modify.",
              "createdAt": "2022-02-07T19:49:27Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -51,7 +51,8 @@ public void GatherCommandLineSwitchesTwoProperties()\n             var arguments = new List<string>();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // Set \"expanded\" content to match the placeholder so the verify\r\n            // can use the exact resource string as \"expected\".\r\n            string command = \"{0}\";\r\n```",
              "createdAt": "2022-02-14T15:21:05Z",
              "path": "src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs",
              "diffHunk": "@@ -1195,11 +1195,35 @@ public void ProcessWarnAsMessageSwitchEmpty()\n         {\n             CommandLineSwitches commandLineSwitches = new CommandLineSwitches();\n \n-            MSBuildApp.GatherCommandLineSwitches(new List<string>(new[] { \"/warnasmessage\" }), commandLineSwitches);\n+            string command = \"{0}\"; // This is a hack so the error message contains the exact resource string.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need to be order-preserving? Should it be a `List<(string Path, string Contents)>`?",
              "createdAt": "2022-02-14T15:27:43Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -394,6 +396,8 @@ private struct DetectedParameterizedSwitch\n         private DetectedParameterizedSwitch[] _parameterizedSwitches;\n         // NOTE: the above arrays are instance members because this class is not required to be a singleton\n \n+        internal static Dictionary<string, string> SwitchesFromResponseFiles = new();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}