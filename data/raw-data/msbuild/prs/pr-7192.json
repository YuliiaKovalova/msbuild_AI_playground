{
  "number": 7192,
  "title": "Convert CodeAnalysis.ruleset to .globalconfig",
  "body": "Follow up to #7174 to CodeAnalysis.ruleset to .globalconfig\r\n\r\nThis will need to be looked at once the other PRs in the set are merged. It will need to be updated to enable each of the rules.",
  "state": "MERGED",
  "createdAt": "2021-12-30T23:33:26Z",
  "updatedAt": "2022-01-07T23:34:40Z",
  "closedAt": "2022-01-07T22:32:58Z",
  "mergedAt": "2022-01-07T22:32:58Z",
  "additions": 1138,
  "deletions": 402,
  "changedFiles": 8,
  "headRefName": "convert-codeanalysis-ruleset-to-editorconfig",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "79748da532efa73f173284a21f994d636b990e52",
          "message": "Convert CodeAnalysis.ruleset to .editorconfig",
          "committedDate": "2021-12-30T23:31:39Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a9aeaf73ccde2918772bd813968085599d95e656",
          "message": "convert ruleset to globalconfig",
          "committedDate": "2021-12-31T00:55:11Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ec10d5f6dc5d4ad9807393900733186d513441c0",
          "message": "changed based on suggestions in PR",
          "committedDate": "2021-12-31T01:07:02Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6566afb8a2d65e8628191a342be5dc35df5261b9",
          "message": "Fix the Analyzers so they actually work",
          "committedDate": "2021-12-31T03:10:44Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "922a961e6f4d75ec30ccfe7e6c24e98c69c53152",
          "message": "Set dotnet_diagnostic.AD0001.severity = warning",
          "committedDate": "2021-12-31T03:19:05Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0eff5d00b5661a444288ac1a5bed26ec1a6ecfdd",
          "message": "update StyleCop",
          "committedDate": "2021-12-31T03:29:04Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9101e88e99b99c69f9cb52558e66a3e211283bd5",
          "message": "canonical casing of the prop name is EnableNETAnalyzers",
          "committedDate": "2022-01-03T21:23:03Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d52a95920f056cd2318507ac4a817d93ec6bb81",
          "message": "disable code analyzers on deprecated projects",
          "committedDate": "2022-01-03T21:56:07Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed3ce874acce659d817ef196ef84206bdb5d56f0",
          "message": "disable code analyzers on deprecated projects",
          "committedDate": "2022-01-03T22:23:57Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0dc8f2ebb6708c88edbbae83bcb2e971522de42e",
          "message": "Different .globalconfig for test projects",
          "committedDate": "2022-01-03T22:59:02Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4f32a64b11e1d7c7328f249cc9d950b492a4e11",
          "message": "Fix white space on Packages.props",
          "committedDate": "2022-01-03T23:03:22Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9408c9d9a81c7a850f31d3d43ac1b74b7a4ff7e9",
          "message": "Changes from code review",
          "committedDate": "2022-01-03T23:37:26Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e916530fed34648c45b401e4aa7f4bd3b028363",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Sam Harwell <sam@tunnelvisionlabs.com>",
          "committedDate": "2022-01-07T07:56:32Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ff55aa5d8cd08fecdc58bb04589cea5ef496f6f",
          "message": "Use SDK Analyzer",
          "committedDate": "2022-01-07T08:01:59Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12841f33b237f9fd46ca3a071af4416c12a00ca7",
          "message": "Only list differences in Common.Test.globalconfig",
          "committedDate": "2022-01-07T08:05:03Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e2968cc8239258f978ab947281c9d498660b134",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-01-07T21:24:29Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Nice, thank you for the quick turnaround!",
        "createdAt": "2021-12-30T23:43:12Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "\ud83d\udcdd GitHub won't let me remove the \"request changes\" status while the pull request is marked as a draft. The second round of comments are suggestions; there are no more critical matters that would warrant a Request Changes state from me.",
        "createdAt": "2021-12-31T01:02:23Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "I'm guessing the \"suggestions\" are places where there are quite a few instances in MSBuild that would need changing, and that can be done in a separate PR. (Without knowing what they are, they might even be things we don't really want.)",
        "createdAt": "2021-12-31T01:07:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> \ud83d\udcdd GitHub won't let me remove the \"request changes\" status while the pull request is marked as a draft. The second round of comments are suggestions; there are no more critical matters that would warrant a Request Changes state from me.\r\n\r\nI can make it go away by requesting a review from you \ud83d\ude42",
        "createdAt": "2021-12-31T01:08:47Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I made the changes and we aren't getting build failures. I am pretty sure the stylecop analyzer isn't running and I don't know why.",
        "createdAt": "2021-12-31T01:18:03Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "OK!!! I think that fixes the analyzers!\r\n\r\nBasically the way it was setup, it was using the built in analyzer and not using the nuget package. So I switched it to use a GlobalPackageReference and set EnableNetAnalyzers.\r\n\r\nI then added the rules which were returning warnings which were breaking the build and set them to suggestion. \r\n\r\nWe will address the fixes for those in separate PRs.\r\n\r\nI suggest we merge this and rebase all the existing PRs for the analyzer fixes.",
        "createdAt": "2021-12-31T03:15:02Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "I think I have sorted it so that the analyzers in the deprecated folder don't run. I have added a `Directory.Build.props` file to the deprecated folder to define a variable indicating that those projects are deprecated. This makes it a lot easier to exclude them using conditions.\r\n\r\nNext is making the so that we disable [SA1614](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1614.md) on test projects. Should I do this via a globalsupression file, or should we use a separate .globalconfig for test projects?",
        "createdAt": "2022-01-03T22:30:39Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "I have gone the separate test .globalconfig. This enables the team to select a different set of rules for test projects.",
        "createdAt": "2022-01-03T23:00:51Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Hi @elachlan! It looks like you were busy this new year! Unfortunately, I don't think we're going to be able to quickly review and merge 27 PRs. Since it sounds like this should go in first, should we focus on it, then reactivate the other fixes + rule-strengthening changes a bit more gradually over time? The simplifying changes @sharwell just proposed sound very nice to me.",
        "createdAt": "2022-01-04T18:15:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Hi @elachlan! It looks like you were busy this new year! Unfortunately, I don't think we're going to be able to quickly review and merge 27 PRs. Since it sounds like this should go in first, should we focus on it, then reactivate the other fixes + rule-strengthening changes a bit more gradually over time? The simplifying changes @sharwell just proposed sound very nice to me.\n\n@rainersigwald yes, this should get a merge first. Then each of the others. For the others I have purposely picked the ones with less changes to make it less of a burden.\n\nThis is probably more important because the analyzers were previously not working properly. Meaning new occurrences could slip through.",
        "createdAt": "2022-01-04T20:43:39Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Anyone feel free to jump in and sort the last bits. I am afk for the next few days.",
        "createdAt": "2022-01-04T21:32:42Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Thanks @elachlan!",
        "createdAt": "2022-01-07T22:33:30Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This should never be reduced to a severity less than `warning`\r\n\r\n```suggestion\r\n# Analyzer threw an exception\r\ndotnet_diagnostic.AD0001.severity = warning\r\n```",
              "createdAt": "2021-12-31T00:58:34Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": "Enabling this one doesn't cause a build error.",
              "createdAt": "2021-12-31T03:17:28Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd This should never be set to a severity below `warning`\r\n\r\n```suggestion\r\n# XML comments\r\ndotnet_diagnostic.SA0001.severity = warning\r\n```",
              "createdAt": "2021-12-31T00:59:50Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion\n+\n+# Ensure minimum API surface is respected\n+dotnet_diagnostic.BCL0001.severity = warning\n+\n+# AppContext default value expected to be true\n+dotnet_diagnostic.BCL0010.severity = warning\n+\n+# AppContext default value defined in if statement with incorrect pattern\n+dotnet_diagnostic.BCL0011.severity = warning\n+\n+# AppContext default value defined in if statement at root of switch case\n+dotnet_diagnostic.BCL0012.severity = warning\n+\n+# Invalid P/Invoke call\n+dotnet_diagnostic.BCL0015.severity = none\n+\n+# Invalid SR.Format call\n+dotnet_diagnostic.BCL0020.severity = warning\n+\n+# Do not declare static members on generic types\n+dotnet_diagnostic.CA1000.severity = none\n+\n+# Types that own disposable fields should be disposable\n+dotnet_diagnostic.CA1001.severity = none\n+\n+# Do not expose generic lists\n+dotnet_diagnostic.CA1002.severity = none\n+\n+# Use generic event handler instances\n+dotnet_diagnostic.CA1003.severity = none\n+\n+# Avoid excessive parameters on generic types\n+dotnet_diagnostic.CA1005.severity = none\n+\n+# Enums should have zero value\n+dotnet_diagnostic.CA1008.severity = none\n+\n+# Generic interface should also be implemented\n+dotnet_diagnostic.CA1010.severity = none\n+\n+# Abstract types should not have constructors\n+dotnet_diagnostic.CA1012.severity = none\n+\n+# Mark assemblies with CLSCompliant\n+dotnet_diagnostic.CA1014.severity = none\n+\n+# Mark assemblies with assembly version\n+dotnet_diagnostic.CA1016.severity = none\n+\n+# Mark assemblies with ComVisible\n+dotnet_diagnostic.CA1017.severity = none\n+\n+# Mark attributes with AttributeUsageAttribute\n+dotnet_diagnostic.CA1018.severity = warning\n+\n+# Define accessors for attribute arguments\n+dotnet_diagnostic.CA1019.severity = none\n+\n+# Use properties where appropriate\n+dotnet_diagnostic.CA1024.severity = none\n+\n+# Mark enums with FlagsAttribute\n+dotnet_diagnostic.CA1027.severity = none\n+\n+# Enum Storage should be Int32\n+dotnet_diagnostic.CA1028.severity = none\n+\n+# Use events where appropriate\n+dotnet_diagnostic.CA1030.severity = none\n+\n+# Do not catch general exception types\n+dotnet_diagnostic.CA1031.severity = none\n+\n+dotnet_diagnostic.CA1032.severity = none\n+\n+# Interface methods should be callable by child types\n+dotnet_diagnostic.CA1033.severity = none\n+\n+dotnet_diagnostic.CA1034.severity = none\n+\n+# Override methods on comparable types\n+dotnet_diagnostic.CA1036.severity = none\n+\n+# Avoid empty interfaces\n+dotnet_diagnostic.CA1040.severity = none\n+\n+# Provide ObsoleteAttribute message\n+dotnet_diagnostic.CA1041.severity = none\n+\n+# Use Integral Or String Argument For Indexers\n+dotnet_diagnostic.CA1043.severity = none\n+\n+# Properties should not be write only\n+dotnet_diagnostic.CA1044.severity = none\n+\n+# Do not overload equality operator on reference types\n+dotnet_diagnostic.CA1046.severity = none\n+\n+# Do not declare protected member in sealed type\n+dotnet_diagnostic.CA1047.severity = warning\n+\n+# Declare types in namespaces\n+dotnet_diagnostic.CA1050.severity = suggestion\n+\n+# Do not declare visible instance fields\n+dotnet_diagnostic.CA1051.severity = none\n+\n+# Static holder types should be Static or NotInheritable\n+dotnet_diagnostic.CA1052.severity = none\n+\n+# Uri parameters should not be strings\n+dotnet_diagnostic.CA1054.severity = none\n+\n+# Uri return values should not be strings\n+dotnet_diagnostic.CA1055.severity = none\n+\n+# Uri properties should not be strings\n+dotnet_diagnostic.CA1056.severity = none\n+\n+# Types should not extend certain base types\n+dotnet_diagnostic.CA1058.severity = none\n+\n+# Do not hide base class methods\n+dotnet_diagnostic.CA1061.severity = none\n+\n+# Validate arguments of public methods\n+dotnet_diagnostic.CA1062.severity = none\n+\n+# Implement IDisposable Correctly\n+dotnet_diagnostic.CA1063.severity = none\n+\n+# Exceptions should be public\n+dotnet_diagnostic.CA1064.severity = none\n+\n+# Do not raise exceptions in unexpected locations\n+dotnet_diagnostic.CA1065.severity = none\n+\n+# Implement IEquatable when overriding Object.Equals\n+dotnet_diagnostic.CA1066.severity = none\n+\n+# Override Object.Equals(object) when implementing IEquatable<T>\n+dotnet_diagnostic.CA1067.severity = none\n+\n+# CancellationToken parameters must come last\n+dotnet_diagnostic.CA1068.severity = none\n+\n+# Enums values should not be duplicated\n+dotnet_diagnostic.CA1069.severity = none\n+\n+# Do not declare event fields as virtual\n+dotnet_diagnostic.CA1070.severity = suggestion\n+\n+# Avoid using cref tags with a prefix\n+dotnet_diagnostic.CA1200.severity = suggestion\n+\n+# Do not pass literals as localized parameters\n+dotnet_diagnostic.CA1303.severity = none\n+\n+# Specify CultureInfo\n+dotnet_diagnostic.CA1304.severity = none\n+\n+# Specify IFormatProvider\n+dotnet_diagnostic.CA1305.severity = none\n+\n+# Specify StringComparison\n+dotnet_diagnostic.CA1307.severity = none\n+\n+# Normalize strings to uppercase\n+dotnet_diagnostic.CA1308.severity = none\n+\n+# Use ordinal stringcomparison\n+dotnet_diagnostic.CA1309.severity = none\n+\n+# P/Invokes should not be visible\n+dotnet_diagnostic.CA1401.severity = warning\n+\n+# Do not use 'OutAttribute' on string parameters for P/Invokes\n+dotnet_diagnostic.CA1417.severity = warning\n+\n+# Avoid excessive complexity\n+dotnet_diagnostic.CA1502.severity = none\n+\n+# Avoid unmaintainable code\n+dotnet_diagnostic.CA1505.severity = none\n+\n+# Avoid excessive class coupling\n+dotnet_diagnostic.CA1506.severity = none\n+\n+# Use nameof to express symbol names\n+dotnet_diagnostic.CA1507.severity = suggestion\n+\n+# Avoid dead conditional code\n+dotnet_diagnostic.CA1508.severity = none\n+\n+# Invalid entry in code metrics rule specification file\n+dotnet_diagnostic.CA1509.severity = none\n+\n+# Do not name enum values 'Reserved'\n+dotnet_diagnostic.CA1700.severity = none\n+\n+dotnet_diagnostic.CA1707.severity = none\n+\n+# Identifiers should have correct suffix\n+dotnet_diagnostic.CA1710.severity = none\n+\n+# Identifiers should not have incorrect suffix\n+dotnet_diagnostic.CA1711.severity = none\n+\n+# Do not prefix enum values with type name\n+dotnet_diagnostic.CA1712.severity = none\n+\n+dotnet_diagnostic.CA1714.severity = none\n+\n+# Identifiers should have correct prefix\n+dotnet_diagnostic.CA1715.severity = none\n+\n+# Identifiers should not match keywords\n+dotnet_diagnostic.CA1716.severity = none\n+\n+dotnet_diagnostic.CA1717.severity = none\n+\n+# Identifier contains type name\n+dotnet_diagnostic.CA1720.severity = none\n+\n+# Property names should not match get methods\n+dotnet_diagnostic.CA1721.severity = none\n+\n+# Type names should not match namespaces\n+dotnet_diagnostic.CA1724.severity = none\n+\n+# Review unused parameters\n+dotnet_diagnostic.CA1801.severity = none\n+\n+# Use literals where appropriate\n+dotnet_diagnostic.CA1802.severity = suggestion\n+\n+# Do not initialize unnecessarily\n+dotnet_diagnostic.CA1805.severity = suggestion\n+\n+dotnet_diagnostic.CA1806.severity = none\n+\n+# Initialize reference type static fields inline\n+dotnet_diagnostic.CA1810.severity = suggestion\n+\n+# Avoid uninstantiated internal classes\n+dotnet_diagnostic.CA1812.severity = none\n+\n+dotnet_diagnostic.CA1814.severity = none\n+\n+dotnet_diagnostic.CA1815.severity = none\n+\n+# Dispose methods should call SuppressFinalize\n+dotnet_diagnostic.CA1816.severity = none\n+\n+dotnet_diagnostic.CA1819.severity = none\n+\n+# Test for empty strings using string length\n+dotnet_diagnostic.CA1820.severity = none\n+\n+# Remove empty Finalizers\n+dotnet_diagnostic.CA1821.severity = warning\n+\n+# Mark members as static\n+dotnet_diagnostic.CA1822.severity = none\n+\n+# Avoid unused private fields\n+dotnet_diagnostic.CA1823.severity = suggestion\n+\n+# Mark assemblies with NeutralResourcesLanguageAttribute\n+dotnet_diagnostic.CA1824.severity = warning\n+\n+# Avoid zero-length array allocations.\n+dotnet_diagnostic.CA1825.severity = suggestion\n+\n+# Do not use Count() or LongCount() when Any() can be used\n+dotnet_diagnostic.CA1827.severity = warning\n+\n+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used\n+dotnet_diagnostic.CA1828.severity = warning\n+\n+# Use Length/Count property instead of Count() when available\n+dotnet_diagnostic.CA1829.severity = suggestion\n+\n+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.\n+dotnet_diagnostic.CA1830.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1831.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1832.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1833.severity = warning\n+\n+# Consider using 'StringBuilder.Append(char)' when applicable.\n+dotnet_diagnostic.CA1834.severity = suggestion\n+\n+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+dotnet_diagnostic.CA1835.severity = suggestion\n+\n+# Prefer IsEmpty over Count\n+dotnet_diagnostic.CA1836.severity = suggestion\n+\n+# Use 'Environment.ProcessId'\n+dotnet_diagnostic.CA1837.severity = suggestion\n+\n+# Avoid 'StringBuilder' parameters for P/Invokes\n+dotnet_diagnostic.CA1838.severity = suggestion\n+\n+# Dispose objects before losing scope\n+dotnet_diagnostic.CA2000.severity = none\n+\n+# Do not lock on objects with weak identity\n+dotnet_diagnostic.CA2002.severity = none\n+\n+# Consider calling ConfigureAwait on the awaited task\n+dotnet_diagnostic.CA2007.severity = suggestion\n+\n+# Do not create tasks without passing a TaskScheduler\n+dotnet_diagnostic.CA2008.severity = suggestion\n+\n+# Do not call ToImmutableCollection on an ImmutableCollection value\n+dotnet_diagnostic.CA2009.severity = warning\n+\n+# Avoid infinite recursion\n+dotnet_diagnostic.CA2011.severity = warning\n+\n+# Use ValueTasks correctly\n+dotnet_diagnostic.CA2012.severity = warning\n+\n+# Do not use ReferenceEquals with value types\n+dotnet_diagnostic.CA2013.severity = warning\n+\n+# Do not use stackalloc in loops.\n+dotnet_diagnostic.CA2014.severity = warning\n+\n+# Do not define finalizers for types derived from MemoryManager<T>\n+dotnet_diagnostic.CA2015.severity = warning\n+\n+# Forward the 'CancellationToken' parameter to methods that take one\n+dotnet_diagnostic.CA2016.severity = suggestion\n+\n+# Review SQL queries for security vulnerabilities\n+dotnet_diagnostic.CA2100.severity = none\n+\n+# Specify marshaling for P/Invoke string arguments\n+dotnet_diagnostic.CA2101.severity = none\n+\n+# Review visible event handlers\n+dotnet_diagnostic.CA2109.severity = none\n+\n+# Seal methods that satisfy private interfaces\n+dotnet_diagnostic.CA2119.severity = none\n+\n+# Do Not Catch Corrupted State Exceptions\n+dotnet_diagnostic.CA2153.severity = none\n+\n+# Do not raise reserved exception types\n+dotnet_diagnostic.CA2201.severity = none\n+\n+# Instantiate argument exceptions correctly\n+dotnet_diagnostic.CA2208.severity = suggestion\n+\n+# Non-constant fields should not be visible\n+dotnet_diagnostic.CA2211.severity = none\n+\n+# Disposable fields should be disposed\n+dotnet_diagnostic.CA2213.severity = none\n+\n+# Dispose methods should call base class dispose\n+dotnet_diagnostic.CA2215.severity = none\n+\n+# Disposable types should declare finalizer\n+dotnet_diagnostic.CA2216.severity = none\n+\n+dotnet_diagnostic.CA2219.severity = none\n+\n+# Override Equals on overloading operator equals\n+dotnet_diagnostic.CA2224.severity = none\n+\n+# Operator overloads have named alternates\n+dotnet_diagnostic.CA2225.severity = none\n+\n+# Operators should have symmetrical overloads\n+dotnet_diagnostic.CA2226.severity = none\n+\n+# Collection properties should be read only\n+dotnet_diagnostic.CA2227.severity = none\n+\n+# Overload operator equals on overriding value type Equals\n+dotnet_diagnostic.CA2231.severity = none\n+\n+# Pass system uri objects instead of strings\n+dotnet_diagnostic.CA2234.severity = none\n+\n+# Mark all non-serializable fields\n+dotnet_diagnostic.CA2235.severity = none\n+\n+# Provide correct arguments to formatting methods\n+dotnet_diagnostic.CA2241.severity = suggestion\n+\n+# Test for NaN correctly\n+dotnet_diagnostic.CA2242.severity = warning\n+\n+# Attribute string literals should parse correctly\n+dotnet_diagnostic.CA2243.severity = none\n+\n+# Do not duplicate indexed element initializations\n+dotnet_diagnostic.CA2244.severity = none\n+\n+# Do not assign a property to itself.\n+dotnet_diagnostic.CA2245.severity = warning\n+\n+# Assigning symbol and its member in the same statement.\n+dotnet_diagnostic.CA2246.severity = none\n+\n+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.\n+dotnet_diagnostic.CA2247.severity = warning\n+\n+# Provide correct 'enum' argument to 'Enum.HasFlag'\n+dotnet_diagnostic.CA2248.severity = warning\n+\n+# Consider using 'string.Contains' instead of 'string.IndexOf'\n+dotnet_diagnostic.CA2249.severity = suggestion\n+\n+# Do not use insecure deserializer BinaryFormatter\n+dotnet_diagnostic.CA2300.severity = none\n+\n+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder\n+dotnet_diagnostic.CA2301.severity = none\n+\n+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize\n+dotnet_diagnostic.CA2302.severity = none\n+\n+# Do not use insecure deserializer LosFormatter\n+dotnet_diagnostic.CA2305.severity = none\n+\n+# Do not use insecure deserializer NetDataContractSerializer\n+dotnet_diagnostic.CA2310.severity = none\n+\n+# Do not deserialize without first setting NetDataContractSerializer.Binder\n+dotnet_diagnostic.CA2311.severity = none\n+\n+# Ensure NetDataContractSerializer.Binder is set before deserializing\n+dotnet_diagnostic.CA2312.severity = none\n+\n+# Do not use insecure deserializer ObjectStateFormatter\n+dotnet_diagnostic.CA2315.severity = none\n+\n+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver\n+dotnet_diagnostic.CA2321.severity = none\n+\n+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing\n+dotnet_diagnostic.CA2322.severity = none\n+\n+# Do not use TypeNameHandling values other than None\n+dotnet_diagnostic.CA2326.severity = none\n+\n+# Do not use DataTable.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2350.severity = none\n+\n+# Do not use DataSet.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2351.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2352.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type\n+dotnet_diagnostic.CA2353.severity = none\n+\n+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2354.severity = none\n+\n+# Unsafe DataSet or DataTable type found in deserializable object graph\n+dotnet_diagnostic.CA2355.severity = none\n+\n+# Unsafe DataSet or DataTable type in web deserializable object graph\n+dotnet_diagnostic.CA2356.severity = none\n+\n+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data\n+dotnet_diagnostic.CA2361.severity = none\n+\n+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2362.severity = none\n+\n+# Review code for SQL injection vulnerabilities\n+dotnet_diagnostic.CA3001.severity = none\n+\n+# Review code for XSS vulnerabilities\n+dotnet_diagnostic.CA3002.severity = none\n+\n+# Review code for file path injection vulnerabilities\n+dotnet_diagnostic.CA3003.severity = none\n+\n+# Review code for information disclosure vulnerabilities\n+dotnet_diagnostic.CA3004.severity = none\n+\n+# Review code for LDAP injection vulnerabilities\n+dotnet_diagnostic.CA3005.severity = none\n+\n+# Review code for process command injection vulnerabilities\n+dotnet_diagnostic.CA3006.severity = none\n+\n+# Review code for open redirect vulnerabilities\n+dotnet_diagnostic.CA3007.severity = none\n+\n+# Review code for XPath injection vulnerabilities\n+dotnet_diagnostic.CA3008.severity = none\n+\n+# Review code for XML injection vulnerabilities\n+dotnet_diagnostic.CA3009.severity = none\n+\n+# Review code for XAML injection vulnerabilities\n+dotnet_diagnostic.CA3010.severity = none\n+\n+# Review code for DLL injection vulnerabilities\n+dotnet_diagnostic.CA3011.severity = none\n+\n+# Review code for regex injection vulnerabilities\n+dotnet_diagnostic.CA3012.severity = none\n+\n+# Do Not Add Schema By URL\n+dotnet_diagnostic.CA3061.severity = warning\n+\n+# Insecure DTD processing in XML\n+dotnet_diagnostic.CA3075.severity = warning\n+\n+# Insecure XSLT script processing.\n+dotnet_diagnostic.CA3076.severity = warning\n+\n+# Insecure Processing in API Design, XmlDocument and XmlTextReader\n+dotnet_diagnostic.CA3077.severity = warning\n+\n+# Mark Verb Handlers With Validate Antiforgery Token\n+dotnet_diagnostic.CA3147.severity = warning\n+\n+# Do Not Use Weak Cryptographic Algorithms\n+dotnet_diagnostic.CA5350.severity = warning\n+\n+# Do Not Use Broken Cryptographic Algorithms\n+dotnet_diagnostic.CA5351.severity = warning\n+\n+# Review cipher mode usage with cryptography experts\n+dotnet_diagnostic.CA5358.severity = none\n+\n+# Do Not Disable Certificate Validation\n+dotnet_diagnostic.CA5359.severity = warning\n+\n+# Do Not Call Dangerous Methods In Deserialization\n+dotnet_diagnostic.CA5360.severity = warning\n+\n+# Do Not Disable SChannel Use of Strong Crypto\n+dotnet_diagnostic.CA5361.severity = warning\n+\n+# Potential reference cycle in deserialized object graph\n+dotnet_diagnostic.CA5362.severity = none\n+\n+# Do Not Disable Request Validation\n+dotnet_diagnostic.CA5363.severity = warning\n+\n+# Do Not Use Deprecated Security Protocols\n+dotnet_diagnostic.CA5364.severity = warning\n+\n+# Do Not Disable HTTP Header Checking\n+dotnet_diagnostic.CA5365.severity = warning\n+\n+# Use XmlReader For DataSet Read Xml\n+dotnet_diagnostic.CA5366.severity = none\n+\n+# Do Not Serialize Types With Pointer Fields\n+dotnet_diagnostic.CA5367.severity = none\n+\n+# Set ViewStateUserKey For Classes Derived From Page\n+dotnet_diagnostic.CA5368.severity = warning\n+\n+# Use XmlReader For Deserialize\n+dotnet_diagnostic.CA5369.severity = none\n+\n+# Use XmlReader For Validating Reader\n+dotnet_diagnostic.CA5370.severity = warning\n+\n+# Use XmlReader For Schema Read\n+dotnet_diagnostic.CA5371.severity = none\n+\n+# Use XmlReader For XPathDocument\n+dotnet_diagnostic.CA5372.severity = none\n+\n+# Do not use obsolete key derivation function\n+dotnet_diagnostic.CA5373.severity = warning\n+\n+# Do Not Use XslTransform\n+dotnet_diagnostic.CA5374.severity = warning\n+\n+# Do Not Use Account Shared Access Signature\n+dotnet_diagnostic.CA5375.severity = none\n+\n+# Use SharedAccessProtocol HttpsOnly\n+dotnet_diagnostic.CA5376.severity = warning\n+\n+# Use Container Level Access Policy\n+dotnet_diagnostic.CA5377.severity = warning\n+\n+# Do not disable ServicePointManagerSecurityProtocols\n+dotnet_diagnostic.CA5378.severity = warning\n+\n+# Do Not Use Weak Key Derivation Function Algorithm\n+dotnet_diagnostic.CA5379.severity = warning\n+\n+# Do Not Add Certificates To Root Store\n+dotnet_diagnostic.CA5380.severity = warning\n+\n+# Ensure Certificates Are Not Added To Root Store\n+dotnet_diagnostic.CA5381.severity = warning\n+\n+# Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5382.severity = none\n+\n+# Ensure Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5383.severity = none\n+\n+# Do Not Use Digital Signature Algorithm (DSA)\n+dotnet_diagnostic.CA5384.severity = warning\n+\n+# Use Rivest\u2013Shamir\u2013Adleman (RSA) Algorithm With Sufficient Key Size\n+dotnet_diagnostic.CA5385.severity = warning\n+\n+# Avoid hardcoding SecurityProtocolType value\n+dotnet_diagnostic.CA5386.severity = none\n+\n+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count\n+dotnet_diagnostic.CA5387.severity = none\n+\n+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function\n+dotnet_diagnostic.CA5388.severity = none\n+\n+# Do Not Add Archive Item's Path To The Target File System Path\n+dotnet_diagnostic.CA5389.severity = none\n+\n+# Do not hard-code encryption key\n+dotnet_diagnostic.CA5390.severity = none\n+\n+# Use antiforgery tokens in ASP.NET Core MVC controllers\n+dotnet_diagnostic.CA5391.severity = none\n+\n+# Use DefaultDllImportSearchPaths attribute for P/Invokes\n+dotnet_diagnostic.CA5392.severity = none\n+\n+# Do not use unsafe DllImportSearchPath value\n+dotnet_diagnostic.CA5393.severity = none\n+\n+# Do not use insecure randomness\n+dotnet_diagnostic.CA5394.severity = none\n+\n+# Miss HttpVerb attribute for action methods\n+dotnet_diagnostic.CA5395.severity = none\n+\n+# Set HttpOnly to true for HttpCookie\n+dotnet_diagnostic.CA5396.severity = none\n+\n+# Do not use deprecated SslProtocols values\n+dotnet_diagnostic.CA5397.severity = none\n+\n+# Avoid hardcoded SslProtocols values\n+dotnet_diagnostic.CA5398.severity = none\n+\n+# HttpClients should enable certificate revocation list checks\n+dotnet_diagnostic.CA5399.severity = none\n+\n+# Ensure HttpClient certificate revocation list check is not disabled\n+dotnet_diagnostic.CA5400.severity = none\n+\n+# Do not use CreateEncryptor with non-default IV\n+dotnet_diagnostic.CA5401.severity = none\n+\n+# Use CreateEncryptor with the default IV\n+dotnet_diagnostic.CA5402.severity = none\n+\n+# Do not hard-code certificate\n+dotnet_diagnostic.CA5403.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3000.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3001.severity = none\n+\n+# XML comments\n+dotnet_diagnostic.SA0001.severity = suggestion",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": "Getting this error when enabled.\r\n```\r\nerror SA0001: XML comment analysis is disabled due to project configuration [msbuild\\src\\Xunit.Net\r\nCore.Extensions\\Xunit.NetCore.Extensions.csproj]\r\n```",
              "createdAt": "2021-12-31T03:17:14Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion\n+\n+# Ensure minimum API surface is respected\n+dotnet_diagnostic.BCL0001.severity = warning\n+\n+# AppContext default value expected to be true\n+dotnet_diagnostic.BCL0010.severity = warning\n+\n+# AppContext default value defined in if statement with incorrect pattern\n+dotnet_diagnostic.BCL0011.severity = warning\n+\n+# AppContext default value defined in if statement at root of switch case\n+dotnet_diagnostic.BCL0012.severity = warning\n+\n+# Invalid P/Invoke call\n+dotnet_diagnostic.BCL0015.severity = none\n+\n+# Invalid SR.Format call\n+dotnet_diagnostic.BCL0020.severity = warning\n+\n+# Do not declare static members on generic types\n+dotnet_diagnostic.CA1000.severity = none\n+\n+# Types that own disposable fields should be disposable\n+dotnet_diagnostic.CA1001.severity = none\n+\n+# Do not expose generic lists\n+dotnet_diagnostic.CA1002.severity = none\n+\n+# Use generic event handler instances\n+dotnet_diagnostic.CA1003.severity = none\n+\n+# Avoid excessive parameters on generic types\n+dotnet_diagnostic.CA1005.severity = none\n+\n+# Enums should have zero value\n+dotnet_diagnostic.CA1008.severity = none\n+\n+# Generic interface should also be implemented\n+dotnet_diagnostic.CA1010.severity = none\n+\n+# Abstract types should not have constructors\n+dotnet_diagnostic.CA1012.severity = none\n+\n+# Mark assemblies with CLSCompliant\n+dotnet_diagnostic.CA1014.severity = none\n+\n+# Mark assemblies with assembly version\n+dotnet_diagnostic.CA1016.severity = none\n+\n+# Mark assemblies with ComVisible\n+dotnet_diagnostic.CA1017.severity = none\n+\n+# Mark attributes with AttributeUsageAttribute\n+dotnet_diagnostic.CA1018.severity = warning\n+\n+# Define accessors for attribute arguments\n+dotnet_diagnostic.CA1019.severity = none\n+\n+# Use properties where appropriate\n+dotnet_diagnostic.CA1024.severity = none\n+\n+# Mark enums with FlagsAttribute\n+dotnet_diagnostic.CA1027.severity = none\n+\n+# Enum Storage should be Int32\n+dotnet_diagnostic.CA1028.severity = none\n+\n+# Use events where appropriate\n+dotnet_diagnostic.CA1030.severity = none\n+\n+# Do not catch general exception types\n+dotnet_diagnostic.CA1031.severity = none\n+\n+dotnet_diagnostic.CA1032.severity = none\n+\n+# Interface methods should be callable by child types\n+dotnet_diagnostic.CA1033.severity = none\n+\n+dotnet_diagnostic.CA1034.severity = none\n+\n+# Override methods on comparable types\n+dotnet_diagnostic.CA1036.severity = none\n+\n+# Avoid empty interfaces\n+dotnet_diagnostic.CA1040.severity = none\n+\n+# Provide ObsoleteAttribute message\n+dotnet_diagnostic.CA1041.severity = none\n+\n+# Use Integral Or String Argument For Indexers\n+dotnet_diagnostic.CA1043.severity = none\n+\n+# Properties should not be write only\n+dotnet_diagnostic.CA1044.severity = none\n+\n+# Do not overload equality operator on reference types\n+dotnet_diagnostic.CA1046.severity = none\n+\n+# Do not declare protected member in sealed type\n+dotnet_diagnostic.CA1047.severity = warning\n+\n+# Declare types in namespaces\n+dotnet_diagnostic.CA1050.severity = suggestion\n+\n+# Do not declare visible instance fields\n+dotnet_diagnostic.CA1051.severity = none\n+\n+# Static holder types should be Static or NotInheritable\n+dotnet_diagnostic.CA1052.severity = none\n+\n+# Uri parameters should not be strings\n+dotnet_diagnostic.CA1054.severity = none\n+\n+# Uri return values should not be strings\n+dotnet_diagnostic.CA1055.severity = none\n+\n+# Uri properties should not be strings\n+dotnet_diagnostic.CA1056.severity = none\n+\n+# Types should not extend certain base types\n+dotnet_diagnostic.CA1058.severity = none\n+\n+# Do not hide base class methods\n+dotnet_diagnostic.CA1061.severity = none\n+\n+# Validate arguments of public methods\n+dotnet_diagnostic.CA1062.severity = none\n+\n+# Implement IDisposable Correctly\n+dotnet_diagnostic.CA1063.severity = none\n+\n+# Exceptions should be public\n+dotnet_diagnostic.CA1064.severity = none\n+\n+# Do not raise exceptions in unexpected locations\n+dotnet_diagnostic.CA1065.severity = none\n+\n+# Implement IEquatable when overriding Object.Equals\n+dotnet_diagnostic.CA1066.severity = none\n+\n+# Override Object.Equals(object) when implementing IEquatable<T>\n+dotnet_diagnostic.CA1067.severity = none\n+\n+# CancellationToken parameters must come last\n+dotnet_diagnostic.CA1068.severity = none\n+\n+# Enums values should not be duplicated\n+dotnet_diagnostic.CA1069.severity = none\n+\n+# Do not declare event fields as virtual\n+dotnet_diagnostic.CA1070.severity = suggestion\n+\n+# Avoid using cref tags with a prefix\n+dotnet_diagnostic.CA1200.severity = suggestion\n+\n+# Do not pass literals as localized parameters\n+dotnet_diagnostic.CA1303.severity = none\n+\n+# Specify CultureInfo\n+dotnet_diagnostic.CA1304.severity = none\n+\n+# Specify IFormatProvider\n+dotnet_diagnostic.CA1305.severity = none\n+\n+# Specify StringComparison\n+dotnet_diagnostic.CA1307.severity = none\n+\n+# Normalize strings to uppercase\n+dotnet_diagnostic.CA1308.severity = none\n+\n+# Use ordinal stringcomparison\n+dotnet_diagnostic.CA1309.severity = none\n+\n+# P/Invokes should not be visible\n+dotnet_diagnostic.CA1401.severity = warning\n+\n+# Do not use 'OutAttribute' on string parameters for P/Invokes\n+dotnet_diagnostic.CA1417.severity = warning\n+\n+# Avoid excessive complexity\n+dotnet_diagnostic.CA1502.severity = none\n+\n+# Avoid unmaintainable code\n+dotnet_diagnostic.CA1505.severity = none\n+\n+# Avoid excessive class coupling\n+dotnet_diagnostic.CA1506.severity = none\n+\n+# Use nameof to express symbol names\n+dotnet_diagnostic.CA1507.severity = suggestion\n+\n+# Avoid dead conditional code\n+dotnet_diagnostic.CA1508.severity = none\n+\n+# Invalid entry in code metrics rule specification file\n+dotnet_diagnostic.CA1509.severity = none\n+\n+# Do not name enum values 'Reserved'\n+dotnet_diagnostic.CA1700.severity = none\n+\n+dotnet_diagnostic.CA1707.severity = none\n+\n+# Identifiers should have correct suffix\n+dotnet_diagnostic.CA1710.severity = none\n+\n+# Identifiers should not have incorrect suffix\n+dotnet_diagnostic.CA1711.severity = none\n+\n+# Do not prefix enum values with type name\n+dotnet_diagnostic.CA1712.severity = none\n+\n+dotnet_diagnostic.CA1714.severity = none\n+\n+# Identifiers should have correct prefix\n+dotnet_diagnostic.CA1715.severity = none\n+\n+# Identifiers should not match keywords\n+dotnet_diagnostic.CA1716.severity = none\n+\n+dotnet_diagnostic.CA1717.severity = none\n+\n+# Identifier contains type name\n+dotnet_diagnostic.CA1720.severity = none\n+\n+# Property names should not match get methods\n+dotnet_diagnostic.CA1721.severity = none\n+\n+# Type names should not match namespaces\n+dotnet_diagnostic.CA1724.severity = none\n+\n+# Review unused parameters\n+dotnet_diagnostic.CA1801.severity = none\n+\n+# Use literals where appropriate\n+dotnet_diagnostic.CA1802.severity = suggestion\n+\n+# Do not initialize unnecessarily\n+dotnet_diagnostic.CA1805.severity = suggestion\n+\n+dotnet_diagnostic.CA1806.severity = none\n+\n+# Initialize reference type static fields inline\n+dotnet_diagnostic.CA1810.severity = suggestion\n+\n+# Avoid uninstantiated internal classes\n+dotnet_diagnostic.CA1812.severity = none\n+\n+dotnet_diagnostic.CA1814.severity = none\n+\n+dotnet_diagnostic.CA1815.severity = none\n+\n+# Dispose methods should call SuppressFinalize\n+dotnet_diagnostic.CA1816.severity = none\n+\n+dotnet_diagnostic.CA1819.severity = none\n+\n+# Test for empty strings using string length\n+dotnet_diagnostic.CA1820.severity = none\n+\n+# Remove empty Finalizers\n+dotnet_diagnostic.CA1821.severity = warning\n+\n+# Mark members as static\n+dotnet_diagnostic.CA1822.severity = none\n+\n+# Avoid unused private fields\n+dotnet_diagnostic.CA1823.severity = suggestion\n+\n+# Mark assemblies with NeutralResourcesLanguageAttribute\n+dotnet_diagnostic.CA1824.severity = warning\n+\n+# Avoid zero-length array allocations.\n+dotnet_diagnostic.CA1825.severity = suggestion\n+\n+# Do not use Count() or LongCount() when Any() can be used\n+dotnet_diagnostic.CA1827.severity = warning\n+\n+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used\n+dotnet_diagnostic.CA1828.severity = warning\n+\n+# Use Length/Count property instead of Count() when available\n+dotnet_diagnostic.CA1829.severity = suggestion\n+\n+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.\n+dotnet_diagnostic.CA1830.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1831.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1832.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1833.severity = warning\n+\n+# Consider using 'StringBuilder.Append(char)' when applicable.\n+dotnet_diagnostic.CA1834.severity = suggestion\n+\n+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+dotnet_diagnostic.CA1835.severity = suggestion\n+\n+# Prefer IsEmpty over Count\n+dotnet_diagnostic.CA1836.severity = suggestion\n+\n+# Use 'Environment.ProcessId'\n+dotnet_diagnostic.CA1837.severity = suggestion\n+\n+# Avoid 'StringBuilder' parameters for P/Invokes\n+dotnet_diagnostic.CA1838.severity = suggestion\n+\n+# Dispose objects before losing scope\n+dotnet_diagnostic.CA2000.severity = none\n+\n+# Do not lock on objects with weak identity\n+dotnet_diagnostic.CA2002.severity = none\n+\n+# Consider calling ConfigureAwait on the awaited task\n+dotnet_diagnostic.CA2007.severity = suggestion\n+\n+# Do not create tasks without passing a TaskScheduler\n+dotnet_diagnostic.CA2008.severity = suggestion\n+\n+# Do not call ToImmutableCollection on an ImmutableCollection value\n+dotnet_diagnostic.CA2009.severity = warning\n+\n+# Avoid infinite recursion\n+dotnet_diagnostic.CA2011.severity = warning\n+\n+# Use ValueTasks correctly\n+dotnet_diagnostic.CA2012.severity = warning\n+\n+# Do not use ReferenceEquals with value types\n+dotnet_diagnostic.CA2013.severity = warning\n+\n+# Do not use stackalloc in loops.\n+dotnet_diagnostic.CA2014.severity = warning\n+\n+# Do not define finalizers for types derived from MemoryManager<T>\n+dotnet_diagnostic.CA2015.severity = warning\n+\n+# Forward the 'CancellationToken' parameter to methods that take one\n+dotnet_diagnostic.CA2016.severity = suggestion\n+\n+# Review SQL queries for security vulnerabilities\n+dotnet_diagnostic.CA2100.severity = none\n+\n+# Specify marshaling for P/Invoke string arguments\n+dotnet_diagnostic.CA2101.severity = none\n+\n+# Review visible event handlers\n+dotnet_diagnostic.CA2109.severity = none\n+\n+# Seal methods that satisfy private interfaces\n+dotnet_diagnostic.CA2119.severity = none\n+\n+# Do Not Catch Corrupted State Exceptions\n+dotnet_diagnostic.CA2153.severity = none\n+\n+# Do not raise reserved exception types\n+dotnet_diagnostic.CA2201.severity = none\n+\n+# Instantiate argument exceptions correctly\n+dotnet_diagnostic.CA2208.severity = suggestion\n+\n+# Non-constant fields should not be visible\n+dotnet_diagnostic.CA2211.severity = none\n+\n+# Disposable fields should be disposed\n+dotnet_diagnostic.CA2213.severity = none\n+\n+# Dispose methods should call base class dispose\n+dotnet_diagnostic.CA2215.severity = none\n+\n+# Disposable types should declare finalizer\n+dotnet_diagnostic.CA2216.severity = none\n+\n+dotnet_diagnostic.CA2219.severity = none\n+\n+# Override Equals on overloading operator equals\n+dotnet_diagnostic.CA2224.severity = none\n+\n+# Operator overloads have named alternates\n+dotnet_diagnostic.CA2225.severity = none\n+\n+# Operators should have symmetrical overloads\n+dotnet_diagnostic.CA2226.severity = none\n+\n+# Collection properties should be read only\n+dotnet_diagnostic.CA2227.severity = none\n+\n+# Overload operator equals on overriding value type Equals\n+dotnet_diagnostic.CA2231.severity = none\n+\n+# Pass system uri objects instead of strings\n+dotnet_diagnostic.CA2234.severity = none\n+\n+# Mark all non-serializable fields\n+dotnet_diagnostic.CA2235.severity = none\n+\n+# Provide correct arguments to formatting methods\n+dotnet_diagnostic.CA2241.severity = suggestion\n+\n+# Test for NaN correctly\n+dotnet_diagnostic.CA2242.severity = warning\n+\n+# Attribute string literals should parse correctly\n+dotnet_diagnostic.CA2243.severity = none\n+\n+# Do not duplicate indexed element initializations\n+dotnet_diagnostic.CA2244.severity = none\n+\n+# Do not assign a property to itself.\n+dotnet_diagnostic.CA2245.severity = warning\n+\n+# Assigning symbol and its member in the same statement.\n+dotnet_diagnostic.CA2246.severity = none\n+\n+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.\n+dotnet_diagnostic.CA2247.severity = warning\n+\n+# Provide correct 'enum' argument to 'Enum.HasFlag'\n+dotnet_diagnostic.CA2248.severity = warning\n+\n+# Consider using 'string.Contains' instead of 'string.IndexOf'\n+dotnet_diagnostic.CA2249.severity = suggestion\n+\n+# Do not use insecure deserializer BinaryFormatter\n+dotnet_diagnostic.CA2300.severity = none\n+\n+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder\n+dotnet_diagnostic.CA2301.severity = none\n+\n+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize\n+dotnet_diagnostic.CA2302.severity = none\n+\n+# Do not use insecure deserializer LosFormatter\n+dotnet_diagnostic.CA2305.severity = none\n+\n+# Do not use insecure deserializer NetDataContractSerializer\n+dotnet_diagnostic.CA2310.severity = none\n+\n+# Do not deserialize without first setting NetDataContractSerializer.Binder\n+dotnet_diagnostic.CA2311.severity = none\n+\n+# Ensure NetDataContractSerializer.Binder is set before deserializing\n+dotnet_diagnostic.CA2312.severity = none\n+\n+# Do not use insecure deserializer ObjectStateFormatter\n+dotnet_diagnostic.CA2315.severity = none\n+\n+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver\n+dotnet_diagnostic.CA2321.severity = none\n+\n+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing\n+dotnet_diagnostic.CA2322.severity = none\n+\n+# Do not use TypeNameHandling values other than None\n+dotnet_diagnostic.CA2326.severity = none\n+\n+# Do not use DataTable.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2350.severity = none\n+\n+# Do not use DataSet.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2351.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2352.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type\n+dotnet_diagnostic.CA2353.severity = none\n+\n+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2354.severity = none\n+\n+# Unsafe DataSet or DataTable type found in deserializable object graph\n+dotnet_diagnostic.CA2355.severity = none\n+\n+# Unsafe DataSet or DataTable type in web deserializable object graph\n+dotnet_diagnostic.CA2356.severity = none\n+\n+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data\n+dotnet_diagnostic.CA2361.severity = none\n+\n+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2362.severity = none\n+\n+# Review code for SQL injection vulnerabilities\n+dotnet_diagnostic.CA3001.severity = none\n+\n+# Review code for XSS vulnerabilities\n+dotnet_diagnostic.CA3002.severity = none\n+\n+# Review code for file path injection vulnerabilities\n+dotnet_diagnostic.CA3003.severity = none\n+\n+# Review code for information disclosure vulnerabilities\n+dotnet_diagnostic.CA3004.severity = none\n+\n+# Review code for LDAP injection vulnerabilities\n+dotnet_diagnostic.CA3005.severity = none\n+\n+# Review code for process command injection vulnerabilities\n+dotnet_diagnostic.CA3006.severity = none\n+\n+# Review code for open redirect vulnerabilities\n+dotnet_diagnostic.CA3007.severity = none\n+\n+# Review code for XPath injection vulnerabilities\n+dotnet_diagnostic.CA3008.severity = none\n+\n+# Review code for XML injection vulnerabilities\n+dotnet_diagnostic.CA3009.severity = none\n+\n+# Review code for XAML injection vulnerabilities\n+dotnet_diagnostic.CA3010.severity = none\n+\n+# Review code for DLL injection vulnerabilities\n+dotnet_diagnostic.CA3011.severity = none\n+\n+# Review code for regex injection vulnerabilities\n+dotnet_diagnostic.CA3012.severity = none\n+\n+# Do Not Add Schema By URL\n+dotnet_diagnostic.CA3061.severity = warning\n+\n+# Insecure DTD processing in XML\n+dotnet_diagnostic.CA3075.severity = warning\n+\n+# Insecure XSLT script processing.\n+dotnet_diagnostic.CA3076.severity = warning\n+\n+# Insecure Processing in API Design, XmlDocument and XmlTextReader\n+dotnet_diagnostic.CA3077.severity = warning\n+\n+# Mark Verb Handlers With Validate Antiforgery Token\n+dotnet_diagnostic.CA3147.severity = warning\n+\n+# Do Not Use Weak Cryptographic Algorithms\n+dotnet_diagnostic.CA5350.severity = warning\n+\n+# Do Not Use Broken Cryptographic Algorithms\n+dotnet_diagnostic.CA5351.severity = warning\n+\n+# Review cipher mode usage with cryptography experts\n+dotnet_diagnostic.CA5358.severity = none\n+\n+# Do Not Disable Certificate Validation\n+dotnet_diagnostic.CA5359.severity = warning\n+\n+# Do Not Call Dangerous Methods In Deserialization\n+dotnet_diagnostic.CA5360.severity = warning\n+\n+# Do Not Disable SChannel Use of Strong Crypto\n+dotnet_diagnostic.CA5361.severity = warning\n+\n+# Potential reference cycle in deserialized object graph\n+dotnet_diagnostic.CA5362.severity = none\n+\n+# Do Not Disable Request Validation\n+dotnet_diagnostic.CA5363.severity = warning\n+\n+# Do Not Use Deprecated Security Protocols\n+dotnet_diagnostic.CA5364.severity = warning\n+\n+# Do Not Disable HTTP Header Checking\n+dotnet_diagnostic.CA5365.severity = warning\n+\n+# Use XmlReader For DataSet Read Xml\n+dotnet_diagnostic.CA5366.severity = none\n+\n+# Do Not Serialize Types With Pointer Fields\n+dotnet_diagnostic.CA5367.severity = none\n+\n+# Set ViewStateUserKey For Classes Derived From Page\n+dotnet_diagnostic.CA5368.severity = warning\n+\n+# Use XmlReader For Deserialize\n+dotnet_diagnostic.CA5369.severity = none\n+\n+# Use XmlReader For Validating Reader\n+dotnet_diagnostic.CA5370.severity = warning\n+\n+# Use XmlReader For Schema Read\n+dotnet_diagnostic.CA5371.severity = none\n+\n+# Use XmlReader For XPathDocument\n+dotnet_diagnostic.CA5372.severity = none\n+\n+# Do not use obsolete key derivation function\n+dotnet_diagnostic.CA5373.severity = warning\n+\n+# Do Not Use XslTransform\n+dotnet_diagnostic.CA5374.severity = warning\n+\n+# Do Not Use Account Shared Access Signature\n+dotnet_diagnostic.CA5375.severity = none\n+\n+# Use SharedAccessProtocol HttpsOnly\n+dotnet_diagnostic.CA5376.severity = warning\n+\n+# Use Container Level Access Policy\n+dotnet_diagnostic.CA5377.severity = warning\n+\n+# Do not disable ServicePointManagerSecurityProtocols\n+dotnet_diagnostic.CA5378.severity = warning\n+\n+# Do Not Use Weak Key Derivation Function Algorithm\n+dotnet_diagnostic.CA5379.severity = warning\n+\n+# Do Not Add Certificates To Root Store\n+dotnet_diagnostic.CA5380.severity = warning\n+\n+# Ensure Certificates Are Not Added To Root Store\n+dotnet_diagnostic.CA5381.severity = warning\n+\n+# Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5382.severity = none\n+\n+# Ensure Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5383.severity = none\n+\n+# Do Not Use Digital Signature Algorithm (DSA)\n+dotnet_diagnostic.CA5384.severity = warning\n+\n+# Use Rivest\u2013Shamir\u2013Adleman (RSA) Algorithm With Sufficient Key Size\n+dotnet_diagnostic.CA5385.severity = warning\n+\n+# Avoid hardcoding SecurityProtocolType value\n+dotnet_diagnostic.CA5386.severity = none\n+\n+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count\n+dotnet_diagnostic.CA5387.severity = none\n+\n+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function\n+dotnet_diagnostic.CA5388.severity = none\n+\n+# Do Not Add Archive Item's Path To The Target File System Path\n+dotnet_diagnostic.CA5389.severity = none\n+\n+# Do not hard-code encryption key\n+dotnet_diagnostic.CA5390.severity = none\n+\n+# Use antiforgery tokens in ASP.NET Core MVC controllers\n+dotnet_diagnostic.CA5391.severity = none\n+\n+# Use DefaultDllImportSearchPaths attribute for P/Invokes\n+dotnet_diagnostic.CA5392.severity = none\n+\n+# Do not use unsafe DllImportSearchPath value\n+dotnet_diagnostic.CA5393.severity = none\n+\n+# Do not use insecure randomness\n+dotnet_diagnostic.CA5394.severity = none\n+\n+# Miss HttpVerb attribute for action methods\n+dotnet_diagnostic.CA5395.severity = none\n+\n+# Set HttpOnly to true for HttpCookie\n+dotnet_diagnostic.CA5396.severity = none\n+\n+# Do not use deprecated SslProtocols values\n+dotnet_diagnostic.CA5397.severity = none\n+\n+# Avoid hardcoded SslProtocols values\n+dotnet_diagnostic.CA5398.severity = none\n+\n+# HttpClients should enable certificate revocation list checks\n+dotnet_diagnostic.CA5399.severity = none\n+\n+# Ensure HttpClient certificate revocation list check is not disabled\n+dotnet_diagnostic.CA5400.severity = none\n+\n+# Do not use CreateEncryptor with non-default IV\n+dotnet_diagnostic.CA5401.severity = none\n+\n+# Use CreateEncryptor with the default IV\n+dotnet_diagnostic.CA5402.severity = none\n+\n+# Do not hard-code certificate\n+dotnet_diagnostic.CA5403.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3000.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3001.severity = none\n+\n+# XML comments\n+dotnet_diagnostic.SA0001.severity = suggestion",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "Yes, this warning is alerting the author to a build configuration error (the compiler has been instructed to treat `///` comments the same as `//` comments, and will allow all sorts of syntax errors through without any warnings and analyzers will not be able to help). XML documentations files are an essential build output for all projects due to current limitations in the compiler. You can avoid problems related to this configuration by following the steps described for SA0001:\r\n\r\nhttps://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md#suppression-via-the-project-file",
              "createdAt": "2022-01-01T00:07:37Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion\n+\n+# Ensure minimum API surface is respected\n+dotnet_diagnostic.BCL0001.severity = warning\n+\n+# AppContext default value expected to be true\n+dotnet_diagnostic.BCL0010.severity = warning\n+\n+# AppContext default value defined in if statement with incorrect pattern\n+dotnet_diagnostic.BCL0011.severity = warning\n+\n+# AppContext default value defined in if statement at root of switch case\n+dotnet_diagnostic.BCL0012.severity = warning\n+\n+# Invalid P/Invoke call\n+dotnet_diagnostic.BCL0015.severity = none\n+\n+# Invalid SR.Format call\n+dotnet_diagnostic.BCL0020.severity = warning\n+\n+# Do not declare static members on generic types\n+dotnet_diagnostic.CA1000.severity = none\n+\n+# Types that own disposable fields should be disposable\n+dotnet_diagnostic.CA1001.severity = none\n+\n+# Do not expose generic lists\n+dotnet_diagnostic.CA1002.severity = none\n+\n+# Use generic event handler instances\n+dotnet_diagnostic.CA1003.severity = none\n+\n+# Avoid excessive parameters on generic types\n+dotnet_diagnostic.CA1005.severity = none\n+\n+# Enums should have zero value\n+dotnet_diagnostic.CA1008.severity = none\n+\n+# Generic interface should also be implemented\n+dotnet_diagnostic.CA1010.severity = none\n+\n+# Abstract types should not have constructors\n+dotnet_diagnostic.CA1012.severity = none\n+\n+# Mark assemblies with CLSCompliant\n+dotnet_diagnostic.CA1014.severity = none\n+\n+# Mark assemblies with assembly version\n+dotnet_diagnostic.CA1016.severity = none\n+\n+# Mark assemblies with ComVisible\n+dotnet_diagnostic.CA1017.severity = none\n+\n+# Mark attributes with AttributeUsageAttribute\n+dotnet_diagnostic.CA1018.severity = warning\n+\n+# Define accessors for attribute arguments\n+dotnet_diagnostic.CA1019.severity = none\n+\n+# Use properties where appropriate\n+dotnet_diagnostic.CA1024.severity = none\n+\n+# Mark enums with FlagsAttribute\n+dotnet_diagnostic.CA1027.severity = none\n+\n+# Enum Storage should be Int32\n+dotnet_diagnostic.CA1028.severity = none\n+\n+# Use events where appropriate\n+dotnet_diagnostic.CA1030.severity = none\n+\n+# Do not catch general exception types\n+dotnet_diagnostic.CA1031.severity = none\n+\n+dotnet_diagnostic.CA1032.severity = none\n+\n+# Interface methods should be callable by child types\n+dotnet_diagnostic.CA1033.severity = none\n+\n+dotnet_diagnostic.CA1034.severity = none\n+\n+# Override methods on comparable types\n+dotnet_diagnostic.CA1036.severity = none\n+\n+# Avoid empty interfaces\n+dotnet_diagnostic.CA1040.severity = none\n+\n+# Provide ObsoleteAttribute message\n+dotnet_diagnostic.CA1041.severity = none\n+\n+# Use Integral Or String Argument For Indexers\n+dotnet_diagnostic.CA1043.severity = none\n+\n+# Properties should not be write only\n+dotnet_diagnostic.CA1044.severity = none\n+\n+# Do not overload equality operator on reference types\n+dotnet_diagnostic.CA1046.severity = none\n+\n+# Do not declare protected member in sealed type\n+dotnet_diagnostic.CA1047.severity = warning\n+\n+# Declare types in namespaces\n+dotnet_diagnostic.CA1050.severity = suggestion\n+\n+# Do not declare visible instance fields\n+dotnet_diagnostic.CA1051.severity = none\n+\n+# Static holder types should be Static or NotInheritable\n+dotnet_diagnostic.CA1052.severity = none\n+\n+# Uri parameters should not be strings\n+dotnet_diagnostic.CA1054.severity = none\n+\n+# Uri return values should not be strings\n+dotnet_diagnostic.CA1055.severity = none\n+\n+# Uri properties should not be strings\n+dotnet_diagnostic.CA1056.severity = none\n+\n+# Types should not extend certain base types\n+dotnet_diagnostic.CA1058.severity = none\n+\n+# Do not hide base class methods\n+dotnet_diagnostic.CA1061.severity = none\n+\n+# Validate arguments of public methods\n+dotnet_diagnostic.CA1062.severity = none\n+\n+# Implement IDisposable Correctly\n+dotnet_diagnostic.CA1063.severity = none\n+\n+# Exceptions should be public\n+dotnet_diagnostic.CA1064.severity = none\n+\n+# Do not raise exceptions in unexpected locations\n+dotnet_diagnostic.CA1065.severity = none\n+\n+# Implement IEquatable when overriding Object.Equals\n+dotnet_diagnostic.CA1066.severity = none\n+\n+# Override Object.Equals(object) when implementing IEquatable<T>\n+dotnet_diagnostic.CA1067.severity = none\n+\n+# CancellationToken parameters must come last\n+dotnet_diagnostic.CA1068.severity = none\n+\n+# Enums values should not be duplicated\n+dotnet_diagnostic.CA1069.severity = none\n+\n+# Do not declare event fields as virtual\n+dotnet_diagnostic.CA1070.severity = suggestion\n+\n+# Avoid using cref tags with a prefix\n+dotnet_diagnostic.CA1200.severity = suggestion\n+\n+# Do not pass literals as localized parameters\n+dotnet_diagnostic.CA1303.severity = none\n+\n+# Specify CultureInfo\n+dotnet_diagnostic.CA1304.severity = none\n+\n+# Specify IFormatProvider\n+dotnet_diagnostic.CA1305.severity = none\n+\n+# Specify StringComparison\n+dotnet_diagnostic.CA1307.severity = none\n+\n+# Normalize strings to uppercase\n+dotnet_diagnostic.CA1308.severity = none\n+\n+# Use ordinal stringcomparison\n+dotnet_diagnostic.CA1309.severity = none\n+\n+# P/Invokes should not be visible\n+dotnet_diagnostic.CA1401.severity = warning\n+\n+# Do not use 'OutAttribute' on string parameters for P/Invokes\n+dotnet_diagnostic.CA1417.severity = warning\n+\n+# Avoid excessive complexity\n+dotnet_diagnostic.CA1502.severity = none\n+\n+# Avoid unmaintainable code\n+dotnet_diagnostic.CA1505.severity = none\n+\n+# Avoid excessive class coupling\n+dotnet_diagnostic.CA1506.severity = none\n+\n+# Use nameof to express symbol names\n+dotnet_diagnostic.CA1507.severity = suggestion\n+\n+# Avoid dead conditional code\n+dotnet_diagnostic.CA1508.severity = none\n+\n+# Invalid entry in code metrics rule specification file\n+dotnet_diagnostic.CA1509.severity = none\n+\n+# Do not name enum values 'Reserved'\n+dotnet_diagnostic.CA1700.severity = none\n+\n+dotnet_diagnostic.CA1707.severity = none\n+\n+# Identifiers should have correct suffix\n+dotnet_diagnostic.CA1710.severity = none\n+\n+# Identifiers should not have incorrect suffix\n+dotnet_diagnostic.CA1711.severity = none\n+\n+# Do not prefix enum values with type name\n+dotnet_diagnostic.CA1712.severity = none\n+\n+dotnet_diagnostic.CA1714.severity = none\n+\n+# Identifiers should have correct prefix\n+dotnet_diagnostic.CA1715.severity = none\n+\n+# Identifiers should not match keywords\n+dotnet_diagnostic.CA1716.severity = none\n+\n+dotnet_diagnostic.CA1717.severity = none\n+\n+# Identifier contains type name\n+dotnet_diagnostic.CA1720.severity = none\n+\n+# Property names should not match get methods\n+dotnet_diagnostic.CA1721.severity = none\n+\n+# Type names should not match namespaces\n+dotnet_diagnostic.CA1724.severity = none\n+\n+# Review unused parameters\n+dotnet_diagnostic.CA1801.severity = none\n+\n+# Use literals where appropriate\n+dotnet_diagnostic.CA1802.severity = suggestion\n+\n+# Do not initialize unnecessarily\n+dotnet_diagnostic.CA1805.severity = suggestion\n+\n+dotnet_diagnostic.CA1806.severity = none\n+\n+# Initialize reference type static fields inline\n+dotnet_diagnostic.CA1810.severity = suggestion\n+\n+# Avoid uninstantiated internal classes\n+dotnet_diagnostic.CA1812.severity = none\n+\n+dotnet_diagnostic.CA1814.severity = none\n+\n+dotnet_diagnostic.CA1815.severity = none\n+\n+# Dispose methods should call SuppressFinalize\n+dotnet_diagnostic.CA1816.severity = none\n+\n+dotnet_diagnostic.CA1819.severity = none\n+\n+# Test for empty strings using string length\n+dotnet_diagnostic.CA1820.severity = none\n+\n+# Remove empty Finalizers\n+dotnet_diagnostic.CA1821.severity = warning\n+\n+# Mark members as static\n+dotnet_diagnostic.CA1822.severity = none\n+\n+# Avoid unused private fields\n+dotnet_diagnostic.CA1823.severity = suggestion\n+\n+# Mark assemblies with NeutralResourcesLanguageAttribute\n+dotnet_diagnostic.CA1824.severity = warning\n+\n+# Avoid zero-length array allocations.\n+dotnet_diagnostic.CA1825.severity = suggestion\n+\n+# Do not use Count() or LongCount() when Any() can be used\n+dotnet_diagnostic.CA1827.severity = warning\n+\n+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used\n+dotnet_diagnostic.CA1828.severity = warning\n+\n+# Use Length/Count property instead of Count() when available\n+dotnet_diagnostic.CA1829.severity = suggestion\n+\n+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.\n+dotnet_diagnostic.CA1830.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1831.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1832.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1833.severity = warning\n+\n+# Consider using 'StringBuilder.Append(char)' when applicable.\n+dotnet_diagnostic.CA1834.severity = suggestion\n+\n+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+dotnet_diagnostic.CA1835.severity = suggestion\n+\n+# Prefer IsEmpty over Count\n+dotnet_diagnostic.CA1836.severity = suggestion\n+\n+# Use 'Environment.ProcessId'\n+dotnet_diagnostic.CA1837.severity = suggestion\n+\n+# Avoid 'StringBuilder' parameters for P/Invokes\n+dotnet_diagnostic.CA1838.severity = suggestion\n+\n+# Dispose objects before losing scope\n+dotnet_diagnostic.CA2000.severity = none\n+\n+# Do not lock on objects with weak identity\n+dotnet_diagnostic.CA2002.severity = none\n+\n+# Consider calling ConfigureAwait on the awaited task\n+dotnet_diagnostic.CA2007.severity = suggestion\n+\n+# Do not create tasks without passing a TaskScheduler\n+dotnet_diagnostic.CA2008.severity = suggestion\n+\n+# Do not call ToImmutableCollection on an ImmutableCollection value\n+dotnet_diagnostic.CA2009.severity = warning\n+\n+# Avoid infinite recursion\n+dotnet_diagnostic.CA2011.severity = warning\n+\n+# Use ValueTasks correctly\n+dotnet_diagnostic.CA2012.severity = warning\n+\n+# Do not use ReferenceEquals with value types\n+dotnet_diagnostic.CA2013.severity = warning\n+\n+# Do not use stackalloc in loops.\n+dotnet_diagnostic.CA2014.severity = warning\n+\n+# Do not define finalizers for types derived from MemoryManager<T>\n+dotnet_diagnostic.CA2015.severity = warning\n+\n+# Forward the 'CancellationToken' parameter to methods that take one\n+dotnet_diagnostic.CA2016.severity = suggestion\n+\n+# Review SQL queries for security vulnerabilities\n+dotnet_diagnostic.CA2100.severity = none\n+\n+# Specify marshaling for P/Invoke string arguments\n+dotnet_diagnostic.CA2101.severity = none\n+\n+# Review visible event handlers\n+dotnet_diagnostic.CA2109.severity = none\n+\n+# Seal methods that satisfy private interfaces\n+dotnet_diagnostic.CA2119.severity = none\n+\n+# Do Not Catch Corrupted State Exceptions\n+dotnet_diagnostic.CA2153.severity = none\n+\n+# Do not raise reserved exception types\n+dotnet_diagnostic.CA2201.severity = none\n+\n+# Instantiate argument exceptions correctly\n+dotnet_diagnostic.CA2208.severity = suggestion\n+\n+# Non-constant fields should not be visible\n+dotnet_diagnostic.CA2211.severity = none\n+\n+# Disposable fields should be disposed\n+dotnet_diagnostic.CA2213.severity = none\n+\n+# Dispose methods should call base class dispose\n+dotnet_diagnostic.CA2215.severity = none\n+\n+# Disposable types should declare finalizer\n+dotnet_diagnostic.CA2216.severity = none\n+\n+dotnet_diagnostic.CA2219.severity = none\n+\n+# Override Equals on overloading operator equals\n+dotnet_diagnostic.CA2224.severity = none\n+\n+# Operator overloads have named alternates\n+dotnet_diagnostic.CA2225.severity = none\n+\n+# Operators should have symmetrical overloads\n+dotnet_diagnostic.CA2226.severity = none\n+\n+# Collection properties should be read only\n+dotnet_diagnostic.CA2227.severity = none\n+\n+# Overload operator equals on overriding value type Equals\n+dotnet_diagnostic.CA2231.severity = none\n+\n+# Pass system uri objects instead of strings\n+dotnet_diagnostic.CA2234.severity = none\n+\n+# Mark all non-serializable fields\n+dotnet_diagnostic.CA2235.severity = none\n+\n+# Provide correct arguments to formatting methods\n+dotnet_diagnostic.CA2241.severity = suggestion\n+\n+# Test for NaN correctly\n+dotnet_diagnostic.CA2242.severity = warning\n+\n+# Attribute string literals should parse correctly\n+dotnet_diagnostic.CA2243.severity = none\n+\n+# Do not duplicate indexed element initializations\n+dotnet_diagnostic.CA2244.severity = none\n+\n+# Do not assign a property to itself.\n+dotnet_diagnostic.CA2245.severity = warning\n+\n+# Assigning symbol and its member in the same statement.\n+dotnet_diagnostic.CA2246.severity = none\n+\n+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.\n+dotnet_diagnostic.CA2247.severity = warning\n+\n+# Provide correct 'enum' argument to 'Enum.HasFlag'\n+dotnet_diagnostic.CA2248.severity = warning\n+\n+# Consider using 'string.Contains' instead of 'string.IndexOf'\n+dotnet_diagnostic.CA2249.severity = suggestion\n+\n+# Do not use insecure deserializer BinaryFormatter\n+dotnet_diagnostic.CA2300.severity = none\n+\n+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder\n+dotnet_diagnostic.CA2301.severity = none\n+\n+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize\n+dotnet_diagnostic.CA2302.severity = none\n+\n+# Do not use insecure deserializer LosFormatter\n+dotnet_diagnostic.CA2305.severity = none\n+\n+# Do not use insecure deserializer NetDataContractSerializer\n+dotnet_diagnostic.CA2310.severity = none\n+\n+# Do not deserialize without first setting NetDataContractSerializer.Binder\n+dotnet_diagnostic.CA2311.severity = none\n+\n+# Ensure NetDataContractSerializer.Binder is set before deserializing\n+dotnet_diagnostic.CA2312.severity = none\n+\n+# Do not use insecure deserializer ObjectStateFormatter\n+dotnet_diagnostic.CA2315.severity = none\n+\n+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver\n+dotnet_diagnostic.CA2321.severity = none\n+\n+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing\n+dotnet_diagnostic.CA2322.severity = none\n+\n+# Do not use TypeNameHandling values other than None\n+dotnet_diagnostic.CA2326.severity = none\n+\n+# Do not use DataTable.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2350.severity = none\n+\n+# Do not use DataSet.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2351.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2352.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type\n+dotnet_diagnostic.CA2353.severity = none\n+\n+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2354.severity = none\n+\n+# Unsafe DataSet or DataTable type found in deserializable object graph\n+dotnet_diagnostic.CA2355.severity = none\n+\n+# Unsafe DataSet or DataTable type in web deserializable object graph\n+dotnet_diagnostic.CA2356.severity = none\n+\n+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data\n+dotnet_diagnostic.CA2361.severity = none\n+\n+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2362.severity = none\n+\n+# Review code for SQL injection vulnerabilities\n+dotnet_diagnostic.CA3001.severity = none\n+\n+# Review code for XSS vulnerabilities\n+dotnet_diagnostic.CA3002.severity = none\n+\n+# Review code for file path injection vulnerabilities\n+dotnet_diagnostic.CA3003.severity = none\n+\n+# Review code for information disclosure vulnerabilities\n+dotnet_diagnostic.CA3004.severity = none\n+\n+# Review code for LDAP injection vulnerabilities\n+dotnet_diagnostic.CA3005.severity = none\n+\n+# Review code for process command injection vulnerabilities\n+dotnet_diagnostic.CA3006.severity = none\n+\n+# Review code for open redirect vulnerabilities\n+dotnet_diagnostic.CA3007.severity = none\n+\n+# Review code for XPath injection vulnerabilities\n+dotnet_diagnostic.CA3008.severity = none\n+\n+# Review code for XML injection vulnerabilities\n+dotnet_diagnostic.CA3009.severity = none\n+\n+# Review code for XAML injection vulnerabilities\n+dotnet_diagnostic.CA3010.severity = none\n+\n+# Review code for DLL injection vulnerabilities\n+dotnet_diagnostic.CA3011.severity = none\n+\n+# Review code for regex injection vulnerabilities\n+dotnet_diagnostic.CA3012.severity = none\n+\n+# Do Not Add Schema By URL\n+dotnet_diagnostic.CA3061.severity = warning\n+\n+# Insecure DTD processing in XML\n+dotnet_diagnostic.CA3075.severity = warning\n+\n+# Insecure XSLT script processing.\n+dotnet_diagnostic.CA3076.severity = warning\n+\n+# Insecure Processing in API Design, XmlDocument and XmlTextReader\n+dotnet_diagnostic.CA3077.severity = warning\n+\n+# Mark Verb Handlers With Validate Antiforgery Token\n+dotnet_diagnostic.CA3147.severity = warning\n+\n+# Do Not Use Weak Cryptographic Algorithms\n+dotnet_diagnostic.CA5350.severity = warning\n+\n+# Do Not Use Broken Cryptographic Algorithms\n+dotnet_diagnostic.CA5351.severity = warning\n+\n+# Review cipher mode usage with cryptography experts\n+dotnet_diagnostic.CA5358.severity = none\n+\n+# Do Not Disable Certificate Validation\n+dotnet_diagnostic.CA5359.severity = warning\n+\n+# Do Not Call Dangerous Methods In Deserialization\n+dotnet_diagnostic.CA5360.severity = warning\n+\n+# Do Not Disable SChannel Use of Strong Crypto\n+dotnet_diagnostic.CA5361.severity = warning\n+\n+# Potential reference cycle in deserialized object graph\n+dotnet_diagnostic.CA5362.severity = none\n+\n+# Do Not Disable Request Validation\n+dotnet_diagnostic.CA5363.severity = warning\n+\n+# Do Not Use Deprecated Security Protocols\n+dotnet_diagnostic.CA5364.severity = warning\n+\n+# Do Not Disable HTTP Header Checking\n+dotnet_diagnostic.CA5365.severity = warning\n+\n+# Use XmlReader For DataSet Read Xml\n+dotnet_diagnostic.CA5366.severity = none\n+\n+# Do Not Serialize Types With Pointer Fields\n+dotnet_diagnostic.CA5367.severity = none\n+\n+# Set ViewStateUserKey For Classes Derived From Page\n+dotnet_diagnostic.CA5368.severity = warning\n+\n+# Use XmlReader For Deserialize\n+dotnet_diagnostic.CA5369.severity = none\n+\n+# Use XmlReader For Validating Reader\n+dotnet_diagnostic.CA5370.severity = warning\n+\n+# Use XmlReader For Schema Read\n+dotnet_diagnostic.CA5371.severity = none\n+\n+# Use XmlReader For XPathDocument\n+dotnet_diagnostic.CA5372.severity = none\n+\n+# Do not use obsolete key derivation function\n+dotnet_diagnostic.CA5373.severity = warning\n+\n+# Do Not Use XslTransform\n+dotnet_diagnostic.CA5374.severity = warning\n+\n+# Do Not Use Account Shared Access Signature\n+dotnet_diagnostic.CA5375.severity = none\n+\n+# Use SharedAccessProtocol HttpsOnly\n+dotnet_diagnostic.CA5376.severity = warning\n+\n+# Use Container Level Access Policy\n+dotnet_diagnostic.CA5377.severity = warning\n+\n+# Do not disable ServicePointManagerSecurityProtocols\n+dotnet_diagnostic.CA5378.severity = warning\n+\n+# Do Not Use Weak Key Derivation Function Algorithm\n+dotnet_diagnostic.CA5379.severity = warning\n+\n+# Do Not Add Certificates To Root Store\n+dotnet_diagnostic.CA5380.severity = warning\n+\n+# Ensure Certificates Are Not Added To Root Store\n+dotnet_diagnostic.CA5381.severity = warning\n+\n+# Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5382.severity = none\n+\n+# Ensure Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5383.severity = none\n+\n+# Do Not Use Digital Signature Algorithm (DSA)\n+dotnet_diagnostic.CA5384.severity = warning\n+\n+# Use Rivest\u2013Shamir\u2013Adleman (RSA) Algorithm With Sufficient Key Size\n+dotnet_diagnostic.CA5385.severity = warning\n+\n+# Avoid hardcoding SecurityProtocolType value\n+dotnet_diagnostic.CA5386.severity = none\n+\n+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count\n+dotnet_diagnostic.CA5387.severity = none\n+\n+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function\n+dotnet_diagnostic.CA5388.severity = none\n+\n+# Do Not Add Archive Item's Path To The Target File System Path\n+dotnet_diagnostic.CA5389.severity = none\n+\n+# Do not hard-code encryption key\n+dotnet_diagnostic.CA5390.severity = none\n+\n+# Use antiforgery tokens in ASP.NET Core MVC controllers\n+dotnet_diagnostic.CA5391.severity = none\n+\n+# Use DefaultDllImportSearchPaths attribute for P/Invokes\n+dotnet_diagnostic.CA5392.severity = none\n+\n+# Do not use unsafe DllImportSearchPath value\n+dotnet_diagnostic.CA5393.severity = none\n+\n+# Do not use insecure randomness\n+dotnet_diagnostic.CA5394.severity = none\n+\n+# Miss HttpVerb attribute for action methods\n+dotnet_diagnostic.CA5395.severity = none\n+\n+# Set HttpOnly to true for HttpCookie\n+dotnet_diagnostic.CA5396.severity = none\n+\n+# Do not use deprecated SslProtocols values\n+dotnet_diagnostic.CA5397.severity = none\n+\n+# Avoid hardcoded SslProtocols values\n+dotnet_diagnostic.CA5398.severity = none\n+\n+# HttpClients should enable certificate revocation list checks\n+dotnet_diagnostic.CA5399.severity = none\n+\n+# Ensure HttpClient certificate revocation list check is not disabled\n+dotnet_diagnostic.CA5400.severity = none\n+\n+# Do not use CreateEncryptor with non-default IV\n+dotnet_diagnostic.CA5401.severity = none\n+\n+# Use CreateEncryptor with the default IV\n+dotnet_diagnostic.CA5402.severity = none\n+\n+# Do not hard-code certificate\n+dotnet_diagnostic.CA5403.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3000.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3001.severity = none\n+\n+# XML comments\n+dotnet_diagnostic.SA0001.severity = suggestion",
              "author": {
                "login": "sharwell"
              }
            },
            {
              "body": "Thanks, I will address that in another PR.",
              "createdAt": "2022-01-01T06:04:26Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion\n+\n+# Ensure minimum API surface is respected\n+dotnet_diagnostic.BCL0001.severity = warning\n+\n+# AppContext default value expected to be true\n+dotnet_diagnostic.BCL0010.severity = warning\n+\n+# AppContext default value defined in if statement with incorrect pattern\n+dotnet_diagnostic.BCL0011.severity = warning\n+\n+# AppContext default value defined in if statement at root of switch case\n+dotnet_diagnostic.BCL0012.severity = warning\n+\n+# Invalid P/Invoke call\n+dotnet_diagnostic.BCL0015.severity = none\n+\n+# Invalid SR.Format call\n+dotnet_diagnostic.BCL0020.severity = warning\n+\n+# Do not declare static members on generic types\n+dotnet_diagnostic.CA1000.severity = none\n+\n+# Types that own disposable fields should be disposable\n+dotnet_diagnostic.CA1001.severity = none\n+\n+# Do not expose generic lists\n+dotnet_diagnostic.CA1002.severity = none\n+\n+# Use generic event handler instances\n+dotnet_diagnostic.CA1003.severity = none\n+\n+# Avoid excessive parameters on generic types\n+dotnet_diagnostic.CA1005.severity = none\n+\n+# Enums should have zero value\n+dotnet_diagnostic.CA1008.severity = none\n+\n+# Generic interface should also be implemented\n+dotnet_diagnostic.CA1010.severity = none\n+\n+# Abstract types should not have constructors\n+dotnet_diagnostic.CA1012.severity = none\n+\n+# Mark assemblies with CLSCompliant\n+dotnet_diagnostic.CA1014.severity = none\n+\n+# Mark assemblies with assembly version\n+dotnet_diagnostic.CA1016.severity = none\n+\n+# Mark assemblies with ComVisible\n+dotnet_diagnostic.CA1017.severity = none\n+\n+# Mark attributes with AttributeUsageAttribute\n+dotnet_diagnostic.CA1018.severity = warning\n+\n+# Define accessors for attribute arguments\n+dotnet_diagnostic.CA1019.severity = none\n+\n+# Use properties where appropriate\n+dotnet_diagnostic.CA1024.severity = none\n+\n+# Mark enums with FlagsAttribute\n+dotnet_diagnostic.CA1027.severity = none\n+\n+# Enum Storage should be Int32\n+dotnet_diagnostic.CA1028.severity = none\n+\n+# Use events where appropriate\n+dotnet_diagnostic.CA1030.severity = none\n+\n+# Do not catch general exception types\n+dotnet_diagnostic.CA1031.severity = none\n+\n+dotnet_diagnostic.CA1032.severity = none\n+\n+# Interface methods should be callable by child types\n+dotnet_diagnostic.CA1033.severity = none\n+\n+dotnet_diagnostic.CA1034.severity = none\n+\n+# Override methods on comparable types\n+dotnet_diagnostic.CA1036.severity = none\n+\n+# Avoid empty interfaces\n+dotnet_diagnostic.CA1040.severity = none\n+\n+# Provide ObsoleteAttribute message\n+dotnet_diagnostic.CA1041.severity = none\n+\n+# Use Integral Or String Argument For Indexers\n+dotnet_diagnostic.CA1043.severity = none\n+\n+# Properties should not be write only\n+dotnet_diagnostic.CA1044.severity = none\n+\n+# Do not overload equality operator on reference types\n+dotnet_diagnostic.CA1046.severity = none\n+\n+# Do not declare protected member in sealed type\n+dotnet_diagnostic.CA1047.severity = warning\n+\n+# Declare types in namespaces\n+dotnet_diagnostic.CA1050.severity = suggestion\n+\n+# Do not declare visible instance fields\n+dotnet_diagnostic.CA1051.severity = none\n+\n+# Static holder types should be Static or NotInheritable\n+dotnet_diagnostic.CA1052.severity = none\n+\n+# Uri parameters should not be strings\n+dotnet_diagnostic.CA1054.severity = none\n+\n+# Uri return values should not be strings\n+dotnet_diagnostic.CA1055.severity = none\n+\n+# Uri properties should not be strings\n+dotnet_diagnostic.CA1056.severity = none\n+\n+# Types should not extend certain base types\n+dotnet_diagnostic.CA1058.severity = none\n+\n+# Do not hide base class methods\n+dotnet_diagnostic.CA1061.severity = none\n+\n+# Validate arguments of public methods\n+dotnet_diagnostic.CA1062.severity = none\n+\n+# Implement IDisposable Correctly\n+dotnet_diagnostic.CA1063.severity = none\n+\n+# Exceptions should be public\n+dotnet_diagnostic.CA1064.severity = none\n+\n+# Do not raise exceptions in unexpected locations\n+dotnet_diagnostic.CA1065.severity = none\n+\n+# Implement IEquatable when overriding Object.Equals\n+dotnet_diagnostic.CA1066.severity = none\n+\n+# Override Object.Equals(object) when implementing IEquatable<T>\n+dotnet_diagnostic.CA1067.severity = none\n+\n+# CancellationToken parameters must come last\n+dotnet_diagnostic.CA1068.severity = none\n+\n+# Enums values should not be duplicated\n+dotnet_diagnostic.CA1069.severity = none\n+\n+# Do not declare event fields as virtual\n+dotnet_diagnostic.CA1070.severity = suggestion\n+\n+# Avoid using cref tags with a prefix\n+dotnet_diagnostic.CA1200.severity = suggestion\n+\n+# Do not pass literals as localized parameters\n+dotnet_diagnostic.CA1303.severity = none\n+\n+# Specify CultureInfo\n+dotnet_diagnostic.CA1304.severity = none\n+\n+# Specify IFormatProvider\n+dotnet_diagnostic.CA1305.severity = none\n+\n+# Specify StringComparison\n+dotnet_diagnostic.CA1307.severity = none\n+\n+# Normalize strings to uppercase\n+dotnet_diagnostic.CA1308.severity = none\n+\n+# Use ordinal stringcomparison\n+dotnet_diagnostic.CA1309.severity = none\n+\n+# P/Invokes should not be visible\n+dotnet_diagnostic.CA1401.severity = warning\n+\n+# Do not use 'OutAttribute' on string parameters for P/Invokes\n+dotnet_diagnostic.CA1417.severity = warning\n+\n+# Avoid excessive complexity\n+dotnet_diagnostic.CA1502.severity = none\n+\n+# Avoid unmaintainable code\n+dotnet_diagnostic.CA1505.severity = none\n+\n+# Avoid excessive class coupling\n+dotnet_diagnostic.CA1506.severity = none\n+\n+# Use nameof to express symbol names\n+dotnet_diagnostic.CA1507.severity = suggestion\n+\n+# Avoid dead conditional code\n+dotnet_diagnostic.CA1508.severity = none\n+\n+# Invalid entry in code metrics rule specification file\n+dotnet_diagnostic.CA1509.severity = none\n+\n+# Do not name enum values 'Reserved'\n+dotnet_diagnostic.CA1700.severity = none\n+\n+dotnet_diagnostic.CA1707.severity = none\n+\n+# Identifiers should have correct suffix\n+dotnet_diagnostic.CA1710.severity = none\n+\n+# Identifiers should not have incorrect suffix\n+dotnet_diagnostic.CA1711.severity = none\n+\n+# Do not prefix enum values with type name\n+dotnet_diagnostic.CA1712.severity = none\n+\n+dotnet_diagnostic.CA1714.severity = none\n+\n+# Identifiers should have correct prefix\n+dotnet_diagnostic.CA1715.severity = none\n+\n+# Identifiers should not match keywords\n+dotnet_diagnostic.CA1716.severity = none\n+\n+dotnet_diagnostic.CA1717.severity = none\n+\n+# Identifier contains type name\n+dotnet_diagnostic.CA1720.severity = none\n+\n+# Property names should not match get methods\n+dotnet_diagnostic.CA1721.severity = none\n+\n+# Type names should not match namespaces\n+dotnet_diagnostic.CA1724.severity = none\n+\n+# Review unused parameters\n+dotnet_diagnostic.CA1801.severity = none\n+\n+# Use literals where appropriate\n+dotnet_diagnostic.CA1802.severity = suggestion\n+\n+# Do not initialize unnecessarily\n+dotnet_diagnostic.CA1805.severity = suggestion\n+\n+dotnet_diagnostic.CA1806.severity = none\n+\n+# Initialize reference type static fields inline\n+dotnet_diagnostic.CA1810.severity = suggestion\n+\n+# Avoid uninstantiated internal classes\n+dotnet_diagnostic.CA1812.severity = none\n+\n+dotnet_diagnostic.CA1814.severity = none\n+\n+dotnet_diagnostic.CA1815.severity = none\n+\n+# Dispose methods should call SuppressFinalize\n+dotnet_diagnostic.CA1816.severity = none\n+\n+dotnet_diagnostic.CA1819.severity = none\n+\n+# Test for empty strings using string length\n+dotnet_diagnostic.CA1820.severity = none\n+\n+# Remove empty Finalizers\n+dotnet_diagnostic.CA1821.severity = warning\n+\n+# Mark members as static\n+dotnet_diagnostic.CA1822.severity = none\n+\n+# Avoid unused private fields\n+dotnet_diagnostic.CA1823.severity = suggestion\n+\n+# Mark assemblies with NeutralResourcesLanguageAttribute\n+dotnet_diagnostic.CA1824.severity = warning\n+\n+# Avoid zero-length array allocations.\n+dotnet_diagnostic.CA1825.severity = suggestion\n+\n+# Do not use Count() or LongCount() when Any() can be used\n+dotnet_diagnostic.CA1827.severity = warning\n+\n+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used\n+dotnet_diagnostic.CA1828.severity = warning\n+\n+# Use Length/Count property instead of Count() when available\n+dotnet_diagnostic.CA1829.severity = suggestion\n+\n+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.\n+dotnet_diagnostic.CA1830.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1831.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1832.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1833.severity = warning\n+\n+# Consider using 'StringBuilder.Append(char)' when applicable.\n+dotnet_diagnostic.CA1834.severity = suggestion\n+\n+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+dotnet_diagnostic.CA1835.severity = suggestion\n+\n+# Prefer IsEmpty over Count\n+dotnet_diagnostic.CA1836.severity = suggestion\n+\n+# Use 'Environment.ProcessId'\n+dotnet_diagnostic.CA1837.severity = suggestion\n+\n+# Avoid 'StringBuilder' parameters for P/Invokes\n+dotnet_diagnostic.CA1838.severity = suggestion\n+\n+# Dispose objects before losing scope\n+dotnet_diagnostic.CA2000.severity = none\n+\n+# Do not lock on objects with weak identity\n+dotnet_diagnostic.CA2002.severity = none\n+\n+# Consider calling ConfigureAwait on the awaited task\n+dotnet_diagnostic.CA2007.severity = suggestion\n+\n+# Do not create tasks without passing a TaskScheduler\n+dotnet_diagnostic.CA2008.severity = suggestion\n+\n+# Do not call ToImmutableCollection on an ImmutableCollection value\n+dotnet_diagnostic.CA2009.severity = warning\n+\n+# Avoid infinite recursion\n+dotnet_diagnostic.CA2011.severity = warning\n+\n+# Use ValueTasks correctly\n+dotnet_diagnostic.CA2012.severity = warning\n+\n+# Do not use ReferenceEquals with value types\n+dotnet_diagnostic.CA2013.severity = warning\n+\n+# Do not use stackalloc in loops.\n+dotnet_diagnostic.CA2014.severity = warning\n+\n+# Do not define finalizers for types derived from MemoryManager<T>\n+dotnet_diagnostic.CA2015.severity = warning\n+\n+# Forward the 'CancellationToken' parameter to methods that take one\n+dotnet_diagnostic.CA2016.severity = suggestion\n+\n+# Review SQL queries for security vulnerabilities\n+dotnet_diagnostic.CA2100.severity = none\n+\n+# Specify marshaling for P/Invoke string arguments\n+dotnet_diagnostic.CA2101.severity = none\n+\n+# Review visible event handlers\n+dotnet_diagnostic.CA2109.severity = none\n+\n+# Seal methods that satisfy private interfaces\n+dotnet_diagnostic.CA2119.severity = none\n+\n+# Do Not Catch Corrupted State Exceptions\n+dotnet_diagnostic.CA2153.severity = none\n+\n+# Do not raise reserved exception types\n+dotnet_diagnostic.CA2201.severity = none\n+\n+# Instantiate argument exceptions correctly\n+dotnet_diagnostic.CA2208.severity = suggestion\n+\n+# Non-constant fields should not be visible\n+dotnet_diagnostic.CA2211.severity = none\n+\n+# Disposable fields should be disposed\n+dotnet_diagnostic.CA2213.severity = none\n+\n+# Dispose methods should call base class dispose\n+dotnet_diagnostic.CA2215.severity = none\n+\n+# Disposable types should declare finalizer\n+dotnet_diagnostic.CA2216.severity = none\n+\n+dotnet_diagnostic.CA2219.severity = none\n+\n+# Override Equals on overloading operator equals\n+dotnet_diagnostic.CA2224.severity = none\n+\n+# Operator overloads have named alternates\n+dotnet_diagnostic.CA2225.severity = none\n+\n+# Operators should have symmetrical overloads\n+dotnet_diagnostic.CA2226.severity = none\n+\n+# Collection properties should be read only\n+dotnet_diagnostic.CA2227.severity = none\n+\n+# Overload operator equals on overriding value type Equals\n+dotnet_diagnostic.CA2231.severity = none\n+\n+# Pass system uri objects instead of strings\n+dotnet_diagnostic.CA2234.severity = none\n+\n+# Mark all non-serializable fields\n+dotnet_diagnostic.CA2235.severity = none\n+\n+# Provide correct arguments to formatting methods\n+dotnet_diagnostic.CA2241.severity = suggestion\n+\n+# Test for NaN correctly\n+dotnet_diagnostic.CA2242.severity = warning\n+\n+# Attribute string literals should parse correctly\n+dotnet_diagnostic.CA2243.severity = none\n+\n+# Do not duplicate indexed element initializations\n+dotnet_diagnostic.CA2244.severity = none\n+\n+# Do not assign a property to itself.\n+dotnet_diagnostic.CA2245.severity = warning\n+\n+# Assigning symbol and its member in the same statement.\n+dotnet_diagnostic.CA2246.severity = none\n+\n+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.\n+dotnet_diagnostic.CA2247.severity = warning\n+\n+# Provide correct 'enum' argument to 'Enum.HasFlag'\n+dotnet_diagnostic.CA2248.severity = warning\n+\n+# Consider using 'string.Contains' instead of 'string.IndexOf'\n+dotnet_diagnostic.CA2249.severity = suggestion\n+\n+# Do not use insecure deserializer BinaryFormatter\n+dotnet_diagnostic.CA2300.severity = none\n+\n+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder\n+dotnet_diagnostic.CA2301.severity = none\n+\n+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize\n+dotnet_diagnostic.CA2302.severity = none\n+\n+# Do not use insecure deserializer LosFormatter\n+dotnet_diagnostic.CA2305.severity = none\n+\n+# Do not use insecure deserializer NetDataContractSerializer\n+dotnet_diagnostic.CA2310.severity = none\n+\n+# Do not deserialize without first setting NetDataContractSerializer.Binder\n+dotnet_diagnostic.CA2311.severity = none\n+\n+# Ensure NetDataContractSerializer.Binder is set before deserializing\n+dotnet_diagnostic.CA2312.severity = none\n+\n+# Do not use insecure deserializer ObjectStateFormatter\n+dotnet_diagnostic.CA2315.severity = none\n+\n+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver\n+dotnet_diagnostic.CA2321.severity = none\n+\n+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing\n+dotnet_diagnostic.CA2322.severity = none\n+\n+# Do not use TypeNameHandling values other than None\n+dotnet_diagnostic.CA2326.severity = none\n+\n+# Do not use DataTable.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2350.severity = none\n+\n+# Do not use DataSet.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2351.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2352.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type\n+dotnet_diagnostic.CA2353.severity = none\n+\n+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2354.severity = none\n+\n+# Unsafe DataSet or DataTable type found in deserializable object graph\n+dotnet_diagnostic.CA2355.severity = none\n+\n+# Unsafe DataSet or DataTable type in web deserializable object graph\n+dotnet_diagnostic.CA2356.severity = none\n+\n+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data\n+dotnet_diagnostic.CA2361.severity = none\n+\n+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2362.severity = none\n+\n+# Review code for SQL injection vulnerabilities\n+dotnet_diagnostic.CA3001.severity = none\n+\n+# Review code for XSS vulnerabilities\n+dotnet_diagnostic.CA3002.severity = none\n+\n+# Review code for file path injection vulnerabilities\n+dotnet_diagnostic.CA3003.severity = none\n+\n+# Review code for information disclosure vulnerabilities\n+dotnet_diagnostic.CA3004.severity = none\n+\n+# Review code for LDAP injection vulnerabilities\n+dotnet_diagnostic.CA3005.severity = none\n+\n+# Review code for process command injection vulnerabilities\n+dotnet_diagnostic.CA3006.severity = none\n+\n+# Review code for open redirect vulnerabilities\n+dotnet_diagnostic.CA3007.severity = none\n+\n+# Review code for XPath injection vulnerabilities\n+dotnet_diagnostic.CA3008.severity = none\n+\n+# Review code for XML injection vulnerabilities\n+dotnet_diagnostic.CA3009.severity = none\n+\n+# Review code for XAML injection vulnerabilities\n+dotnet_diagnostic.CA3010.severity = none\n+\n+# Review code for DLL injection vulnerabilities\n+dotnet_diagnostic.CA3011.severity = none\n+\n+# Review code for regex injection vulnerabilities\n+dotnet_diagnostic.CA3012.severity = none\n+\n+# Do Not Add Schema By URL\n+dotnet_diagnostic.CA3061.severity = warning\n+\n+# Insecure DTD processing in XML\n+dotnet_diagnostic.CA3075.severity = warning\n+\n+# Insecure XSLT script processing.\n+dotnet_diagnostic.CA3076.severity = warning\n+\n+# Insecure Processing in API Design, XmlDocument and XmlTextReader\n+dotnet_diagnostic.CA3077.severity = warning\n+\n+# Mark Verb Handlers With Validate Antiforgery Token\n+dotnet_diagnostic.CA3147.severity = warning\n+\n+# Do Not Use Weak Cryptographic Algorithms\n+dotnet_diagnostic.CA5350.severity = warning\n+\n+# Do Not Use Broken Cryptographic Algorithms\n+dotnet_diagnostic.CA5351.severity = warning\n+\n+# Review cipher mode usage with cryptography experts\n+dotnet_diagnostic.CA5358.severity = none\n+\n+# Do Not Disable Certificate Validation\n+dotnet_diagnostic.CA5359.severity = warning\n+\n+# Do Not Call Dangerous Methods In Deserialization\n+dotnet_diagnostic.CA5360.severity = warning\n+\n+# Do Not Disable SChannel Use of Strong Crypto\n+dotnet_diagnostic.CA5361.severity = warning\n+\n+# Potential reference cycle in deserialized object graph\n+dotnet_diagnostic.CA5362.severity = none\n+\n+# Do Not Disable Request Validation\n+dotnet_diagnostic.CA5363.severity = warning\n+\n+# Do Not Use Deprecated Security Protocols\n+dotnet_diagnostic.CA5364.severity = warning\n+\n+# Do Not Disable HTTP Header Checking\n+dotnet_diagnostic.CA5365.severity = warning\n+\n+# Use XmlReader For DataSet Read Xml\n+dotnet_diagnostic.CA5366.severity = none\n+\n+# Do Not Serialize Types With Pointer Fields\n+dotnet_diagnostic.CA5367.severity = none\n+\n+# Set ViewStateUserKey For Classes Derived From Page\n+dotnet_diagnostic.CA5368.severity = warning\n+\n+# Use XmlReader For Deserialize\n+dotnet_diagnostic.CA5369.severity = none\n+\n+# Use XmlReader For Validating Reader\n+dotnet_diagnostic.CA5370.severity = warning\n+\n+# Use XmlReader For Schema Read\n+dotnet_diagnostic.CA5371.severity = none\n+\n+# Use XmlReader For XPathDocument\n+dotnet_diagnostic.CA5372.severity = none\n+\n+# Do not use obsolete key derivation function\n+dotnet_diagnostic.CA5373.severity = warning\n+\n+# Do Not Use XslTransform\n+dotnet_diagnostic.CA5374.severity = warning\n+\n+# Do Not Use Account Shared Access Signature\n+dotnet_diagnostic.CA5375.severity = none\n+\n+# Use SharedAccessProtocol HttpsOnly\n+dotnet_diagnostic.CA5376.severity = warning\n+\n+# Use Container Level Access Policy\n+dotnet_diagnostic.CA5377.severity = warning\n+\n+# Do not disable ServicePointManagerSecurityProtocols\n+dotnet_diagnostic.CA5378.severity = warning\n+\n+# Do Not Use Weak Key Derivation Function Algorithm\n+dotnet_diagnostic.CA5379.severity = warning\n+\n+# Do Not Add Certificates To Root Store\n+dotnet_diagnostic.CA5380.severity = warning\n+\n+# Ensure Certificates Are Not Added To Root Store\n+dotnet_diagnostic.CA5381.severity = warning\n+\n+# Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5382.severity = none\n+\n+# Ensure Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5383.severity = none\n+\n+# Do Not Use Digital Signature Algorithm (DSA)\n+dotnet_diagnostic.CA5384.severity = warning\n+\n+# Use Rivest\u2013Shamir\u2013Adleman (RSA) Algorithm With Sufficient Key Size\n+dotnet_diagnostic.CA5385.severity = warning\n+\n+# Avoid hardcoding SecurityProtocolType value\n+dotnet_diagnostic.CA5386.severity = none\n+\n+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count\n+dotnet_diagnostic.CA5387.severity = none\n+\n+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function\n+dotnet_diagnostic.CA5388.severity = none\n+\n+# Do Not Add Archive Item's Path To The Target File System Path\n+dotnet_diagnostic.CA5389.severity = none\n+\n+# Do not hard-code encryption key\n+dotnet_diagnostic.CA5390.severity = none\n+\n+# Use antiforgery tokens in ASP.NET Core MVC controllers\n+dotnet_diagnostic.CA5391.severity = none\n+\n+# Use DefaultDllImportSearchPaths attribute for P/Invokes\n+dotnet_diagnostic.CA5392.severity = none\n+\n+# Do not use unsafe DllImportSearchPath value\n+dotnet_diagnostic.CA5393.severity = none\n+\n+# Do not use insecure randomness\n+dotnet_diagnostic.CA5394.severity = none\n+\n+# Miss HttpVerb attribute for action methods\n+dotnet_diagnostic.CA5395.severity = none\n+\n+# Set HttpOnly to true for HttpCookie\n+dotnet_diagnostic.CA5396.severity = none\n+\n+# Do not use deprecated SslProtocols values\n+dotnet_diagnostic.CA5397.severity = none\n+\n+# Avoid hardcoded SslProtocols values\n+dotnet_diagnostic.CA5398.severity = none\n+\n+# HttpClients should enable certificate revocation list checks\n+dotnet_diagnostic.CA5399.severity = none\n+\n+# Ensure HttpClient certificate revocation list check is not disabled\n+dotnet_diagnostic.CA5400.severity = none\n+\n+# Do not use CreateEncryptor with non-default IV\n+dotnet_diagnostic.CA5401.severity = none\n+\n+# Use CreateEncryptor with the default IV\n+dotnet_diagnostic.CA5402.severity = none\n+\n+# Do not hard-code certificate\n+dotnet_diagnostic.CA5403.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3000.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3001.severity = none\n+\n+# XML comments\n+dotnet_diagnostic.SA0001.severity = suggestion",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "I tried adding this to Directory.Build.props, it didn't work.\r\n```\r\n<!--Generate XML Documentation file on build-->\r\n<PropertyGroup>\r\n  <GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n</PropertyGroup>\r\n```\r\n\r\nI also tried adding the same to each individual project in the solution, this also didn't work. I still received:\r\n`CSC : warning SA0001: XML comment analysis is disabled due to project configuration`\r\n\r\n",
              "createdAt": "2022-01-03T02:34:10Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1094 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true\n+\n+# Microsoft.Analyzers.ManagedCodeAnalysis\n+# Description: Microsoft.Analyzers.ManagedCodeAnalysis\n+\n+\n+# Analyzer threw an exception\n+dotnet_diagnostic.AD0001.severity = suggestion\n+\n+# Ensure minimum API surface is respected\n+dotnet_diagnostic.BCL0001.severity = warning\n+\n+# AppContext default value expected to be true\n+dotnet_diagnostic.BCL0010.severity = warning\n+\n+# AppContext default value defined in if statement with incorrect pattern\n+dotnet_diagnostic.BCL0011.severity = warning\n+\n+# AppContext default value defined in if statement at root of switch case\n+dotnet_diagnostic.BCL0012.severity = warning\n+\n+# Invalid P/Invoke call\n+dotnet_diagnostic.BCL0015.severity = none\n+\n+# Invalid SR.Format call\n+dotnet_diagnostic.BCL0020.severity = warning\n+\n+# Do not declare static members on generic types\n+dotnet_diagnostic.CA1000.severity = none\n+\n+# Types that own disposable fields should be disposable\n+dotnet_diagnostic.CA1001.severity = none\n+\n+# Do not expose generic lists\n+dotnet_diagnostic.CA1002.severity = none\n+\n+# Use generic event handler instances\n+dotnet_diagnostic.CA1003.severity = none\n+\n+# Avoid excessive parameters on generic types\n+dotnet_diagnostic.CA1005.severity = none\n+\n+# Enums should have zero value\n+dotnet_diagnostic.CA1008.severity = none\n+\n+# Generic interface should also be implemented\n+dotnet_diagnostic.CA1010.severity = none\n+\n+# Abstract types should not have constructors\n+dotnet_diagnostic.CA1012.severity = none\n+\n+# Mark assemblies with CLSCompliant\n+dotnet_diagnostic.CA1014.severity = none\n+\n+# Mark assemblies with assembly version\n+dotnet_diagnostic.CA1016.severity = none\n+\n+# Mark assemblies with ComVisible\n+dotnet_diagnostic.CA1017.severity = none\n+\n+# Mark attributes with AttributeUsageAttribute\n+dotnet_diagnostic.CA1018.severity = warning\n+\n+# Define accessors for attribute arguments\n+dotnet_diagnostic.CA1019.severity = none\n+\n+# Use properties where appropriate\n+dotnet_diagnostic.CA1024.severity = none\n+\n+# Mark enums with FlagsAttribute\n+dotnet_diagnostic.CA1027.severity = none\n+\n+# Enum Storage should be Int32\n+dotnet_diagnostic.CA1028.severity = none\n+\n+# Use events where appropriate\n+dotnet_diagnostic.CA1030.severity = none\n+\n+# Do not catch general exception types\n+dotnet_diagnostic.CA1031.severity = none\n+\n+dotnet_diagnostic.CA1032.severity = none\n+\n+# Interface methods should be callable by child types\n+dotnet_diagnostic.CA1033.severity = none\n+\n+dotnet_diagnostic.CA1034.severity = none\n+\n+# Override methods on comparable types\n+dotnet_diagnostic.CA1036.severity = none\n+\n+# Avoid empty interfaces\n+dotnet_diagnostic.CA1040.severity = none\n+\n+# Provide ObsoleteAttribute message\n+dotnet_diagnostic.CA1041.severity = none\n+\n+# Use Integral Or String Argument For Indexers\n+dotnet_diagnostic.CA1043.severity = none\n+\n+# Properties should not be write only\n+dotnet_diagnostic.CA1044.severity = none\n+\n+# Do not overload equality operator on reference types\n+dotnet_diagnostic.CA1046.severity = none\n+\n+# Do not declare protected member in sealed type\n+dotnet_diagnostic.CA1047.severity = warning\n+\n+# Declare types in namespaces\n+dotnet_diagnostic.CA1050.severity = suggestion\n+\n+# Do not declare visible instance fields\n+dotnet_diagnostic.CA1051.severity = none\n+\n+# Static holder types should be Static or NotInheritable\n+dotnet_diagnostic.CA1052.severity = none\n+\n+# Uri parameters should not be strings\n+dotnet_diagnostic.CA1054.severity = none\n+\n+# Uri return values should not be strings\n+dotnet_diagnostic.CA1055.severity = none\n+\n+# Uri properties should not be strings\n+dotnet_diagnostic.CA1056.severity = none\n+\n+# Types should not extend certain base types\n+dotnet_diagnostic.CA1058.severity = none\n+\n+# Do not hide base class methods\n+dotnet_diagnostic.CA1061.severity = none\n+\n+# Validate arguments of public methods\n+dotnet_diagnostic.CA1062.severity = none\n+\n+# Implement IDisposable Correctly\n+dotnet_diagnostic.CA1063.severity = none\n+\n+# Exceptions should be public\n+dotnet_diagnostic.CA1064.severity = none\n+\n+# Do not raise exceptions in unexpected locations\n+dotnet_diagnostic.CA1065.severity = none\n+\n+# Implement IEquatable when overriding Object.Equals\n+dotnet_diagnostic.CA1066.severity = none\n+\n+# Override Object.Equals(object) when implementing IEquatable<T>\n+dotnet_diagnostic.CA1067.severity = none\n+\n+# CancellationToken parameters must come last\n+dotnet_diagnostic.CA1068.severity = none\n+\n+# Enums values should not be duplicated\n+dotnet_diagnostic.CA1069.severity = none\n+\n+# Do not declare event fields as virtual\n+dotnet_diagnostic.CA1070.severity = suggestion\n+\n+# Avoid using cref tags with a prefix\n+dotnet_diagnostic.CA1200.severity = suggestion\n+\n+# Do not pass literals as localized parameters\n+dotnet_diagnostic.CA1303.severity = none\n+\n+# Specify CultureInfo\n+dotnet_diagnostic.CA1304.severity = none\n+\n+# Specify IFormatProvider\n+dotnet_diagnostic.CA1305.severity = none\n+\n+# Specify StringComparison\n+dotnet_diagnostic.CA1307.severity = none\n+\n+# Normalize strings to uppercase\n+dotnet_diagnostic.CA1308.severity = none\n+\n+# Use ordinal stringcomparison\n+dotnet_diagnostic.CA1309.severity = none\n+\n+# P/Invokes should not be visible\n+dotnet_diagnostic.CA1401.severity = warning\n+\n+# Do not use 'OutAttribute' on string parameters for P/Invokes\n+dotnet_diagnostic.CA1417.severity = warning\n+\n+# Avoid excessive complexity\n+dotnet_diagnostic.CA1502.severity = none\n+\n+# Avoid unmaintainable code\n+dotnet_diagnostic.CA1505.severity = none\n+\n+# Avoid excessive class coupling\n+dotnet_diagnostic.CA1506.severity = none\n+\n+# Use nameof to express symbol names\n+dotnet_diagnostic.CA1507.severity = suggestion\n+\n+# Avoid dead conditional code\n+dotnet_diagnostic.CA1508.severity = none\n+\n+# Invalid entry in code metrics rule specification file\n+dotnet_diagnostic.CA1509.severity = none\n+\n+# Do not name enum values 'Reserved'\n+dotnet_diagnostic.CA1700.severity = none\n+\n+dotnet_diagnostic.CA1707.severity = none\n+\n+# Identifiers should have correct suffix\n+dotnet_diagnostic.CA1710.severity = none\n+\n+# Identifiers should not have incorrect suffix\n+dotnet_diagnostic.CA1711.severity = none\n+\n+# Do not prefix enum values with type name\n+dotnet_diagnostic.CA1712.severity = none\n+\n+dotnet_diagnostic.CA1714.severity = none\n+\n+# Identifiers should have correct prefix\n+dotnet_diagnostic.CA1715.severity = none\n+\n+# Identifiers should not match keywords\n+dotnet_diagnostic.CA1716.severity = none\n+\n+dotnet_diagnostic.CA1717.severity = none\n+\n+# Identifier contains type name\n+dotnet_diagnostic.CA1720.severity = none\n+\n+# Property names should not match get methods\n+dotnet_diagnostic.CA1721.severity = none\n+\n+# Type names should not match namespaces\n+dotnet_diagnostic.CA1724.severity = none\n+\n+# Review unused parameters\n+dotnet_diagnostic.CA1801.severity = none\n+\n+# Use literals where appropriate\n+dotnet_diagnostic.CA1802.severity = suggestion\n+\n+# Do not initialize unnecessarily\n+dotnet_diagnostic.CA1805.severity = suggestion\n+\n+dotnet_diagnostic.CA1806.severity = none\n+\n+# Initialize reference type static fields inline\n+dotnet_diagnostic.CA1810.severity = suggestion\n+\n+# Avoid uninstantiated internal classes\n+dotnet_diagnostic.CA1812.severity = none\n+\n+dotnet_diagnostic.CA1814.severity = none\n+\n+dotnet_diagnostic.CA1815.severity = none\n+\n+# Dispose methods should call SuppressFinalize\n+dotnet_diagnostic.CA1816.severity = none\n+\n+dotnet_diagnostic.CA1819.severity = none\n+\n+# Test for empty strings using string length\n+dotnet_diagnostic.CA1820.severity = none\n+\n+# Remove empty Finalizers\n+dotnet_diagnostic.CA1821.severity = warning\n+\n+# Mark members as static\n+dotnet_diagnostic.CA1822.severity = none\n+\n+# Avoid unused private fields\n+dotnet_diagnostic.CA1823.severity = suggestion\n+\n+# Mark assemblies with NeutralResourcesLanguageAttribute\n+dotnet_diagnostic.CA1824.severity = warning\n+\n+# Avoid zero-length array allocations.\n+dotnet_diagnostic.CA1825.severity = suggestion\n+\n+# Do not use Count() or LongCount() when Any() can be used\n+dotnet_diagnostic.CA1827.severity = warning\n+\n+# Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used\n+dotnet_diagnostic.CA1828.severity = warning\n+\n+# Use Length/Count property instead of Count() when available\n+dotnet_diagnostic.CA1829.severity = suggestion\n+\n+# Prefer strongly-typed Append and Insert method overloads on StringBuilder.\n+dotnet_diagnostic.CA1830.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1831.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1832.severity = warning\n+\n+# Use AsSpan or AsMemory instead of Range-based indexers when appropriate\n+dotnet_diagnostic.CA1833.severity = warning\n+\n+# Consider using 'StringBuilder.Append(char)' when applicable.\n+dotnet_diagnostic.CA1834.severity = suggestion\n+\n+# Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+dotnet_diagnostic.CA1835.severity = suggestion\n+\n+# Prefer IsEmpty over Count\n+dotnet_diagnostic.CA1836.severity = suggestion\n+\n+# Use 'Environment.ProcessId'\n+dotnet_diagnostic.CA1837.severity = suggestion\n+\n+# Avoid 'StringBuilder' parameters for P/Invokes\n+dotnet_diagnostic.CA1838.severity = suggestion\n+\n+# Dispose objects before losing scope\n+dotnet_diagnostic.CA2000.severity = none\n+\n+# Do not lock on objects with weak identity\n+dotnet_diagnostic.CA2002.severity = none\n+\n+# Consider calling ConfigureAwait on the awaited task\n+dotnet_diagnostic.CA2007.severity = suggestion\n+\n+# Do not create tasks without passing a TaskScheduler\n+dotnet_diagnostic.CA2008.severity = suggestion\n+\n+# Do not call ToImmutableCollection on an ImmutableCollection value\n+dotnet_diagnostic.CA2009.severity = warning\n+\n+# Avoid infinite recursion\n+dotnet_diagnostic.CA2011.severity = warning\n+\n+# Use ValueTasks correctly\n+dotnet_diagnostic.CA2012.severity = warning\n+\n+# Do not use ReferenceEquals with value types\n+dotnet_diagnostic.CA2013.severity = warning\n+\n+# Do not use stackalloc in loops.\n+dotnet_diagnostic.CA2014.severity = warning\n+\n+# Do not define finalizers for types derived from MemoryManager<T>\n+dotnet_diagnostic.CA2015.severity = warning\n+\n+# Forward the 'CancellationToken' parameter to methods that take one\n+dotnet_diagnostic.CA2016.severity = suggestion\n+\n+# Review SQL queries for security vulnerabilities\n+dotnet_diagnostic.CA2100.severity = none\n+\n+# Specify marshaling for P/Invoke string arguments\n+dotnet_diagnostic.CA2101.severity = none\n+\n+# Review visible event handlers\n+dotnet_diagnostic.CA2109.severity = none\n+\n+# Seal methods that satisfy private interfaces\n+dotnet_diagnostic.CA2119.severity = none\n+\n+# Do Not Catch Corrupted State Exceptions\n+dotnet_diagnostic.CA2153.severity = none\n+\n+# Do not raise reserved exception types\n+dotnet_diagnostic.CA2201.severity = none\n+\n+# Instantiate argument exceptions correctly\n+dotnet_diagnostic.CA2208.severity = suggestion\n+\n+# Non-constant fields should not be visible\n+dotnet_diagnostic.CA2211.severity = none\n+\n+# Disposable fields should be disposed\n+dotnet_diagnostic.CA2213.severity = none\n+\n+# Dispose methods should call base class dispose\n+dotnet_diagnostic.CA2215.severity = none\n+\n+# Disposable types should declare finalizer\n+dotnet_diagnostic.CA2216.severity = none\n+\n+dotnet_diagnostic.CA2219.severity = none\n+\n+# Override Equals on overloading operator equals\n+dotnet_diagnostic.CA2224.severity = none\n+\n+# Operator overloads have named alternates\n+dotnet_diagnostic.CA2225.severity = none\n+\n+# Operators should have symmetrical overloads\n+dotnet_diagnostic.CA2226.severity = none\n+\n+# Collection properties should be read only\n+dotnet_diagnostic.CA2227.severity = none\n+\n+# Overload operator equals on overriding value type Equals\n+dotnet_diagnostic.CA2231.severity = none\n+\n+# Pass system uri objects instead of strings\n+dotnet_diagnostic.CA2234.severity = none\n+\n+# Mark all non-serializable fields\n+dotnet_diagnostic.CA2235.severity = none\n+\n+# Provide correct arguments to formatting methods\n+dotnet_diagnostic.CA2241.severity = suggestion\n+\n+# Test for NaN correctly\n+dotnet_diagnostic.CA2242.severity = warning\n+\n+# Attribute string literals should parse correctly\n+dotnet_diagnostic.CA2243.severity = none\n+\n+# Do not duplicate indexed element initializations\n+dotnet_diagnostic.CA2244.severity = none\n+\n+# Do not assign a property to itself.\n+dotnet_diagnostic.CA2245.severity = warning\n+\n+# Assigning symbol and its member in the same statement.\n+dotnet_diagnostic.CA2246.severity = none\n+\n+# Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum.\n+dotnet_diagnostic.CA2247.severity = warning\n+\n+# Provide correct 'enum' argument to 'Enum.HasFlag'\n+dotnet_diagnostic.CA2248.severity = warning\n+\n+# Consider using 'string.Contains' instead of 'string.IndexOf'\n+dotnet_diagnostic.CA2249.severity = suggestion\n+\n+# Do not use insecure deserializer BinaryFormatter\n+dotnet_diagnostic.CA2300.severity = none\n+\n+# Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder\n+dotnet_diagnostic.CA2301.severity = none\n+\n+# Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize\n+dotnet_diagnostic.CA2302.severity = none\n+\n+# Do not use insecure deserializer LosFormatter\n+dotnet_diagnostic.CA2305.severity = none\n+\n+# Do not use insecure deserializer NetDataContractSerializer\n+dotnet_diagnostic.CA2310.severity = none\n+\n+# Do not deserialize without first setting NetDataContractSerializer.Binder\n+dotnet_diagnostic.CA2311.severity = none\n+\n+# Ensure NetDataContractSerializer.Binder is set before deserializing\n+dotnet_diagnostic.CA2312.severity = none\n+\n+# Do not use insecure deserializer ObjectStateFormatter\n+dotnet_diagnostic.CA2315.severity = none\n+\n+# Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver\n+dotnet_diagnostic.CA2321.severity = none\n+\n+# Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing\n+dotnet_diagnostic.CA2322.severity = none\n+\n+# Do not use TypeNameHandling values other than None\n+dotnet_diagnostic.CA2326.severity = none\n+\n+# Do not use DataTable.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2350.severity = none\n+\n+# Do not use DataSet.ReadXml() with untrusted data\n+dotnet_diagnostic.CA2351.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2352.severity = none\n+\n+# Unsafe DataSet or DataTable in serializable type\n+dotnet_diagnostic.CA2353.severity = none\n+\n+# Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2354.severity = none\n+\n+# Unsafe DataSet or DataTable type found in deserializable object graph\n+dotnet_diagnostic.CA2355.severity = none\n+\n+# Unsafe DataSet or DataTable type in web deserializable object graph\n+dotnet_diagnostic.CA2356.severity = none\n+\n+# Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data\n+dotnet_diagnostic.CA2361.severity = none\n+\n+# Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks\n+dotnet_diagnostic.CA2362.severity = none\n+\n+# Review code for SQL injection vulnerabilities\n+dotnet_diagnostic.CA3001.severity = none\n+\n+# Review code for XSS vulnerabilities\n+dotnet_diagnostic.CA3002.severity = none\n+\n+# Review code for file path injection vulnerabilities\n+dotnet_diagnostic.CA3003.severity = none\n+\n+# Review code for information disclosure vulnerabilities\n+dotnet_diagnostic.CA3004.severity = none\n+\n+# Review code for LDAP injection vulnerabilities\n+dotnet_diagnostic.CA3005.severity = none\n+\n+# Review code for process command injection vulnerabilities\n+dotnet_diagnostic.CA3006.severity = none\n+\n+# Review code for open redirect vulnerabilities\n+dotnet_diagnostic.CA3007.severity = none\n+\n+# Review code for XPath injection vulnerabilities\n+dotnet_diagnostic.CA3008.severity = none\n+\n+# Review code for XML injection vulnerabilities\n+dotnet_diagnostic.CA3009.severity = none\n+\n+# Review code for XAML injection vulnerabilities\n+dotnet_diagnostic.CA3010.severity = none\n+\n+# Review code for DLL injection vulnerabilities\n+dotnet_diagnostic.CA3011.severity = none\n+\n+# Review code for regex injection vulnerabilities\n+dotnet_diagnostic.CA3012.severity = none\n+\n+# Do Not Add Schema By URL\n+dotnet_diagnostic.CA3061.severity = warning\n+\n+# Insecure DTD processing in XML\n+dotnet_diagnostic.CA3075.severity = warning\n+\n+# Insecure XSLT script processing.\n+dotnet_diagnostic.CA3076.severity = warning\n+\n+# Insecure Processing in API Design, XmlDocument and XmlTextReader\n+dotnet_diagnostic.CA3077.severity = warning\n+\n+# Mark Verb Handlers With Validate Antiforgery Token\n+dotnet_diagnostic.CA3147.severity = warning\n+\n+# Do Not Use Weak Cryptographic Algorithms\n+dotnet_diagnostic.CA5350.severity = warning\n+\n+# Do Not Use Broken Cryptographic Algorithms\n+dotnet_diagnostic.CA5351.severity = warning\n+\n+# Review cipher mode usage with cryptography experts\n+dotnet_diagnostic.CA5358.severity = none\n+\n+# Do Not Disable Certificate Validation\n+dotnet_diagnostic.CA5359.severity = warning\n+\n+# Do Not Call Dangerous Methods In Deserialization\n+dotnet_diagnostic.CA5360.severity = warning\n+\n+# Do Not Disable SChannel Use of Strong Crypto\n+dotnet_diagnostic.CA5361.severity = warning\n+\n+# Potential reference cycle in deserialized object graph\n+dotnet_diagnostic.CA5362.severity = none\n+\n+# Do Not Disable Request Validation\n+dotnet_diagnostic.CA5363.severity = warning\n+\n+# Do Not Use Deprecated Security Protocols\n+dotnet_diagnostic.CA5364.severity = warning\n+\n+# Do Not Disable HTTP Header Checking\n+dotnet_diagnostic.CA5365.severity = warning\n+\n+# Use XmlReader For DataSet Read Xml\n+dotnet_diagnostic.CA5366.severity = none\n+\n+# Do Not Serialize Types With Pointer Fields\n+dotnet_diagnostic.CA5367.severity = none\n+\n+# Set ViewStateUserKey For Classes Derived From Page\n+dotnet_diagnostic.CA5368.severity = warning\n+\n+# Use XmlReader For Deserialize\n+dotnet_diagnostic.CA5369.severity = none\n+\n+# Use XmlReader For Validating Reader\n+dotnet_diagnostic.CA5370.severity = warning\n+\n+# Use XmlReader For Schema Read\n+dotnet_diagnostic.CA5371.severity = none\n+\n+# Use XmlReader For XPathDocument\n+dotnet_diagnostic.CA5372.severity = none\n+\n+# Do not use obsolete key derivation function\n+dotnet_diagnostic.CA5373.severity = warning\n+\n+# Do Not Use XslTransform\n+dotnet_diagnostic.CA5374.severity = warning\n+\n+# Do Not Use Account Shared Access Signature\n+dotnet_diagnostic.CA5375.severity = none\n+\n+# Use SharedAccessProtocol HttpsOnly\n+dotnet_diagnostic.CA5376.severity = warning\n+\n+# Use Container Level Access Policy\n+dotnet_diagnostic.CA5377.severity = warning\n+\n+# Do not disable ServicePointManagerSecurityProtocols\n+dotnet_diagnostic.CA5378.severity = warning\n+\n+# Do Not Use Weak Key Derivation Function Algorithm\n+dotnet_diagnostic.CA5379.severity = warning\n+\n+# Do Not Add Certificates To Root Store\n+dotnet_diagnostic.CA5380.severity = warning\n+\n+# Ensure Certificates Are Not Added To Root Store\n+dotnet_diagnostic.CA5381.severity = warning\n+\n+# Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5382.severity = none\n+\n+# Ensure Use Secure Cookies In ASP.Net Core\n+dotnet_diagnostic.CA5383.severity = none\n+\n+# Do Not Use Digital Signature Algorithm (DSA)\n+dotnet_diagnostic.CA5384.severity = warning\n+\n+# Use Rivest\u2013Shamir\u2013Adleman (RSA) Algorithm With Sufficient Key Size\n+dotnet_diagnostic.CA5385.severity = warning\n+\n+# Avoid hardcoding SecurityProtocolType value\n+dotnet_diagnostic.CA5386.severity = none\n+\n+# Do Not Use Weak Key Derivation Function With Insufficient Iteration Count\n+dotnet_diagnostic.CA5387.severity = none\n+\n+# Ensure Sufficient Iteration Count When Using Weak Key Derivation Function\n+dotnet_diagnostic.CA5388.severity = none\n+\n+# Do Not Add Archive Item's Path To The Target File System Path\n+dotnet_diagnostic.CA5389.severity = none\n+\n+# Do not hard-code encryption key\n+dotnet_diagnostic.CA5390.severity = none\n+\n+# Use antiforgery tokens in ASP.NET Core MVC controllers\n+dotnet_diagnostic.CA5391.severity = none\n+\n+# Use DefaultDllImportSearchPaths attribute for P/Invokes\n+dotnet_diagnostic.CA5392.severity = none\n+\n+# Do not use unsafe DllImportSearchPath value\n+dotnet_diagnostic.CA5393.severity = none\n+\n+# Do not use insecure randomness\n+dotnet_diagnostic.CA5394.severity = none\n+\n+# Miss HttpVerb attribute for action methods\n+dotnet_diagnostic.CA5395.severity = none\n+\n+# Set HttpOnly to true for HttpCookie\n+dotnet_diagnostic.CA5396.severity = none\n+\n+# Do not use deprecated SslProtocols values\n+dotnet_diagnostic.CA5397.severity = none\n+\n+# Avoid hardcoded SslProtocols values\n+dotnet_diagnostic.CA5398.severity = none\n+\n+# HttpClients should enable certificate revocation list checks\n+dotnet_diagnostic.CA5399.severity = none\n+\n+# Ensure HttpClient certificate revocation list check is not disabled\n+dotnet_diagnostic.CA5400.severity = none\n+\n+# Do not use CreateEncryptor with non-default IV\n+dotnet_diagnostic.CA5401.severity = none\n+\n+# Use CreateEncryptor with the default IV\n+dotnet_diagnostic.CA5402.severity = none\n+\n+# Do not hard-code certificate\n+dotnet_diagnostic.CA5403.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3000.severity = none\n+\n+# Avoid using accessing Assembly file path when publishing as a single-file\n+dotnet_diagnostic.IL3001.severity = none\n+\n+# XML comments\n+dotnet_diagnostic.SA0001.severity = suggestion",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: The canonical casing of the prop name is `EnableNETAnalyzers`.",
              "createdAt": "2022-01-03T16:18:48Z",
              "path": "Directory.Build.props",
              "diffHunk": "@@ -71,11 +71,10 @@\n \n     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>\n   </PropertyGroup>\n-  \n-  <Import Project=\"$(RepositoryEngineeringDir)Analyzers.props\" />\n \n+  <!-- Disable SDK supplied netanalyzers as we reference them from nugets instead -->\n   <PropertyGroup>\n-    <EnableAnalyzers>true</EnableAnalyzers>\n+    <EnableNetAnalyzers>false</EnableNetAnalyzers>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Use the latest pre-release version (1.2.0-beta.376)? Also, looks like the added lines are not indented correctly.",
              "createdAt": "2022-01-03T16:24:03Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -11,20 +11,20 @@\n     <PackageReference Update=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\n     <PackageReference Update=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.3\" />\n-    <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Version=\"3.0.4492\" />\n     <PackageReference Update=\"PdbGit\" Version=\"3.0.41\" />\n     <PackageReference Update=\"Shouldly\" Version=\"3.0.0\" />\n-    <PackageReference Update=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.164\" PrivateAssets=\"all\" />\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\n     <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.BannedApiAnalyzers\" Version=\"3.3.3\" />\n+\t<GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"6.0.0\" PrivateAssets=\"all\" />\n+\t<GlobalPackageReference Include=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.354\" PrivateAssets=\"all\"/>",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The latest didn't seem to be available from arcade when I tried. Even though it showed up In nuget. It was very strange. So instead of debugging I just used the version the error message suggest as the latest.",
              "createdAt": "2022-01-03T20:34:50Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -11,20 +11,20 @@\n     <PackageReference Update=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\n     <PackageReference Update=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.3\" />\n-    <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Version=\"3.0.4492\" />\n     <PackageReference Update=\"PdbGit\" Version=\"3.0.41\" />\n     <PackageReference Update=\"Shouldly\" Version=\"3.0.0\" />\n-    <PackageReference Update=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.164\" PrivateAssets=\"all\" />\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\n     <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.BannedApiAnalyzers\" Version=\"3.3.3\" />\n+\t<GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"6.0.0\" PrivateAssets=\"all\" />\n+\t<GlobalPackageReference Include=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.354\" PrivateAssets=\"all\"/>",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We tend to prefer quoting properties like \"'$(ProjectIsDeprecated)'...",
              "createdAt": "2022-01-03T23:19:31Z",
              "path": "Directory.Build.targets",
              "diffHunk": "@@ -10,6 +10,18 @@\n     <None Include=\"$(ThirdPartyNotice)\" Pack=\"true\" PackagePath=\"notices\" Visible=\"false\" Condition=\" '$(IsPackable)' == 'true' \" />\n   </ItemGroup>\n \n+  <!-- Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) != 'true'\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think we have any deprecated test projects.",
              "createdAt": "2022-01-03T23:19:48Z",
              "path": "Directory.Build.targets",
              "diffHunk": "@@ -10,6 +10,18 @@\n     <None Include=\"$(ThirdPartyNotice)\" Pack=\"true\" PackagePath=\"notices\" Visible=\"false\" Condition=\" '$(IsPackable)' == 'true' \" />\n   </ItemGroup>\n \n+  <!-- Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) != 'true'\">\n+    <!-- Always include Common.globalconfig -->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/Common.globalconfig\" />\n+  </ItemGroup>\n+  \n+  <!-- Test Project Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) == 'true'\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I feel like there should be another dot. I'm leaning towards `Test.Common.globalconfig` but maybe `Common.Test.globalconfig`.",
              "createdAt": "2022-01-03T23:20:36Z",
              "path": "Directory.Build.targets",
              "diffHunk": "@@ -10,6 +10,18 @@\n     <None Include=\"$(ThirdPartyNotice)\" Pack=\"true\" PackagePath=\"notices\" Visible=\"false\" Condition=\" '$(IsPackable)' == 'true' \" />\n   </ItemGroup>\n \n+  <!-- Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) != 'true'\">\n+    <!-- Always include Common.globalconfig -->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/Common.globalconfig\" />\n+  </ItemGroup>\n+  \n+  <!-- Test Project Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) == 'true'\">\n+    <!-- Always include Common.globalconfig -->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/CommonTest.globalconfig\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I went with common test instead of test common so that the files were kept together. But test.common does seem to make more sense.",
              "createdAt": "2022-01-03T23:31:41Z",
              "path": "Directory.Build.targets",
              "diffHunk": "@@ -10,6 +10,18 @@\n     <None Include=\"$(ThirdPartyNotice)\" Pack=\"true\" PackagePath=\"notices\" Visible=\"false\" Condition=\" '$(IsPackable)' == 'true' \" />\n   </ItemGroup>\n \n+  <!-- Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) != 'true'\">\n+    <!-- Always include Common.globalconfig -->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/Common.globalconfig\" />\n+  </ItemGroup>\n+  \n+  <!-- Test Project Global Analyzer Config -->\n+  <ItemGroup Condition=\"$(ProjectIsDeprecated) != 'true' AND $(IsTestProject) == 'true'\">\n+    <!-- Always include Common.globalconfig -->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/CommonTest.globalconfig\" />",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need to be more than:\r\n```suggestion\r\n<Project>\r\n```\r\n?",
              "createdAt": "2022-01-03T23:21:31Z",
              "path": "src/Deprecated/Directory.Build.props",
              "diffHunk": "@@ -0,0 +1,7 @@\n+<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is the default, so you can probably just drop this PropertyGroup.",
              "createdAt": "2022-01-03T23:22:31Z",
              "path": "Directory.Build.props",
              "diffHunk": "@@ -71,11 +71,10 @@\n \n     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>\n   </PropertyGroup>\n-  \n-  <Import Project=\"$(RepositoryEngineeringDir)Analyzers.props\" />\n \n+  <!-- Disable SDK supplied netanalyzers as we reference them from nugets instead -->\n   <PropertyGroup>\n-    <EnableAnalyzers>true</EnableAnalyzers>\n+    <EnableNETAnalyzers>false</EnableNETAnalyzers>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This file should be included in all projects\r\n\r\n```suggestion\r\n  <ItemGroup Condition=\"'$(ProjectIsDeprecated)' != 'true'\">\r\n    <!-- Include Common.globalconfig for non-deprecated projects-->\r\n    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/Common.globalconfig\" />\r\n```",
              "createdAt": "2022-01-04T15:34:49Z",
              "path": "Directory.Build.targets",
              "diffHunk": "@@ -10,6 +10,18 @@\n     <None Include=\"$(ThirdPartyNotice)\" Pack=\"true\" PackagePath=\"notices\" Visible=\"false\" Condition=\" '$(IsPackable)' == 'true' \" />\n   </ItemGroup>\n \n+  <!-- Global Analyzer Config -->\n+  <ItemGroup Condition=\"'$(ProjectIsDeprecated)' != 'true' AND '$(IsTestProject)' != 'true'\">\n+    <!-- Include Common.globalconfig for non-deprecated and non-test projects-->\n+    <EditorConfigFiles Include=\"$(MSBuildThisFileDirectory)eng/Common.globalconfig\" />",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nis_global = true\r\n\r\n# Set precedence one lower than default to allow subsets of projects to override values\r\n# from this file with more specific configurations\r\nglobal_level = 99\r\n```",
              "createdAt": "2022-01-04T15:36:31Z",
              "path": "eng/Common.globalconfig",
              "diffHunk": "@@ -0,0 +1,1106 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file\n+is_global = true",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udcdd All items should be removed from this file _except_ for items that are different from **Common.globalconfig**\r\n\r\nThis task would be tedious by hand, but should be trivial with a tool like Beyond Compare.",
              "createdAt": "2022-01-04T15:37:20Z",
              "path": "eng/Common.Test.globalconfig",
              "diffHunk": "@@ -0,0 +1,1106 @@\n+# Top level entry required to mark this as a global AnalyzerConfig file",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Copying from https://github.com/dotnet/msbuild/pull/7206#discussion_r778433133:\r\n\r\nWhy is this explicitly referenced? It should be present by default since we use a 6.0+ SDK.",
              "createdAt": "2022-01-05T14:56:26Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -11,20 +11,20 @@\n     <PackageReference Update=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\n     <PackageReference Update=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.3\" />\n-    <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Version=\"3.0.4492\" />\n     <PackageReference Update=\"PdbGit\" Version=\"3.0.41\" />\n     <PackageReference Update=\"Shouldly\" Version=\"3.0.0\" />\n-    <PackageReference Update=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.164\" PrivateAssets=\"all\" />\n   </ItemGroup>\n \n-  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\n+  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'\">\n     <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.BannedApiAnalyzers\" Version=\"3.3.3\" />\n+    <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"6.0.0\" PrivateAssets=\"all\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The only reason this should be necessary would be if this repo needed to build with an older SDK for some reason (say the .NET 5 SDK) but wanted newer analysis modes. Most of the repos in the github.com/dotnet org are going to be targeted latest (or prerelease) sdks.",
              "createdAt": "2022-01-05T18:32:36Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -11,20 +11,20 @@\n     <PackageReference Update=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\n     <PackageReference Update=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.3\" />\n-    <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Version=\"3.0.4492\" />\n     <PackageReference Update=\"PdbGit\" Version=\"3.0.41\" />\n     <PackageReference Update=\"Shouldly\" Version=\"3.0.0\" />\n-    <PackageReference Update=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.164\" PrivateAssets=\"all\" />\n   </ItemGroup>\n \n-  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\n+  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'\">\n     <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.BannedApiAnalyzers\" Version=\"3.3.3\" />\n+    <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.NetAnalyzers\" Version=\"6.0.0\" PrivateAssets=\"all\" />",
              "author": {
                "login": "jmarolf"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n  <!-- Enable SDK supplied netanalyzers for all target frameworks -->\r\n```",
              "createdAt": "2022-01-07T16:55:39Z",
              "path": "Directory.Build.props",
              "diffHunk": "@@ -71,11 +71,10 @@\n \n     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>\n   </PropertyGroup>\n-  \n-  <Import Project=\"$(RepositoryEngineeringDir)Analyzers.props\" />\n \n+  <!-- Enable SDK supplied netanalyzers as we reference them from nugets instead -->",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\n\r\n```suggestion\r\n  </ItemGroup>\r\n```",
              "createdAt": "2022-01-07T16:56:55Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -11,20 +11,19 @@\n     <PackageReference Update=\"BenchmarkDotNet\" Version=\"0.13.1\" />\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\n     <PackageReference Update=\"Microsoft.CodeAnalysis.PublicApiAnalyzers\" Version=\"3.3.3\" />\n-    <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.2\" PrivateAssets=\"all\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" />\n     <PackageReference Update=\"Microsoft.VisualStudio.Setup.Configuration.Interop\" Version=\"3.0.4492\" />\n     <PackageReference Update=\"PdbGit\" Version=\"3.0.41\" />\n     <PackageReference Update=\"Shouldly\" Version=\"3.0.0\" />\n-    <PackageReference Update=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.164\" PrivateAssets=\"all\" />\n   </ItemGroup>\n \n-  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true'\">\n+  <ItemGroup Condition=\"'$(DotNetBuildFromSource)' != 'true' AND $(ProjectIsDeprecated) != 'true'\">\n     <GlobalPackageReference Include=\"Microsoft.CodeAnalysis.BannedApiAnalyzers\" Version=\"3.3.3\" />\n+    <GlobalPackageReference Include=\"StyleCop.Analyzers\" Version=\"1.2.0-beta.354\" PrivateAssets=\"all\"/>\n   </ItemGroup>\n \n   <ItemGroup>\n     <GlobalPackageReference Include=\"Microsoft.VisualStudio.SDK.EmbedInteropTypes\" Version=\"15.0.36\" PrivateAssets=\"All\" Condition=\"'$(TargetFrameworkIdentifier)' == '.NETFramework'\" />\n-  </ItemGroup>\n+  </ItemGroup>  ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}