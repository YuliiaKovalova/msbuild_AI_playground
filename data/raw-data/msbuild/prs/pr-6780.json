{
  "number": 6780,
  "title": "Cache Embedded Resources during compilation task",
  "body": "Fixes #5334\r\n\r\n### Context\r\n\r\nFast up-to-date check with SDK project doesn't see new embedded resources!\r\n\r\n### Changes Made\r\n\r\nTo cache the `EmbeddedResource` items, we just add those to the existing inputs\r\nthrough `CoreCompileCache` item, to include them in the cache file which gets\r\nincluded in the `CoreCompile` target.\r\n\r\n### Testing\r\n\r\nManually verified using MSBuild Log Viewer with the repro present [hyrmn/ReproGlobsNotEmbedding](/hyrmn/ReproGlobsNotEmbedding).\r\n\r\n### Notes\r\n\r\nSee dotnet/project-system#5794 for more details.",
  "state": "CLOSED",
  "createdAt": "2021-08-22T08:08:01Z",
  "updatedAt": "2024-09-10T13:56:55Z",
  "closedAt": "2024-09-10T13:56:55Z",
  "mergedAt": null,
  "additions": 1,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "hotfix/targets/core-compile-cache",
  "isDraft": false,
  "author": {
    "login": "Nirmal4G"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "102b3ad20ffd3da2b6888a51ce21b284a20e79d9",
          "message": "Cache Embedded Resources during compilation task\n\nCaching input metadata for `CoreCompile` target is achieved by adding the items\nto the `CoreCompileCache` item in the `_GenerateCompileDependencyCache` target.\n\nTo cache the `EmbeddedResource` items, we just add those to the existing inputs\nthrough `CoreCompileCache` item, to include them in the cache file which gets\nincluded in the `CoreCompile` target.",
          "committedDate": "2021-11-05T13:00:17Z",
          "author": {
            "name": "Nirmal Guru",
            "email": "Nirmal4G@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Nirmal4G would it be possible for you to ping me by email as I had something to chat with you about? My email address is marcpop@myemployer  \r\n\r\nThanks.",
        "createdAt": "2021-10-11T19:12:34Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "@marcpopMSFT I have sent an e-mail as you requested.",
        "createdAt": "2021-10-12T01:20:35Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "So, We'll add `AdditionalFiles`, `EmbeddedFiles`, `EditorConfigFiles` and `AnalyzerConfigFiles`. This should cover most of the common build includes.\n\nWhat about ASP.NET/WPF/UWP/WinForms includes?\n\nSure, we are not going to add vendor specific here but do they need to be added too (in their own build targets)?",
        "createdAt": "2021-10-17T08:28:20Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "It seems I can't add any more commits to this and to many of my older PRs. I suspect because of the reforking due to dependabot issues (_that is still not yet resolved_).\r\n\r\nSo, at least for the issue mentioned, this patch fixes it. If we need tests to cover this behavior, I could open a new PR with all we talked about or else we merge this now and I open a new PR with remaining changes and tests.\r\n\r\nLet me know!",
        "createdAt": "2022-04-21T03:22:56Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> I suspect because of the reforking due to dependabot issues (_that is still not yet resolved_).\r\n\r\nWhat dependabot issues are you referring to here?",
        "createdAt": "2022-04-21T15:20:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It created PRs in my fork! I couldn't at first disable them and then docs asked me to re-fork the Repo and disable them manually. It did the trick (_I think_) but it resulted in repo deletion and thus removing all the PR refs. But forking the repo again didn't restore the PR refs (_GitHub told me the behavior is intended and to stop injection attacks_).",
        "createdAt": "2022-04-21T17:54:52Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G do you plan to continue work on this PR or should that be closed? (a new one can allways be open - which might as well be quickes solution to your GH issues)",
        "createdAt": "2023-06-02T11:54:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Hey @Nirmal4G, kindly pinging :) Can we close the PR, or do you plan to continue?",
        "createdAt": "2024-08-28T11:34:28Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`@(EmbeddedResource)` is not passed to the compiler so it's not the right item here. It looks like `@(_CoreCompileResourceInputs)` would be the right item:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/990f487dd477db0fecb14ab5aa4f0e66f416a437/src/Compilers/Core/MSBuildTask/Microsoft.CSharp.Core.targets#L131\r\n\r\nThat's defined here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/46d8f9b0bbda55fd6e72a5bdfcbd7dbf0b420839/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3503-L3505\r\n\r\nSo this PR should probably take a dependency on that target too.",
              "createdAt": "2021-08-22T20:08:30Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I see, so we extract some outputs of `EmbeddedResource` items based on whether they are `Resx` or not without Culture! Only those are passed into `CoreCompile`, the rest is ignored.\n\nIf that's the case, then, shouldn't we do the same for `ReferencePath`? Here, the `ReferencePathWithRefAssemblies` items are the final input to the `CoreCompile`, not `ReferencePath` items.\n\nYou also have other items as inputs too. Should we include any of them as well?",
              "createdAt": "2021-08-23T01:56:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Probably a good idea. We should also get a review from the compiler team to make sure what we end up going with makes sense.",
              "createdAt": "2021-08-23T15:13:50Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Hard to comment here cause I'm unsure exactly what this part of MSBuild is achieving. Hence can't say what is and is not good items to be using here. ",
              "createdAt": "2021-09-02T22:18:53Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "As I understand it, the FUTD check looks at the CoreCompileCache to see what items need to be up-to-date for it to be able to skip executing CoreCompile. Currently CoreCompileCache is missing things that are actually used by CoreCompile, so if you update EmbeddedResources, the FUTD check says it's up-to-date and skips CoreCompile anyway. This aims to fix that, but we'd also like to hit other things that, when changed, should make CoreCompile run again that are currently missed.",
              "createdAt": "2021-09-02T23:30:58Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This does not have anything to do with FUTD, which is a project system concept.\r\n\r\nThis target tries to determine whether the _set_ of inputs to `CoreCompile` has changed since the last time the compiler was run. It was added because of a scenario new to globbing support:\r\n\r\n1. Build project.\r\n2. Delete source file `foo.cs`.\r\n3. Build again\r\n4. `CoreCompile` thinks it's up to date because the output `.dll` is newer than all inputs, but that's wrong because an input was removed.\r\n\r\nPrior to extensive use of globbing, the `$(MSBuildAllProjects)` input to `CoreCompile` caught this case because the project file was modified to remove the source file. But with globbing, we needed a build-time step.\r\n\r\nThis PR is extending this from `@(Compile)` items to include `@(EmbeddedResource)` which has a similar problem--we could skip running the compiler and leave an output with an extra embedded resource.\r\n\r\nThe question is: are there other inputs likely derived from globs in the SDK case that we should consider here?",
              "createdAt": "2021-09-03T13:41:38Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's my question as well\u2026 <https://github.com/dotnet/msbuild/issues/5334#issuecomment-879350699>\n\nFrom what I see, we have modules, embedded files, strong name key and Win32 manifest, Icon and resources!\n\nNot to mention WPF items and its 2-pass  compilation! _That's on a whole 'nother level!!_",
              "createdAt": "2021-09-03T15:27:46Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "> The question is: are there other inputs likely derived from globs in the SDK case that we should consider here?\r\n\r\nWhat all can globs be used for now? Should my mental model just be anything on disk? If so then probably need `$(AdditionalFiles)`, references and `$(EmbeddedFiles)` at least.\r\n\r\nI omitted `$(EditorConfigFiles)` because I think those are handled specially in MSBuild already. \r\n\r\n@RikkiGibson, @chsienki, @cston ",
              "createdAt": "2021-09-03T19:01:57Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "Yep, `@(AdditionalFiles)` and `@(EmbeddedFiles)` probably need to be checked too: Additional files can affect generators and analyzer warnings, and the embedded files are put directly into the assembly (different but similar to EmbeddedResources). \r\n\r\nRegarding `@(EditorConfigFiles)` while the collection is created by MSBuild logic rather than user globs, I suspect it still has the same problem. If you delete an editorconfig file, then although the collection will change, CSC is still going to see the DLL as being more up to date than any of the inputs, which can again affect analyzer warnings etc.",
              "createdAt": "2021-10-12T21:16:09Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "chsienki"
              }
            },
            {
              "body": "Unfortunately I was pretty misleading above. Sorry! Despite what I said, this isn't _just_ about globs. It's really any multi-valued thing that can be influenced via something other than editing the project file. That's why `$(DefineConstants)` is there below: if you build, then build with `msbuild -p:EnableFancyDebugMode=true`, you'll be surprised if we don't run the compiler with the new defines.\r\n\r\nUnfortunately, this means that the set of things we'd ideally define here is essentially \"all inputs to `Csc`/`Vbc`, which isn't maintainable cross-repo.\r\n\r\nWe'll have to try to find a reasonable middle ground. The ones you suggest sound pretty good to me, since we already have defines.\r\n\r\nI agree on EditorConfigFiles -- IIRC the special logic is about discovering them, rather than accounting for them here; I bet the same \"delete a subfolder's `.editorconfig` and watch it not recompile\" thing would apply.",
              "createdAt": "2021-10-12T21:31:27Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -3672,6 +3672,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <ItemGroup>\n       <CustomAdditionalCompileInputs Include=\"$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache\" />\n       <CoreCompileCache Include=\"@(Compile)\" />\n+      <CoreCompileCache Include=\"@(EmbeddedResource)\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}