{
  "number": 8747,
  "title": "Use CopyOnWritePropertyDictionary.ImportProperties for batching",
  "body": "Fixes #8673\r\n\r\n### Context\r\nHigh memory allocations in CopyOnWritePropertyDictionary ImmutableDictionary was reported by partners.\r\n\r\n### Changes Made\r\nUse `CopyOnWritePropertyDictionary.ImportProperties` in obvious places as oppose to `CopyOnWritePropertyDictionary.Set` in loop.\r\n\r\n### Testing\r\nUnit tests. Local. Perf measure.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-05-10T15:39:08Z",
  "updatedAt": "2023-05-15T15:09:14Z",
  "closedAt": "2023-05-15T07:37:28Z",
  "mergedAt": "2023-05-15T07:37:28Z",
  "additions": 56,
  "deletions": 50,
  "changedFiles": 3,
  "headRefName": "rokonec/immutablex-perf",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "006624304da25f98249a1f28731c9d00603e40ee",
          "message": "Use CopyOnWritePropertyDictionary.ImportProperties for batching",
          "committedDate": "2023-05-10T15:30:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "839fad0a0a423f2b15e2d0760575f7aad087fec6",
          "message": "Delete redundant leftover line.",
          "committedDate": "2023-05-11T07:24:42Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@ladipro \r\n>  Would it make sense to add a constructor to CopyOnWritePropertyDictionary<T> taking IEnumerable<T>\r\n\r\nIt would make sense for code readability, but since the constructor `CopyOnWritePropertyDictionary<T>` use `static Empty` pattern,  it should result in same amount of allocations as current code. I was trying not to change API of CopyOnWritePropertyDictionary.\r\n\r\n",
        "createdAt": "2023-05-12T12:57:06Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this line redundant now?",
              "createdAt": "2023-05-10T15:57:49Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1695,11 +1697,21 @@ internal void TranslateWithInterning(ITranslator translator, LookasideStringInte\n                     {\n                         int count = translator.Reader.ReadInt32();\n                         _directMetadata = (count == 0) ? null : new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, it is leftover. Good catch. Deleted.",
              "createdAt": "2023-05-11T07:23:47Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1695,11 +1697,21 @@ internal void TranslateWithInterning(ITranslator translator, LookasideStringInte\n                     {\n                         int count = translator.Reader.ReadInt32();\n                         _directMetadata = (count == 0) ? null : new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Weird casing and naming.\r\nGetOrderedMetadata/OrderMetadata/GetMetadata?",
              "createdAt": "2023-05-11T10:18:27Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I kinda like localFunction naming schema. Have seen it in Roslyn and use it since.",
              "createdAt": "2023-05-11T14:14:39Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I was rather refering to treating metadata as 2 words (metaData) and absence of verb in the function name.\r\nFirst letter casing - my opinion - whatever is already used in our code... and if nothing - feel free to set the convention :-)",
              "createdAt": "2023-05-11T14:18:57Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "These days I personally prefer not to include redundant information into naming. I tend to consider Get verb prefix as implicit. I mean if function name is just `nouns()` is is implicit that it will somehow GET me `nouns`. Given the small scope and close locality of this method, more describing names like `GetAllMetaDataOrderedAsLastWinForClonePurpose` is maybe not needed .\r\nBut It is matter of taste and I don't mind to change it though.",
              "createdAt": "2023-05-11T15:01:54Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this check be pushed to `CopyOnWritePropertyDictionary.ImportProperties` to avoid double iteration?",
              "createdAt": "2023-05-11T10:20:13Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()\n                     {\n-                        foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n+                        // Next, any inherited item definitions. Front of the list is highest priority,\n+                        // so walk backwards.\n+                        for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n                         {\n-                            if (metadatum != null)\n-                            {\n-                                allMetadata.Set(metadatum);\n-                            }\n-                            else\n+                            foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n                             {\n-                                Debug.Fail($\"metadatum from {_itemDefinitions[i]} is null, see https://github.com/dotnet/msbuild/issues/5267\");\n+                                if (metadatum != null)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "What check in particular?",
              "createdAt": "2023-05-11T14:16:13Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()\n                     {\n-                        foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n+                        // Next, any inherited item definitions. Front of the list is highest priority,\n+                        // so walk backwards.\n+                        for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n                         {\n-                            if (metadatum != null)\n-                            {\n-                                allMetadata.Set(metadatum);\n-                            }\n-                            else\n+                            foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n                             {\n-                                Debug.Fail($\"metadatum from {_itemDefinitions[i]} is null, see https://github.com/dotnet/msbuild/issues/5267\");\n+                                if (metadatum != null)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "The null check.\r\nResulting enumeration is passed to ImportProperties, where it's again enumerated (though both lazily, but still it's one extra state machine. Plus repetition of the same check code).\r\nImportProperties is called from other places - but that's not of much concern - on the contrary, the handling would be unified)",
              "createdAt": "2023-05-11T19:57:33Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1096,40 +1093,45 @@ internal CopyOnWritePropertyDictionary<ProjectMetadataInstance> MetadataCollecti\n \n                     CopyOnWritePropertyDictionary<ProjectMetadataInstance> allMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n \n-                    // Next, any inherited item definitions. Front of the list is highest priority,\n-                    // so walk backwards.\n-                    for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n+                    allMetadata.ImportProperties(metaData());\n+\n+                    return allMetadata;\n+\n+                    IEnumerable<ProjectMetadataInstance> metaData()\n                     {\n-                        foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n+                        // Next, any inherited item definitions. Front of the list is highest priority,\n+                        // so walk backwards.\n+                        for (int i = _itemDefinitions.Count - 1; i >= 0; i--)\n                         {\n-                            if (metadatum != null)\n-                            {\n-                                allMetadata.Set(metadatum);\n-                            }\n-                            else\n+                            foreach (ProjectMetadataInstance metadatum in _itemDefinitions[i].Metadata)\n                             {\n-                                Debug.Fail($\"metadatum from {_itemDefinitions[i]} is null, see https://github.com/dotnet/msbuild/issues/5267\");\n+                                if (metadatum != null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is Select and delegate here as efficient as a plain loop?\n\nThe core libraries would not use this, I think (@stephentoub?)",
              "createdAt": "2023-05-12T15:01:47Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2942,11 +2942,9 @@ private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache,\n                 if (item.DirectMetadata != null)\n                 {\n                     directMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n-                    foreach (ProjectMetadata directMetadatum in item.DirectMetadata)\n-                    {\n-                        ProjectMetadataInstance directMetadatumInstance = new ProjectMetadataInstance(directMetadatum);\n-                        directMetadata.Set(directMetadatumInstance);\n-                    }\n+\n+                    IEnumerable<ProjectMetadataInstance> projectMetadataInstances = item.DirectMetadata.Select(directMetadatum => new ProjectMetadataInstance(directMetadatum));",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "> Is Select and delegate here as efficient as a plain loop?\r\n\r\nIt depends on several factors, including what DirectMetadata is.\r\n\r\n> The core libraries would not use this, I think (@stephentoub?)\r\n\r\nIt also depends :) but generally we avoid use of `IEnumerable<T>` manipulation on hot paths.",
              "createdAt": "2023-05-12T15:07:59Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2942,11 +2942,9 @@ private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache,\n                 if (item.DirectMetadata != null)\n                 {\n                     directMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n-                    foreach (ProjectMetadata directMetadatum in item.DirectMetadata)\n-                    {\n-                        ProjectMetadataInstance directMetadatumInstance = new ProjectMetadataInstance(directMetadatum);\n-                        directMetadata.Set(directMetadatumInstance);\n-                    }\n+\n+                    IEnumerable<ProjectMetadataInstance> projectMetadataInstances = item.DirectMetadata.Select(directMetadatum => new ProjectMetadataInstance(directMetadatum));",
              "author": {
                "login": "stephentoub"
              }
            },
            {
              "body": "Purpose of this changes was to eliminate generation of `ImmutableDictionary` in a loop which has very very bad  CPU and memory allocation consequences. \r\nTo do that I decided to use prior existing `internal void ImportProperties(IEnumerable<T> other)` method which calls  `public ImmutableDictionary<TKey, TValue> SetItems(IEnumerable<KeyValuePair<TKey, TValue>> items)` internally.\r\nI do not see how to avoid `IEnumerable<T>` here, unless we would change `CopyOnWritePropertyDictionary` API to somehow expose immutable builder. I don't think this path is that hot though.",
              "createdAt": "2023-05-13T21:17:27Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -2942,11 +2942,9 @@ private void CreateEvaluatedIncludeSnapshotIfRequested(bool keepEvaluationCache,\n                 if (item.DirectMetadata != null)\n                 {\n                     directMetadata = new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\n-                    foreach (ProjectMetadata directMetadatum in item.DirectMetadata)\n-                    {\n-                        ProjectMetadataInstance directMetadatumInstance = new ProjectMetadataInstance(directMetadatum);\n-                        directMetadata.Set(directMetadatumInstance);\n-                    }\n+\n+                    IEnumerable<ProjectMetadataInstance> projectMetadataInstances = item.DirectMetadata.Select(directMetadatum => new ProjectMetadataInstance(directMetadatum));",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}