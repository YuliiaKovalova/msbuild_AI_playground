{
  "number": 9335,
  "title": "Cache SDK resolver data process-wide",
  "body": "Fixes #9302\r\n\r\n### Context\r\nUnless a shared evaluation context is used, each project evaluation creates a fresh new `SdkResolverLoader`, walks the disk to discover resolver manifests, calls `Assembly.LoadFrom` on resolver assemblies and so on. The cost of this is non-trivial (close to 3% of total evaluation time for solution like OrchardCore) while arguably there is no way how any of this can change while an MSBuild process is running.\r\n\r\n### Changes Made\r\n- Refactored the code to clean up unused parameters and changed several types from `IList<>` to `IReadOnlyList<>` to codify the fact that they are immutable.\r\n- Introduced `CachingSdkResolverLoader` as a subclass of `SdkResolverLoader` and plugged it into `SdkResolverService`.\r\n\r\n### Testing\r\nExisting unit test and an experimental VS insertion.\r\n\r\n### Notes\r\nConsider reviewing commit by commit.",
  "state": "MERGED",
  "createdAt": "2023-10-17T08:01:05Z",
  "updatedAt": "2023-11-01T15:59:43Z",
  "closedAt": "2023-11-01T15:59:42Z",
  "mergedAt": "2023-11-01T15:59:42Z",
  "additions": 176,
  "deletions": 79,
  "changedFiles": 9,
  "headRefName": "9302-static-resolver-loader",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bf77a7cb9d2183c0aa223283bedcbad48af8f45f",
          "message": "Refactoring: Use read-only data types",
          "committedDate": "2023-10-30T09:29:39Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "887caa724552f2d96ee8134581a3c31222ec53fb",
          "message": "Refactoring: Remove unused parameters",
          "committedDate": "2023-10-30T09:29:39Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd6fd2c25fda23d3988ce32b99a9ffe57f58cbd1",
          "message": "Add CachingSdkResolverLoader",
          "committedDate": "2023-10-30T09:29:39Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5022fbf4e21882cb4df241fac17617103d3a24b3",
          "message": "Use static CachingSdkResolverLoader under Wave17_10",
          "committedDate": "2023-10-30T09:31:10Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d845e210e199aadb529ee3f6197c2272440aa6fe",
          "message": "Add comments to CachingSdkResolverLoader",
          "committedDate": "2023-10-30T09:31:15Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Just curious - wouldn't `Lazy` here better express the intent?",
              "createdAt": "2023-10-19T13:33:33Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs",
              "diffHunk": "@@ -0,0 +1,91 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.BackEnd.SdkResolution\n+{\n+    /// <summary>\n+    /// A subclass of <see cref=\"SdkResolverLoader\"/> which creates resolver manifests and SDK resolvers only once and\n+    /// then returns cached results.\n+    /// </summary>\n+    internal sealed class CachingSdkResolverLoader : SdkResolverLoader\n+    {\n+        /// <summary>\n+        /// Cached list of default resolvers. Set eagerly.\n+        /// </summary>\n+        private readonly IReadOnlyList<SdkResolver> _defaultResolvers;\n+\n+        /// <summary>\n+        /// Cached manifest -> resolver dictionary. Populated lazily.\n+        /// </summary>\n+        private readonly ConcurrentDictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>> _resolversByManifest = new();\n+\n+        /// <summary>\n+        /// Cached list of all resolvers. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolver>? _allResolvers;\n+\n+        /// <summary>\n+        /// Cached list of all resolver manifests. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolverManifest>? _resolversManifests;\n+\n+        /// <summary>\n+        /// A lock object protecting <see cref=\"_allResolvers\"/> and <see cref=\"_resolversManifests\"/>.\n+        /// </summary>\n+        private readonly object _lock = new();\n+\n+        /// <summary>\n+        /// A static instance of <see cref=\"CachingSdkResolverLoader\"/>.\n+        /// </summary>\n+        /// <remarks>\n+        /// The set of available SDK resolvers is expected to be fixed for the given MSBuild installation so it should be safe to use\n+        /// a static instance as opposed to creating <see cref=\"CachingSdkResolverLoader\"/> or <see cref=\"SdkResolverLoader\"/> for each\n+        /// <see cref=\"SdkResolverService\" /> instance.\n+        /// </remarks>\n+        public static CachingSdkResolverLoader Instance = new CachingSdkResolverLoader();\n+\n+        /// <summary>\n+        /// Initializes a new instance by setting <see cref=\"_defaultResolvers\"/>.\n+        /// </summary>\n+        public CachingSdkResolverLoader()\n+        {\n+            _defaultResolvers = base.GetDefaultResolvers();\n+        }\n+\n+        #region SdkResolverLoader overrides\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> GetDefaultResolvers() => _defaultResolvers;\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n+        {\n+            lock (_lock)\n+            {\n+                return _allResolvers ??= base.LoadAllResolvers(location);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I first considered `Lazy` but that wouldn't let me pass any context - in this case the `location` argument - which I think still has value for good error reporting.",
              "createdAt": "2023-10-26T06:51:30Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs",
              "diffHunk": "@@ -0,0 +1,91 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.BackEnd.SdkResolution\n+{\n+    /// <summary>\n+    /// A subclass of <see cref=\"SdkResolverLoader\"/> which creates resolver manifests and SDK resolvers only once and\n+    /// then returns cached results.\n+    /// </summary>\n+    internal sealed class CachingSdkResolverLoader : SdkResolverLoader\n+    {\n+        /// <summary>\n+        /// Cached list of default resolvers. Set eagerly.\n+        /// </summary>\n+        private readonly IReadOnlyList<SdkResolver> _defaultResolvers;\n+\n+        /// <summary>\n+        /// Cached manifest -> resolver dictionary. Populated lazily.\n+        /// </summary>\n+        private readonly ConcurrentDictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>> _resolversByManifest = new();\n+\n+        /// <summary>\n+        /// Cached list of all resolvers. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolver>? _allResolvers;\n+\n+        /// <summary>\n+        /// Cached list of all resolver manifests. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolverManifest>? _resolversManifests;\n+\n+        /// <summary>\n+        /// A lock object protecting <see cref=\"_allResolvers\"/> and <see cref=\"_resolversManifests\"/>.\n+        /// </summary>\n+        private readonly object _lock = new();\n+\n+        /// <summary>\n+        /// A static instance of <see cref=\"CachingSdkResolverLoader\"/>.\n+        /// </summary>\n+        /// <remarks>\n+        /// The set of available SDK resolvers is expected to be fixed for the given MSBuild installation so it should be safe to use\n+        /// a static instance as opposed to creating <see cref=\"CachingSdkResolverLoader\"/> or <see cref=\"SdkResolverLoader\"/> for each\n+        /// <see cref=\"SdkResolverService\" /> instance.\n+        /// </remarks>\n+        public static CachingSdkResolverLoader Instance = new CachingSdkResolverLoader();\n+\n+        /// <summary>\n+        /// Initializes a new instance by setting <see cref=\"_defaultResolvers\"/>.\n+        /// </summary>\n+        public CachingSdkResolverLoader()\n+        {\n+            _defaultResolvers = base.GetDefaultResolvers();\n+        }\n+\n+        #region SdkResolverLoader overrides\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> GetDefaultResolvers() => _defaultResolvers;\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n+        {\n+            lock (_lock)\n+            {\n+                return _allResolvers ??= base.LoadAllResolvers(location);\n+            }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oh righ - makes sesnse!",
              "createdAt": "2023-10-26T08:00:54Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverLoader.cs",
              "diffHunk": "@@ -0,0 +1,91 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Collections.Concurrent;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Framework;\n+\n+namespace Microsoft.Build.BackEnd.SdkResolution\n+{\n+    /// <summary>\n+    /// A subclass of <see cref=\"SdkResolverLoader\"/> which creates resolver manifests and SDK resolvers only once and\n+    /// then returns cached results.\n+    /// </summary>\n+    internal sealed class CachingSdkResolverLoader : SdkResolverLoader\n+    {\n+        /// <summary>\n+        /// Cached list of default resolvers. Set eagerly.\n+        /// </summary>\n+        private readonly IReadOnlyList<SdkResolver> _defaultResolvers;\n+\n+        /// <summary>\n+        /// Cached manifest -> resolver dictionary. Populated lazily.\n+        /// </summary>\n+        private readonly ConcurrentDictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>> _resolversByManifest = new();\n+\n+        /// <summary>\n+        /// Cached list of all resolvers. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolver>? _allResolvers;\n+\n+        /// <summary>\n+        /// Cached list of all resolver manifests. Set lazily.\n+        /// </summary>\n+        private IReadOnlyList<SdkResolverManifest>? _resolversManifests;\n+\n+        /// <summary>\n+        /// A lock object protecting <see cref=\"_allResolvers\"/> and <see cref=\"_resolversManifests\"/>.\n+        /// </summary>\n+        private readonly object _lock = new();\n+\n+        /// <summary>\n+        /// A static instance of <see cref=\"CachingSdkResolverLoader\"/>.\n+        /// </summary>\n+        /// <remarks>\n+        /// The set of available SDK resolvers is expected to be fixed for the given MSBuild installation so it should be safe to use\n+        /// a static instance as opposed to creating <see cref=\"CachingSdkResolverLoader\"/> or <see cref=\"SdkResolverLoader\"/> for each\n+        /// <see cref=\"SdkResolverService\" /> instance.\n+        /// </remarks>\n+        public static CachingSdkResolverLoader Instance = new CachingSdkResolverLoader();\n+\n+        /// <summary>\n+        /// Initializes a new instance by setting <see cref=\"_defaultResolvers\"/>.\n+        /// </summary>\n+        public CachingSdkResolverLoader()\n+        {\n+            _defaultResolvers = base.GetDefaultResolvers();\n+        }\n+\n+        #region SdkResolverLoader overrides\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> GetDefaultResolvers() => _defaultResolvers;\n+\n+        /// <inheritdoc />\n+        internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)\n+        {\n+            lock (_lock)\n+            {\n+                return _allResolvers ??= base.LoadAllResolvers(location);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}