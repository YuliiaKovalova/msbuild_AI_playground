{
  "number": 6293,
  "title": "Remove unused GetAllGlobs override in ProjectLink",
  "body": "Fixes #\r\nPerf ddrits regression in ProjectServices implementation of this.\r\n### Context\r\nThis GetAllGlobs override is unused anymore since CPS has been changed to use the GetAllGlobs(evaluationContext)\r\n\r\n### Changes Made\r\nRemove newly added GetAllGlobs override.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2021-03-24T17:03:47Z",
  "updatedAt": "2021-12-06T17:51:44Z",
  "closedAt": "2021-03-25T09:47:22Z",
  "mergedAt": "2021-03-25T09:47:22Z",
  "additions": 0,
  "deletions": 21,
  "changedFiles": 5,
  "headRefName": "exp/serializable-projectinstance-bugfix",
  "isDraft": false,
  "author": {
    "login": "arunchndr"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8f8c4b8f047ad2e27fe1229244d31c9d6e549a5c",
          "message": "Remove unused GetAllGlobs override in ProjectLink",
          "committedDate": "2021-03-24T17:01:44Z",
          "author": {
            "name": "Arun Kalyanasamy",
            "email": "arkalyan@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This PR is meant to fix our DDRITs regression on `Build_Ngen_InvalidAssemblyCount` here: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/312576\r\n\r\n`Build_Ngen_InvalidAssemblyCount reports the number of assemblies that encountered an error during ngening at VS setup. If assemblies are not ngened, it can result in more jitting in scenarios where such assemblies execute, which in turn can result in elapsed and CPU time regressions in such scenarios.`\r\n\r\nSo why would ngen'ing fail here when there's an extra overload? Or was this method caught being jitted? Not sure I fully understand how a regression like this gets caught.\r\n\r\nEither way I've applied `exp-branch` label, which means we should check the exp branch RPS results before merging \ud83d\ude42",
        "createdAt": "2021-03-24T17:32:14Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> This PR is meant to fix our DDRITs regression on `Build_Ngen_InvalidAssemblyCount` here: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/312576\r\n> \r\n> `Build_Ngen_InvalidAssemblyCount reports the number of assemblies that encountered an error during ngening at VS setup. If assemblies are not ngened, it can result in more jitting in scenarios where such assemblies execute, which in turn can result in elapsed and CPU time regressions in such scenarios.`\r\n> \r\n> So why would ngen'ing fail here when there's an extra overload? Or was this method caught being jitted? Not sure I fully understand how a regression like this gets caught.\r\n> \r\n> Either way I've applied `exp-branch` label, which means we should check the exp branch RPS results before merging \ud83d\ude42\r\n\r\nThat message is misleading, I am reading the error as 2 **_newly failed_** assemblies that skew the count and not new assemblies.",
        "createdAt": "2021-03-24T17:36:46Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "> That message is misleading, I am reading the error as 2 newly failed assemblies that skew the count and not new assemblies.\r\n\r\nThat makes sense, I'm just wondering how ngen failed on an assembly because of the PR that caused it.\r\n\r\nHere's the VS PR that will unblock this if it passes RPS: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/312854",
        "createdAt": "2021-03-24T18:00:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Note that the hashcheck failed, currently rerunning to be safe.",
        "createdAt": "2021-03-24T23:01:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Note that the hashcheck failed, currently rerunning to be safe.\r\n\r\nhash checks are now fine, one of the symbol checks fails, but I suppose it should fail because this is an exp branch insertion. \r\nThe previous PR also had exactly this symbol check failure which was gone for the main branch insertion.",
        "createdAt": "2021-03-25T10:18:17Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}