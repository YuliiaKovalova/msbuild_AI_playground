{
  "number": 4240,
  "title": "Reduce rate of taking all Monitor locks in string interning",
  "body": "Reduce rate of taking numProcessors or even more Monitor locks in string interning by increasing initial size of the string interning dictionary.\r\n\r\nIncreases from 31 to 2048.NextPrime() initial capacity. In medium-sized codebases (3K proj files) we see 200K of these; for 500 projects, 48K.\r\n\r\nIntended to also reduce the rate of exceptions we see parsing large repos in QuickBuild:\r\n\r\n```\r\nSystem.UnauthorizedAccessException: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n   at System.Threading.Monitor.Enter(Object obj)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.AcquireLocks(Int32 fromInclusive, Int32 toExclusive, Int32& locksAcquired)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GrowTable(Tables tables, IEqualityComparer`1 newComparer, Boolean regenerateHashKeys, Int32 rehashCount)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.TryAddInternal(TKey key, TValue value, Boolean updateIfExists, Boolean acquireLock, TValue& resultingValue)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, TValue value)\r\n   at Microsoft.Build.OpportunisticIntern.BucketedPrioritizedStringList.TryIntern(IInternable candidate, String& interned)\r\n   at Microsoft.Build.OpportunisticIntern.BucketedPrioritizedStringList.InterningToString(IInternable candidate)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\r\n...\r\n```",
  "state": "MERGED",
  "createdAt": "2019-03-15T20:32:13Z",
  "updatedAt": "2021-10-12T00:00:32Z",
  "closedAt": "2019-03-22T20:19:40Z",
  "mergedAt": "2019-03-22T20:19:40Z",
  "additions": 6,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "dev/erikmav/stringInternLocking",
  "isDraft": false,
  "author": {
    "login": "erikmav"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "efb93cb7460154e92d17206599d9d29c8c7c5ef9",
          "message": "Reduce rate of taking numProcessors or even more Monitor locks in string interning by increasing initial size\nIncreases from 31 to 2048.NextPrime() initial capacity. In medium-sized codebases (3K proj files) we see 200K of these; for 500 projects, 48K.\nIntended to also reduce the rate of these we see parsing large repos in QuickBuild:\n\nSystem.UnauthorizedAccessException: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\n   at System.Threading.Monitor.Enter(Object obj)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.AcquireLocks(Int32 fromInclusive, Int32 toExclusive, Int32& locksAcquired)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GrowTable(Tables tables, IEqualityComparer`1 newComparer, Boolean regenerateHashKeys, Int32 rehashCount)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.TryAddInternal(TKey key, TValue value, Boolean updateIfExists, Boolean acquireLock, TValue& resultingValue)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, TValue value)\n   at Microsoft.Build.OpportunisticIntern.BucketedPrioritizedStringList.TryIntern(IInternable candidate, String& interned)\n   at Microsoft.Build.OpportunisticIntern.BucketedPrioritizedStringList.InterningToString(IInternable candidate)\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\n...",
          "committedDate": "2019-03-15T20:24:14Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50eaa83bdbbc10b142097b54d1587610fc290095",
          "message": "no-op to run builds again",
          "committedDate": "2019-03-18T22:16:33Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "What is the cause for the \"access is denied\" -- do you know whether that repros in .NET Core?",
        "createdAt": "2019-03-18T00:20:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft QuickBuild is massively parallel threaded and running on 48- and 64-core datacenter machines. The error above seems to come from any time most or all of the thread pool is waiting synchronously on a Monitor, in this case there are many many threads trying to run XML and OM parsing of 3K-25K proj files in large MSBuild repos. The rate of these types of errors is 1-5 in 45K builds per day, so 0.01%, but the number of builds grows daily and these errors get magnified over time. This PR is simply a reduction in wasteful locking but will only affect the rate of the errors, not fix them entirely. I'm working on the threading model in a separate set of changes in QuickBuild's repo as well.",
        "createdAt": "2019-03-18T17:26:12Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@danmosemsft Also - no idea if this repros on NetCore, QuickBuild only just got to 4.7.2 because of back-compat requirements across all divisions in the company. By the time we move to Core this problem should be eliminated through thread model changes.",
        "createdAt": "2019-03-18T17:27:52Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "Test failures are known; I'm fixing them.",
        "createdAt": "2019-03-19T14:24:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Something got confused and a stale check run is sticking around. Bouncing the PR.",
        "createdAt": "2019-03-20T20:35:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I find the check failure mysterious (it's showing both passed and failed, from two different top-level checks) and I'm going to just ignore it.",
        "createdAt": "2019-03-22T20:18:57Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}