{
  "number": 5798,
  "title": "Always log conflict information in MSB3277",
  "body": "This adds logging all information about which assemblies caused conflicts and why when the warning appears.\n\nFixes #608",
  "state": "MERGED",
  "createdAt": "2020-10-13T23:24:07Z",
  "updatedAt": "2021-04-28T05:02:22Z",
  "closedAt": "2020-11-13T18:02:08Z",
  "mergedAt": "2020-11-13T18:02:08Z",
  "additions": 126,
  "deletions": 65,
  "changedFiles": 19,
  "headRefName": "3277-warning",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ff67a42d8aac083c4edfab6c188ea2d8addb0d3a",
          "message": "Add information to MSB 3277\n\nThis warning previously indicated to people that there were conflicts,\nbut they were confused because it did not specify how th conflicts came\ninto their project. Although they could build again with diagnostic\nlogging, many customers still had trouble finding the relevant\ninformation in the log. This change makes it so the relevant information\nis printed along with the warning message when relevant without adding\n(almost any) extra overhead in the normal case.\n\nFixes #608",
          "committedDate": "2020-11-06T21:54:40Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28f3e78ce01067b07a23c3d80880d146205555e9",
          "message": "Fix tests\n\nTests previously assumed only one input in addition to the resource\nstring for this test. Updates the tests to expect more information.",
          "committedDate": "2020-11-06T23:31:08Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Do we know the version of MSBuild where this shipped first? I'm guessing 16.9?",
        "createdAt": "2021-04-28T03:18:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This messes with the binlog viewer parsing logic, since earlier those used to be individual messages, and now it's a single multiline message. \r\n\r\nIt's a good change and I'm glad we did it, but I'll have to probably update the viewer to use the new logic if the MSBuild that produced the binlog was 16.9 or newer. Fortunately we log the MSBuild version into the binlog.",
        "createdAt": "2021-04-28T03:20:08Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The viewer is now fixed: https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/443",
        "createdAt": "2021-04-28T04:33:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Yes, 16.9. Thanks for the fix!",
        "createdAt": "2021-04-28T05:02:12Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This test will fail on a non-English OS since you're embedding English strings here. Can you avoid that by doing something like `AssertLogContainsMessageFromResource` for the inner strings too?",
              "createdAt": "2020-10-20T15:56:03Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3679,7 +3679,17 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             Assert.Equal(1, e.Warnings); // @\"Expected one warning.\"\n \n             // Check that we have a message identifying conflicts with \"D\"\n-            e.AssertLogContainsMessageFromResource(AssemblyResources.GetString, \"ResolveAssemblyReference.FoundConflicts\", \"D\");\n+            e.AssertLogContainsMessageFromResource(AssemblyResources.GetString, \"ResolveAssemblyReference.FoundConflicts\", \"D\", @$\"\n+There was a conflict between \"\"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"\" and \"\"D, Version=2.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"\".",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you make the dependency chain a single string logged all at once in all cases instead of introducing this abstraction? That would also help in multiproc builds where sometimes messages from different nodes get interleaved.",
              "createdAt": "2020-10-20T20:51:20Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +981,24 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            MessageImportance importance = ChooseReferenceLoggingImportance(conflictCandidate);\n+                            LogConflict(conflictCandidate, fusionName, (string s, object[] parameters) =>\n+                            {\n+                                string code = Log.ExtractMessageCode(Log.FormatResourceString(s, parameters), out string message);\n+                                if (code == null)\n+                                    Log.LogMessageFromResources(importance, s, parameters);\n+                                else\n+                                    Log.LogMessage(importance, message);\n+                            });\n \n                             // Log the assemblies and primary source items which are related to the conflict which was just logged.\n                             Reference victor = dependencyTable.GetReference(conflictCandidate.ConflictVictorName);\n \n                             // Log the winner of the conflict resolution, the source items and dependencies which caused it\n-                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor);\n+                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor, (string s, object[] parameters) => Log.LogMessageFromResources(MessageImportance.Low, s, parameters));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I don't think so, unless I'm ok with using more memory in the normal case, which you said I shouldn't. I'm not too worried about other messages getting interleaved just because the warning (if a warning comes) would be coherent, and I imagine almost everyone would look at that and ignore the rest of the logs, since it now has more details.",
              "createdAt": "2020-10-23T15:05:30Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +981,24 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            MessageImportance importance = ChooseReferenceLoggingImportance(conflictCandidate);\n+                            LogConflict(conflictCandidate, fusionName, (string s, object[] parameters) =>\n+                            {\n+                                string code = Log.ExtractMessageCode(Log.FormatResourceString(s, parameters), out string message);\n+                                if (code == null)\n+                                    Log.LogMessageFromResources(importance, s, parameters);\n+                                else\n+                                    Log.LogMessage(importance, message);\n+                            });\n \n                             // Log the assemblies and primary source items which are related to the conflict which was just logged.\n                             Reference victor = dependencyTable.GetReference(conflictCandidate.ConflictVictorName);\n \n                             // Log the winner of the conflict resolution, the source items and dependencies which caused it\n-                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor);\n+                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor, (string s, object[] parameters) => Log.LogMessageFromResources(MessageImportance.Low, s, parameters));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "As someone who lacks context in this area of code, consider adding a comment here. We only want to log a warning if the current assemblyname matches some ideal assembly name that has 0 conflicts?",
              "createdAt": "2020-10-30T17:57:08Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "This is bad, but I don't know that I can provide a great comment here. I don't fully understand why what previously existed worked, but I tried to copy it faithfully, and there are several unit tests that test that the warning is thrown when it should be and not thrown when it shouldn't be, so I'm fairly confident the code is correct; I just can't tell you why.\r\n\r\nI considered trying to add a comment, but I'd consider no comment substantially better than a wrong or misleading comment, and I decided the probability that that would happen is too high.",
              "createdAt": "2020-10-30T18:35:53Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I think preserving this comment would be helpful\r\n\r\n```c#\r\n                                // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference\t\r\n                                // chosen was not the conflict victor in a version comparison, in other words it was older.\t\r\n```",
              "createdAt": "2020-11-05T20:59:01Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider renaming to LogReferenceDependenciesAndSourceItemsToStringBuilder to have the code document itself.",
              "createdAt": "2020-10-30T17:57:23Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1169,42 +1176,43 @@ internal static string ByteArrayToString(byte[] a)\n         /// <summary>\n         /// Log the source items and dependencies which lead to a given item.\n         /// </summary>\n-        private void LogReferenceDependenciesAndSourceItems(string fusionName, Reference conflictCandidate)\n+        private void LogReferenceDependenciesAndSourceItems(string fusionName, Reference conflictCandidate, StringBuilder log)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider renaming to LogDependeeReferenceToStringBuilder to have the code document itself.",
              "createdAt": "2020-10-30T17:57:33Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1804,26 +1812,24 @@ private void LogImageRuntime(Reference reference, MessageImportance importance)\n         /// </summary>\n         /// <param name=\"reference\">The reference.</param>\n         /// <param name=\"fusionName\">The fusion name of the reference.</param>\n-        private void LogConflict(Reference reference, string fusionName)\n+        /// <param name=\"log\">StringBuilder holding information to be logged.</param>\n+        private void LogConflict(Reference reference, string fusionName, StringBuilder log)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit",
              "createdAt": "2020-10-30T17:58:46Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3716,13 +3729,38 @@ public void ConflictGeneratesMessageReferencingEachConflictingAssemblyName()\n \n             t.TargetFrameworkDirectories = new string[] { s_myVersion20Path };\n \n+",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we want to log duplicate info here? `LogDependencies` carries everything `logConflict` had as well.\r\n\r\nIs there a perf impact?",
              "createdAt": "2020-10-30T18:06:17Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);\n+                            StringBuilder logConflict = StringBuilderCache.Acquire();\n+                            LogConflict(conflictCandidate, fusionName, logConflict);\n+                            StringBuilder logDependencies = logWarning ? logConflict.AppendLine() : StringBuilderCache.Acquire();\n \n                             // Log the assemblies and primary source items which are related to the conflict which was just logged.\n                             Reference victor = dependencyTable.GetReference(conflictCandidate.ConflictVictorName);\n \n                             // Log the winner of the conflict resolution, the source items and dependencies which caused it\n-                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor);\n+                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor, logDependencies);\n \n                             // Log the reference which lost the conflict and the dependencies and source items which caused it.\n-                            LogReferenceDependenciesAndSourceItems(fusionName, conflictCandidate);\n+                            LogReferenceDependenciesAndSourceItems(fusionName, conflictCandidate, logDependencies.AppendLine());\n+\n+                            if (logWarning)\n+                            {\n+                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, logConflict.ToString());\n+                            }\n+                            else\n+                            {\n+                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), logConflict.ToString());\n+                                Log.LogMessage(MessageImportance.Low, logDependencies.ToString());",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "logDependencies tells you about why certain references were considered, whereas logConflict holds that there was a conflict and how it was resolved. They do converge if logWarning is true because we only want to log a warning once, but they're still separate for the !logWarning case, relevant because we log them at different importances.",
              "createdAt": "2020-10-30T18:17:20Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);\n+                            StringBuilder logConflict = StringBuilderCache.Acquire();\n+                            LogConflict(conflictCandidate, fusionName, logConflict);\n+                            StringBuilder logDependencies = logWarning ? logConflict.AppendLine() : StringBuilderCache.Acquire();\n \n                             // Log the assemblies and primary source items which are related to the conflict which was just logged.\n                             Reference victor = dependencyTable.GetReference(conflictCandidate.ConflictVictorName);\n \n                             // Log the winner of the conflict resolution, the source items and dependencies which caused it\n-                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor);\n+                            LogReferenceDependenciesAndSourceItems(conflictCandidate.ConflictVictorName.FullName, victor, logDependencies);\n \n                             // Log the reference which lost the conflict and the dependencies and source items which caused it.\n-                            LogReferenceDependenciesAndSourceItems(fusionName, conflictCandidate);\n+                            LogReferenceDependenciesAndSourceItems(fusionName, conflictCandidate, logDependencies.AppendLine());\n+\n+                            if (logWarning)\n+                            {\n+                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, logConflict.ToString());\n+                            }\n+                            else\n+                            {\n+                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), logConflict.ToString());\n+                                Log.LogMessage(MessageImportance.Low, logDependencies.ToString());",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Constructing this giant string and then embedding it feels pretty fragile, since any change in the composition of the sub-message in dev code would need to be reflected here. Could we get away with just checking for one of the substrings and the first part of the `ResolveAssemblyReference.FoundConflicts` message (up to the first `{`)?",
              "createdAt": "2020-11-05T20:38:00Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3678,8 +3679,20 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n \n             Assert.Equal(1, e.Warnings); // @\"Expected one warning.\"\n \n+            StringBuilder expectedLogD = new StringBuilder();\n+            expectedLogD.AppendLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ConflictFound\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", \"D, Version=2.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The hard part is that the content is in the log anyway, just not in warning form, so the test would also have to ensure they're in the right order. What would you think of preserving the first five lines added to the StringBuilder and drop the rest? Or perhaps just the first three?",
              "createdAt": "2020-11-06T21:50:56Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3678,8 +3679,20 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n \n             Assert.Equal(1, e.Warnings); // @\"Expected one warning.\"\n \n+            StringBuilder expectedLogD = new StringBuilder();\n+            expectedLogD.AppendLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ConflictFound\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", \"D, Version=2.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Hmm. Looks like MockEngine currently exposes  `ErrorEvents` but not `WarningEvents`--but I think it'd be pretty easy to change that. Assert that there's a single warning and it contains what we want?",
              "createdAt": "2020-11-06T22:41:48Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3678,8 +3679,20 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n \n             Assert.Equal(1, e.Warnings); // @\"Expected one warning.\"\n \n+            StringBuilder expectedLogD = new StringBuilder();\n+            expectedLogD.AppendLine(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ConflictFound\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", \"D, Version=2.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Calls to `StringBuilderCache.Acquire()` should have a corresponding call to `StringBuilderCache.Release()` or `StringBuilderCache.GetStringAndRelease(logConflict)`.",
              "createdAt": "2020-11-05T22:12:46Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -981,16 +982,29 @@ List<Exception> generalResolutionExceptions\n \n                         if (conflictCandidate.IsConflictVictim)\n                         {\n-                            LogConflict(conflictCandidate, fusionName);\n+                            bool logWarning = idealAssemblyRemappingsIdentities.Any(i => i.assemblyName.FullName.Equals(fusionName) && i.reference.GetConflictVictims().Count == 0);\n+                            StringBuilder logConflict = StringBuilderCache.Acquire();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}