{
  "number": 10080,
  "title": "[GB18030] Fix `SubstringByTextElements` - avoid `ArgumentOutOfRangeException`",
  "body": "Follow up for https://github.com/dotnet/msbuild/pull/10063, see the discussion.\r\n\r\n### Context\r\nThe original PR was fixing `GB18030` issue but for project names with less text elements than 8 it would be throwing an exception. What's more, `SubstringByTextElements` used previously is giving different results for .net framework and .net core, see [doc](https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/uax29-compliant-grapheme-enumeration?WT.mc_id=DOP-MVP-5002735#change-description).\r\n\r\n### Changes Made\r\nFix: do not change project name if it's shorter than 8 chars. Replace non-ASCII chars with underscore `_`, cut substring to the desired length.\r\n\r\n### Testing\r\nAutomatic test case added.",
  "state": "MERGED",
  "createdAt": "2024-04-29T07:03:53Z",
  "updatedAt": "2024-04-30T12:47:50Z",
  "closedAt": "2024-04-30T12:47:50Z",
  "mergedAt": "2024-04-30T12:47:50Z",
  "additions": 31,
  "deletions": 11,
  "changedFiles": 4,
  "headRefName": "10063-follow-up",
  "isDraft": false,
  "author": {
    "login": "ilonatommy"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ilonatommy"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4c9d0551dcc26b383484c892bbd87341a1b753e8",
          "message": "Fix out of range exception.",
          "committedDate": "2024-04-29T06:59:17Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b1b98e1a45016b8ed0266dd3631dd135947c8e6",
          "message": "Update src/Build/Evaluation/IntrinsicFunctions.cs\n\nCo-authored-by: Jan Krivanek <krivanek.j@hotmail.com>",
          "committedDate": "2024-04-29T07:10:25Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26bcf7e0d9a2d00f7e7aafe14ec1bb828e4d01ef",
          "message": "Behavior depends on .net version by design.",
          "committedDate": "2024-04-29T14:14:33Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "itomkowicz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e35d141e5d4a888361665f9e38e437bf7a65c322",
          "message": "Test per-framework solution.",
          "committedDate": "2024-04-29T15:41:11Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "itomkowicz@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27d07f679ad8a081034f73deae5d34aeca20f7b9",
          "message": "Simplification",
          "committedDate": "2024-04-30T07:30:07Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5bf347008deb390ee1cc261c71b402a291724ee4",
          "message": "Feedback",
          "committedDate": "2024-04-30T11:22:44Z",
          "author": {
            "name": "Ilona Tomkowicz",
            "email": "32700855+ilonatommy@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: we use braces for single line conditionals as well\r\n\r\n```suggestion\r\n            if (stringInfo.LengthInTextElements > length + start)\r\n            {\r\n                return stringInfo.SubstringByTextElements(start, length);\r\n            }\r\n```",
              "createdAt": "2024-04-29T07:08:39Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -632,7 +632,9 @@ internal static bool AreFeaturesEnabled(Version wave)\n         internal static string SubstringByTextElements(string input, int start, int length)\n         {\n             StringInfo stringInfo = new StringInfo(input);\n-            return stringInfo.SubstringByTextElements(start, length);\n+            if (stringInfo.LengthInTextElements > length + start)\n+                return stringInfo.SubstringByTextElements(start, length);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This kind of behavior difference seems bad if we're using it to create a filename and the user is alternating between `dotnet build` and VS. Can we avoid it?",
              "createdAt": "2024-04-29T14:17:31Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4385,6 +4385,14 @@ public void PropertyFunctionCheckFeatureAvailability(string featureName, string\n         [Theory]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 0, 3, \"\\u3407\\ud840\\udc60\\ud86a\\ude30\")]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 2, 5, \"\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\")]\n+// in net742 parts of one emoji are treated as separate graphemes (text elements) while for newer .net they are one grapheme, see doc with change log:\n+// https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/uax29-compliant-grapheme-enumeration?WT.mc_id=DOP-MVP-5002735#change-description\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There is `System.Text.Runes` but I am not sure yet if it fulfills our expectations and does not have the same problem. I'll check it out.\r\nEdit: Runes were introduced in .net 3.0 but as far as I can see they work the same way as `StringInfo` segmentation by grapheme in net 472. We can combine both methods, depending on the target platform to create a unified behavior.",
              "createdAt": "2024-04-29T14:27:58Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4385,6 +4385,14 @@ public void PropertyFunctionCheckFeatureAvailability(string featureName, string\n         [Theory]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 0, 3, \"\\u3407\\ud840\\udc60\\ud86a\\ude30\")]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 2, 5, \"\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\")]\n+// in net742 parts of one emoji are treated as separate graphemes (text elements) while for newer .net they are one grapheme, see doc with change log:\n+// https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/uax29-compliant-grapheme-enumeration?WT.mc_id=DOP-MVP-5002735#change-description\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "ilonatommy"
              }
            },
            {
              "body": "Since Full FW doesn't fully observe unicode standard - we'd need to reimplement parts of it ourselves, or use namers unrelated to filenames.\r\nNeither of those two look good :-/",
              "createdAt": "2024-04-29T14:36:36Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4385,6 +4385,14 @@ public void PropertyFunctionCheckFeatureAvailability(string featureName, string\n         [Theory]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 0, 3, \"\\u3407\\ud840\\udc60\\ud86a\\ude30\")]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 2, 5, \"\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\")]\n+// in net742 parts of one emoji are treated as separate graphemes (text elements) while for newer .net they are one grapheme, see doc with change log:\n+// https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/uax29-compliant-grapheme-enumeration?WT.mc_id=DOP-MVP-5002735#change-description\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Offline suggestion from @rainersigwald - since there should be 1 marker per obj - we can replace problematic chars",
              "createdAt": "2024-04-29T15:18:27Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4385,6 +4385,14 @@ public void PropertyFunctionCheckFeatureAvailability(string featureName, string\n         [Theory]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 0, 3, \"\\u3407\\ud840\\udc60\\ud86a\\ude30\")]\n         [InlineData(\"\\u3407\\ud840\\udc60\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\\u0023\", 2, 5, \"\\ud86a\\ude30\\ud86e\\udc0a\\ud86e\\udda0\\ud879\\udeae\\u2fd5\")]\n+// in net742 parts of one emoji are treated as separate graphemes (text elements) while for newer .net they are one grapheme, see doc with change log:\n+// https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/uax29-compliant-grapheme-enumeration?WT.mc_id=DOP-MVP-5002735#change-description\n+#if NET5_0_OR_GREATER",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "With breaking multichar sequences, we can probably as well end up with chars that are not a valid path chars.\r\nCan you please as well check here that the char is not an invalid file name char? You can check against https://github.com/dotnet/msbuild/blob/1ce195e7cb119cdf66e2680badc29fcc4b6e20df/src/Shared/FileUtilities.cs#L107",
              "createdAt": "2024-04-30T09:38:06Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -629,10 +629,30 @@ internal static bool AreFeaturesEnabled(Version wave)\n             return ChangeWaves.AreFeaturesEnabled(wave);\n         }\n \n-        internal static string SubstringByTextElements(string input, int start, int length)\n+        internal static string SubstringByAsciiChars(string input, int start, int length)\n         {\n-            StringInfo stringInfo = new StringInfo(input);\n-            return stringInfo.SubstringByTextElements(start, length);\n+            if (start > input.Length)\n+            {\n+                return string.Empty;\n+            }\n+            if (start + length > input.Length)\n+            {\n+                length = input.Length - start;\n+            }\n+            StringBuilder sb = new StringBuilder();\n+            for (int i = start; i < start + length; i++)\n+            {\n+                char c = input[i];\n+                if (c >= 32 && c <= 126)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "is it needed?",
              "createdAt": "2024-04-30T11:34:11Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -19,6 +18,7 @@\n using Microsoft.Build.Utilities;\n using Microsoft.NET.StringTools;\n using Microsoft.Win32;\n+using System.Linq;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "For `char[].Contains`",
              "createdAt": "2024-04-30T11:35:41Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -19,6 +18,7 @@\n using Microsoft.Build.Utilities;\n using Microsoft.NET.StringTools;\n using Microsoft.Win32;\n+using System.Linq;",
              "author": {
                "login": "ilonatommy"
              }
            }
          ]
        }
      }
    ]
  }
}