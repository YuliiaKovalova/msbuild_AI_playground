{
  "number": 10625,
  "title": "[BuildCheck] Limit number of emitted messages per rule.",
  "body": "Temporary fixes #10414\r\n\r\n### Context\r\nIf BuildCheck emits a lot of messages, it is possible that the build will hang. Since the real reason of the hang is yet unclear, we have decided to limit number of messages emitted by build-in checks.\r\n\r\n### Changes Made\r\n- Enhanced a wrapper class `CheckWrapper` so that we can limit number of messages per check. \r\n- Added unit test.\r\n\r\n### Testing\r\nunit tests + manual testing",
  "state": "MERGED",
  "createdAt": "2024-09-06T16:32:01Z",
  "updatedAt": "2024-09-13T09:41:34Z",
  "closedAt": "2024-09-13T09:41:34Z",
  "mergedAt": "2024-09-13T09:41:34Z",
  "additions": 166,
  "deletions": 24,
  "changedFiles": 7,
  "headRefName": "bc-add-limiting-messages",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "94e1db557e6307f5da8188d6606a4ddb16e6159f",
          "message": "limit amount of emitted messages by build check",
          "committedDate": "2024-09-11T07:48:31Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "298d9e373c6758417d42d317589d83569384492a",
          "message": "add escape hatch",
          "committedDate": "2024-09-11T08:35:17Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9be3a358e2e787d59f07b4573ddf0733abf24c3",
          "message": "some renaming",
          "committedDate": "2024-09-11T08:38:10Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8beac0d08ab61beacd2a271cf737e148e13cbf58",
          "message": "Merge branch 'main' into bc-add-limiting-messages",
          "committedDate": "2024-09-11T11:11:06Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a17190bee5e1b4f5b10ceb5afc2246269ede0017",
          "message": "Do not disable node reuse",
          "committedDate": "2024-09-11T11:12:09Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb87d93aba5a57009c38f0f0f1edf52ccfd16a64",
          "message": "Fix merge bugs",
          "committedDate": "2024-09-11T11:15:01Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8877769091c81fed2ec025a20a60089ebc260bf3",
          "message": "Address comments.",
          "committedDate": "2024-09-11T12:22:01Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98c13faea8d577775842f193cc816a611e9bbeaf",
          "message": "Make limit per check",
          "committedDate": "2024-09-12T08:01:42Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a971314281bd2a5dd668ad094d494db70120b5b2",
          "message": "Fix test",
          "committedDate": "2024-09-12T08:58:31Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f01d37ff4776a67382d6b95aea676c6c96eae500",
          "message": "Dismount check after reaching results limit.",
          "committedDate": "2024-09-12T16:17:03Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ef8b278151d66f4c5586e96328dc6dd47c1a628",
          "message": "Remove extra line",
          "committedDate": "2024-09-12T16:18:04Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6585b6a470a85f5eb0d952174382bd07e31cb03",
          "message": "Address PR comments",
          "committedDate": "2024-09-13T07:32:39Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "39cc0bdaf9db6ea4e59e905590431d921a304804",
          "message": "Add comment",
          "committedDate": "2024-09-13T08:58:37Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Let's simplify this - as diuscused, the limit should be very easily addable to `BuildEventsProcessor` - something like:\r\n\r\nhttps://github.com/dotnet/msbuild/compare/main...JanKrivanek-patch-8",
        "createdAt": "2024-09-11T06:12:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's limit the number of access to the dictionary.\r\n\r\n```\r\nif (!_reportsCountPerRule.TryGetValue(result.CheckRule.Id, out int currentCount))\r\n{\r\n    currentCount = 0;\r\n}\r\n\r\nif(currentCount >= MaxReportsNumberPerRule )\r\n{\r\n   return;\r\n}\r\n\r\nif(currentCount++ >= MaxReportsNumberPerRule )\r\n{\r\n   // ... Log and dismount\r\n}\r\n\r\n// ...\r\n\r\n_reportsCountPerRule[result.CheckRule.Id] = currentCount;\r\n```",
              "createdAt": "2024-09-11T09:28:48Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +75,37 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_reportsCountPerRule is not null)\n+        {",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I can indeed limit accesses to the dictionary. If we want to dismount the check, we will need to limit the number of messages per check rather than per rule and just remove the dictionary. Alternatively, we can have a more detailed check that all the rules reached the report limit and can produce no valuable info, which would be seldom case, and I think not worth code complication.",
              "createdAt": "2024-09-11T10:52:35Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +75,37 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_reportsCountPerRule is not null)\n+        {",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's have the message localizable and let's append it to the result.\r\n\r\nOtherwise it can get lost (e.g. when users have terminal logger - which is default)",
              "createdAt": "2024-09-11T09:29:46Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +75,37 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_reportsCountPerRule is not null)\n+        {\n+            if (!_reportsCountPerRule.ContainsKey(result.CheckRule.Id))\n+            {\n+                _reportsCountPerRule[result.CheckRule.Id] = 0;\n+            }\n+            _reportsCountPerRule[result.CheckRule.Id]++;\n+\n+            if (_reportsCountPerRule[result.CheckRule.Id] == MaxReportsNumberPerRule + 1)\n+            {\n+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $\"The check '{Check.FriendlyName}' has exceeded the maximum number of results allowed for the rule '{result.CheckRule.Id}'. Any additional results will not be displayed.\");",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Plus let's dismount the check - so that it doesn't receive and operate on other data (it's fine to dismount even if the check has multiple rules)",
              "createdAt": "2024-09-11T09:31:45Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +75,37 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_reportsCountPerRule is not null)\n+        {\n+            if (!_reportsCountPerRule.ContainsKey(result.CheckRule.Id))\n+            {\n+                _reportsCountPerRule[result.CheckRule.Id] = 0;\n+            }\n+            _reportsCountPerRule[result.CheckRule.Id]++;\n+\n+            if (_reportsCountPerRule[result.CheckRule.Id] == MaxReportsNumberPerRule + 1)\n+            {\n+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $\"The check '{Check.FriendlyName}' has exceeded the maximum number of results allowed for the rule '{result.CheckRule.Id}'. Any additional results will not be displayed.\");",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "You mean to append the message to the latest result that has been shown? I can do that, albeit it would not look very nice in code I am afraid. \r\n\r\nAs for localization I suggest given that this will be appended to the latest build check result and they are not localized, not to localize it as well. Otherwise, it would look strange: part of the message is localized, part is not. ",
              "createdAt": "2024-09-11T10:32:57Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +75,37 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_reportsCountPerRule is not null)\n+        {\n+            if (!_reportsCountPerRule.ContainsKey(result.CheckRule.Id))\n+            {\n+                _reportsCountPerRule[result.CheckRule.Id] = 0;\n+            }\n+            _reportsCountPerRule[result.CheckRule.Id]++;\n+\n+            if (_reportsCountPerRule[result.CheckRule.Id] == MaxReportsNumberPerRule + 1)\n+            {\n+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $\"The check '{Check.FriendlyName}' has exceeded the maximum number of results allowed for the rule '{result.CheckRule.Id}'. Any additional results will not be displayed.\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: feels unnecessary",
              "createdAt": "2024-09-12T09:13:14Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -588,6 +588,7 @@ public CheckWrapper Initialize(Check ba, ConfigurationContext configContext)\n                     throw new BuildCheckConfigurationException(\n                         $\"The Check '{ba.FriendlyName}' failed to initialize: {e.Message}\", e);\n                 }\n+",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's detect on the last diagnostic we want to emit (so MaxReportsNumberPerRule - 1) - so that the created report is not created unnecessary.\r\nThis applies once the dismounting is added (so basically - detect this is last wanted report - report it, report the note that the check will be dismounted and dismount the check)",
              "createdAt": "2024-09-12T09:18:32Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +68,33 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_limitReportsNumber)\n+        {\n+            if (_reportsCount > MaxReportsNumberPerRule)\n+            {\n+                return;\n+            }\n+\n+            if (_reportsCount == MaxReportsNumberPerRule)\n+            {\n+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $\"The check '{Check.FriendlyName}' has exceeded the maximum number of results allowed. Any additional results will not be displayed.\");\n+                _reportsCount++;\n+                return;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I thought about it, but I decided that not writing this message when it is not needed (for example when we have exactly 20 messages) is also a possible good behavior. Without counting dismounting of the check it is better. If we implement dismounting, we will indeed write it before dismount which is better to do during the last message exactly as you stated.",
              "createdAt": "2024-09-12T10:57:31Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +68,33 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_limitReportsNumber)\n+        {\n+            if (_reportsCount > MaxReportsNumberPerRule)\n+            {\n+                return;\n+            }\n+\n+            if (_reportsCount == MaxReportsNumberPerRule)\n+            {\n+                checkContext.DispatchAsCommentFromText(MessageImportance.Normal, $\"The check '{Check.FriendlyName}' has exceeded the maximum number of results allowed. Any additional results will not be displayed.\");\n+                _reportsCount++;\n+                return;\n+            }",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: this can be readonly",
              "createdAt": "2024-09-13T06:12:07Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs",
              "diffHunk": "@@ -46,6 +49,7 @@ internal void DeregisterCheck(CheckWrapper check)\n \n     // In a future we can have callbacks per project as well\n     private readonly CallbackRegistry _globalCallbacks = new();\n+    private Action<ICheckContext> _removeThrottledChecks;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    public bool IsThrottled { get; private set; } = false;\r\n```\r\n\r\nThis should rather be autoproperty.\r\nFields should not be exposed.",
              "createdAt": "2024-09-13T06:15:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -17,13 +18,34 @@ internal sealed class CheckWrapper\n {\n     private readonly Stopwatch _stopwatch = new Stopwatch();\n \n+    /// <summary>\n+    /// Maximum amount of messages that could be sent per check rule.\n+    /// </summary>\n+    public const int MaxReportsNumberPerRule = 20;\n+\n+    /// <summary>\n+    /// Keeps track of number of reports sent per rule.\n+    /// </summary>\n+    private int _reportsCount = 0;\n+\n+    /// <summary>\n+    /// Flags that this check should no more used and be deregistered.\n+    /// </summary>\n+    public bool IsThrottled = false;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's move this check after the reporting (whit count decreased by 1) - so that we do not have an unneeded report being created and then thrown away.\r\nAfter the last report we already know the check will be dismounted - we do not have to wait till the other to do that",
              "createdAt": "2024-09-13T06:17:02Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +74,27 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_limitReportsNumber)\n+        {\n+            if (_reportsCount >= MaxReportsNumberPerRule)\n+            {\n+                IsThrottled = true;\n+                return;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thanks for fixing!",
              "createdAt": "2024-09-13T08:47:47Z",
              "path": "src/Build/BuildCheck/Infrastructure/CheckWrapper.cs",
              "diffHunk": "@@ -52,10 +74,27 @@ internal void StartNewProject(\n         }\n     }\n \n+    internal void ReportResult(BuildCheckResult result, ICheckContext checkContext, CheckConfigurationEffective config)\n+    {\n+        if (_limitReportsNumber)\n+        {\n+            if (_reportsCount >= MaxReportsNumberPerRule)\n+            {\n+                IsThrottled = true;\n+                return;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}