{
  "number": 7621,
  "title": "Enable registry properties",
  "body": "On non-Windows OSes, return empty, as we had been doing in .NET Core before.\r\n\r\nThis enables more project types to evaluate and match .NET Framework MSBuild's results when on Windows.\r\n\r\nFixes an issue reported via IM by @dfederm.",
  "state": "MERGED",
  "createdAt": "2022-05-13T14:49:57Z",
  "updatedAt": "2022-05-26T20:54:46Z",
  "closedAt": "2022-05-26T20:54:46Z",
  "mergedAt": "2022-05-26T20:54:46Z",
  "additions": 75,
  "deletions": 52,
  "changedFiles": 3,
  "headRefName": "registry-properties",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "13079b12045e7fc0b27f2f69f69b244e9c21f446",
          "message": "Enable registry properties\n\nOn non-Windows OSes, return empty, as we had been doing in .NET Core\nbefore.\n\nThis enables more project types to evaluate and match .NET Framework\nMSBuild's results when on Windows.",
          "committedDate": "2022-05-13T16:08:37Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b6e9fd5a1c59f5e82c806cb328a57646e1fd4aee",
          "message": "Enable GetRegistryValue* property functions\n\nWhile looking at registry properties I noticed these were also disabled.\nSame logic applies for enabling them.",
          "committedDate": "2022-05-13T16:29:32Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the difference between these?",
              "createdAt": "2022-05-13T22:15:46Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1712,8 +1713,10 @@ public void RegistryPropertyInvalidPrefixError2()\n             }\n            );\n         }\n-#if FEATURE_WIN32_REGISTRY\n+\n         [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        [SupportedOSPlatform(\"windows\")]",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The former disables the test on non-Windows platforms (via Arcade magic). The latter silences the warnings about using Windows-only APIs. As far as I could tell from the API docs, there's not a way to tell the OS-checking analyzer about another attribute that has the same meaning as `SupportedOSPlatform`.",
              "createdAt": "2022-05-16T13:34:36Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1712,8 +1713,10 @@ public void RegistryPropertyInvalidPrefixError2()\n             }\n            );\n         }\n-#if FEATURE_WIN32_REGISTRY\n+\n         [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        [SupportedOSPlatform(\"windows\")]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you need the ifdef here? People are opted in anyway, so it won't affect anyone unless they disable the change wave, and I don't think people normally do that. Or maybe just plan to remove the ifdef with the change wave? If so, that should be in a comment so we remember.",
              "createdAt": "2022-05-13T22:25:18Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1582,6 +1578,16 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen\n             /// </summary>\n             private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)\n             {\n+#if RUNTIME_TYPE_NETCORE\n+                // .NET Core MSBuild used to always return empty, so match that behavior\n+                // on non-Windows (no registry), and with a changewave (in case someone\n+                // had a registry property and it breaks when it lights up).\n+                if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Same for other cases.",
              "createdAt": "2022-05-13T22:25:59Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1582,6 +1578,16 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen\n             /// </summary>\n             private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)\n             {\n+#if RUNTIME_TYPE_NETCORE\n+                // .NET Core MSBuild used to always return empty, so match that behavior\n+                // on non-Windows (no registry), and with a changewave (in case someone\n+                // had a registry property and it breaks when it lights up).\n+                if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Why bother doing the runtime check when we're on .NET Framework and know _a priori_ that we're on Windows?",
              "createdAt": "2022-05-16T13:37:09Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1582,6 +1578,16 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen\n             /// </summary>\n             private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)\n             {\n+#if RUNTIME_TYPE_NETCORE\n+                // .NET Core MSBuild used to always return empty, so match that behavior\n+                // on non-Windows (no registry), and with a changewave (in case someone\n+                // had a registry property and it breaks when it lights up).\n+                if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We could also be on mono, not that you necessarily care. I imagine the win32 check was a real \"on windows\" check. Other reason is to unify the code paths, which I generally think positive.",
              "createdAt": "2022-05-16T14:54:11Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1582,6 +1578,16 @@ private static object ExpandMSBuildThisFileProperty(string propertyName, IElemen\n             /// </summary>\n             private static string ExpandRegistryValue(string registryExpression, IElementLocation elementLocation)\n             {\n+#if RUNTIME_TYPE_NETCORE\n+                // .NET Core MSBuild used to always return empty, so match that behavior\n+                // on non-Windows (no registry), and with a changewave (in case someone\n+                // had a registry property and it breaks when it lights up).\n+                if (!NativeMethodsShared.IsWindows || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you not put the platform guard on a property? Thought you could.",
              "createdAt": "2022-05-13T22:25:44Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -28,11 +29,11 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class IntrinsicFunctions\n     {\n-#if FEATURE_WIN32_REGISTRY\n+#pragma warning disable CA1416 // Platform compatibility: we'll only use this on Windows",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Property yes, field no, so I suppressed the warning here rather than check the OS inside the set operation.",
              "createdAt": "2022-05-16T13:35:34Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -28,11 +29,11 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class IntrinsicFunctions\n     {\n-#if FEATURE_WIN32_REGISTRY\n+#pragma warning disable CA1416 // Platform compatibility: we'll only use this on Windows",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Not sure why I thought that was a property last week \ud83d\udc4d ",
              "createdAt": "2022-05-16T14:56:12Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -28,11 +29,11 @@ namespace Microsoft.Build.Evaluation\n     /// </summary>\n     internal static class IntrinsicFunctions\n     {\n-#if FEATURE_WIN32_REGISTRY\n+#pragma warning disable CA1416 // Platform compatibility: we'll only use this on Windows",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}