{
  "number": 11005,
  "title": "onepagers for MSBuildServer and RAR caching",
  "body": "Onepagers as per our internal team discussion.",
  "state": "MERGED",
  "createdAt": "2024-11-20T11:00:06Z",
  "updatedAt": "2024-12-09T15:25:23Z",
  "closedAt": "2024-12-09T15:25:20Z",
  "mergedAt": "2024-12-09T15:25:20Z",
  "additions": 139,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "onepagers_RARcaching_MSBuildServer",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e8369accc32e0223237cf723513a8969603e52db",
          "message": "onepagers for MSBuildServer and RAR caching",
          "committedDate": "2024-11-20T10:58:15Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "a8a2035babc0bf569d5690773225eca95727c1bd",
          "message": "onepagers update based on reviews.",
          "committedDate": "2024-12-02T09:35:20Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "11e374cc770fa46806dec4afcda9833936e9340d",
          "message": "Update RAR_caching_onepager.md",
          "committedDate": "2024-12-09T12:44:31Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "656f47ef74bb3c0f92327aa7446242097afbe54c",
          "message": "Merge branch 'main' into onepagers_RARcaching_MSBuildServer",
          "committedDate": "2024-12-09T12:45:03Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "bc6e942fb91ed462a9575d431e39b1f5d2290914",
          "message": "Update MSBuild_Server_onepager.md",
          "committedDate": "2024-12-09T15:00:09Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "46eb2a432febc9fc52c9c19054abb88c300bd58c",
          "message": "Update RAR_caching_onepager.md",
          "committedDate": "2024-12-09T15:01:45Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello @tkapin @donJoseLuis, I went over the comments and answered what I could.\r\nThat being said I've got kind of a technical question - how much more in depth should I do in the next iteration please? (I will fill in the requested information that I put into the comments for now at the very least)\r\nI'm aware I was probably too vague at some places and didn't explain deeply enough at others. Part of this I attribute to the fact that I was sticking to the \"one pager\" format. I was actively cutting some stuff away to keep the stuff as concise as possible with the hope to keep it contained on, well, one page.\r\nI have no issue writing more so this is more of a check - what is an expected length of one pager please? I probably took it too literally. ",
        "createdAt": "2024-11-21T09:11:08Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "the risk of teammates being loaned to divisional initiatives threatens completion and delivery of relevant work",
              "createdAt": "2024-11-20T11:36:50Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Agree, but this is an implicit risk in every project, so I don't think it's necessary to call that out.",
              "createdAt": "2024-11-20T20:55:36Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "should we coordinate with other teams such as run time when they would enable this?",
              "createdAt": "2024-11-20T11:38:06Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "are there performance estimates for the expected gains?",
              "createdAt": "2024-11-20T11:39:52Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Please see the comment below. I'm sorry I went in random order and answered there first.",
              "createdAt": "2024-11-21T09:06:15Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "thhorough testing should be a priority in the effort.",
              "createdAt": "2024-11-20T11:40:51Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+\n+The risk is having to figure out a different way to help 1ES team to\n+isolate their File I/Os if the caching hurts the performance. This could\n+result in a larger project requiring more involvement on our side.\n+\n+### Cost\n+\n+Week for reviewing the provided PR. Additional two weeks for performance\n+testing conditional on the Perfstar infrastructure being functional.\n+Some communication overhead\n+\n+## Plan\n+",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we have some estimation of the performance gain? Eventually, are there any scenarios that would significantly benefit from the build server?",
              "createdAt": "2024-11-20T20:48:43Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "Currently the performance gain is in not having to start the MSBuild process over and over again for every build. E.g. the perfomance gain is one quite large process being kept alive, which admittedly is not all that much.\r\nHowever for the future, we can leverage it to cache some additional stuff more agressively. We can also use it to monitor the folders of the last build and for example re-evaluate in the background - and evaluations are costly.\r\nFor the concrete numbers @rainersigwald, can you elaborate please? I have the overall knowledge of the stuff we discussed, but not enough data.\r\n",
              "createdAt": "2024-11-21T08:58:07Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yeah I don't have concrete numbers. It's likely not huge for most scenarios, though incremental build of a single project (new-to-.NET scenario) will likely see a solid change.\r\n\r\nWe should collect numbers as part of this work. IMO unless the numbers show things getting worse, it's worth going forward to\r\n\r\n1. get this feature to \"done\", and\r\n2. give us a place to hang future background processing.",
              "createdAt": "2024-11-21T14:57:15Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you elaborate a bit on how would the Build Server help in this decoupling?",
              "createdAt": "2024-11-20T20:49:19Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "Visual Studio is currently acting almost like a MSBuild server would in some ways. It is a persistent process, that is invoking portions of MSBuild as required. It handles caching, has some file monitoring that it uses for knowing what to rebuild and what to keep and probably some other things I'm not aware of.\r\nThis creates a tension since the behavior is almost the same as MSBuild, yet different enough to confuse and sometimes cause issues.\r\nIn a perfect world, we would like Visual Studio to instead communicate with MSBuild as a process so that the behavior is the same. Currently, they have no reason to do that. We would like to set up the MSBuild server and then start shifting from \"VS uses portions of MSBuild directly\" to \"VS calls MSBuild server with requests\".\r\n@JanKrivanek is this close enough description or did I miss something please?",
              "createdAt": "2024-11-21T09:04:42Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are there any other partners that could dogfood the feature? Specifically, Jared mentioned that we could learn from their experiences with compiler server so perhaps they could help us dogfood the feature?",
              "createdAt": "2024-11-20T20:51:35Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "Yes, we should go to our close-friend repos like SDK and roslyn to get them to opt in before we opt in for everyone.",
              "createdAt": "2024-11-21T14:58:25Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\"MSBuild team\" would be probably more descriptive for readers who are not familiar with the team members.\r\n",
              "createdAt": "2024-11-20T20:54:40Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is very vague. Can you be more specific about why is our confidence higher?",
              "createdAt": "2024-11-20T20:58:30Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "Previously the main blocking bug was Nuget authentication which wasn't refreshable without restarting the process. This bug has since been fixed and the MSBuild server was updated.\r\nWe don't have any current knowledge about similar bugs, however it is something that could happen.",
              "createdAt": "2024-11-21T08:53:26Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yeah this is a situation where our change here can reveal latent bugs in other code. We _hope_ that the last attempt flushed out the most critical ones, but I don't know of a way to detect them in advance.",
              "createdAt": "2024-11-21T15:04:09Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this estimate based on some existing known issues, or is it just a rough guess?",
              "createdAt": "2024-11-20T21:03:02Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by\n+now, however we can run into some new ones.\n+\n+### Cost\n+\n+A week to figure out how to turn on the MSBuild Server in a way that\n+will enable us to dogfood it properly **plus** some overhead for the\n+review loop.\n+\n+A month of developer time for bugfixes assuming that nothing goes",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be good to add that this is not a completely new implementation, but re-enablement of a previous work. I had realized this only after reading the Cost and Plan sections.",
              "createdAt": "2024-11-20T21:04:33Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "A link to https://github.com/dotnet/msbuild/blob/main/documentation/MSBuild-Server.md is probably also a good idea.",
              "createdAt": "2024-11-21T14:55:12Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should \"internal time\" read \"internal repo\"?",
              "createdAt": "2024-11-20T21:06:04Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by\n+now, however we can run into some new ones.\n+\n+### Cost\n+\n+A week to figure out how to turn on the MSBuild Server in a way that\n+will enable us to dogfood it properly **plus** some overhead for the\n+review loop.\n+\n+A month of developer time for bugfixes assuming that nothing goes\n+terribly wrong.\n+\n+Some PM time to communicate with appropriate teams to ask them for help\n+with dogfooding.\n+\n+### Plan\n+\n+- In a first month we should aim to get the MSBuild server dogfooded for\n+  our internal time. (Coding + review + setting up)",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the difference between the first month dogfooding and this dogfooding? What does \"dogfooding internally\" mean in this context?",
              "createdAt": "2024-11-20T21:07:50Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,66 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild\n+that we would communicate with via a thin client. We want to get from\n+the current state of \u201cspawn a complete process for every CLI invocation\u201d\n+to \u201cwe have a server process in the background and we only spawn a small\n+CLI handler that will tell the server what to build\u201d.\n+\n+### Goals and Motivation\n+\n+Currently all the MSBuild processes are persistent, except for the entry\n+point process which lives only for the duration of the build. Restarting\n+this process with each and every build leads to some overhead due to\n+startup costs like jitting. It also leads to a loss of continuity mainly\n+due to the absence of caching.\n+\n+The primary aim of the MSBuild server is to reduce this startup\n+overhead.\n+\n+The secondary aim of this project is to enable us to introduce more\n+advanced caching and potentially some other performance optimizations\n+further down the line. However these aren\u2019t in the current scope.\n+\n+### Impact\n+\n+Small performance improvement in the short term. Enabling further\n+optimizations in the long term. (these improvements are for the Dev Kit\n+and inner loop CLI scenarios)\n+\n+Getting closer to the possibility of decoupling from Visual Studio.\n+\n+### Stakeholders\n+\n+Tomas Bartonek, Rainer Sigwald. Successful handover means turning on the\n+feature, dogfooding it for long enough to ensure we have reasonable\n+certainty that nothing breaks and then rolling it out.\n+\n+### Risks\n+\n+The project was already attempted once, however it was postponed because\n+it surfaced a group of bugs that weren\u2019t previously visible due to the\n+processes not being persistent. Most of those bugs should be solved by\n+now, however we can run into some new ones.\n+\n+### Cost\n+\n+A week to figure out how to turn on the MSBuild Server in a way that\n+will enable us to dogfood it properly **plus** some overhead for the\n+review loop.\n+\n+A month of developer time for bugfixes assuming that nothing goes\n+terribly wrong.\n+\n+Some PM time to communicate with appropriate teams to ask them for help\n+with dogfooding.\n+\n+### Plan\n+\n+- In a first month we should aim to get the MSBuild server dogfooded for\n+  our internal time. (Coding + review + setting up)\n+\n+- Second month we will monitor it and fix anything that crops up.\n+\n+- After that we start dogfooding internally for as long as we feel",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please explain the abbreviation the first time it's used so it's clear to the readers.",
              "createdAt": "2024-11-20T21:08:25Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching",
              "author": {
                "login": "tkapin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you elaborate a bit on what are these references? Is it project references or something else yet?",
              "createdAt": "2024-11-20T21:09:33Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "assembly references",
              "createdAt": "2024-11-21T15:04:35Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this sentence, is it missing a part? The scenario needs more clarification. What is I/O isolation in this case?",
              "createdAt": "2024-11-20T21:11:07Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "That seems likely. I'm sorry, my bad. I was editing it and missed a word. I will take a closer look in the next iteration.\r\nIf I understood correctly they have complicated infrastructure, and the current MSBuild caching is pulling files from all nodes at once. This creates a tangled mess of IOs together with their other stuff. They want to separate the caching IO to a separate process so that it is separate from the other File IO related stuff so that it stops polluting their logs.",
              "createdAt": "2024-11-21T08:50:52Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "@ccastanedaucf that sounds accurate to me, right?",
              "createdAt": "2024-11-21T14:52:12Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\"we meet our performance requirements\" - what are they?",
              "createdAt": "2024-11-20T21:15:22Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "No regression at the minimum. I mentioned it earlier so I ommited it here. I can remedy. ",
              "createdAt": "2024-11-21T08:40:51Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Who will benefit from this feature? 1ES only or external customers as well?",
              "createdAt": "2024-11-20T21:17:57Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "This mostly depends on the performance impact. If the performance is neutral, it will be mostly 1ES who will benefit (even though I imagine there can be a customer who would benefit in a similar way to the 1ES)\r\nIf the performance is positive, then it could have a broader impact. \r\n\r\nAlso, one of our discussion items was to transition from multiprocess to multithreaded - if we can pull that one off, this will lose the burden of IPC, further improving the perf. However that is more of a \"wishlist/longerm\" sort of plan.",
              "createdAt": "2024-11-21T08:47:16Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is PerfStar a prerequisite for this then? Could this be done without PerfStar by testing the performance manually?",
              "createdAt": "2024-11-20T21:20:35Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+\n+The risk is having to figure out a different way to help 1ES team to\n+isolate their File I/Os if the caching hurts the performance. This could\n+result in a larger project requiring more involvement on our side.\n+\n+### Cost\n+\n+Week for reviewing the provided PR. Additional two weeks for performance\n+testing conditional on the Perfstar infrastructure being functional.",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "We could do it manually, it would be more difficult and costly. Also, we want to have Perfstar for setting the baselines as far as I can tell.",
              "createdAt": "2024-11-21T08:41:47Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+\n+The risk is having to figure out a different way to help 1ES team to\n+isolate their File I/Os if the caching hurts the performance. This could\n+result in a larger project requiring more involvement on our side.\n+\n+### Cost\n+\n+Week for reviewing the provided PR. Additional two weeks for performance\n+testing conditional on the Perfstar infrastructure being functional.",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What happens after the review? What is the expected cost of supporting 1ES? Are we expecting some follow-ups on this?",
              "createdAt": "2024-11-20T21:22:08Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+\n+The risk is having to figure out a different way to help 1ES team to\n+isolate their File I/Os if the caching hurts the performance. This could\n+result in a larger project requiring more involvement on our side.\n+\n+### Cost\n+\n+Week for reviewing the provided PR. Additional two weeks for performance\n+testing conditional on the Perfstar infrastructure being functional.\n+Some communication overhead\n+\n+## Plan\n+\n+1ES team creates the PR wih the RAR cache implementation.\n+\n+We review the PR with a special emphasis on the performance side of",
              "author": {
                "login": "tkapin"
              }
            },
            {
              "body": "Ideally we merge, it works and it's done. There is no expected follow up work besided the usual maintenance.\r\nThis should mostly be \"only\" enabling of a neat feature that will help 1ES and possibly improve performance.",
              "createdAt": "2024-11-21T08:43:26Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+## RAR caching\n+\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the which is causing\n+issues to their debugging efforts.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements.\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+\n+The risk is having to figure out a different way to help 1ES team to\n+isolate their File I/Os if the caching hurts the performance. This could\n+result in a larger project requiring more involvement on our side.\n+\n+### Cost\n+\n+Week for reviewing the provided PR. Additional two weeks for performance\n+testing conditional on the Perfstar infrastructure being functional.\n+Some communication overhead\n+\n+## Plan\n+\n+1ES team creates the PR wih the RAR cache implementation.\n+\n+We review the PR with a special emphasis on the performance side of",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "dangling sentence here - especially because...?",
              "createdAt": "2024-12-02T21:08:20Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,59 @@\n+## RAR caching\n+RAR in this context means resolving of assembly references.\n+During every build we need to gather the graph of references and pass\n+them to the compiler. This process is highly cacheable as the references\n+don\u2019t change all that often. Currently we have some limited caching in\n+place however the way nodes are assigned work results in frequent cache\n+misses.\n+\n+### Goals and motivations\n+\n+1ES team wants to isolate their File I/O related to the RAR caching which is causing\n+issues to their debugging efforts. This is mostly due to the fact that MSBuild is pulling\n+files from all nodes at once which results in a tangled mess of IO that is hard to debug.\n+\n+Our motivation is a possible performance gain however we\u2019re fine with\n+the change as long as the impact is not negative.\n+\n+### Impact\n+\n+The only impact we\u2019re concerned about is the performance. There will be\n+a tension between the gains from caching and costs due to the IPC from\n+the process that will act as the cache repository. We need to ensure\n+that this balance will be a net positive performance wise.\n+\n+### Stakeholders\n+\n+1ES team, Tomas Bartonek, Rainer Sigwald\n+\n+1ES team will provide the initial cache implementation. We will review\n+their PRs and do the performance evaluations. Handover will be\n+successful if nothing breaks and we meet our performance requirements\n+(no regression or better still an improvement).\n+\n+### Risks\n+\n+Some time ago Roman Konecny estimated the RAR caching to not be worth it\n+performance wise. 1ES team claims to have created an implementation that\n+will either improve or not change the performance. We need to validate\n+this claim and push back in case we find performance regression.\n+Thorough testing will be needed especially ",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It feels like it is missing something after \"MSBuild\", like, \"MSBuild process\".",
              "createdAt": "2024-12-09T13:16:39Z",
              "path": "documentation/specs/proposed/MSBuild_Server_onepager.md",
              "diffHunk": "@@ -0,0 +1,79 @@\n+## MSBuild Server\n+\n+MSBuild server aims to create a persistent entry node for the MSBuild",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a nit: if you want to make this a bit less wordy:\r\n\"Resolving of Assembly References (RAR)\" and then continue using RAR after that.",
              "createdAt": "2024-12-09T13:23:47Z",
              "path": "documentation/specs/proposed/RAR_caching_onepager.md",
              "diffHunk": "@@ -0,0 +1,60 @@\n+## RAR caching\n+RAR in this context means resolving of assembly references.",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      }
    ]
  }
}