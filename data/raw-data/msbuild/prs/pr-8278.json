{
  "number": 8278,
  "title": "Allow to set empty string for ITaskItem when building tasks",
  "body": "Fixes [#5814](https://github.com/dotnet/msbuild/issues/5814)\r\n\r\n### Context\r\nCan't pass empty string to XmlPoke task. \r\n\r\n### Changes Made\r\nDefine an attribute \"AllowEmptyString\" for task [ITaskItem](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.framework.itaskitem) property, just like Required attribute.  When the item value is empty, set the empty string instead of skipping setting the parameter.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2023-01-04T06:34:03Z",
  "updatedAt": "2023-09-20T07:52:59Z",
  "closedAt": "2023-01-16T06:34:18Z",
  "mergedAt": null,
  "additions": 113,
  "deletions": 25,
  "changedFiles": 12,
  "headRefName": "jennybai/issue5814",
  "isDraft": true,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7991d217a902996e504184dda2142b7bda607625",
          "message": "Add test case",
          "committedDate": "2023-01-03T10:49:22Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1bc41ea0dbef49516f9862262962fbd63845572d",
          "message": "Add a attribute allowEmptyString for itaskitem",
          "committedDate": "2023-01-04T06:31:58Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a950aeadf1fc7538f1bbdfd942df302f1be1e748",
          "message": "Fix the failed cases since the TaskPropertyInfo constructor change to use the lateast task core assembly",
          "committedDate": "2023-01-04T08:55:29Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e801c14cb0cb2f2ebaf016fae017d8640089b1d0",
          "message": "change comment and remove space",
          "committedDate": "2023-01-04T09:38:31Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ae10ed9b7c1a24ff4fa119691e71cfa2975d848",
          "message": "Change allowEmptyStringParameters as list",
          "committedDate": "2023-01-05T09:44:10Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29da84fde5e9a2baf2ef1e4acc61683da0066c10",
          "message": "Expand parameter value and remove the cache of allowEmptyString",
          "committedDate": "2023-01-09T11:16:35Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "There are no failed test cases now. But since I changed TaskPropertyInfo constructor function.  So the follow error in the pipeline.   Member 'Microsoft.Build.Framework.TaskPropertyInfo.TaskPropertyInfo(string, System.Type, bool, bool)' exists on [Baseline] lib/net472/Microsoft.Build.Framework.dll but not on lib/net472/Microsoft.Build.Framework.dll [D:\\a\\1\\s\\src\\Framework\\Microsoft.Build.Framework.csproj]\r\n",
        "createdAt": "2023-01-04T09:30:42Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> There are no failed test cases now. But since I changed TaskPropertyInfo constructor function. So the follow error in the pipeline. Member 'Microsoft.Build.Framework.TaskPropertyInfo.TaskPropertyInfo(string, System.Type, bool, bool)' exists on [Baseline] lib/net472/Microsoft.Build.Framework.dll but not on lib/net472/Microsoft.Build.Framework.dll [D:\\a\\1\\s\\src\\Framework\\Microsoft.Build.Framework.csproj]\r\n\r\nThe error is correct here. When a public type and its constructor are exposed as TaskPropertyInfo and its constructor are, we basically can't change them. Your change seems like it isn't a breaking change because you provide a default value for the parameter\u2014anyone calling that constructor would just automatically get the default value, so it can't be a breaking change. But in this case, it's a binary breaking change: if you look at the compiled version of the function before, it clearly doesn't have the parameter, and the compiled version now does. If you just call the TaskPropertyInfo constructor from our binary, you'd no longer be able to find the method, so it is indeed a breaking change.\r\n\r\nAll you have to do to work around it is create a new constructor with your parameter. We have a million public constructors for Project, and many of them can be condensed down to just a few constructors. I'd love to do that, but it would be a breaking change, sadly.",
        "createdAt": "2023-01-04T23:52:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> On the other hand, the narrowest/safest answer would be just making XmlPoke's Value property not required and interpret it as an empty string if not defined.\r\n\r\nIn this way, it's difficult to distinguish wheather value is set as empty or is not set in XmlPoke task. If not set, should it be as empty by default?",
        "createdAt": "2023-01-05T07:59:53Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> This PR is in a kinda weird space between being narrowly useful for the specific bug and being broadly useful in every case. It seems to allow the AllowEmptyString attribute on a parameter for any task, but what happens if you want to AllowEmptyString on an ITaskItem[]? I didn't see anywhere that's covered. On the other hand, the narrowest/safest answer would be just making XmlPoke's Value property not required and interpret it as an empty string if not defined. Since BenVillalobos marked it \"Good First Issue\", I'm guessing that's all he had in mind. That said, I'm open to discussion as to whether we'd want to make it more broadly applicable.\r\n\r\nHere, I just want to make it work on scalar parameter ITaskItem, not ITaskItem[], since I'm sure the related task with ITaskItem[] property.\r\n",
        "createdAt": "2023-01-05T09:57:07Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> > On the other hand, the narrowest/safest answer would be just making XmlPoke's Value property not required and interpret it as an empty string if not defined.\r\n> \r\n> In this way, it's difficult to distinguish wheather value is set as empty or is not set in XmlPoke task. If not set, should it be as empty by default?\r\n\r\nYes, that was what I was thinking.\r\n\r\n> Here, I just want to make it work on scalar parameter ITaskItem, not ITaskItem[]\r\n\r\nThis is the part I thought unusual, but it might be reasonable.\r\n\r\n> since I'm sure the related task with ITaskItem[] property.\r\n\r\nWhat do you mean?",
        "createdAt": "2023-01-05T21:19:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "\r\n\r\n> > > On the other hand, the narrowest/safest answer would be just making XmlPoke's Value property not required and interpret it as an empty string if not defined.\r\n> > \r\n> > \r\n> > In this way, it's difficult to distinguish wheather value is set as empty or is not set in XmlPoke task. If not set, should it be as empty by default?\r\n> \r\n> Yes, that was what I was thinking.\r\n> \r\n> > Here, I just want to make it work on scalar parameter ITaskItem, not ITaskItem[]\r\n> \r\n> This is the part I thought unusual, but it might be reasonable.\r\n> \r\n> > since I'm sure the related task with ITaskItem[] property.\r\n> \r\n> What do you mean?\r\n\r\nI'm not familar with which task has ITaskItem[] property until now to have a test. ",
        "createdAt": "2023-01-06T11:19:24Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "After offline discussion we agreed to approach the path of making the `Value` property of `XmlPoke` task optional.\r\nThis will need to be properly documented in [docs](https://learn.microsoft.com/en-us/visualstudio/msbuild/xmlpoke-task) (PR to be made to https://github.com/MicrosoftDocs/visualstudio-docs/blob/main/docs/msbuild/xmlpoke-task.md)",
        "createdAt": "2023-01-11T09:38:04Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "ghogen owns our docs, so make sure to cc him once you have a PR ready.",
        "createdAt": "2023-01-11T20:45:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Close this one since the new PR https://github.com/dotnet/msbuild/pull/8305",
        "createdAt": "2023-01-16T06:34:13Z",
        "author": {
          "login": "JaynieBai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I know requiredParameters just above is an IDictionary<string, string>, but I don't see anywhere its values can ever be anything other than string.Empty. Why is this an IDictionary?\r\n\r\nTo be honest, I'm wondering if you could get by without even a Set. It looks like you have (taskName, location) and TaskPropertyInfo, and you just need to figure out which corresponds to which, and you can avoid allocating anything. I'd guess they're in the same order, but that'd be something to check.",
              "createdAt": "2023-01-04T23:18:19Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -333,6 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo\n             // \"required\" so that we can keep track of whether or not they all get set.\n             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();\n+            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, it is not necessary to be an IDictionary.",
              "createdAt": "2023-01-05T09:48:33Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -333,6 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo\n             // \"required\" so that we can keep track of whether or not they all get set.\n             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();\n+            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "> To be honest, I'm wondering if you could get by without even a Set\r\n\r\nDo you mean without  SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString)) ?\r\n",
              "createdAt": "2023-01-05T09:52:11Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -333,6 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo\n             // \"required\" so that we can keep track of whether or not they all get set.\n             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();\n+            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "If you don't need an IDictionary, the logical next option would be to change it to a Set like a HashSet or something, but I'm wondering if you can get by without having a data structure there at all and just accessing the allowEmptyString attribute as needed.",
              "createdAt": "2023-01-05T21:15:43Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -333,6 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo\n             // \"required\" so that we can keep track of whether or not they all get set.\n             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();\n+            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sure, I can get by without having a data structure there at all.  But I'm think if we should cache this property just like required, output ...",
              "createdAt": "2023-01-06T10:02:09Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -333,6 +333,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo\n             // \"required\" so that we can keep track of whether or not they all get set.\n             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();\n+            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is subtly wrong. If you have something like `realValue;`, then it would treat that as one item and be ok with it, but it should really interpret that as two values, one of which is empty, and fail.",
              "createdAt": "2023-01-04T23:36:01Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1169,6 +1173,11 @@ private bool InitializeTaskScalarParameter\n                     if (finalTaskItems.Count == 0)\n                     {\n                         success = true;\n+                        if (allowEmptyString)\n+                        {\n+                            success = SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "If this is realValue, finalTaskItems.Count will not be zero.  It will  go to the else condition https://github.com/dotnet/msbuild/blob/762ae6c6bbeb21471d4d685a061ed05b47cfcb05/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L1193",
              "createdAt": "2023-01-05T09:37:34Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1169,6 +1173,11 @@ private bool InitializeTaskScalarParameter\n                     if (finalTaskItems.Count == 0)\n                     {\n                         success = true;\n+                        if (allowEmptyString)\n+                        {\n+                            success = SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString));",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "Correct, but if finalTaskItems.Count is 1, that could mean that finalTaskItems really has one thing in it, or it could have two, where one of them was empty. The bug here is in failing to throw an error when you should.",
              "createdAt": "2023-01-05T21:14:52Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1169,6 +1173,11 @@ private bool InitializeTaskScalarParameter\n                     if (finalTaskItems.Count == 0)\n                     {\n                         success = true;\n+                        if (allowEmptyString)\n+                        {\n+                            success = SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm thinking if I should set empty parameter value in the following function when `expression.Length == 0 `before and after expand metadata and properties. That should  throw the expected errors.\r\nhttps://github.com/dotnet/msbuild/blob/1ae10ed9b7c1a24ff4fa119691e71cfa2975d848/src/Build/Evaluation/Expander.cs#L504-L523",
              "createdAt": "2023-01-06T11:11:41Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1169,6 +1173,11 @@ private bool InitializeTaskScalarParameter\n                     if (finalTaskItems.Count == 0)\n                     {\n                         success = true;\n+                        if (allowEmptyString)\n+                        {\n+                            success = SetTaskItemParameter(parameter, new TaskItem(parameterValue, parameterLocation.LocationString, allowEmptyString));",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\n```suggestion\r\n        internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo, bool output, bool required, bool allowEmptyString, bool isAssignableToITaskItemType)\r\n```",
              "createdAt": "2023-01-04T23:37:24Z",
              "path": "src/Build/Instance/ReflectableTaskPropertyInfo.cs",
              "diffHunk": "@@ -57,12 +58,13 @@ internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo)\n         /// used with MetadataLoadContext, as these parameters cannot be computed for the property type passed in directly but\n         /// rather the relevant base type.\n         /// </summary>\n-        internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo, bool output, bool required, bool isAssignableToITaskItemType)\n+        internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo, bool output, bool required,bool allowEmptyString, bool isAssignableToITaskItemType)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm guessing it's no big deal to add a bool here, but we do make a lot of TaskPropertyInfos, so it might be worth checking.",
              "createdAt": "2023-01-04T23:38:32Z",
              "path": "src/Framework/TaskPropertyInfo.cs",
              "diffHunk": "@@ -52,6 +54,11 @@ public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool req\n         /// </summary>\n         public bool Required { get; private set; }\n \n+        /// <summary>\n+        /// This task parameter is required (analogous to the [Required] attribute)\n+        /// </summary>\n+        public bool AllowEmptyString { get; private set; }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}