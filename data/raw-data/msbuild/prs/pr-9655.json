{
  "number": 9655,
  "title": "Update Traits when environment has been changed",
  "body": "Fixes #9501\r\n\r\n### Context\r\nWhen the new environment is sent to msbuild node or msbuild server node, the environment is set up but the values in the Traits class are not updated. This leads to using a different configuration on the server or MSBuild node than on the main MSBuild node when the server or msbuild node was preserved from the previous builds.\r\n\r\n### Changes Made\r\nTogether with setting the new environment, re-create a Traits class instance to update the corresponding values.\r\nI bit of refactoring: there was a pattern in the code \"unset current environment and set a new one\", which is repeated in many places. \r\n\r\n### Testing\r\nManual tests, unit tests, exp VS insertion\r\n\r\n### Notes\r\nThis change is rather a work-around for the bigger problem of handling the environment properly in MSBuild nodes: the configuration sometimes is taken from the Traits and sometimes directly from environment variable. Also, as in this issue, sometimes code sets new environment variables but does not update the values in Traits (and sometimes it updates). We might consider fixing how we deal with configuration.",
  "state": "MERGED",
  "createdAt": "2024-01-17T16:22:48Z",
  "updatedAt": "2024-01-30T12:19:38Z",
  "closedAt": "2024-01-30T12:19:37Z",
  "mergedAt": "2024-01-30T12:19:37Z",
  "additions": 25,
  "deletions": 29,
  "changedFiles": 6,
  "headRefName": "update-traits",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "09dca1e464f9f18eeed9e605e18769569b417cb8",
          "message": "Add traits updates",
          "committedDate": "2024-01-17T16:03:29Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a4f147738336ecd45ac6f54453729a3acc20467",
          "message": "Update ChangeWaves.md",
          "committedDate": "2024-01-17T16:30:44Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88914af87798a4a3245dab7066cfa9c323dd4120",
          "message": "Merge branch 'main' into update-traits",
          "committedDate": "2024-01-17T16:43:42Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7b7381d0d7f98da57edc5919780c1ffdf455c893",
          "message": "Refactoring",
          "committedDate": "2024-01-19T11:59:33Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "230cbde6ec1a1a76aa2776ff844abe94da9b7e41",
          "message": "Merge branch 'update-traits' of https://github.com/AR-May/msbuild into update-traits",
          "committedDate": "2024-01-19T12:00:56Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5ff240388d3252c62b74215308475f07adc4a56",
          "message": "Fix tests",
          "committedDate": "2024-01-22T11:49:44Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c0490d09e334ecad02504f431c97d5d4575351b",
          "message": "Update comment",
          "committedDate": "2024-01-29T10:05:01Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Overall looks good - though the pattern \"clear pre-existing env variables not present in the Dictionary; set the env vars from the dictionary; refresh the Traits\" is on 3 different places - so it would be nice to extract single utility class and call it.\r\n\r\n(I know it's pre-existing code - but this is good opportunity to make it better)",
        "createdAt": "2024-01-17T16:29:47Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Overall looks good - though the pattern \"clear pre-existing env variables not present in the Dictionary; set the env vars from the dictionary; refresh the Traits\" is on 3 different places - so it would be nice to extract single utility class and call it.\r\n> \r\n> (I know it's pre-existing code - but this is good opportunity to make it better)\r\n\r\nI am considering doing that and place this code in CommunicationsUtilities indeed. First will wait for tests passing though, do not want spend time on that if this approach will be wrong.",
        "createdAt": "2024-01-17T16:39:56Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "The tests seem pass: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/522067. Refactored the code a bit and making this draft ready to review.",
        "createdAt": "2024-01-19T12:03:32Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> The changes seem reasonable. The test failures all seem to be on tests that apparently sometimes flakily fail, but I wonder if this made them more consistently fail on windows for some reason. ProjectStarted has no properties?\r\n\r\nApparently, I broke a test with my refactoring. There was one place where code unsets variables a bit differently than in `CommunicationsUtilities.SetEnvironment` and it matters (I thought initially it would not). Had to revert one change to pass tests. ",
        "createdAt": "2024-01-22T12:01:18Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "How about adding `bool updateTraits` argument to the `SetEnvironment` to avoid the need to repetitive calls (with exception of InProcNode)?",
              "createdAt": "2024-01-19T15:09:59Z",
              "path": "src/Build/BackEnd/Node/OutOfProcNode.cs",
              "diffHunk": "@@ -476,20 +476,9 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)\n             // If the node was never configured, this will be null.\n             if (_savedEnvironment != null)\n             {\n-                foreach (KeyValuePair<string, string> entry in CommunicationsUtilities.GetEnvironmentVariables())\n-                {\n-                    if (!_savedEnvironment.ContainsKey(entry.Key))\n-                    {\n-                        Environment.SetEnvironmentVariable(entry.Key, null);\n-                    }\n-                }\n-\n-                foreach (KeyValuePair<string, string> entry in _savedEnvironment)\n-                {\n-                    Environment.SetEnvironmentVariable(entry.Key, entry.Value);\n-                }\n+                CommunicationsUtilities.SetEnvironment(_savedEnvironment);\n+                Traits.UpdateFromEnvironment();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Apparently, pattern varies a bit so I sometimes can use `SetEnvironment` and sometimes not and sometimes I need to update traits and sometimes do not. So, I decided to keep them separate for time being.",
              "createdAt": "2024-01-22T11:58:55Z",
              "path": "src/Build/BackEnd/Node/OutOfProcNode.cs",
              "diffHunk": "@@ -476,20 +476,9 @@ private NodeEngineShutdownReason HandleShutdown(out Exception exception)\n             // If the node was never configured, this will be null.\n             if (_savedEnvironment != null)\n             {\n-                foreach (KeyValuePair<string, string> entry in CommunicationsUtilities.GetEnvironmentVariables())\n-                {\n-                    if (!_savedEnvironment.ContainsKey(entry.Key))\n-                    {\n-                        Environment.SetEnvironmentVariable(entry.Key, null);\n-                    }\n-                }\n-\n-                foreach (KeyValuePair<string, string> entry in _savedEnvironment)\n-                {\n-                    Environment.SetEnvironmentVariable(entry.Key, entry.Value);\n-                }\n+                CommunicationsUtilities.SetEnvironment(_savedEnvironment);\n+                Traits.UpdateFromEnvironment();",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Setting env var to null is deleting it. Since we are touching this comment we can state to intent here which is \"Delete all no longer set variables\"",
              "createdAt": "2024-01-29T09:58:28Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -377,7 +377,7 @@ internal static void SetEnvironment(IDictionary<string, string> newEnvironment)\n         {\n             if (newEnvironment != null)\n             {\n-                // First, empty out any new variables\n+                // First, empty out any old variables",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}