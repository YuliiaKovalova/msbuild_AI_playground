{
  "number": 10078,
  "title": "Add documentation about custom acquisition ",
  "body": "### Context\r\nAdd documentation about custom acquisition experience.\r\n\r\nDepends on: https://github.com/dotnet/msbuild/pull/10076",
  "state": "MERGED",
  "createdAt": "2024-04-26T14:26:57Z",
  "updatedAt": "2024-05-07T19:34:03Z",
  "closedAt": "2024-05-07T19:34:03Z",
  "mergedAt": "2024-05-07T19:34:03Z",
  "additions": 17,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/acq_documentation",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d06d1b942c4e0a87e7fc2bb6f7012c9e1d565e1c",
          "message": "Add intro about custom rules.",
          "committedDate": "2024-04-23T11:16:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d46b56caa3462ccf08b97ebac9ff3e9a1dab849a",
          "message": "Update BuildCheck-Architecture.md",
          "committedDate": "2024-04-25T14:18:20Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6dbf028fbb1df0d539d7a80a7dd56f783423c91a",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-04-29T07:27:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f056ba1ecf1846ad1118d8502cc2ac052d1f1afb",
          "message": "add info about third party assemblies",
          "committedDate": "2024-05-03T11:07:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebca2744ed5af9f19cbcfe7a30de5973f5c3e40b",
          "message": "Update BuildCheck-Architecture.md",
          "committedDate": "2024-05-07T17:13:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nTo streamline the creation of custom rules, a special [template](https://learn.microsoft.com/dotnet/core/tools/custom-templates) has been introduced.\r\n```",
              "createdAt": "2024-04-26T14:29:18Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -86,8 +86,22 @@ Planned model:\n \n # Acquisition\n \n-**TBD** - implementation details to be amended by @YuliiaKovalova\n+BuildCheck employs two distinct types of analyzers: inbox and custom. As a result, the acquisition and distribution processes vary.\n+Inbox rules are integrated into the MSBuild repository, while custom analyzers can be packaged as NuGet packages and detected by MSBuild provided they adhere to a specific structure. \n \n+To streamline the creation of custom rules, a special [template](https://learn.microsoft.com/en-us/dotnet/core/tools/custom-templates) has been introduced.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nAdditionally, the custom rule must use [`BuildAnalyzerRule`](https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/API/BuildAnalyzerRule.cs#L11C14-L11C31) as a parent class; otherwise, the system will not register it.\r\n```",
              "createdAt": "2024-04-26T14:29:46Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -86,8 +86,22 @@ Planned model:\n \n # Acquisition\n \n-**TBD** - implementation details to be amended by @YuliiaKovalova\n+BuildCheck employs two distinct types of analyzers: inbox and custom. As a result, the acquisition and distribution processes vary.\n+Inbox rules are integrated into the MSBuild repository, while custom analyzers can be packaged as NuGet packages and detected by MSBuild provided they adhere to a specific structure. \n \n+To streamline the creation of custom rules, a special [template](https://learn.microsoft.com/en-us/dotnet/core/tools/custom-templates) has been introduced.\n+To enable MSBuild to recognize a custom analyzer, it must invoke the intrinsic function `void RegisterAnalyzer(string path)`, which requires the path to the assembly as input. Therefore, it's essential for the user to ensure that the assembly exists in the specified location.\n+Additionally, the custom rule must use [BuildAnalyzerRule.cs](https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/API/BuildAnalyzerRule.cs#L11C14-L11C31) as a parent class; otherwise, the system will not register it.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If it does not have this base class, is there a clear error?",
              "createdAt": "2024-04-26T14:30:08Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -86,8 +86,22 @@ Planned model:\n \n # Acquisition\n \n-**TBD** - implementation details to be amended by @YuliiaKovalova\n+BuildCheck employs two distinct types of analyzers: inbox and custom. As a result, the acquisition and distribution processes vary.\n+Inbox rules are integrated into the MSBuild repository, while custom analyzers can be packaged as NuGet packages and detected by MSBuild provided they adhere to a specific structure. \n \n+To streamline the creation of custom rules, a special [template](https://learn.microsoft.com/en-us/dotnet/core/tools/custom-templates) has been introduced.\n+To enable MSBuild to recognize a custom analyzer, it must invoke the intrinsic function `void RegisterAnalyzer(string path)`, which requires the path to the assembly as input. Therefore, it's essential for the user to ensure that the assembly exists in the specified location.\n+Additionally, the custom rule must use [BuildAnalyzerRule.cs](https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/API/BuildAnalyzerRule.cs#L11C14-L11C31) as a parent class; otherwise, the system will not register it.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Link these?",
              "createdAt": "2024-04-26T14:31:42Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -86,8 +86,22 @@ Planned model:\n \n # Acquisition\n \n-**TBD** - implementation details to be amended by @YuliiaKovalova\n+BuildCheck employs two distinct types of analyzers: inbox and custom. As a result, the acquisition and distribution processes vary.\n+Inbox rules are integrated into the MSBuild repository, while custom analyzers can be packaged as NuGet packages and detected by MSBuild provided they adhere to a specific structure. \n \n+To streamline the creation of custom rules, a special [template](https://learn.microsoft.com/en-us/dotnet/core/tools/custom-templates) has been introduced.\n+To enable MSBuild to recognize a custom analyzer, it must invoke the intrinsic function `void RegisterAnalyzer(string path)`, which requires the path to the assembly as input. Therefore, it's essential for the user to ensure that the assembly exists in the specified location.\n+Additionally, the custom rule must use [BuildAnalyzerRule.cs](https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/API/BuildAnalyzerRule.cs#L11C14-L11C31) as a parent class; otherwise, the system will not register it.\n+\n+Examples of custom rules can be found in the end-to-end tests, showcasing various scenarios:\n+\n+1. Single Custom Rule Packaged as a NuGet Package: Demonstrates the implementation of a custom rule encapsulated within a NuGet package. This example illustrates the process of creating, packaging, and integrating a single custom rule into a project.\n+2. Project with Multiple Analyzers Referenced: Illustrates a project setup where multiple custom analyzers are referenced. This scenario is common in larger projects where multiple rule sets need to be enforced simultaneously.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It depends on the the e2e test PR, I plan to add the links once it is available it main.",
              "createdAt": "2024-04-29T07:27:10Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -86,8 +86,22 @@ Planned model:\n \n # Acquisition\n \n-**TBD** - implementation details to be amended by @YuliiaKovalova\n+BuildCheck employs two distinct types of analyzers: inbox and custom. As a result, the acquisition and distribution processes vary.\n+Inbox rules are integrated into the MSBuild repository, while custom analyzers can be packaged as NuGet packages and detected by MSBuild provided they adhere to a specific structure. \n \n+To streamline the creation of custom rules, a special [template](https://learn.microsoft.com/en-us/dotnet/core/tools/custom-templates) has been introduced.\n+To enable MSBuild to recognize a custom analyzer, it must invoke the intrinsic function `void RegisterAnalyzer(string path)`, which requires the path to the assembly as input. Therefore, it's essential for the user to ensure that the assembly exists in the specified location.\n+Additionally, the custom rule must use [BuildAnalyzerRule.cs](https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/API/BuildAnalyzerRule.cs#L11C14-L11C31) as a parent class; otherwise, the system will not register it.\n+\n+Examples of custom rules can be found in the end-to-end tests, showcasing various scenarios:\n+\n+1. Single Custom Rule Packaged as a NuGet Package: Demonstrates the implementation of a custom rule encapsulated within a NuGet package. This example illustrates the process of creating, packaging, and integrating a single custom rule into a project.\n+2. Project with Multiple Analyzers Referenced: Illustrates a project setup where multiple custom analyzers are referenced. This scenario is common in larger projects where multiple rule sets need to be enforced simultaneously.",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      }
    ]
  }
}