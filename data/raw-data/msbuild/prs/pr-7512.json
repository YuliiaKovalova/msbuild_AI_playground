{
  "number": 7512,
  "title": "[Opt-in] Parallelize Targets when building a solution",
  "body": "### Fixes\r\nhttps://github.com/dotnet/msbuild/issues/5072#issuecomment-578949753 \r\n\r\n### Context\r\n1) When building a SLN, a metaproj is used to represent the build behavior.  When there are multiple targets (ex clean;build), the current behavior is to run all of first Target in the projects, then run second Target.  To improve the parallelism, the solution can pass both target to the project.  Each project can start the second target without waiting for all of the first Target to finish.  \r\nWhen the feature is enabled via environment variable, MSBuildSolutionBatchTargets, Solution Generator will create a \"SlnProjectResolveProjectReference\" target to build all the project/targets.  All targets will depend on this new target.  \r\n\r\n2) Add support for \"SkipNonexistentProjects\" as a metadata in MSBuild task.  This allow the removal of it as a parameter during solution generation.  \r\n\r\n### Testing\r\nAdd unit tests.  \r\n\r\n\r\n### Before:\r\n![image](https://user-images.githubusercontent.com/19828377/161855880-163f0905-3c4d-42cd-9833-75e30b4af4d4.png)\r\n\r\n### After:\r\n![image](https://user-images.githubusercontent.com/19828377/161856132-65777c72-7993-4e5c-bae4-7967a6ff4172.png)\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2022-04-01T21:45:09Z",
  "updatedAt": "2024-02-22T22:28:30Z",
  "closedAt": "2022-07-18T22:42:38Z",
  "mergedAt": "2022-07-18T22:42:38Z",
  "additions": 427,
  "deletions": 51,
  "changedFiles": 7,
  "headRefName": "dev/yuehuang/main_solution",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "68e7509573c2aa4dae3af0fcdd589599456b0804",
          "message": "Add SolutionBatchTargets.  Add metadata pickup to SkipNonexistingProject property in MSBuild task.",
          "committedDate": "2022-03-29T22:57:13Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "430b926ec1c92dd6fe38ce62bc0d2dafcbc74524",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/yuehuang/main_solution",
          "committedDate": "2022-04-01T21:22:56Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5c7a793d9e32af23b0364eb325c37c40cdeb535",
          "message": "Move env to traits.  Added a negative case for SkipNonexistentProject",
          "committedDate": "2022-04-05T21:46:17Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72bbb81c8a7bbd30d6fcac72c5a908b367da8d7d",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/yuehuang/main_solution",
          "committedDate": "2022-04-18T16:15:21Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a461c1a43c124c0ebf9a61c77c82ee40f049a8c8",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/yuehuang/main_solution",
          "committedDate": "2022-05-09T21:03:55Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f563816bdef18773bf30299beb06ef255c90aab6",
          "message": "Add solution properties to MSBuild task call.",
          "committedDate": "2022-05-09T22:21:32Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e72ede08ec372bf81c152ad0e33e1671d6b9fad",
          "message": "Revert \"Add solution properties to MSBuild task call.\"\n\nThis reverts commit f563816bdef18773bf30299beb06ef255c90aab6.",
          "committedDate": "2022-05-09T22:25:32Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "955cc1571abd22eaeb41388ebcd2e8b6fe0055dd",
          "message": "Address feedbacks",
          "committedDate": "2022-06-09T23:29:01Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "704ffb50909621c042761dda7409fd3976ed2a5b",
          "message": "Renamed Nonexist to NonExist",
          "committedDate": "2022-06-28T20:49:54Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> When we talked about this problem, I expected something along the lines of synthesizing a target like\r\n> \r\n> ```\r\n> <MSBuild Projects=\"@(Projects)\" Targets=\"Foo;Bar\" />\r\n> ```\r\n> \r\n> Instead of the existing mechanism of synthesizing a `Foo` that calls all `Foo` and a `Bar` that calls all bar, then calling them in sequence.\r\n> \r\n> Is that viable?\r\n\r\nHow would the target interface with the entry point work? @rainersigwald ",
        "createdAt": "2022-04-18T15:51:47Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> How would the target interface with the entry point work?\r\n\r\nSorry, missed this. I don't think I understand the question.\r\n\r\nI was thinking of something like synthesizing a new target based on the `targetNames` passed to the `SolutionProjectGenerator` constructor, and having it be, basically,\r\n\r\n```xml\r\n  <Target Name=\"Build_A_B_C\">\r\n    <MSBuild BuildInParallel=\"True\"\r\n             SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\"\r\n             Projects=\"@(ProjectReference)\"\r\n             Targets=\"A;B;C\"\r\n             Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n```",
        "createdAt": "2022-04-26T15:09:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > How would the target interface with the entry point work?\r\n> \r\n> Sorry, missed this. I don't think I understand the question.\r\n> \r\n> I was thinking of something like synthesizing a new target based on the `targetNames` passed to the `SolutionProjectGenerator` constructor, and having it be, basically,\r\n> \r\n> ```\r\n>   <Target Name=\"Build_A_B_C\">\r\n>     <MSBuild BuildInParallel=\"True\"\r\n>              SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\"\r\n>              Projects=\"@(ProjectReference)\"\r\n>              Targets=\"A;B;C\"\r\n>              Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" />\r\n>   </Target>\r\n> ```\r\n\r\n@rainersigwald, it is doing creating a new single target with the MSBuild which invokes all targets.  The question is how would you expected the initial targets to invoke this new target?",
        "createdAt": "2022-04-26T15:23:08Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> * Can you elaborate on how metadata-`SkipNonexistentProjects` is tied to the solution-batching stuff?\r\n\r\nIt is related as the SkipNonexistentProjects is splitting the build into two batches.  This batch is serializing them which this will optimize away.  \r\n\r\n> * Looking at the metaproject, \r\n\r\nThis isn't actually needed as ProjectReference item already has those Properties as metadata.",
        "createdAt": "2022-05-09T22:26:09Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@rainersigwald Ping.",
        "createdAt": "2022-05-24T00:08:11Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@rainersigwald Ping.",
        "createdAt": "2022-07-18T19:22:25Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": ".ShouldContain? It'd be nice if most of these were shouldly-ified, but I don't care too much.",
              "createdAt": "2022-04-05T16:42:56Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -123,6 +123,156 @@ public void BuildProjectAsTarget()\n             }\n         }\n \n+        /// <summary>\n+        /// Build Solution with Multiple Targets (ex. Clean;Build;Custom).\n+        /// </summary>\n+        [Fact]\n+        public void BuildProjectWithMultipleTargets()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"classlib\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibFolder, \"classlib.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"Build\"\">\n+                      <Message Text=\"\"classlib.Build\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Clean\"\">\n+                      <Message Text=\"\"classlib.Clean\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Custom\"\">\n+                      <Message Text=\"\"classlib.Custom\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"simpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectFolder, \"simpleProject.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"Build\"\">\n+                      <Message Text=\"\"simpleProject.Build\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Clean\"\">\n+                      <Message Text=\"\"simpleProject.Clean\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Custom\"\">\n+                      <Message Text=\"\"simpleProject.Custom\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(folder, \"testFolder.sln\",\n+                    @\"\n+Microsoft Visual Studio Solution File, Format Version 12.00\n+# Visual Studio Version 16\n+VisualStudioVersion = 16.6.30114.105\n+MinimumVisualStudioVersion = 10.0.40219.1\n+Project(\"\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\"\") = \"\"simpleProject\"\", \"\"simpleProject\\simpleProject.csproj\"\", \"\"{AA52A05F-A9C0-4C89-9933-BF976A304C91}\"\"\n+EndProject\n+Project(\"\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\"\") = \"\"classlib\"\", \"\"classlib\\classlib.csproj\"\", \"\"{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}\"\"\n+EndProject\n+Global\n+\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n+\t\tDebug|x86 = Debug|x86\n+\tEndGlobalSection\n+\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n+\t\t{AA52A05F-A9C0-4C89-9933-BF976A304C91}.Debug|x86.ActiveCfg = Debug|x86\n+\t\t{AA52A05F-A9C0-4C89-9933-BF976A304C91}.Debug|x86.Build.0 = Debug|x86\n+\t\t{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}.Debug|x86.ActiveCfg = Debug|x86\n+\t\t{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}.Debug|x86.Build.0 = Debug|x86\n+\tEndGlobalSection\n+EndGlobal\n+                \");\n+\n+                string output = RunnerUtilities.ExecMSBuild(solutionFile.Path + \" /t:Clean;Build;Custom\", out bool success);\n+                success.ShouldBeTrue();\n+                output.IndexOf(\"classlib.Build\").ShouldBeGreaterThan(-1);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "switch to ShouldContain.",
              "createdAt": "2022-04-05T21:50:14Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -123,6 +123,156 @@ public void BuildProjectAsTarget()\n             }\n         }\n \n+        /// <summary>\n+        /// Build Solution with Multiple Targets (ex. Clean;Build;Custom).\n+        /// </summary>\n+        [Fact]\n+        public void BuildProjectWithMultipleTargets()\n+        {\n+            using (TestEnvironment testEnvironment = TestEnvironment.Create())\n+            {\n+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: true);\n+                TransientTestFolder classLibFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"classlib\"), createFolder: true);\n+                TransientTestFile classLibrary = testEnvironment.CreateFile(classLibFolder, \"classlib.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"Build\"\">\n+                      <Message Text=\"\"classlib.Build\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Clean\"\">\n+                      <Message Text=\"\"classlib.Clean\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Custom\"\">\n+                      <Message Text=\"\"classlib.Custom\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFolder simpleProjectFolder = testEnvironment.CreateFolder(Path.Combine(folder.Path, \"simpleProject\"), createFolder: true);\n+                TransientTestFile simpleProject = testEnvironment.CreateFile(simpleProjectFolder, \"simpleProject.csproj\",\n+                    @\"<Project>\n+                  <Target Name=\"\"Build\"\">\n+                      <Message Text=\"\"simpleProject.Build\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Clean\"\">\n+                      <Message Text=\"\"simpleProject.Clean\"\"/>\n+                  </Target>\n+                  <Target Name=\"\"Custom\"\">\n+                      <Message Text=\"\"simpleProject.Custom\"\"/>\n+                  </Target>\n+                  </Project>\n+                    \");\n+\n+                TransientTestFile solutionFile = testEnvironment.CreateFile(folder, \"testFolder.sln\",\n+                    @\"\n+Microsoft Visual Studio Solution File, Format Version 12.00\n+# Visual Studio Version 16\n+VisualStudioVersion = 16.6.30114.105\n+MinimumVisualStudioVersion = 10.0.40219.1\n+Project(\"\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\"\") = \"\"simpleProject\"\", \"\"simpleProject\\simpleProject.csproj\"\", \"\"{AA52A05F-A9C0-4C89-9933-BF976A304C91}\"\"\n+EndProject\n+Project(\"\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\"\") = \"\"classlib\"\", \"\"classlib\\classlib.csproj\"\", \"\"{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}\"\"\n+EndProject\n+Global\n+\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n+\t\tDebug|x86 = Debug|x86\n+\tEndGlobalSection\n+\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n+\t\t{AA52A05F-A9C0-4C89-9933-BF976A304C91}.Debug|x86.ActiveCfg = Debug|x86\n+\t\t{AA52A05F-A9C0-4C89-9933-BF976A304C91}.Debug|x86.Build.0 = Debug|x86\n+\t\t{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}.Debug|x86.ActiveCfg = Debug|x86\n+\t\t{80B8E6B8-E46D-4456-91B1-848FD35C4AB9}.Debug|x86.Build.0 = Debug|x86\n+\tEndGlobalSection\n+EndGlobal\n+                \");\n+\n+                string output = RunnerUtilities.ExecMSBuild(solutionFile.Path + \" /t:Clean;Build;Custom\", out bool success);\n+                success.ShouldBeTrue();\n+                output.IndexOf(\"classlib.Build\").ShouldBeGreaterThan(-1);",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you put this in a trait?",
              "createdAt": "2022-04-05T16:44:02Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -176,6 +186,7 @@ internal class SolutionProjectGenerator\n             _loggingService = loggingService;\n             _sdkResolverService = sdkResolverService ?? SdkResolverService.Instance;\n             _submissionId = submissionId;\n+            _batchProjectTargets = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBUILD_BATCHPROJECTTARGETS\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Moved to Traits.",
              "createdAt": "2022-04-05T21:50:33Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -176,6 +186,7 @@ internal class SolutionProjectGenerator\n             _loggingService = loggingService;\n             _sdkResolverService = sdkResolverService ?? SdkResolverService.Instance;\n             _submissionId = submissionId;\n+            _batchProjectTargets = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBUILD_BATCHPROJECTTARGETS\"));",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this converting between string and enum? That is, how is it better than just leaving it as an enum?",
              "createdAt": "2022-04-05T16:46:12Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -164,6 +169,9 @@ public string SkipNonexistentProjects\n             {\n                 switch (_skipNonexistentProjects)\n                 {\n+                    case SkipNonexistentProjectsBehavior.Undefined:",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Task Parameter are string, string[], itemgroup, or bool.  Task don't support enums as parameter.",
              "createdAt": "2022-04-05T21:19:00Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -164,6 +169,9 @@ public string SkipNonexistentProjects\n             {\n                 switch (_skipNonexistentProjects)\n                 {\n+                    case SkipNonexistentProjectsBehavior.Undefined:",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a little confusing. It looks like you're setting _skipNonexistentProjects to Undefined by default while trying to preserve the error-if-nonexistent behavior by resetting it here. Can we leave the default as Error and just adjust if we need to later?",
              "createdAt": "2022-04-05T16:49:12Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -324,7 +326,21 @@ public async Task<bool> ExecuteInternal()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;\n+                if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)\n+                {\n+                    if (TryParseSkipNonexistentProjects(project.GetMetadata(\"SkipNonexistentProjects\"), out SkipNonexistentProjectsBehavior behavior))\n+                    {\n+                        skipNonexistPropjects = behavior;\n+                    }\n+                    else\n+                    {\n+                        skipNonexistPropjects = SkipNonexistentProjectsBehavior.Error;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also, can you add a test for this if it doesn't already exist?",
              "createdAt": "2022-04-05T16:54:13Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -324,7 +326,21 @@ public async Task<bool> ExecuteInternal()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;\n+                if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)\n+                {\n+                    if (TryParseSkipNonexistentProjects(project.GetMetadata(\"SkipNonexistentProjects\"), out SkipNonexistentProjectsBehavior behavior))\n+                    {\n+                        skipNonexistPropjects = behavior;\n+                    }\n+                    else\n+                    {\n+                        skipNonexistPropjects = SkipNonexistentProjectsBehavior.Error;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Tasks general behavior is to allow Parameter to override the metadata behavior.  Thus, parameter needs default \"undefined\" value to distinguish as unset.\r\n\r\nTest are included in the PR, see MSBuild_Tests.cs",
              "createdAt": "2022-04-05T21:25:47Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -324,7 +326,21 @@ public async Task<bool> ExecuteInternal()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;\n+                if (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Undefined)\n+                {\n+                    if (TryParseSkipNonexistentProjects(project.GetMetadata(\"SkipNonexistentProjects\"), out SkipNonexistentProjectsBehavior behavior))\n+                    {\n+                        skipNonexistPropjects = behavior;\n+                    }\n+                    else\n+                    {\n+                        skipNonexistPropjects = SkipNonexistentProjectsBehavior.Error;",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like this was essentially copied from SolutionProjectGenerator\u2014is it possible to merge them? Are there major differences? Why are they separate in the first place?",
              "createdAt": "2022-04-05T17:01:00Z",
              "path": "src/Tasks/MSBuild.cs",
              "diffHunk": "@@ -289,7 +292,21 @@ public override bool Execute()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't know why there are two copies of MSBuild.cs and MSBuild_Tests.cs.\r\n\r\nWhen tests are running, they resolve to BackEnd.",
              "createdAt": "2022-04-05T21:28:44Z",
              "path": "src/Tasks/MSBuild.cs",
              "diffHunk": "@@ -289,7 +292,21 @@ public override bool Execute()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "The story here is that long ago, the `MSBuild` task was just a task that used the `IBuildEngine` APIs like any other task would be able to do. At some later time, as a performance optimization, the MSBuild task was pulled into the engine itself, and task resolution short-circuits to prefer that version.\r\n\r\nThe one in `Tasks` exists only because it was a public non-sealed type, so user types might have inherited from it. I generally wouldn't worry about adding new features to it, since it should be almost entirely dead code.",
              "createdAt": "2022-05-09T14:55:14Z",
              "path": "src/Tasks/MSBuild.cs",
              "diffHunk": "@@ -289,7 +292,21 @@ public override bool Execute()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                var skipNonexistProjects = _skipNonexistentProjects;\r\n```\r\n\r\n(and in the other clone, if you don't just undo that.)",
              "createdAt": "2022-06-06T19:13:08Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -324,7 +326,21 @@ public async Task<bool> ExecuteInternal()\n                     break;\n                 }\n \n-                if (FileSystems.Default.FileExists(projectPath) || (_skipNonexistentProjects == SkipNonexistentProjectsBehavior.Build))\n+                // Try to get the behavior from metadata if it is undefined.\n+                var skipNonexistPropjects = _skipNonexistentProjects;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need `batchBuildTargets` as a parameter? Can't we check the trait directly from within the function?",
              "createdAt": "2022-06-23T18:17:25Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1982,7 +2018,7 @@ private void AddValidateProjectsTarget(ProjectInstance traversalProject, List<Pr\n         /// <summary>\n         /// Creates the target used to build all of the references in the traversal project.\n         /// </summary>\n-        private static void AddTraversalReferencesTarget(ProjectInstance traversalProject, string targetName, string outputItem)\n+        private static void AddTraversalReferencesTarget(ProjectInstance traversalProject, string targetName, string outputItem, bool batchBuildTargets)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I personally like it the way it is.  If a change would to make this function into non-static use the private bool _batchBuildTargets..",
              "createdAt": "2022-06-24T21:12:51Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1982,7 +2018,7 @@ private void AddValidateProjectsTarget(ProjectInstance traversalProject, List<Pr\n         /// <summary>\n         /// Creates the target used to build all of the references in the traversal project.\n         /// </summary>\n-        private static void AddTraversalReferencesTarget(ProjectInstance traversalProject, string targetName, string outputItem)\n+        private static void AddTraversalReferencesTarget(ProjectInstance traversalProject, string targetName, string outputItem, bool batchBuildTargets)",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                var skipNonExistProjects = _skipNonExistentProjects;\r\n```\r\n\r\nIsn't this better?",
              "createdAt": "2022-06-26T09:12:58Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -327,20 +327,20 @@ public async Task<bool> ExecuteInternal()\n                 }\n \n                 // Try to get the behavior from metadata if it is undefined.\n-                var skipNonexistPropjects = _skipNonexistentProjects;\n+                var skipNonexistProjects = _skipNonexistentProjects;",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Renamed all but the public interface.",
              "createdAt": "2022-06-28T20:50:26Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs",
              "diffHunk": "@@ -327,20 +327,20 @@ public async Task<bool> ExecuteInternal()\n                 }\n \n                 // Try to get the behavior from metadata if it is undefined.\n-                var skipNonexistPropjects = _skipNonexistentProjects;\n+                var skipNonexistProjects = _skipNonexistentProjects;",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels like taking something global and making it local to every project. Is that wrong? I would've imagined properties would flow automatically from the metaproj down to each individual project, but its absence here makes me wonder if we should continue to leave it empty.",
              "createdAt": "2022-07-18T15:13:19Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1353,9 +1382,17 @@ private static void AddProjectBuildTask(ProjectInstance traversalProject, Projec\n             task.SetParameter(\"BuildInParallel\", \"True\");\n \n             task.SetParameter(\"ToolsVersion\", GetToolsVersionAttributeForDirectMSBuildTask());\n-            task.SetParameter(\"Properties\", GetPropertiesAttributeForDirectMSBuildTask(projectConfiguration));\n \n-            if (outputItem != null)\n+            if (projectConfiguration != null)\n+            {\n+                task.SetParameter(\"Properties\", GetPropertiesAttributeForDirectMSBuildTask(projectConfiguration));\n+            }\n+            else\n+            {\n+                task.SetParameter(\"Properties\", SolutionProperties);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@rainersigwald suggested to add it.\r\n\r\n> > This isn't actually needed as ProjectReference item already has those Properties as metadata.\r\n\r\n> I'd really like to leave this in case a user injects a target that changes the properties, since it's been done that way for the normal build targets for a very long time.",
              "createdAt": "2022-07-18T22:14:53Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -1353,9 +1382,17 @@ private static void AddProjectBuildTask(ProjectInstance traversalProject, Projec\n             task.SetParameter(\"BuildInParallel\", \"True\");\n \n             task.SetParameter(\"ToolsVersion\", GetToolsVersionAttributeForDirectMSBuildTask());\n-            task.SetParameter(\"Properties\", GetPropertiesAttributeForDirectMSBuildTask(projectConfiguration));\n \n-            if (outputItem != null)\n+            if (projectConfiguration != null)\n+            {\n+                task.SetParameter(\"Properties\", GetPropertiesAttributeForDirectMSBuildTask(projectConfiguration));\n+            }\n+            else\n+            {\n+                task.SetParameter(\"Properties\", SolutionProperties);",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      }
    ]
  }
}