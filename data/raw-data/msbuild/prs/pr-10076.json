{
  "number": 10076,
  "title": "Add e2e test for custom analyzer rules",
  "body": "### Context\r\nIn order to cover the full flow, in this tests we:\r\n1. Build the analyzer project(s) and package it/them into a NuGet package(s).\r\n2. Include a reference to the local package containing the rule(s) in the project that needs analysis (AnalysisCandidate) using a nuget.config file.\r\n3. Build AnalysisCandidate and verify the output for messages generated by the custom analyzers related to detecting custom rules.\r\nThe structure of the rules was generated using: https://github.com/dotnet/msbuild/tree/main/template_feed/Microsoft.AnalyzerTemplate\r\n\r\n+ instantiate missed BuildEventContext in BuildCheckConnectorLogger.cs",
  "state": "MERGED",
  "createdAt": "2024-04-25T10:14:22Z",
  "updatedAt": "2024-05-07T16:57:47Z",
  "closedAt": "2024-05-07T16:57:46Z",
  "mergedAt": "2024-05-07T16:57:46Z",
  "additions": 378,
  "deletions": 42,
  "changedFiles": 20,
  "headRefName": "dev/ykovalova/e2eTests_for_custom_rules",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3fb562c6ab226ecbb245d1a81116838c77691455",
          "message": "add tests infra",
          "committedDate": "2024-04-18T11:55:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a008efb321790667b3bde9637ba52f79e380a58",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/e2eTests_for_custom_rules",
          "committedDate": "2024-04-25T08:13:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efa1ae8cfbc8e7865a966504ef410e5f73160662",
          "message": "add e2e test for custom analyzer",
          "committedDate": "2024-04-25T10:13:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a8caff46dfc3e89f585354a3a8a389cd26e98294",
          "message": "fix test",
          "committedDate": "2024-04-25T12:56:12Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc29085b8ea8d44be2dae031e853ed4c5b9b5ec5",
          "message": "extend test with multiple packages case",
          "committedDate": "2024-04-25T13:53:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe527b283d97fcbda816cf5a0600f35cf20274d1",
          "message": "cleanup",
          "committedDate": "2024-04-25T13:58:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2d62e425d42b69f272dd597d368c75156d5317ee",
          "message": "fix warnings",
          "committedDate": "2024-04-25T14:37:09Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5de6c8391f863f9b5346d951f08544775a7aa8f",
          "message": "fix review comments",
          "committedDate": "2024-05-03T10:50:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3a8d0a9d3c91f4921e6df87d0ff0d45762a5357",
          "message": "Merge branch 'main' into dev/ykovalova/e2eTests_for_custom_rules",
          "committedDate": "2024-05-03T10:52:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "38e94360d6dcc6077ee96ccd9e93ad9b53b3d9ec",
          "message": "return missed code",
          "committedDate": "2024-05-03T11:30:44Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b2ff326ed17906a5669d23b78177c54dadd50ec",
          "message": "fix review comment",
          "committedDate": "2024-05-03T14:23:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5749d63b2ef2f0789f30e704994c324a115bea45",
          "message": "rename RegisterAnalyzer -> RegisterBuildCheck",
          "committedDate": "2024-05-07T11:55:53Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0fe2ba3b42fc90df75a25db5e81afc1a5949d9ee",
          "message": "fix review comment",
          "committedDate": "2024-05-07T16:11:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I like the idea of having a full-strength end-to-end-via-package test, but it feels very early for that to be checked in, and the package construction stuff is low-pri for me. Is now the right time?\r\n\r\nLet's discuss the concerns offline (@YuliiaKovalova, @rainersigwald) - I want to understand them better",
        "createdAt": "2024-04-27T12:30:00Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why use MSBuild from a package rather than from the repo?",
              "createdAt": "2024-04-26T17:52:41Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is demonstrating how the project would look like on customer side.\r\n\r\nWild idea (@YuliiaKovalova): should we consider creating the project during the test from the template (while injecting just the code file from the test assets)? Let's discuss before jumping to the work though",
              "createdAt": "2024-04-27T12:15:07Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "then we miss scenario for .net framework, because it doesn't support \"new\" command, to my best knowledge.",
              "createdAt": "2024-05-03T09:40:22Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this necessary?",
              "createdAt": "2024-04-26T17:55:54Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />\n+  </ItemGroup>\n+\n+  <Target Name=\"AddNuGetDlls\" BeforeTargets=\"_GetPackageFiles\">",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Consider adding the details to the internal doc (https://github.com/dotnet/msbuild/pull/10078)",
              "createdAt": "2024-04-27T12:09:12Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />\n+  </ItemGroup>\n+\n+  <Target Name=\"AddNuGetDlls\" BeforeTargets=\"_GetPackageFiles\">",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we fail if no nuget files were created?",
              "createdAt": "2024-04-27T11:50:40Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\n+    public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)\n+    {\n+        using (var env = TestEnvironment.Create())\n+        {\n+            var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);\n+\n+            if (candidatesNugetFullPaths.Any())",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this going to be correct for all execution scenarios of tests? Should we use [`Assembly.Location`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.location?view=net-8.0) instead?",
              "createdAt": "2024-04-27T12:26:28Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -27,6 +27,8 @@ public EndToEndTests(ITestOutputHelper output)\n         _env.WithEnvironmentInvariant();\n     }\n \n+    private static string TestAssetsRootPath { get; } = Path.Combine(AppContext.BaseDirectory, \"TestAssets\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we validate that the the build actually succeeded, (It is not part of the scenario, however to make sure that the custom analyzers does not affect the overall results), what do you think? ",
              "createdAt": "2024-04-30T10:03:20Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\n+    public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)\n+    {\n+        using (var env = TestEnvironment.Create())\n+        {\n+            var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);\n+\n+            if (candidatesNugetFullPaths.Any())\n+            {\n+                var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);\n+                AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);\n+\n+                string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                    $\"{Path.Combine(analysisCandidatePath, $\"{analysisCandidate}.csproj\")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d\",\n+                    out bool _);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleAnalyzersInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\r\n```\r\nPlease correct me If I'm wrong but from the code, I believe we are adding multiple analyzers with single rules",
              "createdAt": "2024-04-30T10:12:10Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "It's the case when we want to apply rules from different nuget packages",
              "createdAt": "2024-05-02T12:53:21Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Yes, I think you are right, I will rename, thank you :)",
              "createdAt": "2024-05-02T12:54:02Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shall we fail in case the node is null? Thinking about the way we could investigate the failed test, and it will be easier to understand if we fail here,  so the exception will clear indicate where and what went wrong.",
              "createdAt": "2024-04-30T10:23:19Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +135,91 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleRulesInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\n+    public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)\n+    {\n+        using (var env = TestEnvironment.Create())\n+        {\n+            var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);\n+\n+            if (candidatesNugetFullPaths.Any())\n+            {\n+                var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);\n+                AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);\n+\n+                string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                    $\"{Path.Combine(analysisCandidatePath, $\"{analysisCandidate}.csproj\")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d\",\n+                    out bool _);\n+\n+                foreach (string expectedRegisteredRule in expectedRegisteredRules)\n+                {\n+                    projectAnalysisBuildLog.ShouldContain($\"Custom analyzer rule: {expectedRegisteredRule} has been registered successfully.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private IList<string> BuildAnalyzerRules(TestEnvironment env, string[] customAnalyzerNames)\n+    {\n+        var candidatesNugetFullPaths = new List<string>();\n+\n+        foreach (var customAnalyzerName in customAnalyzerNames)\n+        {\n+            var candidateAnalysisProjectPath = Path.Combine(TestAssetsRootPath, customAnalyzerName, $\"{customAnalyzerName}.csproj\");\n+            string candidateAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                 $\"{candidateAnalysisProjectPath} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path}\", out bool success);\n+\n+            if (success)\n+            {\n+                var candidatesNugetPackageFullPath = Regex.Match(candidateAnalysisBuildLog, @\"Successfully created package '(.*?)'\").Groups[1].Value;\n+                candidatesNugetFullPaths.Add(candidatesNugetPackageFullPath);\n+            }\n+        }\n+\n+        return candidatesNugetFullPaths;\n+    }\n+\n+    private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath, IList<string> candidatesNugetPackageFullPaths)\n+    {\n+        var nugetTemplatePath = Path.Combine(analysisCandidatePath, \"nugetTemplate.config\");\n+\n+        var doc = new XmlDocument();\n+        doc.LoadXml(File.ReadAllText(nugetTemplatePath));\n+        if (doc.DocumentElement != null)\n+        {\n+            XmlNode? packageSourcesNode = doc.SelectSingleNode(\"//packageSources\");\n+            for (int i = 0; i < candidatesNugetPackageFullPaths.Count; i++)\n+            {\n+                AddPackageSource(doc, packageSourcesNode, $\"Key{i}\", Path.GetDirectoryName(candidatesNugetPackageFullPaths[i]) ?? string.Empty);\n+            }\n+\n+            doc.Save(Path.Combine(analysisCandidatePath, \"nuget.config\"));\n+        }\n+    }\n+\n+    private void AddPackageSource(XmlDocument doc, XmlNode? packageSourcesNode, string key, string value)\n+    {\n+        if (packageSourcesNode != null)\n+        {\n+            XmlElement addNode = doc.CreateElement(\"add\");\n+\n+            PopulateXmlAttribute(doc, addNode, \"key\", key);\n+            PopulateXmlAttribute(doc, addNode, \"value\", value);\n+\n+            packageSourcesNode.AppendChild(addNode);\n+        }\n+    }\n+\n+    private void PopulateXmlAttribute(XmlDocument doc, XmlNode node, string attributeName, string attributeValue)\n+    {\n+        if (node != null)\n+        {\n+            var attribute = doc.CreateAttribute(attributeName);\n+            attribute.Value = attributeValue;\n+            node.Attributes!.Append(attribute);\n+        }\n+    }",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The analyzer itself should not be in `lib`, so that adding a reference to this package doesn't put the analyzer itself in that projects references.",
              "createdAt": "2024-05-02T18:20:07Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer/CustomAnalyzer.csproj",
              "diffHunk": "@@ -0,0 +1,42 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <TargetFramework>netstandard2.0</TargetFramework>\n+    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n+    <IncludeBuildOutput>false</IncludeBuildOutput>\n+    <!-- The output structure was modified for msbuild development needs.-->\n+    <NoWarn>NU5101;NU5128</NoWarn>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <None Include=\"CustomAnalyzer.props\" Pack=\"true\" PackagePath=\"build\\CustomAnalyzer.props\" />\n+  </ItemGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"Microsoft.Build\" PrivateAssets=\"all\" IncludeInPackage=\"true\" Version=\"17.11.0-preview-24218-01\" />\n+  </ItemGroup>\n+\n+  <Target Name=\"AddNuGetDlls\" BeforeTargets=\"_GetPackageFiles\">\n+    <!-- Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.\n+       This produces a new list containing the DLL path and the \"IncludeInPackage\" metadata-->\n+    <JoinItems Left=\"@(ResolvedCompileFileDefinitions)\" LeftKey=\"NuGetPackageId\" LeftMetadata=\"*\" Right=\"@(PackageReference)\" RightKey=\"\" RightMetadata=\"*\" ItemSpecToUse=\"Left\">\n+      <Output TaskParameter=\"JoinResult\" ItemName=\"_PackagesToPack\" />\n+    </JoinItems>\n+\n+    <ItemGroup>\n+      <!-- Remove NETStandard DLLs -->\n+      <_PackagesToPack Remove=\"@(_PackagesToPack)\" />\n+    </ItemGroup>\n+\n+    <Message Importance=\"High\" Text=\"Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')\" />\n+\n+    <ItemGroup>\n+      <!-- Update the collection of items to pack with the DLLs from the NuGet packages -->\n+      <None Include=\"@(_PackagesToPack)\" Pack=\"true\" PackagePath=\"lib\" Visible=\"false\" />\n+\n+      <!-- Add the DLL produced by the current project to the NuGet package -->\n+      <None Include=\"$(OutputPath)\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"lib\" Visible=\"false\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we have a bug to rename this to `RegisterCheck` or `RegisterBuildCheck`?",
              "createdAt": "2024-05-06T18:14:45Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/CustomAnalyzer2/CustomAnalyzer2.props",
              "diffHunk": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<Project>\n+  <PropertyGroup>\n+\t  <MSBuildAnalyzer>$([MSBuild]::RegisterAnalyzer($(MSBuildThisFileDirectory)CustomAnalyzer2.dll))</MSBuildAnalyzer>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm still a bit skeptical of building these during the test, rather than as part of our repo build, but we can see if it causes any real stability/perf problems.",
              "createdAt": "2024-05-06T18:20:48Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +134,87 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleAnalyzersInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\n+    public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)\n+    {\n+        using (var env = TestEnvironment.Create())\n+        {\n+            var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);\n+\n+            candidatesNugetFullPaths.ShouldNotBeEmpty(\"Nuget package with custom analyzer was not generated or detected.\");\n+\n+            var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);\n+            AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);\n+\n+            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                $\"{Path.Combine(analysisCandidatePath, $\"{analysisCandidate}.csproj\")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d\",\n+                out bool successBuild);\n+            successBuild.ShouldBeTrue();\n+\n+            foreach (string expectedRegisteredRule in expectedRegisteredRules)\n+            {\n+                projectAnalysisBuildLog.ShouldContain($\"Custom analyzer rule: {expectedRegisteredRule} has been registered successfully.\");\n+            }\n+        }\n+    }\n+\n+    private IList<string> BuildAnalyzerRules(TestEnvironment env, string[] customAnalyzerNames)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Feels like if we're going to be doing this we should use `-getItem` instead of parsing the log :)",
              "createdAt": "2024-05-06T18:21:33Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -134,4 +134,87 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana\n             output.ShouldNotContain(\"BC0101\");\n         }\n     }\n+\n+    [Theory]\n+    [InlineData(new[] { \"CustomAnalyzer\" }, \"AnalysisCandidate\", new[] { \"CustomRule1\", \"CustomRule2\" })]\n+    [InlineData(new[] { \"CustomAnalyzer\", \"CustomAnalyzer2\" }, \"AnalysisCandidateWithMultipleAnalyzersInjected\", new[] { \"CustomRule1\", \"CustomRule2\", \"CustomRule3\" })]\n+    public void CustomAnalyzerTest(string[] customAnalyzerNames, string analysisCandidate, string[] expectedRegisteredRules)\n+    {\n+        using (var env = TestEnvironment.Create())\n+        {\n+            var candidatesNugetFullPaths = BuildAnalyzerRules(env, customAnalyzerNames);\n+\n+            candidatesNugetFullPaths.ShouldNotBeEmpty(\"Nuget package with custom analyzer was not generated or detected.\");\n+\n+            var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);\n+            AddCustomDataSourceToNugetConfig(analysisCandidatePath, candidatesNugetFullPaths);\n+\n+            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                $\"{Path.Combine(analysisCandidatePath, $\"{analysisCandidate}.csproj\")} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path} -analyze -verbosity:d\",\n+                out bool successBuild);\n+            successBuild.ShouldBeTrue();\n+\n+            foreach (string expectedRegisteredRule in expectedRegisteredRules)\n+            {\n+                projectAnalysisBuildLog.ShouldContain($\"Custom analyzer rule: {expectedRegisteredRule} has been registered successfully.\");\n+            }\n+        }\n+    }\n+\n+    private IList<string> BuildAnalyzerRules(TestEnvironment env, string[] customAnalyzerNames)\n+    {\n+        var candidatesNugetFullPaths = new List<string>();\n+\n+        foreach (var customAnalyzerName in customAnalyzerNames)\n+        {\n+            var candidateAnalysisProjectPath = Path.Combine(TestAssetsRootPath, customAnalyzerName, $\"{customAnalyzerName}.csproj\");\n+            string candidateAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(\n+                 $\"{candidateAnalysisProjectPath} /m:1 -nr:False -restore /p:OutputPath={env.CreateFolder().Path}\", out bool success);\n+            success.ShouldBeTrue();\n+\n+            var candidatesNugetPackageFullPath = Regex.Match(candidateAnalysisBuildLog, @\"Successfully created package '(.*?)'\").Groups[1].Value;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}