{
  "number": 11211,
  "title": "Log glob failures",
  "body": "Fixes #9609\r\n\r\n### Context\r\nLogging when glob expansions fail is useful for debugging.\r\nLog it quietly (as a message with low priority).\r\n\r\n### Changes Made\r\nFileMatcher.GetFiles returns a message if an exception occurs when matching files, it's callers log it.\r\n\r\n### Testing\r\nCovered by existing tests.\r\nFailures which would be logged are rare.\r\nTested manually triggering an exception in the critical section and the message displays in binlog:\r\n![image](https://github.com/user-attachments/assets/d528a028-4f8f-4343-b4b9-79b53f030188)\r\n\r\n### Notes\r\nFiguring out how to log is a bit tricky with some of the code being in static, some in singleton contexts and there are multiple logging mechanisms.",
  "state": "MERGED",
  "createdAt": "2025-01-02T19:37:55Z",
  "updatedAt": "2025-01-06T13:45:01Z",
  "closedAt": "2025-01-06T13:45:01Z",
  "mergedAt": "2025-01-06T13:45:01Z",
  "additions": 250,
  "deletions": 54,
  "changedFiles": 23,
  "headRefName": "dev/janpro/glob-fail-log",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "acffb7c189813a105b748e700a114b5addcdb9f8",
          "message": "implement loggging glob failures",
          "committedDate": "2025-01-02T19:35:42Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b91108081b713805236b4b1b1a873b92a66e297",
          "message": "refactor, null check",
          "committedDate": "2025-01-03T09:28:28Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42998e5b378f781cd0c2caefce7f7bde650e268a",
          "message": "adjustments",
          "committedDate": "2025-01-03T09:33:36Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd0c2da6152a9289d1390fd66b46cefe64820e40",
          "message": "Merge branch 'main' into dev/janpro/glob-fail-log",
          "committedDate": "2025-01-03T09:35:03Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9162dd310ba1a7f2893d1f5aa73c41a1e94596f5",
          "message": "keep method without logging in the public API",
          "committedDate": "2025-01-03T11:26:48Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "852058a2181626cba822a2661fe699cb6b05f106",
          "message": "Merge branch 'dev/janpro/glob-fail-log' of https://github.com/JanProvaznik/msbuild into dev/janpro/glob-fail-log",
          "committedDate": "2025-01-03T11:27:07Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "521bd680cebc8e7b7735ab9408496a4dc598b122",
          "message": "address feedback, refactor nullables",
          "committedDate": "2025-01-03T14:53:36Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "It looks good, I have several nit comments  and a point for discussion for the tuple usage.",
        "createdAt": "2025-01-03T12:09:22Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "please extend the comment to include new returning data",
              "createdAt": "2025-01-03T11:54:37Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2362,7 +2363,7 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n         /// <param name=\"filespecUnescaped\">Get files that match the given file spec.</param>\n         /// <param name=\"excludeSpecsUnescaped\">Exclude files that match this file spec.</param>\n         /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I am wondering what ex.ToString() returns here if any inner exceptions are thrown?\r\nCheck the comment on the line 2595 ",
              "createdAt": "2025-01-03T11:56:43Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2594,14 +2595,23 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n                 // Flatten to get exceptions than are thrown inside a nested Parallel.ForEach\n                 if (ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException))\n                 {\n-                    return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);\n+                    return (\n+                        CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped),\n+                        trackSearchAction,\n+                        trackExcludeFileSpec,\n+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"GlobExpansionFailed\", filespecUnescaped, ex.ToString()));",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "The string representation of AggregateException contains stack traces and names of all inner exceptions.",
              "createdAt": "2025-01-03T12:27:14Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2594,14 +2595,23 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n                 // Flatten to get exceptions than are thrown inside a nested Parallel.ForEach\n                 if (ex.Flatten().InnerExceptions.All(ExceptionHandling.IsIoRelatedException))\n                 {\n-                    return (CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped), trackSearchAction, trackExcludeFileSpec);\n+                    return (\n+                        CreateArrayWithSingleItemIfNotExcluded(filespecUnescaped, excludeSpecsUnescaped),\n+                        trackSearchAction,\n+                        trackExcludeFileSpec,\n+                        ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"GlobExpansionFailed\", filespecUnescaped, ex.ToString()));",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe this exception should be localized too.",
              "createdAt": "2025-01-03T12:00:11Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -332,7 +332,27 @@ private static string[] GetFileList(\n                     // as a relative path, we will get back a bunch of relative paths.\n                     // If the filespec started out as an absolute path, we will get\n                     // back a bunch of absolute paths\n-                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+                    (fileList, _, _, string globFailure) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+\n+                    // log globing failure with the present logging mechanism\n+                    if (globFailure != null)\n+                    {\n+                        switch (loggingMechanism)\n+                        {\n+                            case TargetLoggingContext targetLoggingContext:\n+                                targetLoggingContext.LogCommentFromText(MessageImportance.Low, globFailure);\n+                                break;\n+                            case ILoggingService loggingService:\n+                                loggingService.LogCommentFromText(buildEventContext, MessageImportance.Low, globFailure);\n+                                break;\n+                            case EvaluationLoggingContext evaluationLoggingContext:\n+                                evaluationLoggingContext.LogCommentFromText(MessageImportance.Low, globFailure);\n+                                break;\n+                            default:\n+                                throw new InternalErrorException($\"Logging type {loggingMechanism.GetType()} is not understood by {nameof(GetFileList)}.\");",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks concerning to have this tuple growing.\r\nShould we wrap it with readable struct? @JanKrivanek ?",
              "createdAt": "2025-01-03T12:03:57Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -332,7 +332,27 @@ private static string[] GetFileList(\n                     // as a relative path, we will get back a bunch of relative paths.\n                     // If the filespec started out as an absolute path, we will get\n                     // back a bunch of absolute paths\n-                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+                    (fileList, _, _, string globFailure) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "~~We could also get rid of the 2nd and 3rd parameter altogether from the internal API. FileMatcher is `internal` and they're not used anywhere. Any reason not to do that?~~ ",
              "createdAt": "2025-01-03T12:53:39Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -332,7 +332,27 @@ private static string[] GetFileList(\n                     // as a relative path, we will get back a bunch of relative paths.\n                     // If the filespec started out as an absolute path, we will get\n                     // back a bunch of absolute paths\n-                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+                    (fileList, _, _, string globFailure) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "There in fact is a reason: tests use them and there is no easy way to refactor if we want to test inner behavior of file matching, we need an `internal` method returning this information. Unsure if struct would be helpful.",
              "createdAt": "2025-01-03T14:59:21Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -332,7 +332,27 @@ private static string[] GetFileList(\n                     // as a relative path, we will get back a bunch of relative paths.\n                     // If the filespec started out as an absolute path, we will get\n                     // back a bunch of absolute paths\n-                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+                    (fileList, _, _, string globFailure) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Since this is a private function and it is used on testing I think we can let this be as it is right and and maybe make an issue to improve / refactor this area with the tests in mind.",
              "createdAt": "2025-01-06T09:17:41Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -332,7 +332,27 @@ private static string[] GetFileList(\n                     // as a relative path, we will get back a bunch of relative paths.\n                     // If the filespec started out as an absolute path, we will get\n                     // back a bunch of absolute paths\n-                    (fileList, _, _) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);\n+                    (fileList, _, _, string globFailure) = fileMatcher.GetFiles(directoryUnescaped, filespecUnescaped, excludeSpecsUnescaped);",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "can we return nullable here?",
              "createdAt": "2025-01-03T12:04:43Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1903,16 +1903,16 @@ public TaskOptions(int maxTasks)\n         /// <param name=\"projectDirectoryUnescaped\">The project directory.</param>\n         /// <param name=\"filespecUnescaped\">Get files that match the given file spec.</param>\n         /// <param name=\"excludeSpecsUnescaped\">Exclude files that match this file spec.</param>\n-        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>\n-        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles(\n+        /// <returns>The search action, array of files, Exclude file spec (if applicable), and glob failure message (if applicable) .</returns>\n+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec, string GlobFailure) GetFiles(",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "if we have this tuple wrapped with a class/structure, we would avoid having these nulls exposed, but let's hear from others @maridematte / @SimaTian / @JanKrivanek ",
              "createdAt": "2025-01-03T12:06:20Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2377,15 +2378,15 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n \n             if (action == SearchAction.ReturnEmptyList)\n             {\n-                return ([], action, string.Empty);\n+                return ([], action, string.Empty, null);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "`readonly record struct` would be nice, but I do not see it as a big deal",
              "createdAt": "2025-01-03T17:14:00Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2377,15 +2378,15 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n \n             if (action == SearchAction.ReturnEmptyList)\n             {\n-                return ([], action, string.Empty);\n+                return ([], action, string.Empty, null);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I'd like to avoid the `#enable nullable` if possible. If I remember correctly there were a few PRs that were trying to remove those from the code.",
              "createdAt": "2025-01-06T09:28:06Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2377,15 +2378,15 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n \n             if (action == SearchAction.ReturnEmptyList)\n             {\n-                return ([], action, string.Empty);\n+                return ([], action, string.Empty, null);",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "can be internal?",
              "createdAt": "2025-01-03T12:07:45Z",
              "path": "src/Utilities/TrackedDependencies/TrackedDependencies.cs",
              "diffHunk": "@@ -20,11 +20,12 @@ public static class TrackedDependencies\n #pragma warning disable format // region formatting is different in net7.0 and net472, and cannot be fixed for both\n         #region Methods\n         /// <summary>\n-        /// Expand wildcards in the item list.\n+        /// Expand wildcards in the item list and log glob failures.\n         /// </summary>\n         /// <param name=\"expand\"></param>\n+        /// <param name=\"log\">For logging glob failures.</param>\n         /// <returns>Array of items expanded</returns>\n-        public static ITaskItem[] ExpandWildcards(ITaskItem[] expand)\n+        public static ITaskItem[] ExpandWildcards(ITaskItem[] expand, TaskLoggingHelper log)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "please explain when log can be null",
              "createdAt": "2025-01-03T12:08:17Z",
              "path": "src/Utilities/TrackedDependencies/TrackedDependencies.cs",
              "diffHunk": "@@ -20,11 +20,12 @@ public static class TrackedDependencies\n #pragma warning disable format // region formatting is different in net7.0 and net472, and cannot be fixed for both\n         #region Methods\n         /// <summary>\n-        /// Expand wildcards in the item list.\n+        /// Expand wildcards in the item list and log glob failures.\n         /// </summary>\n         /// <param name=\"expand\"></param>\n+        /// <param name=\"log\">For logging glob failures.</param>",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "please make nullable if possible",
              "createdAt": "2025-01-03T12:08:35Z",
              "path": "src/Utilities/TrackedDependencies/TrackedDependencies.cs",
              "diffHunk": "@@ -20,11 +20,12 @@ public static class TrackedDependencies\n #pragma warning disable format // region formatting is different in net7.0 and net472, and cannot be fixed for both\n         #region Methods\n         /// <summary>\n-        /// Expand wildcards in the item list.\n+        /// Expand wildcards in the item list and log glob failures.\n         /// </summary>\n         /// <param name=\"expand\"></param>\n+        /// <param name=\"log\">For logging glob failures.</param>\n         /// <returns>Array of items expanded</returns>\n-        public static ITaskItem[] ExpandWildcards(ITaskItem[] expand)\n+        public static ITaskItem[] ExpandWildcards(ITaskItem[] expand, TaskLoggingHelper log)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we add nullable here I think it is a good idea to add a null check so we don't fail weirdly on this one.",
              "createdAt": "2025-01-06T09:25:42Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1896,23 +1896,24 @@ public TaskOptions(int maxTasks)\n             public int MaxTasksPerIteration;\n         }\n \n+#nullable enable\n         /// <summary>\n         /// Given a filespec, find the files that match.\n         /// Will never throw IO exceptions: if there is no match, returns the input verbatim.\n         /// </summary>\n         /// <param name=\"projectDirectoryUnescaped\">The project directory.</param>\n         /// <param name=\"filespecUnescaped\">Get files that match the given file spec.</param>\n         /// <param name=\"excludeSpecsUnescaped\">Exclude files that match this file spec.</param>\n-        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>\n-        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles(\n-            string projectDirectoryUnescaped,\n+        /// <returns>The search action, array of files, Exclude file spec (if applicable), and glob failure message (if applicable) .</returns>\n+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec, string? GlobFailure) GetFiles(\n+            string? projectDirectoryUnescaped,",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Do you mean null check for projectDirectoryUnescaped? It is validly called with null in 2 places, that's why I annotated it. There is no change in behavior, only annotation.",
              "createdAt": "2025-01-06T10:35:12Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1896,23 +1896,24 @@ public TaskOptions(int maxTasks)\n             public int MaxTasksPerIteration;\n         }\n \n+#nullable enable\n         /// <summary>\n         /// Given a filespec, find the files that match.\n         /// Will never throw IO exceptions: if there is no match, returns the input verbatim.\n         /// </summary>\n         /// <param name=\"projectDirectoryUnescaped\">The project directory.</param>\n         /// <param name=\"filespecUnescaped\">Get files that match the given file spec.</param>\n         /// <param name=\"excludeSpecsUnescaped\">Exclude files that match this file spec.</param>\n-        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>\n-        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFiles(\n-            string projectDirectoryUnescaped,\n+        /// <returns>The search action, array of files, Exclude file spec (if applicable), and glob failure message (if applicable) .</returns>\n+        internal (string[] FileList, SearchAction Action, string ExcludeFileSpec, string? GlobFailure) GetFiles(\n+            string? projectDirectoryUnescaped,",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same as previous ones, nullable with a null check since we do not expect things to actually be null here.",
              "createdAt": "2025-01-06T09:26:37Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -2354,18 +2357,19 @@ private static string[] CreateArrayWithSingleItemIfNotExcluded(string filespecUn\n             return [filespecUnescaped];\n         }\n \n+#nullable enable\n         /// <summary>\n         /// Given a filespec, find the files that match.\n         /// Will never throw IO exceptions: if there is no match, returns the input verbatim.\n         /// </summary>\n         /// <param name=\"projectDirectoryUnescaped\">The project directory.</param>\n         /// <param name=\"filespecUnescaped\">Get files that match the given file spec.</param>\n         /// <param name=\"excludeSpecsUnescaped\">Exclude files that match this file spec.</param>\n-        /// <returns>The search action, array of files, and Exclude file spec (if applicable).</returns>\n-        private (string[] FileList, SearchAction Action, string ExcludeFileSpec) GetFilesImplementation(\n-            string projectDirectoryUnescaped,\n+        /// <returns>The search action, array of files, Exclude file spec (if applicable), and glob failure message (if applicable).</returns>\n+        private (string[] FileList, SearchAction Action, string ExcludeFileSpec, string? globFailureEvent) GetFilesImplementation(",
              "author": {
                "login": "maridematte"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this action just never used anywhere? ",
              "createdAt": "2025-01-06T09:29:50Z",
              "path": "src/Tasks/CreateItem.cs",
              "diffHunk": "@@ -137,11 +138,10 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab\n         /// <summary>\n         /// Expand wildcards in the item list.\n         /// </summary>\n-        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandWildcards(ITaskItem[] expand, string attributeType)\n+        private (ITaskItem[]? Element, bool NoLoggedErrors) TryExpandWildcards(ITaskItem[]? expand, string attributeType)\n         {\n             // Used to detect and log drive enumerating wildcard patterns.\n             string[] files;\n-            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Yes.",
              "createdAt": "2025-01-06T10:35:37Z",
              "path": "src/Tasks/CreateItem.cs",
              "diffHunk": "@@ -137,11 +138,10 @@ private List<ITaskItem> CreateOutputItems(Dictionary<string, string> metadataTab\n         /// <summary>\n         /// Expand wildcards in the item list.\n         /// </summary>\n-        private (ITaskItem[] Element, bool NoLoggedErrors) TryExpandWildcards(ITaskItem[] expand, string attributeType)\n+        private (ITaskItem[]? Element, bool NoLoggedErrors) TryExpandWildcards(ITaskItem[]? expand, string attributeType)\n         {\n             // Used to detect and log drive enumerating wildcard patterns.\n             string[] files;\n-            FileMatcher.SearchAction action = FileMatcher.SearchAction.None;",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      }
    ]
  }
}