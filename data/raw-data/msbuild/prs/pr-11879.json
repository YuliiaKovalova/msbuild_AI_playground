{
  "number": 11879,
  "title": "Change to report the name of attribute type instead of the index when\u2026",
  "body": "Fixes #\r\nFix the issue https://github.com/dotnet/msbuild/issues/10007 the message not display the name of the attribute type whose definition it did not find \r\n\r\n### Context\r\nWhen using the MSBuild with WriteCodeFragment in .csproj file, if the positional constructor parameters, use metadata names that resemble _Parameter1, _Parameter2 and the Attribute cannot found, the message display \"Could not infer the type of parameter \"#1\" because the attribute type is unknown. The value will be treated as a string\" instead of the name of the parameters\"\r\n\r\n### Changes Made\r\nMake the message display the name of the parameters instead of the index\r\nAdd a UnitTest for this case\r\n\r\n### Testing\r\nBuild a .csproj file with WriteCodeFragment and using an Attribute cannot found with the positional constructor parameters\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-22T02:30:54Z",
  "updatedAt": "2025-05-27T14:04:53Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 23,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "dev/huulinhnguyen/issue10007",
  "isDraft": false,
  "author": {
    "login": "huulinhnguyen-dev"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c188e5594111749f5ebc87b7338414900f5522b8",
          "message": "Change to report the name of attribute type instead of the index when the definition cannot find",
          "committedDate": "2025-05-22T02:28:01Z",
          "author": {
            "name": "huulinh99",
            "email": "huulinhnguyen99@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28b8a5a7e8373a8acf267a21c246252ea3aa3893",
          "message": "Add unit test for the issue and update the logic code",
          "committedDate": "2025-05-22T08:31:33Z",
          "author": {
            "name": "huulinh99",
            "email": "huulinhnguyen99@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e421c1bdc44f0f6b3130a1626ef7e45d52c196c4",
          "message": "Remove unused space",
          "committedDate": "2025-05-22T08:32:46Z",
          "author": {
            "name": "huulinh99",
            "email": "huulinhnguyen99@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad642d9bdb158d62238049d9db27f858aa39531f",
          "message": "Update base on the comment\n\nCo-authored-by: Tomas Bartonek <tom.bartonek@volny.cz>",
          "committedDate": "2025-05-26T07:42:03Z",
          "author": {
            "name": "huulinh99",
            "email": "43189610+huulinh99@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe that the `/* back to 1 based */` comment is obsolete due to this change.\r\n```suggestion\r\n                                parameter.PositionalParameterName); \r\n```",
              "createdAt": "2025-05-26T07:40:54Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -449,7 +449,7 @@ private bool AddArguments(\n                             value = ConvertParameterValueToInferredType(\n                                 constructorParameterTypes[i],\n                                 parameter.Value,\n-                                $\"#{i + 1}\"); /* back to 1 based */\n+                                parameter.PositionalParameterName); /* back to 1 based */",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Thank you so much for your comment. Resolved",
              "createdAt": "2025-05-26T07:42:48Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -449,7 +449,7 @@ private bool AddArguments(\n                             value = ConvertParameterValueToInferredType(\n                                 constructorParameterTypes[i],\n                                 parameter.Value,\n-                                $\"#{i + 1}\"); /* back to 1 based */\n+                                parameter.PositionalParameterName); /* back to 1 based */",
              "author": {
                "login": "huulinhnguyen-dev"
              }
            }
          ]
        }
      }
    ]
  }
}