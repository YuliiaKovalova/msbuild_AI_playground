{
  "number": 5950,
  "title": "Have ProjectInSolution.AbsolutePath return a normalized path",
  "body": "This change updates `ProjectInSolution.AbsolutePath` to return a normalized path.  At the moment it simply returns the result of a `Path.Combine()` which leaves `..\\` path segments in place and does not contain OS-specific path separators.\r\n\r\nFixes #5949 and https://github.com/NuGet/Home/issues/10307",
  "state": "MERGED",
  "createdAt": "2020-12-09T19:29:56Z",
  "updatedAt": "2020-12-16T17:08:59Z",
  "closedAt": "2020-12-16T17:08:59Z",
  "mergedAt": "2020-12-16T17:08:58Z",
  "additions": 397,
  "deletions": 343,
  "changedFiles": 5,
  "headRefName": "fix-projectinsolution-absolutepath",
  "isDraft": false,
  "author": {
    "login": "jeffkl"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1379f4ec590d7b7ca8d5e551a595fa3c42e393bc",
          "message": "Update ProjectInSolution.AbsolutePath to return a normalized path",
          "committedDate": "2020-12-15T16:46:43Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc8e5cfdf5c1cdf444f141d9d6f019c0b0a059f3",
          "message": "Migrate Microsoft.Build.UnitTests.Construction.SolutionFile_Tests.cs to Shouldly!",
          "committedDate": "2020-12-15T16:46:58Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We have an overload to do this \r\n```suggestion\r\n                return FileUtilities.NormalizePath(ParentSolution.SolutionFileDirectory, RelativePath);\r\n```",
              "createdAt": "2020-12-09T19:34:53Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -162,7 +162,18 @@ internal set\n         /// <summary>\n         /// Returns the absolute path for this project\n         /// </summary>\n-        public string AbsolutePath => Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath);\n+        public string AbsolutePath\n+        {\n+            get\n+            {\n+                if (string.IsNullOrWhiteSpace(ParentSolution?.SolutionFileDirectory))\n+                {\n+                    return RelativePath;\n+                }\n+\n+                return FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks will call that.  This adds some protection from an exception in Path.Combine() in some cases ParentSolution.SolutionFileDirectory is null, specifically in our unit tests.  I figured I'd add this new protection as part of this fix.  Do you think I should leave it as-is?",
              "createdAt": "2020-12-09T19:37:15Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -162,7 +162,18 @@ internal set\n         /// <summary>\n         /// Returns the absolute path for this project\n         /// </summary>\n-        public string AbsolutePath => Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath);\n+        public string AbsolutePath\n+        {\n+            get\n+            {\n+                if (string.IsNullOrWhiteSpace(ParentSolution?.SolutionFileDirectory))\n+                {\n+                    return RelativePath;\n+                }\n+\n+                return FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath));",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Adding protection for that case makes sense to me--not sure if the public API makes it easy to pass an in-memory sln but don't see why that couldn't be done, so guarding against it makes sense, especially if we already hit it in tests.",
              "createdAt": "2020-12-09T19:46:18Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -162,7 +162,18 @@ internal set\n         /// <summary>\n         /// Returns the absolute path for this project\n         /// </summary>\n-        public string AbsolutePath => Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath);\n+        public string AbsolutePath\n+        {\n+            get\n+            {\n+                if (string.IsNullOrWhiteSpace(ParentSolution?.SolutionFileDirectory))\n+                {\n+                    return RelativePath;\n+                }\n+\n+                return FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'll show up to tomorrow's PR review meeting to discuss, there's some weirdness going on :/",
              "createdAt": "2020-12-10T16:49:44Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -162,7 +162,18 @@ internal set\n         /// <summary>\n         /// Returns the absolute path for this project\n         /// </summary>\n-        public string AbsolutePath => Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath);\n+        public string AbsolutePath\n+        {\n+            get\n+            {\n+                if (string.IsNullOrWhiteSpace(ParentSolution?.SolutionFileDirectory))\n+                {\n+                    return RelativePath;\n+                }\n+\n+                return FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, RelativePath));",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you think setting AbsolutePath should rather be in the getter of AbsolutePath? Avoid extra work if they only use RelativePath.",
              "createdAt": "2020-12-14T15:38:04Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -152,17 +152,20 @@ internal set\n                 // Avoid loading System.Runtime.InteropServices.RuntimeInformation in full-framework\n                 // cases. It caused https://github.com/NuGet/Home/issues/6918.\n                 _relativePath = value;\n+\n+                AbsolutePath = Path.GetFullPath(Path.Combine(ParentSolution.SolutionFileDirectory, _relativePath));\n #else\n-                _relativePath = FileUtilities.MaybeAdjustFilePath(value,\n-                                                    baseDirectory:ParentSolution.SolutionFileDirectory ?? String.Empty);\n+                _relativePath = FileUtilities.MaybeAdjustFilePath(value, ParentSolution.SolutionFileDirectory);\n+\n+                AbsolutePath = FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, _relativePath));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah I might as well.  Especially if it throws an exception for whatever reason it would be confusing to be accessing the RelativePath property and get an exception about AbsolutePath",
              "createdAt": "2020-12-14T18:13:53Z",
              "path": "src/Build/Construction/Solution/ProjectInSolution.cs",
              "diffHunk": "@@ -152,17 +152,20 @@ internal set\n                 // Avoid loading System.Runtime.InteropServices.RuntimeInformation in full-framework\n                 // cases. It caused https://github.com/NuGet/Home/issues/6918.\n                 _relativePath = value;\n+\n+                AbsolutePath = Path.GetFullPath(Path.Combine(ParentSolution.SolutionFileDirectory, _relativePath));\n #else\n-                _relativePath = FileUtilities.MaybeAdjustFilePath(value,\n-                                                    baseDirectory:ParentSolution.SolutionFileDirectory ?? String.Empty);\n+                _relativePath = FileUtilities.MaybeAdjustFilePath(value, ParentSolution.SolutionFileDirectory);\n+\n+                AbsolutePath = FileUtilities.NormalizePath(Path.Combine(ParentSolution.SolutionFileDirectory, _relativePath));",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n                    // Store the directory of the file, as the current directory may change while we are processing the file.\r\n```",
              "createdAt": "2020-12-14T15:38:41Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -210,6 +210,9 @@ internal string FullPath\n                 {\n                     _solutionFile = value;\n                     _solutionFilter = null;\n+\n+                    // Store the directory of the file as the current directory may change while we are processes the file",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also, can you remove the comment on the setter?",
              "createdAt": "2020-12-14T15:42:16Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -210,6 +210,9 @@ internal string FullPath\n                 {\n                     _solutionFile = value;\n                     _solutionFilter = null;\n+\n+                    // Store the directory of the file as the current directory may change while we are processes the file",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry I just copied this from here: https://github.com/dotnet/msbuild/blob/master/src/Build/Construction/Solution/SolutionFile.cs#L477-L478\r\n\r\nThe problem with the unit tests hitting NullRefs was because the SolutionFileDirectory is only set during parse.  But our unit tests don't always parse an entire solution as some of them only parse single lines so the SolutionFileDirectory property doesn't get set.  So I replicated setting this property here and copied the comment along with the line.  Should I just delete the comment?",
              "createdAt": "2020-12-14T18:13:10Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -210,6 +210,9 @@ internal string FullPath\n                 {\n                     _solutionFile = value;\n                     _solutionFilter = null;\n+\n+                    // Store the directory of the file as the current directory may change while we are processes the file",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "\u00af\\\\_(\u30c4)_/\u00af\r\n\r\nI didn't find anything that validated the comment, but that doesn't mean there was nothing to find. It's probably just out-of-date, so yes?",
              "createdAt": "2020-12-14T20:17:40Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -210,6 +210,9 @@ internal string FullPath\n                 {\n                     _solutionFile = value;\n                     _solutionFilter = null;\n+\n+                    // Store the directory of the file as the current directory may change while we are processes the file",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // Store the directory of the file, as the current directory may change while we are processing the file.\r\n```",
              "createdAt": "2020-12-14T15:39:59Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -381,6 +384,10 @@ private void ParseSolutionFilter(string solutionFilterFile)\n                         _solutionFile\n                     );\n                 }\n+\n+                // Store the directory of the file as the current directory may change while we are processes the file",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Have you found cases when the current directory changes while processing the solution file? I couldn't find a public-facing way to change directory between where it is current set and where you are now setting it.",
              "createdAt": "2020-12-14T16:04:21Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -475,8 +482,6 @@ internal void ParseSolutionFile()\n             {\n                 // Open the file\n                 fileStream = File.OpenRead(_solutionFile);\n-                // Store the directory of the file as the current directory may change while we are processes the file\n-                SolutionFileDirectory = Path.GetDirectoryName(_solutionFile);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I have no idea, this comment has been here since the dawn of time.",
              "createdAt": "2020-12-14T18:15:18Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -475,8 +482,6 @@ internal void ParseSolutionFile()\n             {\n                 // Open the file\n                 fileStream = File.OpenRead(_solutionFile);\n-                // Store the directory of the file as the current directory may change while we are processes the file\n-                SolutionFileDirectory = Path.GetDirectoryName(_solutionFile);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "> 2006-04-07 18:38:15\r\n> Initial multiproc code\r\n\r\n\ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f",
              "createdAt": "2020-12-14T18:26:51Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -475,8 +482,6 @@ internal void ParseSolutionFile()\n             {\n                 // Open the file\n                 fileStream = File.OpenRead(_solutionFile);\n-                // Store the directory of the file as the current directory may change while we are processes the file\n-                SolutionFileDirectory = Path.GetDirectoryName(_solutionFile);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n            string expectedRelativePath = Path.Combine(\"..\", \"ProjectA\", \"ProjectA.csproj\");\r\n```",
              "createdAt": "2020-12-14T16:08:41Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Shouldly?\r\n```suggestion\r\n            solution.ProjectsInOrder[0].ProjectName.ShouldBe(\"ProjectA\");\r\n```\r\netc.",
              "createdAt": "2020-12-14T16:09:32Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";\n+            Assert.Equal(\"ProjectA\", solution.ProjectsInOrder[0].ProjectName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Should I convert this whole file to Shouldly so its consistent?",
              "createdAt": "2020-12-14T19:59:23Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";\n+            Assert.Equal(\"ProjectA\", solution.ProjectsInOrder[0].ProjectName);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I wouldn't push for it. My thought is: Shouldly on new tests and when modifying tests --> it will eventually be used in all tests in the MSBuild repo that have the possibility of failing. If you want to convert the whole file, though, I certainly wouldn't stop you. (I did that at one point when I was frustrated and wanted something easy and monotonous.)",
              "createdAt": "2020-12-14T20:20:25Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";\n+            Assert.Equal(\"ProjectA\", solution.ProjectsInOrder[0].ProjectName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'll take a stab at converting the whole file.  I personally like consistency so I'd rather have all older Asserts or Shouldly, no mix...",
              "createdAt": "2020-12-14T20:56:16Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";\n+            Assert.Equal(\"ProjectA\", solution.ProjectsInOrder[0].ProjectName);",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Done, soooooo much better!",
              "createdAt": "2020-12-14T21:20:46Z",
              "path": "src/Build.UnitTests/Construction/SolutionFile_Tests.cs",
              "diffHunk": "@@ -2400,5 +2400,42 @@ public void ParseSolutionFileContainingProjectsWithSimilarNames_FourProjects_One\n \n             exception.Message.ShouldStartWith(message);\n         }\n+\n+        /// <summary>\n+        /// A test where paths contain ..\\ segments to ensure the paths are normalized.\n+        /// </summary>\n+        [Fact]\n+        public void ParseSolutionWithParentedPaths()\n+        {\n+            string solutionFileContents =\n+                @\"\n+                Microsoft Visual Studio Solution File, Format Version 9.00\n+                # Visual Studio 2005\n+                Project('{749ABBD6-B803-4DA5-8209-498127164114}')  = 'ProjectA',  '..\\ProjectA\\ProjectA.csproj', '{0ABED153-9451-483C-8140-9E8D7306B216}'\n+                EndProject\n+                Global\n+                    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n+                        Debug|AnyCPU = Debug|AnyCPU\n+                        Release|AnyCPU = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.ActiveCfg = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Debug|AnyCPU.Build.0 = Debug|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.ActiveCfg = Release|AnyCPU\n+                        {0ABED153-9451-483C-8140-9E8D7306B216}.Release|AnyCPU.Build.0 = Release|AnyCPU\n+                    EndGlobalSection\n+                    GlobalSection(SolutionProperties) = preSolution\n+                        HideSolutionNode = FALSE\n+                    EndGlobalSection\n+                EndGlobal\n+                \";\n+\n+            SolutionFile solution = ParseSolutionHelper(solutionFileContents);\n+            string expectedRelativePath = NativeMethodsShared.IsWindows ? @\"..\\ProjectA\\ProjectA.csproj\" : @\"../ProjectA/ProjectA.csproj\";\n+            Assert.Equal(\"ProjectA\", solution.ProjectsInOrder[0].ProjectName);",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't the content of the solution _always_ backslashed? Was this change necessary?",
              "createdAt": "2020-12-15T16:22:09Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -740,10 +740,10 @@ public void SolutionConfigurationWithDependencies()\n             string solutionConfigurationContents = msbuildProject.GetPropertyValue(\"CurrentSolutionConfigurationContents\");\n \n             // Only the specified solution configuration is represented in THE BLOB: nothing for x64 in this case\n-            string expected = @\"<SolutionConfiguration>\n-  <ProjectConfiguration Project=`{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}` AbsolutePath=`##temp##Project1\\A.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>\n-  <ProjectConfiguration Project=`{881C1674-4ECA-451D-85B6-D7C59B7F16FA}` AbsolutePath=`##temp##Project2\\B.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU<ProjectDependency Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` /></ProjectConfiguration>\n-  <ProjectConfiguration Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` AbsolutePath=`##temp##Project3\\C.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This isn't the solution, this is the metaproj which has OS-specific path separators",
              "createdAt": "2020-12-15T16:40:24Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -740,10 +740,10 @@ public void SolutionConfigurationWithDependencies()\n             string solutionConfigurationContents = msbuildProject.GetPropertyValue(\"CurrentSolutionConfigurationContents\");\n \n             // Only the specified solution configuration is represented in THE BLOB: nothing for x64 in this case\n-            string expected = @\"<SolutionConfiguration>\n-  <ProjectConfiguration Project=`{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}` AbsolutePath=`##temp##Project1\\A.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>\n-  <ProjectConfiguration Project=`{881C1674-4ECA-451D-85B6-D7C59B7F16FA}` AbsolutePath=`##temp##Project2\\B.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU<ProjectDependency Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` /></ProjectConfiguration>\n-  <ProjectConfiguration Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` AbsolutePath=`##temp##Project3\\C.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "Or it will now because I'm normalizing AbsolutePath",
              "createdAt": "2020-12-15T16:42:34Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -740,10 +740,10 @@ public void SolutionConfigurationWithDependencies()\n             string solutionConfigurationContents = msbuildProject.GetPropertyValue(\"CurrentSolutionConfigurationContents\");\n \n             // Only the specified solution configuration is represented in THE BLOB: nothing for x64 in this case\n-            string expected = @\"<SolutionConfiguration>\n-  <ProjectConfiguration Project=`{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}` AbsolutePath=`##temp##Project1\\A.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>\n-  <ProjectConfiguration Project=`{881C1674-4ECA-451D-85B6-D7C59B7F16FA}` AbsolutePath=`##temp##Project2\\B.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU<ProjectDependency Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` /></ProjectConfiguration>\n-  <ProjectConfiguration Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` AbsolutePath=`##temp##Project3\\C.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "\ud83d\ude2e got it.",
              "createdAt": "2020-12-15T16:46:55Z",
              "path": "src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs",
              "diffHunk": "@@ -740,10 +740,10 @@ public void SolutionConfigurationWithDependencies()\n             string solutionConfigurationContents = msbuildProject.GetPropertyValue(\"CurrentSolutionConfigurationContents\");\n \n             // Only the specified solution configuration is represented in THE BLOB: nothing for x64 in this case\n-            string expected = @\"<SolutionConfiguration>\n-  <ProjectConfiguration Project=`{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}` AbsolutePath=`##temp##Project1\\A.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>\n-  <ProjectConfiguration Project=`{881C1674-4ECA-451D-85B6-D7C59B7F16FA}` AbsolutePath=`##temp##Project2\\B.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU<ProjectDependency Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` /></ProjectConfiguration>\n-  <ProjectConfiguration Project=`{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}` AbsolutePath=`##temp##Project3\\C.csproj` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}