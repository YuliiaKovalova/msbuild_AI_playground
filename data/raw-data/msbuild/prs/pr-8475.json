{
  "number": 8475,
  "title": "Doc/packages sourcing",
  "body": "Related to #8399\r\n\r\n### Context\r\nPreliminary design proposal for the Packages Sourcing feature\r\nThis PR is meant to be a form of design review\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-21T14:22:05Z",
  "updatedAt": "2023-10-10T14:05:13Z",
  "closedAt": "2023-10-10T14:05:13Z",
  "mergedAt": "2023-10-10T14:05:13Z",
  "additions": 217,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "doc/packages-sourcing",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Documentation"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d96ac5e8753d16e0fa671fe4073afed94a16a897",
          "message": "Initial proposal",
          "committedDate": "2023-02-16T14:54:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c68155e84379c14b1b3d118605c42ca037b89460",
          "message": "Clarify some scenarios",
          "committedDate": "2023-02-20T19:55:09Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b4db9dfffbdce7333fd2c68320d043ec31b0e0e0",
          "message": "Add security and dependencies info",
          "committedDate": "2023-02-21T14:19:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "69f4138f1dcf47b4aaed4d2ba3b5a38520764e96",
          "message": "Add coversion section",
          "committedDate": "2023-02-22T15:14:02Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26bd1b86d77e6d87602232dd0b1fb5f0f8268d86",
          "message": "Incorporated offline feedback from @tmat and @zivkan",
          "committedDate": "2023-02-28T13:19:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2d937e083087124316349864d186fc953f5ce8f8",
          "message": "Incorporate feedback from @baronfel",
          "committedDate": "2023-03-02T13:44:51Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1025471d6a7c4a07ff2feeee0172a5308ab0bd7",
          "message": "Reflect offline feedback from @rainersigwald",
          "committedDate": "2023-03-03T16:45:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a9468a29f4ce977a301f66e5ef24e7b3636b510",
          "message": "Add distinction of long term vision and initial iteration",
          "committedDate": "2023-03-27T14:25:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "48373dea64d0269f4a3d0a344fd06c7f2b2f532c",
          "message": "Reflected comments from @vlada-shubina",
          "committedDate": "2023-04-04T16:48:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "766551469de005a4ad1ddd5d62284e94d46a2cc4",
          "message": "Move docs",
          "committedDate": "2023-04-25T09:09:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Pretty pictures!\r\n\r\nShould this (and the RARaaS doc) be in documentation/specs instead of documentation/design?",
        "createdAt": "2023-02-23T00:19:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Pretty pictures!\r\n> \r\n> Should this (and the RARaaS doc) be in documentation/specs instead of documentation/design?\r\n\r\nThanks :-) - the hand scetch is just temp before I collect feedback and create diagram in something more appropriate\r\n\r\ndocumentation/specs - seems to be rather for already exisiting features - so I would keep this one out for now",
        "createdAt": "2023-02-28T13:17:11Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I have a gap in understanding on the requirement/user-scenario here? Can that be updated before we talk about the north-star of the feature itself? \r\nFor example, should developer be required to make changes to the csproj `PackageReference` or should it be a command line option to msbuild/nuget.",
              "createdAt": "2023-03-28T17:38:37Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:",
              "author": {
                "login": "anangaur"
              }
            },
            {
              "body": "/cc: @baronfel ",
              "createdAt": "2023-03-28T17:39:21Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:",
              "author": {
                "login": "anangaur"
              }
            },
            {
              "body": "If we move the [User Scenarios section](https://github.com/dotnet/msbuild/pull/8475/files#diff-41d6bc3c5d881a2f2957df6c99fbabf23a7367cc08373b50eda7e971251f9847R45-R61) to the top - would that address the concern?\r\n\r\nUX - Manual edit of `PackageReference` vs a CLI option (vs VS GUI, vs anything else) - great point! Though I would prefer avoiding a single firm decision on that now, unitl a PoC/spike (that this doc is mainly shooting for, north-star is for context) is alive and viability and limitations are better qualified and quantified",
              "createdAt": "2023-03-28T18:08:03Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Local sources might be also in git repo, does it makes sense to fetch the correct version for it? (in vNext, not in v1).",
              "createdAt": "2023-03-29T12:25:38Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:\n+\n+```xml\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <ItemGroup>\n+    <PackageReference Include=\"Newtonsoft.Json\" ResolveAsSources=\"true\" />\n+    <PackageReference Include=\"Contoso.CommonPackage\" ResolveAsSources=\"true\" SourcesLocation=\"$(MSBuildProjectDirectory)/../CommonPackage/src/CommonPackage.csproj\" />\n+  </ItemGroup>\n+</Project>\n+```\n+\n+```\n+dotnet restore MyProj.csproj  \n+```\n+\n+The command would resolve and fetch remote sources of proper revision (unless explicitly pointed to local sources), build the dependency and add it to `project.assets.json` indicating the sources expansion.",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "it might be good to include specific actions Alice and Bob need to do in order to enable the new feature.",
              "createdAt": "2023-03-29T12:28:47Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:\n+\n+```xml\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <ItemGroup>\n+    <PackageReference Include=\"Newtonsoft.Json\" ResolveAsSources=\"true\" />\n+    <PackageReference Include=\"Contoso.CommonPackage\" ResolveAsSources=\"true\" SourcesLocation=\"$(MSBuildProjectDirectory)/../CommonPackage/src/CommonPackage.csproj\" />\n+  </ItemGroup>\n+</Project>\n+```\n+\n+```\n+dotnet restore MyProj.csproj  \n+```\n+\n+The command would resolve and fetch remote sources of proper revision (unless explicitly pointed to local sources), build the dependency and add it to `project.assets.json` indicating the sources expansion.\n+\n+There would need to be special treatment for some aspect of behavior of `PackageReference` that diverges or are not defined for source code references (`ProjectReference`), listed in https://github.com/dotnet/msbuild/issues/8507.\n+\n+A special metadata (possibly within the nuget package, optionaly within the source repo) might be needed to ensure the proper infering of the build in more involved scenarios (or to disallow package sourcing for particular package).\n+\n+One of the goals of the initial iteration is to identify the limitations of automatic infering of the build and turining the `PackageReference` to `ProjectReference`. \n+\n+# Scope of initial iteration\n+\n+The initial proof of concept of the feature is envisioned to be facilitated via [`SourceLink`](https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink) repository metadata, [`PE headers`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.portableexecutable.peheaders?view=net-7.0) and pdb metadata ([`MetadataReader`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader)), in-memory or persistent switching between `PackageReference` and `ProjectReference` and possibly verification of proper outputs (for `deterministic build` enabled projects).\n+\n+## In scope\n+* Standalone dotnet tool for initiating the `Package Sourcing` of particular nuget(s) via locating and fetching sources, infering the build and flipping `PackageReference` to `ProjectReference`\n+\n+## Out of scope\n+ * **Patching the package/binary dependencies in a deployable way**. The interaction is ment to be used only on developer machine and not survive beyond repository push, external environment deployment etc.\n+ * **Survival of patches accross `PackageReference` updates**.\n+ * **Supporting nuget packages that are not `SourceLink` enabled**. As a fallback we might use `SourceLink` stamped symbols, but unless the `SourceLink` information is to be found either within the nuget package or published matching symbols, this feature will not be enabled.\n+ * **Custom pre-build prerequisities**. First version of the feature will make several assumptions on common ways to build packages from source repository (attempt to build just the project with `dotnet build`, attempt to locate `*.sln` or `build.<cmd|sh|ps1>` script or existence of reproducible build compiler flags)\n+\n+# User scenarios",
              "author": {
                "login": "vlada-shubina"
              }
            },
            {
              "body": "Agree. I'll edit after prototyping phase once the exact actions are formalized",
              "createdAt": "2023-04-04T16:45:40Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:\n+\n+```xml\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <ItemGroup>\n+    <PackageReference Include=\"Newtonsoft.Json\" ResolveAsSources=\"true\" />\n+    <PackageReference Include=\"Contoso.CommonPackage\" ResolveAsSources=\"true\" SourcesLocation=\"$(MSBuildProjectDirectory)/../CommonPackage/src/CommonPackage.csproj\" />\n+  </ItemGroup>\n+</Project>\n+```\n+\n+```\n+dotnet restore MyProj.csproj  \n+```\n+\n+The command would resolve and fetch remote sources of proper revision (unless explicitly pointed to local sources), build the dependency and add it to `project.assets.json` indicating the sources expansion.\n+\n+There would need to be special treatment for some aspect of behavior of `PackageReference` that diverges or are not defined for source code references (`ProjectReference`), listed in https://github.com/dotnet/msbuild/issues/8507.\n+\n+A special metadata (possibly within the nuget package, optionaly within the source repo) might be needed to ensure the proper infering of the build in more involved scenarios (or to disallow package sourcing for particular package).\n+\n+One of the goals of the initial iteration is to identify the limitations of automatic infering of the build and turining the `PackageReference` to `ProjectReference`. \n+\n+# Scope of initial iteration\n+\n+The initial proof of concept of the feature is envisioned to be facilitated via [`SourceLink`](https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink) repository metadata, [`PE headers`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.portableexecutable.peheaders?view=net-7.0) and pdb metadata ([`MetadataReader`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader)), in-memory or persistent switching between `PackageReference` and `ProjectReference` and possibly verification of proper outputs (for `deterministic build` enabled projects).\n+\n+## In scope\n+* Standalone dotnet tool for initiating the `Package Sourcing` of particular nuget(s) via locating and fetching sources, infering the build and flipping `PackageReference` to `ProjectReference`\n+\n+## Out of scope\n+ * **Patching the package/binary dependencies in a deployable way**. The interaction is ment to be used only on developer machine and not survive beyond repository push, external environment deployment etc.\n+ * **Survival of patches accross `PackageReference` updates**.\n+ * **Supporting nuget packages that are not `SourceLink` enabled**. As a fallback we might use `SourceLink` stamped symbols, but unless the `SourceLink` information is to be found either within the nuget package or published matching symbols, this feature will not be enabled.\n+ * **Custom pre-build prerequisities**. First version of the feature will make several assumptions on common ways to build packages from source repository (attempt to build just the project with `dotnet build`, attempt to locate `*.sln` or `build.<cmd|sh|ps1>` script or existence of reproducible build compiler flags)\n+\n+# User scenarios",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "what is \"build recipe\"?",
              "createdAt": "2023-03-29T12:32:31Z",
              "path": "documentation/design/interactive-package-references.md",
              "diffHunk": "@@ -0,0 +1,217 @@\n+# Packages Sourcing\n+\n+The feature is meant to simplify the process of fixing, testing and contributing changes in projects published as nugets.\n+\n+It is inspired by the golang modules design - where a standalone dependency (module) has a pointer to it's source location as a first-class citizen within the ecosystem (go.mod) and the relation between the source codes and runtime dependecy is unambigously guaranteed by the compiler.\n+\n+# North Star / Longer-term vision\n+\n+We envision the 'packages sourcing' to be a first-class-citizen within nuget client (and hence [`dotnet restore`](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-restore)). Via denoting specific metadata on `PackageReference` it would be possible to perform specific mode of restore operation for the particular package reference - by pointing to a local sources, or letting the command to figure out and fetch apropriate sources:\n+\n+```xml\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+  <ItemGroup>\n+    <PackageReference Include=\"Newtonsoft.Json\" ResolveAsSources=\"true\" />\n+    <PackageReference Include=\"Contoso.CommonPackage\" ResolveAsSources=\"true\" SourcesLocation=\"$(MSBuildProjectDirectory)/../CommonPackage/src/CommonPackage.csproj\" />\n+  </ItemGroup>\n+</Project>\n+```\n+\n+```\n+dotnet restore MyProj.csproj  \n+```\n+\n+The command would resolve and fetch remote sources of proper revision (unless explicitly pointed to local sources), build the dependency and add it to `project.assets.json` indicating the sources expansion.\n+\n+There would need to be special treatment for some aspect of behavior of `PackageReference` that diverges or are not defined for source code references (`ProjectReference`), listed in https://github.com/dotnet/msbuild/issues/8507.\n+\n+A special metadata (possibly within the nuget package, optionaly within the source repo) might be needed to ensure the proper infering of the build in more involved scenarios (or to disallow package sourcing for particular package).\n+\n+One of the goals of the initial iteration is to identify the limitations of automatic infering of the build and turining the `PackageReference` to `ProjectReference`. \n+\n+# Scope of initial iteration\n+\n+The initial proof of concept of the feature is envisioned to be facilitated via [`SourceLink`](https://learn.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink) repository metadata, [`PE headers`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.portableexecutable.peheaders?view=net-7.0) and pdb metadata ([`MetadataReader`](https://learn.microsoft.com/en-us/dotnet/api/system.reflection.metadata.metadatareader)), in-memory or persistent switching between `PackageReference` and `ProjectReference` and possibly verification of proper outputs (for `deterministic build` enabled projects).\n+\n+## In scope\n+* Standalone dotnet tool for initiating the `Package Sourcing` of particular nuget(s) via locating and fetching sources, infering the build and flipping `PackageReference` to `ProjectReference`\n+\n+## Out of scope\n+ * **Patching the package/binary dependencies in a deployable way**. The interaction is ment to be used only on developer machine and not survive beyond repository push, external environment deployment etc.\n+ * **Survival of patches accross `PackageReference` updates**.\n+ * **Supporting nuget packages that are not `SourceLink` enabled**. As a fallback we might use `SourceLink` stamped symbols, but unless the `SourceLink` information is to be found either within the nuget package or published matching symbols, this feature will not be enabled.\n+ * **Custom pre-build prerequisities**. First version of the feature will make several assumptions on common ways to build packages from source repository (attempt to build just the project with `dotnet build`, attempt to locate `*.sln` or `build.<cmd|sh|ps1>` script or existence of reproducible build compiler flags)\n+\n+# User scenarios\n+\n+## OSS package reference\n+* Alice is referencing FooBar nuget in her project and she is using automated PRs to consume the latest available version\n+* A new version of FooBar nuget is published, automated PR into Alice project is created to update the `PackageReference` and the PR is failing\n+* Alice is investigating the issue and suspecting problem in FooBar library. If the package was properly SourceLink-ed and symbols published, Alice can debug into the code and diagnose the issue\n+* Alice would like to try to fix the issue, test the fix and contribute back to the OSS. She can achieve this with `Packages Sourcing` feature\n+\n+## Internal corp package flows\n+* Bob is working in Contoso co. Contoso co. has dozens of internal repositories and internal package feed used to publish and consume the artifacts of individual repositories\n+* Bob is working on component that is consuming another component - BarBaz - as a nuget package.\n+* Bob wants to contribute an improvement to component BarBaz, that would be leveraged by his component. He wants to first test the improvement with his component before contributing back to the BarBaz. He can achieve this with `Packages Sourcing` feature\n+\n+## (Out of scope) Source as package reference\n+* Bob from previous scenario needs to work on couple of components that interact with each other and which reference themselves via `PackageReference`s.\n+* To simplify his work, Bob wants to include locations with components source code as reference locations for resolving `PackageReference`s, while he'd expect the build to properly interpret the components sources as packages (provided those can be successfuly build and packed)\n+* Alteration of this sceanrio is referencing a reference via git repo link and commit hash (analogously to go modules).\n+\n+# Design proposal\n+\n+![control flow proposal](packagessourcing-control-flow.jpg)\n+\n+ ## Subproblems\n+\n+ * Opting-in mechanism - to request switch to local sources\n+ * Preserving the info about swtich to local sources\n+ * Opting-out mechanism - to switch back to regular package reference\n+ * Local storage of sources - submodule vs standalone checkout\n+ * Indication mechanism informing the user about usage of local sources (especially in case where local patch is applied)\n+ * Locating and fetching proper source codes\n+ * Infering the proper 'build recipe' for the binary and verifying the result (in case of determinictic build)\n+ * Verifying that the locally build package is correct - leveraging deterministic build; signature stripping etc.\n+ * Converting `PackageReference` to `ProjectReference`\n+ * Allowing to quickly consume local code patches (via edit and continue/ hot reload mechanism)\n+\n+ Some of those problems might be eliminated by simplifying the workflow and e.g. providing a command that prepares a project and edits the original MSBuild file to replace `PackageReference` with `ProjectReference` - the consuming of code patches and indicating the altered reference to user would not be needed.\n+ \n+ ## Possible Implementations\n+\n+ Following sections discuss possible implementations of individual [subproblems outlined above](#subproblems).\n+\n+ ### Opting-in\n+\n+ For simplified and isolated rollout of this feature we propose CLI-only interface (no VS or other tooling integration):\n+\n+```cmd\n+> dotnet tool install Microsoft.Build.PackageSourcing\n+> dotnet package-to-sources --project MySolution.sln --packages: FooBar.Baz, Newtonsoft.Json\n+\n+FooBar.Baz:\n+Sources located: github.com/FooBar/Baz@0abcb66\n+Local checkout: C:\\Users\\jankrivanek\\.nuget\\sources\\FooBar\\6.5.4\\\n+Build recipe created: FooBar-package-sourcing.proj",
              "author": {
                "login": "vlada-shubina"
              }
            }
          ]
        }
      }
    ]
  }
}