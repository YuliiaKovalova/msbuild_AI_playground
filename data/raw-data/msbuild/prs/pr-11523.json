{
  "number": 11523,
  "title": "Implement ExecCliBuild build check to warn if the Exec task is used to build a project",
  "body": "Implement `ExecCliBuild` build check to warn if the `Exec` task is used to build a project.\r\n\r\nFixes #11125\r\n\r\n### Context\r\nIt's usually a bad practice to build a project using an external tool from the `Exec` task (e.g. `dotnet build`) and the [MSBuild task](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-task) should be used instead, so that the MSBuild engine can track the process and files.\r\n\r\n### Testing\r\nImplemented automated tests covering various build commands, possible false positive cases and verified functionality manually using the build output.",
  "state": "MERGED",
  "createdAt": "2025-02-28T02:25:53Z",
  "updatedAt": "2025-04-07T09:04:18Z",
  "closedAt": "2025-04-01T11:06:50Z",
  "mergedAt": "2025-04-01T11:06:50Z",
  "additions": 399,
  "deletions": 0,
  "changedFiles": 18,
  "headRefName": "implement-exec-cli-build-check",
  "isDraft": false,
  "author": {
    "login": "IliaShuliatikov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e501c1122a75862ec48fb4f203886001fce31622",
          "message": "Implement ExecCliBuild build check to warn if the Exec task is used to build a project",
          "committedDate": "2025-02-28T02:00:03Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7c2c19fa0521d8e904898844630e20ac17b3a63",
          "message": "Small refactoring",
          "committedDate": "2025-02-28T02:14:55Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d20b047e9ec1efc8c68276ca49988c20f0273cbb",
          "message": "Fix build check description in the readme",
          "committedDate": "2025-02-28T02:23:29Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23c2b2c595888f063d68d0f1ed573584fe2fe0cb",
          "message": "Fix the build check description and remove localization from the link",
          "committedDate": "2025-02-28T17:36:32Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ac902bb925bdb2fb59f2965203e8df393f81aad",
          "message": "Merge branch 'main' into implement-exec-cli-build-check",
          "committedDate": "2025-02-28T19:22:38Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0beaba405040562feda390d3b310f07eddb156b1",
          "message": "Small refactoring",
          "committedDate": "2025-02-28T20:26:37Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25e7313f6eff48964f908ea7cebe67ba65d2dcd5",
          "message": "Merge branch 'dotnet:main' into implement-exec-cli-build-check",
          "committedDate": "2025-03-03T19:15:09Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b102c8fdf48e90e934e3049a3be34264df2f3cf",
          "message": "Remove unnecessary allocations, optimize performance",
          "committedDate": "2025-03-18T22:40:24Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7388336df71ac1f629e05924778fc8164b54cec2",
          "message": "Add test case with excluded argument",
          "committedDate": "2025-03-18T22:41:08Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5adb2819b9005a0dc44c2e01f650c6b718290706",
          "message": "Remove unnecessary support for excluded switches",
          "committedDate": "2025-03-20T20:45:41Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28ccf4417158b682a15235b5ac8e87ed0a08188d",
          "message": "Remove unsupported test case",
          "committedDate": "2025-03-20T20:46:18Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d8066c897abc56dc9dc783d1b71d6f472e9a179",
          "message": "Fix build error",
          "committedDate": "2025-03-20T21:05:23Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b017541ae2ca7aec8611f92eb53c081a487e4a7",
          "message": "Merge branch 'main' into implement-exec-cli-build-check",
          "committedDate": "2025-03-21T18:01:57Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "661a78322a723ca94ff3d3ccff0652e980c230ad",
          "message": "Fix logic with several separated commands when the build command is the last one",
          "committedDate": "2025-03-21T18:42:06Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f63aaa2f210ac8b695116949b5c6b15ee365c2c",
          "message": "Allocate in heap in case of a long command",
          "committedDate": "2025-03-21T18:43:48Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c5ea4f32cdadcf1afc569b192c8a5d139ea1ab0",
          "message": "Add a test case with a long command",
          "committedDate": "2025-03-21T19:06:37Z",
          "author": {
            "name": "Ilia Shuliatikov",
            "email": "ilia.shuliatikov@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-policy-service agree",
        "createdAt": "2025-02-28T02:36:58Z",
        "author": {
          "login": "IliaShuliatikov"
        }
      },
      {
        "body": "Thanks, great to see this!  I'll let others who are more familiar with writing build checks actually review the code.  At a glance I wonder if the string splitting and reformatting and the regex are going to have enough of a performance impact that we'd want to optimize that code more.",
        "createdAt": "2025-03-17T14:50:49Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> At a glance I wonder if the string splitting and reformatting and the regex are going to have enough of a performance impact that we'd want to optimize that code more.\r\n\r\nI assumed that running build checks (AFAIK, they are only run when building with the `/check` switch) and hitting the `Exec` target is a pretty rare case, so code simplicity would be preferable over performance. But I looked at the [BuildCheck Design Spec](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md) one more time and if I got it right, it will be enabled by default, so it makes sense to optimize it as much as possible. Thanks for pointing this out, I optimized the implementation in the latest iteration to have better performance and zero allocation, please take a look.\r\n\r\nI also prepared a performance benchmark to compare the original implementation with the latest iteration and confirm that we have zero allocations, here are the results:\r\n![Screenshot 2025-03-18 232323](https://github.com/user-attachments/assets/4dc3c4ac-b11c-4e52-8b1a-689315bd9e23)\r\n",
        "createdAt": "2025-03-18T22:50:08Z",
        "author": {
          "login": "IliaShuliatikov"
        }
      },
      {
        "body": "@IliaShuliatikov , thank you for the contribution! ",
        "createdAt": "2025-04-01T11:07:00Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Great contribution!\r\n\r\n@YuliiaKovalova - is there still time to adjust the code of the check? This feels as security related check - for which we wanted to have BC03xx range",
        "createdAt": "2025-04-04T08:01:21Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Great contribution!\r\n> \r\n> @YuliiaKovalova - is there still time to adjust the code of the check? This feels as security related check - for which we wanted to have BC03xx range\r\n\r\nhere you go https://github.com/dotnet/msbuild/pull/11696",
        "createdAt": "2025-04-07T09:04:16Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n\"The 'Exec' task should not be used to build projects.\"\r\n```",
              "createdAt": "2025-02-28T14:24:10Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -137,6 +138,13 @@ dotnet build my-multi-target.csproj /p:TargetFramework=net9.0\n \n Make sure the Target Framework is specified appropriately for your project.\n \n+<a name=\"BC0109\"></a>\n+## BC0109 - Building using the Exec task.\n+\n+\"The 'Exec' task should be used to build projects.\"",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Fixed",
              "createdAt": "2025-02-28T17:41:58Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -137,6 +138,13 @@ dotnet build my-multi-target.csproj /p:TargetFramework=net9.0\n \n Make sure the Target Framework is specified appropriately for your project.\n \n+<a name=\"BC0109\"></a>\n+## BC0109 - Building using the Exec task.\n+\n+\"The 'Exec' task should be used to build projects.\"",
              "author": {
                "login": "IliaShuliatikov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nBuilding projects using the dotnet/msbuild/nuget CLI in the `Exec` task is not recommended, as it spawns a separate build process that the MSBuild engine cannot track. Please use the [MSBuild task](https://learn.microsoft.com/visualstudio/msbuild/msbuild-task) instead.\r\n```\r\n\r\nWe don't add localization to links so it can redirect to the correct language.",
              "createdAt": "2025-02-28T14:58:48Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -137,6 +138,13 @@ dotnet build my-multi-target.csproj /p:TargetFramework=net9.0\n \n Make sure the Target Framework is specified appropriately for your project.\n \n+<a name=\"BC0109\"></a>\n+## BC0109 - Building using the Exec task.\n+\n+\"The 'Exec' task should be used to build projects.\"\n+\n+Building projects using the dotnet/msbuild/nuget CLI in the `Exec` task is not recommended, as it spawns a separate build process that the MSBuild engine cannot track. Please use the [MSBuild task](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-task) instead.",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Removed the localization, thanks for the suggestion.",
              "createdAt": "2025-02-28T17:42:33Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -137,6 +138,13 @@ dotnet build my-multi-target.csproj /p:TargetFramework=net9.0\n \n Make sure the Target Framework is specified appropriately for your project.\n \n+<a name=\"BC0109\"></a>\n+## BC0109 - Building using the Exec task.\n+\n+\"The 'Exec' task should be used to build projects.\"\n+\n+Building projects using the dotnet/msbuild/nuget CLI in the `Exec` task is not recommended, as it spawns a separate build process that the MSBuild engine cannot track. Please use the [MSBuild task](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-task) instead.",
              "author": {
                "login": "IliaShuliatikov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the reasoning behind excluding switches from `msbuild` but not from other commands? From quick checking they also support these.",
              "createdAt": "2025-03-20T12:21:04Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [\n+        new KnownBuildCommand(\"dotnet build\"),\n+        new KnownBuildCommand(\"dotnet clean\"),\n+        new KnownBuildCommand(\"dotnet msbuild\"),\n+        new KnownBuildCommand(\"dotnet restore\"),\n+        new KnownBuildCommand(\"dotnet publish\"),\n+        new KnownBuildCommand(\"dotnet pack\"),\n+        new KnownBuildCommand(\"dotnet vstest\"),\n+        new KnownBuildCommand(\"nuget restore\"),\n+        new KnownBuildCommand(\"msbuild\", excludedSwitches: [\"version\", \"ver\", \"help\", \"h\", \"?\"]),",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I'd add them to dotnet build, run, test. For the others I'd be quite surprised if someone really needed to get the --help switch inside an Exec task.",
              "createdAt": "2025-03-20T12:40:15Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [\n+        new KnownBuildCommand(\"dotnet build\"),\n+        new KnownBuildCommand(\"dotnet clean\"),\n+        new KnownBuildCommand(\"dotnet msbuild\"),\n+        new KnownBuildCommand(\"dotnet restore\"),\n+        new KnownBuildCommand(\"dotnet publish\"),\n+        new KnownBuildCommand(\"dotnet pack\"),\n+        new KnownBuildCommand(\"dotnet vstest\"),\n+        new KnownBuildCommand(\"nuget restore\"),\n+        new KnownBuildCommand(\"msbuild\", excludedSwitches: [\"version\", \"ver\", \"help\", \"h\", \"?\"]),",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I added them to prevent false positive cases, just to be safe.\r\nBut now I'm thinking, it's probably too much, especially for the `msbuild` CLI, considering its purpose is to build, and the chances that someone will use these switches in an `Exec` task are extremely low, so it doesn't make much sense to support it while losing performance and code simplicity.\r\n\r\nI pushed new commit removing this unnecessary functionality, please take a look.",
              "createdAt": "2025-03-20T20:47:48Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [\n+        new KnownBuildCommand(\"dotnet build\"),\n+        new KnownBuildCommand(\"dotnet clean\"),\n+        new KnownBuildCommand(\"dotnet msbuild\"),\n+        new KnownBuildCommand(\"dotnet restore\"),\n+        new KnownBuildCommand(\"dotnet publish\"),\n+        new KnownBuildCommand(\"dotnet pack\"),\n+        new KnownBuildCommand(\"dotnet vstest\"),\n+        new KnownBuildCommand(\"nuget restore\"),\n+        new KnownBuildCommand(\"msbuild\", excludedSwitches: [\"version\", \"ver\", \"help\", \"h\", \"?\"]),",
              "author": {
                "login": "IliaShuliatikov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "are we on time for 9.0.300? @baronfel",
              "createdAt": "2025-03-20T12:33:24Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -12,6 +12,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n | [BC0106](#bc0106---copytooutputdirectoryalways-should-be-avoided) | Warning | N/A | 9.0.200 | CopyToOutputDirectory='Always' should be avoided. |\n | [BC0107](#bc0107---targetframework-and-targetframeworks-specified-together) | Warning | N/A | 9.0.200 | TargetFramework and TargetFrameworks specified together. |\n | [BC0108](#bc0108---targetframework-or-targetframeworks-specified-in-non-sdk-style-project) | Warning | N/A | 9.0.300 | TargetFramework or TargetFrameworks specified in non-SDK style project. |\n+| [BC0109](#bc0109---building-using-the-exec-task) | Warning | N/A | 9.0.300 | Building using the Exec task. |",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Yep! Plenty of time until freeze for the May release. ",
              "createdAt": "2025-03-20T12:50:32Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -12,6 +12,7 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n | [BC0106](#bc0106---copytooutputdirectoryalways-should-be-avoided) | Warning | N/A | 9.0.200 | CopyToOutputDirectory='Always' should be avoided. |\n | [BC0107](#bc0107---targetframework-and-targetframeworks-specified-together) | Warning | N/A | 9.0.200 | TargetFramework and TargetFrameworks specified together. |\n | [BC0108](#bc0108---targetframework-or-targetframeworks-specified-in-non-sdk-style-project) | Warning | N/A | 9.0.300 | TargetFramework or TargetFrameworks specified in non-SDK style project. |\n+| [BC0109](#bc0109---building-using-the-exec-task) | Warning | N/A | 9.0.300 | Building using the Exec task. |",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Array initialization syntax uses square brackets; in C# array initializers should use curly braces {}.\n```suggestion\n    private static readonly char[] s_knownCommandSeparators = { '&', ';', '|' };\n\n    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n    {\n```",
              "createdAt": "2025-03-20T12:48:21Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The array initializer uses square brackets; replace them with curly braces {} to properly initialize the collection in C#.\n```suggestion\n    public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule> { SupportedRule };\n```",
              "createdAt": "2025-03-20T12:48:21Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [\n+        new KnownBuildCommand(\"dotnet build\"),\n+        new KnownBuildCommand(\"dotnet clean\"),\n+        new KnownBuildCommand(\"dotnet msbuild\"),\n+        new KnownBuildCommand(\"dotnet restore\"),\n+        new KnownBuildCommand(\"dotnet publish\"),\n+        new KnownBuildCommand(\"dotnet pack\"),\n+        new KnownBuildCommand(\"dotnet vstest\"),\n+        new KnownBuildCommand(\"nuget restore\"),\n+        new KnownBuildCommand(\"msbuild\", excludedSwitches: [\"version\", \"ver\", \"help\", \"h\", \"?\"]),\n+        new KnownBuildCommand(\"dotnet test\"),\n+        new KnownBuildCommand(\"dotnet run\"),\n+    ];\n+\n+    public override string FriendlyName => \"MSBuild.ExecCliBuildCheck\";\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The array initializer for s_knownSwitchPrefixes uses square brackets; it should use curly braces {} to be valid C#.\n```suggestion\n        private static readonly string[] s_knownSwitchPrefixes = {\"/\", \"--\", \"-\"};\n```",
              "createdAt": "2025-03-20T12:48:22Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,245 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly KnownBuildCommand[] s_knownBuildCommands =\n+    [\n+        new KnownBuildCommand(\"dotnet build\"),\n+        new KnownBuildCommand(\"dotnet clean\"),\n+        new KnownBuildCommand(\"dotnet msbuild\"),\n+        new KnownBuildCommand(\"dotnet restore\"),\n+        new KnownBuildCommand(\"dotnet publish\"),\n+        new KnownBuildCommand(\"dotnet pack\"),\n+        new KnownBuildCommand(\"dotnet vstest\"),\n+        new KnownBuildCommand(\"nuget restore\"),\n+        new KnownBuildCommand(\"msbuild\", excludedSwitches: [\"version\", \"ver\", \"help\", \"h\", \"?\"]),\n+        new KnownBuildCommand(\"dotnet test\"),\n+        new KnownBuildCommand(\"dotnet run\"),\n+    ];\n+\n+    public override string FriendlyName => \"MSBuild.ExecCliBuildCheck\";\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterTaskInvocationAction(TaskInvocationAction);\n+    }\n+\n+    private static void TaskInvocationAction(BuildCheckDataContext<TaskInvocationCheckData> context)\n+    {\n+        if (context.Data.TaskName == ExecTaskName\n+            && context.Data.Parameters.TryGetValue(CommandParameterName, out TaskInvocationCheckData.TaskParameter? commandArgument))\n+        {\n+            var execCommandValue = commandArgument.Value?.ToString() ?? string.Empty;\n+\n+            var commandSpan = execCommandValue.AsSpan();\n+            int start = 0;\n+\n+            while (start < commandSpan.Length)\n+            {\n+                var nextSeparatorIndex = commandSpan.Slice(start, commandSpan.Length - start).IndexOfAny(s_knownCommandSeparators);\n+\n+                if (nextSeparatorIndex == -1)\n+                {\n+                    if (TryGetMatchingKnownBuildCommand(commandSpan, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            knownBuildCommand.ToolName));\n+                    }\n+\n+                    break;\n+                }\n+                else\n+                {\n+                    var command = commandSpan.Slice(start, nextSeparatorIndex);\n+\n+                    if (TryGetMatchingKnownBuildCommand(command, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            knownBuildCommand.ToolName));\n+\n+                        break;\n+                    }\n+\n+                    start += nextSeparatorIndex + 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static bool TryGetMatchingKnownBuildCommand(ReadOnlySpan<char> command, out KnownBuildCommand knownBuildCommand)\n+    {\n+        Span<char> normalizedCommand = stackalloc char[command.Length];\n+        int normalizedCommandIndex = 0;\n+\n+        foreach (var c in command)\n+        {\n+            if (char.IsWhiteSpace(c) && (normalizedCommandIndex == 0 || char.IsWhiteSpace(normalizedCommand[normalizedCommandIndex - 1])))\n+            {\n+                continue;\n+            }\n+\n+            normalizedCommand[normalizedCommandIndex++] = c;\n+        }\n+\n+        foreach (var buildCommand in s_knownBuildCommands)\n+        {\n+            if (buildCommand.IsMatch(normalizedCommand))\n+            {\n+                knownBuildCommand = buildCommand;\n+                return true;\n+            }\n+        }\n+\n+        knownBuildCommand = default;\n+        return false;\n+    }\n+\n+    private readonly record struct KnownBuildCommand\n+    {\n+        private static readonly string[] s_knownSwitchPrefixes = [\"/\", \"--\", \"-\"];\n+",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the `stackalloc` seems risky if someone had a huge command, consider fallback to heap when the length is too high: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/stackalloc ",
              "createdAt": "2025-03-21T09:11:34Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,148 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly string[] s_knownBuildCommands =\n+    [\n+        \"dotnet build\",\n+        \"dotnet clean\",\n+        \"dotnet msbuild\",\n+        \"dotnet restore\",\n+        \"dotnet publish\",\n+        \"dotnet pack\",\n+        \"dotnet vstest\",\n+        \"nuget restore\",\n+        \"msbuild\",\n+        \"dotnet test\",\n+        \"dotnet run\",\n+    ];\n+\n+    public override string FriendlyName => \"MSBuild.ExecCliBuildCheck\";\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterTaskInvocationAction(TaskInvocationAction);\n+    }\n+\n+    private static void TaskInvocationAction(BuildCheckDataContext<TaskInvocationCheckData> context)\n+    {\n+        if (context.Data.TaskName == ExecTaskName\n+            && context.Data.Parameters.TryGetValue(CommandParameterName, out TaskInvocationCheckData.TaskParameter? commandArgument))\n+        {\n+            var execCommandValue = commandArgument.Value?.ToString() ?? string.Empty;\n+\n+            var commandSpan = execCommandValue.AsSpan();\n+            int start = 0;\n+\n+            while (start < commandSpan.Length)\n+            {\n+                var nextSeparatorIndex = commandSpan.Slice(start, commandSpan.Length - start).IndexOfAny(s_knownCommandSeparators);\n+\n+                if (nextSeparatorIndex == -1)\n+                {\n+                    if (TryGetMatchingKnownBuildCommand(commandSpan, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            GetToolName(knownBuildCommand)));\n+                    }\n+\n+                    break;\n+                }\n+                else\n+                {\n+                    var command = commandSpan.Slice(start, nextSeparatorIndex);\n+\n+                    if (TryGetMatchingKnownBuildCommand(command, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            GetToolName(knownBuildCommand)));\n+\n+                        break;\n+                    }\n+\n+                    start += nextSeparatorIndex + 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static bool TryGetMatchingKnownBuildCommand(ReadOnlySpan<char> command, out string knownBuildCommand)\n+    {\n+        Span<char> normalizedBuildCommand = stackalloc char[command.Length];",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Done.",
              "createdAt": "2025-03-21T19:52:02Z",
              "path": "src/Build/BuildCheck/Checks/ExecCliBuildCheck.cs",
              "diffHunk": "@@ -0,0 +1,148 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+#if !FEATURE_MSIOREDIST\n+using System.IO;\n+#endif\n+using Microsoft.Build.Shared;\n+\n+#if FEATURE_MSIOREDIST\n+using Path = Microsoft.IO.Path;\n+#endif\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Checks;\n+\n+internal sealed class ExecCliBuildCheck : Check\n+{\n+    public static CheckRule SupportedRule = new CheckRule(\n+        \"BC0109\",\n+        \"ExecCliBuild\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0109_MessageFmt\")!,\n+        new CheckConfiguration() { Severity = CheckResultSeverity.Warning });\n+\n+    private const string ExecTaskName = \"Exec\";\n+    private const string CommandParameterName = \"Command\";\n+\n+    private static readonly char[] s_knownCommandSeparators = ['&', ';', '|'];\n+\n+    private static readonly string[] s_knownBuildCommands =\n+    [\n+        \"dotnet build\",\n+        \"dotnet clean\",\n+        \"dotnet msbuild\",\n+        \"dotnet restore\",\n+        \"dotnet publish\",\n+        \"dotnet pack\",\n+        \"dotnet vstest\",\n+        \"nuget restore\",\n+        \"msbuild\",\n+        \"dotnet test\",\n+        \"dotnet run\",\n+    ];\n+\n+    public override string FriendlyName => \"MSBuild.ExecCliBuildCheck\";\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterTaskInvocationAction(TaskInvocationAction);\n+    }\n+\n+    private static void TaskInvocationAction(BuildCheckDataContext<TaskInvocationCheckData> context)\n+    {\n+        if (context.Data.TaskName == ExecTaskName\n+            && context.Data.Parameters.TryGetValue(CommandParameterName, out TaskInvocationCheckData.TaskParameter? commandArgument))\n+        {\n+            var execCommandValue = commandArgument.Value?.ToString() ?? string.Empty;\n+\n+            var commandSpan = execCommandValue.AsSpan();\n+            int start = 0;\n+\n+            while (start < commandSpan.Length)\n+            {\n+                var nextSeparatorIndex = commandSpan.Slice(start, commandSpan.Length - start).IndexOfAny(s_knownCommandSeparators);\n+\n+                if (nextSeparatorIndex == -1)\n+                {\n+                    if (TryGetMatchingKnownBuildCommand(commandSpan, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            GetToolName(knownBuildCommand)));\n+                    }\n+\n+                    break;\n+                }\n+                else\n+                {\n+                    var command = commandSpan.Slice(start, nextSeparatorIndex);\n+\n+                    if (TryGetMatchingKnownBuildCommand(command, out var knownBuildCommand))\n+                    {\n+                        context.ReportResult(BuildCheckResult.CreateBuiltIn(\n+                            SupportedRule,\n+                            context.Data.TaskInvocationLocation,\n+                            context.Data.TaskName,\n+                            Path.GetFileName(context.Data.ProjectFilePath),\n+                            GetToolName(knownBuildCommand)));\n+\n+                        break;\n+                    }\n+\n+                    start += nextSeparatorIndex + 1;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static bool TryGetMatchingKnownBuildCommand(ReadOnlySpan<char> command, out string knownBuildCommand)\n+    {\n+        Span<char> normalizedBuildCommand = stackalloc char[command.Length];",
              "author": {
                "login": "IliaShuliatikov"
              }
            }
          ]
        }
      }
    ]
  }
}