{
  "number": 10307,
  "title": "Add BuildCheck rule about used env variable",
  "body": "Fixes [#9885](https://github.com/dotnet/msbuild/issues/9885)\r\n\r\n### Context\r\nThe used environment variable will be reported after enabling this rule with pointing to exact file/location where it happened.\r\n\r\n### Changes Made\r\nThe logic for tracking location was added by extending interface **IProperty** with property location(file,column,line) . It can be reused for other rules too.\r\n\r\nThe created rule relies on the EnvironmentVariableRead event raise.\r\n\r\n+ some changes in E2e tests - test project files and editor config content were moved to TestAssets, so after changing the content of any of them, rebuild isn't required.\r\n\r\n### Testing\r\nExtended existing e2e tests + REENABLED THEM\r\n\r\n+ check the performance impact in VS: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/564781 - Is seems to be OK",
  "state": "MERGED",
  "createdAt": "2024-06-28T15:21:05Z",
  "updatedAt": "2024-07-16T16:04:09Z",
  "closedAt": "2024-07-16T16:04:09Z",
  "mergedAt": "2024-07-16T16:04:09Z",
  "additions": 452,
  "deletions": 219,
  "changedFiles": 32,
  "headRefName": "dev/ykovalova/used_envVariable",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e572a8e3a21032262281a6b34f4c271511e4d048",
          "message": "add a base rule for tracking envVar usage",
          "committedDate": "2024-06-27T16:12:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7388390b42a880a4c676a16925b58e0029a8b345",
          "message": "add location to analyzer",
          "committedDate": "2024-06-28T11:06:29Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8faed84dceac0b49afae07c3609e5f918e0e07c5",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/used_envVariable",
          "committedDate": "2024-06-28T11:14:09Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "20d9517e79f8db16a3404cdb68e065a9b0569a4a",
          "message": "extend eventreaders",
          "committedDate": "2024-06-28T15:20:51Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a39fc23ff201d9160e6ca6510356b8f375fee64",
          "message": "add registration",
          "committedDate": "2024-06-28T15:41:19Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4197ca4edf98bbab070965bd46ca99fd18e6414f",
          "message": "remove Serializable attribute",
          "committedDate": "2024-07-01T08:50:14Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8e215cf9d7409eca5d0d835694d170d20b68549",
          "message": "Merge branch 'dev/ykovalova/used_envVariable' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/used_envVariable",
          "committedDate": "2024-07-01T09:41:35Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83143fdb265c99bdb667f616510a6716c0b49c91",
          "message": "add binary reader/writer",
          "committedDate": "2024-07-01T18:27:51Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e6c82f9aa3b77c5485012380ba01b941d1bafb7e",
          "message": "fix the event registration",
          "committedDate": "2024-07-02T12:53:51Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66292b59bf4f9baf7860575f21d4b448229b1ab6",
          "message": "cleanup",
          "committedDate": "2024-07-02T13:16:19Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b4d05018ca485868d111d72cd8afd976a618c4c",
          "message": "other changes",
          "committedDate": "2024-07-02T16:36:33Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc4f2893cdc8a9c06624916fc328203f4ef5ee8e",
          "message": "merge",
          "committedDate": "2024-07-08T14:00:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b0d6f84779bcfc7cba0c55cbecd19539d518eb24",
          "message": "cleanup",
          "committedDate": "2024-07-08T15:46:23Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "661a87e751dce50ea4ca8fbe534068b671246f69",
          "message": "updates",
          "committedDate": "2024-07-09T09:35:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1bad01ac82a0ed111fe17b2a18c7eb89e42a6da4",
          "message": "add location support for other events",
          "committedDate": "2024-07-09T14:28:48Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0528ff385d0ad0329e74b596fd83fe8da9b29476",
          "message": "test cleanup",
          "committedDate": "2024-07-09T14:49:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4383090747f57b4942cccd237a5f4c8b099ae326",
          "message": "renaming",
          "committedDate": "2024-07-10T15:57:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "742eca3d05c0ead5043700e60a64e65ccfe7ded3",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/used_envVariable",
          "committedDate": "2024-07-10T15:57:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "962311b5524cb9477864ad16c9a9471c4bd6b048",
          "message": "reenable tests and fix messages duplication",
          "committedDate": "2024-07-11T13:19:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c5e314f14da95ec738205804f59823ca815d47d",
          "message": "Merge branch 'dotnet:main' into dev/ykovalova/used_envVariable",
          "committedDate": "2024-07-11T13:24:40Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55987f2d92fcf8c258b3f15909b15c96317d37d3",
          "message": "cleanup",
          "committedDate": "2024-07-11T13:31:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82a91e3f5774c2ef7b026ec88887daa60dcb789f",
          "message": "Merge branch 'dev/ykovalova/used_envVariable' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/used_envVariable",
          "committedDate": "2024-07-11T13:39:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c92d11d7873d1bf89899d1b36ffc7da69b71a1a7",
          "message": "return the order in BinaryLogRecordKind",
          "committedDate": "2024-07-11T16:24:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5dcd6eecd309f0d1357f3ce6e0b1b5f3e68b311c",
          "message": "remove IProperty2 and move to IProperty1",
          "committedDate": "2024-07-12T11:42:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2335852dc783dac59fdadec93e130762039a98bb",
          "message": "remove ExtendedEnvironmentVariableReadEventArgs and extend EnvironmentVariableReadEventArgs",
          "committedDate": "2024-07-12T13:16:00Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "066afd44ea4d23b5c4649acc001b118e5cddbd1d",
          "message": "reenable test + undo refactoring",
          "committedDate": "2024-07-12T13:41:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7adbcea812b00117625d43819c21624d019b90ed",
          "message": "fix review comments",
          "committedDate": "2024-07-12T15:21:59Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d135d804ad5fb0ff6ac7fac489e5e4bfa3b7419",
          "message": "cleanup",
          "committedDate": "2024-07-12T15:51:51Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "47b9d56d78bf1ad0e78cd78112585cf9583118a7",
          "message": "remove outdated EnvironmentVariableReadEvent transferring logic",
          "committedDate": "2024-07-12T17:16:46Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "621864b76301c749cbb1611cdf8bd9f0d96ad02d",
          "message": "adjust tests to the changes in EnvironmentVariableReadEventArgs",
          "committedDate": "2024-07-12T17:43:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f37aaea24dcbc495443753e1b555fc851bf22042",
          "message": "e2e test cleanup",
          "committedDate": "2024-07-15T12:48:20Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a663035f0f24089aebeaba1f530d186daacd2885",
          "message": "split editorconfig in tests",
          "committedDate": "2024-07-16T09:48:14Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7a44644daad862f3dc5166262bd849ec0901072",
          "message": "Merge branch 'dev/ykovalova/used_envVariable' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/used_envVariable",
          "committedDate": "2024-07-16T09:48:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86e1400ee51bf91b9869db1fca52b20219f29ee4",
          "message": "add root header",
          "committedDate": "2024-07-16T09:51:05Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a8233a674715c6b314bef6434f93b800e23804ab",
          "message": "Decrease default severity for the new check",
          "committedDate": "2024-07-16T12:26:22Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "experimental branch for perf check: https://github.com/dotnet/msbuild/tree/exp/ykovalova/extended_IProperty_check",
        "createdAt": "2024-07-12T13:47:19Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This change is crucial for tracking property location.",
              "createdAt": "2024-07-11T13:26:23Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1583,7 +1583,7 @@ private static object LookupProperty(IPropertyProvider<T> properties, string pro\n                         environmentDerivedProperty.loggingContext = propertiesUseTracker.LoggingContext;\n                     }\n \n-                    propertyValue = property.EvaluatedValueEscaped;\n+                    propertyValue = property.GetEvaluatedValueEscaped(elementLocation);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this one needed? BuildMessageEventArgs has Filename, Line and Column",
              "createdAt": "2024-07-12T09:08:19Z",
              "path": "src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,70 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+using System.Collections.Generic;\n+using System.IO;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the environment variable read event.\n+    /// </summary>\n+    public sealed class ExtendedEnvironmentVariableReadEventArgs : BuildMessageEventArgs",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we add the new members to the original interface?",
              "createdAt": "2024-07-12T09:11:32Z",
              "path": "src/Build/Evaluation/IProperty2.cs",
              "diffHunk": "@@ -0,0 +1,15 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Evaluation\n+{\n+    internal interface IProperty2 : IProperty",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this apply?",
              "createdAt": "2024-07-12T13:30:07Z",
              "path": "src/Build.UnitTests/BinaryLogger_Tests.cs",
              "diffHunk": "@@ -329,7 +329,7 @@ public void BinaryLoggerShouldSupportFilePathExplicitParameter()\n             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);\n         }\n \n-        [Fact]\n+        [Fact(Skip = \"TODO: reenable after applying changes in BinLog related to changing EnvironmentVariableRead -> ExtendedEnvironmentVariableRead\")]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra whitespace",
              "createdAt": "2024-07-12T13:30:22Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -896,7 +896,7 @@ private void RaiseBuildCheckEvent(object sender, BuildCheckEventArgs buildEvent)\n \n             RaiseAnyEvent(sender, buildEvent);\n         }\n-\n+      ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's add mention here as well: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck/Codes.md\r\n\r\nAnd let's mention in the description why it is considered a bad practice (it hurts reproducibility and isolate-ability of the builds)",
              "createdAt": "2024-07-12T13:32:16Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n+\n+internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n+{\n+    /// <summary>\n+    /// Contains the list of reported environment variables.\n+    /// </summary>\n+    private readonly IList<EnvironmentVariableIdentityKey> _environmentVariablesReported = new List<EnvironmentVariableIdentityKey>();\n+\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n+        \"BC0103\",",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's use hash set - list would get pretty expensive with the repetitive searching",
              "createdAt": "2024-07-12T13:34:55Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n+\n+internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n+{\n+    /// <summary>\n+    /// Contains the list of reported environment variables.\n+    /// </summary>\n+    private readonly IList<EnvironmentVariableIdentityKey> _environmentVariablesReported = new List<EnvironmentVariableIdentityKey>();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[Not actionable] Btw. nice way of deduplicating the reports - we might consider pulling it into the infra in the future - as it'd be helpful for other checks as well",
              "createdAt": "2024-07-12T13:36:54Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n+\n+internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n+{\n+    /// <summary>\n+    /// Contains the list of reported environment variables.\n+    /// </summary>\n+    private readonly IList<EnvironmentVariableIdentityKey> _environmentVariablesReported = new List<EnvironmentVariableIdentityKey>();\n+\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n+        \"BC0103\",\n+        \"NoEnvironmentVariablePropertyAnalyzer\",\n+        \"No implicit property derived from an environment variable should be used during the build\",\n+        \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.NoEnvironmentVariablePropertyAnalyzer\";\n+\n+    public override IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        // No custom configuration\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext) => registrationContext.RegisterEvaluatedPropertiesAction(ProcessEnvironmentVariableReadAction);\n+\n+    private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context)\n+    {\n+        if (context.Data.EvaluatedEnvironmentVariables.Count != 0)\n+        {\n+            foreach (var envVariableData in context.Data.EvaluatedEnvironmentVariables)\n+            {\n+                EnvironmentVariableIdentityKey identityKey = new(envVariableData.Key, envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Btw. there seems to be 2 levels of deduplication - here in infra and in the check itself - why is that?",
              "createdAt": "2024-07-12T13:40:25Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs",
              "diffHunk": "@@ -49,6 +38,7 @@ public TaskKey(BuildEventContext context)\n \n     private readonly SimpleProjectRootElementCache _cache = new SimpleProjectRootElementCache();\n     private readonly BuildCheckCentralContext _buildCheckCentralContext = buildCheckCentralContext;\n+    private Dictionary<string, (string EnvVarValue, string File, int Line, int Column)> _evaluatedEnvironmentVariables = new Dictionary<string, (string EnvVarValue, string File, int Line, int Column)>();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The different projects may have the same imports and it would cause the duplication of the env variables like these:\r\n\r\n```\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props (84,119): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildUserExtensionsPath' with value: 'C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (2578,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'LOCALAPPDATA' with value: 'C:\\Users\\ykovalova\\AppData\\Local'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets (97,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'USERPROFILE' with value: 'C:\\Users\\ykovalova'. Properties should be passed explicitly using the /p option.\r\n```\r\n\r\n",
              "createdAt": "2024-07-12T13:58:25Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs",
              "diffHunk": "@@ -49,6 +38,7 @@ public TaskKey(BuildEventContext context)\n \n     private readonly SimpleProjectRootElementCache _cache = new SimpleProjectRootElementCache();\n     private readonly BuildCheckCentralContext _buildCheckCentralContext = buildCheckCentralContext;\n+    private Dictionary<string, (string EnvVarValue, string File, int Line, int Column)> _evaluatedEnvironmentVariables = new Dictionary<string, (string EnvVarValue, string File, int Line, int Column)>();",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know the rest of file doesn't have comments. But this is going to be a public API - let's xml comment",
              "createdAt": "2024-07-12T13:42:06Z",
              "path": "src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs",
              "diffHunk": "@@ -12,9 +12,16 @@ namespace Microsoft.Build.Experimental.BuildCheck;\n public class EvaluatedPropertiesAnalysisData : AnalysisData\n {\n     internal EvaluatedPropertiesAnalysisData(\n-        string projectFilePath,\n-        IReadOnlyDictionary<string, string> evaluatedProperties) :\n-        base(projectFilePath) => EvaluatedProperties = evaluatedProperties;\n+            string projectFilePath,\n+            IReadOnlyDictionary<string, string> evaluatedProperties,\n+            IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)\n+            : base(projectFilePath)\n+    {\n+        EvaluatedProperties = evaluatedProperties;\n+        EvaluatedEnvironmentVariables = evaluatedEnvironmentVariables;\n+    }\n \n     public IReadOnlyDictionary<string, string> EvaluatedProperties { get; }\n+\n+    public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this need to be public?",
              "createdAt": "2024-07-12T13:43:06Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +110,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets or sets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "And is it used?\r\n\r\nSingle property can have multiple locations - so this is probably last on evaluated... but given the nature of this behavior - is that a usefull information. The info about initial property assignment location (https://github.com/dotnet/msbuild/issues/2711) and reassignemnets locations should probably be emitted/stored via separate events/data",
              "createdAt": "2024-07-12T13:47:24Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +110,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets or sets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get; set; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It will be used for other rules after extending https://github.com/dotnet/msbuild/blob/066afd44ea4d23b5c4649acc001b118e5cddbd1d/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs#L54\r\n\r\n(we were discussing it offline)",
              "createdAt": "2024-07-12T13:55:52Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +110,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets or sets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get; set; }",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "it has to be public :\r\nError (active)\tCS0737\t'ProjectProperty' does not implement interface member 'IProperty.Location'. 'ProjectProperty.Location' cannot implement an interface member because it is not public.",
              "createdAt": "2024-07-12T15:18:59Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +110,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets or sets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get; set; }",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarigy the reason of removing the root = true line from the editor config? \r\nIt is not exatly a blocker in CI, however on local envs it could result some inconsistencies while developing. ",
              "createdAt": "2024-07-15T12:29:12Z",
              "path": "src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig",
              "diffHunk": "@@ -0,0 +1,9 @@\n+[*.csproj]",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could you please clarify why do we need this line? ",
              "createdAt": "2024-07-15T12:30:35Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -144,73 +150,22 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO\n         out TransientTestFile projectFile,\n         string BC0101Severity = \"warning\")\n     {\n+        string testAssetsFolderName = \"SampleAnalyzerIntegrationTest\";\n         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);\n         TransientTestFile testFile = _env.CreateFile(workFolder, \"somefile\");\n \n-        string contents = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n-                \n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                  \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                 \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                    <MSBuild Projects=\".\\FooBar-Copy.csproj\" Targets=\"Hello\" />\n-                </Target>\n-                \n-            </Project>\n-            \"\"\";\n-\n-        string contents2 = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\">\n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                                 \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                                \n-                <ItemGroup>\n-                    <Reference Include=\"bin/foo.dll\" />\n-                </ItemGroup>\n-                                \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                </Target>\n-                               \n-            </Project>\n-            \"\"\";\n+        string contents = ReadAndAdjustProjectContent(\"Project1\");\n+        string contents2 = ReadAndAdjustProjectContent(\"Project2\");\n+\n         projectFile = _env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n         TransientTestFile projectFile2 = _env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n \n-        TransientTestFile config = _env.CreateFile(workFolder, \".editorconfig\",\n-            $\"\"\"\n-            root=true\n-\n-            [*.csproj]\n-            build_check.BC0101.Severity={BC0101Severity}\n+        string configContent = File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, \".editorconfig\")).Replace(\"BC0101Severity\", BC0101Severity);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "The BC0101Severity value can is passed to test as a parameter in `SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild` and can be different",
              "createdAt": "2024-07-15T12:48:02Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -144,73 +150,22 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO\n         out TransientTestFile projectFile,\n         string BC0101Severity = \"warning\")\n     {\n+        string testAssetsFolderName = \"SampleAnalyzerIntegrationTest\";\n         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);\n         TransientTestFile testFile = _env.CreateFile(workFolder, \"somefile\");\n \n-        string contents = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n-                \n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                  \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                 \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                    <MSBuild Projects=\".\\FooBar-Copy.csproj\" Targets=\"Hello\" />\n-                </Target>\n-                \n-            </Project>\n-            \"\"\";\n-\n-        string contents2 = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\">\n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                                 \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                                \n-                <ItemGroup>\n-                    <Reference Include=\"bin/foo.dll\" />\n-                </ItemGroup>\n-                                \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                </Target>\n-                               \n-            </Project>\n-            \"\"\";\n+        string contents = ReadAndAdjustProjectContent(\"Project1\");\n+        string contents2 = ReadAndAdjustProjectContent(\"Project2\");\n+\n         projectFile = _env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n         TransientTestFile projectFile2 = _env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n \n-        TransientTestFile config = _env.CreateFile(workFolder, \".editorconfig\",\n-            $\"\"\"\n-            root=true\n-\n-            [*.csproj]\n-            build_check.BC0101.Severity={BC0101Severity}\n+        string configContent = File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, \".editorconfig\")).Replace(\"BC0101Severity\", BC0101Severity);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Open for a discussion: If we expect it to be changed from test to test, shall we use new .editorconfig per test without reusing the template? \r\nWith increasing amount of BuildChecks and different scenarios it may result conflicting situations in future. \r\n",
              "createdAt": "2024-07-15T13:00:24Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -144,73 +150,22 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO\n         out TransientTestFile projectFile,\n         string BC0101Severity = \"warning\")\n     {\n+        string testAssetsFolderName = \"SampleAnalyzerIntegrationTest\";\n         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);\n         TransientTestFile testFile = _env.CreateFile(workFolder, \"somefile\");\n \n-        string contents = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n-                \n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                  \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                 \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                    <MSBuild Projects=\".\\FooBar-Copy.csproj\" Targets=\"Hello\" />\n-                </Target>\n-                \n-            </Project>\n-            \"\"\";\n-\n-        string contents2 = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\">\n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                                 \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                                \n-                <ItemGroup>\n-                    <Reference Include=\"bin/foo.dll\" />\n-                </ItemGroup>\n-                                \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                </Target>\n-                               \n-            </Project>\n-            \"\"\";\n+        string contents = ReadAndAdjustProjectContent(\"Project1\");\n+        string contents2 = ReadAndAdjustProjectContent(\"Project2\");\n+\n         projectFile = _env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n         TransientTestFile projectFile2 = _env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n \n-        TransientTestFile config = _env.CreateFile(workFolder, \".editorconfig\",\n-            $\"\"\"\n-            root=true\n-\n-            [*.csproj]\n-            build_check.BC0101.Severity={BC0101Severity}\n+        string configContent = File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, \".editorconfig\")).Replace(\"BC0101Severity\", BC0101Severity);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "It makes sense. Fixed :)",
              "createdAt": "2024-07-16T09:50:23Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -144,73 +150,22 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO\n         out TransientTestFile projectFile,\n         string BC0101Severity = \"warning\")\n     {\n+        string testAssetsFolderName = \"SampleAnalyzerIntegrationTest\";\n         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);\n         TransientTestFile testFile = _env.CreateFile(workFolder, \"somefile\");\n \n-        string contents = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Hello\">\n-                \n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                  \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                 \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                    <MSBuild Projects=\".\\FooBar-Copy.csproj\" Targets=\"Hello\" />\n-                </Target>\n-                \n-            </Project>\n-            \"\"\";\n-\n-        string contents2 = $\"\"\"\n-            <Project Sdk=\"Microsoft.NET.Sdk\">\n-                <PropertyGroup>\n-                    <OutputType>Exe</OutputType>\n-                    <TargetFramework>net8.0</TargetFramework>\n-                    <ImplicitUsings>enable</ImplicitUsings>\n-                    <Nullable>enable</Nullable>\n-                </PropertyGroup>\n-                                 \n-                <PropertyGroup Condition=\"$(Test) == true\">\n-                    <TestProperty>Test</TestProperty>\n-                </PropertyGroup>\n-                                \n-                <ItemGroup>\n-                    <Reference Include=\"bin/foo.dll\" />\n-                </ItemGroup>\n-                                \n-                <Target Name=\"Hello\">\n-                    <Message Importance=\"High\" Condition=\"$(Test2) == true\" Text=\"XYZABC\" />\n-                    <Copy SourceFiles=\"{testFile.Path}\" DestinationFolder=\"{workFolder.Path}\" />\n-                </Target>\n-                               \n-            </Project>\n-            \"\"\";\n+        string contents = ReadAndAdjustProjectContent(\"Project1\");\n+        string contents2 = ReadAndAdjustProjectContent(\"Project2\");\n+\n         projectFile = _env.CreateFile(workFolder, \"FooBar.csproj\", contents);\n         TransientTestFile projectFile2 = _env.CreateFile(workFolder, \"FooBar-Copy.csproj\", contents2);\n \n-        TransientTestFile config = _env.CreateFile(workFolder, \".editorconfig\",\n-            $\"\"\"\n-            root=true\n-\n-            [*.csproj]\n-            build_check.BC0101.Severity={BC0101Severity}\n+        string configContent = File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, \".editorconfig\")).Replace(\"BC0101Severity\", BC0101Severity);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we expect test to run this amount of time? ",
              "createdAt": "2024-07-15T12:38:03Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -41,7 +41,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n \n         string output = RunnerUtilities.ExecBootstrapedMSBuild(\n             $\"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore\" +\n-            (analysisRequested ? \" -analyze\" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 120_000);\n+            (analysisRequested ? \" -analyze\" : string.Empty), out bool success, false, _env.Output, timeoutMilliseconds: 12000_000);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Having that there are might be already a lot of projects with predefined instructions on using the env variables and etc, should we change the default severity to `Suggestion` instead? \r\n",
              "createdAt": "2024-07-16T11:49:26Z",
              "path": "src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using Microsoft.Build.Construction;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck.Analyzers;\n+\n+internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer\n+{\n+    /// <summary>\n+    /// Contains the list of reported environment variables.\n+    /// </summary>\n+    private readonly HashSet<EnvironmentVariableIdentityKey> _environmentVariablesReported = new HashSet<EnvironmentVariableIdentityKey>();\n+\n+    public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule(\n+        \"BC0103\",\n+        \"NoEnvironmentVariablePropertyAnalyzer\",\n+        \"No implicit property derived from an environment variable should be used during the build\",\n+        \"Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.\",\n+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "From reading the condition: \r\n`!Traits.LogAllEnvironmentVariables` => If the logAllEnvVars  trait is not enabled then log the env variable? \r\nHowever didn't check the actual value of the trait, just clarifying if I have correct understanding",
              "createdAt": "2024-07-16T11:52:43Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +115,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get => _location; }\n+\n+        string IProperty.GetEvaluatedValueEscaped(IElementLocation location)\n+        {\n+            if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "We have some rules defined around the logging environment variables described here:\r\nhttps://github.com/dotnet/msbuild/blob/fb681758a40376e93cd0c316274d4aeeda599f69/documentation/wiki/Binary-Log.md?plain=1#L43\r\n\r\nBriefly saying: this condition helps to report the events that influence MSBuild specifically.",
              "createdAt": "2024-07-16T12:09:36Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +115,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get => _location; }\n+\n+        string IProperty.GetEvaluatedValueEscaped(IElementLocation location)\n+        {\n+            if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Got it thank you! misunderstanding raised from the naming of the Trait itself, not it is clear thanks :) ",
              "createdAt": "2024-07-16T12:22:05Z",
              "path": "src/Build/Definition/ProjectProperty.cs",
              "diffHunk": "@@ -110,6 +115,27 @@ string IProperty.EvaluatedValueEscaped\n             }\n         }\n \n+        /// <summary>\n+        /// Gets object's location in xml file.\n+        /// </summary>\n+        public (string File, int Line, int Column) Location { get => _location; }\n+\n+        string IProperty.GetEvaluatedValueEscaped(IElementLocation location)\n+        {\n+            if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "ToLearn: Why it was changed? ",
              "createdAt": "2024-07-16T11:55:36Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -547,10 +545,15 @@ private BinaryLogRecordKind Write(PropertyInitialValueSetEventArgs e)\n \n         private BinaryLogRecordKind Write(EnvironmentVariableReadEventArgs e)\n         {\n-            WriteMessageFields(e, writeImportance: true);\n+            WriteMessageFields(e, writeImportance: false);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "The importance was never set on EnvironmentVariableReadEventArgs and was holding the default value.\r\nIn BinLog viewer it displays on the top, without respecting this property\r\n![image](https://github.com/user-attachments/assets/e7216a2f-675a-4611-a80f-a71c4f86e927)\r\nSo I concluded it's not needed.\r\n",
              "createdAt": "2024-07-16T12:05:18Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -547,10 +545,15 @@ private BinaryLogRecordKind Write(PropertyInitialValueSetEventArgs e)\n \n         private BinaryLogRecordKind Write(EnvironmentVariableReadEventArgs e)\n         {\n-            WriteMessageFields(e, writeImportance: true);\n+            WriteMessageFields(e, writeImportance: false);",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since we are enabling tests, if we have set the severity of the rule to `Error` shouldn't build fail?\r\nFrom the verification point of view: `success.ShouldBeTrue();`  it is green which is surprising since the task: https://github.com/dotnet/msbuild/issues/10071 was fixed already \r\n",
              "createdAt": "2024-07-16T12:32:41Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -51,21 +51,23 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n         {\n             output.ShouldContain(\"BC0101\");\n             output.ShouldContain(\"BC0102\");\n+            output.ShouldContain(\"BC0103\");\n         }\n         else\n         {\n             output.ShouldNotContain(\"BC0101\");\n             output.ShouldNotContain(\"BC0102\");\n+            output.ShouldNotContain(\"BC0103\");\n         }\n     }\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "this success stands for ExecBootstrapedMSBuild execution result (the second parameter)\r\n![image](https://github.com/user-attachments/assets/15549dbc-3a01-4605-9519-ba4ee374f4b0)\r\n\r\n\r\nthe test build execution result is displayed in output logs:\r\n```\r\n\r\nMSBuild version 17.12.0-dev-24366-01+86e1400ee for .NET Framework\r\nBinLogFilePath=C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\tmpf3702ec1fbec4767b72a4c9376943312.binlog\r\nCurrentUICulture=en-US\r\nBuild started 7/16/2024 2:42:43 PM.\r\n\r\nThe BuildCheck is enabled for this build.\r\nC:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props(84,119): message : C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild\r\nC:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj(10,19): message : FromEnvVariable\r\nC:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2578,5): message : C:\\Users\\ykovalova\\AppData\\Local\r\nC:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(97,5): message : C:\\Users\\ykovalova\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props (84,119): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildUserExtensionsPath' with value: 'C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (10,19): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'TEST' with value: 'FromEnvVariable'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (2578,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'LOCALAPPDATA' with value: 'C:\\Users\\ykovalova\\AppData\\Local'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets (97,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'USERPROFILE' with value: 'C:\\Users\\ykovalova'. Properties should be passed explicitly using the /p option.\r\n__________________________________________________\r\nProject \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (Restore target(s)):\r\n\r\nTarget _FilterRestoreGraphProjectInputItems:\r\n    C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props(84,119): message : C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild\r\n    C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj(10,19): message : FromEnvVariable\r\n    C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2578,5): message : C:\\Users\\ykovalova\\AppData\\Local\r\n    C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(97,5): message : C:\\Users\\ykovalova\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (_IsProjectRestoreSupported target(s)):\r\n\r\nTarget _GetAllRestoreProjectPathItems:\r\n    Determining projects to restore...\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (_GenerateRestoreProjectPathWalk target(s)):\r\n\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (_IsProjectRestoreSupported target(s)):\r\n\r\nTarget _GenerateRestoreGraph:\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (_GenerateRestoreGraphProjectEntry target(s)):\r\n\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (_GenerateProjectRestoreGraph target(s)):\r\n\r\nTarget Restore:\r\n    X.509 certificate chain validation will use the default trust store selected by .NET for code signing.\r\n    X.509 certificate chain validation will use the default trust store selected by .NET for timestamping.\r\n    Restoring packages for C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj...\r\n    Generating MSBuild file C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\FooBar.csproj.nuget.g.props.\r\n    Generating MSBuild file C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\FooBar.csproj.nuget.g.targets.\r\n    Writing assets file to disk. Path: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\project.assets.json\r\n    Restored C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (in 234 ms).\r\n    \r\n    NuGet Config files used:\r\n        C:\\Users\\ykovalova\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n        C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config\r\n        C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n    \r\n    Feeds used:\r\n        https://api.nuget.org/v3/index.json\r\n        C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n        C:\\Users\\ykovalova\\.nuget\\packages\\microsoft.build\\17.11.0-preview-24218-01\r\n        C:\\msbuild\\locator\\ykovalova\\MSBuildLocator\\src\\MSBuildLocator\\bin\\Release\r\n\r\nDetailed Build Summary\r\n======================\r\n    \r\n\r\n============================== Build Hierarchy (IDs represent configurations) =====================================================\r\nId                  : Exclusive Time   Total Time   Path (Targets)\r\n-----------------------------------------------------------------------------------------------------------------------------------\r\n0                   : 1.815s           2.204s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (Restore) \r\n| 1                 : 0.092s           0.092s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (_IsProjectRestoreSupported) \r\n| 2                 : 0.013s           0.013s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (_GenerateRestoreProjectPathWalk) \r\n| 3                 : 0.249s           0.249s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (_GenerateRestoreGraphProjectEntry) \r\n. 4                 : 0.033s           0.033s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (_GenerateProjectRestoreGraph) \r\n\r\n============================== Node Utilization (IDs represent configurations) ====================================================\r\nTimestamp:            2        Duration   Cumulative\r\n-----------------------------------------------------------------------------------------------------------------------------------\r\n638567305636750957:   0        1.213s     1.213s ........................\r\n638567305648880790:   1        0.091s     1.304s .\r\n638567305649794775:   0        0.048s     1.352s \r\n638567305650270101:   2        0.012s     1.364s \r\n638567305650390127:   0        0.012s     1.376s \r\n638567305650510113:   3        0.249s     1.625s ....\r\n638567305653000473:   0        0.007s     1.632s \r\n638567305653070541:   4        0.033s     1.665s \r\n638567305653401544:   0        0.544s     2.209s ..........\r\n-----------------------------------------------------------------------------------------------------------------------------------\r\nUtilization:          100.0    Average Utilization: 100.0\r\nC:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\FooBar.csproj.nuget.g.props(7,5): message : C:\\Users\\ykovalova\r\nC:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props(84,119): message : C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild\r\nC:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj(10,19): message : FromEnvVariable\r\nC:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2578,5): message : C:\\Users\\ykovalova\\AppData\\Local\r\n__________________________________________________\r\nProject \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" (default targets):\r\n\r\nTarget _CheckForNETCoreSdkIsPreview:\r\n    C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(311,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj]\r\nTarget Hello:\r\n    C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props(84,119): message : C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild\r\n    C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar-Copy.csproj(9,20): message : FromEnvVariable\r\n    C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2578,5): message : C:\\Users\\ykovalova\\AppData\\Local\r\n    C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(97,5): message : C:\\Users\\ykovalova\r\n    MSBUILD : error BC0101: https://aka.ms/buildcheck/codes#BC0101 - Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\bin\\Debug\\net8.0\\.\r\n    MSBUILD : error BC0101: https://aka.ms/buildcheck/codes#BC0101 - Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\Debug\\net8.0\\.\r\n    __________________________________________________\r\n    Project \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj\" is building \"C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar-Copy.csproj\" (Hello target(s)):\r\n\r\n    Target Hello:\r\n      MSBUILD : warning BC0102: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar-Copy.csproj (19,9): https://aka.ms/buildcheck/codes#BC0102 - Tasks Copy and Copy from projects FooBar-Copy.csproj and FooBar.csproj write the same file: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\tmpeffc580b0e73494e91271bbb67951ea5.somefile.\r\n    Done building target \"Hello\" in project \"FooBar-Copy.csproj\".\r\n\r\n    Done building project \"FooBar-Copy.csproj\".\r\n    FromEnvVariable\r\nDone building target \"Hello\" in project \"FooBar.csproj\".\r\n\r\nDone building project \"FooBar.csproj\".\r\n\r\nDetailed Build Summary\r\n======================\r\n    \r\n\r\n============================== Build Hierarchy (IDs represent configurations) =====================================================\r\nId                  : Exclusive Time   Total Time   Path (Targets)\r\n-----------------------------------------------------------------------------------------------------------------------------------\r\n5                   : 0.130s           0.206s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj () \r\n. 6                 : 0.076s           0.076s       C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar-Copy.csproj (Hello) \r\n\r\n============================== Node Utilization (IDs represent configurations) ====================================================\r\nTimestamp:            2        Duration   Cumulative\r\n-----------------------------------------------------------------------------------------------------------------------------------\r\n638567305636750957:   0        1.213s     1.213s ........................\r\n638567305648880790:   1        0.091s     1.304s .\r\n638567305649794775:   0        0.048s     1.352s \r\n638567305650270101:   2        0.012s     1.364s \r\n638567305650390127:   0        0.012s     1.376s \r\n638567305650510113:   3        0.249s     1.625s ....\r\n638567305653000473:   0        0.007s     1.632s \r\n638567305653070541:   4        0.033s     1.665s \r\n638567305653401544:   0        0.544s     2.209s ..........\r\n638567305658967197:   5        0.126s     2.348s ..\r\n638567305660229980:   6        0.076s     2.424s .\r\n638567305660989990:   5        0.004s     2.428s \r\n-----------------------------------------------------------------------------------------------------------------------------------\r\nUtilization:          99.5     Average Utilization: 99.5\r\n\r\n\r\nBuild FAILED.\r\n\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Microsoft.Common.props (84,119): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildUserExtensionsPath' with value: 'C:\\Users\\ykovalova\\AppData\\Local\\Microsoft\\MSBuild'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar.csproj (10,19): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'TEST' with value: 'FromEnvVariable'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (2578,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'LOCALAPPDATA' with value: 'C:\\Users\\ykovalova\\AppData\\Local'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0103: C:\\Program Files\\dotnet\\sdk\\8.0.400-preview.0.24312.1\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets (97,5): https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'USERPROFILE' with value: 'C:\\Users\\ykovalova'. Properties should be passed explicitly using the /p option.\r\nMSBUILD : warning BC0102: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\FooBar-Copy.csproj (19,9): https://aka.ms/buildcheck/codes#BC0102 - Tasks Copy and Copy from projects FooBar-Copy.csproj and FooBar.csproj write the same file: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\tmpeffc580b0e73494e91271bbb67951ea5.somefile.\r\nMSBUILD : error BC0101: https://aka.ms/buildcheck/codes#BC0101 - Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\bin\\Debug\\net8.0\\.\r\nMSBUILD : error BC0101: https://aka.ms/buildcheck/codes#BC0101 - Projects FooBar-Copy.csproj and FooBar.csproj have conflicting output paths: C:\\Users\\ykovalova\\AppData\\Local\\Temp\\3nlpffaq.frp\\MSBuildTemp\\Temporary8d64c168891940f5a512db9092ed44d0\\obj\\Debug\\net8.0\\.\r\n    5 Warning(s)\r\n    2 Error(s)\r\n\r\nTime Elapsed 00:00:02.73\r\n\r\nProcess ID is 30252\r\n```\r\n",
              "createdAt": "2024-07-16T12:44:12Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -51,21 +51,23 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n         {\n             output.ShouldContain(\"BC0101\");\n             output.ShouldContain(\"BC0102\");\n+            output.ShouldContain(\"BC0103\");\n         }\n         else\n         {\n             output.ShouldNotContain(\"BC0101\");\n             output.ShouldNotContain(\"BC0102\");\n+            output.ShouldNotContain(\"BC0103\");\n         }\n     }\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "True, thank you. ",
              "createdAt": "2024-07-16T12:56:13Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -51,21 +51,23 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n         {\n             output.ShouldContain(\"BC0101\");\n             output.ShouldContain(\"BC0102\");\n+            output.ShouldContain(\"BC0103\");\n         }\n         else\n         {\n             output.ShouldNotContain(\"BC0101\");\n             output.ShouldNotContain(\"BC0102\");\n+            output.ShouldNotContain(\"BC0103\");\n         }\n     }\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I would add more tests once this is merged: \r\n- Verify that `Severity` set to `None` turns off the BuildCheck Rule\r\n- Per https://github.com/dotnet/msbuild/pull/10227#issuecomment-2162446783 add actual verification of the changes\r\n\r\nLet me file the items for that, thank you",
              "createdAt": "2024-07-16T12:59:45Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -51,21 +51,23 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n         {\n             output.ShouldContain(\"BC0101\");\n             output.ShouldContain(\"BC0102\");\n+            output.ShouldContain(\"BC0103\");\n         }\n         else\n         {\n             output.ShouldNotContain(\"BC0101\");\n             output.ShouldNotContain(\"BC0102\");\n+            output.ShouldNotContain(\"BC0103\");\n         }\n     }\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "- https://github.com/dotnet/msbuild/issues/10386\r\n- https://github.com/dotnet/msbuild/issues/10385",
              "createdAt": "2024-07-16T13:08:45Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -51,21 +51,23 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces\n         {\n             output.ShouldContain(\"BC0101\");\n             output.ShouldContain(\"BC0102\");\n+            output.ShouldContain(\"BC0103\");\n         }\n         else\n         {\n             output.ShouldNotContain(\"BC0101\");\n             output.ShouldNotContain(\"BC0102\");\n+            output.ShouldNotContain(\"BC0103\");\n         }\n     }\n \n-    [Theory(Skip = \"https://github.com/dotnet/msbuild/issues/10036\")]",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}