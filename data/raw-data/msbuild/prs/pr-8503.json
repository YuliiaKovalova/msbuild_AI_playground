{
  "number": 8503,
  "title": "Detect .NET SDK & VSLANG Custom Language Settings & Apply To MSBuild",
  "body": "\r\nFixes  https://github.com/dotnet/msbuild/issues/1596\r\n\r\n\r\n### Changes Made\r\n\r\nSetConsoleUI now calls into a helper which sets the encoding to support non-en languages and checks if an environment variable exists to change the language to.\r\n\r\n### Testing\r\nSetting DOTNET_CLI_UI_LANGUAGE=ja now changes msbuild correctly:\r\n![image](https://user-images.githubusercontent.com/23152278/221717457-7dd1e877-d317-4eb3-82f7-69f639332f40.png)\r\n\r\nDoing a complicated build (aka building MSBuild) to use multiple threads shows other threads seem to use the same UI culture:\r\n\r\n![image](https://user-images.githubusercontent.com/23152278/221717580-90b56c2a-bf6e-404c-9c52-887870147d4f.png)\r\n\r\nSee that chcp remains the same after execution:\r\n![image](https://user-images.githubusercontent.com/23152278/221720974-b5a0b6f5-aaa2-40b2-9c9f-fc5baaa6d9a8.png)\r\n\r\n(Was set to 65001 temporarily but back to the original page before execution.) \r\n\r\n### Notes\r\n\r\nMuch of this code is a port of this code: https://github.com/dotnet/sdk/pull/29755\r\nThere are some details about the code here. \r\n\r\n[!] In addition, it will introduce a breaking change for msbuild just like the SDK.\r\nThe break is documented here for the sdk: https://github.com/dotnet/docs/issues/34250",
  "state": "MERGED",
  "createdAt": "2023-02-28T00:41:09Z",
  "updatedAt": "2023-05-15T18:01:58Z",
  "closedAt": "2023-05-12T02:58:37Z",
  "mergedAt": "2023-05-12T02:58:37Z",
  "additions": 264,
  "deletions": 17,
  "changedFiles": 10,
  "headRefName": "nagilson-cli-language",
  "isDraft": false,
  "author": {
    "login": "nagilson"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Breaking Change",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0f58db283cd71212da3138af7b46bec5c1e88d64",
          "message": "Add logic to change the encoding and detect .NET SDK and VS language settings.",
          "committedDate": "2023-02-28T00:03:10Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3a3db4d8d95d66051e57247ef19e90035aa45d0b",
          "message": "Restore the original encoding so msbuild does not impact encoding of other programs on the same console.\n\nNote that we could probably do this better. I tried to create a function to do so but because the SetConsoleUI is static this was the least ugly/simple way to do it.\nOpen to other proposals.",
          "committedDate": "2023-02-28T00:32:06Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4595a97a47fbdf457a7a01bfb715172fd769247",
          "message": "Add a unit test for external ui language overrides",
          "committedDate": "2023-02-28T00:43:52Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc1760370edb9442a7877f40201cc33a5cabf32e",
          "message": "Merge remote-tracking branch 'upstream/main' into nagilson-cli-language",
          "committedDate": "2023-02-28T00:46:29Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa715d1d22600f5d57b2538c2ba69e4a4623c5e6",
          "message": "Fix the merge conflict that vscode did not fix (grumpiness)",
          "committedDate": "2023-02-28T00:48:43Z",
          "author": {
            "name": "Noah Gilson",
            "email": "OTAKUPENGUINOP@GMAIL.COM"
          }
        }
      },
      {
        "commit": {
          "oid": "cc30ce9c0267607c7be1503882400f71271c8c92",
          "message": "Use langword=null for Sandcastle  and VsDocMan\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-02-28T17:18:02Z",
          "author": {
            "name": "Noah Gilson",
            "email": "OTAKUPENGUINOP@GMAIL.COM"
          }
        }
      },
      {
        "commit": {
          "oid": "1058b5970c55c5023056c790531b7fd7fc7796d1",
          "message": "Respond to feedback. But it's not done yet.",
          "committedDate": "2023-03-06T21:43:56Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01b381b69cfee78453d2ec64122e2587d37ccdfb",
          "message": "Limit the scope of the breaking change so windows who dont support utf8 dont get it by default unless opted in and introduce encoding restorer to prevent msbuild from changing the encoding.",
          "committedDate": "2023-03-08T23:38:16Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8487af66b27970a8976e3981528d02bc4f3d228c",
          "message": "Remove comment that I didn't hit ctrl S on, automatic encoding restorer takes care of this",
          "committedDate": "2023-03-08T23:42:20Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "747ff0b8c6a853ea484640e669d5ec0f139f7615",
          "message": "Move encoding restorer to a non public API\n\nCo-Authored-By: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-03-09T00:45:24Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b3b23dba53371443fd83b8d7ef9681714fcb1cd",
          "message": "Use a name instead of _ for the discard variable bc the compiler gets confused",
          "committedDate": "2023-03-09T00:56:44Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d52714bf68280669ba46ecafa4fb000c721b8c8f",
          "message": "Dont use runtimeinfo as its not in net 472 full framework even tho its doced as being in net 472",
          "committedDate": "2023-03-09T01:09:27Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b20919f38a2b7e1cd1a4b35e57229d17cfffe791",
          "message": "Move the encoding restorer so it's not part of a public api and builds for net 472",
          "committedDate": "2023-03-09T19:10:51Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8d0e14b7ce85364bbdef6605a9370a07f7e09a0b",
          "message": "Consider that full framework must set all culture variables for correct behavior",
          "committedDate": "2023-03-09T19:47:09Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d96551c0a53b96bb6f836739dd1dee39c3d51bed",
          "message": "Try to make full framework correctly change the culture :(",
          "committedDate": "2023-03-13T17:03:39Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b1c074ec341b77720f6c13135338772a5b69466",
          "message": "Check to see if the windows version of build machines doesnt support utf 8",
          "committedDate": "2023-03-13T20:47:02Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a0629289839e1ed41d3a90fc58f9d8a08020727",
          "message": "Dont look for vslang because vs can manage the lang settings itself already and also fix a test to use en because bild machines are apparently in french sometimes???",
          "committedDate": "2023-03-13T23:23:18Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60ee6bccb2974e082b2f3d6a385e811bd29eb0f6",
          "message": "Make the encoding change happen earlier than msbuild use server stuff",
          "committedDate": "2023-03-14T16:29:35Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "992fb7e6c6f4f7eb6cd23570b11db09b3c27b785",
          "message": "Code clean up for dotnet cli language feature",
          "committedDate": "2023-03-14T16:48:58Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "048bd20ddf68d838203e6f0b72c05ff3e3423c1e",
          "message": "Respond to PR feedback",
          "committedDate": "2023-03-15T16:47:48Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18f34d5ae7a75b531055c1ebc6bbb46b90e47446",
          "message": "Follow the Microsoft style of using the string alias over System.String\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-03-23T20:55:56Z",
          "author": {
            "name": "Noah Gilson",
            "email": "OTAKUPENGUINOP@GMAIL.COM"
          }
        }
      },
      {
        "commit": {
          "oid": "881305ca8cb028e15d56c30a7ad3ce895c408f9c",
          "message": "prepare to add encoding change to logs as well",
          "committedDate": "2023-05-04T18:22:04Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cfe0c6c8eeb7ba3c15b56d59fff1ed2dd69a68dd",
          "message": "Merge remote-tracking branch 'upstream/main' into nagilson-cli-language",
          "committedDate": "2023-05-04T18:22:46Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "45961ed782130fb056108b0c83b3e8ef399049e2",
          "message": "Get the encoding to change log files as well and move the encoding up before a debugger is attached so that build errors wont have a bad encoding",
          "committedDate": "2023-05-04T22:25:11Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "30233081696650cdcac52cfaa63bd6f48fcc7954",
          "message": "Merge remote-tracking branch 'upstream/main' into nagilson-cli-language",
          "committedDate": "2023-05-09T16:19:07Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41d9da63b236d7b4f3b70377200048c6f493cb76",
          "message": "Add environment variable to disable/opt-out of the new feature",
          "committedDate": "2023-05-09T16:48:06Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa5a55b1fdd9988437c8ad437d5075f09877e83e",
          "message": "Move the utf8 encoding change feature flag to the change wave",
          "committedDate": "2023-05-09T20:47:05Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c2db937ab0824443566473fe80776c2a48ad2c5",
          "message": "Remove some no-longer-required usings",
          "committedDate": "2023-05-09T21:39:23Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28b8bd056b703141c66362cad7c58dce5089b508",
          "message": "Remove the english language and redirect in the help link\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-05-09T21:53:07Z",
          "author": {
            "name": "Noah Gilson",
            "email": "OTAKUPENGUINOP@GMAIL.COM"
          }
        }
      },
      {
        "commit": {
          "oid": "e61c559b8f4af45b014215911ed8f6614aa7d9d4",
          "message": "Consider that a user may delete windows registry keys",
          "committedDate": "2023-05-09T22:40:07Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16a0acde39b89053ad689fe520b0d0166f6c41d5",
          "message": "Merge branch 'nagilson-cli-language' of https://github.com/nagilson/msbuild into nagilson-cli-language",
          "committedDate": "2023-05-10T18:25:07Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7946399a67c57130916f9ba9ede8d09c2e0d39e",
          "message": "update test to expect the fallback culture instead of the original culture as the existing code could change the culture to the fallback culture instead of the original culture",
          "committedDate": "2023-05-10T18:32:13Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "86cf4e55d36dd7c2792ae4f5189c73b36f1c2098",
          "message": "Merge remote-tracking branch 'upstream/main' into nagilson-cli-language",
          "committedDate": "2023-05-10T18:34:32Z",
          "author": {
            "name": "Noah Gilson",
            "email": "noahgilson@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Can you expand on the breaking change some more, please? Is it only that we now respect VSLANG and will emit UTF-8 when it is specified?\r\n\r\nWhen you use `VSLANG` or `DOTNET_CLI_UI_LANGUAGE` it will change the encoding to UTF-8. But that was only officially supported in the Windows 10 (November 2019 update). What happens if you set the environment variable in a version of windows 10 below that is undefined to me. I should change this to only run if `Environment.OSVersion`'s last string is less than the 2019 Nov build number: `18363`. I think we would tell people then to set the code page themselves if they are out of date.\r\n\r\nIf we didn't do that (which is what the SDK is currently doing): probably it will work for some versions, but maybe with some encoding bugs from Windows. Maybe it will fail/reject the encoding in very early versions. Outside of VS at the very least, if you set the environment variable without the encoding it would give you a bunch of ??? or garbled missing-no's.\r\n\r\nFor VS it is more ... hrmmm. For non-Windows it should not matter, encoding is not an issue. For Win 8 and below setting the environment variables will probably result in garbage outputs until the user manually edits the code page. Thinking about it more, maybe we should try to set the language specific encoding for these languages. But each language has its own quirks with characters output by MSBuild that probably won't work well, and emojis (like the live logger) will be completely broken.\r\n\r\nIn addition, I need to get to your point in `2)` later. But from the testing I did yesterday the chcp change is preserved upon MsBuild exit. If MSBuild is killed and doesn't get to restore the code page, for programs on the same console I believe they will be impacted by the encoding change if they don't manage their own encoding. This could cause various breakages, exemplified by one posted by the customer linked above. In addition, even for modern windows 10 versions, I would expect there to be legacy / custom consoles that for whatever reason don't work well with the UTF-8 encoding.",
        "createdAt": "2023-02-28T17:56:15Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "This is waiting for https://github.com/dotnet/sdk/pull/30963 to be merged. Once that's merged, I will ping again for review.",
        "createdAt": "2023-03-07T00:33:35Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "For 1) Now, we only set utf-8 if its officially supported or opted in. And we also restore the encoding. So the breaking change is that if VS doesn't set the encoding for win 8 or below then the characters could become garbled for non-en scenarios. Let's discuss this.\r\n\r\nFor 2) It doesn't work and that may relate to the VS issue in 1. This is because xmake is skipped in these cases per @Forgind. I've pinged you offline @rainersigwald.",
        "createdAt": "2023-03-09T19:42:21Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "@rokonec what do you think the best way to change the stdout codepage in the msbuild client is, based primarily on an environment variable? Should it be done in the client init code, or maybe we should add a new `ServerChangeCodepage` packet type?",
        "createdAt": "2023-03-09T20:36:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald This is good to consider, though we also must consider the VS Case not calling into XMake. What about BuildManager's BeginBuild methods? \r\n\r\ncc @Forgind ",
        "createdAt": "2023-03-09T22:59:44Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "> we also must consider the VS Case not calling into XMake. What about BuildManager's BeginBuild methods?\r\n\r\nIf you're using the API, the log events should always be standard 16-bit UCS-2 .NET strings and shouldn't care about codepage one way or another.\r\n\r\nDoes the \"output window\" in VS have problems with encodings in these cases?",
        "createdAt": "2023-03-09T23:08:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Does the \"output window\" in VS have problems with encodings in these cases?\r\n\r\nNope! Tested it myself at least and it didn't.... there were issues but they all came from calling into `dotnet` first, so seems like it was an SDK thing.\r\n\r\nSo @rokonec sorry for the delay, please let us know your opinion on the above as it still doesn't work in msbuild server.\r\n> @rokonec what do you think the best way to change the stdout codepage in the msbuild client is, based primarily on an environment variable? Should it be done in the client init code, or maybe we should add a new ServerChangeCodepage packet type?\r\n\r\n",
        "createdAt": "2023-03-13T22:44:56Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "I would recommend to move whole logic around `SetConsoleUI()` from `Execute` to `Main` before the `if (server)` , about here https://github.com/dotnet/msbuild/blob/5a0629289839e1ed41d3a90fc58f9d8a08020727/src/MSBuild/XMake.cs#L236\r\nso it will become on both, classic and server path.\r\n\r\nThat shall cause to properly set `CurrentThread.UICulture` which is then passed to server in build command, and all should work \"fine\" since.\r\n\r\nHowever, if it does not work \"fine\" for server scenarios, please focus on another aspects of this PR and I volunteer to fixing it for server in another consequent PR.\r\n",
        "createdAt": "2023-03-14T09:56:02Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Thanks @rokonec, looks like it works now with MSBUILDUSESERVER=1\r\n![image](https://user-images.githubusercontent.com/23152278/225072786-e6902905-ef1c-4f4f-bb06-02f8b2c92a23.png)\r\nSimple solution :)",
        "createdAt": "2023-03-14T16:29:15Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "@rainersigwald Ok, this is ready for review again. Now it works in msbuild server and the breaking change is only what you said, in that MSBuild will now use UTF-8 when supported and its language will change if the SDK language variable is set.",
        "createdAt": "2023-03-14T18:04:51Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "The encoding needs to be added to logging as well before this is merged.",
        "createdAt": "2023-04-11T16:51:20Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "I was able to get it working with logs!\r\n![image](https://user-images.githubusercontent.com/23152278/236342739-335d1a83-cd43-4757-b344-4d8df0709f8c.png)\r\n\r\nA new trade-off I made: I put the code to occur BEFORE debugging so it is literally the first thing to run. If I didn't do that and you got build errors in a different language, they would be junk. Maybe that's acceptable if we want to be obstinate on the principle that NOTHING should run before the debug attachment code.\r\n\r\nWhat it looks like if we move it back and you get a build error building msbuild:\r\n![image](https://user-images.githubusercontent.com/23152278/236342997-c11f62c0-b4fb-4df4-bbfa-e1dac9fb9aaf.png)\r\n\r\nWhat it looks like now: \r\n![image](https://user-images.githubusercontent.com/23152278/236349239-3d0f607b-28f3-4296-9a37-743dc1c2d854.png)\r\n",
        "createdAt": "2023-05-04T22:28:27Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "When working on this I happened to discover a deadlock (I think) that is unrelated to my changes.\r\n\r\nYou have to set `set MSBUILDDEBUGONSTART=2` and then do `artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\MSBuild.exe MSBuild.Dev.slnf /m \u00a0/flp:v=diag`\r\n\r\nThis happens even on main without my changes, then MSBuild will hang forever in a deadlock waiting for the _syncLock. If you press ctrl-c it will say `Attempting to cancel the build` but no matter how many times you press it or wait youll need to task kill it. The thread window shows all the threads are waiting.",
        "createdAt": "2023-05-04T22:35:42Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "\ud83e\udd73 ",
        "createdAt": "2023-05-09T21:43:01Z",
        "author": {
          "login": "nagilson"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Please link to a commit, rather than a branch, since it may move. Hitting `y` on the page should do the trick, or select \"permalink\" from the UI.",
              "createdAt": "2023-02-28T16:44:48Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,74 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect those variables.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// DOTNET_CLI_UI_LANGUAGE > VSLANG. Returns null if none are set.</returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && // Encoding is only an issue on Windows\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    Environment.OSVersion.Version.Major >= 10 // UTF-8 is only officially supported on 10+.\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        /// <summary>\n+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE and VSLANG).\n+        /// Does NOT check System Locale or OS Display Language.\n+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks, I was wondering what to do about if that happened.",
              "createdAt": "2023-03-06T21:42:59Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,74 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect those variables.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// DOTNET_CLI_UI_LANGUAGE > VSLANG. Returns null if none are set.</returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && // Encoding is only an issue on Windows\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    Environment.OSVersion.Version.Major >= 10 // UTF-8 is only officially supported on 10+.\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        /// <summary>\n+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE and VSLANG).\n+        /// Does NOT check System Locale or OS Display Language.\n+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs.",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit\r\n\r\n```suggestion\r\n        /// DOTNET_CLI_UI_LANGUAGE > VSLANG. Returns <see langword=\"null\"/> if none are set.</returns>\r\n```",
              "createdAt": "2023-02-28T16:46:49Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,74 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect those variables.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// DOTNET_CLI_UI_LANGUAGE > VSLANG. Returns null if none are set.</returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this. Shouldn't our program exiting reset this to whatever was present before?",
              "createdAt": "2023-02-28T16:47:44Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -832,6 +836,10 @@ private static void DebuggerLaunchCheck()\n                     // if there was no need to start the build e.g. because /help was triggered\n                     // do nothing\n                 }\n+\n+                // The encoding may be changed to support non-en characters for environment variables set by external tools. We don't want to impact other programs on the console.\n+                Console.OutputEncoding = originalOutputEncoding;\n+                Console.InputEncoding = originalInputEncoding;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That does not happen.\r\nYou can see in the SDK: \r\n![image](https://user-images.githubusercontent.com/23152278/223586003-0bc01908-535a-45f1-b4c9-d74b8bccd56f.png)\r\nIf the code to change it back at the end is disabled, even upon exit running chcp shows the code page is changed. There was also a customer who reported this as an issue (so not just a dogfood thing.) Unfortunately, there is no doc for this.",
              "createdAt": "2023-03-08T00:18:02Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -832,6 +836,10 @@ private static void DebuggerLaunchCheck()\n                     // if there was no need to start the build e.g. because /help was triggered\n                     // do nothing\n                 }\n+\n+                // The encoding may be changed to support non-en characters for environment variables set by external tools. We don't want to impact other programs on the console.\n+                Console.OutputEncoding = originalOutputEncoding;\n+                Console.InputEncoding = originalInputEncoding;",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be done in a try/finally in the case that the test fails (or use the disposable test environment to do that automatically).",
              "createdAt": "2023-02-28T16:51:50Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -642,6 +642,35 @@ public void SetConsoleUICulture()\n             thisThread.CurrentUICulture = originalUICulture;\n         }\n \n+\n+        [Fact]\n+        public void ConsoleUIRespectsSDKLanguage()\n+        {\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+\n+            // Save the current environment info so it can be restored.\n+            var originalUILanguage = Environment.GetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE);\n+            Encoding originalOutputEncoding = Console.OutputEncoding;\n+            Encoding originalInputEncoding = Console.InputEncoding;\n+            Thread thisThread = Thread.CurrentThread;\n+            CultureInfo originalUICulture = thisThread.CurrentUICulture;\n+\n+            // Set the UI language based on the SDK environment var.\n+            Environment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, \"ja\"); // japanese chose arbitrarily.\n+\n+            MSBuildApp.SetConsoleUI();\n+\n+            Assert.Equal(thisThread.CurrentUICulture, new CultureInfo(\"ja\"));\n+            Assert.Equal(65001, System.Console.OutputEncoding.CodePage); // utf 8 enabled for correct rendering.\n+\n+            // Restore the current UI culture back to the way it was at the beginning of this unit test.\n+            thisThread.CurrentUICulture = originalUICulture;\n+            Environment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, originalUILanguage);\n+            // MSbuild should also restore the encoding upon exit, but we don't create that context here.\n+            Console.OutputEncoding = originalOutputEncoding;\n+            Console.InputEncoding = originalInputEncoding;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You won't have to capture and restore these explicitly if you do\r\n\r\n```c#\r\nusing TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();\r\ntestEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, ...);\r\n```",
              "createdAt": "2023-02-28T16:54:23Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -642,6 +642,35 @@ public void SetConsoleUICulture()\n             thisThread.CurrentUICulture = originalUICulture;\n         }\n \n+\n+        [Fact]\n+        public void ConsoleUIRespectsSDKLanguage()\n+        {\n+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);\n+\n+            // Save the current environment info so it can be restored.\n+            var originalUILanguage = Environment.GetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If Windows is the only OS where we need it anyway, can we just simplify this to IsWindowsOS()? Or better yet, NativeMethodsShared.IsWindows();",
              "createdAt": "2023-03-14T23:36:34Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That's a good suggestion. For now we only change the encoding on Windows. But IMO the more correct thing to do, which is what the current code does, is to restore the encoding any time it is supported to change it. (In case other encoding changes are made in the future, and nobody reads this code to notice if it only applied to windows.)\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.console.inputencoding?view=netframework-4.7.2 It looks like since Android, IOS, Browser, tvOS aren't supported until NET 5 so `InputEncoding` and co are fine to use regardless of OS for Full Framework.\r\n\r\nI'll change it to always run on net472. Let me know if you disagree",
              "createdAt": "2023-03-15T16:30:55Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nConsistency between _ or no _?",
              "createdAt": "2023-03-14T23:36:58Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Again, I don't think we support MSBuild running in a browser...",
              "createdAt": "2023-03-14T23:37:24Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif\n+                {\n+                    _originalOutputEncoding = Console.OutputEncoding;\n+                    outputEncodingAccessible = true;\n+                    if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "IMO it is better to be prepared for this rather than not",
              "createdAt": "2023-03-15T16:43:22Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif\n+                {\n+                    _originalOutputEncoding = Console.OutputEncoding;\n+                    outputEncodingAccessible = true;\n+                    if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there any reason you need the booleans at all, or could you just simplify this to use _originalOutputEncoding?",
              "createdAt": "2023-03-14T23:38:44Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif\n+                {\n+                    _originalOutputEncoding = Console.OutputEncoding;\n+                    outputEncodingAccessible = true;\n+                    if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.\n+#else\n+                        IsWindowsOS())\n+#endif\n+                    {\n+                        _originalInputEncoding = Console.InputEncoding;\n+                        inputEncodingAccessible = true;\n+                    }\n+                }\n+            }\n+            catch (Exception ex) when (ex is IOException || ex is SecurityException)\n+            {\n+                // The encoding is unavailable. Do nothing.\n+            }\n+        }\n+\n+        public void Dispose()\n+        {\n+            try\n+            {\n+                if (outputEncodingAccessible && _originalOutputEncoding != null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good point \ud83d\ude04 thanks!",
              "createdAt": "2023-03-15T16:40:18Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,89 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        private bool outputEncodingAccessible = false;\n+        private bool inputEncodingAccessible = false;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+                if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.\n+#else\n+                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.\n+#endif\n+                {\n+                    _originalOutputEncoding = Console.OutputEncoding;\n+                    outputEncodingAccessible = true;\n+                    if (\n+#if NET7_0_OR_GREATER\n+                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.\n+#else\n+                        IsWindowsOS())\n+#endif\n+                    {\n+                        _originalInputEncoding = Console.InputEncoding;\n+                        inputEncodingAccessible = true;\n+                    }\n+                }\n+            }\n+            catch (Exception ex) when (ex is IOException || ex is SecurityException)\n+            {\n+                // The encoding is unavailable. Do nothing.\n+            }\n+        }\n+\n+        public void Dispose()\n+        {\n+            try\n+            {\n+                if (outputEncodingAccessible && _originalOutputEncoding != null)",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\nAdd a space before each comment",
              "createdAt": "2023-03-14T23:42:23Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1635,14 +1637,19 @@ internal static void SetConsoleUI()\n             Thread thisThread = Thread.CurrentThread;\n \n             // Eliminate the complex script cultures from the language selection.\n-            thisThread.CurrentUICulture = CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();\n+            var desiredCulture = GetExternalOverridenUILanguageIfSupportableWithEncoding() ?? CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();\n+            thisThread.CurrentUICulture = desiredCulture;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            return string.Equals(Environment.GetEnvironmentVariable(\"DOTNET_CLI_FORCE_UTF8_ENCODING\"), \"true\", StringComparison.OrdinalIgnoreCase);\r\n```",
              "createdAt": "2023-03-23T20:48:10Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,89 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();\n+                    const int buildNumberThatOfficialySupportsUTF8 = 18363;\n+                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();\n+                }\n+                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)\n+                {\n+                    // We don't want to break those in VS on older versions of Windows with a non-en language.\n+                    // Allow those without registry permissions to force the encoding, however.\n+                    return ForceUniversalEncodingOptInEnabled();\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private static bool ForceUniversalEncodingOptInEnabled()\n+        {\n+            return String.Equals(Environment.GetEnvironmentVariable(\"DOTNET_CLI_FORCE_UTF8_ENCODING\"), \"true\", StringComparison.OrdinalIgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you drop `VSLANG`?",
              "createdAt": "2023-03-23T20:50:07Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,89 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();\n+                    const int buildNumberThatOfficialySupportsUTF8 = 18363;\n+                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();\n+                }\n+                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)\n+                {\n+                    // We don't want to break those in VS on older versions of Windows with a non-en language.\n+                    // Allow those without registry permissions to force the encoding, however.\n+                    return ForceUniversalEncodingOptInEnabled();\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private static bool ForceUniversalEncodingOptInEnabled()\n+        {\n+            return String.Equals(Environment.GetEnvironmentVariable(\"DOTNET_CLI_FORCE_UTF8_ENCODING\"), \"true\", StringComparison.OrdinalIgnoreCase);\n+        }\n+\n+        /// <summary>\n+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE.)\n+        /// Does NOT check System Locale or OS Display Language.\n+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns null if none are set.</returns>\n+        private static CultureInfo GetExternalOverriddenUILanguage()\n+        {\n+            // DOTNET_CLI_UI_LANGUAGE=<culture name> is the main way for users to customize the CLI's UI language via the .NET SDK.\n+            string dotnetCliLanguage = Environment.GetEnvironmentVariable(\"DOTNET_CLI_UI_LANGUAGE\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, because it seems that MSBuild in VS already uses a custom language based on the VS Language (? I don't really know why), and the encoding problem there was a result of the .NET SDK and not MSBuild. \r\n\r\nBut with a CLI experience, it is still an issue. ",
              "createdAt": "2023-03-23T20:56:58Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,89 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();\n+                    const int buildNumberThatOfficialySupportsUTF8 = 18363;\n+                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();\n+                }\n+                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)\n+                {\n+                    // We don't want to break those in VS on older versions of Windows with a non-en language.\n+                    // Allow those without registry permissions to force the encoding, however.\n+                    return ForceUniversalEncodingOptInEnabled();\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private static bool ForceUniversalEncodingOptInEnabled()\n+        {\n+            return String.Equals(Environment.GetEnvironmentVariable(\"DOTNET_CLI_FORCE_UTF8_ENCODING\"), \"true\", StringComparison.OrdinalIgnoreCase);\n+        }\n+\n+        /// <summary>\n+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE.)\n+        /// Does NOT check System Locale or OS Display Language.\n+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns null if none are set.</returns>\n+        private static CultureInfo GetExternalOverriddenUILanguage()\n+        {\n+            // DOTNET_CLI_UI_LANGUAGE=<culture name> is the main way for users to customize the CLI's UI language via the .NET SDK.\n+            string dotnetCliLanguage = Environment.GetEnvironmentVariable(\"DOTNET_CLI_UI_LANGUAGE\");",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Per the old guidance linked in https://github.com/dotnet/msbuild/issues/1596, I think we were supposed to support VSLANG, but that made me nervous at this point in the release cycle anyway so this works for me :)\r\n\r\n> MSBuild in VS already uses a custom language based on the VS Language (? I don't really know why)\r\n\r\nI think this is because some other part of VS set the current culture before calling us so we inherit.",
              "createdAt": "2023-03-23T21:25:35Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1669,6 +1677,89 @@ internal static void SetConsoleUI()\n #endif\n         }\n \n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        private static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()\n+        {\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we dont need to P-Invoke ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in Powershell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();\n+                    const int buildNumberThatOfficialySupportsUTF8 = 18363;\n+                    return int.Parse(buildNumber) >= buildNumberThatOfficialySupportsUTF8 || ForceUniversalEncodingOptInEnabled();\n+                }\n+                catch (Exception ex) when (ex is SecurityException || ex is ObjectDisposedException)\n+                {\n+                    // We don't want to break those in VS on older versions of Windows with a non-en language.\n+                    // Allow those without registry permissions to force the encoding, however.\n+                    return ForceUniversalEncodingOptInEnabled();\n+                }\n+            }\n+            return false;\n+        }\n+\n+        private static bool ForceUniversalEncodingOptInEnabled()\n+        {\n+            return String.Equals(Environment.GetEnvironmentVariable(\"DOTNET_CLI_FORCE_UTF8_ENCODING\"), \"true\", StringComparison.OrdinalIgnoreCase);\n+        }\n+\n+        /// <summary>\n+        /// Look at UI language overrides that can be set by known external invokers. (DOTNET_CLI_UI_LANGUAGE.)\n+        /// Does NOT check System Locale or OS Display Language.\n+        /// Ported from the .NET SDK: https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/Microsoft.DotNet.Cli.Utils/UILanguageOverride.cs\n+        /// </summary>\n+        /// <returns>The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns null if none are set.</returns>\n+        private static CultureInfo GetExternalOverriddenUILanguage()\n+        {\n+            // DOTNET_CLI_UI_LANGUAGE=<culture name> is the main way for users to customize the CLI's UI language via the .NET SDK.\n+            string dotnetCliLanguage = Environment.GetEnvironmentVariable(\"DOTNET_CLI_UI_LANGUAGE\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Might consider making a specialized ifdef. It makes it easier to figure out what the relevance of this is and helps with identifying all the connected changes.",
              "createdAt": "2023-03-24T19:00:21Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,68 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+#if NET7_0_OR_GREATER",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That'd definitely be an improvement and I like this suggestion, but since it's only used here for now and the comment describes why we're doing what we are, I think its ok.",
              "createdAt": "2023-05-09T22:41:52Z",
              "path": "src/MSBuild/AutomaticEncodingRestorer.cs",
              "diffHunk": "@@ -0,0 +1,68 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.Runtime.InteropServices;\n+using System.Security;\n+using System.Text;\n+\n+namespace Microsoft.Build.CommandLine\n+{\n+    /// <summary>\n+    /// Ported from https://github.com/dotnet/sdk/blob/bcea1face15458814b8e53e8785b52ba464f6538/src/Cli/dotnet/AutomaticEncodingRestorer.cs.\n+    /// A program can change the encoding of the console which would affect other programs.\n+    /// We would prefer to have a pattern where the program does not affect encoding of other programs.\n+    /// Create this class in a function akin to Main and let it manage the console encoding resources to return it to the state before execution upon destruction.\n+    /// </summary>\n+    public class AutomaticEncodingRestorer : IDisposable\n+    {\n+        private Encoding? _originalOutputEncoding = null;\n+        private Encoding? _originalInputEncoding = null;\n+\n+        public AutomaticEncodingRestorer()\n+        {\n+            try\n+            {\n+#if NET7_0_OR_GREATER",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If you had asked me before this PR, I would have told you that I expected that we always wrote text logs as \"Unicode\" (16-bit). TIL!",
              "createdAt": "2023-05-08T16:27:15Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)\n+            {\n+                _encoding = Encoding.UTF8;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think there's a case where this won't work quite right:\r\n\r\n1. The user starts a build with `DOTNET_CLI_UI_LANGUAGE=ja`\r\n2. The build completes\r\n3. the user unsets the environment variable, but does not kill worker nodes\r\n4. The user starts a new build with `-distributedFileLogger`, which will run this `FileLogger` ctor but with a stale environment.\r\n\r\nIdeally we'd peek into `NodeConfiguration.BuildParameters.Culture` and see if it's representable in the default codepage, but it doesn't seem very easy to plumb that down to this layer.",
              "createdAt": "2023-05-08T20:52:23Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is a good thing to catch and I did not consider, thanks. I took this offline but when I tested it, it seemed to work. Let's discuss what we should do",
              "createdAt": "2023-05-09T16:33:26Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "We discussed this a bit offline. There is a case where this code will cause an observable change in behavior:\r\n\r\n1. Start on a non-English Windows OS\r\n2. Use MSBuild.exe for all operations\r\n3. use repro steps from above.\r\n\r\nIn that case, the long-lived worker process used to create the `distributedFileLogger` in step 4 above will run this code and decide to change the encoding of the log file from `Default` (native Windows codepage for the OS language) to UTF-8.\r\n\r\nBut . . . that's not so bad. UTF-8 can represent all languages with high fidelity, and this is a strange corner case (especially since approximately no one uses `-distributedFileLogger`). So I'm ok proceeding.",
              "createdAt": "2023-05-09T18:39:32Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It seems that it is a subtle bug in that the log will use utf 8 if you do the above steps with /m and also have to start on a non default system os language per @rainersigwald. We don't anticipate this to be bad as the logs will still be readable as utf-8 supports all encodings. In fact I think this is better, as if the fancylogger or other loggers add emojis, then they will show up correctly, with some native windows chcp they would not.",
              "createdAt": "2023-05-09T18:41:03Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Ah, looks like GH hadn't loaded your comment and I mentioned basically the same thing \ud83c\udf70 ",
              "createdAt": "2023-05-09T18:42:23Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "spiderman_pointing_at_spiderman.gif :)",
              "createdAt": "2023-05-09T19:01:13Z",
              "path": "src/Build/Logging/FileLogger.cs",
              "diffHunk": "@@ -39,6 +39,11 @@ public FileLogger()\n                 colorReset: BaseConsoleLogger.DontResetColor)\n         {\n             WriteHandler = Write;\n+\n+            if (EncodingUtilities.GetExternalOverridenUILanguageIfSupportableWithEncoding() != null)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this be behind a changewave so it works by default but can be easily disabled if it causes an unforseen problem?",
              "createdAt": "2023-05-08T20:53:41Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You mean like an environment variable? Good idea, here we are: `MSBUILDDISABLEDYNAMICUTFENCODING`\r\n![image](https://github.com/dotnet/msbuild/assets/23152278/0910b008-e08a-4cfb-ae9f-0bdc4607f446)\r\n",
              "createdAt": "2023-05-09T16:48:14Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "We used to use that approach but it littered a bunch of environment variables around for all time. Now, we have a more systematic approach, detailed in https://github.com/dotnet/msbuild/blob/1dde6006e118eac5fc799ec8ad3f93b2089a2c57/documentation/wiki/ChangeWaves-Dev.md#condition-your-feature-on-a-change-wave -- can you use that instead? Since you merged `main` recently you should have access to `Wave17_8`.",
              "createdAt": "2023-05-09T18:36:48Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ok, but only because your documentation is so pretty \ud83d\ude04 ",
              "createdAt": "2023-05-09T18:45:18Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "> Ok, but only because your documentation is so pretty \ud83d\ude04\r\n\r\nI blame benvillalobos for that \ud83d\ude1c",
              "createdAt": "2023-05-09T19:01:07Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Done!",
              "createdAt": "2023-05-09T20:47:55Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Yeah, I sent ben this thread after seeing he wrote it (but he's on vacation for  a while)",
              "createdAt": "2023-05-09T21:51:33Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "\ud83d\udc4b glad it was helpful!",
              "createdAt": "2023-05-15T18:01:57Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,88 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the correspoding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverridenUILanguageIfSupportableWithEncoding()",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't this ambiguous between the fancy logger project and evaluation project without the tag?",
              "createdAt": "2023-05-09T21:40:39Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1275,7 +1272,7 @@ private static void ResetGatheringSwitchesState()\n                     }\n                     else\n                     {\n-                        Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);\n+                        Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);",
              "author": {
                "login": "nagilson"
              }
            },
            {
              "body": "Jk you got rid of the fancy logger",
              "createdAt": "2023-05-09T21:41:12Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1275,7 +1272,7 @@ private static void ResetGatheringSwitchesState()\n                     }\n                     else\n                     {\n-                        Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);\n+                        Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems like a very reasonable change to put in a PR that touches DistributedFileLogger in any other way...",
              "createdAt": "2023-05-09T21:43:07Z",
              "path": "src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs",
              "diffHunk": "@@ -97,6 +97,7 @@ public void Initialize(IEventSource eventSource)\n             ErrorUtilities.VerifyThrowArgumentNull(eventSource, nameof(eventSource));\n             ParseFileLoggerParameters();\n             string fileName = _logFile;\n+",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "True, but also I think it's now or never :D",
              "createdAt": "2023-05-09T21:52:35Z",
              "path": "src/Build/Logging/DistributedLoggers/DistributedFileLogger.cs",
              "diffHunk": "@@ -97,6 +97,7 @@ public void Initialize(IEventSource eventSource)\n             ErrorUtilities.VerifyThrowArgumentNull(eventSource, nameof(eventSource));\n             ParseFileLoggerParameters();\n             string fileName = _logFile;\n+",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this ever empty?",
              "createdAt": "2023-05-09T21:47:35Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,94 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the corresponding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverriddenUILanguageIfSupportableWithEncoding()\n+        {\n+            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8))\n+            {\n+                return null;\n+            }\n+\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think so, but technically somehow someone could maybe delete the key and this would cause a failure so I added a null check. That's a really good point :)",
              "createdAt": "2023-05-09T22:41:20Z",
              "path": "src/Framework/EncodingUtilities.cs",
              "diffHunk": "@@ -247,5 +251,94 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci\n                         : EncodingUtilities.Utf8WithoutBom;\n             }\n         }\n+\n+        /// <summary>\n+        /// The .NET SDK and Visual Studio both have environment variables that set a custom language. MSBuild should respect the SDK variable.\n+        /// To use the corresponding UI culture, in certain cases the console encoding must be changed. This function will change the encoding in these cases.\n+        /// This code introduces a breaking change in .NET 8 due to the encoding of the console being changed.\n+        /// If the environment variables are undefined, this function should be a no-op.\n+        /// </summary>\n+        /// <returns>\n+        /// The custom language that was set by the user for an 'external' tool besides MSBuild.\n+        /// Returns <see langword=\"null\"/> if none are set.\n+        /// </returns>\n+        public static CultureInfo GetExternalOverriddenUILanguageIfSupportableWithEncoding()\n+        {\n+            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8))\n+            {\n+                return null;\n+            }\n+\n+            CultureInfo externalLanguageSetting = GetExternalOverriddenUILanguage();\n+            if (externalLanguageSetting != null)\n+            {\n+                if (\n+                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals(\"en\", StringComparison.InvariantCultureIgnoreCase) &&\n+                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+                    )\n+                {\n+                    // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.\n+                    Console.OutputEncoding = Encoding.UTF8;\n+                    // If the InputEncoding is not set, the encoding will work in CMD but not in PowerShell, as the raw CHCP page won't be changed.\n+                    Console.InputEncoding = Encoding.UTF8;\n+                    return externalLanguageSetting;\n+                }\n+                else if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n+                {\n+                    return externalLanguageSetting;\n+                }\n+            }\n+\n+            return null;\n+        }\n+\n+        public static bool CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()\n+        {\n+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.OSVersion.Version.Major >= 10) // UTF-8 is only officially supported on 10+.\n+            {\n+                try\n+                {\n+                    using RegistryKey windowsVersionRegistry = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n+                    var buildNumber = windowsVersionRegistry.GetValue(\"CurrentBuildNumber\").ToString();",
              "author": {
                "login": "nagilson"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo.defaultthreadcurrentculture#remarks\r\n```",
              "createdAt": "2023-05-09T21:49:41Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1672,14 +1673,20 @@ internal static void SetConsoleUI()\n             Thread thisThread = Thread.CurrentThread;\n \n             // Eliminate the complex script cultures from the language selection.\n-            thisThread.CurrentUICulture = CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();\n+            var desiredCulture = EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding() ?? CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();\n+            thisThread.CurrentUICulture = desiredCulture;\n+\n+            // For full framework, both the above and below must be set. This is not true in core, but it is a no op in core.\n+            // https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.defaultthreadcurrentculture?redirectedfrom=MSDN&view=net-7.0#remarks",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}