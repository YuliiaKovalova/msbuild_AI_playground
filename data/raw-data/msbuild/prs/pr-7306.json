{
  "number": 7306,
  "title": "Improved error message when created node crashes",
  "body": "Occasionally, someone will have a misconfiguration that causes MSBuild\nworker nodes to crash immediately or shortly after launch (before\nestablishing communication with the node that created them).\n\nThis can be really hard to diagnose, because it's not obvious that it's\nhappening--failure to connect to a process is nonfatal and can happen\nif a user is building with two disconnected `-m` invocations. But\nrepeated failure is bad and if the node _never_ connects, that's a\nproblem.\n\nAdd comm-trace information about process lifetime. I wanted to include\nthe exit code too but couldn't because on Windows we call CreateProcess\ninstead of Process.Start.\n",
  "state": "MERGED",
  "createdAt": "2022-01-20T19:13:45Z",
  "updatedAt": "2022-01-28T08:39:05Z",
  "closedAt": "2022-01-28T08:39:05Z",
  "mergedAt": "2022-01-28T08:39:05Z",
  "additions": 21,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "log-when-children-die",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "22f4c52df44cbefed22b2106c725a4b96315dec1",
          "message": "Improved error message when created node crashes\n\nOccasionally, someone will have a misconfiguration that causes MSBuild\nworker nodes to crash immediately or shortly after launch (before\nestablishing communication with the node that created them).\n\nThis can be really hard to diagnose, because it's not obvious that it's\nhappening--failure to connect to a process is nonfatal and can happen\nif a user is building with two disconnected `-m` invocations. But\nrepeated failure is bad and if the node _never_ connects, that's a\nproblem.\n\nAdd comm-trace information about process lifetime. I wanted to include\nthe exit code too but couldn't because on Windows we call CreateProcess\ninstead of Process.Start.",
          "committedDate": "2022-01-20T19:12:17Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "662eac3c1d956199f66c2925ec3b72bf63a3f8a4",
          "message": "fixup! Improved error message when created node crashes",
          "committedDate": "2022-01-20T22:12:06Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": ">  because on Windows we call CreateProcess instead of Process.Start.\r\n\r\nYou could try and get ExitCode to log it, since it will be available at least for Unix. On windows you would have to catch InvalidOperationException, so perhaps only do this if CommunicationUtilities.s_trace is true.\r\n\r\nOf course, there's a race here -- in Tarek's case, I don't know whether the process would have exited by now. that's why what I had in mind is queueing some work item, passing the PID, after N seconds it would pinvoke to open a process handle and get the exit code (at least on Windows this is possible - didn't check Unix). Not suggesting it's worth doing today.\r\n",
        "createdAt": "2022-01-20T20:34:50Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Of course, there's a race here -- in Tarek's case, I don't know whether the process would have exited by now.\r\n\r\nI think it should be pretty reliably exited in an early-crash scenario because we'll have waited 30 seconds for the communication timeout. It fired reliably in my test (where I just hacked `Main()` to crash).\r\n\r\nThe more robust system you describe would indeed be nicer but I agree it's probably not worth doing today.",
        "createdAt": "2022-01-20T22:09:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> reliably exited in an early-crash scenario because we'll have waited 30 seconds for the communication timeout\r\n\r\nYou're quite right, I forgot that we'd have waited in this case.\r\n\r\nGreat. If this happens again, and it says it exited, then we can ask the customer to run the command explicitly, with `/nodemode:1`.",
        "createdAt": "2022-01-20T22:20:27Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be nice if here, or when failing to connect, we could log whether the pipe exists but is busy vs pipe does not exist. Unfortunately NamedPipeClientStream.Connect throws TimeoutException for both, so it's not possible to distinguish.\r\n\r\nhttps://github.com/danmoseley/runtime/blob/2db2fa13cf7012b8c16a51cd982a4f536d5c444e/src/libraries/System.IO.Pipes/src/System/IO/Pipes/NamedPipeClientStream.Windows.cs#L71-L75\r\nhttps://github.com/danmoseley/runtime/blob/2db2fa13cf7012b8c16a51cd982a4f536d5c444e/src/libraries/System.IO.Pipes/src/System/IO/Pipes/NamedPipeClientStream.Unix.cs#L43-L46\r\nhttps://github.com/danmoseley/runtime/blob/2db2fa13cf7012b8c16a51cd982a4f536d5c444e/src/libraries/System.IO.Pipes/src/System/IO/Pipes/NamedPipeClientStream.cs#L171-L172\r\n\r\nIt might be nice to make that exception message include that info. @JeremyKuhne thoughts, am I missing any way in managed code to determine whether a pipe exists but is busy?",
              "createdAt": "2022-01-20T20:22:07Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,15 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it has exited. This can indicate a crash at startup\");\n+                }\n+                else\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node\");",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "> am I missing any way in managed code to determine whether a pipe exists but is busy?\r\n\r\nNot that I'm aware of. Setting the `ErrorCode` to something more useful might be an option.",
              "createdAt": "2022-01-20T23:02:13Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,15 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it has exited. This can indicate a crash at startup\");\n+                }\n+                else\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node\");",
              "author": {
                "login": "JeremyKuhne"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "BTW, it's small beans, but all these interpolated strings are creating strings even if you're not tracing (the 99% case). An alternative is to wrap the call with a check for tracing, another option is to pass arguments for the logging code to do string.format.",
              "createdAt": "2022-01-20T20:59:44Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,15 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it has exited. This can indicate a crash at startup\");",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "You're right. I erroneously convinced myself that this was fine because \"we're already in an error case\" but spaced that inside the call we might (and normally will) do nothing.",
              "createdAt": "2022-01-20T21:46:52Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,15 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    CommunicationsUtilities.Trace($\"Could not connect to node with PID {msbuildProcess.Id}; it has exited. This can indicate a crash at startup\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I have no opinion, but do you want to put this protection around other places, eg where the string `Successfully connected to created node {0}...` is constructed unnecessarily?",
              "createdAt": "2022-01-20T22:21:32Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,27 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    if (Traits.Instance.DebugNodeCommunication)",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Those are all const format strings now so they don't create new strings, right?",
              "createdAt": "2022-01-20T22:28:45Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,27 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    if (Traits.Instance.DebugNodeCommunication)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ungh -- yes. Can't read :)",
              "createdAt": "2022-01-20T22:58:50Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -289,6 +289,27 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in\n                     CommunicationsUtilities.Trace(\"Successfully connected to created node {0} which is PID {1}\", nodeId, msbuildProcess.Id);\n                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);\n                 }\n+\n+                if (msbuildProcess.HasExited)\n+                {\n+                    if (Traits.Instance.DebugNodeCommunication)",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      }
    ]
  }
}