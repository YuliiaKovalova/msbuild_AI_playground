{
  "number": 8882,
  "title": "Adding in option to filter projects that DynamicPlatformResolution was unable to resolve",
  "body": "\u2026\r\n\r\nFixes #\r\n\r\n### Context\r\nCurrently dynamic platform resolution will leave the \"platform\" global property of a depending project blank if it is unable to determine the correct architecture to build a project as. This is helpful but in certain situations, especially traversal style projects it makes more sense to remove dependent projects that don't build as a compatible platform.\r\n\r\n### Changes Made\r\nI added a property that can be added to projects so that if dynamic platform resolution is unable to determine what platform a project should be built as it will be removed from the graph.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n\r\nlinking bug https://github.com/dotnet/msbuild/issues/8890\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-06-14T15:50:50Z",
  "updatedAt": "2023-10-10T14:18:26Z",
  "closedAt": "2023-10-10T14:18:26Z",
  "mergedAt": null,
  "additions": 45,
  "deletions": 6,
  "changedFiles": 4,
  "headRefName": "main",
  "isDraft": true,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": {
    "title": "VS 17.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "97733c97e3c3d391ad3df3719b03dd25e0c9b8f6",
          "message": "Adding in option to filter projects that DynamicPlatformResolution was unable to resolve",
          "committedDate": "2023-06-14T15:12:45Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ebc9bee5918ed53a726caaae8eebf30b41f96121",
          "message": "adding in unit test",
          "committedDate": "2023-06-14T16:13:18Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eef2c9552111090a3d74b00a6a7bdc41fa31c118",
          "message": "fixing conditionals",
          "committedDate": "2023-06-15T15:34:53Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@MIchaelRShea Thank you for your contribution.\r\nCan you crerate/link a bug describing the issue? This would help properly triaging and processing this PR.",
        "createdAt": "2023-06-14T17:15:57Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> @MIchaelRShea Thank you for your contribution. Can you crerate/link a bug describing the issue? This would help properly triaging and processing this PR.\r\n\r\n@JanKrivanek  Yes went ahead and linked a bug to this PR\r\n",
        "createdAt": "2023-06-16T14:13:55Z",
        "author": {
          "login": "MIchaelRShea"
        }
      },
      {
        "body": "@MIchaelRShea Do you want to iterate on the PR based on the feedback?",
        "createdAt": "2023-08-02T12:00:07Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be mentioned in https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md",
              "createdAt": "2023-07-11T08:14:01Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -35,6 +35,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionPropertyName = \"EnableDynamicPlatformResolution\";\n+        private const string EnableDynamicPlatformFilteringPropertyName = \"EnableDynamicPlatformFiltering\";",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I might be just slow - but this comment is very hard to understand. Especially the `where a project has global platform set and does not have global platform set` feels wrong.\r\nCan it be restated?",
              "createdAt": "2023-07-11T08:16:57Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -325,6 +325,37 @@ public void FailsToResolve()\n             }\n         }\n \n+        [Fact]\n+        public void FailsToResolveFilteredOut()\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+\n+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @\"<PropertyGroup>\n+                                                                                                <EnableDynamicPlatformFiltering>true</EnableDynamicPlatformFiltering>    \n+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                                                                                                <Platform>x86</Platform>\n+                                                                                                <PlatformLookupTable>AnyCPU=x64</PlatformLookupTable>\n+                                                                                            </PropertyGroup>\n+                                                                                            <ItemGroup>\n+                                                                                                <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)2.proj\"\" >\n+                                                                                                </ProjectReference>\n+                                                                                            </ItemGroup>\");\n+                var proj2 = env.CreateFile(\"2.proj\", @\"\n+                                                    <Project>\n+                                                    <PropertyGroup>\n+                                                        <Platforms>x64</Platforms>\n+                                                    </PropertyGroup>\n+                                                    </Project>\");\n+\n+                ProjectGraph graph = new ProjectGraph(entryProject.Path);\n+                // Here we are checking if platform is defined. in this case it should not be since Platorm would be set to the value this project defaults as\n+                // in order to avoid dual build errors we remove platform in order to avoid the edge case where a project has global platform set and does not have global platform set\n+                // yet still default to the same platform.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Turning this into theory with positive and negative case (2.proj set for matching and mismatching platform, then the expected number of nodes should be 1 and 0 respectively)",
              "createdAt": "2023-07-11T08:21:51Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -325,6 +325,37 @@ public void FailsToResolve()\n             }\n         }\n \n+        [Fact]",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Project being removed from graph might deserve low-priority log message for clarity during troubleshooting. ",
              "createdAt": "2023-07-11T08:24:10Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -179,13 +181,17 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n \n                     var selectedPlatform = PlatformNegotiation.GetNearestPlatform(overridePlatformNegotiationMetadataValue, projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), requesterInstance.GetPropertyValue(PlatformLookupTableMetadataName), projectInstance.FullPath, requesterInstance.GetPropertyValue(PlatformMetadataName));\n \n-                    if (selectedPlatform.Equals(String.Empty))\n+                    if (enableDynamicPlatformFiltering && !selectedPlatform.Item1)\n+                    {\n+                        continue;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}