{
  "number": 10033,
  "title": "Update BuildCheck docs with enablement design",
  "body": "Fixes #9822\r\nFixes #9723\r\n\r\n### Context\r\n\r\nSome of the built-in BuildCheck analyzers will eventually be enabled by default. We need to figure out the mechanics of how it's going to happen.\r\n\r\n### Changes Made\r\n\r\nUpdated parts of the BuildCheck spec documents.",
  "state": "MERGED",
  "createdAt": "2024-04-18T13:30:49Z",
  "updatedAt": "2024-05-10T06:06:21Z",
  "closedAt": "2024-05-09T21:21:28Z",
  "mergedAt": "2024-05-09T21:21:28Z",
  "additions": 27,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "analyzer-enablement",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b769dba75f6d167c1e213093c296e560029be0e9",
          "message": "Update BuildCheck docs with enablement design",
          "committedDate": "2024-04-18T13:25:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83587184e4775162f8c260de71dfa727107272d0",
          "message": "Move VS support to .NET 10",
          "committedDate": "2024-04-22T13:58:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2406b76a2bce966ab471edceaddae24c81060c2c",
          "message": "PR feedback: Mention strict mode",
          "committedDate": "2024-05-06T14:18:41Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5827fec811c485dea9c837756eb8dff6730f97e7",
          "message": "PR feedback: RunMSBuildChecks instead of RunAnalyzers",
          "committedDate": "2024-05-09T20:59:54Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Property can have the disadvantage of having different values in different projects (which can get bit complicated for 'multi-project' rules like 'double writes') and disadvantage of being known later during evaluation (so prevents us from speeding up cases with evaluation analyzers enabled).\r\n\r\nThe switch can be problematic when executed from VS - but still there should be a way how to pass a global build flag (env var, etc.).\r\n\r\nWould you see those situations as possible reasons for adjusting this direction? ",
              "createdAt": "2024-04-18T14:09:55Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Good point about multi-project rules. Although, do you think we would be able avoid running into this situation even if we had `/analyze`? With a per-project `.editorconfig` such an analyzer can also be enabled only for a subset of projects being built.",
              "createdAt": "2024-04-18T14:58:39Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yeah - it sounds like regalrdless of the opt-in/-out switch vs property we will still have same problems to solve - so going with more 'msbuild-y' way of expressing opt-in/-out might be preferable",
              "createdAt": "2024-04-19T09:07:01Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "There is actually one scenario I'm wondering about: \r\n\r\nParsing editorconfigs only when required and only once per build\r\n\r\nReading and parsing editorconfigs is possibly expensive operation - so it would be good to do it only once per build and share the structured representaion between the nodes. However we need to parse editorconfigs only if anlysis is requested - which we'd find only during evaluation - which is too late for exchanging node configurations.\r\n\r\nAny thoughts on this would be very welcomed! :-)\r\n\r\nFYI @f-alizada - for the single parsing and sharing of the structured configuration representation\r\n\r\n",
              "createdAt": "2024-04-19T13:01:07Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "> Reading and parsing editorconfigs is possibly expensive operation\r\n\r\nThis needs perf data. I find it hard to believe that parsing an .ini file would measurably slow down something that already has to parse dozens of XML files, evaluate them, and execute the build.",
              "createdAt": "2024-04-19T13:09:51Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Sounds plausible",
              "createdAt": "2024-04-19T13:22:25Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -99,7 +101,7 @@ The proposed initial configuration for those is TBD (as well based on initial te\n \n ### Live Build\n \n-BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.\n+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via an MSBuild property (could be set in a project file or passed on the commandline).",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be super awesome to know the perf cost (relative to evaluation and relative to whole build) of evaluation up till that point (artificaially introduced) :sweat_smile:",
              "createdAt": "2024-04-18T14:12:09Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -84,6 +84,16 @@ Planned model:\n \n **TBD** - implementation details to be amended by @f-alizada \n \n+## High-level logic\n+\n+MSBuild engine always finds and parses relevant `.editorconfig` files to see which analyzers should be enabled, if any. In typical builds this operation will not be expensive compared to everything else happening as part of building a project. It's a new cost to all builds though, and in the unlikely case that it starts showing as a perf bottleneck, we can cache the data relevant to MSBuild in a separate intermediate file, in a process-wide in-memory cache invalidated by timestamp checks, and so on.\n+\n+The rest of the configuration comes directly or indirectly from project files in the form of properties, which creates an interesting ordering issue. For the engine to know the final values of properties such as `TargetFramework`, it needs to evaluate the project. However, if it turns out that an analyzer should be enabled that is interested in _tracing_ the evaluation, it is already too late. It's important to note that this issue exists only for a subset of analyzers. Analyzers interested in the _result_ of evaluation, for example, are fine. The best way of handling this would be to simply evaluate again. Technically, we only need to finish Pass 1 of evaluation to know the value of properties and have the relevant property functions called, so the extra work can be limited to pass 0 and 1. Measurements show that 75% of evaluation is spent in passes 0 and 1. In the very worst case when an extra pass 0/1 runs for each project and lacks any kind of further optimization, single-process incremental build of OrchardCore has been measured to take about 5% longer. There are opportunities for optimizing this, for example by adding a marker to SDK targets files notifying MSBuild of the point after which `TargetFramework` is expected to be fixed so the engine can bail early.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Totally. I'm sure we can come up with more ideas. We could optimistically get the prop values from the project file with what would essentially be a simple XPath query - which presumably would be correct most of the time \ud83d\ude03 ",
              "createdAt": "2024-04-18T14:50:13Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -84,6 +84,16 @@ Planned model:\n \n **TBD** - implementation details to be amended by @f-alizada \n \n+## High-level logic\n+\n+MSBuild engine always finds and parses relevant `.editorconfig` files to see which analyzers should be enabled, if any. In typical builds this operation will not be expensive compared to everything else happening as part of building a project. It's a new cost to all builds though, and in the unlikely case that it starts showing as a perf bottleneck, we can cache the data relevant to MSBuild in a separate intermediate file, in a process-wide in-memory cache invalidated by timestamp checks, and so on.\n+\n+The rest of the configuration comes directly or indirectly from project files in the form of properties, which creates an interesting ordering issue. For the engine to know the final values of properties such as `TargetFramework`, it needs to evaluate the project. However, if it turns out that an analyzer should be enabled that is interested in _tracing_ the evaluation, it is already too late. It's important to note that this issue exists only for a subset of analyzers. Analyzers interested in the _result_ of evaluation, for example, are fine. The best way of handling this would be to simply evaluate again. Technically, we only need to finish Pass 1 of evaluation to know the value of properties and have the relevant property functions called, so the extra work can be limited to pass 0 and 1. Measurements show that 75% of evaluation is spent in passes 0 and 1. In the very worst case when an extra pass 0/1 runs for each project and lacks any kind of further optimization, single-process incremental build of OrchardCore has been measured to take about 5% longer. There are opportunities for optimizing this, for example by adding a marker to SDK targets files notifying MSBuild of the point after which `TargetFramework` is expected to be fixed so the engine can bail early.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Or MSBuild Server :-)",
              "createdAt": "2024-04-18T14:12:48Z",
              "path": "documentation/specs/proposed/BuildCheck-Architecture.md",
              "diffHunk": "@@ -84,6 +84,16 @@ Planned model:\n \n **TBD** - implementation details to be amended by @f-alizada \n \n+## High-level logic\n+\n+MSBuild engine always finds and parses relevant `.editorconfig` files to see which analyzers should be enabled, if any. In typical builds this operation will not be expensive compared to everything else happening as part of building a project. It's a new cost to all builds though, and in the unlikely case that it starts showing as a perf bottleneck, we can cache the data relevant to MSBuild in a separate intermediate file, in a process-wide in-memory cache invalidated by timestamp checks, and so on.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you have any suggestion on how the TFM and SdkAnalysisLevel would be combined? E.g. SdkAnalysisLevel is respected only from specific TFM up?\r\n\r\nNot importnat now... but if you already have some vision - it might be nice to capture it",
              "createdAt": "2024-04-22T18:24:06Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -128,9 +130,20 @@ We might as well consider specifying custom analyzers on a command line (as a no\n \n There will be 3 mechanisms of configuring the analyzers and rules:\n * The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n-* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* The TFM of the project and the [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n * `.editorconfig` file\n \n+We will also consider respecting `SdkAnalysisLevel` to override the per-TFM defaults. Additionally we may use the existing `RunAnalyzers` \"master switch\" property to make it possible to disable everything whole-sale. This would be used in scenarios like F5 in VS.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "If we use `SdkAnalysisLevel` I think it would be good to align the behavior with the rest of the SDK. I'm hesitant to put a stake in the ground now when `SdkAnalysisLevel` is effectively unused. So - I would prefer to leave this open for now and have a wider discussion later, most likely early next year.",
              "createdAt": "2024-04-23T15:21:38Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -128,9 +130,20 @@ We might as well consider specifying custom analyzers on a command line (as a no\n \n There will be 3 mechanisms of configuring the analyzers and rules:\n * The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n-* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* The TFM of the project and the [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n * `.editorconfig` file\n \n+We will also consider respecting `SdkAnalysisLevel` to override the per-TFM defaults. Additionally we may use the existing `RunAnalyzers` \"master switch\" property to make it possible to disable everything whole-sale. This would be used in scenarios like F5 in VS.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Roslyn is going to start using it this summer with their 'backing field' breaking change, so we can look at that and evaluate behaviors/decisions based on how their work plays out.",
              "createdAt": "2024-05-09T18:34:16Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -128,9 +130,20 @@ We might as well consider specifying custom analyzers on a command line (as a no\n \n There will be 3 mechanisms of configuring the analyzers and rules:\n * The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n-* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* The TFM of the project and the [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n * `.editorconfig` file\n \n+We will also consider respecting `SdkAnalysisLevel` to override the per-TFM defaults. Additionally we may use the existing `RunAnalyzers` \"master switch\" property to make it possible to disable everything whole-sale. This would be used in scenarios like F5 in VS.",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is ok for now, but we definitely want good support for \"mixed C#/C++ repo\".",
              "createdAt": "2024-05-06T16:34:02Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -22,9 +22,11 @@ Users are able to tune the behavior of the checks via `.editorconfig` which brin\n \n Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn\u2019t require roundtrip through packaging.\n \n-A solid set of in-the-box analyzers is provided by MSBuild and the .NET SDK, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context). The existing in-the-box analyzers are gradually enabled by default and their severity increased - in waves (likely tied to sdk releases) - aiming to constantly increase quality of our customers build scripts. MSBuild.exe (and hence Visual Studio) builds will take more conservative approach with requiring an explicit opt-in into the analyzers - in order to not introduce upgrade blockers. \n+A solid set of in-the-box analyzers is provided by MSBuild and the .NET SDK, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context). The existing in-the-box analyzers are gradually enabled by default and their severity increased - in waves (likely tied to sdk releases) - aiming to constantly increase the quality of our customers build scripts. To avoid breaking customers builds, there will still be an explicit user gesture required to opt into running the analysis. This will be done either by configuring the analyzers with `.editorconfig` or auto-enabling the analysis based on the TFM of the project. There will be no difference between building with `dotnet build` and with `MSBuild.exe`, they will follow the same enablement rules with the set of enabled built-in analyzers derived from `.editorconfig` and TFM/props. Building in Visual Studio will eventually reach parity with command-line build as well.\n \n-The analysis has small impact on build duration with ability to disable analysis altogether which will remove all the performance costs associated with the analysis. The perf impact on representative projects is continuously monitored and documented by the MsBuild team.\n+Projects that don't use the .NET SDK and those that are not SDK-style at all are TBD. There is a possibility of using a property like `MSBuildAnalysisLevel` to enable some base analyzers we believe will add value everywhere.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should consider a different property name than `RunAnalyzers` for a couple reasons:\r\n* We use the term BuildChecks now\r\n* This might confuse users thinking that it also applies to Roslyn Analyzers\r\n\r\nMaybe something like `RunMSBuildAnalyzers` or `RunMSBuildChecks`?",
              "createdAt": "2024-05-09T18:32:27Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -128,9 +130,20 @@ We might as well consider specifying custom analyzers on a command line (as a no\n \n There will be 3 mechanisms of configuring the analyzers and rules:\n * The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n-* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* The TFM of the project and the [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n * `.editorconfig` file\n \n+We will also consider respecting `SdkAnalysisLevel` to override the per-TFM defaults. Additionally we may use the existing `RunAnalyzers` \"master switch\" property to make it possible to disable everything whole-sale. This would be used in scenarios like F5 in VS.",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Thank you, I've changed it to `RunMSBuildChecks`.",
              "createdAt": "2024-05-09T21:01:19Z",
              "path": "documentation/specs/proposed/BuildCheck.md",
              "diffHunk": "@@ -128,9 +130,20 @@ We might as well consider specifying custom analyzers on a command line (as a no\n \n There will be 3 mechanisms of configuring the analyzers and rules:\n * The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))\n-* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n+* The TFM of the project and the [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) \u2013 mostly for the inbox analyzers\n * `.editorconfig` file\n \n+We will also consider respecting `SdkAnalysisLevel` to override the per-TFM defaults. Additionally we may use the existing `RunAnalyzers` \"master switch\" property to make it possible to disable everything whole-sale. This would be used in scenarios like F5 in VS.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}