{
  "number": 9874,
  "title": "Use invariant culture for converting propertie's values to string",
  "body": "Fixes #9757\r\n\r\n### Context\r\nThe evaluation of the project is affected in case: \r\nThe resulting values of the properties is a negative number and the Culture the parsing used contains different unicode for a minus sign and later used in arithmetic condition results failed project exception. \r\nDue to the converting  numeric type ToString using current Culture (or not specifying to convert using InvariantCulture) and later using the InvariantCulture for trying to parse the saved . \r\n\r\n\r\nhttps://github.com/dotnet/msbuild/blob/00833d9f8772bc99c48ccbebc013aa0a6d5ee622/src/Shared/ConversionUtilities.cs#L185\r\n\r\n### Changes Made\r\nCheck if the object is a numeric type then convert it to string using InvariantCulture. ChangeWave 17.10\r\n\r\n### Testing\r\nAdded tests to replicate the behavior with/without changewave.",
  "state": "MERGED",
  "createdAt": "2024-03-15T15:26:22Z",
  "updatedAt": "2024-06-14T10:04:31Z",
  "closedAt": "2024-03-28T11:50:50Z",
  "mergedAt": "2024-03-28T11:50:50Z",
  "additions": 106,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "dev/f-alizada/culture-neutral-number-parsing",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a78ebed3da195f700cc8e2552e6ff31060121e9d",
          "message": "Use invariant culture for the number parsing",
          "committedDate": "2024-03-15T15:13:58Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "170e3279627d708ff06ce91fbcba972f5da64bd7",
          "message": "Update the PR number in docs",
          "committedDate": "2024-03-15T15:27:21Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55f0aa86a2600859963b8bca76508ccd7d0046a5",
          "message": "Respect the ICU availability in the tests",
          "committedDate": "2024-03-18T12:34:07Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2acd8858d049c0efd77d849a62ca05df72545648",
          "message": "InvariantCulture for all types",
          "committedDate": "2024-03-18T13:10:36Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2771a58bdfe6d33e04db7334ba6497ec512b6160",
          "message": "Merge branch 'main' into dev/f-alizada/culture-neutral-number-parsing",
          "committedDate": "2024-03-18T13:12:20Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4517fcac0cd8b7956128153ebf683b7351131cf1",
          "message": "Return back the numeric type comparison",
          "committedDate": "2024-03-18T16:56:15Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c95376d4ea83d6dcfed269afcfc729ca7d141558",
          "message": "Update the wiki including the types which are converted via InvariantCulture",
          "committedDate": "2024-03-18T16:59:54Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cafdb98146c8aacfe288269670882d7e0765b7bf",
          "message": "Use CultureInfo.InvariantCulture.NumberFormat",
          "committedDate": "2024-03-18T17:00:13Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "454088b06d03cf94ec8139b6a738f5eb0dabccf4",
          "message": "Merge branch 'main' into dev/f-alizada/culture-neutral-number-parsing",
          "committedDate": "2024-03-25T10:24:58Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd6374d81349fc5d98ecca0055f128a5598b6ad4",
          "message": "ConvertToString using invariant culture for all types",
          "committedDate": "2024-03-25T10:30:12Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Question: should we go beyond numeric types to just do `Convert.ToString(valueToConvert, CultureInfo.InvariantCulture)`?\r\n\r\nI don't fully understand the implications--it's definitely safer to do it just for numbers!\r\n\r\nAre we already parsing string->numbers with InvariantCulture?",
              "createdAt": "2024-03-15T16:11:15Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "+1 on this if it would achieve goal and wouldn't have obvious downsides. As it would allow us to get rid of the probing for number. And if in future we have other cases (booleans?, time?, etc.), it would be already handled.\r\n\r\n\r\n> Are we already parsing string->numbers with InvariantCulture?\r\n\r\nWe should after https://github.com/dotnet/msbuild/pull/8710\r\nSo using invariant in opposite dirrection is wanted.",
              "createdAt": "2024-03-17T19:50:06Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I was thinking to cover different types by change wave iterations, to lower the risk of breaking change, however having that we have this change under the change wave, I believe it is safe to enable it for any other data type as well.\r\nAnd for trying to parse the numeric: \r\nhttps://github.com/dotnet/msbuild/blob/00833d9f8772bc99c48ccbebc013aa0a6d5ee622/src/Shared/ConversionUtilities.cs#L187\r\nWe are already doing that. ",
              "createdAt": "2024-03-18T13:24:15Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Changed the behavior to Convert.ToString(valueToConvert, CultureInfo.InvariantCulture), having that it is under the change wave. two votes for that :) ",
              "createdAt": "2024-03-18T13:26:55Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "I like this but I think we should hold the bigger change for an early preview of the next release. I am a nervous Nellie!",
              "createdAt": "2024-03-18T14:14:05Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you @rainersigwald. Rolled back the changes to cover only double, long and int. ",
              "createdAt": "2024-03-18T19:13:23Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Summary of discussion offline: \r\nMerge the changes for all types, for early preview of next release.",
              "createdAt": "2024-03-25T10:36:18Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Thanks for cleaning up! \r\n(I was just recantly bitten by unrelated test case leaving UICulture altered)",
              "createdAt": "2024-03-17T19:25:57Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -4859,5 +4860,82 @@ public void ExpandItemVectorFunctions_Exists_Directories()\n                 squiggleItems.Select(i => i.EvaluatedInclude).ShouldBe(new[] { alphaBetaPath, alphaDeltaPath }, Case.Insensitive);\n             }\n         }\n+\n+        [Fact]\n+        public void ExpandItem_ConvertToStringUsingInvariantCultureForNumberData()\n+        {\n+            var currentThread = Thread.CurrentThread;\n+            var originalCulture = currentThread.CurrentCulture;\n+            var originalUICulture = currentThread.CurrentUICulture;\n+\n+            try\n+            {\n+                var svSECultureInfo = new CultureInfo(\"sv-SE\");\n+                using (var env = TestEnvironment.Create())\n+                {\n+                    CultureInfo.CurrentCulture = svSECultureInfo;\n+                    CultureInfo.CurrentUICulture = svSECultureInfo;\n+                    var root = env.CreateFolder();\n+\n+                    var projectFile = env.CreateFile(root, \".proj\",\n+                        @\"<Project>\n+\n+  <PropertyGroup>\n+    <_value>$([MSBuild]::Subtract(0, 1))</_value>\n+    <_otherValue Condition=\"\"'$(_value)' &gt;= -1\"\">test-value</_otherValue>\n+  </PropertyGroup>\n+  <Target Name=\"\"Build\"\" />\n+</Project>\");\n+                    ProjectInstance projectInstance = new ProjectInstance(projectFile.Path);\n+                    projectInstance.GetPropertyValue(\"_value\").ShouldBe(\"-1\");\n+                    projectInstance.GetPropertyValue(\"_otherValue\").ShouldBe(\"test-value\");\n+                }\n+            }\n+            finally\n+            {\n+                currentThread.CurrentCulture = originalCulture;\n+                currentThread.CurrentUICulture = originalUICulture;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need to consider other numerical types (single, float, etc.)?",
              "createdAt": "2024-03-17T19:37:06Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);\n+                    }\n+                    else\n+                    {\n+                        convertedString = valueToConvert.ToString();\n+                    }\n                 }\n \n                 return convertedString;\n             }\n \n+            private static bool IsNumberType(object obj)\n+            {\n+                return obj is double || obj is long || obj is int || obj is byte;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Method removed, and the Convertion with invariant Culture enabled for any other type :) ",
              "createdAt": "2024-03-18T13:25:03Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);\n+                    }\n+                    else\n+                    {\n+                        convertedString = valueToConvert.ToString();\n+                    }\n                 }\n \n                 return convertedString;\n             }\n \n+            private static bool IsNumberType(object obj)\n+            {\n+                return obj is double || obj is long || obj is int || obj is byte;",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Update: The method is back with only double, long and int for now, to cover basic scenarios. Next iteration is to enable this for every type but on early preview next release. ",
              "createdAt": "2024-03-18T19:12:18Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);\n+                    }\n+                    else\n+                    {\n+                        convertedString = valueToConvert.ToString();\n+                    }\n                 }\n \n                 return convertedString;\n             }\n \n+            private static bool IsNumberType(object obj)\n+            {\n+                return obj is double || obj is long || obj is int || obj is byte;",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Sounds good - I support that! :-)",
              "createdAt": "2024-03-18T19:14:14Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1478,12 +1478,25 @@ internal static string ConvertToString(object valueToConvert)\n                 else\n                 {\n                     // The fall back is always to just convert to a string directly.\n-                    convertedString = valueToConvert.ToString();\n+                    // Issue: https://github.com/dotnet/msbuild/issues/9757\n+                    if (IsNumberType(valueToConvert) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_10))\n+                    {\n+                        convertedString = Convert.ToString(valueToConvert, CultureInfo.InvariantCulture.NumberFormat);\n+                    }\n+                    else\n+                    {\n+                        convertedString = valueToConvert.ToString();\n+                    }\n                 }\n \n                 return convertedString;\n             }\n \n+            private static bool IsNumberType(object obj)\n+            {\n+                return obj is double || obj is long || obj is int || obj is byte;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}