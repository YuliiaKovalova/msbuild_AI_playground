{
  "number": 6698,
  "title": "Skip Updating CopyComplete Marker When Not Necessary",
  "body": "Fixes #6576\r\n\r\n### Context\r\nhttps://github.com/dotnet/msbuild/issues/6576 revealed that the `.copycomplete` file marker is updated even when the `Copy` task in `_GetCopyFilesMarkedLocal` doesn't _actually_ copy anything. This can mess with incremental builds.\r\n\r\n### Changes Made\r\nThis change adds an output parameter, `CopiedAtLeastOneFile` to the `Copy` task that the `Touch` task is now conditioned off of.\r\n\r\n### Testing\r\nTested local builds\r\n\r\n### Notes\r\nThis could also be done by having an ITaskItem[] that contains all files that were actually copied. Then the touch task could check if that item were empty. I opted for the straightforward route since the ITaskItem[] solution isn't needed yet, and this implementation can easily be changed when we do need that.",
  "state": "MERGED",
  "createdAt": "2021-07-21T21:57:15Z",
  "updatedAt": "2021-12-20T18:34:48Z",
  "closedAt": "2021-07-27T08:17:57Z",
  "mergedAt": "2021-07-27T08:17:56Z",
  "additions": 12,
  "deletions": 1,
  "changedFiles": 4,
  "headRefName": "copycomplete-fix",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8e6fa76d488e667b1641526fa06acd7b6348e579",
          "message": "Add output parameter to Copy task and condition Touch task based off of it.",
          "committedDate": "2021-07-22T17:14:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8a6336468aaf1e5a4109aeaa7354ea58d2d261a",
          "message": "CopiedAtLeastOneFile is set on links",
          "committedDate": "2021-07-22T17:25:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e5343abeb8db6e4849511621e4ad6e4a799ad8a",
          "message": "Update src/Tasks/Copy.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-07-22T18:39:22Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1e3b471a96cb8ea2222618675ac0647733836e7",
          "message": "Rename CopiedAtLeastOneFile to WroteAtLeastOneFile",
          "committedDate": "2021-07-26T23:52:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Much like rainer suggested [here](https://github.com/dotnet/msbuild/issues/6576#issuecomment-872340678), I don't think this fixes some other incremental build problems in CSWinRT, but this was certainly a bug for CopyComplete in the first place.\r\n\r\ncc @scottj1s",
        "createdAt": "2021-07-21T22:02:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Why doesn't CopiedFiles work here?\r\n\r\nFound an answer in the issue! Wondering if the name of the new parameter shouldn't be more explicit in encoding the difference between it and non-empty `CopiedFiles`.",
        "createdAt": "2021-07-26T06:57:54Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro Any suggestions? I considered `ActuallyCopiedAtLeastOneFile` but thought that may have been too snarky \ud83d\ude04 ",
        "createdAt": "2021-07-26T16:58:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Maybe `SuccessfullyCopiedAtLeastOneFile`?\r\n\r\nWhat **exactly** is the difference between non-empty `CopiedFiles` and this new output parameter being true? That should help come up with the best name, I believe.",
        "createdAt": "2021-07-26T19:25:27Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "CopiedFiles is nonempty if either it copies files (in which case this is true) or it notices it doesn't have to copy files because it's up-to-date, in which case this would be false.",
        "createdAt": "2021-07-26T19:26:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Thank you, how about `UpdatedAtLeastOneFile` then? Plus a good comment on the prop.",
        "createdAt": "2021-07-26T19:30:45Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "ChangedFileContents? UpdatedAtLeastOneFile feels to me like it's specifically overwriting, whereas this could be making a new file where there wasn't one before.",
        "createdAt": "2021-07-26T20:33:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "`WroteAtLeastOneFile`? `ChangedFileContents` sounds like a prop to hold \"contents\", i.e. it's not obvious that it's a boolean. But not feeling strongly about it.",
        "createdAt": "2021-07-26T20:38:06Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "It isn't a huge deal\u2014better would've been to change CopiedFiles, but that isn't an option. I know I've also been annoyed sometimes when there was too much haggling over names \ud83d\ude42\r\n\r\nWhatever you decide, I'm fine with @BenVillalobos ",
        "createdAt": "2021-07-26T21:17:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I know I've also been annoyed sometimes when there was too much haggling over names\r\n\r\nYeah it gets particularly haggle-some when its public and therefore shouldn't be changed once it's in. `UpdatedAtLeastOneFile` makes slightly less sense when creating a new file. `WroteAtLeastOneFile` makes sense for both creating a link and creating a new file. Going with `WroteAtLeastOneFile` as the final name.",
        "createdAt": "2021-07-26T23:47:17Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            }\r\n\r\n            // Files were successfully copied or linked. Those are equivalent here.\r\n           CopiedAtLeastOneFile = true;\r\n```\r\n\r\n? Little shorter.",
              "createdAt": "2021-07-22T18:29:55Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -297,6 +300,12 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 Log.LogMessage(MessageImportance.Normal, FileComment, sourceFilePath, destinationFilePath);\n \n                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);\n+                CopiedAtLeastOneFile = true;\n+            }\n+            else\n+            {\n+                // Properly linked files will be considered successfully copied files.\n+                CopiedAtLeastOneFile = true;\n             }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: This line is not indented properly.",
              "createdAt": "2021-07-26T06:44:24Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -299,6 +302,9 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);\n             }\n \n+            // Files were successfully copied or linked. Those are equivalent here.\n+           CopiedAtLeastOneFile = true;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}