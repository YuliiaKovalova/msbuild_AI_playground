{
  "number": 7979,
  "title": "Support ItemDefinitionGroup in Choose/When",
  "body": "Fixes [#5436](https://github.com/dotnet/msbuild/issues/5436)\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\nThere is a significant error in the original Constuctor ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectRootElement parent, ProjectRootElement containingProject). The second parameter and third parameter types are the same. Fix the constructor bug and parse ItemDefinationGroup in when and otherwise.\r\n\r\n### Testing\r\nAdd one test SupportItemDefinationGroupInWhenOtherwise()\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-16T08:14:56Z",
  "updatedAt": "2022-10-07T15:26:09Z",
  "closedAt": "2022-10-07T14:59:45Z",
  "mergedAt": "2022-10-07T14:59:45Z",
  "additions": 83,
  "deletions": 8,
  "changedFiles": 4,
  "headRefName": "v-jennybai/FixIssue#5436",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "48f63c4f3ffaed7ff921df18ee9c0b069dfe1595",
          "message": "Support ItemDefinitionGroup in Choose/When",
          "committedDate": "2022-09-16T08:05:14Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbb2d4a77863956c1d71b8750dc3f2466cb21090",
          "message": "Add one test",
          "committedDate": "2022-09-19T07:27:43Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10da88500c702f03481bdd0e656954341e2174f5",
          "message": "Update test case",
          "committedDate": "2022-09-26T08:53:03Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "483ca4b22bc6cdecd7d28200f5b5c37fbdb6bb5e",
          "message": "Add one condition to disentangle when and otherwise",
          "committedDate": "2022-09-27T01:49:53Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/dotnet/msbuild?pullRequest=7979) <br/>All CLA requirements met.",
        "createdAt": "2022-09-16T08:15:10Z",
        "author": {
          "login": "dnfadmin"
        }
      },
      {
        "body": "Hello, assuming the repo owners would like to take this change, they will ask for unit test coverage too.",
        "createdAt": "2022-09-16T11:01:20Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Thanks @JaynieBai!",
        "createdAt": "2022-10-07T14:59:52Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I would expect tests that\n-verify that the IDG works, and isn't ignored \n-verify that multiple IDG are supported and they are processed top to bottom\n-this for multiple When, as well as Otherwise",
              "createdAt": "2022-09-19T14:00:30Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "I think testing the same way as `ItemGroup` might cover all the scenarios. That could be a start.",
              "createdAt": "2022-09-19T14:46:03Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Also put in some PropertyGroup and ItemGroup in there. Everything is evaluated in passes -- normally, all properties, then all IDG, then all items. each pass can \"see\" the previous, even if the elements were \"lower\" in the project file. So if there are PG and IG in here, whatever the ordering, the IG should see the IDG.\r\n\r\nThis comment is now wrong:\r\nhttps://github.com/dotnet/msbuild/blob/5d102ae37163fc1f22610bb433c3ab9a2fff91f0/src/Build/Evaluation/Evaluator.cs#L1495\r\nit's certainly important to verify that the IDG are \"working\" inside Choose.",
              "createdAt": "2022-09-19T15:49:31Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "@danmoseley  Should we add PropertyGroup and ItemGroup in the project definition, and verify the itemdefinitiongroup works there in the test?  ",
              "createdAt": "2022-09-20T10:50:09Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "> /// We enter here in both the property and item passes, since Chooses can contain both.\r\n\r\nWill remove this line or update to \"We enter here in the property, itemDefinition, and item passes, since Chooses can contain all of them\" ?",
              "createdAt": "2022-09-20T11:04:00Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "> @danmoseley  Should we add PropertyGroup and ItemGroup in the project definition, and verify the itemdefinitiongroup works there in the test?  \n\nSorry I'm not sure what you mean. Yes, I would expect tests that verify the IDG work, including consuming property expressions",
              "createdAt": "2022-09-20T14:08:48Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "There's some confusion here, so I'll just lay out roughly what I'd want the test to look like:\r\nProject\r\nChoose\r\nWhen\r\nItemGroup\r\nItemDefinitionGroup\r\nPropertyGroup\r\nOtherwise\r\nItemDefinitionGroup\r\nPropertyGroup\r\nItemGroup\r\n\r\nFor each ItemDefinitionGroup, PropertyGroup, and ItemGroup, there should be things actually defined in it, so like for a PropertyGroup:\r\n```XML\r\n<PropertyGroup>\r\n<Foo>bar</Foo>\r\n</PropertyGroup\r\n```\r\n\r\nThat's important because you can have something that parses without throwing an error but doesn't actually work, and you want to verify that it works.\r\n\r\nSo then you also want to make sure each of the Property/Item/ItemDefinitionGroups that you'd expected to execute actually did execute. It would be good to do that for both the When and the Otherwise case, so a Theory with one case for each would be appropriate here.\r\n\r\nIs that clearer? (And I'm guessing that hits what you wanted, right danmoseley?)",
              "createdAt": "2022-09-20T17:21:38Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@danmoseley   I have updated the test case, please have a look. Any suggestions, please let me know. Thank you.",
              "createdAt": "2022-09-26T08:56:07Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "This looks much closer to what I'd expect, but the When and Otherwise conditions are currently identical. That means we don't know if it's following the When, Otherwise, or both. It would be good to disentangle those.",
              "createdAt": "2022-09-26T22:07:16Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Add one condition to distinguish when it is following when or otherwise",
              "createdAt": "2022-09-27T02:01:53Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,29 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Fact]\n+        public void SupportItemDefinationGroupInWhenOtherwise()\n+        {\n+            MockLogger ml = ObjectModelHelpers.BuildProjectExpectSuccess(@\"\n+                    <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\n+                        <Choose>\n+                            <When Condition=` '$(OutputType)'=='Library' `>",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably add a check to make sure the parent isn't a Target, since we still reject ItemDefinitionGroups under targets.",
              "createdAt": "2022-09-19T15:08:03Z",
              "path": "src/Build/Construction/ProjectItemDefinitionGroupElement.cs",
              "diffHunk": "@@ -30,7 +30,7 @@ internal ProjectItemDefinitionGroupElement(ProjectItemDefinitionGroupElementLink\n         /// <summary>\n         /// Initialize a parented ProjectItemDefinitionGroupElement\n         /// </summary>\n-        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectRootElement parent, ProjectRootElement containingProject)\n+        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectElementContainer parent, ProjectRootElement containingProject)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "In the function ParseProjectTargetElement\uff0cthere is https://github.com/dotnet/msbuild/blob/cc3db358d34ad4cd1ec0c67e17582d7ca2a15040/src/Build/Evaluation/ProjectParser.cs#L629-L631, before to call the Itemdefinationgroup constructor, the error \"MSB4163: <ItemDefinitionGroup> is not allowed inside a target\" has been thrown when parse the child item under the target element.",
              "createdAt": "2022-09-20T09:50:03Z",
              "path": "src/Build/Construction/ProjectItemDefinitionGroupElement.cs",
              "diffHunk": "@@ -30,7 +30,7 @@ internal ProjectItemDefinitionGroupElement(ProjectItemDefinitionGroupElementLink\n         /// <summary>\n         /// Initialize a parented ProjectItemDefinitionGroupElement\n         /// </summary>\n-        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectRootElement parent, ProjectRootElement containingProject)\n+        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectElementContainer parent, ProjectRootElement containingProject)",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This might be out of topic but the only child element that doesn't support `Condition` attribute is `Choose`. Is it on purpose? I find myself, on some occasions, **needing** to add a conditional attribute to the `Choose` element itself.\r\n\r\nIf I don't have that option, the code kinda becomes error prone and cumbersome.\r\n\r\n<details>\r\n<summary><h4>For Example</h4></summary>\r\n\r\n```xml\r\n<Choose Condition=\"'$(RootCheck)' == 'true'\">\r\n  <When Condition=\"'$(ActualCheck)' == 'value1'\">\r\n  </When>\r\n  <When Condition=\"'$(ActualCheck)' == 'value2'\">\r\n  </When>\r\n  <Otherwise>\r\n  </Otherwise>\r\n</Choose>\r\n```\r\n\r\nis better, less repetitive and less error prone than the following...\r\n\r\n```xml\r\n<Choose>\r\n  <When Condition=\"'$(RootCheck)' == 'true' AND '$(ActualCheck)' == 'value1'\">\r\n  </When>\r\n  <When Condition=\"'$(RootCheck)' == 'true' AND '$(ActualCheck)' == 'value2'\">\r\n  </When>\r\n  <Otherwise Condition=\"'$(RootCheck)' == 'true'\">\r\n  </Otherwise>\r\n</Choose>\r\n```\r\n\r\n</details>",
              "createdAt": "2022-09-27T07:27:09Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "This test is for the ItemDefinitionGroup supported under choose/when and choose/otherwise, and not for the choose when or otherwise condition expression testing. So, didn't add condition expression for the Choose. ",
              "createdAt": "2022-09-28T01:57:41Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": ">  only child element that doesn't support Condition attribute is Choose. Is it on purpose?\r\n\r\nReaching back over 15 years .. no particular reason, it just didn't occur to anyone. I don't see why it couldn't be added if they want it.",
              "createdAt": "2022-09-28T02:19:38Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "> only child element that doesn't support Condition attribute is Choose. Is it on purpose?\r\n\r\nThis should be on purpose from this test case    https://github.com/dotnet/msbuild/blob/8872ed650643d12340fb22ece223c1aacf5a30a0/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs#L43-L61     ",
              "createdAt": "2022-09-29T03:53:26Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "@JaynieBai Nice Find... Thanks for looking it up.\n\nSeems on purpose but WHY? Instead of supporting it, they made sure it didn't. Still, WHY? I'm puzzled.\n\nI need this badly. Any chance that this can be allowed?",
              "createdAt": "2022-09-29T05:08:31Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "I'm not sure either.  @Forgind @rainersigwald Do you know anything about this?",
              "createdAt": "2022-09-29T07:32:40Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "JaynieBai"
              }
            },
            {
              "body": "I said why \ud83d\ude42 I implemented it. It just didn't occur to me at the time that it would be useful. Today I see no reason why it can't be added.",
              "createdAt": "2022-09-29T09:28:59Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "> It just didn't occur to me at the time that it would be useful.\r\n\r\nSo, were you one of devs who worked on MSBuild? \ud83d\ude32 I thought you were just speaking for the team. Sorry If I misunderstood you. \ud83d\ude25\r\n\r\n> Today I see no reason why it can't be added.\r\n\r\nThank you!",
              "createdAt": "2022-09-29T09:54:17Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Ha.. no problem. Yes, but I don't speak for the current team. I work on ASPNET now. My knowledge is historical.",
              "createdAt": "2022-10-03T15:16:43Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "@Nirmal4G, as far as I'm concerned, you're free to file a bug to add conditions as an option. My first impulse is that we'd treat it the same as ItemDefinitionGroups: if you want to implement it, and you do it properly, we can take it, but we aren't likely to prioritize it. But file the bug first so we can have an official team opinion.",
              "createdAt": "2022-10-03T18:35:50Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nWe're trying to use Shouldly for new tests, but I'm not blocking on that.",
              "createdAt": "2022-10-03T14:59:09Z",
              "path": "src/Build.UnitTests/Parser_Tests.cs",
              "diffHunk": "@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()\n             // Make sure the log contains the correct strings.\n             Assert.DoesNotContain(\"MSB4130:\", ml.FullLog); // \"No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3.\"\n         }\n+\n+        // see https://github.com/dotnet/msbuild/issues/5436\n+        [Theory]\n+        [InlineData(true)]\n+        [InlineData(false)]\n+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)\n+        {\n+            var projectContent = $@\"\n+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>\n+                    <Choose>\n+                        <When Condition= `{context}`>\n+                            <PropertyGroup>\n+                                <Foo>bar</Foo>\n+                            </PropertyGroup>\n+                            <ItemGroup>\n+                                <A Include= `$(Foo)`>\n+                                    <n>n1</n>\n+                                </A>\n+                            </ItemGroup>\n+                            <ItemDefinitionGroup>\n+                                <A>\n+                                    <m>m1</m>\n+                                    <n>n2</n>\n+                                </A>\n+                            </ItemDefinitionGroup>\n+                        </When>\n+                        <Otherwise>\n+                            <PropertyGroup>\n+                                <Foo>bar</Foo>\n+                            </PropertyGroup>\n+                            <ItemGroup>\n+                                <A Include= `$(Foo)`>\n+                                    <n>n1</n>\n+                                </A>\n+                            </ItemGroup>\n+                            <ItemDefinitionGroup>\n+                                <A>\n+                                    <m>m2</m>\n+                                    <n>n2</n>\n+                                </A>\n+                            </ItemDefinitionGroup>\n+                        </Otherwise>\n+                    </Choose>\n+                </Project>\n+                \".Cleanup();\n+\n+\n+            var project = ObjectModelHelpers.CreateInMemoryProject(projectContent);\n+\n+            var projectItem = project.GetItems(\"A\").FirstOrDefault();\n+            Assert.Equal(\"bar\", projectItem.EvaluatedInclude);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}