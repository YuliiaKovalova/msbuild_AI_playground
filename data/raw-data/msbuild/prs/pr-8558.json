{
  "number": 8558,
  "title": "Change WriteCodeFragment task to create directory",
  "body": "Fixes #8516\r\n\r\n### Context\r\nSetting an `OutputDirectory` where the directory does not exist, and setting an `OutputFile` would fail.\r\n\r\n(Setting an `OutputDirectory` where the directory does not exist, and not providing an `OutputFile` value would succeed because `FileUtilities.GetTemporaryFile` calls `Directory.CreateDirectory`.)\r\n\r\n### Changes Made\r\n\r\n#### WriteCodeFragment_Tests.cs\r\n- Added new unit tests:\r\n  - `CombineFileDirectoryAndDirectoryDoesNotExist` (pairs with `CombineFileDirectory`)\r\n  - `ToDirectoryAndDirectoryDoesNotExist` (pairs with `ToDirectory`)\r\n- Added overload of `CreateTask`\r\n\r\n#### WriteCodeFragment.cs\r\n- Changed task to call `FileUtilities.EnsureDirectoryExists`.\r\n\r\n### Testing\r\nAdded unit tests first and confirmed failure.\r\n\r\nRan all unit tests on Windows 11 and macOS 12 (Monterey).\r\n\r\n### Notes\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-13T12:42:16Z",
  "updatedAt": "2023-03-15T13:33:02Z",
  "closedAt": "2023-03-15T08:23:45Z",
  "mergedAt": "2023-03-15T08:23:45Z",
  "additions": 85,
  "deletions": 10,
  "changedFiles": 2,
  "headRefName": "WriteCodeFragment",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "20a5b0866b3aa0495678a0badf6acc704acff133",
          "message": "add new unit tests for WriteCodeFragment for non-existent directory",
          "committedDate": "2023-03-12T22:21:42Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b4f8f9f09a0d668ccdff93c1ce5835062cd89638",
          "message": "change folder names used in unit tests",
          "committedDate": "2023-03-13T02:07:38Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2620429ef811b3b00f55db45084f5c2e39d1725f",
          "message": "resolve TODOs",
          "committedDate": "2023-03-13T02:23:26Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4042789a254fccb649619ba741de97ae5c30a9b0",
          "message": "change to use Directory.Exists",
          "committedDate": "2023-03-13T02:51:16Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c7a00e1937bd3481c37e3d7eac8d91cde4a6d43a",
          "message": "Merge branch 'dotnet:main' into WriteCodeFragment",
          "committedDate": "2023-03-13T03:18:36Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "44941ec3f46c696c7ba5d3ec3515a4729ac01022",
          "message": "ensure that folder structure exists",
          "committedDate": "2023-03-13T03:36:55Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95650680f38836d244768316d0ebb1eea043425a",
          "message": "change to use FileUtilities.EnsureDirectoryExists",
          "committedDate": "2023-03-13T12:17:53Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40d9c921c82819cb58fd40cf806eff11834f7966",
          "message": "Use test env in new tests",
          "committedDate": "2023-03-13T15:59:42Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "705797086171be41081565da7cbf15d37ff67641",
          "message": " changes per PR review",
          "committedDate": "2023-03-13T16:57:06Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Off-topic except that I saw the problem while working on this issue:\r\nThe unit test `Microsoft.Build.UnitTests.Construction.SolutionProjectGenerator_Tests.BuildProjectWithMultipleTargetsInParallel` is sometimes failing on macOS, but it is not consistent. The failure is at line 262 in the following snippet:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/4ffba3fe0dd35a30cc892bc8c202a006acb8f20a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs#L261-L262",
        "createdAt": "2023-03-13T17:18:15Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "My instinct is to move this to after `OutputFile` is guaranteed to be defined, so the task will still create the required folder(s) for a fully-specified `OutputFile` when there's no `OutputDirectory`. Sound reasonable?",
              "createdAt": "2023-03-13T16:11:47Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -106,6 +106,11 @@ public override bool Execute()\n \n             try\n             {\n+                if (OutputDirectory != null && !Path.IsPathRooted(OutputFile?.ItemSpec))\n+                {\n+                    FileUtilities.EnsureDirectoryExists(OutputDirectory.ItemSpec);\n+                }\n+",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You mean where no `OutputDirectory` is provided and the `OutputFile` is a path and filename? Yes, I missed that case. There should be a unit test added to cover that. I'll make a change.",
              "createdAt": "2023-03-13T16:17:03Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -106,6 +106,11 @@ public override bool Execute()\n \n             try\n             {\n+                if (OutputDirectory != null && !Path.IsPathRooted(OutputFile?.ItemSpec))\n+                {\n+                    FileUtilities.EnsureDirectoryExists(OutputDirectory.ItemSpec);\n+                }\n+",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "committed a change",
              "createdAt": "2023-03-13T16:58:44Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -106,6 +106,11 @@ public override bool Execute()\n \n             try\n             {\n+                if (OutputDirectory != null && !Path.IsPathRooted(OutputFile?.ItemSpec))\n+                {\n+                    FileUtilities.EnsureDirectoryExists(OutputDirectory.ItemSpec);\n+                }\n+",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Using our `TestEnvironment` class will help streamline this even without going to a full modernization of the test logic. I'll push a small change.",
              "createdAt": "2023-03-13T16:13:38Z",
              "path": "src/Tasks.UnitTests/WriteCodeFragment_Tests.cs",
              "diffHunk": "@@ -90,6 +90,33 @@ public void CombineFileDirectory()\n             string file = Path.Combine(Path.GetTempPath(), \"CombineFileDirectory.tmp\");\n             Assert.Equal(file, task.OutputFile.ItemSpec);\n             Assert.True(File.Exists(file));\n+\n+            File.Delete(task.OutputFile.ItemSpec);\n+        }\n+\n+        /// <summary>\n+        /// Combine file and directory where the directory does not already exist\n+        /// </summary>\n+        [Fact]\n+        public void CombineFileDirectoryAndDirectoryDoesNotExist()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did this test work on Unix before?",
              "createdAt": "2023-03-13T17:02:35Z",
              "path": "src/Tasks.UnitTests/WriteCodeFragment_Tests.cs",
              "diffHunk": "@@ -176,7 +221,7 @@ public void NoAttributesShouldEmitNoFile2()\n         /// <summary>\n         /// Bad file path\n         /// </summary>\n-        [Fact]\n+        [WindowsOnlyFact(additionalMessage: \"No invalid characters on Unix.\")]",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It worked before because the path didn't exist. Now that we ensure that the path is created, the test fails because there is not an `MSB3713` error as the test expects. :grinning:",
              "createdAt": "2023-03-13T17:06:52Z",
              "path": "src/Tasks.UnitTests/WriteCodeFragment_Tests.cs",
              "diffHunk": "@@ -176,7 +221,7 @@ public void NoAttributesShouldEmitNoFile2()\n         /// <summary>\n         /// Bad file path\n         /// </summary>\n-        [Fact]\n+        [WindowsOnlyFact(additionalMessage: \"No invalid characters on Unix.\")]",
              "author": {
                "login": "jrdodds"
              }
            },
            {
              "body": "Ah, looks like 3713 is a very generic error for any failure after our initial validation. Makes sense, thanks!",
              "createdAt": "2023-03-13T18:38:40Z",
              "path": "src/Tasks.UnitTests/WriteCodeFragment_Tests.cs",
              "diffHunk": "@@ -176,7 +221,7 @@ public void NoAttributesShouldEmitNoFile2()\n         /// <summary>\n         /// Bad file path\n         /// </summary>\n-        [Fact]\n+        [WindowsOnlyFact(additionalMessage: \"No invalid characters on Unix.\")]",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}