{
  "number": 6731,
  "title": "Force ResolveComReference to 32-bit",
  "body": "This works around a runtime bug in an optprof test.\r\n\r\nFixes [AB#1338964](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1338964)\r\n\r\n### Context\r\nIt turns out the optprof for our main branch has been failing for quite some time\u2014ever since we switched to 64-bit. That could prevent us from getting accurate data on which code paths are called most often, preventing us from properly optimizing the positioning of various methods within our assemblies, but it doesn't appear to have affected that so dramatically, possibly because collecting data had been succeeding, but a test hadn't been. Upon further investigation, it appears the failing test was due to a bug in the runtime, but we do not regularly service .NET Framework, and this is such an obscure and bizarre scenario that we think it likely that no or virtually no customers are hitting it, so it is not worth an emergency release of a new version of .NET Framework. That's why, at least for now, the best option is to work around it.\r\n\r\nThe bug only occurs when:\r\n1. You are running IBC Training\r\n2. You are using the amd64 CLR.\r\n3. An appdomain is unloaded.\r\n4. The appdomain contains a number of assemblies that are not loaded multi-domain shareable.\r\n5. For at least one of these assemblies, earlier execution within the appdomain triggered creation of one or more associated generic methods where the overall generic instantiation is spread across multiple assemblies.\r\n\r\n(Those conditions came from a contact on the runtime team; I don't know what's special about IBC training that makes this happen.)\r\n\r\nIn any case, the only task that appears to be executing in the relevant test that uses an appdomain in that way is the ResolveComReference task.\r\n\r\n### Changes Made\r\nThis forces the ResolveComReference task to always run in 32-bit unless otherwise specified via disabling the change wave.\r\n\r\n### Testing\r\nThe test run was failing consistently without a very similar change and started passing once the change was implemented.",
  "state": "CLOSED",
  "createdAt": "2021-08-03T23:50:33Z",
  "updatedAt": "2021-08-12T22:03:23Z",
  "closedAt": "2021-08-12T22:03:23Z",
  "mergedAt": null,
  "additions": 1,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "fix-optprof-test",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d27742c99eaf5c2132b1a2836abc9c6b187fe3a4",
          "message": "Force ResolveComReference to 32-bit\n\nThis works around a runtime bug in an optprof test.",
          "committedDate": "2021-08-03T23:40:30Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "It's certainly unusual, but can you explain why it damages the customer experience? I thought of it like rewriting csc in C# 1.0. It doesn't make sense, but other than its performance, it doesn't affect what users can do.",
        "createdAt": "2021-08-04T14:23:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> It's certainly unusual, but can you explain why it damages the customer experience?\r\n\r\nThis modifies a task that is architecture-dependent (previously ran as `$(PlatformTargetAsMSBuildArchitecture)`) and forces it to run in x86. That means it will break for, for example, the `x64` case, if the COM reference is registered only in the 64-bit registry.",
        "createdAt": "2021-08-04T20:15:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Also want to make sure this is super clear:\r\n\r\n> we do not regularly service .NET Framework\r\n\r\nThis is not true at all; several versions of .NET Framework are fully supported and it is serviced when required (almost every month). See https://docs.microsoft.com/en-us/lifecycle/products/microsoft-net-framework\r\n\r\n",
        "createdAt": "2021-08-04T20:17:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}