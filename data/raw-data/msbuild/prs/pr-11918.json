{
  "number": 11918,
  "title": "Dev/erarndt/drain packet queue",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-28T00:27:04Z",
  "updatedAt": "2025-05-28T09:44:49Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 79,
  "deletions": 91,
  "changedFiles": 2,
  "headRefName": "dev/erarndt/DrainPacketQueue",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6329105c3a535f7df374b0a14bcfe18445728a77",
          "message": "Use dedicated thread for DrainPacketQueue",
          "committedDate": "2025-05-16T19:02:18Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28ff5ed72f1abc9b5ffc7168b90e8f40f483c1e0",
          "message": "Handle exit packet delay",
          "committedDate": "2025-05-27T17:23:45Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6cc918f3beb211c4e9b985dd83f3774552647ebc",
          "message": "Smaller optimizations",
          "committedDate": "2025-05-28T00:25:57Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The inline cache retrieval logic is duplicated in both the Items getter and the translation method. Consider extracting this logic into a single helper method to reduce duplication and improve maintainability.",
              "createdAt": "2025-05-28T00:27:33Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -102,7 +102,15 @@ public ITaskItem[] Items\n             {\n                 lock (_result)\n                 {\n-                    RetrieveItemsFromCache();\n+                    if (_items == null)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The infinite loop in the DrainPacketQueue method lacks an exit condition, which could cause the thread to never terminate. Consider adding a termination condition or checking the cancellation token to allow for a graceful shutdown.",
              "createdAt": "2025-05-28T00:27:33Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -717,82 +724,67 @@ public void SendData(INodePacket packet)\n                     _exitPacketState = ExitPacketState.ExitPacketQueued;\n                 }\n                 _packetWriteQueue.Enqueue(packet);\n-                DrainPacketQueue();\n+                _packetEnqueued.Set();\n             }\n \n             /// <summary>\n-            /// Schedule a task to drain the packet write queue. We could have had a\n-            /// dedicated thread that would pump the queue constantly, but\n-            /// we don't want to allocate a dedicated thread per node (1MB stack)\n+            /// We use a dedicated thread to\n             /// </summary>\n             /// <remarks>Usually there'll be a single packet in the queue, but sometimes\n-            /// a burst of SendData comes in, with 10-20 packets scheduled. In this case\n-            /// the first scheduled task will drain all of them, and subsequent tasks\n-            /// will run on an empty queue. I tried to write logic that avoids queueing\n-            /// a new task if the queue is already being drained, but it didn't show any\n-            /// improvement and made things more complicated.</remarks>\n-            private void DrainPacketQueue()\n+            /// a burst of SendData comes in, with 10-20 packets scheduled.</remarks>\n+            private void DrainPacketQueue(object state)\n             {\n-                // this lock is only necessary to protect a write to _packetWriteDrainTask field\n-                lock (_packetWriteQueue)\n+                NodeContext context = (NodeContext)state;\n+                MemoryStream writeStream = context._writeBufferMemoryStream;\n+                Stream serverToClientStream = context._serverToClientStream;\n+                ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);\n+\n+                while (true)\n                 {\n-                    // average latency between the moment this runs and when the delegate starts\n-                    // running is about 100-200 microseconds (unless there's thread pool saturation)\n-                    _packetWriteDrainTask = _packetWriteDrainTask.ContinueWith(\n-                        SendDataCoreAsync,\n-                        this,\n-                        TaskScheduler.Default).Unwrap();\n-\n-                    static async Task SendDataCoreAsync(Task _, object state)\n+                    context._packetEnqueued.WaitOne();",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please fix the comment.",
              "createdAt": "2025-05-28T09:23:45Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -717,82 +724,67 @@ public void SendData(INodePacket packet)\n                     _exitPacketState = ExitPacketState.ExitPacketQueued;\n                 }\n                 _packetWriteQueue.Enqueue(packet);\n-                DrainPacketQueue();\n+                _packetEnqueued.Set();\n             }\n \n             /// <summary>\n-            /// Schedule a task to drain the packet write queue. We could have had a\n-            /// dedicated thread that would pump the queue constantly, but\n-            /// we don't want to allocate a dedicated thread per node (1MB stack)\n+            /// We use a dedicated thread to",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "With channels, there is `ChannelReader<T>.WaitToReadAsync(CancellationToken)`, is there something similar for the queue? (it would eliminate the need for the autoreset event)\r\nHowever the benefit will be negligible if any, so it's more of a \"having less stuff is nice\" kind of thing.\r\n\r\n",
              "createdAt": "2025-05-28T09:26:53Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -717,82 +724,67 @@ public void SendData(INodePacket packet)\n                     _exitPacketState = ExitPacketState.ExitPacketQueued;\n                 }\n                 _packetWriteQueue.Enqueue(packet);\n-                DrainPacketQueue();\n+                _packetEnqueued.Set();",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a benefit to unroll this as opposed to just removing the lock (_result) from the section?\r\n\r\nAlso a secondary question:\r\nI noticed that there is \r\n```\r\n               lock (_result)\r\n                {\r\n                    RetrieveItemsFromCache();\r\n```\r\nand the first thing that the RetrieveItemsFromCache is lock(_result)\r\n\r\nwas this strictly unnecessary or was there any method to this madness?",
              "createdAt": "2025-05-28T09:39:35Z",
              "path": "src/Build/BackEnd/Shared/TargetResult.cs",
              "diffHunk": "@@ -301,25 +318,6 @@ private void InternalTranslate(ITranslator translator)\n             TranslateItems(translator);\n         }\n \n-        /// <summary>\n-        /// Retrieve the items from the cache.\n-        /// </summary>\n-        private void RetrieveItemsFromCache()",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we ever cleaning up this thread? e.g. does it properly die with the node context?\r\nWhen we start a new build with persistent main node due to the MSBuild server, could it happen that these threads start piling up? \r\n(Normally it wouldn't be an issue due to the fact that we're not persisting the main node.)",
              "createdAt": "2025-05-28T09:44:49Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs",
              "diffHunk": "@@ -605,6 +598,12 @@ private enum ExitPacketState\n             /// </summary>\n             private BinaryReaderFactory _binaryReaderFactory;\n \n+            private AutoResetEvent _packetEnqueued;\n+\n+            private CancellationTokenSource _packetQueueDrainDelayCancellation;\n+\n+            private Thread drainPacketQueueThread;",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}