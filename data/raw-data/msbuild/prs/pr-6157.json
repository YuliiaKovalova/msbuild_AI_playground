{
  "number": 6157,
  "title": "Rename GenerateReferenceAssemblySources -> GenerateReferenceAssemblySource",
  "body": "When https://github.com/dotnet/msbuild/pull/6141 updated from Microsoft.DotNet.BuildTools.GenAPI to Microsoft.DotNet.GenAPI our reference assembly source generation logic stopped working.\r\n\r\nTurns out the new NuGet package targets relies on singular spelling to insert itself after PrepareForRun:\r\n\r\n<PrepareForRunDependsOn Condition=\"'$(GenerateReferenceAssemblySource)' == 'true'\">\r\n\r\nUpdate our spelling to singular everywhere now that we're using the new package.\r\n",
  "state": "MERGED",
  "createdAt": "2021-02-16T03:09:38Z",
  "updatedAt": "2021-02-23T21:51:56Z",
  "closedAt": "2021-02-23T21:12:51Z",
  "mergedAt": "2021-02-23T21:12:51Z",
  "additions": 549,
  "deletions": 511,
  "changedFiles": 18,
  "headRefName": "dev/kirillo/GenerateReferenceAssemblySource",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      },
      {
        "login": "benvillalobos"
      }
    ]
  },
  "labels": [
    "Area: Our Own Build",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "55b50aa2b39614b075dabfafa7eea1096554b80c",
          "message": "Rename GenerateReferenceAssemblySources -> GenerateReferenceAssemblySource\n\nWhen https://github.com/dotnet/msbuild/pull/6141 updated from Microsoft.DotNet.BuildTools.GenAPI to Microsoft.DotNet.GenAPI our reference assembly source generation logic stopped working.\n\nTurns out the new NuGet package targets relies on singular spelling to insert itself after PrepareForRun:\n\n<PrepareForRunDependsOn Condition=\"'$(GenerateReferenceAssemblySource)' == 'true'\">\n\nUpdate our spelling to singular everywhere now that we're using the new package.",
          "committedDate": "2021-02-16T03:09:03Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fabd1b50c8ec4fd9ed50cbc54a471e3c28b3520f",
          "message": "Update genapi parameters",
          "committedDate": "2021-02-16T23:01:36Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fead1a4a54d1838fe2e06cb657b3355daa0ccac2",
          "message": "Run build.cmd and include auto-generated/updated files",
          "committedDate": "2021-02-16T23:02:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The command-line options for the GenAPI tool must have changed. The tool is running now (good) but fails:\r\n\r\n```\r\n  Unhandled Exception: McMaster.Extensions.CommandLineUtils.UnrecognizedCommandParsingException: Unrecognized option '-\r\n  e'\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineProcessor.HandleUnexpectedArg(String argTypeName, String argVal\r\n  ue)\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineProcessor.ProcessOption()\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineProcessor.ProcessNext()\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineProcessor.Process()\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineApplication.Parse(String[] args)\r\n     at McMaster.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)\r\n     at Microsoft.DotNet.GenAPI.Program.Main(String[] args) in /_/src/Microsoft.DotNet.GenAPI/Program.cs:line 54\r\n  StringTools -> C:\\msbuild\\artifacts\\bin\\StringTools\\Debug\\netstandard2.0\\Microsoft.NET.StringTools.dll\r\nC:\\Users\\kirill\\.nuget\\packages\\microsoft.dotnet.genapi\\5.0.0-beta.19467.25\\build\\Microsoft.DotNet.GenAPI.targets(47,5)\r\n: error MSB3073: The command \"\"C:\\Users\\kirill\\.nuget\\packages\\microsoft.dotnet.genapi\\5.0.0-beta.19467.25\\build\\\\..\\to\r\nols\\net472\\Microsoft.DotNet.GenAPI.exe\" \"C:\\msbuild\\artifacts\\bin\\Microsoft.Build.Framework\\Debug\\net472\\Microsoft.Buil\r\nd.Framework.dll\" --lib-path \"C:\\Users\\kirill\\.nuget\\packages\\microsoft.netframework.referenceassemblies.net472\\1.0.0\\bu\r\nild\\.NETFramework\\v4.7.2;C:\\Users\\kirill\\.nuget\\packages\\microsoft.netframework.referenceassemblies.net472\\1.0.0\\build\\\r\n.NETFramework\\v4.7.2\\Facades\" --out \"C:\\msbuild\\ref\\Microsoft.Build.Framework\\net\\Microsoft.Build.Framework.cs\"  -exclu\r\ndeApiList:\"C:\\msbuild\\ref\\ExcludeAPIList.txt\" -excludeAttributesList:\"C:\\msbuild\\ref\\ExcludeAttributeList.txt\" -headerF\r\nile:\"C:\\msbuild\\ref\\LicenseHeader.txt\"\" exited with code -532462766. [C:\\msbuild\\src\\Framework\\Microsoft.Build.Framewor\r\nk.csproj]\r\n```\r\n\r\n@BenVillalobos mind taking over this PR and fixing this up? Thanks!",
        "createdAt": "2021-02-16T03:16:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The args that need to be updated are:\r\n--exclude-api-list\r\n--exclude-attributes-list\r\n--header-file",
        "createdAt": "2021-02-16T22:51:49Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Any idea why it's now adding these dummy fields?",
              "createdAt": "2021-02-17T16:01:33Z",
              "path": "ref/Microsoft.Build/netstandard/Microsoft.Build.cs",
              "diffHunk": "@@ -1423,23 +1427,25 @@ public partial class CacheResult\n     }\n     public enum CacheResultType\n     {\n+        None = 0,\n         CacheHit = 1,\n         CacheMiss = 2,\n         CacheNotApplicable = 3,\n-        None = 0,\n     }\n     public abstract partial class PluginLoggerBase\n     {\n         protected PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) { }\n         public abstract bool HasLoggedErrors { get; protected set; }\n         public abstract void LogError(string error);\n-        public abstract void LogMessage(string message, System.Nullable<Microsoft.Build.Framework.MessageImportance> messageImportance=default(System.Nullable<Microsoft.Build.Framework.MessageImportance>));\n+        public abstract void LogMessage(string message, Microsoft.Build.Framework.MessageImportance? messageImportance = default(Microsoft.Build.Framework.MessageImportance?));\n         public abstract void LogWarning(string warning);\n     }\n     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]\n-    public partial struct PluginTargetResult\n+    public readonly partial struct PluginTargetResult\n     {\n-        public PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) { throw null;}\n+        private readonly object _dummy;\n+        private readonly int _dummyPrimitive;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Great question, I have no idea! @epananth any ideas why this might happen \ud83d\ude42? I believe this source generator is owned by arcade.",
              "createdAt": "2021-02-17T20:08:53Z",
              "path": "ref/Microsoft.Build/netstandard/Microsoft.Build.cs",
              "diffHunk": "@@ -1423,23 +1427,25 @@ public partial class CacheResult\n     }\n     public enum CacheResultType\n     {\n+        None = 0,\n         CacheHit = 1,\n         CacheMiss = 2,\n         CacheNotApplicable = 3,\n-        None = 0,\n     }\n     public abstract partial class PluginLoggerBase\n     {\n         protected PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) { }\n         public abstract bool HasLoggedErrors { get; protected set; }\n         public abstract void LogError(string error);\n-        public abstract void LogMessage(string message, System.Nullable<Microsoft.Build.Framework.MessageImportance> messageImportance=default(System.Nullable<Microsoft.Build.Framework.MessageImportance>));\n+        public abstract void LogMessage(string message, Microsoft.Build.Framework.MessageImportance? messageImportance = default(Microsoft.Build.Framework.MessageImportance?));\n         public abstract void LogWarning(string warning);\n     }\n     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]\n-    public partial struct PluginTargetResult\n+    public readonly partial struct PluginTargetResult\n     {\n-        public PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) { throw null;}\n+        private readonly object _dummy;\n+        private readonly int _dummyPrimitive;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Discussed with @riarenas, he mentioned that this lives in arcade but we do not own it. @ericstj might know more about this. ",
              "createdAt": "2021-02-17T20:20:30Z",
              "path": "ref/Microsoft.Build/netstandard/Microsoft.Build.cs",
              "diffHunk": "@@ -1423,23 +1427,25 @@ public partial class CacheResult\n     }\n     public enum CacheResultType\n     {\n+        None = 0,\n         CacheHit = 1,\n         CacheMiss = 2,\n         CacheNotApplicable = 3,\n-        None = 0,\n     }\n     public abstract partial class PluginLoggerBase\n     {\n         protected PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) { }\n         public abstract bool HasLoggedErrors { get; protected set; }\n         public abstract void LogError(string error);\n-        public abstract void LogMessage(string message, System.Nullable<Microsoft.Build.Framework.MessageImportance> messageImportance=default(System.Nullable<Microsoft.Build.Framework.MessageImportance>));\n+        public abstract void LogMessage(string message, Microsoft.Build.Framework.MessageImportance? messageImportance = default(Microsoft.Build.Framework.MessageImportance?));\n         public abstract void LogWarning(string warning);\n     }\n     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]\n-    public partial struct PluginTargetResult\n+    public readonly partial struct PluginTargetResult\n     {\n-        public PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) { throw null;}\n+        private readonly object _dummy;\n+        private readonly int _dummyPrimitive;",
              "author": {
                "login": "epananth"
              }
            },
            {
              "body": "These are added here for compile-time compat. This is added to structs that have private fields that need to be initialized. \r\n\r\nhttps://github.com/dotnet/arcade/blob/ca7fab569267ed3bc73360882d652d119aae5653/src/Microsoft.Cci.Extensions/Writers/CSharp/CSharpWriter.cs#L159-L184\r\n\r\nIf we don't include these it is observable, and potentially dangerous, impact on project that consume them:\r\n\r\n- Allows pointers to be created for structs with fields of a reference type.\r\n- Prevents the compiler from catching cyclic struct layout problems.\r\n- Breaks C# definite assignment checking.\r\n- Allows structs using [FieldOffset] to verify when they should not.\r\n- Prevents developers from correctly planning for interop scenarios.\r\n\r\nHere is the issue that made us add this: https://github.com/dotnet/runtime/issues/16402",
              "createdAt": "2021-02-18T19:10:33Z",
              "path": "ref/Microsoft.Build/netstandard/Microsoft.Build.cs",
              "diffHunk": "@@ -1423,23 +1427,25 @@ public partial class CacheResult\n     }\n     public enum CacheResultType\n     {\n+        None = 0,\n         CacheHit = 1,\n         CacheMiss = 2,\n         CacheNotApplicable = 3,\n-        None = 0,\n     }\n     public abstract partial class PluginLoggerBase\n     {\n         protected PluginLoggerBase(Microsoft.Build.Framework.LoggerVerbosity verbosity) { }\n         public abstract bool HasLoggedErrors { get; protected set; }\n         public abstract void LogError(string error);\n-        public abstract void LogMessage(string message, System.Nullable<Microsoft.Build.Framework.MessageImportance> messageImportance=default(System.Nullable<Microsoft.Build.Framework.MessageImportance>));\n+        public abstract void LogMessage(string message, Microsoft.Build.Framework.MessageImportance? messageImportance = default(Microsoft.Build.Framework.MessageImportance?));\n         public abstract void LogWarning(string warning);\n     }\n     [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]\n-    public partial struct PluginTargetResult\n+    public readonly partial struct PluginTargetResult\n     {\n-        public PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) { throw null;}\n+        private readonly object _dummy;\n+        private readonly int _dummyPrimitive;",
              "author": {
                "login": "safern"
              }
            }
          ]
        }
      }
    ]
  }
}