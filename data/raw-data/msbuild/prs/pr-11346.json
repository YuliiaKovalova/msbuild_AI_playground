{
  "number": 11346,
  "title": "Removing last instances of the BinaryFormatter",
  "body": "Fixes #11323\r\n\r\n### Context\r\nWe used `BinaryFormatter` in the serialization logic to support build custom events. With the VS 17.14, we can remove the last instances of the `BinaryFormatter` in our codebase.\r\n\r\n### Changes Made\r\n`TranslateDotNet` implementation was removed and `OutOfProcNode` now unconditionally emits build error instead of sending packets with the custom event. \r\n\r\n### Testing\r\nModified existing unit test.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-28T15:59:16Z",
  "updatedAt": "2025-02-12T14:42:25Z",
  "closedAt": "2025-02-12T14:42:23Z",
  "mergedAt": "2025-02-12T14:42:23Z",
  "additions": 97,
  "deletions": 305,
  "changedFiles": 21,
  "headRefName": "dev/mipavlik/remove-binary-formatter",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2bacc427b0f54f5a14a0cc5c59b8aa95b1ad8268",
          "message": "The last instances of the BinaryFormatter have been removed",
          "committedDate": "2025-01-28T15:52:46Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57b333ad5495b832584e9645656ee4d14458b9e7",
          "message": "Update src/Build/BackEnd/Components/Logging/LoggingService.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2025-01-29T10:00:29Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f888bde3dd03d80cff0e770477505d59fa5d064",
          "message": "Update src/Shared/Resources/Strings.shared.resx\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2025-01-29T10:00:46Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5dff5a539bac94a3240b13b164dd35b95d73694a",
          "message": "Fix for CA1823 and SA1508",
          "committedDate": "2025-01-29T10:39:56Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e86ebdca2635e2ceebf1cfc6d815001c4a26aade",
          "message": "Xlf update",
          "committedDate": "2025-01-29T13:29:07Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bee35969cc9da77e5e5c2586d86ec04a9ebb018a",
          "message": "NetFx version emits warning instead of error",
          "committedDate": "2025-01-29T14:55:17Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "to fix the build issue you need to build msbuild locally and have the strings generated again.\r\n",
        "createdAt": "2025-01-29T11:22:57Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "> to fix the build issue you need to build msbuild locally and have the strings generated again.\r\n\r\nYeah, it's not the first time I've encountered this kind of error, but thank you :)",
        "createdAt": "2025-01-29T14:33:03Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>Custom event type '{0}' is not supported as all custom event types were deprecated. Please use Extended*EventArgs instead. More info: https://aka.ms/msbuild/eventargs</value>\r\n```",
              "createdAt": "2025-01-28T17:29:51Z",
              "path": "src/Shared/Resources/Strings.shared.resx",
              "diffHunk": "@@ -136,7 +136,7 @@\n     <value>Event type \"{0}\" was expected to be serializable using the .NET serializer. The event was not serializable and has been ignored.</value>\n   </data>\n   <data name=\"DeprecatedEventSerialization\" xml:space=\"preserve\">\n-    <value>Usage of unsecure BinaryFormatter during serialization of custom event type '{0}'. This will be deprecated soon. Please use Extended*EventArgs instead. More info: https://aka.ms/msbuild/eventargs</value>\n+    <value>Custom event type '{0}' is not supported as all custom event types were deprecated due to unsecure serialization. Please use Extended*EventArgs instead. More info: https://aka.ms/msbuild/eventargs</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should literally never be hit, right? Maybe rephrase to\r\n\r\n```suggestion\r\n            ErrorUtilities.VerifyThrow(loggingPacket.EventType != LoggingEventType.CustomEvent, \"Custom event types are no longer supported. Does the sending node have a different version?\");\r\n```",
              "createdAt": "2025-01-28T17:32:13Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -971,58 +971,11 @@ public void PacketReceived(int node, INodePacket packet)\n             LogMessagePacket loggingPacket = (LogMessagePacket)packet;\n             InjectNonSerializedData(loggingPacket);\n \n-            WarnOnDeprecatedCustomArgsSerialization(loggingPacket);\n+            ErrorUtilities.VerifyThrow(loggingPacket.EventType != LoggingEventType.CustomEvent, \"Custom event types are no longer supported. The check should be implemented in OutOfPRocNode.SendPacket\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok I guess I am forced to agree with the whiny CA1823: get rid of `s_customEventsLoaded`, `s_resolver, and `s_lockObject` :)",
              "createdAt": "2025-01-28T17:46:42Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Of course :) I wanted to have PR before EOD to gather early feedback.",
              "createdAt": "2025-01-29T13:36:53Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wait I'm confused by this part. If it was only firing on core before, is it right to do it now? Or had we completely removed even the opt-in part on core, so this is now just unifying that behavior?",
              "createdAt": "2025-01-28T17:48:09Z",
              "path": "src/Build/BackEnd/Node/OutOfProcNode.cs",
              "diffHunk": "@@ -583,10 +583,8 @@ private void SendPacket(INodePacket packet)\n         {\n             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)\n             {\n-#if RUNTIME_TYPE_NETCORE",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "For some reason the logic was bit convoluted - on sender side there was an error logged instead of transmitting the event - but just for core. On the receiving side there was a warning logged if the event was received. The warning was opt-out - it was logged by default.\r\n\r\nSo this was opt-out - now the opt-out mechanism is removed.\r\nThe severity of the diagnostic for the NetFx will effectively rise from warning to error - which might break scenarios where ppl actively avoided addressing the issue - e.g.: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1936439 - which might be a good forcing function, but possibly unappreciated breakage.\r\n\r\n\r\nHow about we keep this a warning for NETFx?\r\n",
              "createdAt": "2025-01-28T18:50:46Z",
              "path": "src/Build/BackEnd/Node/OutOfProcNode.cs",
              "diffHunk": "@@ -583,10 +583,8 @@ private void SendPacket(INodePacket packet)\n         {\n             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)\n             {\n-#if RUNTIME_TYPE_NETCORE",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "As discussed offline, we will keep warning for .NETFx an .NET version will produce error.",
              "createdAt": "2025-01-29T14:33:54Z",
              "path": "src/Build/BackEnd/Node/OutOfProcNode.cs",
              "diffHunk": "@@ -583,10 +583,8 @@ private void SendPacket(INodePacket packet)\n         {\n             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)\n             {\n-#if RUNTIME_TYPE_NETCORE",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We should update (or create dotnet/docs bug requesting the update) the https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/custombuildeventargs - to remove the mention of the opt-out",
              "createdAt": "2025-01-28T18:35:02Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -392,29 +392,6 @@ public SdkReferencePropertyExpansionMode? SdkReferencePropertyExpansion\n             }\n         }\n \n-        /// <summary>\n-        /// Allows displaying the deprecation warning for BinaryFormatter in your current environment.\n-        /// </summary>\n-        public bool EnableWarningOnCustomBuildEvent\n-        {\n-            get\n-            {\n-                var value = Environment.GetEnvironmentVariable(\"MSBUILDCUSTOMBUILDEVENTWARNING\");",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Good point. #11354",
              "createdAt": "2025-01-29T13:46:18Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -392,29 +392,6 @@ public SdkReferencePropertyExpansionMode? SdkReferencePropertyExpansion\n             }\n         }\n \n-        /// <summary>\n-        /// Allows displaying the deprecation warning for BinaryFormatter in your current environment.\n-        /// </summary>\n-        public bool EnableWarningOnCustomBuildEvent\n-        {\n-            get\n-            {\n-                var value = Environment.GetEnvironmentVariable(\"MSBUILDCUSTOMBUILDEVENTWARNING\");",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}