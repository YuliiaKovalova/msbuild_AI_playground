{
  "number": 8867,
  "title": "Add WithoutMetadataValue",
  "body": "Fixes [#8205](https://github.com/dotnet/msbuild/issues/8205)\r\n\r\n### Context\r\nThe following set of [item functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2022) allow to condition on or filter items based on metadata:\r\n\r\nAnyHaveMetdataValue\r\nHasMetadata\r\nWithMetadataValue\r\nThese functions make it super simple to include items or condition based on metadata during evaluation time, without the need of batching (inside a target).\r\n\r\nOver the last years I often wished that there would also be a WithoutMetadataValue item function so that the following pattern wouldn't require an extra target:\r\n\r\n```\r\n<Target Name=\"GetCompileFilteredItems\">\r\n  <ItemGroup>\r\n    <CompileFiltered Include=\"@(Compile->WithMetadataValue('ExcludeFromX', ''))\" />\r\n    <CompileFiltered Include=\"@(Compile->WithMetadataValue('ExcludeFromX', 'false'))\" />\r\n  </ItemGroup>\r\n</Target>\r\n\r\n<Target Name=\"X\"\r\n             Inputs=\"@(CompileFiltered)\"\r\n             Outputs=\"...\"\r\n             DependsOnTargets=\"GetCompileFilteredItems\">\r\n  ...\r\n</Target>\r\n```\r\nInstead, with a WithoutMetadtaValue item function, the filtering can happen just in-time without a separate target.\r\n\r\n```\r\n<Target Name=\"X\"\r\n             Inputs=\"@(Compile->WithoutMetadataValue('ExcludeFromX', 'true'))\"\r\n             Outputs=\"...\">\r\n  ...\r\n</Target>\r\n```\r\n\r\n### Changes Made\r\nAdd one new function **WithoutMetadataValue**\r\n\r\n### Testing\r\nAdd one test WithoutMetadataValue()\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-12T02:06:16Z",
  "updatedAt": "2023-06-27T01:52:43Z",
  "closedAt": "2023-06-27T01:52:41Z",
  "mergedAt": "2023-06-27T01:52:41Z",
  "additions": 70,
  "deletions": 18,
  "changedFiles": 2,
  "headRefName": "Jennybai/withoutmetadatavalue",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6e06bc8b94413cbb172d8cf32cd41d6bb52acb0d",
          "message": "Add WithoutMetadataValue",
          "committedDate": "2023-06-12T02:05:37Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c0cbbb8f52cafe45f1b01f5591b322a8a46ebc0",
          "message": "Refactor the test case",
          "committedDate": "2023-06-12T06:49:23Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4add2e9a7078635e516f7151c6e0bc8149ea03c5",
          "message": "concise the catch exceptions",
          "committedDate": "2023-06-21T04:01:34Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-06-21T09:35:26Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-06-21T09:35:35Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The first question I asked myself is whether you could get !String.Equals(null, null) here, since that would mean you'd get the wrong response, but I don't think it's possible to get a real null, so it should be fine.",
              "createdAt": "2023-06-12T22:09:06Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2843,6 +2843,42 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, \"InvalidItemFunctionSyntax\", functionName, arguments == null ? 0 : arguments.Length);\n+\n+                    string metadataName = arguments[0];\n+                    string metadataValueToFind = arguments[1];\n+\n+                    foreach (Pair<string, S> item in itemsOfType)\n+                    {\n+                        string metadataValue = null;\n+\n+                        try\n+                        {\n+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                        }\n+                        catch (ArgumentException ex) // Blank metadata name\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }\n+                        catch (InvalidOperationException ex)\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }\n+\n+                        if (!String.Equals(metadataValue, metadataValueToFind, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> The first question I asked myself is whether you could get !String.Equals(null, null) here, since that would mean you'd get the wrong response, but I don't think it's possible to get a real null, so it should be fine.\r\n\r\nYes, It won't be null",
              "createdAt": "2023-06-13T09:56:10Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2843,6 +2843,42 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, \"InvalidItemFunctionSyntax\", functionName, arguments == null ? 0 : arguments.Length);\n+\n+                    string metadataName = arguments[0];\n+                    string metadataValueToFind = arguments[1];\n+\n+                    foreach (Pair<string, S> item in itemsOfType)\n+                    {\n+                        string metadataValue = null;\n+\n+                        try\n+                        {\n+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                        }\n+                        catch (ArgumentException ex) // Blank metadata name\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }\n+                        catch (InvalidOperationException ex)\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }\n+\n+                        if (!String.Equals(metadataValue, metadataValueToFind, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@Forgind  I can extract this same part into a new function. ",
              "createdAt": "2023-06-13T09:55:41Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2843,6 +2843,42 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, \"InvalidItemFunctionSyntax\", functionName, arguments == null ? 0 : arguments.Length);\n+\n+                    string metadataName = arguments[0];\n+                    string metadataValueToFind = arguments[1];\n+\n+                    foreach (Pair<string, S> item in itemsOfType)\n+                    {\n+                        string metadataValue = null;\n+\n+                        try\n+                        {\n+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                        }\n+                        catch (ArgumentException ex) // Blank metadata name\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }\n+                        catch (InvalidOperationException ex)\n+                        {\n+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, \"CannotEvaluateItemMetadata\", metadataName, ex.Message);\n+                        }",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can be expressed more conscise with:\r\n```\r\ncatch (Exception ex) when (ex is ArgumentException || ex is InvalidOperationException)\r\n```",
              "createdAt": "2023-06-14T09:04:10Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2843,6 +2843,42 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, \"InvalidItemFunctionSyntax\", functionName, arguments == null ? 0 : arguments.Length);\n+\n+                    string metadataName = arguments[0];\n+                    string metadataValueToFind = arguments[1];\n+\n+                    foreach (Pair<string, S> item in itemsOfType)\n+                    {\n+                        string metadataValue = null;\n+\n+                        try\n+                        {\n+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                        }\n+                        catch (ArgumentException ex) // Blank metadata name",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Updated",
              "createdAt": "2023-06-25T08:43:44Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2843,6 +2843,42 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns those items don't have the given metadata value\n+                /// Using a case insensitive comparison.\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments?.Length == 2, elementLocation, \"InvalidItemFunctionSyntax\", functionName, arguments == null ? 0 : arguments.Length);\n+\n+                    string metadataName = arguments[0];\n+                    string metadataValueToFind = arguments[1];\n+\n+                    foreach (Pair<string, S> item in itemsOfType)\n+                    {\n+                        string metadataValue = null;\n+\n+                        try\n+                        {\n+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName);\n+                        }\n+                        catch (ArgumentException ex) // Blank metadata name",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      }
    ]
  }
}