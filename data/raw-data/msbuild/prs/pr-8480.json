{
  "number": 8480,
  "title": "LiveLogger: ConcurrentDictionary for projects",
  "body": "This should avoid some exceptions observed caused by races between modifying and accessing the dictionary, part of #8458.\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-21T22:11:45Z",
  "updatedAt": "2023-02-27T02:55:11Z",
  "closedAt": "2023-02-27T02:55:11Z",
  "mergedAt": "2023-02-27T02:55:11Z",
  "additions": 7,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "livelogger-concurrentdict",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "764e45b47a525ae394483e369ed96583067f3c79",
          "message": "LiveLogger: ConcurrentDictionary for projects\n\nThis should avoid some exceptions observed caused by races between modifying and accessing the dictionary, part of #8458.",
          "committedDate": "2023-02-21T22:11:25Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The change helps but I suspect that we will end up with some locking anyway. Logger callbacks mutate just about everything in the `ProjectNode` hierarchy, not only the top-level dictionary.\r\n\r\nExample: `eventSource_TargetStarted` sets `CurrentTargetNode` on the corresponding `ProjectNode`.\r\n\r\n```C#\r\n            CurrentTargetNode = new TargetNode(args);\r\n```\r\n\r\nand it's used on another thread like so:\r\n\r\n```C#\r\n            if (CurrentTargetNode is null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            string currentTargetLineContents = $\"    \u2514\u2500\u2500 {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}\";\r\n```\r\n\r\nEven this is not thread safe. We could try to fix all these lock-free (in this case `volatile` should do) but such fine-grain memory barriers, concurrent collections, and atomic ops may end up costing more than a simple lock.",
        "createdAt": "2023-02-22T13:00:18Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Agreed. One thing that is in our favor is that some tearing is OK here if it can get cleaned up on the next state update/logger frame.",
        "createdAt": "2023-02-22T14:29:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}