{
  "number": 6513,
  "title": "Fix MakeRelative regression in v16.10 (rebased to vs16.10 branch)",
  "body": "Fixes #6493\r\n\r\nSummary\r\nMSBuild's MakeRelative function does not fit the spec for how that function should work. \r\n\r\nCustomer impact\r\nCustomers who use our MakeRelative function expect the relative path produced to end in a slash if and only if the input path ends in a slash. It currently does not end in a slash whether or not the input path ended in a slash. Users can invoke this function directly, and it can lead to dlls not being found, among other problems.\r\n\r\nRegression?\r\nYes, from #6311 (16.10 Preview 2). The URI-based function that had existed prior failed in another scenario, and the new form is also faster. This PR resolves a bug associated with that change.\r\n\r\nChanges Made\r\nOnly removes the ending slash if the input path did not end in a slash.\r\n\r\nTesting\r\nExtensive unit test coverage. This is a community contribution, and I imagine it was also tested locally. (Please correct me if I'm wrong, @dsparkplug.)\r\n\r\nRisk\r\nLow. Rather than always removing the final slash, this conditionally removes it, reverting to prior behavior. No other (non-test) parts of the code base were altered.",
  "state": "MERGED",
  "createdAt": "2021-06-03T02:19:56Z",
  "updatedAt": "2021-06-08T19:52:04Z",
  "closedAt": "2021-06-08T19:52:04Z",
  "mergedAt": "2021-06-08T19:52:04Z",
  "additions": 47,
  "deletions": 5,
  "changedFiles": 4,
  "headRefName": "fix-makerelative",
  "isDraft": false,
  "author": {
    "login": "dsparkplug"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "149c776c7eca865e696ea69d6a08ab658eb5f19d",
          "message": "Fix MakeRelative regression in v16.10\n\nAdded some more unit tests as per suggestions\n\nFixed unit test failing on linux\n\nRemoved unnecessary length check\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-06-03T02:02:44Z",
          "author": {
            "name": "Dave Sparks",
            "email": "dave.sparks@finalbuilder.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe2c68f250250b74a60a6b8c4c3dec491cb36005",
          "message": "Pulled in some external changes to Microsoft.Build.cs",
          "committedDate": "2021-06-03T04:56:45Z",
          "author": {
            "name": "Dave Sparks",
            "email": "dave.sparks@finalbuilder.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The MSBuild team agreed we would try to take this for 16.10 as you suggested. We will need internal approval, so I'm modifying your opening message to fit the template.",
        "createdAt": "2021-06-04T19:03:50Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Sorry about this; we fixed if for 16.11 but not 16.10.",
              "createdAt": "2021-06-03T16:46:18Z",
              "path": "ref/Microsoft.Build/netstandard/Microsoft.Build.cs",
              "diffHunk": "@@ -1568,8 +1568,8 @@ public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph\n         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }\n         public override bool Equals(object obj) { throw null; }\n         public override int GetHashCode() { throw null; }\n-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }\n+        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "should it also check Path.AlternateDirectorySeparatorChar?",
              "createdAt": "2021-06-04T20:24:45Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -1078,7 +1078,12 @@ internal static string MakeRelative(string basePath, string path)\n             {\n                 sb.Append(splitPath[i]).Append(Path.DirectorySeparatorChar);\n             }\n-            sb.Length--;\n+\n+            if (fullPath[fullPath.Length - 1] != Path.DirectorySeparatorChar)",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "My understanding is that the `fullPath` has already been normalised within the `Path.GetFullPath` function so should only contain `Path.DirectorySeparatorChar`?",
              "createdAt": "2021-06-05T06:49:30Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -1078,7 +1078,12 @@ internal static string MakeRelative(string basePath, string path)\n             {\n                 sb.Append(splitPath[i]).Append(Path.DirectorySeparatorChar);\n             }\n-            sb.Length--;\n+\n+            if (fullPath[fullPath.Length - 1] != Path.DirectorySeparatorChar)",
              "author": {
                "login": "dsparkplug"
              }
            },
            {
              "body": "Looks like that's true for [unix](https://github.com/dotnet/runtime/blob/8709d595f7105cbf73774ec762266bc56f99cf04/src/libraries/System.Private.CoreLib/src/System/IO/PathInternal.cs#L196-L200). [Windows](https://github.com/dotnet/runtime/blob/8709d595f7105cbf73774ec762266bc56f99cf04/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.GetFullPathNameW.cs#L15) calls down into the kernel, but I'm assuming it's the same.",
              "createdAt": "2021-06-07T14:47:18Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -1078,7 +1078,12 @@ internal static string MakeRelative(string basePath, string path)\n             {\n                 sb.Append(splitPath[i]).Append(Path.DirectorySeparatorChar);\n             }\n-            sb.Length--;\n+\n+            if (fullPath[fullPath.Length - 1] != Path.DirectorySeparatorChar)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sure is:\r\n\r\n```csharp\r\nMicrosoft (R) Visual C# Interactive Compiler version 3.10.0-4.21269.26 ()\r\nLoading context from 'CSharpInteractive.rsp'.\r\nType \"#help\" for more information.\r\n> System.Console.WriteLine(System.IO.Path.GetFullPath(\"C:/abc/def/\"));\r\nC:\\abc\\def\\\r\n> System.Console.WriteLine(System.IO.Path.GetFullPath(\"C:/abc/def\"));\r\nC:\\abc\\def\r\n> \r\n```",
              "createdAt": "2021-06-07T23:39:06Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -1078,7 +1078,12 @@ internal static string MakeRelative(string basePath, string path)\n             {\n                 sb.Append(splitPath[i]).Append(Path.DirectorySeparatorChar);\n             }\n-            sb.Length--;\n+\n+            if (fullPath[fullPath.Length - 1] != Path.DirectorySeparatorChar)",
              "author": {
                "login": "dsparkplug"
              }
            }
          ]
        }
      }
    ]
  }
}