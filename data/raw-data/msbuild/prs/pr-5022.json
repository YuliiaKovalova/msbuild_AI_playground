{
  "number": 5022,
  "title": "Avoid a first-chance exception in DeleteNoThrow.",
  "body": "It makes debugging unit-tests with first-chance exceptions a bit better.",
  "state": "CLOSED",
  "createdAt": "2020-01-01T02:06:01Z",
  "updatedAt": "2021-01-03T03:01:51Z",
  "closedAt": "2020-01-09T21:42:30Z",
  "mergedAt": null,
  "additions": 5,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "DeleteNoThrow",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a1ee5c27c211f3f0b42f84df9034be5455be4932",
          "message": "Avoid a first-chance exception in DeleteNoThrow.\n\nIt makes debugging unit-tests with first-chance exceptions a bit better.",
          "committedDate": "2020-01-01T02:05:38Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Are you worried about perf? Hopefully the file system makes this negligible. I also hope to offset this by removing thousands of File.Exists checks for .winmd files in RAR with my other PR ;)\r\n\r\nFunctionally, the highly unlikely case when the file system changes in between the two calls can fall into two buckets:\r\n1. file didn't exist but it starts existing - we don't enter the condition and the file survives - but arguably if the condition wasn't in place, there's high chance of us trying to delete the file before it appears, so we're not losing anything in correctness here\r\n2. file existed but it disappears before the second call - then we just get an exception like we had before, so this is functionally equivalent to the old code.\r\n\r\nRealistically and practically though, I reduce the chance of a first-chance exception from 100% to 0.001% and I call it a good thing.",
        "createdAt": "2020-01-07T18:29:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Other than in test code, DeleteNoThrow is used in 2 places:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/037db14d698d4bf0322c2bc69ea00b4c08f1e078/src/Tasks/Copy.cs#L310\r\n\r\nhttps://github.com/microsoft/msbuild/blob/87255d576bcd260dceb8cc52a369564529ac98e7/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L906\r\n\r\nThe latter does a FileExists check itself. Maybe the caller code that triggers the first chance exception should be updated to do that check?",
        "createdAt": "2020-01-09T19:31:40Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "That's a good idea, also less invasive.",
        "createdAt": "2020-01-09T19:53:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Hmm, I forgot which test was problematic, and it's used in a lot of places.\r\n\r\nOur options:\r\n1. Just close the PR and have a more targeted fix next time\r\n2. Add an optional parameter whether to check for file existence and default to false to match old behavior. Turn it on in places that don't want to do their own null check. This would force clarify the contract at the callsites. This is more work.\r\n\r\nI'm now leaning towards option 1 as I certainly don't want to make the Copy operation more expensive...",
        "createdAt": "2020-01-09T20:00:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Yes I'm just going to close this. Even if we want to fix something, it should go elsewhere.",
        "createdAt": "2020-01-09T21:42:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}