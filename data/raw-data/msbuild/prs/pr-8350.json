{
  "number": 8350,
  "title": "Introduce intrinsic to 'intersect' target frameworks",
  "body": "This is the initial implementation of an experimental intrinsic designed to support the ability to build subsets of a repo/solution/project. This ability can reduce build time and support the ability to build projects based on available target resources per-platforms.\r\n\r\nThe idea is that this intrinsic would be used in a set of targets that are imported early, before standard .NET SDK targets, and could be used to filter the target frameworks that a project is going to build for. .NET's arcade will contain an initial implementation of those targets, looking something like this:\r\n\r\n```\r\n<PropertyGroup Condition=\"$(_EnableTargetFrameworkFiltering)\">\r\n  <_OriginalTargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(TargetFrameworks)</_OriginalTargetFrameworks>\r\n  <_OriginalTargetFrameworks Condition=\"'$(TargetFramework)' != ''\">$(TargetFramework)</_OriginalTargetFrameworks>\r\n  <_FilteredTargetFrameworks>$([MSBuild]::Unescape($([MSBuild]::IntersectTargetFrameworks('$(_OriginalTargetFrameworks)', '$(DotNetTargetFrameworkFilter)'))))</_FilteredTargetFrameworks>\r\n  <!-- Maintain usage of the original property,  -->\r\n  <TargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(_FilteredTargetFrameworks)</TargetFrameworks>\r\n  <TargetFramework Condition=\"'$(TargetFramework)' != ''\">$(_FilteredTargetFrameworks)</TargetFramework>\r\n  <ExcludeFromBuild Condition=\"'$(_FilteredTargetFrameworks)' == ''\">true</ExcludeFromBuild>\r\n</PropertyGroup>\r\n```\r\n\r\nInitially, the intrinsic is implemented as follows:\r\n- A framework is maintained if the Framework name (Framework property of parsed nuget property) exists in both lists AND\r\n- The version matches, if specified.\r\n\r\nThus, if a TFM list is: `net6.0-windows;netstandard2.0;net472` and the intersect list is `net6.0;netstandard2.0`, the result would be net6.0;netstandard2.0.\r\n\r\nIt's possible that before this MSBuild version goes out of preview. There are two other options:\r\n- **An implementation that selects based on compatibilty**. The inherent problem with a compatibility check (based on NuGet's notion) is that some TFMs are compatible with TFMs you may want to remove. For instance, you may want to keep netstandard2.0, but not net472. However, since net472 is compatible with netstandard2.0, it would not be eliminated.\r\n- **Strict intersection based on all TFM properties**. This is simpler and more straightforward, but requires a more verbose input list. For instance, if you wanted to preserve net6 targets, especially in cross-targeting situations, you may have list many TFMs (e.g. specific OS versions like net6.0-windows).\r\n\r\nOf these alternate approaches, I think strict is the most likely to be usable and understandable.\r\n\r\nFixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-01-24T20:08:56Z",
  "updatedAt": "2023-01-26T15:28:13Z",
  "closedAt": "2023-01-26T15:28:13Z",
  "mergedAt": "2023-01-26T15:28:12Z",
  "additions": 60,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "target-framework-intersect",
  "isDraft": false,
  "author": {
    "login": "mmitche"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bed586d16b899325f69404721227a5dc639f5ad6",
          "message": "Introduce intrinsic to 'intersect' target frameworks\nThis is the initial implementation of an experimental intrinsic designed to support the ability to build subsets of a repo/solution/project. This ability can reduce build time and support the ability to build projects based on available target resources per-platforms.\n\nThe idea is that this intrinsic would be used in a set of targets that are imported early, before standard .NET SDK targets, and could be used to filter the target frameworks that a project is going to build for. .NET's arcade will contain an initial implementation of those targets, looking something like this:\n\n```\n<PropertyGroup Condition=\"$(_EnableTargetFrameworkFiltering)\">\n  <_OriginalTargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(TargetFrameworks)</_OriginalTargetFrameworks>\n  <_OriginalTargetFrameworks Condition=\"'$(TargetFramework)' != ''\">$(TargetFramework)</_OriginalTargetFrameworks>\n  <_FilteredTargetFrameworks>$([MSBuild]::Unescape($([MSBuild]::IntersectTargetFrameworks('$(_OriginalTargetFrameworks)', '$(DotNetTargetFrameworkFilter)'))))</_FilteredTargetFrameworks>\n  <!-- Maintain usage of the original property,  -->\n  <TargetFrameworks Condition=\"'$(TargetFrameworks)' != ''\">$(_FilteredTargetFrameworks)</TargetFrameworks>\n  <TargetFramework Condition=\"'$(TargetFramework)' != ''\">$(_FilteredTargetFrameworks)</TargetFramework>\n  <ExcludeFromBuild Condition=\"'$(_FilteredTargetFrameworks)' == ''\">true</ExcludeFromBuild>\n</PropertyGroup>\n```\n\nInitially, the intrinsic is implemented as follows:\n- A framework is maintained if the Framework name (Framework property of parsed nuget property) exists in both lists AND\n- The version matches, if specified.\n\nThus, if a TFM list is: `net6.0-windows;netstandard2.0;net472` and the intersect list is `net6.0;netstandard2.0`, the result would be net6.0;netstandard2.0.\n\nIt's possible that before this MSBuild version goes out of preview. There are two other options:\n- **An implementation that selects based on compatibilty**. The inherent problem with a compatibility check (based on NuGet's notion) is that some TFMs are compatible with TFMs you may want to remove. For instance, you may want to keep netstandard2.0, but not net472. However, since net472 is compatible with netstandard2.0, it would not be eliminated.\n- **Strict intersection based on all TFM properties**. This is simpler and more straightforward, but requires a more verbose input list. For instance, if you wanted to preserve net6 targets, especially in cross-targeting situations, you may have list many TFMs (e.g. specific OS versions like net6.0-windows).\n\nOf these alternate approaches, I think strict is the most likely to be usable and understandable.",
          "committedDate": "2023-01-24T19:37:17Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5541ef2867250eeda2768be589be84ca80765b23",
          "message": "Rename intrinsic and add a few tests",
          "committedDate": "2023-01-25T17:50:51Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8154a2415cea22bea9bc3d6e27acaf7ed56f48b4",
          "message": "Fix usings",
          "committedDate": "2023-01-25T18:00:06Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "55f8703d1e1cf31094cf68ad92b12c3b5d437203",
          "message": "And...one more stringbuilder fix",
          "committedDate": "2023-01-25T18:10:00Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e65afce2a668eae61448791a400069a68300fc4e",
          "message": "I'm bad at this",
          "committedDate": "2023-01-25T18:19:33Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "819ff06f704f32a26e655edc0de6d696491823d1",
          "message": "Fix test",
          "committedDate": "2023-01-25T18:34:42Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8eabc06ce6ffb76768832587e182b94644bfa594",
          "message": "Try a different approach",
          "committedDate": "2023-01-25T23:30:00Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bde9b146a9a1927bf4b4b3692b5d0b72ebe7b319",
          "message": "I made some tests",
          "committedDate": "2023-01-25T23:56:04Z",
          "author": {
            "name": "Matt Mitchell",
            "email": "mmitche@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Since we have a bit before 17.6 ships, my thought is to get this checked in, dogfooded a bit, and then fail fast and change the intersection approach ASAP if need be. I assume I also need to add tests.\r\n\r\nI currently have this working in the VMR for roslyn, with arcade targets. It works pretty well, though I'd like to be able to test outside of the VMR and in more traditonal arcade scenarios.",
        "createdAt": "2023-01-24T20:38:07Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "/cc @ViktorHofer ",
        "createdAt": "2023-01-24T20:39:39Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "@Forgind @rainersigwald I realize now that Expander_Tests.cs do not test the intrinsics. They test the property/item expansions. Is there a place where intrinsics can be tested? I can't seem to find one.",
        "createdAt": "2023-01-25T18:54:37Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "> @Forgind @rainersigwald I realize now that Expander_Tests.cs do not test the intrinsics. They test the property/item expansions. Is there a place where intrinsics can be tested? I can't seem to find one.\r\n\r\nI'm a little confused by this question. Do you mean directly testing the intrinsic function without going through expanding the `$([MSBuild]::Function(...))` call?",
        "createdAt": "2023-01-25T23:20:35Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > @Forgind @rainersigwald I realize now that Expander_Tests.cs do not test the intrinsics. They test the property/item expansions. Is there a place where intrinsics can be tested? I can't seem to find one.\r\n> \r\n> I'm a little confused by this question. Do you mean directly testing the intrinsic function without going through expanding the `$([MSBuild]::Function(...))` call?\r\n\r\nI think I may have been a little confused by what was happening in some of the test methods. I'll let you know if I need more help.",
        "createdAt": "2023-01-25T23:30:36Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "I got what I wanted to working. Thanks!",
        "createdAt": "2023-01-25T23:56:36Z",
        "author": {
          "login": "mmitche"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "string.Empty",
              "createdAt": "2023-01-24T23:33:09Z",
              "path": "src/Build/Utilities/NuGetFrameworkWrapper.cs",
              "diffHunk": "@@ -91,5 +95,42 @@ private string GetNonZeroVersionParts(Version version, int minVersionPartCount)\n             var nonZeroVersionParts = version.Revision == 0 ? version.Build == 0 ? version.Minor == 0 ? 1 : 2 : 3 : 4;\n             return version.ToString(Math.Max(nonZeroVersionParts, minVersionPartCount));\n         }\n+\n+        public string IntersectTargetFrameworks(string left, string right)\n+        {\n+            IEnumerable<(string originalTfm, object parsedTfm)> leftFrameworks = ParseTfms(left);\n+            IEnumerable<(string originalTfm, object parsedTfm)> rightFrameworks = ParseTfms(right);\n+            string tfmList = \"\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Or maybe a StringBuilder, though this should be a very short list.",
              "createdAt": "2023-01-25T00:44:42Z",
              "path": "src/Build/Utilities/NuGetFrameworkWrapper.cs",
              "diffHunk": "@@ -91,5 +95,42 @@ private string GetNonZeroVersionParts(Version version, int minVersionPartCount)\n             var nonZeroVersionParts = version.Revision == 0 ? version.Build == 0 ? version.Minor == 0 ? 1 : 2 : 3 : 4;\n             return version.ToString(Math.Max(nonZeroVersionParts, minVersionPartCount));\n         }\n+\n+        public string IntersectTargetFrameworks(string left, string right)\n+        {\n+            IEnumerable<(string originalTfm, object parsedTfm)> leftFrameworks = ParseTfms(left);\n+            IEnumerable<(string originalTfm, object parsedTfm)> rightFrameworks = ParseTfms(right);\n+            string tfmList = \"\";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}