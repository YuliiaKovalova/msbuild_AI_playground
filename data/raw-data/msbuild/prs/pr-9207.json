{
  "number": 9207,
  "title": "Fix dotnet path for RoslynCodeTaskFactory",
  "body": "Fixes #9052\r\n\r\n### Context\r\nFor RoslynCodeTaskFactory, dotnet path is wrongly set using the path of the application when running the application via application.exe.\r\n\r\n### Changes Made\r\nGet dotnet path through the following in order.\r\n\r\n1. Honor the environment variable DOTNET_HOST_PATH for tools and MSBuild tasks within the SDK to ensure a consistent experience.\r\n2. Fallback to get dotnet path from current process which might be dotnet executable.\r\n3. If the path resolved above is not dotnet executable, rely on dotnet via the system's PATH.\r\n\r\n### Testing\r\nAdd a test that verifies build the task of RoslynCodeTaskFactory using API.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-09-05T10:24:32Z",
  "updatedAt": "2023-10-30T08:42:56Z",
  "closedAt": "2023-10-26T14:57:33Z",
  "mergedAt": "2023-10-26T14:57:33Z",
  "additions": 71,
  "deletions": 2,
  "changedFiles": 3,
  "headRefName": "api-dotnetpath",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "63edbe4d9dc9b944659c64cd06416f448bea71fc",
          "message": "Fix dotnet path for RoslynCodeTaskFactory",
          "committedDate": "2023-09-12T10:02:01Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7a87f67152a80701d6c04e8c7ed9ea521ba15315",
          "message": "Make the test for netcore only",
          "committedDate": "2023-09-20T08:52:52Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b6fb56ceb100a0d3cc3e25215d15e4e024db7a00",
          "message": "Resolve code review comment",
          "committedDate": "2023-09-20T10:38:29Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-09-20T10:21:08Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-09-20T10:21:17Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "You shouldn't need this line--do you?",
              "createdAt": "2023-09-18T20:28:13Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -1068,6 +1068,61 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void RoslynCodeTaskFactory_UsingAPI()\n+        {\n+            string text = $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"Custom1\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\" >\n+    <ParameterGroup>\n+      <SayHi ParameterType=\"\"System.String\"\" Required=\"\"true\"\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Reference Include=\"\"{typeof(Enumerable).Assembly.Location}\"\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's not needed. Removed.",
              "createdAt": "2023-09-20T10:21:51Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -1068,6 +1068,61 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void RoslynCodeTaskFactory_UsingAPI()\n+        {\n+            string text = $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"Custom1\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\" >\n+    <ParameterGroup>\n+      <SayHi ParameterType=\"\"System.String\"\" Required=\"\"true\"\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Reference Include=\"\"{typeof(Enumerable).Assembly.Location}\"\" />",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Feels like this should be at most low-pri, and I question having it at all. Do we not log the command line we're going to invoke before we invoke it? If we do is that clear enough?",
              "createdAt": "2023-09-18T20:37:38Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs",
              "diffHunk": "@@ -99,7 +120,8 @@ protected override string GenerateFullPathToTool()\n             }\n \n #if RUNTIME_TYPE_NETCORE\n-            return DotnetCliPath;\n+            Log.LogMessageFromText($\"dotnet path is {dotnetCliPath}\", StandardOutputImportanceToUse);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "yeah, the command line is logged and it's better to verify the command line.",
              "createdAt": "2023-09-20T10:23:47Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs",
              "diffHunk": "@@ -99,7 +120,8 @@ protected override string GenerateFullPathToTool()\n             }\n \n #if RUNTIME_TYPE_NETCORE\n-            return DotnetCliPath;\n+            Log.LogMessageFromText($\"dotnet path is {dotnetCliPath}\", StandardOutputImportanceToUse);",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand the `#if` here. Can you explain why the behavior is conditional? Should we make the test netcore-only?",
              "createdAt": "2023-09-18T20:39:40Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -1068,6 +1068,61 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void RoslynCodeTaskFactory_UsingAPI()\n+        {\n+            string text = $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"Custom1\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\" >\n+    <ParameterGroup>\n+      <SayHi ParameterType=\"\"System.String\"\" Required=\"\"true\"\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Reference Include=\"\"{typeof(Enumerable).Assembly.Location}\"\" />\n+      <Code Type=\"\"Fragment\"\" Language=\"\"cs\"\">\n+        <![CDATA[\n+        string sayHi = \"\"Hello \"\" + SayHi;\n+        Log.LogMessage(sayHi);\n+        ]]>\n+      </Code>\n+    </Task>\n+  </UsingTask>\n+\n+    <Target Name=\"\"Build\"\">\n+        <Custom1 SayHi=\"\"World\"\" />\n+    </Target>\n+\n+</Project>\";\n+\n+            using var env = TestEnvironment.Create();\n+#if !FEATURE_RUN_EXE_IN_TESTS\n+            RunnerUtilities.ApplyDotnetHostPathEnvironmentVariable(env);\n+#endif\n+\n+            var project = env.CreateTestProjectWithFiles(\"p1.proj\", text);\n+\n+            var logger = project.BuildProjectExpectSuccess();\n+#if !FEATURE_RUN_EXE_IN_TESTS\n+            var filter = \"dotnet path is \";\n+#else\n+            var filter = \"Compiling task source code\";\n+\n+#endif",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agree. The fix is for .NET version of msbuild. It's not necessary to test .net framework.",
              "createdAt": "2023-09-20T10:28:43Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -1068,6 +1068,61 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void RoslynCodeTaskFactory_UsingAPI()\n+        {\n+            string text = $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"Custom1\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\" >\n+    <ParameterGroup>\n+      <SayHi ParameterType=\"\"System.String\"\" Required=\"\"true\"\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Reference Include=\"\"{typeof(Enumerable).Assembly.Location}\"\" />\n+      <Code Type=\"\"Fragment\"\" Language=\"\"cs\"\">\n+        <![CDATA[\n+        string sayHi = \"\"Hello \"\" + SayHi;\n+        Log.LogMessage(sayHi);\n+        ]]>\n+      </Code>\n+    </Task>\n+  </UsingTask>\n+\n+    <Target Name=\"\"Build\"\">\n+        <Custom1 SayHi=\"\"World\"\" />\n+    </Target>\n+\n+</Project>\";\n+\n+            using var env = TestEnvironment.Create();\n+#if !FEATURE_RUN_EXE_IN_TESTS\n+            RunnerUtilities.ApplyDotnetHostPathEnvironmentVariable(env);\n+#endif\n+\n+            var project = env.CreateTestProjectWithFiles(\"p1.proj\", text);\n+\n+            var logger = project.BuildProjectExpectSuccess();\n+#if !FEATURE_RUN_EXE_IN_TESTS\n+            var filter = \"dotnet path is \";\n+#else\n+            var filter = \"Compiling task source code\";\n+\n+#endif",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "our convention is that `private` fields should start with an `_`\r\n\r\n```suggestion\r\n        private readonly string _dotnetCliPath;\r\n```\r\n\r\n(we don't do this universally everywhere but it's used in this file, for example `_executablePath`, so let's stick with it here)",
              "createdAt": "2023-09-20T09:19:49Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs",
              "diffHunk": "@@ -14,7 +15,7 @@ namespace Microsoft.Build.Tasks\n     internal abstract class RoslynCodeTaskFactoryCompilerBase : ToolTaskExtension\n     {\n #if RUNTIME_TYPE_NETCORE\n-        private static readonly string DotnetCliPath = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;\n+        private readonly string dotnetCliPath;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: with Shouldly a failure here would be easier to understand as\r\n\r\n```suggestion\r\n            logLines.Where(l => l.Contains(dotnetPath)).Count.ShouldBe(1, log);\r\n```\r\n\r\nThis also avoids creating a concrete `List<T>`, which isn't generally required unless we're going to enumerate it more than once.",
              "createdAt": "2023-09-20T09:22:15Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -1068,6 +1068,49 @@ public override bool Execute()\n             }\n         }\n \n+#if !FEATURE_RUN_EXE_IN_TESTS\n+        [Fact]\n+        public void RoslynCodeTaskFactory_UsingAPI()\n+        {\n+            string text = $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"Custom1\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\" >\n+    <ParameterGroup>\n+      <SayHi ParameterType=\"\"System.String\"\" Required=\"\"true\"\" />\n+    </ParameterGroup>\n+    <Task>\n+      <Code Type=\"\"Fragment\"\" Language=\"\"cs\"\">\n+        <![CDATA[\n+        string sayHi = \"\"Hello \"\" + SayHi;\n+        Log.LogMessage(sayHi);\n+        ]]>\n+      </Code>\n+    </Task>\n+  </UsingTask>\n+\n+    <Target Name=\"\"Build\"\">\n+        <Custom1 SayHi=\"\"World\"\" />\n+    </Target>\n+\n+</Project>\";\n+\n+            using var env = TestEnvironment.Create();\n+            RunnerUtilities.ApplyDotnetHostPathEnvironmentVariable(env);\n+            var dotnetPath = Environment.GetEnvironmentVariable(\"DOTNET_HOST_PATH\");\n+\n+            var project = env.CreateTestProjectWithFiles(\"p1.proj\", text);\n+            var logger = project.BuildProjectExpectSuccess();\n+            var logLines = logger.AllBuildEvents.Select(a => a.Message);\n+            var log = string.Join(\"\\n\", logLines);\n+            var messages = logLines.Where(l => l.Contains(dotnetPath)).ToList();\n+            messages.Count.ShouldBe(1, log);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}