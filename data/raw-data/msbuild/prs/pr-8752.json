{
  "number": 8752,
  "title": "Remove incorrect checks from GetRuntimeVersion",
  "body": "Fixes #8731\r\n\r\n### Context\r\n\r\nThe .NET Core version of MSBuild has its own metadata reader implementation and `GetRuntimeVersion` contains checks that are stricter than what the full Framework implementation does. Specifically, it allows only \"version-like\" runtime versions, which makes it fail to read the version of WinRT assemblies.\r\n\r\n### Changes Made\r\n\r\nRemoved the incorrect checks.\r\n\r\n### Testing\r\n\r\n- New unit test.\r\n- Verified that referencing a WinRT assembly now makes RAR produce the right output.\r\n",
  "state": "MERGED",
  "createdAt": "2023-05-12T09:03:04Z",
  "updatedAt": "2023-06-13T12:24:39Z",
  "closedAt": "2023-05-18T10:01:34Z",
  "mergedAt": "2023-05-18T10:01:33Z",
  "additions": 193,
  "deletions": 167,
  "changedFiles": 2,
  "headRefName": "fix-metadata-reader",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "425c35b041e260a3d1fd2708329cd9679553b376",
          "message": "Add unit test ManagedRuntimeVersionReaderSupportsWindowsRuntime",
          "committedDate": "2023-05-12T09:01:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f6b1988471f4267c3f261213c56f0b68829a661",
          "message": "Remove incorrect checks from GetRuntimeVersion",
          "committedDate": "2023-05-12T09:01:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b96e9434d19f9b2a4e55e9681f022784e21da5e",
          "message": "Dispose of the FileStream",
          "committedDate": "2023-05-15T10:43:41Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50284985416fdfa05f667bd77027192733430400",
          "message": "Make worker method take BinaryReader",
          "committedDate": "2023-05-17T09:35:59Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Interesting choice that calee is disposing the resource instead of the owner (caller).\r\nBut since it's internal and single usage method - it probably  doesn't matter",
              "createdAt": "2023-05-15T08:13:23Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "You're bringing up a great point. Does disposing of the `BinaryReader` close the file on this code path? I have kept the calls exactly like before but I wonder if this is correct.",
              "createdAt": "2023-05-15T09:36:06Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Aha, that's one of the weirder BCL design choices. `BinaryReader` closes the underlying stream by default.\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.io.binaryreader.-ctor?view=net-7.0#system-io-binaryreader-ctor(system-io-stream-system-text-encoding-system-boolean)\r\n\r\nThough not needed, I'll add a `Dispose` call to the caller for clarity. Thank you!",
              "createdAt": "2023-05-15T10:39:05Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yeah - decoration and disposing is always bit tricky.\r\nIIRC the decorating streams can usualy be instructed to not dispose the underlying streams.\r\n\r\nThe other option is not to disect the boundary between the caller-calee over the decorating chain, but rather let just one of those handle all streams. Again - overkill adjustments for this one-off scenario",
              "createdAt": "2023-05-15T12:51:44Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Is there any reason you have to split the File.OpenRead call from the new BinaryReader constructor? I'm concerned about what happens if a future developer comes by, doesn't know that, and adds something that relies on the Stream being disposed of in GetRuntimeVersion(string)",
              "createdAt": "2023-05-16T16:16:54Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thank you - the split was done for testability but the inner method may as well take `BinaryReader` so everything lifetime related stays in one place. Would that address your concern?",
              "createdAt": "2023-05-16T19:31:17Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done!",
              "createdAt": "2023-05-17T09:37:41Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyInformation.cs",
              "diffHunk": "@@ -866,19 +866,30 @@ private class HeaderInfo\n         }\n \n         /// <summary>\n-        /// Given a path get the CLR runtime version of the file\n+        /// Given a path get the CLR runtime version of the file.\n         /// </summary>\n         /// <param name=\"path\">path to the file</param>\n         /// <returns>The CLR runtime version or empty if the path does not exist or the file is not an assembly.</returns>\n         public static string GetRuntimeVersion(string path)\n         {\n-            using (var sr = new BinaryReader(File.OpenRead(path)))\n+            if (!FileSystems.Default.FileExists(path))\n             {\n-                if (!FileSystems.Default.FileExists(path))\n-                {\n-                    return string.Empty;\n-                }\n+                return string.Empty;\n+            }\n \n+            Stream stream = File.OpenRead(path);\n+            return GetRuntimeVersion(stream);\n+        }\n+\n+        /// <summary>\n+        /// Given a stream get the CLR runtime version of the underlying file.\n+        /// </summary>\n+        /// <param name=\"stream\">A stream representing the file</param>\n+        /// <returns>The CLR runtime version or empty if the stream does not represent an assembly.</returns>\n+        internal static string GetRuntimeVersion(Stream stream)\n+        {\n+            using (var sr = new BinaryReader(stream))",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}