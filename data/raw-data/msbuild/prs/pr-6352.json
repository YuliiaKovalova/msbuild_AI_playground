{
  "number": 6352,
  "title": "Merge main to 17.0",
  "body": "Since 17.0 is flowing to its internal home now, let's keep it up to date.",
  "state": "MERGED",
  "createdAt": "2021-04-16T19:57:57Z",
  "updatedAt": "2021-04-16T21:46:54Z",
  "closedAt": "2021-04-16T21:46:51Z",
  "mergedAt": "2021-04-16T21:46:51Z",
  "additions": 3247,
  "deletions": 408,
  "changedFiles": 112,
  "headRefName": "main-to-17.0",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "57a23d249aafe6409b3e24836a486f769cb74c2c",
          "message": "[vs16.9] NuGet Feed Update (#6136)\n\nCo-authored-by: Matt Mitchell <mmitche@microsoft.com>\r\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2021-02-12T22:11:46Z",
          "author": {
            "name": "dotnet bot",
            "email": "dotnet-bot@dotnetfoundation.org"
          }
        }
      },
      {
        "commit": {
          "oid": "0db197e208dcd16a6e6d4708688ab236ecf363d7",
          "message": "Handle unsupported paths in ProjectInSolution.AbsolutePath (#6238)",
          "committedDate": "2021-03-16T20:14:48Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5e4b48a27efce55a613664b58d353ab4c8d1f6c1",
          "message": "Merge pull request #6273 from jeffkl/jeffkl/16.9-cherry-pick\n\nHandle unsupported paths in ProjectInSolution.AbsolutePath (#6238)",
          "committedDate": "2021-03-17T21:39:19Z",
          "author": {
            "name": "Marc Paine",
            "email": "marcpop@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84ad007579ffd21d0335bf90254614428695462e",
          "message": "Log properties and items on ProjectEvaluationFinished (#6287)\n\nAdd an option to log global properties, properties and items on ProjectEvaluationFinishedEventArgs instead of ProjectStartedEventArgs. This option is currently only turned on by the BinaryLogger.\r\n\r\nThis has several advantages. Currently only the projects that are built by the central node log their properties and items (properties are translated across nodes only if a special flag is set, and items are never translated). This resulted in properties and items not being available for projects built on other nodes. Now we log them after every evaluation and translate across nodes if needed. Together with the fact that we now log EvaluationId for each ProjectStarted, we can now recover properties and items for all project started events. This is the main purpose of this PR - to not lose properties and items like we currently do. We will still not log for project results that are satisfied by cache, because we don't keep track of evaluation for these. Presumably it will have already been logged previously.\r\n\r\nIn addition, if more than one project are built from the same evaluation, we do not duplicate properties and items, only logging them once. This results in logging more information, but storing it more efficiently. Together with string and dictionary deduplication we see very significant savings in binlog size and some reduction in build time.\r\n\r\nThis change has several large parts:\r\n\r\n 1. add a way to enumerate evaluation properties and items directly at the end of Evaluate() for PropertyDictionary<ProjectPropertyInstance> and ItemDictionary<ProjectItemInstance>\r\n 2. manual translation logic for ProjectEvaluationStarted and ProjectEvaluationFinished (instead of relying on TranslateDotNet/BinaryFormatter)\r\n 3. reading and writing ProjectEvaluationFinished GlobalProperties, Properties and Items in BuildEventArgsReader/Writer (used by BinaryLogger)\r\n 4. adding IEventSource4 with IncludeEvaluationPropertiesAndItems, to propagate this setting across nodes and threading it through the LoggingService\r\n 5. update the ParallelConsoleLogger and SerialConsoleLogger to print the new data, if present\r\n 6. tests\r\n\r\nOne controversial design decision here is storing a reference to live evaluation data in ProjectEvaluationFinishedEventArgs. It does not make a snapshot of the data to avoid very significant allocations. It does take the lock on the PropertyDictionary<T>/ItemDictionary<T> when enumerating, because logging is asynchronous and the logging consumer (BinaryLogger) will enumerate the data potentially after the build has already started and the data is being mutated. I did see exceptions when enumerating without the lock. We had the same problem when the data was logged on ProjectStartedEventArgs though. In addition, there's a slight risk of logging not the exact data as it was at the end of evaluation, but the mutated data after some target has modified it. However given that the previous behavior was to not log anything for out-of-proc projects, and given the very significant allocation reduction, I think it's worth it.\r\n\r\nTo mitigate, we could capture a snapshot at the end of evaluation, so we don't hold a reference to live data. This won't need a lock to enumerate. Ideally we also rely on the immutable collections to avoid allocations, but I didn't see an easy way to do that currently. We can investigate this in a future change.\r\n\r\nFor items, it doesn't concatenate items of different types into a single large item stream, but keeps multiple lists, one per item type, to reflect the internal representation. Not flattening item types results in savings because we don't have to mention the item type for each item.\r\n\r\nThis change increments the BinaryLogger file format to 12, to serialize GlobalProperties, Properties and Items on ProjectEvaluationFinishedEventArgs. It also stores items more efficiently, without having to know the number of item types in advance and enumerate in a single pass. It writes the item type and all items of that type, and it writes 0 to signal there are no more item types. It also no longer writes the Message for args as it can be recovered upon reading.\r\n\r\nNew EnumerateProperties() and EnumerateItems() methods are added to Utilities, to consolidate the logic to enumerate the new data structures in a single location, used by packet translation logic, binary logger and the console loggers.\r\n\r\nPerf wise, I'm seeing no significant change on binlog size for small builds (it's a wash, because we log properties/items for all projects now, but they are no longer duplicated). For large projects I expect very significant savings though, as ProjectStarted is the most heavy-weight event in large binlogs.\r\nBuild performance with /bl on small-ish builds is improved 27 s -> 24 s for single-core and 18 s -> 17 s for parallel. No observable change without /bl.\r\n\r\nFixes #5316\r\nFixes #3616",
          "committedDate": "2021-04-02T16:52:18Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "KirillOsenkov@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1cfebe4dd3b1bb26bbf76128ff5f9270b6c090bb",
          "message": "Change relative path calculation (#6311)\n\nChange relative path calculation",
          "committedDate": "2021-04-02T22:15:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f8f9cf06eec01674afb999002c8d37c6d01bbf0",
          "message": "Update dependencies from https://github.com/nuget/nuget.client build 5.9.1.8 (#6327)\n\nNuGet.Build.Tasks\r\n From Version 5.9.0-rc.7122 -> To Version 5.9.1-rc.8\r\n\r\nCo-authored-by: dotnet-maestro[bot] <dotnet-maestro[bot]@users.noreply.github.com>",
          "committedDate": "2021-04-05T19:34:34Z",
          "author": {
            "name": "dotnet-maestro[bot]",
            "email": "42748379+dotnet-maestro[bot]@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b7476cc82b94767d6602be724382608298749032",
          "message": "Improve doc comments (#6284)\n\nImprove doc comments",
          "committedDate": "2021-04-05T19:35:17Z",
          "author": {
            "name": "Genevieve Warren",
            "email": "24882762+gewarren@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7804350cd4fe271bee48b3dc99e9f4681ee686c5",
          "message": "Allow Custom CopyToOutputDirectory Location With TargetPath (#6237)\n\nFixes #2795\r\nand indirectly fixes https://developercommunity.visualstudio.com/t/copytooutputdirectorypreservenewest-ignored-inside/1332219?from=email&viewtype=all#T-ND1363347\r\n\r\nContext\r\nThere's currently no way to include items in a project such that:\r\n\r\nVisual studio sees them in a specific folder (via <Link>).\r\nThey are published to a user-defined path (currently controlled via <Link>)\r\nChanges Made\r\nModify the AssignTargetPath task to return early if TargetPath metadata is already set on a particular item.\r\n\r\nTesting\r\n Need to add one test covering this.\r\n Tested locally with bootstrapped MSBuild on command line\r\n Tested locally with a boostrapped msbuild on internal VS\r\nHere's the repro I'm using:\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"Files\\**\">\r\n      <Link>Files\\%(Filename)%(Extension)</Link>\r\n      <TargetPath>%(Filename)%(Extension)</TargetPath>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\nNotes\r\nThe other way of solving this problem has to do with Microsoft.Common.CurrentVersion.targets. We modify it so that the AssignTargetPath task look something like this:\r\n\r\n    <AssignTargetPath Files=\"@(Content)\" RootFolder=\"$(MSBuildProjectDirectory)\" Condition=\"'%(Content.TargetPath)'==''\">\r\n      <Output TaskParameter=\"AssignedFiles\" ItemName=\"ContentWithTargetPath\" />\r\n    </AssignTargetPath>\r\n    <ItemGroup>\r\n        <ContentWithTargetPath Include=\"@(Content)\" Condition=\"'%(Content.TargetPath)'!=''\"/>\r\n    </ItemGroup>\r\nThis seems less efficient to me. AssignTargetPath is also called for all None, Content, and EmbeddedResource files. So if we go this batching route and want None or EmbeddedResource to have this feature, we'd need to batch those as well.",
          "committedDate": "2021-04-05T19:37:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c4cda20d0720ba3d467df7ef487b63f79eb848a0",
          "message": "Allow parameter type name to be specified for WriteCodeFragment task (#6285)\n\nFixes #2281\r\n\r\nContext\r\nThis change allows the WriteCodeFragment task to define assembly attributes that require parameters that are not of type System.String. For example, CSLCompliantAttribute can be generated with a parameter of true instead of \"true\".\r\n\r\nChanges Made\r\nAdditional metadata can be defined on an AssemblyAttribute that specifies how to treat the parameters specified in the metadata. There are three different ways that the parameters can be treated.\r\n\r\nInfer the Type\r\nWithout specifying any additional metadata, attributes that are defined in the mscorlib assembly (i.e. types that can be loaded via System.Type.GetType(string)) will have their parameter types inferred by finding the constructor where the parameter count matches the number of parameters specified in the metadata. For example, this:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"CLSCompliantAttribute\">\r\n    <_Parameter1>true</_Parameter1>\r\n  </AssemblyAttribute>\r\n</ItemGroup>\r\nWill produce the code:\r\n\r\n[assembly: CLSCompliantAttribute(true)]\r\nFor backward-compatibility, if the attribute cannot be found, or no matching constructor is found, the parameter is treated as a string.\r\n\r\nDeclare the Type\r\nAn additional metadata item can be used to specify the full name of the parameter type. To do this, add a metadata item that has the same name as the parameter with \"_TypeName\" appended to the end. For example, this:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"TestAttribute\">\r\n    <_Parameter1>True</_Parameter1>\r\n    <_Parameter1_TypeName>System.Boolean</_Parameter1_TypeName>\r\n  </AssemblyAttribute>\r\n</ItemGroup>\r\nWill produce the code:\r\n\r\n[assembly: TestAttribute(true)]\r\nThis also works with named parameters:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"TestAttribute\">\r\n    <Foo>42</IdentifyLevel>\r\n    <Foo_TypeName>System.Int32</Foo_TypeName>\r\n  </AssemblyAttribute>\r\n</ItemGroup>\r\n[assembly: TestAttribute(42)]\r\nAll types that can be used as attribute parameters are supported, except for arrays.\r\n\r\nFor backward-compatibility, if a metadata item ends with \"_TypeName\", but there is no metadata item for the parameter with that name, then it will be treated as another named property. For example, this:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"TestAttribute\">\r\n    <Foo_TypeName>System.Int32</Foo_TypeName>\r\n  </AssemblyAttribute>\r\n</ItemGroup>\r\nWould produce the code:\r\n\r\n[assembly: TestAttribute(Foo_TypeName=\"System.Int32\")]\r\nSpecify the Exact Code\r\nFor cases where declaring the type is insufficient (such as when the parameter is an array), you can specify the exact that that will be generated for the parameter by adding metadata that has the same name as the parameter with \"_IsLiteral\" appended to the end. For example, this:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"TestAttribute\">\r\n    <_Parameter1>new int[] { 1, 3, 5 } /* odd numbers */</_Parameter1>\r\n    <_Parameter1_IsLiteral>true</_Parameter1_IsLiteral>\r\n  </AssemblyAttribute>\r\n</ItemGroup>\r\nWill produce the code:\r\n\r\n[assembly: TestAttribute(new int[] { 1, 3, 5 } /* odd numbers */)]\r\nThe limitation with this is that the code you provide is language-specific. For example, the literal value in the metadata above will only work in C#. If you used that same metadata in a VB.NET project, you would receive a compiler error.\r\n\r\nThis works with both positional and named parameters. As with the ..._TypeName metadata, if an ..._IsLiteral metadata does not have a corresponding parameter name, it will be treated as a named parameter for backward-compatibility.\r\n\r\nMixed Parameter Behavior\r\nBecause the additional metadata only applies to a specific parameter, you can choose to treat different parameters in different ways. For example, you can infer/use the default behavior for one parameter, specify the type for the second parameter and use a literal value for the third. For example:\r\n\r\n<ItemGroup>\r\n  <AssemblyAttribute Include=\"TestAttribute\">\r\n    <_Parameter1>This is a string</_Parameter1>\r\n    <_Parameter2>42></Parameter2>\r\n    <_Parameter2_TypeName>System.Int32</_Parameter2_TypeName>\r\n    <_Parameter3>new int[] { 1 }</_Parameter3>\r\n    <_Parameter3_IsLiteral>true</_Parameter3_IsLiteral>\r\n  </AssemblyAttribute>\r\n</ItemGroup>",
          "committedDate": "2021-04-08T16:08:47Z",
          "author": {
            "name": "reduckted",
            "email": "reduckted@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29dc5e1da5e0e7b70e49c1b53f3e1e4f5acbec6c",
          "message": "Fail Restore when an SDK is unresolved or entry target does not exist (#6312)\n\nFixes #6281\r\n\r\nContext\r\nBuildRequestDataFlags and ProjectLoadSettings are set during /t:restore in a best effort to run the Restore target in hopes that it will correct the potentially bad state that a project is in. Visual Studio also sets ProjectLoadSettings.IgnoreMissingImports so that an unresolved MSBuild project SDK doesn't prevent loading of a bad project so it can give the user an error and let them edit the file.\r\n\r\nHowever, this means that from the command-line an unresolved SDK doesn't fail /t:restore. This is because the missing \"import\" is ignored and non-existent targets are ignored so the build succeeds.\r\n\r\nChanges Made\r\nIntroduced two new BuildRequestDataFlags:\r\n\r\nSkipNonexistentNonTopLevelTargets - A new flag to be used in this context to tell the build to ignore non-existent targets but not top level ones. In this case we're specifying /t:restore so if the Restore target doesn't exist, that should be an error. Only other targets that are trying to run are ignored (like InitialTargets, Before/AfterTargets, etc).\r\nFailOnUnresolvedSdk - We still need to ignore missing imports and I can't introduce a new flag to split the implementation now since Visual Studio sets ProjectLoadSettings.IgnoreMissingImports as a way to ignore unresolved SDKs. So this flag tells the evaluator to fail on an unresolved SDK but to continue ignoring other missing imports.",
          "committedDate": "2021-04-08T16:09:41Z",
          "author": {
            "name": "Jeff Kluge",
            "email": "jeffkl@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bab9b71946b9fc4f5915271d16698dc091890092",
          "message": "Allow users that have certain special characters in their username to build successfully when using exec (#6223)\n\nFixes https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1264667\r\n\r\nContext\r\nUsers with profile names that contain parens in them will never be able to succesfully build a program that calls Exec with any command. This is because exec does the following:\r\n\r\nGenerate a cmd file in the users temp directory\r\nCalls cmd /Q /D /C <path-to-temp-file>\r\nThe problem with this is that running cmd /C \"some command\" does not work if the command has any parens in it. It needs to be escaped like so: ^( and ^).\r\n\r\nChanges Made\r\nWhen user sets EscapeSpecialCharacters in the exec task (boolean parameter), we escape characters that need to be escaped when calling cmd /c. We preserve the original functionality of always removing spaces and escaping '^'\r\nAdded under changewave 16.10\r\nAdded documentation for it.",
          "committedDate": "2021-04-08T16:10:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9bcc06cbe19ae2482ab18eab90a82fd079b26897",
          "message": "Fix Git URL in readme. (#6331)\n\nAlso add a line about how to build Release.",
          "committedDate": "2021-04-08T18:22:41Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "KirillOsenkov@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8d57dfcbcbaf083dbc9a84e4b85a9e05c506fefd",
          "message": "Bring back ProjectStarted.GlobalProperties (#6342)\n\nSome loggers depended on ProjectStartedEventArgs.GlobalProperties being not null and set. It will take a long time to move them to ProjectEvaluationFinished (needs to bump MSBuild dependency to 16.10).\r\n\r\nFor now log GlobalProperties in both places (ProjectStarted and ProjectEvaluationFinished). Hopefully the deduplication will save us from any significant increase in binlog size.\r\n\r\nFixes #6341",
          "committedDate": "2021-04-13T17:54:31Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "KirillOsenkov@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "47be9829672e2c207626419971aa1cba8f445409",
          "message": "Fix some URLs from Microsoft/msbuild -> dotnet/msbuild (#6335)\n\nFix some URLs from Microsoft/msbuild -> dotnet/msbuild\r\n\r\nAlso changes some branches from master to main.",
          "committedDate": "2021-04-13T17:55:11Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "KirillOsenkov@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "077ef330851c0b5a4f6396eb4adf323e9944d630",
          "message": "Merge branch 'vs16.9'",
          "committedDate": "2021-04-14T21:05:47Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "478f12f9c890d71ad5dcda057b4cb3f21bf579ef",
          "message": "Permit comments and trailing commas in solution filter files (#6346)",
          "committedDate": "2021-04-15T18:07:26Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "369631b4b21ef485f4d6f35e16b0c839a971b0e9",
          "message": "Opt Into Perf Logging (#6274)",
          "committedDate": "2021-04-15T18:10:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": []
  }
}