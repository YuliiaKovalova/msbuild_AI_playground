{
  "number": 8178,
  "title": "Create FancyLogger opt-in/out mechanism",
  "body": "Fixes #\r\n\r\n### Context\r\nFor the average user, the current ConsoleLogger does not provide the required amount of information about the build, as it either shows too little information (with low verbosity levels) or too much information that it is very difficult to find (with high verbosity levels). \r\nA better approach would be having the log update to show the necessary amount of information for the current performing action (be it a project, target or task) and hiding additional data for actions that completed successfully; thus reducing the amount of irrelevant info. \r\nLikewise the addition of formatting (bold, italics, color) using ANSI escape codes provides the user with a much better experience. \r\nA progress tracker for the build is also considered. \r\n\r\n> This PR focuses only on the opt-in/out mechanism for the feature.\r\n\r\n### Changes Made\r\n- Created a new `FancyLogger` class.\r\n- Created a `ANSIBuilder` static class with helper methods for ANSI formatting and graphics\r\n- Added the `/fancylogger` and `/flg` command line switches for enabling the FancyLogger\r\n- Added the `$MSBUILDFANCYLOGGER` environment variable for enabling the FancyLogger\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-11-17T20:07:55Z",
  "updatedAt": "2022-12-20T09:02:58Z",
  "closedAt": "2022-12-20T09:02:58Z",
  "mergedAt": "2022-12-20T09:02:58Z",
  "additions": 1031,
  "deletions": 4,
  "changedFiles": 8,
  "headRefName": "edvilme-fancy-logger",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "58dfa23fbcc2f92796aaf122e14c31f0bbd7cccd",
          "message": "Added FancyLogger\n\nAdded FancyLogger (in development). Used with the /fancylogger commandline switch",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f188e4a1ee8d1c3e2685d942c79b483de45de783",
          "message": "Clean up code comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f9d38d899354c5f52a8f49ebdd48778f5ee3f448",
          "message": "Clean up code comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9fd2b6331bd0e037f94b44c13668556642ba095a",
          "message": "Does not use FancyLogger if being redirected to a file",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11100e8ee776ee9bad4a1d34fa9f704f39bac0fb",
          "message": "Added ANSIBuilder for formatting and console updating",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1ffa074b51931f680b6d26091f31738102f0a10",
          "message": "Added target started to logs",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72c17bcaf31125f25691a7b07f244bf352e2213d",
          "message": "Fixed bugs and added better comments",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc46e3f549649ccf107b768984797f28bfe46cf6",
          "message": "Added design documentation for FancyLogger",
          "committedDate": "2022-11-18T21:57:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42e289e077ffe370c7ff026f4e61bb8c060e3dfe",
          "message": "Adding deferred build message",
          "committedDate": "2022-11-18T22:51:56Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7ae8cc483398899b68be71173534109be3afb78",
          "message": "Added loading indicator",
          "committedDate": "2022-11-19T01:18:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "642a92d428e1ab82ba001847de0bcdea177caa41",
          "message": "Renamed ANSIBuilder.Grapics.Loading to ANSIBuilder.Graphics.Spinner\n\nRenamed to a more descriptive name and replaced undisplayable characters with \\|/-",
          "committedDate": "2022-11-22T01:02:30Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "73587b10a61c1a02600e1830f24e4f9f7930fcd0",
          "message": "Working on ANSI",
          "committedDate": "2022-11-22T18:09:29Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87516e5f976a3dae896adad6005527c32befa3cb",
          "message": "Add wildcard for FancyLogger on Microsoft.Build.csproj\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-23T00:49:17Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83f2dacdfeae0ccd8e4c6d907dacce0e88c0e07d",
          "message": "Added fancylogger with alternate screenbuffer",
          "committedDate": "2022-11-30T22:35:55Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "253d275cf658b87066703dc9de51017bb7390a66",
          "message": "Added fancylogger with alternate screenbuffer",
          "committedDate": "2022-11-30T22:36:25Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d064c35d592c2f4291d327afad09cd83e4288bf6",
          "message": "Solve Windows Terminal related bugs",
          "committedDate": "2022-11-30T22:46:59Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a0415027fb479f5a59bc323dcfca61939cbcdb9f",
          "message": "Added faux-scrolling for alternate buffer\n\nDefault scrolling is disabled for the alternate buffer. Instead, it responds to up/down arrow keys for scrolling and rendering automatically",
          "committedDate": "2022-12-01T00:49:00Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a0d4da32f48466800adb630b49520161f663778",
          "message": "Merged changes for csproj file",
          "committedDate": "2022-12-01T00:58:12Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7eb2086694b9113640d9a5a6a5b350a5fa1470df",
          "message": "Very basic demo for testing\n\nTargets are shown and marked as complete with checkmark and green color when finished",
          "committedDate": "2022-12-01T01:54:29Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2f67d17f961e9816d4470993854116bba6395aef",
          "message": "Added scroll lock and hierarchy for projects, targets and tasks\n\nReady for demo",
          "committedDate": "2022-12-01T20:21:39Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "536c9f0954546c3385901bc7c0729abc45790972",
          "message": "Add basic percentage counter\n\nCalculated as completedTasks / existingTasks",
          "committedDate": "2022-12-01T22:49:00Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52d2cb21023425e44c6dc1a2da05f680e1f17de8",
          "message": "Removed delay",
          "committedDate": "2022-12-02T20:10:54Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1dba6ce889e7236000ac0a08bc7f4fcac0085e9",
          "message": "Added justification options for Left, Right and Center",
          "committedDate": "2022-12-02T23:51:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "54861b5204f6b31649fe979d6c4d7e2c1d30d9fd",
          "message": "Renamed justification to alignment",
          "committedDate": "2022-12-02T23:58:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b27114deca3c5d87b8559496ff44f2140d7beecc",
          "message": "Added data structure for nodes in build",
          "committedDate": "2022-12-05T21:42:28Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f721900da524abca23a1c63e98ce18de47323c9",
          "message": "Created FancyLoggerNode\n\nCreated class to encapsulate information and hierarchy of build events with their corresponding buffer line ids, and methods for expanding / collapsing (wip)",
          "committedDate": "2022-12-06T00:24:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1dac4047557beeecbd8b91e0f6f2dd52c7160b5",
          "message": "Created tree structure for builds",
          "committedDate": "2022-12-06T01:58:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "666cc376afbad835d98bea1c9ddd1ec7170cc559",
          "message": "Added node for tree writing to FnacyLoggerBuffer",
          "committedDate": "2022-12-07T00:44:26Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62da1ea1d1a8fc952ded78bc43c68115186829b6",
          "message": "a",
          "committedDate": "2022-12-07T20:44:28Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f800754001c0609a0bbcb9800ba164b7d3b0d9da",
          "message": "Fixed bug",
          "committedDate": "2022-12-13T22:39:14Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40aabf5c30175cc4b862e4f7fbb0c886e5fbc9c5",
          "message": "Refactored opt-in mechanism, and simplified logger for this pr",
          "committedDate": "2022-12-16T02:42:21Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2313ef290f43e1736df7c9ac624e51d24195de52",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into edvilme-fancy-logger",
          "committedDate": "2022-12-16T02:58:31Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e60e78c0812da88aa3ed999b4bc6256eb6d1bdfb",
          "message": "Added deferredbuildmessages for when FancyLogger is not supported",
          "committedDate": "2022-12-16T19:56:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ee97b82a367a263f33674754dd41f87f89c14a5",
          "message": "Added copyright header",
          "committedDate": "2022-12-16T19:58:06Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "310b19367c376309377eca0b1dceee5bd4b99116",
          "message": "Changed deferredbuildmessages for when FancyLogger is not supported to Low Importance",
          "committedDate": "2022-12-16T20:11:08Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d2957f65ab9bc6f312583cefb404531bf027d8f",
          "message": "Fixed typo",
          "committedDate": "2022-12-16T20:14:41Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ecf0f78139a86f792dde0c693f2d4fdf220d780",
          "message": "Solved a bug that caused deferredbuildmessages to not be added correctly. Reviewed comments",
          "committedDate": "2022-12-17T20:27:34Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab9674b2c1c96ff4f7a7efe0476c54ba89340ee8",
          "message": "Remove unused files",
          "committedDate": "2022-12-19T22:01:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "305c6cd4b77986e34b6e9b30d1b26425664ccbe2",
          "message": "Fix code styling",
          "committedDate": "2022-12-19T23:07:24Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "35e4500431dd750d472d9e1ed5944b78289e2c20",
          "message": "Fix code styling",
          "committedDate": "2022-12-19T23:12:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99e547997439ca9183a282aa53f7dc183f205328",
          "message": "Add q key to exit",
          "committedDate": "2022-12-19T23:20:54Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ef7cfc6ae2339db43c2021a7be379be053d56d7",
          "message": "Add q key to exit. Code styling",
          "committedDate": "2022-12-19T23:31:36Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I really, really want the deferred messages for details on why the new logger is not used despite the opt-in but would be ok with a follow-up PR adding that.\r\n\r\nIt is added now :D\r\n",
        "createdAt": "2022-12-17T20:40:21Z",
        "author": {
          "login": "edvilme"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We should probably log a deferred build message that we're ignoring the FancyLogger opt-in because {condition}.",
              "createdAt": "2022-11-18T22:04:51Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agreed, what about something like:\r\n`Attached FancyLogger because the /fancylogger switch was used`\r\nor\r\n`Attached FancyLogger because the environment variable $MSBUILDFANCYLOGGER was used`\r\n?",
              "createdAt": "2022-11-18T22:09:24Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "And also \r\n`Attached ConsoleLogger because output is not compatible (ie, it does not support ANSI sequences or is a file)`",
              "createdAt": "2022-11-18T22:10:27Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "I am thinking mostly about the negative cases here, where we were told to turn FancyLogger on but didn't. The log should already have all the command line params and all environment variables starting with MSBUILD so I don't know if we need to log in that case.",
              "createdAt": "2022-11-18T22:12:04Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh okayy I see. I will add the latter then. Does the wording sound good?",
              "createdAt": "2022-11-18T22:14:08Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "I will first resolve all comments with https://github.com/dotnet/msbuild/pull/8146 (got caught up on the FancyLogger) as it allows to add deferred build messages at several stages which will be useful for this.",
              "createdAt": "2022-11-18T22:47:44Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. \n+\n+In cases where the FancyLogger should not be enabled, the default ConsoleLogger should be used instead.",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@baronfel -- naming thoughts?",
              "createdAt": "2022-11-18T22:04:52Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We agreed to go with this, at least for now.",
              "createdAt": "2022-12-15T02:05:27Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "copyright",
              "createdAt": "2022-11-21T16:09:05Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,221 @@\n+\ufeffusing System;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Our project files are an interesting mess because of a combination of legacy and our need to include different files in different TargetFrameworks. However, for a new folder, we can use the easy approach and glob in the whole folder:\r\n\r\n```suggestion\r\n    <Compile Include=\"Logging\\FancyLogger\\*.cs\" />\r\n```",
              "createdAt": "2022-11-22T16:34:11Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -159,6 +159,8 @@\n     <Compile Include=\"BackEnd\\Components\\SdkResolution\\SdkResolverException.cs\" />\n     <Compile Include=\"BackEnd\\Components\\SdkResolution\\TranslationHelpers.cs\" />\n     <Compile Include=\"FileSystem\\*.cs\" />\n+    <Compile Include=\"Logging\\FancyLogger\\ANSIBuilder.cs\" />\n+    <Compile Include=\"Logging\\FancyLogger\\FancyLogger.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ping :)",
              "createdAt": "2022-12-15T02:07:15Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -159,6 +159,8 @@\n     <Compile Include=\"BackEnd\\Components\\SdkResolution\\SdkResolverException.cs\" />\n     <Compile Include=\"BackEnd\\Components\\SdkResolution\\TranslationHelpers.cs\" />\n     <Compile Include=\"FileSystem\\*.cs\" />\n+    <Compile Include=\"Logging\\FancyLogger\\ANSIBuilder.cs\" />\n+    <Compile Include=\"Logging\\FancyLogger\\FancyLogger.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "IMO you should have separate log messages for each of these, with basically the content of the comments you have here. That way, if a user expected the fancy logger, they can see exactly why we chose not to use it.",
              "createdAt": "2022-11-22T16:36:49Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3218,14 +3221,31 @@ private static ILogger[] ProcessLoggingSwitches\n             // Add any loggers which have been specified on the commandline\n             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);\n \n-            ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\n+            // Choose default console logger\n+            bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file\n+                Environment.GetEnvironmentVariable(\"TERM\") != \"dumb\"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Style guideline: create a new file for each class. We're not 100% consistent on this but it's generally easier to keep things that way. There should be a Visual Studio refactoring to do this for you (and name the file correctly!).",
              "createdAt": "2022-11-22T16:38:10Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,220 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Security;\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line within the log\n+    /// </summary>\n+    public class LogLine",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh yes, I am probably going to delete those sometime soon as I was experimenting. But I will make sure to add the replacements in separate files.",
              "createdAt": "2022-11-23T00:53:51Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,220 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.IO;\n+using System.Linq;\n+using System.Security;\n+\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+using Microsoft.Build.Logging;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line within the log\n+    /// </summary>\n+    public class LogLine",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd like to see this a bit more explicit, maybe something like\r\n\r\n```suggestion\r\n            bool fancyLoggerCommandLineOptIn, \r\n```",
              "createdAt": "2022-12-15T02:19:53Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3189,6 +3192,7 @@ private static ILogger[] ProcessLoggingSwitches\n             string[] verbositySwitchParameters,\n             bool noConsoleLogger,\n             bool distributedFileLogger,\n+            bool shouldUseFancyLogger, ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd probably simplify this\r\n\r\n```suggestion\r\n        private static void ProcessFancyLogger(\r\n            bool noConsoleLogger,\r\n            List<ILogger> loggers\r\n        )\r\n        {\r\n            FancyLogger l = new FancyLogger();\r\n            loggers.Add(l);\r\n        }\r\n```\r\n\r\n. . . though if it's that simple maybe it could just be inlined.",
              "createdAt": "2022-12-15T02:34:57Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3388,6 +3410,19 @@ List<ILogger> loggers\n             }\n         }\n \n+        private static void ProcessFancyLogger(\n+            bool noConsoleLogger,\n+            List<ILogger> loggers\n+        )\n+        {\n+            // Check for flags and env variables\n+            if (true && !noConsoleLogger)\n+            {\n+                FancyLogger l = new FancyLogger();\n+                loggers.Add(l);\n+            }\n+        }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this could be refactored to be a bit clearer and also do less stuff in the default not-opted-in case:\r\n\r\n```suggestion\r\n            // Choose default console logger\r\n            if ((fancyLoggerCommandLineOptIn || environmentVariableOptIn) &&\r\n                EnvironmentSupportsFancyLogger()) // may need to pass in the deferred messages list?\r\n            {\r\n                EnableFancyLogger(noConsoleLogger, loggers);\r\n            }\r\n            else\r\n            {\r\n                ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\r\n            }\r\n```",
              "createdAt": "2022-12-15T02:46:09Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3218,14 +3222,32 @@ private static ILogger[] ProcessLoggingSwitches\n             // Add any loggers which have been specified on the commandline\n             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);\n \n-            ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\n+            // Choose default console logger\n+            bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file\n+                ( RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable(\"WT_SESSION\") != \"\" ) && // Avoid when NOT using Windows Terminal\n+                Environment.GetEnvironmentVariable(\"TERM\") != \"dumb\"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities\n+            if (shouldUseFancyLogger && !outputSupportsFancyLogger)\n+            {\n+                // Add to deferredbuildmessages\n+            }\n+            else if (shouldUseFancyLogger && outputSupportsFancyLogger)\n+            {\n+                ProcessFancyLogger(noConsoleLogger, loggers);\n+            }\n+            else\n+            {\n+                ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Inside `EnvironmentSupportsFancyLogger()` I'd like to see separate explicit log messages for the different reasons that it doesn't (output is redirected, terminal was detected via environment variable ___, whatever).",
              "createdAt": "2022-12-15T02:54:21Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3218,14 +3222,32 @@ private static ILogger[] ProcessLoggingSwitches\n             // Add any loggers which have been specified on the commandline\n             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);\n \n-            ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\n+            // Choose default console logger\n+            bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file\n+                ( RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable(\"WT_SESSION\") != \"\" ) && // Avoid when NOT using Windows Terminal\n+                Environment.GetEnvironmentVariable(\"TERM\") != \"dumb\"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities\n+            if (shouldUseFancyLogger && !outputSupportsFancyLogger)\n+            {\n+                // Add to deferredbuildmessages\n+            }\n+            else if (shouldUseFancyLogger && outputSupportsFancyLogger)\n+            {\n+                ProcessFancyLogger(noConsoleLogger, loggers);\n+            }\n+            else\n+            {\n+                ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Copyright header please",
              "createdAt": "2022-12-15T02:47:37Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,197 @@\n+\ufeffusing System;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I was thinking of this not as an extra double-check, but as an additional opt-in: people who want early access can set this env var, and get the new behavior without having to opt in every MSBuild invocation. Seem reasonable?",
              "createdAt": "2022-12-15T02:58:55Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Seems right",
              "createdAt": "2022-12-16T02:44:28Z",
              "path": "documentation/fancylogger/Opt-In-Mechanism.md",
              "diffHunk": "@@ -0,0 +1,21 @@\n+# When should we use FancyLogger\n+\n+The FancyLogger presents the user with the build's most relevant information at the time, automatically hiding all the information that is no longer relevant (as to prevent huge log outputs). However, many users might find this not very useful (or even counterproductive) such as those using a terminal without proper ANSI support or when redirecting the output to a file. For that reason, the users must be able to turn this feature on/off at will.\n+\n+# Proposal\n+Using the `/fancylogger` or `/flg` command line switches, users are able to opt-in and use the FancyLogger, EXCEPT when:\n+- The terminal does not support ANSI codes or color\n+    - [ ] Detect if terminal does not support ANSI codes or color\n+ - Output is redirected to a file or pipe\n+    - [x] Detect if terminal output is redirected\n+\n+For early development stages, an environment variable `$MSBUILDFANCYLOGGER` should be enabled to prevent accidental access to an unfinished feature. ",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: string.Empty",
              "createdAt": "2022-12-19T19:35:25Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -0,0 +1,342 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    internal static class ANSIBuilder\n+    {\n+        public static string ANSIRemove(string text)\n+        {\n+            return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n+        }\n+        public static class Alignment\n+        {\n+            public static string Center(string text)\n+            {\n+                string result = String.Empty;\n+                string noFormatString = ANSIRemove(text);\n+                if (noFormatString.Length > Console.BufferWidth) return text;\n+                int space = (Console.BufferWidth - noFormatString.Length) / 2;\n+                result += new string(' ', space);\n+                result += text;\n+                result += new string(' ', space);\n+                return result;\n+            }\n+            public static string Right(string text)\n+            {\n+                string result = String.Empty;\n+                string noFormatString = ANSIRemove(text);\n+                if (noFormatString.Length > Console.BufferWidth) return text;\n+                int space = Console.BufferWidth - noFormatString.Length;\n+                result += new string(' ', space);\n+                result += text;\n+                return result;\n+            }\n+            public static string Left(string text)\n+            {\n+                string result = String.Empty;\n+                string noFormatString = ANSIRemove(text);\n+                if (noFormatString.Length > Console.BufferWidth) return text;\n+                int space = Console.BufferWidth - noFormatString.Length;\n+                result += text;\n+                result += new string(' ', space);\n+                return result;\n+            }\n+            public static string SpaceBetween(string leftText, string rightText, int width)\n+            {\n+                string result = String.Empty;\n+                string leftNoFormatString = ANSIRemove(leftText);\n+                string rightNoFormatString = ANSIRemove(rightText);\n+                if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;\n+                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length) - 1;\n+                result += leftText;\n+                result += new string(' ', space);\n+                result += rightText;\n+                return result;\n+            }\n+        }\n+        public static class Formatting\n+        {\n+            public enum ForegroundColor\n+            {\n+                Black = 30,\n+                Red = 31,\n+                Green = 32,\n+                Yellow = 33,\n+                Blue = 34,\n+                Magenta = 35,\n+                Cyan = 36,\n+                White = 37,\n+                Default = 39\n+            };\n+            public enum BackgroundColor\n+            {\n+                Black = 40,\n+                Red = 41,\n+                Green = 42,\n+                Yellow = 43,\n+                Blue = 44,\n+                Magenta = 45,\n+                Cyan = 46,\n+                White = 47,\n+                Default = 49\n+            }\n+            public static string Color(string text, ForegroundColor color)\n+            {\n+                return String.Format(\"\\x1b[{0}m{1}\\x1b[0m\", (int)color, text);\n+            }\n+            public static string Color(string text, BackgroundColor color)\n+            {\n+                return String.Format(\"\\x1b[{0}m{1}\\x1b[0m\", (int)color, text);\n+            }\n+            public static string Color(string text, BackgroundColor backgrdoundColor, ForegroundColor foregroundColor)\n+            {\n+                return String.Format(\"\\x1b[{0};{1}m{2}\\x1b[0m\", (int)backgrdoundColor, (int)foregroundColor, text);\n+            }\n+            public static string Bold(string text)\n+            {\n+                return String.Format(\"\\x1b[1m{0}\\x1b[22m\", text);\n+            }\n+            public static string Dim(string text)\n+            {\n+                return String.Format(\"\\x1b[2m{0}\\x1b[22m\", text);\n+            }\n+            public static string Italic(string text)\n+            {\n+                return String.Format(\"\\x1b[3m{0}\\x1b[23m\", text);\n+            }\n+            public static string Underlined(string text)\n+            {\n+                return String.Format(\"\\x1b[4m{0}\\x1b[24m\", text);\n+            }\n+            public static string DoubleUnderlined(string text)\n+            {\n+                return String.Format(\"\\x1b[21m{0}\\x1b[24m\", text);\n+            }\n+            public static string Blinking(string text)\n+            {\n+                return String.Format(\"\\x1b[5m{0}\\x1b[25m\", text);\n+            }\n+            public static string Inverse(string text)\n+            {\n+                return String.Format(\"\\x1b[7m{0}\\x1b[27m\", text);\n+            }\n+            public static string Invisible(string text)\n+            {\n+                return String.Format(\"\\x1b[8m{0}\\x1b[28m\", text);\n+            }\n+            public static string CrossedOut(string text)\n+            {\n+                return String.Format(\"\\x1b[9m{0}\\x1b[29m\", text);\n+            }\n+            public static string Overlined(string text)\n+            {\n+                return String.Format(\"\\x1b[53m{0}\\x1b[55m\", text);\n+            }\n+            // TODO: Review\n+            // TODO: Test outside of Windows Terminal (eg, terminal.app)\n+            public static string Hyperlink(string text, string url)\n+            {\n+                // return String.Format(\"\\x1b[]8;;{0}\\x1b\\\\{1}\\x1b[]8;\\x1b\\\\\", text, url);\n+                // return $\"\\x1b[]8;;{url}\\x1b[\\\\{text}\\x1b[]8;;\\x1b[\\\\\";\n+                return url.Replace(\"\\\\\", \"/\");\n+            }\n+            public static string DECLineDrawing(string text)\n+            {\n+                return String.Format(\"\\x1b(0{0}\\x1b(B\", text);\n+            }\n+        }\n+\n+\n+        public static class Cursor\n+        {\n+            public enum CursorStyle\n+            {\n+                Default = 0,\n+                BlockBlinking = 1,\n+                BlockSteady = 2,\n+                UnderlineBlinking = 3,\n+                UnderlineSteady = 4,\n+                BarBlinking = 5,\n+                BarSteady = 6,\n+            }\n+\n+            public static string Style(CursorStyle style)\n+            {\n+                return String.Format(\"\\x1b[{0} q\", (int)style);\n+            }\n+\n+            public static string Up(int n = 1)\n+            {\n+                return String.Format(\"\\x1b[{0}A\", n);\n+            }\n+            public static string UpAndScroll(int n)\n+            {\n+                string result = \"\";\n+                for (int i = 0; i < n; i++) {\n+                    result += \"\\x1bM\";\n+                }\n+                return result;\n+            }\n+            public static string Down(int n = 1)\n+            {\n+                return String.Format(\"\\x1b[{0}B\", n);\n+            }\n+            public static string Forward(int n = 1)\n+            {\n+                return String.Format(\"\\x1b[{0}C\", n);\n+            }\n+            public static string Backward(int n = 1)\n+            {\n+                return String.Format(\"\\x1b[{0}D\", n);\n+            }\n+            public static string Home()\n+            {\n+                return String.Format(\"\\x1b[H\");\n+            }\n+            public static string Position(int row, int column)\n+            {\n+                return String.Format(\"\\x1b[{0};{1}H\", row, column);\n+            }\n+            public static string SavePosition()\n+            {\n+                return String.Format(\"\\x1b[s\");\n+            }\n+            public static string RestorePosition() {\n+                return String.Format(\"\\x1b[u\");\n+            }\n+        }\n+\n+        public static class Tabulator\n+        {\n+            public static string SetStop()\n+            {\n+                return String.Format(\"\\x1bH\");\n+            }\n+            public static string ForwardTab(int n)\n+            {\n+                if (n == 0) return \"\";\n+                return String.Format(\"\\x1b[{0}I\", n);\n+            }\n+            public static string BackwardTab(int n)\n+            {\n+                return String.Format(\"\\x1b[{0}Z\", n);\n+            }\n+            public static string UnsetStop()\n+            {\n+                return String.Format(\"\\x1b[0g\");\n+            }\n+            public static string UnserAlStops()\n+            {\n+                return String.Format(\"\\x1b[3g\");\n+            }\n+        }\n+\n+        public static class Viewport\n+        {\n+            public static string ScrollDown(int n)\n+            {\n+                return String.Format(\"\\x1b[{0}T\", n);\n+            }\n+            public static string ScrollUp(int n)\n+            {\n+                return String.Format(\"\\x1b[{0}S\", n);\n+            }\n+            public static string SetScrollingRegion(int start, int end)\n+            {\n+                return String.Format(\"\\x1b[{0};{1}r\", start, end);\n+            }\n+            public static string PrependLines(int n)\n+            {\n+                return String.Format(\"\\x1b[{0}L\", n);\n+            }\n+            public static string DeleteLines(int n)\n+            {\n+                return String.Format(\"\\x1b[{0}M\", n);\n+            }\n+        }\n+\n+        public static class Eraser\n+        {\n+            public static string DisplayCursorToEnd()\n+            {\n+                return String.Format(\"\\x1b[0J\");\n+            }\n+            public static string DisplayStartToCursor()\n+            {\n+                return String.Format(\"\\x1b[1J\");\n+            }\n+            public static string Display()\n+            {\n+                return String.Format(\"\\x1b[2J\");\n+            }\n+            public static string LineCursorToEnd()\n+            {\n+                return String.Format(\"\\x1b[0K\");\n+            }\n+            public static string LineStartToCursor()\n+            {\n+                return String.Format(\"\\x1b[1K\");\n+            }\n+            public static string Line()\n+            {\n+                return String.Format(\"\\x1b[2k\");\n+            }\n+        }\n+\n+        public static class Graphics\n+        {\n+            private static int spinnerCounter = 0;\n+            public static string Spinner()\n+            {\n+                return Spinner(spinnerCounter++);\n+            }\n+            public static string Spinner(int n)\n+            {\n+                char[] chars = { '\\\\', '|', '/', '-'};\n+                return chars[n % (chars.Length - 1)].ToString();\n+            }\n+            public static string ProgressBar(float percentage, int width = 10, char completedChar = '\u2588', char remainingChar = '\u2591')\n+            {\n+                string result = \"\";",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nice to put a newline between each } and the next block",
              "createdAt": "2022-12-19T19:35:51Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -0,0 +1,342 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    internal static class ANSIBuilder\n+    {\n+        public static string ANSIRemove(string text)\n+        {\n+            return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n+        }\n+        public static class Alignment",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra blank line",
              "createdAt": "2022-12-19T19:37:41Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If we end up not using this ever, we should perhaps remove these comments.",
              "createdAt": "2022-12-19T19:39:35Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Probably remove this for production",
              "createdAt": "2022-12-19T19:41:21Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            // Finished\n+            eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n+            eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n+            // Raised\n+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n+            eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n+            eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n+            // Initialize FancyLoggerBuffer\n+            FancyLoggerBuffer.Initialize();\n+        }\n+\n+        // Build\n+        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n+        {\n+            // Console.WriteLine(LoggerFormatting.Bold(\"[Build]\") + \"\\t Finished\");\n+        }\n+\n+        // Project\n+        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id already exists...\n+            if (projectConsoleLines.ContainsKey(id)) return;\n+            // Create line\n+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+\n+            projectConsoleLines.Add(id, line);\n+            Thread.Sleep(400);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            if (!projectConsoleLines.TryGetValue(id, out FancyLoggerBufferLine line))\r\n            {\r\n                return;\r\n            }\r\n```",
              "createdAt": "2022-12-19T19:42:25Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            // Finished\n+            eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n+            eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n+            // Raised\n+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n+            eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n+            eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n+            // Initialize FancyLoggerBuffer\n+            FancyLoggerBuffer.Initialize();\n+        }\n+\n+        // Build\n+        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n+        {\n+            // Console.WriteLine(LoggerFormatting.Bold(\"[Build]\") + \"\\t Finished\");\n+        }\n+\n+        // Project\n+        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id already exists...\n+            if (projectConsoleLines.ContainsKey(id)) return;\n+            // Create line\n+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+\n+            projectConsoleLines.Add(id, line);\n+            Thread.Sleep(400);\n+        }\n+        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id does not exist\n+            if (!projectConsoleLines.ContainsKey(id)) return;\n+            // Get line id\n+            FancyLoggerBufferLine line = projectConsoleLines[id];",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Don't take this suggestion:\r\n\r\n```suggestion\r\n            FancyLoggerBuffer.WriteNewLine(\"Error \ud83d\ude31\");\r\n```",
              "createdAt": "2022-12-19T19:44:22Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            // Finished\n+            eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n+            eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n+            // Raised\n+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n+            eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n+            eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n+            // Initialize FancyLoggerBuffer\n+            FancyLoggerBuffer.Initialize();\n+        }\n+\n+        // Build\n+        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n+        {\n+            // Console.WriteLine(LoggerFormatting.Bold(\"[Build]\") + \"\\t Finished\");\n+        }\n+\n+        // Project\n+        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id already exists...\n+            if (projectConsoleLines.ContainsKey(id)) return;\n+            // Create line\n+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+\n+            projectConsoleLines.Add(id, line);\n+            Thread.Sleep(400);\n+        }\n+        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id does not exist\n+            if (!projectConsoleLines.ContainsKey(id)) return;\n+            // Get line id\n+            FancyLoggerBufferLine line = projectConsoleLines[id];\n+            // Update line\n+            FancyLoggerBuffer.UpdateLine(line.Id,\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+            /*// TODO\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            var line = projectConsoleLines[id];\n+            FancyLoggerBuffer.UpdateLine(line.Id, \"\"\n+                + \"D\"\n+                + \" \"\n+                + ANSIBuilder.Formatting.Dim(\"Project - \")\n+                + GetUnambiguousPath(e.ProjectFile)\n+            );*/\n+        }\n+        // Target\n+        void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n+        {\n+        }\n+\n+        // Task\n+        void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n+        {\n+            existingTasks++;\n+        }\n+\n+        void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n+        {\n+            completedTasks++;\n+        }\n+\n+        void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n+        {\n+        }\n+        void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n+        {\n+            // Console.WriteLine(\"Warning raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Warning!\");\n+        }\n+        void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n+        {\n+            // TODO: Try to redirect to stderr\n+            // Console.WriteLine(\"Error raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Error\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Add q as a way to end this?",
              "createdAt": "2022-12-19T19:45:57Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            // Finished\n+            eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n+            eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n+            // Raised\n+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n+            eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n+            eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n+            // Initialize FancyLoggerBuffer\n+            FancyLoggerBuffer.Initialize();\n+        }\n+\n+        // Build\n+        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n+        {\n+            // Console.WriteLine(LoggerFormatting.Bold(\"[Build]\") + \"\\t Finished\");\n+        }\n+\n+        // Project\n+        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id already exists...\n+            if (projectConsoleLines.ContainsKey(id)) return;\n+            // Create line\n+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+\n+            projectConsoleLines.Add(id, line);\n+            Thread.Sleep(400);\n+        }\n+        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id does not exist\n+            if (!projectConsoleLines.ContainsKey(id)) return;\n+            // Get line id\n+            FancyLoggerBufferLine line = projectConsoleLines[id];\n+            // Update line\n+            FancyLoggerBuffer.UpdateLine(line.Id,\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+            /*// TODO\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            var line = projectConsoleLines[id];\n+            FancyLoggerBuffer.UpdateLine(line.Id, \"\"\n+                + \"D\"\n+                + \" \"\n+                + ANSIBuilder.Formatting.Dim(\"Project - \")\n+                + GetUnambiguousPath(e.ProjectFile)\n+            );*/\n+        }\n+        // Target\n+        void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n+        {\n+        }\n+\n+        // Task\n+        void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n+        {\n+            existingTasks++;\n+        }\n+\n+        void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n+        {\n+            completedTasks++;\n+        }\n+\n+        void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n+        {\n+        }\n+        void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n+        {\n+            // Console.WriteLine(\"Warning raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Warning!\");\n+        }\n+        void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n+        {\n+            // TODO: Try to redirect to stderr\n+            // Console.WriteLine(\"Error raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+        }\n+\n+\n+        public void Shutdown() {\n+            // Keep open if autoscroll disabled (the user is reading info)\n+            while (true)\n+            {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This looks like it should be localized eventually \u2122\ufe0f",
              "createdAt": "2022-12-19T19:46:17Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,161 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+\n+using Microsoft.Build.Framework;\n+using System.Runtime.InteropServices;\n+using System.Threading;\n+using System.Threading.Tasks;\n+using System.IO;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    public class FancyLogger : ILogger\n+    {\n+        // TODO: Move somewhere else\n+        public string GetUnambiguousPath(string path)\n+        {\n+            // Get last part of path\n+            return Path.GetFileName(path);\n+        }\n+\n+\n+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);\n+\n+        public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();\n+\n+        private float existingTasks = 1;\n+        private float completedTasks = 0;\n+\n+        public string Parameters {  get; set; }\n+\n+        public LoggerVerbosity Verbosity { get; set; }\n+\n+        public FancyLogger()\n+        {\n+            Parameters = \"\";\n+        }\n+\n+        public void Initialize(IEventSource eventSource)\n+        {\n+            // Register for different events\n+            // Started\n+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);\n+            eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);\n+            // eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);\n+            // eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);\n+            // Finished\n+            eventSource.BuildFinished += new BuildFinishedEventHandler(eventSource_BuildFinished);\n+            eventSource.ProjectFinished += new ProjectFinishedEventHandler(eventSource_ProjectFinished);\n+            // eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);\n+            // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);\n+            // Raised\n+            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);\n+            eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);\n+            eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);\n+            // Initialize FancyLoggerBuffer\n+            FancyLoggerBuffer.Initialize();\n+        }\n+\n+        // Build\n+        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)\n+        {\n+            // Console.WriteLine(LoggerFormatting.Bold(\"[Build]\") + \"\\t Finished\");\n+        }\n+\n+        // Project\n+        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id already exists...\n+            if (projectConsoleLines.ContainsKey(id)) return;\n+            // Create line\n+            FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine(\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Graphics.Spinner()} {ANSIBuilder.Formatting.Dim(\"Project - \")} {GetUnambiguousPath(e.ProjectFile!)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+\n+            projectConsoleLines.Add(id, line);\n+            Thread.Sleep(400);\n+        }\n+        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)\n+        {\n+            // Get project id\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            // If id does not exist\n+            if (!projectConsoleLines.ContainsKey(id)) return;\n+            // Get line id\n+            FancyLoggerBufferLine line = projectConsoleLines[id];\n+            // Update line\n+            FancyLoggerBuffer.UpdateLine(line.Id,\n+                ANSIBuilder.Alignment.SpaceBetween(\n+                    $\"{ANSIBuilder.Formatting.Color(\"\u2713\", ANSIBuilder.Formatting.ForegroundColor.Green)} {ANSIBuilder.Formatting.Dim(\"Project - \")} {ANSIBuilder.Formatting.Color(GetUnambiguousPath(e.ProjectFile!), ANSIBuilder.Formatting.ForegroundColor.Green)}\",\n+                    \"(5 targets completed)\",\n+                    Console.WindowWidth\n+                )\n+            );\n+            /*// TODO\n+            int id = e.BuildEventContext!.ProjectInstanceId;\n+            var line = projectConsoleLines[id];\n+            FancyLoggerBuffer.UpdateLine(line.Id, \"\"\n+                + \"D\"\n+                + \" \"\n+                + ANSIBuilder.Formatting.Dim(\"Project - \")\n+                + GetUnambiguousPath(e.ProjectFile)\n+            );*/\n+        }\n+        // Target\n+        void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n+        {\n+        }\n+        void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n+        {\n+        }\n+\n+        // Task\n+        void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n+        {\n+            existingTasks++;\n+        }\n+\n+        void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n+        {\n+            completedTasks++;\n+        }\n+\n+        void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n+        {\n+        }\n+        void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)\n+        {\n+            // Console.WriteLine(\"Warning raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Warning!\");\n+        }\n+        void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)\n+        {\n+            // TODO: Try to redirect to stderr\n+            // Console.WriteLine(\"Error raised\");\n+            FancyLoggerBuffer.WriteNewLine(\"Error\");\n+        }\n+\n+\n+        public void Shutdown() {\n+            // Keep open if autoscroll disabled (the user is reading info)\n+            while (true)\n+            {\n+                if (FancyLoggerBuffer.AutoScrollEnabled) break;\n+            }\n+            FancyLoggerBuffer.Terminate();\n+            Console.WriteLine(\"Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            WriteFooter(\"This is an empty footer hoho\");\r\n```\r\n\r\nGotta get in the Christmas spirit!",
              "createdAt": "2022-12-19T19:47:07Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -0,0 +1,262 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line inside the fancylogger buffer.\n+    /// </summary>\n+    public class FancyLoggerBufferLine\n+    {\n+        private static int counter = 0;\n+        public int Id;\n+        public string Text;\n+        public bool IsHidden;\n+        public int IdentationLevel = -1;\n+        public FancyLoggerBufferLine()\n+        {\n+            Id = counter++;\n+            Text = String.Empty;\n+        }\n+        public FancyLoggerBufferLine(string text)\n+        {\n+            Id = counter++;\n+            Text = text;\n+        }\n+        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)\n+        {\n+            IdentationLevel = identationLevel;\n+        }\n+        public void Hide()\n+        {\n+            IsHidden = true;\n+        }\n+        public void Unhide()\n+        {\n+            IsHidden = false;\n+        }\n+        public int GetIndex()\n+        {\n+            return FancyLoggerBuffer.GetLineIndexById(Id);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Buffer manager for FancyLogger\n+    /// </summary>\n+    internal static class FancyLoggerBuffer\n+    {\n+        // Status\n+        public static bool AutoScrollEnabled { get; private set; }\n+        public static bool IsTerminated { get; private set; }\n+        public static int CurrentTopLineIndex { get; private set; }\n+        public static int Height { get { return Console.WindowHeight; } }\n+        // Lines to be presented by the buffer\n+        private static List<FancyLoggerBufferLine> lines = new();\n+        public static void Initialize()\n+        {\n+            // Setup event listeners\n+            Task.Run(() =>\n+            {\n+                while (true)\n+                {\n+                    if (IsTerminated) return;\n+                    switch (Console.ReadKey().Key)\n+                    {\n+                        case ConsoleKey.UpArrow:\n+                            ScrollToLine(CurrentTopLineIndex - 1);\n+                            break;\n+                        case ConsoleKey.DownArrow:\n+                            ScrollToLine(CurrentTopLineIndex + 1);\n+                            break;\n+                        case ConsoleKey.Home:\n+                            ScrollToLine(0);\n+                            break;\n+                        case ConsoleKey.End:\n+                            ScrollToEnd();\n+                            break;\n+                        case ConsoleKey.Spacebar:\n+                        case ConsoleKey.Escape:\n+                            ToggleAutoScroll();\n+                            break;\n+                    }\n+                }\n+            });\n+            // Switch to alternate\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+            // Settings\n+            AutoScrollEnabled = true;\n+            // Render contents\n+            WriteTitleBar();\n+            WriteFooter(\"This is an empty footer haha\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you have to start there with \"\" + ? Could you just start with ANSIBuilder.Cursor.Home()?",
              "createdAt": "2022-12-19T19:48:50Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -0,0 +1,262 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Logging.FancyLogger\n+{\n+    /// <summary>\n+    /// Represents an identifiable line inside the fancylogger buffer.\n+    /// </summary>\n+    public class FancyLoggerBufferLine\n+    {\n+        private static int counter = 0;\n+        public int Id;\n+        public string Text;\n+        public bool IsHidden;\n+        public int IdentationLevel = -1;\n+        public FancyLoggerBufferLine()\n+        {\n+            Id = counter++;\n+            Text = String.Empty;\n+        }\n+        public FancyLoggerBufferLine(string text)\n+        {\n+            Id = counter++;\n+            Text = text;\n+        }\n+        public FancyLoggerBufferLine(string text, int identationLevel) : this(text)\n+        {\n+            IdentationLevel = identationLevel;\n+        }\n+        public void Hide()\n+        {\n+            IsHidden = true;\n+        }\n+        public void Unhide()\n+        {\n+            IsHidden = false;\n+        }\n+        public int GetIndex()\n+        {\n+            return FancyLoggerBuffer.GetLineIndexById(Id);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Buffer manager for FancyLogger\n+    /// </summary>\n+    internal static class FancyLoggerBuffer\n+    {\n+        // Status\n+        public static bool AutoScrollEnabled { get; private set; }\n+        public static bool IsTerminated { get; private set; }\n+        public static int CurrentTopLineIndex { get; private set; }\n+        public static int Height { get { return Console.WindowHeight; } }\n+        // Lines to be presented by the buffer\n+        private static List<FancyLoggerBufferLine> lines = new();\n+        public static void Initialize()\n+        {\n+            // Setup event listeners\n+            Task.Run(() =>\n+            {\n+                while (true)\n+                {\n+                    if (IsTerminated) return;\n+                    switch (Console.ReadKey().Key)\n+                    {\n+                        case ConsoleKey.UpArrow:\n+                            ScrollToLine(CurrentTopLineIndex - 1);\n+                            break;\n+                        case ConsoleKey.DownArrow:\n+                            ScrollToLine(CurrentTopLineIndex + 1);\n+                            break;\n+                        case ConsoleKey.Home:\n+                            ScrollToLine(0);\n+                            break;\n+                        case ConsoleKey.End:\n+                            ScrollToEnd();\n+                            break;\n+                        case ConsoleKey.Spacebar:\n+                        case ConsoleKey.Escape:\n+                            ToggleAutoScroll();\n+                            break;\n+                    }\n+                }\n+            });\n+            // Switch to alternate\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n+            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+            // Settings\n+            AutoScrollEnabled = true;\n+            // Render contents\n+            WriteTitleBar();\n+            WriteFooter(\"This is an empty footer haha\");\n+            ScrollToEnd();\n+        }\n+        public static void Terminate()\n+        {\n+            // Switch to main buffer\n+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n+            // Dispose event listeners\n+            IsTerminated = true;\n+            // Delete lines\n+            lines = new();\n+        }\n+\n+        #region Scrolling\n+        private static void ScrollToLine(int firstLineIndex)\n+        {\n+            if (firstLineIndex < 0 || firstLineIndex >= lines.Count) return;\n+            CurrentTopLineIndex = firstLineIndex;\n+            int i = 0;\n+            while (i < Height - 4)\n+            {\n+                int lineIndex = i + firstLineIndex;\n+                Console.Write(\"\"\n+                    + ANSIBuilder.Cursor.Position(i + 2, 0)\n+                    + ANSIBuilder.Eraser.LineCursorToEnd()\n+                    // + ((lineIndex < lines.Count && lines[lineIndex].IsHidden) ? \" Hidden\" : \"\")\n+                    + ((lineIndex < lines.Count) ? ANSIBuilder.Tabulator.ForwardTab(lines[lineIndex].IdentationLevel) + lines[lineIndex].Text : \"\")\n+                );\n+                i++;\n+            }\n+\n+            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));\n+        }\n+        private static void ScrollToEnd()\n+        { \n+            // If number of lines is smaller than height\n+            if (lines.Count < Height - 2)\n+            {\n+                ScrollToLine(0);\n+            }\n+            else\n+            {\n+                ScrollToLine(lines.Count - Height + 4);\n+            }\n+            // Go to end\n+            Console.Write(ANSIBuilder.Cursor.Position(Height, 0));\n+        }\n+        private static void ToggleAutoScroll()\n+        {\n+            AutoScrollEnabled = !AutoScrollEnabled;\n+        }\n+        #endregion\n+        #region Line Referencing\n+        public static int GetLineIndexById(int lineId)\n+        {\n+            for (int i = 0; i < lines.Count; i++)\n+            {\n+                if (lines[i].Id == lineId) return i;\n+            }\n+            return -1;\n+        }\n+        public static FancyLoggerBufferLine? GetLineById(int lineId)\n+        {\n+            int i = GetLineIndexById(lineId);\n+            if (i == -1) return null;\n+            return lines[i];\n+        }\n+        #endregion\n+        #region Writing\n+        public static void WriteTitleBar()\n+        {\n+            Console.Write(\"\"",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we want to make this a True/False thing so we can switch the default opt in/opt out behavior at some point?",
              "createdAt": "2022-12-19T19:52:39Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -220,6 +221,7 @@ bool emptyParametersAllowed\n             new ParameterlessSwitchInfo(  new string[] { \"filelogger8\", \"fl8\" },            ParameterlessSwitch.FileLogger8,           null),\n             new ParameterlessSwitchInfo(  new string[] { \"filelogger9\", \"fl9\" },            ParameterlessSwitch.FileLogger9,           null),\n             new ParameterlessSwitchInfo(  new string[] { \"distributedfilelogger\", \"dfl\" },  ParameterlessSwitch.DistributedFileLogger, null),\n+            new ParameterlessSwitchInfo(  new string[] { \"fancylogger\", \"flg\" },            ParameterlessSwitch.FancyLogger,           null),",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}