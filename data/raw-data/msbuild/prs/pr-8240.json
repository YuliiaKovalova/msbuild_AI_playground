{
  "number": 8240,
  "title": "Batch metadata updates for better performance (attempt 2)",
  "body": "Improves https://github.com/dotnet/sdk/issues/27738\r\nIt is another attempt to introduce changes proposed in https://github.com/dotnet/msbuild/pull/8098, which was reverted due to a bug.\r\n\r\n### Context\r\n\r\nWhen profiling \"design-time-builds\" (see https://github.com/dotnet/sdk/issues/27738) one method that stands out in the performance profiler is a method called GatherTaskOutputs. It copies the output of the executed task into a new ProjectItemInstance. Copying the output metadata involves creating and populating the ImmutableDicitionary in the newly created ProjectItemInstance. The copying process turns out to be a noticeably slow operation.\r\n\r\n### Changes Made\r\nInstead of copying metadata properties one by one, all properties will be copied with a single [SetItems](https://learn.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutabledictionary-2.setitems) operation.\r\nAccording to BenchmarkDotNet using a single operation to populate the ImmutableDictionary is twice as fast.\r\n\r\n### Testing\r\nBenchmarking using scenario from https://github.com/dotnet/sdk/issues/27738#issue-1364794138.\r\n\r\nbefore:\r\nTime Elapsed 00:01:23.19\r\nTime Elapsed 00:01:23.88\r\nTime Elapsed 00:01:23.08\r\nTime Elapsed 00:01:23.21\r\nTime Elapsed 00:01:23.15\r\n\r\nafter:\r\nTime Elapsed 00:01:20.66\r\nTime Elapsed 00:01:20.98\r\nTime Elapsed 00:01:20.91\r\nTime Elapsed 00:01:20.97\r\nTime Elapsed 00:01:20.89\r\n\r\n### Notes\r\nPrevious PR got reverted due to a bug in checking whether the copied metadata is one of the well-known attributes (we were checking `value`, but we should check the `key` instead).  I've tried to add a test that validates that we filter out metadata items that have a well-known name, to prevent any such mistake in the future. Unfortunately, it is a non-easy scenario to reproduce in a test. MSBuild's code prevents the creation of custom metadata with a reserved name (e.g. during project parsing or in the `TaskItem` class). The only way to work around it seems to be to implement a custom `ITaskItem` class, but that feels to be too much for a single test. ",
  "state": "MERGED",
  "createdAt": "2022-12-14T10:18:03Z",
  "updatedAt": "2023-03-28T19:18:48Z",
  "closedAt": "2023-03-28T19:18:48Z",
  "mergedAt": "2023-03-28T19:18:47Z",
  "additions": 62,
  "deletions": 29,
  "changedFiles": 3,
  "headRefName": "marcink-20221213-addrange",
  "isDraft": false,
  "author": {
    "login": "marcin-krystianc"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "32925cac6ec945d882a269e56cc1dbfbde06a9de",
          "message": "Batch metadata updates for better performance (attempt 2)",
          "committedDate": "2022-12-13T15:25:39Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf6c28fbccc1885a566a68b59a643cc8e39fc397",
          "message": "Merge remote-tracking branch 'origin/main' into marcink-20221213-addrange\n\n# Conflicts:\n#\tsrc/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
          "committedDate": "2023-01-20T11:52:14Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e86b46cf2ac335eea76d67db7b53ee095345c3b",
          "message": "add a regression test",
          "committedDate": "2023-01-20T11:54:16Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb4a3bcf545d5d817ccebddc76190b653e0f4ae9",
          "message": "Merge remote-tracking branch 'origin/main' into marcink-20221213-addrange",
          "committedDate": "2023-02-13T12:57:35Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "500e926d81255f6b930627730d37fd6e91106bb9",
          "message": "fix compilation",
          "committedDate": "2023-02-14T08:09:15Z",
          "author": {
            "name": "Marcin Krystianc",
            "email": "marcin.krystianc@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hi @rainersigwald ,\r\n\r\nI've come up with such code:\r\n``` c#\r\n[Fact]\r\npublic void IsWellKnownAttributeValuePreserved()\r\n{\r\n    ObjectModelHelpers.DeleteTempProjectDirectory();\r\n\r\n    ObjectModelHelpers.CreateFileInTempProjectDirectory(\"Myapp.proj\", @\"\r\n        <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>\r\n          <Target Name =`Repro`>\r\n            <CreateItem Include=`*.txt` AdditionalMetadata=`MyProperty=Identity`>\r\n              <Output TaskParameter=`Include` ItemName=`TestItem`/>\r\n            </CreateItem>\r\n            <Error Text=`@(TestItem)` Condition=\"\"'%(MyProperty)' != 'Identity' \"\"/>\r\n          </Target>\r\n        </Project>\r\n        \");\r\n\r\n    ObjectModelHelpers.CreateFileInTempProjectDirectory(\"Foo.txt\", \"foo\");\r\n    MockLogger logger = new MockLogger(_testOutput);\r\n    ObjectModelHelpers.BuildTempProjectFileExpectSuccess(\"Myapp.proj\", logger);\r\n}\r\n```\r\nI've confirmed that it would fail on https://github.com/dotnet/msbuild/pull/8098. \r\nDo you think it is ok, or there is anything to be added?",
        "createdAt": "2023-01-20T11:31:33Z",
        "author": {
          "login": "marcin-krystianc"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}