{
  "number": 7016,
  "title": "Move NativeMethods and Traits to Framework",
  "body": "Progress toward #6984.\r\n\r\nMoved Traits, AssemblyUtilities, and NativeMethodsShared to Framework.\r\n\r\nThis isn't *totally complete* because MSBuildTaskHost can't see the new class, unfortunately.",
  "state": "MERGED",
  "createdAt": "2021-11-04T20:18:59Z",
  "updatedAt": "2021-11-23T21:31:05Z",
  "closedAt": "2021-11-23T21:31:04Z",
  "mergedAt": "2021-11-23T21:31:04Z",
  "additions": 2133,
  "deletions": 2036,
  "changedFiles": 78,
  "headRefName": "framework-nativemethods",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "704b6e130d169966d204cdb34288eebe45372c67",
          "message": "Move InternalErrorException to Framework",
          "committedDate": "2021-11-17T19:47:53Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85ebd5c5be15f0bdbcc0f2807a785e63f5c40f41",
          "message": "Move Traits, NativeMethods, and AssemblyUtilities to Framework\n\nPart of the long slog of moving all of Shared to Framework, #6984.",
          "committedDate": "2021-11-17T19:55:15Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4c58b8a06543b293fe7cf55623018e3efe1c13b8",
          "message": "Delete shared/InternalErrorException",
          "committedDate": "2021-11-17T19:55:15Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56cfa5a5038f16e24712ffb70d24a812140b60fa",
          "message": "Complete deletion of NativeMethodsShared",
          "committedDate": "2021-11-17T19:55:15Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b7dd8ba08b9422b47859a3cafc87ec681ceb10c",
          "message": "Add global using alias for NativeMethodsShared",
          "committedDate": "2021-11-17T19:55:15Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "808e8dd22e5a1f02bdb690a4cd90b038cc4caac5",
          "message": "Avoid Framework method calls in SolutionFile",
          "committedDate": "2021-11-17T19:55:15Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd95fa922d0466b53163f93a32895f53df202f4b",
          "message": "Merge branch 'framework-nativemethods'\n\nConflicts:\n\tsrc/Framework/Microsoft.Build.Framework.csproj",
          "committedDate": "2021-11-23T20:09:35Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "GitHub has gotten very, very confused about where the merge-base is here after I merged main. I don't know why . . .",
        "createdAt": "2021-11-23T19:54:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this not needed anymore?",
              "createdAt": "2021-11-08T19:45:32Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "@@ -42,7 +42,7 @@ private static void AdjustForShellExecution(ref string pathToExecutable, ref str\n                 var comSpec = Environment.GetEnvironmentVariable(\"ComSpec\");\n \n                 // /D: Do not load AutoRun configuration from the registry (perf)\n-                arguments = $\"{(Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd ? String.Empty : \"/D \")}/C \\\"{pathToExecutable} {arguments}\\\"\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I didn't see why we would need to respect the feature flag in unit tests, which shouldn't have any dependency on autorun configuration. And the tests passed. But I don't know for sure why it was there in the first place.",
              "createdAt": "2021-11-10T21:17:16Z",
              "path": "src/UnitTests.Shared/RunnerUtilities.cs",
              "diffHunk": "@@ -42,7 +42,7 @@ private static void AdjustForShellExecution(ref string pathToExecutable, ref str\n                 var comSpec = Environment.GetEnvironmentVariable(\"ComSpec\");\n \n                 // /D: Do not load AutoRun configuration from the registry (perf)\n-                arguments = $\"{(Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd ? String.Empty : \"/D \")}/C \\\"{pathToExecutable} {arguments}\\\"\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\nExtra //\r\n\r\nIs this just a copy of NativeMethodsShared but not in Shared? Why do some later changes refer to Tasks.NativeMethods?",
              "createdAt": "2021-11-08T19:47:29Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -0,0 +1,1695 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I hadn't completed the move--out of\r\n\r\n1. Copy\r\n2. Delete old\r\n\r\nI had done only one!\r\n\r\nThe `Tasks.NativeMethods` change is a result of newly-created ambiguity between this new `Microsoft.Build.Framework.NativeMethods` and `Microsoft.Build.Tasks.NativeMethods`. The fix was to qualify the reference to not be ambiguous any more.",
              "createdAt": "2021-11-12T17:26:30Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -0,0 +1,1695 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I appreciate trying not to make the diff bigger than necessary, but this is also slightly misleading, as it's in Framework, not Shared. That doesn't bother me too much since Framework is \"shared\" just not Shared if that makes sense, but it's a little confusing.",
              "createdAt": "2021-11-12T21:22:50Z",
              "path": "src/Build.OM.UnitTests/AssemblyInfo.cs",
              "diffHunk": "@@ -0,0 +1,4 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yeah, the implications of changing this everywhere made me pretty sad so this seemed like a good compromise.",
              "createdAt": "2021-11-17T19:58:01Z",
              "path": "src/Build.OM.UnitTests/AssemblyInfo.cs",
              "diffHunk": "@@ -0,0 +1,4 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: extra // (also in a couple other places)",
              "createdAt": "2021-11-12T21:23:37Z",
              "path": "src/Framework/BuildEnvironmentState.cs",
              "diffHunk": "@@ -0,0 +1,18 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+//",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Didn't you add this, admittedly with an inner exception and extra args?",
              "createdAt": "2021-11-12T21:29:55Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -425,5 +425,30 @@ public enum SdkReferencePropertyExpansionMode\n             ExpandUnescape,\n             ExpandLeaveEscaped\n         }\n+\n+        /// <summary>\n+        /// Emergency escape hatch. If a customer hits a bug in the shipped product causing an internal exception,\n+        /// and fortuitously it happens that ignoring the VerifyThrow allows execution to continue in a reasonable way,\n+        /// then we can give them this undocumented environment variable as an immediate workaround.\n+        /// </summary>\n+        /// <remarks>\n+        /// Clone from ErrorUtilities which isn't (yet?) available in Framework.\n+        /// </remarks>\n+\n+        private static readonly bool s_throwExceptions = String.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBUILDDONOTTHROWINTERNAL\"));\n+\n+        /// <summary>\n+        /// Throws InternalErrorException.\n+        /// </summary>\n+        /// <remarks>\n+        /// Clone of ErrorUtilities.ThrowInternalError which isn't (yet?) available in Framework.\n+        /// </remarks>\n+        internal static void ThrowInternalError(string message)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Hopefully over time we'll be able to reduce the duplication, but this is a more specific overload so I think it's ok to leave it for now.",
              "createdAt": "2021-11-17T19:57:26Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -425,5 +425,30 @@ public enum SdkReferencePropertyExpansionMode\n             ExpandUnescape,\n             ExpandLeaveEscaped\n         }\n+\n+        /// <summary>\n+        /// Emergency escape hatch. If a customer hits a bug in the shipped product causing an internal exception,\n+        /// and fortuitously it happens that ignoring the VerifyThrow allows execution to continue in a reasonable way,\n+        /// then we can give them this undocumented environment variable as an immediate workaround.\n+        /// </summary>\n+        /// <remarks>\n+        /// Clone from ErrorUtilities which isn't (yet?) available in Framework.\n+        /// </remarks>\n+\n+        private static readonly bool s_throwExceptions = String.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"MSBUILDDONOTTHROWINTERNAL\"));\n+\n+        /// <summary>\n+        /// Throws InternalErrorException.\n+        /// </summary>\n+        /// <remarks>\n+        /// Clone of ErrorUtilities.ThrowInternalError which isn't (yet?) available in Framework.\n+        /// </remarks>\n+        internal static void ThrowInternalError(string message)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Extra empty line.",
              "createdAt": "2021-11-22T12:54:20Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -425,5 +425,30 @@ public enum SdkReferencePropertyExpansionMode\n             ExpandUnescape,\n             ExpandLeaveEscaped\n         }\n+\n+        /// <summary>\n+        /// Emergency escape hatch. If a customer hits a bug in the shipped product causing an internal exception,\n+        /// and fortuitously it happens that ignoring the VerifyThrow allows execution to continue in a reasonable way,\n+        /// then we can give them this undocumented environment variable as an immediate workaround.\n+        /// </summary>\n+        /// <remarks>\n+        /// Clone from ErrorUtilities which isn't (yet?) available in Framework.\n+        /// </remarks>\n+",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}