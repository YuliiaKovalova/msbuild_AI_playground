{
  "number": 11928,
  "title": "Avoid closure object allocations in TaskItem.CopyMetadataTo",
  "body": "Fixes #\r\n\r\nWe can avoid some closure object creations by extracting a portion of the existing code.\r\n\r\n\r\n### Context\r\n\r\nThere are a non-trivial amount of allocations coming from this path, and we can reduce them by creating another method that is only called when we need the closure\r\n\r\n![image](https://github.com/user-attachments/assets/a8399901-0caf-4902-b07f-00141f18ec9f)\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-29T19:58:42Z",
  "updatedAt": "2025-06-02T14:44:21Z",
  "closedAt": "2025-06-02T14:44:21Z",
  "mergedAt": "2025-06-02T14:44:21Z",
  "additions": 20,
  "deletions": 14,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/taskItemCopyMetadata",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1c2d4f18847011d418eb3fa98fbab1a1b04885b3",
          "message": "Avoid closure object allocations",
          "committedDate": "2025-05-29T19:52:23Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08ccc6173cd3c219857cfd6144d3f2a3d41094ab",
          "message": "Add comment to explain perf fix",
          "committedDate": "2025-05-29T20:07:34Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "While the extraction of the metadata import logic helps isolate the closure allocations, the LINQ lambda expressions may still capture variables. Consider replacing the LINQ chain with an imperative loop to further minimize closure allocation overhead.\n```suggestion\n                List<KeyValuePair<string, string>> metadataToImport = new List<KeyValuePair<string, string>>();\n\n                foreach (var metadatum in metadataEnumerable)\n                {\n                    if (string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))\n                    {\n                        metadataToImport.Add(new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));\n                    }\n                }\n```",
              "createdAt": "2025-05-29T19:59:09Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1492,6 +1479,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)\n                 }\n             }\n \n+            private void BulkImportMetadata(ITaskItem destinationItem, IMetadataContainer destinationItemAsMetadataContainer)\n+            {\n+                IEnumerable<ProjectMetadataInstance> metadataEnumerable = MetadataCollection;\n+                IEnumerable<KeyValuePair<string, string>> metadataToImport = metadataEnumerable\n+                    .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))\n+                    .Select(metadatum => new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));\n+",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: for all of these perf-based extractions, can you add a comment like `// PERF: extracted out into separate call to not allocate closures` so that we're less likely to 'unroll this' and lose the gain?",
              "createdAt": "2025-05-29T20:04:39Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1492,6 +1479,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)\n                 }\n             }\n \n+            private void BulkImportMetadata(ITaskItem destinationItem, IMetadataContainer destinationItemAsMetadataContainer)",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Done \ud83d\udc4d ",
              "createdAt": "2025-05-29T20:07:52Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1492,6 +1479,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)\n                 }\n             }\n \n+            private void BulkImportMetadata(ITaskItem destinationItem, IMetadataContainer destinationItemAsMetadataContainer)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}