{
  "number": 3509,
  "title": " Short-circuit more reflection calls",
  "body": "",
  "state": "MERGED",
  "createdAt": "2018-07-12T18:06:12Z",
  "updatedAt": "2020-12-30T22:52:53Z",
  "closedAt": "2018-07-13T22:43:08Z",
  "mergedAt": "2018-07-13T22:43:08Z",
  "additions": 393,
  "deletions": 31,
  "changedFiles": 3,
  "headRefName": "replaceTopReflectionFunctions",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "957d69f6d54d532b7baa0e0b7e185cdb115d1784",
          "message": "Log property functions requiring reflection",
          "committedDate": "2018-07-12T22:41:57Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99071f8bdd5189fb7c13f8b4bce05d64bc6b5727",
          "message": "Short-circuit more reflection calls",
          "committedDate": "2018-07-12T22:50:45Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8a999c0beb8c5a58b6c4b433de62c937af0af9e5",
          "message": "Cache regex in GetRegistryValueFromView",
          "committedDate": "2018-07-13T00:16:35Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Reflection calls. The ones in bold have been short-circuited.\r\n\r\nOrchardCore\r\n![image](https://user-images.githubusercontent.com/2255729/42652057-1e11142c-85c6-11e8-8fb3-94e046c80163.png)\r\n\r\n100 vcxproj projects\r\n![image](https://user-images.githubusercontent.com/2255729/42652075-2c6099a8-85c6-11e8-85b1-e39560251aef.png)\r\n",
        "createdAt": "2018-07-12T18:24:47Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "### DesignTimeBuild Time (ms) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | ::ok_hand: | no | 37.1118 -> 37.0284 (-0.225%)\r\nDotnetWebProject | :white_check_mark: | yes | 235.2594 -> 232.5028 (-1.172%)\r\nDotnetMvcProject | :ok_hand: | no | 235.0471 -> 235.1835 (0.058%)\r\nPicasso | :white_check_mark: | yes | 1572.8186 -> 1555.9574 (-1.072%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 69.4893 -> 67.8582 (-2.347%)\r\nSmallP2PNewCsproj | :white_check_mark: | yes | 664.6385 -> 658.5419 (-0.917%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 11501.4756 -> 11376.1087 (-1.09%)\r\nOrchardCore | :white_check_mark: | yes | 48930.9478 -> 47817.0077 (-2.277%)\r\n\r\n### DesignTimeBuild Memory (bytes) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | ::ok_hand: | no | 6279217 -> 6278979 (-0.004%)\r\nDotnetWebProject | :red_circle: | yes | 20230813 -> 22398128 (10.713%)\r\nDotnetMvcProject | :ok_hand: | no | 20886443 -> 21925050 (4.973%)\r\nPicasso | ::ok_hand: | no | 186588876 -> 185431429 (-0.62%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 8606975 -> 8562468 (-0.517%)\r\nSmallP2PNewCsproj | ::ok_hand: | no | 91247792 -> 89802752 (-1.584%)\r\nLargeP2POldCsproj | :red_circle: | yes | 1034724720 -> 1147210958 (10.871%)\r\nOrchardCore | :red_circle: | yes | 2581842386 -> 2741507150 (6.184%)\r\n\r\n### SerialEvaluationIsolatedContext Time (ms) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 35.2617 -> 34.7913 (-1.334%)\r\nDotnetWebProject | :white_check_mark: | yes | 48.9882 -> 48.5883 (-0.816%)\r\nDotnetMvcProject | :white_check_mark: | yes | 55.0544 -> 54.5799 (-0.862%)\r\nPicasso | :white_check_mark: | yes | 308.0885 -> 301.5054 (-2.137%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 52.2886 -> 51.0734 (-2.324%)\r\nSmallP2PNewCsproj | :white_check_mark: | yes | 209.8334 -> 206.4325 (-1.621%)\r\nLargeP2POldCsproj | ::ok_hand: | no | 900.8613 -> 900.4663 (-0.044%)\r\nOrchardCore | :white_check_mark: | yes | 3218.4146 -> 3123.2646 (-2.956%)\r\n\r\n### SerialEvaluationIsolatedContext Memory (bytes) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 5702663 -> 5684519 (-0.318%)\r\nDotnetWebProject | :white_check_mark: | yes | 7710009 -> 7680896 (-0.378%)\r\nDotnetMvcProject | :white_check_mark: | yes | 8363203 -> 8301209 (-0.741%)\r\nPicasso | ::ok_hand: | no | 13359602 -> 13215379 (-1.08%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 7036487 -> 7001199 (-0.502%)\r\nSmallP2PNewCsproj | ::ok_hand: | no | 15922822 -> 15603138 (-2.008%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 40520262 -> 39211006 (-3.231%)\r\nOrchardCore | :white_check_mark: | yes | 70136930 -> 64014473 (-8.729%)\r\n\r\n### SerialEvaluationSharedContextSecondRun Time (ms) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 29.8847 -> 29.7108 (-0.582%)\r\nDotnetWebProject | :white_check_mark: | yes | 37.9755 -> 37.2946 (-1.793%)\r\nDotnetMvcProject | :white_check_mark: | yes | 40.2139 -> 39.8075 (-1.011%)\r\nPicasso | :red_circle: | yes | 226.675 -> 234.3648 (3.392%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 42.4423 -> 41.8703 (-1.348%)\r\nSmallP2PNewCsproj | :white_check_mark: | yes | 134.8495 -> 131.8089 (-2.255%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 694.3975 -> 669.0949 (-3.644%)\r\nGenerated_100_100_v150 | :white_check_mark: | yes | 1161.3624 -> 1156.8389 (-0.389%)\r\nOrchardCore | :white_check_mark: | yes | 1626.9961 -> 1586.9323 (-2.462%)\r\nRoslyn | :white_check_mark: | yes | 2845.2065 -> 2688.0992 (-5.522%)\r\nWebLargeCore | :white_check_mark: | yes | 1893.4628 -> 1803.1883 (-4.768%)\r\n\r\n### SerialEvaluationSharedContextSecondRun Memory (bytes) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 5567398 -> 5543189 (-0.435%)\r\nDotnetWebProject | :white_check_mark: | yes | 6907511 -> 6890424 (-0.247%)\r\nDotnetMvcProject | :white_check_mark: | yes | 7374540 -> 7317392 (-0.775%)\r\nPicasso | :white_check_mark: | yes | 36645679 -> 11920314 (-67.471%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 6984487 -> 6944347 (-0.575%)\r\nSmallP2PNewCsproj | :white_check_mark: | yes | 23265794 -> 23074707 (-0.821%)\r\nLargeP2POldCsproj | ::ok_hand: | no | 37038440 -> 36405095 (-1.71%)\r\nGenerated_100_100_v150 | ::ok_hand: | no | 46123401 -> 45834880 (-0.626%)\r\nOrchardCore | :white_check_mark: | yes | 62708212 -> 59094350 (-5.763%)\r\nRoslyn | :red_circle: | yes | 89093238 -> 92241843 (3.534%)\r\nWebLargeCore | :white_check_mark: | yes | 80517801 -> 70285429 (-12.708%)\r\n\r\n### SerialEvaluationSharedContext Time (ms) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 34.221 -> 34.0523 (-0.493%)\r\nDotnetWebProject | :white_check_mark: | yes | 48.4864 -> 47.796 (-1.424%)\r\nDotnetMvcProject | :white_check_mark: | yes | 54.3964 -> 53.9937 (-0.74%)\r\nPicasso | :white_check_mark: | yes | 255.861 -> 231.784 (-9.41%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 46.0774 -> 45.5629 (-1.117%)\r\nSmallP2PNewCsproj | :white_check_mark: | yes | 172.136 -> 168.4795 (-2.124%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 742.3241 -> 715.3558 (-3.633%)\r\nGenerated_100_100_v150 | :white_check_mark: | yes | 1169.6608 -> 1161.3306 (-0.712%)\r\nOrchardCore | :white_check_mark: | yes | 2189.3402 -> 2129.8961 (-2.715%)\r\nRoslyn | :white_check_mark: | yes | 3365.0734 -> 3202.2046 (-4.84%)\r\nWebLargeCore | :white_check_mark: | yes | 2360.2946 -> 2254.3412 (-4.489%)\r\n\r\n### SerialEvaluationSharedContext Memory (bytes) (src\\msbuild.master vs src\\msbuild.mihai)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :white_check_mark: | yes | 5771910 -> 5748136 (-0.412%)\r\nDotnetWebProject | :white_check_mark: | yes | 7760177 -> 7732938 (-0.351%)\r\nDotnetMvcProject | :white_check_mark: | yes | 8403050 -> 8350323 (-0.627%)\r\nPicasso | :red_circle: | yes | 13871030 -> 36699319 (164.575%)\r\nSmallP2POldCsproj | :white_check_mark: | yes | 7042074 -> 7007661 (-0.489%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 13181440 -> 14484758 (9.888%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 38477350 -> 38010180 (-1.214%)\r\nGenerated_100_100_v150 | :white_check_mark: | yes | 46859250 -> 46535416 (-0.691%)\r\nOrchardCore | :red_circle: | yes | 67108262 -> 74457303 (10.951%)\r\nRoslyn | ::ok_hand: | no | 90318906 -> 88930282 (-1.537%)\r\nWebLargeCore | :ok_hand: | no | 65108334 -> 68359961 (4.994%)",
        "createdAt": "2018-07-12T20:08:58Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "In case anyone else was wondering the same thing I did (just in case):\r\n\r\nMethod | Mean | Error | StdDev | Allocated\r\n-- | -- | -- | -- | --\r\nCheckEqualUsingString | 1.676 ns | 0.0042 ns | 0.0039 ns | 0 B\r\nCheckEqualUsingNameOf | 1.723 ns | 0.0054 ns | 0.0051 ns | 0 B\r\n",
        "createdAt": "2018-07-13T05:26:13Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher My understanding is that `nameof()` is a compile-time operation that results in an embedded string. For example, https://dotnetfiddle.net/GUmkPz -- go to \"view IL\"\r\n\r\n```c#\r\nConsole.WriteLine(nameof(Main));\r\n```\r\n\r\ncompiles to\r\n\r\n```msil\r\n    IL_0001:  ldstr      \"Main\"\r\n    IL_0006:  call       void [mscorlib]System.Console::WriteLine(string)\r\n```",
        "createdAt": "2018-07-13T14:16:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I had shamefully bypassed the benchmark and just trusted this educational article: http://www.erikschierboom.com/2015/12/31/csharp6-under-the-hood-nameof/",
        "createdAt": "2018-07-13T16:07:56Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test this please",
        "createdAt": "2018-07-13T16:23:23Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test OSX10.13 Build for CoreCLR\r\n",
        "createdAt": "2018-07-13T18:27:21Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this needed for a mostly-not-called function?",
              "createdAt": "2018-07-12T18:20:24Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3476,10 +3478,27 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                     }\n                 }\n \n+                if (Traits.Instance.LogPropertyFunctionsRequiringReflection)\n+                {\n+                    LogFunctionCall(\"PropertyFunctionsRequiringReflection\", objectInstance, args);\n+                }\n+\n                 returnVal = null;\n                 return false;\n             }\n \n+            [MethodImpl(MethodImplOptions.AggressiveInlining)]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could this be done with\r\n\r\n```c#\r\nstring.Join(\", \", args?.Select(a => a?.GetType().Name ?? \"null\") ?? Array.Empty<string>);\r\n```\r\n\r\n? It tripped my have-to-think-hard-about this meter (even though I love a good map-reduce!). But I'm not sure this is that much better.",
              "createdAt": "2018-07-12T18:27:48Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3476,10 +3478,27 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                     }\n                 }\n \n+                if (Traits.Instance.LogPropertyFunctionsRequiringReflection)\n+                {\n+                    LogFunctionCall(\"PropertyFunctionsRequiringReflection\", objectInstance, args);\n+                }\n+\n                 returnVal = null;\n                 return false;\n             }\n \n+            [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+            private void LogFunctionCall(string fileName, object objectInstance, object[] args)\n+            {\n+                var logFile = Path.Combine(Directory.GetCurrentDirectory(), fileName);\n+\n+                var argSignature = args?.Aggregate(\n+                    string.Empty,\n+                    (acc, e) =>$\"{acc}{(acc.Equals(string.Empty) ? string.Empty : \", \")}{e?.GetType().Name ?? \"null\"}\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yeah, yours looks better. :)",
              "createdAt": "2018-07-12T20:14:34Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3476,10 +3478,27 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                     }\n                 }\n \n+                if (Traits.Instance.LogPropertyFunctionsRequiringReflection)\n+                {\n+                    LogFunctionCall(\"PropertyFunctionsRequiringReflection\", objectInstance, args);\n+                }\n+\n                 returnVal = null;\n                 return false;\n             }\n \n+            [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+            private void LogFunctionCall(string fileName, object objectInstance, object[] args)\n+            {\n+                var logFile = Path.Combine(Directory.GetCurrentDirectory(), fileName);\n+\n+                var argSignature = args?.Aggregate(\n+                    string.Empty,\n+                    (acc, e) =>$\"{acc}{(acc.Equals(string.Empty) ? string.Empty : \", \")}{e?.GetType().Name ?? \"null\"}\");",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nice! Can you included in the commit notes a ballpark of how often this ran? And did you test against a static but not compiled version? Compilation takes enough time that the better runtime perf isn't always a clean win :(",
              "createdAt": "2018-07-12T18:31:26Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -34,6 +34,8 @@ internal static class IntrinsicFunctions\n \n         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };\n \n+        private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\", RegexOptions.Compiled | RegexOptions.IgnoreCase));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It was called hundreds of time, so I just assumed compilation would be better at that point. I'll undo that commit and run the perf tests again, to see how it moves the needle.",
              "createdAt": "2018-07-12T20:17:07Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -34,6 +34,8 @@ internal static class IntrinsicFunctions\n \n         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };\n \n+        private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\", RegexOptions.Compiled | RegexOptions.IgnoreCase));",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "\"hundreds of times\" is enough for me :)",
              "createdAt": "2018-07-12T21:30:55Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -34,6 +34,8 @@ internal static class IntrinsicFunctions\n \n         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };\n \n+        private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\", RegexOptions.Compiled | RegexOptions.IgnoreCase));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Turns out the regex is never called at all on old and new style csprojes! So I left the static Regex, but removed the compiled flag just in case.",
              "createdAt": "2018-07-12T22:45:56Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -34,6 +34,8 @@ internal static class IntrinsicFunctions\n \n         private static readonly object[] DefaultRegistryViews = new object[] { RegistryView.Default };\n \n+        private static readonly Lazy<Regex> RegistrySdkRegex = new Lazy<Regex>(() => new Regex(@\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\", RegexOptions.Compiled | RegexOptions.IgnoreCase));",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "opportunity for \r\n\r\n```c#\r\nif (objectInstance is string text)\r\n```",
              "createdAt": "2018-07-12T18:32:16Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3316,10 +3317,77 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,\n             /// <returns>True if the well known function call binding was successful</returns>\n             private bool TryExecuteWellKnownFunction(out object returnVal, object objectInstance, object[] args)\n             {\n+                returnVal = null;\n+\n                 if (objectInstance is string)\n                 {\n                     string text = (string)objectInstance;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "My plan is to take this PR first, and rebase and re-adjust #3502, which does exactly this.\r\n",
              "createdAt": "2018-07-12T20:19:00Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3316,10 +3317,77 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,\n             /// <returns>True if the well known function call binding was successful</returns>\n             private bool TryExecuteWellKnownFunction(out object returnVal, object objectInstance, object[] args)\n             {\n+                returnVal = null;\n+\n                 if (objectInstance is string)\n                 {\n                     string text = (string)objectInstance;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you recall where this and `IsNullOrWhiteSpace` got called? I wonder if we could use `[MSBuild]::ValueOrDefault` to simplify the invocations.",
              "createdAt": "2018-07-12T18:37:10Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3416,7 +3484,26 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                 }\n                 else if (objectInstance == null)\n                 {\n-                    if (_receiverType == typeof(Math))\n+                    if (_receiverType == typeof(string))\n+                    {\n+                        if (string.Equals(_methodMethodName, nameof(string.IsNullOrWhiteSpace), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (TryGetArg(args, out string arg0))\n+                            {\n+                                returnVal = string.IsNullOrWhiteSpace(arg0);\n+                                return true;\n+                            }\n+                        }\n+                        else if (string.Equals(_methodMethodName, nameof(string.IsNullOrEmpty), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sadly the Expander.Function object does not know the IElementLocation. But for experimentation's sake I'll pipe the location down and log it.",
              "createdAt": "2018-07-12T20:22:21Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3416,7 +3484,26 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                 }\n                 else if (objectInstance == null)\n                 {\n-                    if (_receiverType == typeof(Math))\n+                    if (_receiverType == typeof(string))\n+                    {\n+                        if (string.Equals(_methodMethodName, nameof(string.IsNullOrWhiteSpace), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (TryGetArg(args, out string arg0))\n+                            {\n+                                returnVal = string.IsNullOrWhiteSpace(arg0);\n+                                return true;\n+                            }\n+                        }\n+                        else if (string.Equals(_methodMethodName, nameof(string.IsNullOrEmpty), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Could also just grep through a preprocessed project or two; I don't feel super strongly about this.",
              "createdAt": "2018-07-12T21:30:35Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3416,7 +3484,26 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                 }\n                 else if (objectInstance == null)\n                 {\n-                    if (_receiverType == typeof(Math))\n+                    if (_receiverType == typeof(string))\n+                    {\n+                        if (string.Equals(_methodMethodName, nameof(string.IsNullOrWhiteSpace), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (TryGetArg(args, out string arg0))\n+                            {\n+                                returnVal = string.IsNullOrWhiteSpace(arg0);\n+                                return true;\n+                            }\n+                        }\n+                        else if (string.Equals(_methodMethodName, nameof(string.IsNullOrEmpty), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Apparently it wasn't very hard to tweak the code to print the location. Sadly the callsites cannot be converted to `[MSBuild]::ValueOrDefault`:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L75\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5998\r\n\r\n",
              "createdAt": "2018-07-13T00:00:21Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3416,7 +3484,26 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                 }\n                 else if (objectInstance == null)\n                 {\n-                    if (_receiverType == typeof(Math))\n+                    if (_receiverType == typeof(string))\n+                    {\n+                        if (string.Equals(_methodMethodName, nameof(string.IsNullOrWhiteSpace), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (TryGetArg(args, out string arg0))\n+                            {\n+                                returnVal = string.IsNullOrWhiteSpace(arg0);\n+                                return true;\n+                            }\n+                        }\n+                        else if (string.Equals(_methodMethodName, nameof(string.IsNullOrEmpty), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[citation needed] :)",
              "createdAt": "2018-07-12T18:38:54Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3476,27 +3620,201 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                             }\n                         }\n                     }\n+                    else if (_receiverType == typeof(Path))\n+                    {\n+                        if (string.Equals(_methodMethodName, nameof(Path.Combine), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            string arg0, arg1, arg2, arg3;\n+\n+                            // Combine has fast implementations for up to 4 parameters.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the advantage of `ArraySegment`? I don't think I've used it before.",
              "createdAt": "2018-07-12T18:43:57Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -177,29 +179,36 @@ internal static object GetRegistryValue(string keyName, string valueName, object\n             return Registry.GetValue(keyName, valueName, defaultValue);\n         }\n \n+        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)\n+        {\n+            if (views == null || views.Length == 0)\n+            {\n+                views = DefaultRegistryViews;\n+            }\n+\n+            return GetRegistryValueFromView(keyName, valueName, defaultValue, new ArraySegment<object>(views));\n+        }\n+\n+\n         /// <summary>\n         /// Get the value of the registry key from one of the RegistryView's specified\n         /// </summary>\n-        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)\n+        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, ArraySegment<object> views)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's like Span and Memory, but from the distant net46 past. Provides views over arrays without memcpy",
              "createdAt": "2018-07-12T20:23:54Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -177,29 +179,36 @@ internal static object GetRegistryValue(string keyName, string valueName, object\n             return Registry.GetValue(keyName, valueName, defaultValue);\n         }\n \n+        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)\n+        {\n+            if (views == null || views.Length == 0)\n+            {\n+                views = DefaultRegistryViews;\n+            }\n+\n+            return GetRegistryValueFromView(keyName, valueName, defaultValue, new ArraySegment<object>(views));\n+        }\n+\n+\n         /// <summary>\n         /// Get the value of the registry key from one of the RegistryView's specified\n         /// </summary>\n-        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, params object[] views)\n+        internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, ArraySegment<object> views)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}