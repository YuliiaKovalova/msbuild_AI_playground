{
  "number": 11611,
  "title": "`/documentation/specs/*.md` formatting/linting/cleanup",
  "body": "### Context\r\n\r\nI noticed some easy-to-fix inconsistencies in some markdown files that I was viewing.\r\n\r\n### Changes Made\r\n\r\nFix spacing around headers, unordered list style, declare a language on fenced code blocks, and similar issues.\r\n\r\n### Testing\r\n\r\nN/A\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-03-20T12:16:17Z",
  "updatedAt": "2025-03-27T18:59:57Z",
  "closedAt": "2025-03-27T18:59:57Z",
  "mergedAt": "2025-03-27T18:59:57Z",
  "additions": 187,
  "deletions": 107,
  "changedFiles": 11,
  "headRefName": "docs-cleanup",
  "isDraft": false,
  "author": {
    "login": "BenjaminBrienen"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6d1aca2cfdcc52beb356663cbdddcb89cacb337e",
          "message": "markdown in documentation/specs formatting/linting/cleanup",
          "committedDate": "2025-03-20T12:13:37Z",
          "author": {
            "name": "Benjamin Brienen",
            "email": "Benjamin.Brienen.external@cpp.canon"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Missing `|` in table row",
              "createdAt": "2025-03-20T12:17:02Z",
              "path": "documentation/specs/event-source.md",
              "diffHunk": "@@ -20,7 +21,7 @@ EventSource is primarily used to profile code. For MSBuild specifically, a major\n | ExecuteTaskYield | Requests to yield the node, often while the task completes other work. |\n | ExpandGlob | Identifies a list of files that correspond to an item, potentially with a wildcard. |\n | GenerateResourceOverall | Uses resource APIs to transform resource files into strongly-typed resource classes. |\n-| LoadDocument | Loads an XMLDocumentWithLocation from a path.\n+| LoadDocument | Loads an XMLDocumentWithLocation from a path. |",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Lists should be seperated by a newline",
              "createdAt": "2025-03-20T12:17:27Z",
              "path": "documentation/specs/low-priority-switch.md",
              "diffHunk": "@@ -27,6 +26,7 @@ Perfect parity between windows and mac or linux. Windows permits processes to ra\n Each node (including worker nodes) initially takes its priority from its parent process. Since we now need the priority to align with what it is passed instead of its parent, attempt to adjust priority afterwards if necessary as part of node startup.\n \n BuildManager.cs remembers the priority of the previous build it had executed. If that was set to a value that differs from the priority of the current build:\n+",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "All the other markdown files declare the header like this. Also, this helps with having only one h1 per file.",
              "createdAt": "2025-03-20T12:18:14Z",
              "path": "documentation/specs/project-cache.md",
              "diffHunk": "@@ -1,40 +1,44 @@\n-# Summary\n+# Project Cache",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Changed the indentation of this code block so that it is nested under the bullet point",
              "createdAt": "2025-03-20T12:18:35Z",
              "path": "documentation/specs/project-cache.md",
              "diffHunk": "@@ -1,40 +1,44 @@\n-# Summary\n+# Project Cache\n+\n+## Summary\n \n Project cache is a new assembly-based plugin extension point in MSBuild which determines whether a build request (a project) can be skipped during build. The main expected benefit is reduced build times via [caching and/or distribution](static-graph.md#weakness-of-the-old-model-caching-and-distributability).\n \n-# Motivation\n+## Motivation\n \n As the introduction to [static graph](static-graph.md#what-is-static-graph-for) suggests, large and complex repos expose the weaknesses in MSBuild's scheduling and incrementality models as build times elongate. This project cache plugin lets MSBuild natively communicate with existing tools that enable build caching and/or distribution, enabling true scalability.\n \n Visual Studio is one beneficiary. This plugin inverts dependencies among build systems: instead of higher level build engines ([Cloudbuild](https://www.microsoft.com/research/publication/cloudbuild-microsofts-distributed-and-caching-build-service/), [Anybuild](https://github.com/AnyBuild/AnyBuild), [BuildXL](https://github.com/microsoft/BuildXL), etc) calling into MSBuild, MSBuild calls into them, keeping MSBuild's external APIs and command line arguments largely unchanged and thus reusable by Visual Studio.\n \n This change also simplifies and unifies user experiences. MSBuild works the same from Visual Studio or the command line without dramatically changing how it works.\n \n-# Plugin requirements\n+## Plugin requirements\n \n - The plugin should tell MSBuild whether a build request needs building. If a project is skipped, then the plugin needs to ensure that:\n   - it makes the filesystem look as if the project built\n   - it returns sufficient information back to MSBuild such that MSBuild can construct a valid [`BuildResult`](/src/Build/BackEnd/Shared/BuildResult.cs#L30-L33) for its internal scheduling logic, such that future requests to build a skipped project are served directly from MSBuild's internal caches.\n \n-# High-level design\n+## High-level design\n \n Conceptually, there are two parts of caching: \"cache get\" and \"cache add\". \"Cache get\" is MSBuild asking the plugin if it wants to handle a build request, ie by fetching from some cache. \"Cache add\" is, upon cache miss, MSBuild providing enough information to the plugin during the build of the build request for the plugin to add the results to its cache and safely be able to retrieve it for some future build.\n \n The \"cache get\" functionality was introduced in 16.9, while \"cache add\" was added in 17.8.\n \n-## Plugin discovery\n+### Plugin discovery\n \n - Plugin dlls are discovered by MSBuild via a new special purpose `ProjectCachePlugin` [items](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items).\n   - These items can get injected into a project's import graph by package managers via the [PackageReference](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files) item.\n   - MSBuild will discover the plugin by searching project evaluations for `ProjectCachePlugin` items.\n-```xml\n-<ItemGroup>\n-  <ProjectCachePlugin Include=\"$(SomePath)\\MyAmazingCachePlugin.dll\" />\n-</ItemGroup>\n-```\n+\n+    ```xml",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Fixed leading whitespace",
              "createdAt": "2025-03-20T12:19:22Z",
              "path": "documentation/specs/project-cache.md",
              "diffHunk": "@@ -168,22 +174,24 @@ In our example, we can use the read files to construct a fingerprint for the bui\n The plugin would then create some metadata describing the outputs (eg. the paths and hashes) and the serialized `BuildResult`, and associate it with the fingerprint and put that assocation in the cache.\n \n To illustrate this, consider a project with fingerprint `F` which wrote a single file `O` with hash `H` and had `BuildResult R`. The plugin could create a metadata file `M` which describes the outputs of the build (the path and hash of `O`) as well as the serialized `R`. Using the cache implementation described above, the plugin would write the following two files to the cache:\n- - `metadata/F -> M:\"{outputs: [{path: 'path/to/O', hash: H}], result: R}\"`\n- - `content/H -> O`\n+\n+- `metadata/F -> M:\"{outputs: [{path: 'path/to/O', hash: H}], result: R}\"`\n+- `content/H -> O`\n \n This can then be used for future builds.\n \n- ## Second Build (cache hits)\n- \n- In the second build we have a populated cache and so it could be possible to get cache hits.\n+### Second Build (cache hits)\n \n- For a given project, `GetCacheResultAsync` will be invoked. The plugin can fingerprint the request and use that fingerprint to look up in its cache. If the cache entry exists, it can declare a cache hit.\n+In the second build we have a populated cache and so it could be possible to get cache hits.",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Added missing language specifiers for consistency and for the syntax highlighting",
              "createdAt": "2025-03-20T12:20:01Z",
              "path": "documentation/specs/remote-host-object.md",
              "diffHunk": "@@ -4,8 +4,9 @@ A remote host object must be registered in the [Running Object Table (ROT)](http\n \n [The registration of interfaces](https://docs.microsoft.com/en-us/dotnet/framework/interop/how-to-register-primary-interop-assemblies) is the only thing interop with COM that need extra care. There are 3 interfaces involved in out-of-proc tasks work: `IVsMSBuildTaskFileManager`, `IPersistFileCheckSum` and `ITaskHost`. `IVsMSBuildTaskFileManager` and `IPersistFileCheckSum` are registered globally in Windows registry by VS existing setup. `ITaskHost` is also configured in VS using registration-free. So the only work is to configure it using registration-free in **MSBuild**. That results the change in msbuild.exe.manifest file and the change to generate tlb file for ITaskHost.\n \n-## Annotated additions to the msbuild.exe.manifest file.\n-```\n+## Annotated additions to the msbuild.exe.manifest file\n+\n+```xml",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For consistency with other files",
              "createdAt": "2025-03-20T12:21:18Z",
              "path": "documentation/specs/single-project-isolated-builds.md",
              "diffHunk": "@@ -19,25 +19,27 @@ In a build, the input and output cache files have the same lifetime as the `Conf\n <!-- constraints -->\n \n When loading input cache files, MSBuild merges incoming instances of `ConfigCache`s and `ResultsCache`s into one instance of each with the help of the [`CacheAggregator`](https://github.com/dotnet/msbuild/blob/51df47643a8ee2715ac67fab8d652b25be070cd2/src/Build/BackEnd/BuildManager/CacheAggregator.cs#L15), which enforces the following constraints:\n+\n - No duplicate cache entries\n - Bijection:\n-   - `ConfigCache.Entries.Size == ResultsCache.Entries.Size`\n-   - `BuildResult.ConfigurationId` == `BuildRequestConfiguration.ConfigurationId`\n+  - `ConfigCache.Entries.Size == ResultsCache.Entries.Size`\n+  - `BuildResult.ConfigurationId == BuildRequestConfiguration.ConfigurationId`\n \n Note that the output cache file contains a single `BuildResult` with the `TargetResult`s from the project specified to be built in the `BeginBuild` / `EndBuild` session, as any `BuildResult`s obtained through isolation exemption are excluded to prevent potential duplicate input cache entries; Entries from input caches are not transferred to the output cache.\n \n <!-- How input / output cache entries are separated with the override caches -->\n-Input cache entries are separated from output cache entries with the composite caches [`ConfigCacheWithOverride`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs) and [`ResultsCacheWithOverride`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs). Each composite cache contains two underlying caches: a cache where input caches files are loaded into (the override cache), and a cache where new results are written into (the current cache).* In the `ConfigCacheWithOverride`, these caches are instances of `ConfigCache`s and, in the `ResultsCacheWithOverride`, these caches are instances of `ResultsCache`s. A query for a cache entry is first attempted from the override cache and, if unsatisfied, a second attempt is made from the current cache. Writes are only written to the current cache, never into the override cache.* It is illegal for both the current cache and override cache to contain entries for the same project configuration, a constraint that is checked by the two override caches on each cache query.\n+Input cache entries are separated from output cache entries with the composite caches [`ConfigCacheWithOverride`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs) and [`ResultsCacheWithOverride`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs). Each composite cache contains two underlying caches: a cache where input caches files are loaded into (the override cache), and a cache where new results are written into (the current cache). *In the `ConfigCacheWithOverride`, these caches are instances of `ConfigCache`s and, in the `ResultsCacheWithOverride`, these caches are instances of `ResultsCache`s. A query for a cache entry is first attempted from the override cache and, if unsatisfied, a second attempt is made from the current cache. Writes are only written to the current cache, never into the override cache.* It is illegal for both the current cache and override cache to contain entries for the same project configuration, a constraint that is checked by the two override caches on each cache query.\n \n ## Isolation Implementation\n \n [Isolation constraints](static-graph.md##single-project-isolated-builds) are implemented in the `Scheduler` and  `TaskBuilder`. [`TaskBuilder.ExecuteInstantiatedTask`](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L743) ensures that the `MSBuild` task is only called on projects declared in a `ProjectReference` item. [`Scheduler.CheckIfCacheMissOnReferencedProjectIsAllowedAndErrorIfNot`](https://github.com/dotnet/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L1818) ensures that all `MSBuild` tasks are cache hits.\n \n ### Isolation Exemption\n+\n The `Scheduler` [skips isolation constraints](static-graph.md#exempting-references-from-isolation-constraints) on project references via the:\n \n-* `GraphIsolationExemptReference` item. The `RequestBuilder` sets the `SkipStaticGraphIsolationConstraints` property of a `BuildRequest` to `true` if the `RequestBuilder` matches it against a `GraphIsolationExemptReference` item defined in the calling project. Additionally, the `RequestBuilder` marks the `BuildRequest`'s corresponding `BuildRequestConfiguration` as exempt to allow the `TaskBuilder` to verify exemption from isolation constraints.\n+- `GraphIsolationExemptReference` item. The `RequestBuilder` sets the `SkipStaticGraphIsolationConstraints` property of a `BuildRequest` to `true` if the `RequestBuilder` matches it against a `GraphIsolationExemptReference` item defined in the calling project. Additionally, the `RequestBuilder` marks the `BuildRequest`'s corresponding `BuildRequestConfiguration` as exempt to allow the `TaskBuilder` to verify exemption from isolation constraints.\n \n-* `isolate:MessageUponIsolationViolation` switch. The `RequestBuilder` sets the `SkipStaticGraphIsolationConstraints` property of _every_ `BuildRequest` to `true`. The `TaskBuilder` verifies exemption from isolation constraints just by the switch value.",
              "author": {
                "login": "BenjaminBrienen"
              }
            }
          ]
        }
      }
    ]
  }
}