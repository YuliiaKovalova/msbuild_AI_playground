{
  "number": 7085,
  "title": "Remove locking and indirection from CopyOnWritePropertyDictionary",
  "body": "### Context\r\n\r\nSome more optimisation of collection types, focussing on  `CopyOnWritePropertyDictionary<>`.\r\n\r\n### Changes Made\r\n\r\nPreviously, `CopyOnWritePropertyDictionary<>` wrapped a  `CopyOnWriteDictionary<>` which in turn wrapped an `ImmutableDictionary<>`.\r\n\r\nThat middle layer is redundant. Removing it reduces allocations, reduces indirection, replaces virtual calls with non-virtual ones, and allows for more optimal construction of the inner data structures.\r\n\r\nBy using `ImmutableDictionary<>` directly in `CopyOnWritePropertyDictionary<>` it's possible to remove all locking from the class entirely.\r\n\r\nOther changes:\r\n\r\n- Remove unused and obsolete members\r\n- Add unit tests (which pass both before and after the core change here)\r\n\r\nIt may be easiest to review this PR commit by commit.\r\n\r\n### Testing\r\n\r\nUnit tests.",
  "state": "MERGED",
  "createdAt": "2021-11-25T00:52:02Z",
  "updatedAt": "2021-12-02T20:41:40Z",
  "closedAt": "2021-12-02T20:18:10Z",
  "mergedAt": "2021-12-02T20:18:10Z",
  "additions": 266,
  "deletions": 224,
  "changedFiles": 4,
  "headRefName": "dev/drnoakes/remove-collection-locking",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "81f337163973d44f08c77aa9940e7596d846429a",
          "message": "Remove unused members",
          "committedDate": "2021-11-28T22:33:55Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce5e662d65ba265400b3ebb6737c04bec45a975e",
          "message": "Delete obsolete 'Remove' method\n\nThe `clearIfEmpty` flag has no effect. If `Count` is zero, then calling `Clear` is a no-op. Remove the flag altogether, merging this into its overload.",
          "committedDate": "2021-11-28T22:33:55Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dcf2a8dc51d288386be09f63ae21a65a825ffac3",
          "message": "Remove explicit interface implementations",
          "committedDate": "2021-11-28T22:33:55Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d158d765d30ede29388da26761307d386a71bb6e",
          "message": "Add CopyOnWritePropertyDictionary unit tests",
          "committedDate": "2021-11-28T22:33:56Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63f49bdae4629e4dcd34b8cc2b97cdcf86e82304",
          "message": "Move other shared unit tests in Collections folder",
          "committedDate": "2021-11-28T22:33:56Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74b756fc7197418dd1a29683effe1df70f97d52d",
          "message": "Remove locking from CopyOnWritePropertyDictionary<>\n\nThis commit removes all `Monitor`-based locking from `CopyOnWritePropertyDictionary<>`.\n\nTo achieve this, the backing store has been changed from `CopyOnWriteDictionary<T>` to `ImmutableDictionary<string, T>`. Note that the former was just a thin wrapper around the latter, so this change inlines a layer of indirection.\n\nWith the immutable collection available in scope, the members of this type can be implemented so that locking is not needed.",
          "committedDate": "2021-11-28T22:33:56Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "36fccd01e18ea98afb81f7f0a887f0966fae0cb8",
          "message": "Use Shoudly for test assertions",
          "committedDate": "2021-11-28T22:33:57Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thank you! Would you mind switching the new unit tests to use `Shouldly` for assertions? It's preferred for new tests.",
        "createdAt": "2021-11-26T08:48:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Thank you! Would you mind switching the new unit tests to use `Shouldly` for assertions? It's preferred for new tests.\r\n\r\nSure, done. Also rebased to address conflict.\r\n\r\nI should say that longer term I think it's possible to reduce allocations in the COW code. The use of `ImmutableDictionary` there is resulting in a lot of internal support objects being allocated. It appears to be the #4 allocated object by type:\r\n\r\n![image](https://user-images.githubusercontent.com/350947/143789595-9b83870c-cbf2-4003-b52b-44163b43ea08.png)\r\n\r\nDrilling in, nearly all of those appear to be coming from `CopyOnWritePropertyDictionary`. This PR won't directly reduce that (instances of `COWPD` come much lower). I estimate from this dump in the screenshot that this PR would save around 3MB and 265k allocations.\r\n\r\nWe have some experience and patterns for improving this in CPS/.NET Project System, and I'd like to experiment with using them in MSBuild. This PR is a first step towards that.\r\n\r\nLet me know if you have other plans or concerns with the above.",
        "createdAt": "2021-11-28T22:57:34Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Understanding check: T is expected to be a KVP from propertyName to propertyValue? That seems a little wasteful.",
              "createdAt": "2021-11-29T03:00:17Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -247,25 +147,29 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n                 return false;\n             }\n \n-            if (ReferenceEquals(this, other))\n+            // Copy both backing collections to locals \n+            ImmutableDictionary<string, T> thisBacking = _backing;\n+            ImmutableDictionary<string, T> thatBacking = other._backing;\n+\n+            // If the backing collections are the same, we are equal.\n+            // Note that with this check, we intentionally avoid the common reference\n+            // comparison between 'this' and 'other'.\n+            if (ReferenceEquals(thisBacking, thatBacking))\n             {\n                 return true;\n             }\n \n-            if (Count != other.Count)\n+            if (thisBacking.Count != thatBacking.Count)\n             {\n                 return false;\n             }\n \n-            lock (_properties)\n+            foreach (T thisProp in thisBacking.Values)\n             {\n-                foreach (T leftProp in this)\n+                if (!thatBacking.TryGetValue(thisProp.Key, out T thatProp) ||",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Check the type constraints on `T` here. The `CopyOnWritePropertyDictionary` adds these, compared to `CopyOnWriteDictionary`. The idea is that each item provides its key, so operations don't need to pass a key. In fact those operations which do (for eg. `IDictionary<string, T>` support) validate that the value's key matches the specified key.",
              "createdAt": "2021-12-01T01:56:25Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -247,25 +147,29 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n                 return false;\n             }\n \n-            if (ReferenceEquals(this, other))\n+            // Copy both backing collections to locals \n+            ImmutableDictionary<string, T> thisBacking = _backing;\n+            ImmutableDictionary<string, T> thatBacking = other._backing;\n+\n+            // If the backing collections are the same, we are equal.\n+            // Note that with this check, we intentionally avoid the common reference\n+            // comparison between 'this' and 'other'.\n+            if (ReferenceEquals(thisBacking, thatBacking))\n             {\n                 return true;\n             }\n \n-            if (Count != other.Count)\n+            if (thisBacking.Count != thatBacking.Count)\n             {\n                 return false;\n             }\n \n-            lock (_properties)\n+            foreach (T thisProp in thisBacking.Values)\n             {\n-                foreach (T leftProp in this)\n+                if (!thatBacking.TryGetValue(thisProp.Key, out T thatProp) ||",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did these other functions exist if they weren't used anyway?",
              "createdAt": "2021-11-29T14:56:22Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -19,118 +21,64 @@ namespace Microsoft.Build.Collections\n     /// </summary>\n     /// <remarks>\n     /// The value that this adds over IDictionary&lt;string, T&gt; is:\n+    ///     - supports copy on write\n     ///     - enforces that key = T.Name\n     ///     - default enumerator is over values\n     ///     - (marginal) enforces the correct key comparer\n-    ///     - potentially makes copy on write possible\n     /// \n     /// Really a Dictionary&lt;string, T&gt; where the key (the name) is obtained from IKeyed.Key.\n     /// Is not observable, so if clients wish to observe modifications they must mediate them themselves and \n     /// either not expose this collection or expose it through a readonly wrapper.\n     ///\n-    /// At various places in this class locks are taken on the backing collection.  The reason for this is to allow\n-    /// this class to be asynchronously enumerated.  This is accomplished by the CopyOnReadEnumerable which will \n-    /// lock the backing collection when it does its deep cloning.  This prevents asynchronous access from corrupting\n-    /// the state of the enumeration until the collection has been fully copied.\n-    ///\n-    /// The use of a CopyOnWriteDictionary does not reduce the concurrency of this collection, because CopyOnWriteDictionary\n-    /// offers the same concurrency guarantees (concurrent readers OR single writer) for EACH user of the dictionary.\n-    /// \n-    /// Since we use the mutable ignore case comparer we need to make sure that we lock our self before we call the comparer since the comparer can call back \n-    /// into this dictionary which could cause a deadlock if another thread is also accessing another method in the dictionary.\n+    /// This collection is safe for concurrent readers and a single writer.\n     /// </remarks>\n     /// <typeparam name=\"T\">Property or Metadata class type to store</typeparam>\n     [DebuggerDisplay(\"#Entries={Count}\")]\n     internal sealed class CopyOnWritePropertyDictionary<T> : IEnumerable<T>, IEquatable<CopyOnWritePropertyDictionary<T>>, IDictionary<string, T>\n         where T : class, IKeyed, IValued, IEquatable<T>, IImmutable\n     {\n+        private static readonly ImmutableDictionary<string, T> NameComparerDictionaryPrototype = ImmutableDictionary.Create<string, T>(MSBuildNameIgnoreCaseComparer.Default);\n+\n         /// <summary>\n         /// Backing dictionary\n         /// </summary>\n-        private readonly CopyOnWriteDictionary<T> _properties;\n+        private ImmutableDictionary<string, T> _backing;\n \n         /// <summary>\n         /// Creates empty dictionary\n         /// </summary>\n         public CopyOnWritePropertyDictionary()\n         {\n-            // Tracing.Record(\"New COWD1\");\n-            _properties = new CopyOnWriteDictionary<T>(MSBuildNameIgnoreCaseComparer.Default);\n+            _backing = NameComparerDictionaryPrototype;\n         }\n \n         /// <summary>\n         /// Cloning constructor, with deferred cloning semantics\n         /// </summary>\n         private CopyOnWritePropertyDictionary(CopyOnWritePropertyDictionary<T> that)\n         {\n-            _properties = that._properties.Clone(); // copy on write!\n+            _backing = that._backing;\n         }\n \n         /// <summary>\n         /// Accessor for the list of property names\n         /// </summary>\n-        ICollection<string> IDictionary<string, T>.Keys => PropertyNames;\n+        ICollection<string> IDictionary<string, T>.Keys => ((IDictionary<string, T>)_backing).Keys;\n \n         /// <summary>\n         /// Accessor for the list of properties\n         /// </summary>\n-        ICollection<T> IDictionary<string, T>.Values\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Values;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Returns the number of properties in the collection\n-        /// </summary>\n-        int ICollection<KeyValuePair<string, T>>.Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n+        ICollection<T> IDictionary<string, T>.Values => ((IDictionary<string, T>)_backing).Values;\n \n         /// <summary>\n         /// Whether the collection is read-only.\n         /// </summary>\n         bool ICollection<KeyValuePair<string, T>>.IsReadOnly => false;\n \n         /// <summary>\n-        /// Returns the number of property in the collection.\n+        /// Returns the number of properties in the collection.\n         /// </summary>\n-        internal int Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Retrieves a collection containing the names of all the properties present in the dictionary.\n-        /// </summary>\n-        internal ICollection<string> PropertyNames",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "My assumption is that usage was removed.\r\n\r\nA question though, are there reasons it's unsafe to remove unused `internal` code? The IVTs look ok to me, but it'd be good to know for sure.",
              "createdAt": "2021-12-01T01:57:22Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -19,118 +21,64 @@ namespace Microsoft.Build.Collections\n     /// </summary>\n     /// <remarks>\n     /// The value that this adds over IDictionary&lt;string, T&gt; is:\n+    ///     - supports copy on write\n     ///     - enforces that key = T.Name\n     ///     - default enumerator is over values\n     ///     - (marginal) enforces the correct key comparer\n-    ///     - potentially makes copy on write possible\n     /// \n     /// Really a Dictionary&lt;string, T&gt; where the key (the name) is obtained from IKeyed.Key.\n     /// Is not observable, so if clients wish to observe modifications they must mediate them themselves and \n     /// either not expose this collection or expose it through a readonly wrapper.\n     ///\n-    /// At various places in this class locks are taken on the backing collection.  The reason for this is to allow\n-    /// this class to be asynchronously enumerated.  This is accomplished by the CopyOnReadEnumerable which will \n-    /// lock the backing collection when it does its deep cloning.  This prevents asynchronous access from corrupting\n-    /// the state of the enumeration until the collection has been fully copied.\n-    ///\n-    /// The use of a CopyOnWriteDictionary does not reduce the concurrency of this collection, because CopyOnWriteDictionary\n-    /// offers the same concurrency guarantees (concurrent readers OR single writer) for EACH user of the dictionary.\n-    /// \n-    /// Since we use the mutable ignore case comparer we need to make sure that we lock our self before we call the comparer since the comparer can call back \n-    /// into this dictionary which could cause a deadlock if another thread is also accessing another method in the dictionary.\n+    /// This collection is safe for concurrent readers and a single writer.\n     /// </remarks>\n     /// <typeparam name=\"T\">Property or Metadata class type to store</typeparam>\n     [DebuggerDisplay(\"#Entries={Count}\")]\n     internal sealed class CopyOnWritePropertyDictionary<T> : IEnumerable<T>, IEquatable<CopyOnWritePropertyDictionary<T>>, IDictionary<string, T>\n         where T : class, IKeyed, IValued, IEquatable<T>, IImmutable\n     {\n+        private static readonly ImmutableDictionary<string, T> NameComparerDictionaryPrototype = ImmutableDictionary.Create<string, T>(MSBuildNameIgnoreCaseComparer.Default);\n+\n         /// <summary>\n         /// Backing dictionary\n         /// </summary>\n-        private readonly CopyOnWriteDictionary<T> _properties;\n+        private ImmutableDictionary<string, T> _backing;\n \n         /// <summary>\n         /// Creates empty dictionary\n         /// </summary>\n         public CopyOnWritePropertyDictionary()\n         {\n-            // Tracing.Record(\"New COWD1\");\n-            _properties = new CopyOnWriteDictionary<T>(MSBuildNameIgnoreCaseComparer.Default);\n+            _backing = NameComparerDictionaryPrototype;\n         }\n \n         /// <summary>\n         /// Cloning constructor, with deferred cloning semantics\n         /// </summary>\n         private CopyOnWritePropertyDictionary(CopyOnWritePropertyDictionary<T> that)\n         {\n-            _properties = that._properties.Clone(); // copy on write!\n+            _backing = that._backing;\n         }\n \n         /// <summary>\n         /// Accessor for the list of property names\n         /// </summary>\n-        ICollection<string> IDictionary<string, T>.Keys => PropertyNames;\n+        ICollection<string> IDictionary<string, T>.Keys => ((IDictionary<string, T>)_backing).Keys;\n \n         /// <summary>\n         /// Accessor for the list of properties\n         /// </summary>\n-        ICollection<T> IDictionary<string, T>.Values\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Values;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Returns the number of properties in the collection\n-        /// </summary>\n-        int ICollection<KeyValuePair<string, T>>.Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n+        ICollection<T> IDictionary<string, T>.Values => ((IDictionary<string, T>)_backing).Values;\n \n         /// <summary>\n         /// Whether the collection is read-only.\n         /// </summary>\n         bool ICollection<KeyValuePair<string, T>>.IsReadOnly => false;\n \n         /// <summary>\n-        /// Returns the number of property in the collection.\n+        /// Returns the number of properties in the collection.\n         /// </summary>\n-        internal int Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Retrieves a collection containing the names of all the properties present in the dictionary.\n-        /// </summary>\n-        internal ICollection<string> PropertyNames",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "AFAIK the only IVTs we have are to assemblies in this repo, so if everything here works it should be fine.",
              "createdAt": "2021-12-01T14:49:02Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -19,118 +21,64 @@ namespace Microsoft.Build.Collections\n     /// </summary>\n     /// <remarks>\n     /// The value that this adds over IDictionary&lt;string, T&gt; is:\n+    ///     - supports copy on write\n     ///     - enforces that key = T.Name\n     ///     - default enumerator is over values\n     ///     - (marginal) enforces the correct key comparer\n-    ///     - potentially makes copy on write possible\n     /// \n     /// Really a Dictionary&lt;string, T&gt; where the key (the name) is obtained from IKeyed.Key.\n     /// Is not observable, so if clients wish to observe modifications they must mediate them themselves and \n     /// either not expose this collection or expose it through a readonly wrapper.\n     ///\n-    /// At various places in this class locks are taken on the backing collection.  The reason for this is to allow\n-    /// this class to be asynchronously enumerated.  This is accomplished by the CopyOnReadEnumerable which will \n-    /// lock the backing collection when it does its deep cloning.  This prevents asynchronous access from corrupting\n-    /// the state of the enumeration until the collection has been fully copied.\n-    ///\n-    /// The use of a CopyOnWriteDictionary does not reduce the concurrency of this collection, because CopyOnWriteDictionary\n-    /// offers the same concurrency guarantees (concurrent readers OR single writer) for EACH user of the dictionary.\n-    /// \n-    /// Since we use the mutable ignore case comparer we need to make sure that we lock our self before we call the comparer since the comparer can call back \n-    /// into this dictionary which could cause a deadlock if another thread is also accessing another method in the dictionary.\n+    /// This collection is safe for concurrent readers and a single writer.\n     /// </remarks>\n     /// <typeparam name=\"T\">Property or Metadata class type to store</typeparam>\n     [DebuggerDisplay(\"#Entries={Count}\")]\n     internal sealed class CopyOnWritePropertyDictionary<T> : IEnumerable<T>, IEquatable<CopyOnWritePropertyDictionary<T>>, IDictionary<string, T>\n         where T : class, IKeyed, IValued, IEquatable<T>, IImmutable\n     {\n+        private static readonly ImmutableDictionary<string, T> NameComparerDictionaryPrototype = ImmutableDictionary.Create<string, T>(MSBuildNameIgnoreCaseComparer.Default);\n+\n         /// <summary>\n         /// Backing dictionary\n         /// </summary>\n-        private readonly CopyOnWriteDictionary<T> _properties;\n+        private ImmutableDictionary<string, T> _backing;\n \n         /// <summary>\n         /// Creates empty dictionary\n         /// </summary>\n         public CopyOnWritePropertyDictionary()\n         {\n-            // Tracing.Record(\"New COWD1\");\n-            _properties = new CopyOnWriteDictionary<T>(MSBuildNameIgnoreCaseComparer.Default);\n+            _backing = NameComparerDictionaryPrototype;\n         }\n \n         /// <summary>\n         /// Cloning constructor, with deferred cloning semantics\n         /// </summary>\n         private CopyOnWritePropertyDictionary(CopyOnWritePropertyDictionary<T> that)\n         {\n-            _properties = that._properties.Clone(); // copy on write!\n+            _backing = that._backing;\n         }\n \n         /// <summary>\n         /// Accessor for the list of property names\n         /// </summary>\n-        ICollection<string> IDictionary<string, T>.Keys => PropertyNames;\n+        ICollection<string> IDictionary<string, T>.Keys => ((IDictionary<string, T>)_backing).Keys;\n \n         /// <summary>\n         /// Accessor for the list of properties\n         /// </summary>\n-        ICollection<T> IDictionary<string, T>.Values\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Values;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Returns the number of properties in the collection\n-        /// </summary>\n-        int ICollection<KeyValuePair<string, T>>.Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n+        ICollection<T> IDictionary<string, T>.Values => ((IDictionary<string, T>)_backing).Values;\n \n         /// <summary>\n         /// Whether the collection is read-only.\n         /// </summary>\n         bool ICollection<KeyValuePair<string, T>>.IsReadOnly => false;\n \n         /// <summary>\n-        /// Returns the number of property in the collection.\n+        /// Returns the number of properties in the collection.\n         /// </summary>\n-        internal int Count\n-        {\n-            get\n-            {\n-                lock (_properties)\n-                {\n-                    return _properties.Count;\n-                }\n-            }\n-        }\n-\n-        /// <summary>\n-        /// Retrieves a collection containing the names of all the properties present in the dictionary.\n-        /// </summary>\n-        internal ICollection<string> PropertyNames",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}