{
  "number": 9094,
  "title": "Fix console mode",
  "body": "Fixes #9079\r\n\r\n### Context\r\nFirst stab at taking into account console mode when writing error messages as part of a user asking for a particular property/item/target result. If we can't verify that the console is VT-compatible, we fall back to just printing things out with their default coloration. (Though not perfect, I think this is an unimportant enough scenario, that I don't think it's worth worrying about.)\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-08-02T00:05:28Z",
  "updatedAt": "2023-09-12T22:09:27Z",
  "closedAt": "2023-09-12T22:09:27Z",
  "mergedAt": "2023-09-12T22:09:27Z",
  "additions": 36,
  "deletions": 20,
  "changedFiles": 3,
  "headRefName": "fix-console-mode",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0818ef4edb17ffdf2cea69d32cb1597122a468bc",
          "message": "ProofOfConcept",
          "committedDate": "2023-05-18T23:43:42Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3798ad9a3960f6c052c63f483de03d17782b70b2",
          "message": "Add CommandLine switch",
          "committedDate": "2023-05-22T16:51:26Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9c6392b48ea43c166d5113f6a6fd66050a58432b",
          "message": "Implement the rest",
          "committedDate": "2023-05-22T22:39:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8ba0ef80e4ba9085e4054aaff4b0a8edd3864d84",
          "message": "Fix bugs",
          "committedDate": "2023-05-23T00:24:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ee3de60db435e7fff1df3510d141139045f5980",
          "message": "un-public BRD",
          "committedDate": "2023-05-23T00:46:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3af2613137e9b754118d961d3ed6339bf8420acf",
          "message": "Switch to json format\n\nPrinting properties or items is much more complicated than might be supposed at face value. When creating a Project, we get things like ProjectItems and ProjectProperties; after the build, we get ProjectItemInstances and ProjectPropertyInstances. Properties aren't too bad because we can use a delegate to abstract over that, but ProjectInstances have ProjectItemInstances with ProjectMetadataInstances, which is too many layers of nesting to cleanly abstract that in a delegate, hence two separate helper functions for those.",
          "committedDate": "2023-05-24T17:08:23Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81cf59e9c633cb5896cf14f98a1d3da00b9aa60c",
          "message": "Progress on tests",
          "committedDate": "2023-05-26T00:07:16Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1870e8467d12ec1db93575dc2799091c96d0bf4a",
          "message": "Add JsonOutputFormatter",
          "committedDate": "2023-06-02T21:51:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3fa8dc4d13595e8562298e4cb64c13775a0ac038",
          "message": "Resolve issues and use new class",
          "committedDate": "2023-06-02T22:57:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "631eb22cbbe025d76a4443f8c7fccc141218bba4",
          "message": "Use STJ",
          "committedDate": "2023-06-06T21:17:25Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "034ae13c0e9c34678a0bf5750bbb613737cbd73b",
          "message": "Remove XMake garbage",
          "committedDate": "2023-06-06T21:17:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41e2b4a0188b8c46c808201f6df4fd774d935ac4",
          "message": "Add comment",
          "committedDate": "2023-06-06T23:56:17Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf0e8f338717ac514b7bb2bc172e5e8539d27e81",
          "message": "Suppress build finished message",
          "committedDate": "2023-06-08T20:35:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8259a4bf45c18d8fc8aaac8f20c333cbbc6ecfad",
          "message": "Suppress BuildFinished for getTargetResult",
          "committedDate": "2023-06-09T00:08:11Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b65f88caae0a4401a509565f77e7d81013dbbe8",
          "message": "Support simple format",
          "committedDate": "2023-06-16T20:52:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c3db889a14c7c422df9760ed6746ac79e0d9b0f",
          "message": "Do not fail hard when the user passes an invalid project",
          "committedDate": "2023-06-16T21:26:56Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f849baa08292045b8043c98858f8ac114526633",
          "message": "Push all logging to stderr",
          "committedDate": "2023-06-16T22:40:13Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0a1b38b5a0529a6a638c2fc4b06c440b48c405b",
          "message": "Cleanup_1",
          "committedDate": "2023-06-19T21:31:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7a3c332be31b2c2f9634c494d0ee4062df28458",
          "message": "PR comments",
          "committedDate": "2023-06-19T21:41:21Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa46143392586305c469c0cd3f1c36cafe743563",
          "message": "Add using",
          "committedDate": "2023-06-19T21:41:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "41d30919b0861b2fc7669050daa7d4239f16ac32",
          "message": "Do not use custom loggers\n\n...when getting evaluation results",
          "committedDate": "2023-06-29T00:48:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db6210acf1aadd8d8c85b5541e65578c461ca0e2",
          "message": "Merge branch 'main' into get-eval-results-2",
          "committedDate": "2023-07-05T17:26:43Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "241e5b9cfc440f0c29cb4f580aca724be7354737",
          "message": "remove test no longer relevant to design",
          "committedDate": "2023-07-10T17:24:40Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "008983206f2cf35226cb87a066ff4d2f1811cdf9",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into get-eval-results-2",
          "committedDate": "2023-07-20T17:19:03Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "20c07c79aeb59641847395a130ac209deeba77eb",
          "message": "PR feedback",
          "committedDate": "2023-07-20T17:32:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cad93f26297bf89ad5d37acf17434a0d339c38ff",
          "message": "Remove duplicate check",
          "committedDate": "2023-07-20T17:59:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b1aab934e9ec76d46bb103e00858324b3fff768b",
          "message": "Continue PR feedback",
          "committedDate": "2023-07-21T18:52:29Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "71a8c9352a79fd2d9d036e1a468c0036082e49fd",
          "message": "Merge branch 'main' into get-eval-results-2",
          "committedDate": "2023-07-21T20:28:58Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0c30abd2753b1d7cf557df3c5a4fd5cec72fbd9c",
          "message": "Delete duplicate usings",
          "committedDate": "2023-07-26T19:34:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ccf6731d3017c3da561e8409ebe896e1507fc1ff",
          "message": "Most PR comments",
          "committedDate": "2023-07-27T18:54:34Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e843f036e2debc5d0d6f36cff44373f189fe52ce",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into get-eval-results-2",
          "committedDate": "2023-07-27T18:55:41Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52a57fa09af2f5db54391d4b00d6f3872ee525f2",
          "message": "Move comment",
          "committedDate": "2023-07-27T19:02:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ec72621713ef98aaa8f47fc788c267a98b2ad86",
          "message": "Tweak ConsoleMode pre-error messages",
          "committedDate": "2023-08-02T00:03:24Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c6967e59924dcb442acc64d9e22d94cb7ea367eb",
          "message": "Fix restore handle",
          "committedDate": "2023-08-02T23:55:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "646ef5fd8fdc3ee72d558f0c286c3abe564e0e9a",
          "message": "PR comments",
          "committedDate": "2023-08-03T19:39:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d33d9de2877ea2b4242463544d2f4a823e73deaa",
          "message": "PR comments",
          "committedDate": "2023-08-04T20:17:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b9826c16f623da3ad5b5b5d588f21252c4a503c9",
          "message": "Extend ExecuteAppWithGetPropertyAndItem\n\nTo include GetTargetResult!",
          "committedDate": "2023-08-04T20:31:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b80cdd6722167d402ba71d5b191518dfe79b28c",
          "message": "Merge branch 'get-eval-results-2' of https://github.com/Forgind/msbuild into fix-console-mode",
          "committedDate": "2023-08-04T20:44:33Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c67249d2eb66e68d5040d40d66354a0efb334a1",
          "message": "Switch to using \"StreamHandleType\" enum",
          "committedDate": "2023-08-04T20:50:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "131f6146b46733afe04a1606f997f0899a8201df",
          "message": "Create local variable",
          "committedDate": "2023-08-07T15:38:41Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6cb6dab68b02b2df1cbe2ae90b1dd277fa1e371b",
          "message": "Output binlog",
          "committedDate": "2023-08-08T19:08:10Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5c38ef421e0b83727d072951e2208df139a93126",
          "message": "Permit \"Build succeeded\" in binlog",
          "committedDate": "2023-08-08T23:45:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d6052fc328d6586be3002514229c526d968ff88",
          "message": "PR feedback",
          "committedDate": "2023-08-09T16:17:35Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5e7d1331e491ea835e2fa0e0bec8ed0f572a602",
          "message": "Do not permit duplicate additions to eval results",
          "committedDate": "2023-08-11T16:38:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3909a8fd803dcf7cb4dcc44070d89483371b2a9",
          "message": "Merge branch 'get-eval-results-2' of https://github.com/Forgind/msbuild into fix-console-mode",
          "committedDate": "2023-08-11T16:39:28Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea0db7fab67df57a800e59a56ea024b7963109a1",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into fix-console-mode",
          "committedDate": "2023-08-15T18:51:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bc28cf1f9bb631102e85468a18087faefc923b07",
          "message": "PR comments",
          "committedDate": "2023-09-07T17:25:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Since the other PR is still open, do you want to fix this problem in there?",
        "createdAt": "2023-08-02T17:56:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Since the other PR is still open, do you want to fix this problem in there?\r\n\r\nMy personal preference is to fix it in a separate (i.e., this) PR, mostly because if I move these changes to that PR, it'd need to be reviewed more and probably need at least one or two more changes, and I'd rather it go in \ud83d\ude42",
        "createdAt": "2023-08-02T23:57:46Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I can move it over there if you want me to, though.",
        "createdAt": "2023-08-02T23:58:08Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Member\r\n\r\n\r\n\r\n> I have couple minor comments for consideration.\r\n> \r\n> The main things I'd like to see addressed:\r\n> \r\n> * Prevent merge mess, by either basing this on your other branch, or by first waiting for that other PR to go in (and then resolving here)\r\n\r\n100% agree. My plan is to wait until the other PR is in, then restart the merge, and I believe it will drop all the prior commits (and make your life a lot easier!)\r\n\r\n> * I believe the same issue should be addressed in other affected loggers as well (or otherwise the [Inspect ConsoleMode before sending control codes on Windows\u00a0#9079](https://github.com/dotnet/msbuild/issues/9079) should be left open)\r\n\r\nWhich loggers are you thinking of? The only loggers that I think are potentially susceptible to this sort of problem are this new logger (fixed in this PR), the terminal logger (fixed in one of my previous PRs), and the console logger, but I asked about fixing the console logger in #9079, and rainersigwald [suggested it doesn't need fixing](https://github.com/dotnet/msbuild/issues/9079#issuecomment-1661127724). I'm fine with trying to fix it or not fix it as the two of you agree \ud83d\ude42",
        "createdAt": "2023-08-03T19:27:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > * I believe the same issue should be addressed in other affected loggers as well (or otherwise the [Inspect ConsoleMode before sending control codes on Windows\u00a0#9079](https://github.com/dotnet/msbuild/issues/9079) should be left open)\r\n> \r\n> Which loggers are you thinking of? The only loggers that I think are potentially susceptible to this sort of problem are this new logger (fixed in this PR), the terminal logger (fixed in one of my previous PRs), and the console logger, but I asked about fixing the console logger in #9079, and rainersigwald [suggested it doesn't need fixing](https://github.com/dotnet/msbuild/issues/9079#issuecomment-1661127724). I'm fine with trying to fix it or not fix it as the two of you agree \ud83d\ude42\r\n\r\nThose are the loggers I had in mind. If all are already addressed separately - than we're good",
        "createdAt": "2023-08-04T13:17:19Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Please reconsider what win32 api details needs to be exposed beyond boundaries of the NativeMethods\r\n\r\nThat's fair. I guess I was thinking about if a user happens to be familiar with the wind32 API already...but how many people actually are? I added an enum.",
        "createdAt": "2023-08-04T20:51:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@JanKrivanek, diff looks a lot cleaner now, so I removed the do-not-merge label.",
        "createdAt": "2023-08-15T18:56:23Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> @JanKrivanek, diff looks a lot cleaner now, so I removed the do-not-merge label.\r\n\r\nThanks for all the adjustments! Looks good to go to me!",
        "createdAt": "2023-08-16T11:39:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@rokonec, I resolved your first and third comments but left your second one because you fixed that in your PR. As I said there, we can merge one of the PRs and resolve conflicts then, or I can pull your changes into my branch, and we can merge them as one change. I'm ok with either way.",
        "createdAt": "2023-09-07T17:27:06Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Shutdown() will restore originalConsoleMode to STD_OUTPUT_HANDLE and not to STD_ERROR_HANDLE.  If standard output is redirected and standard error is not, as seems likely for a --get option, then that's wrong.  NativeMethods.RestoreConsoleMode should be given a parameter to choose the std handle.",
              "createdAt": "2023-08-02T07:35:39Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;\n+        private bool acceptAnsiColorCodes;\n+        private uint? originalConsoleMode;\n+        public SimpleErrorLogger()\n+        {\n+            int STD_ERROR_HANDLE = -12;\n+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);",
              "author": {
                "login": "KalleOlaviNiemitalo"
              }
            },
            {
              "body": "Good call; will fix. Thanks!",
              "createdAt": "2023-08-02T17:43:36Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;\n+        private bool acceptAnsiColorCodes;\n+        private uint? originalConsoleMode;\n+        public SimpleErrorLogger()\n+        {\n+            int STD_ERROR_HANDLE = -12;\n+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'd say the parameter should an enum (or alternatively boolean), the actual handle ids should be implementation detail within `NativeMethods` (means - `STD_OUTPUT_HANDLE` and `STD_ERROR_HANDLE` should live only there and not spill out)",
              "createdAt": "2023-08-03T09:29:19Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;\n+        private bool acceptAnsiColorCodes;\n+        private uint? originalConsoleMode;\n+        public SimpleErrorLogger()\n+        {\n+            int STD_ERROR_HANDLE = -12;\n+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "This parameter is passed pretty directly to GetStdHandle, a p/invoke in kernel32.dll, which takes an int. They're kinda the same thing, but I think it's more confusing to turn it into an enum then turn it back into an int. (I do think using the STD_OUTPUT_HANDLE in NativeMethods will make this clearer, however!)",
              "createdAt": "2023-08-03T19:39:06Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;\n+        private bool acceptAnsiColorCodes;\n+        private uint? originalConsoleMode;\n+        public SimpleErrorLogger()\n+        {\n+            int STD_ERROR_HANDLE = -12;\n+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Any encapsulation ideally should not spill the implementation details and by extension making it possible to be easily misunderstood or misused. Why would NativeMethods be different in this regard?\r\n\r\nAn integer argument makes it harder to understand what should be passed and easier to misuse (e.g. `RestoreConsoleMode(_originalConsoleMode, NativeMethodsShared.S_OK)`).",
              "createdAt": "2023-08-04T13:07:05Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;\n+        private bool acceptAnsiColorCodes;\n+        private uint? originalConsoleMode;\n+        public SimpleErrorLogger()\n+        {\n+            int STD_ERROR_HANDLE = -12;\n+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(STD_ERROR_HANDLE);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we reference the constant defined in Framework?\r\nOr possibly make the usage of `STD_OUTPUT_HANDLE` default there",
              "createdAt": "2023-08-03T09:25:37Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -229,7 +229,8 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n                 CommunicationsUtilities.Trace(\"Build finished.\");\n             }\n \n-            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode);\n+            int STD_OUTPUT_HANDLE = -11;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Readonly property",
              "createdAt": "2023-08-03T09:33:44Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I write to hasLoggedErrors in HandleErrorEvent. Should this have been on a different line? I can make the other two readonly.",
              "createdAt": "2023-08-03T19:35:29Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Sorry for being too brief - I meant that this should be exposed as a property (not a field) and should be read only from the external point of view\r\n\r\n```suggestion\r\n        public bool HasLoggedErrors { get; private set; }\r\n```",
              "createdAt": "2023-08-04T12:53:50Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Oh, that makes more sense. Coincidentally, ladipro made a similar comment in my other PR. I should be able to pull in that change to cover this \ud83d\ude42",
              "createdAt": "2023-08-04T20:43:10Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.\n+    /// </summary>\n+    public class SimpleErrorLogger : INodeLogger\n+    {\n+        public bool hasLoggedErrors = false;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "int --> enum (e.g. `internal enum StreamHandleType { StdOut = -11; StdErr = -12;}` and `internal static void RestoreConsoleMode(uint? originalConsoleMode, StreamHandleType streamHandleType )`)",
              "createdAt": "2023-08-03T09:39:22Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1537,11 +1537,11 @@ internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalC\n         return (acceptAnsiColorCodes, outputIsScreen, originalConsoleMode);\n     }\n \n-    internal static void RestoreConsoleMode(uint? originalConsoleMode)\n+    internal static void RestoreConsoleMode(uint? originalConsoleMode, int outputStreamHandle)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the motivation for introducig new single purpose logger for this, while leaving the existing `ConsoleLogger` have the unfixed behavior?\r\nShil this be actualy made part of the existing `ConsoleLogger`?",
              "createdAt": "2023-08-03T09:43:59Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Oh I see - this is intended for the https://github.com/dotnet/msbuild/pull/8792 that already uses the logger. That's a bit confusing. If you want to have 2 separate PRs (I understand that) - how about making this PR push into that branch then (you'd need to first push it into this repo though, so that such PR occurs here)?\r\n\r\nIn any case - do we actually still want to fix the same thing for the other loggers that uses the VT? Otherwise this PR probably should not be marked as fixing https://github.com/dotnet/msbuild/issues/9079",
              "createdAt": "2023-08-03T09:51:34Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Logging.SimpleErrorLogger\n+{\n+    /// <summary>\n+    /// This logger ignores all message-level output, writing errors and warnings to\n+    /// standard error, colored red and yellow respectively.\n+    ///\n+    /// It is currently used only when the user requests information about specific\n+    /// properties, items, or target results. In that case, we write the desired output\n+    /// to standard out, but we do not want it polluted with any other kinds of information.\n+    /// Users still might want diagnostic information if something goes wrong, so still\n+    /// output that as necessary.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: it is used only once, but seems like candidate for code reuse with `HandleWarningEvent`, differs only in color code.",
              "createdAt": "2023-08-17T09:03:45Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -46,16 +49,30 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n         private void HandleErrorEvent(object sender, BuildErrorEventArgs e)\n         {\n             HasLoggedErrors = true;\n-            Console.Error.Write(\"\\x1b[31;1m\");\n-            Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));\n-            Console.Error.WriteLine(\"\\x1b[m\");\n+            if (acceptAnsiColorCodes)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider using https://github.com/dotnet/msbuild/blob/fa6710d2720dcf1230a732a8858ffe71bcdbe110/src/MSBuild/TerminalLogger/TerminalColor.cs#L9 and https://github.com/dotnet/msbuild/blob/fa6710d2720dcf1230a732a8858ffe71bcdbe110/src/MSBuild/TerminalLogger/AnsiCodes.cs#L9",
              "createdAt": "2023-08-17T09:05:37Z",
              "path": "src/Build/Logging/SimpleErrorLogger.cs",
              "diffHunk": "@@ -46,16 +49,30 @@ public void Initialize(IEventSource eventSource, int nodeCount)\n         private void HandleErrorEvent(object sender, BuildErrorEventArgs e)\n         {\n             HasLoggedErrors = true;\n-            Console.Error.Write(\"\\x1b[31;1m\");\n-            Console.Error.Write(EventArgsFormatting.FormatEventMessage(e, showProjectFile: true));\n-            Console.Error.WriteLine(\"\\x1b[m\");\n+            if (acceptAnsiColorCodes)\n+            {\n+                Console.Error.Write(\"\\x1b[31;1m\");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think checking std error is not as common, can we default to STD_OUT? Same for RestoreConsoleMode.",
              "createdAt": "2023-08-17T09:09:54Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -1481,11 +1488,11 @@ internal static void VerifyThrowWin32Result(int result)\n     }\n \n #if !CLR2COMPATIBILITY\n-    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes()\n+    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes(StreamHandleType handleType)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}