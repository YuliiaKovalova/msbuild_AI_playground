{
  "number": 6400,
  "title": "Scheduler should honor BuildParameters.DisableInprocNode",
  "body": "### Context\r\nThere are two ways in MSBuild to disable the inproc node:\r\n- via the environment variable `MSBuildNoInprocNode`\r\n- by setting `BuildParameters.DisableInprocNode`\r\n\r\nThe implementations of these two, as you'd expect from MSBuild, are totally separate, they have nothing in common. The env var informs the Scheduler to [assign all requests to out of proc nodes](https://github.com/dotnet/msbuild/blob/fa96a2a81e0fb8c028057fa204bbf386bfb36aec/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L2048-L2053), regardless of their affinities. And the build parameter informs the NodeManager to just [bail out on inproc node creation and return null](https://github.com/dotnet/msbuild/blob/fa96a2a81e0fb8c028057fa204bbf386bfb36aec/src/Build/BackEnd/Components/Communications/NodeManager.cs#L100).\r\n\r\nThis means that if you set the env var and build a traversal project (dirs.proj, or a solution metaproj file), then all is fine, the scheduler silently redirects them to out of proc nodes. But if you set the build parameter instead of the env var and build the traversal dirs.proj then MSBuild fails with: `MSBUILD : error MSB4223: A node of the required type InProc could not be created.`\r\n\r\nThis is causing #6386 to fail some unit tests which ensure that the project cache plugin can function with the inproc node disabled: https://dev.azure.com/dnceng/public/_build/results?buildId=1114344&view=ms.vss-test-web.build-test-results-tab&runId=33953534&resultId=101506&paneView=debug\r\n\r\nThis is a bit inconsistent and I just don't see the reason for having two separate things. So I made BuildParamters.DisableInProcNode also trigger the Scheduler's ForceAffinityOutOfProc. I doubt it would break anybody, and would actually benefit the users that want to both disable the inproc node via the API (like VS does [in certain cases](http://index/?leftProject=Microsoft.Build&leftSymbol=ytxqezflwyea)) and avoid node creation exceptions.\r\n\r\n### Changes Made\r\nThe scheduler now forces affinity to out of proc when either the env var is set, or the build parameter is set. It will avoid build failures when the build parameter is set.\r\n\r\n### Testing\r\nAdded / updated unit tests.",
  "state": "MERGED",
  "createdAt": "2021-05-01T01:41:02Z",
  "updatedAt": "2021-06-29T08:33:16Z",
  "closedAt": "2021-06-04T22:58:45Z",
  "mergedAt": "2021-06-04T22:58:45Z",
  "additions": 31,
  "deletions": 58,
  "changedFiles": 5,
  "headRefName": "consistentDisableInprocNode",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "changewaves",
    "changewave17.0"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "04655dd063b6aea84a3708d3146c52556b78d54a",
          "message": "Scheduler should honor BuildParameters.ForceAffinityOutOfProc\n\nOtherwise the NodeManager disables the inproc node but the schedulre assigns to it which leads to build failures.",
          "committedDate": "2021-06-02T22:35:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d427fac945edf004c9a9d6aba324172d8cec97d2",
          "message": "Do TaskHost too",
          "committedDate": "2021-06-02T22:35:56Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56f438f8d942c6472c6304a4c1ab8b31b589c744",
          "message": "Put changes behind change wave",
          "committedDate": "2021-06-02T22:37:43Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e3503c0556fe9ddba1d695735345169f2b9e9b88",
          "message": "fix syntax error",
          "committedDate": "2021-06-02T22:52:48Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a61480cb2482d0d57f0fb4a1aa4465d833847516",
          "message": "remove useless VerifyThrow",
          "committedDate": "2021-06-02T22:53:47Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da2aa1eff78cb59e76cde2d79422631eef7f6652",
          "message": "re-enable tests",
          "committedDate": "2021-06-04T18:09:22Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The change looks good, although technically it is breaking so wondering if it shouldn't be behind a changewave.\r\n\r\nAlso, this is another place where we check the env var only:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/b02f8de7e24d541df1d8c7d71cf8036d0ce91213/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs#L140\r\n\r\nWould it make sense to fix it also?\r\n",
        "createdAt": "2021-05-05T11:02:32Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro\r\nWhich change wave should it be under?",
        "createdAt": "2021-05-05T18:40:47Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Which change wave should it be under?\r\n\r\n`Wave17_0` unless you are intending to backport to 16.x. The `main` branch is now targeting VS 17.0.",
        "createdAt": "2021-05-05T20:09:59Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I suppose cleaning of\r\n> \r\n> https://github.com/dotnet/msbuild/blob/2be2ece3eae4aaeb92c237001f12f5490b82c8cf/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs#L445\r\n> \r\n> and similar would be done in another PR, am I right?\r\n\r\nYes, future PR after this one gets merged in.",
        "createdAt": "2021-06-02T22:13:31Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: I should have done it previously, but can we please update this comment. It is no longer valid. We now can build traversal projects out of proc.\r\nAlso I believe that bellow `VerifyThrow` is not necessary and outdated. Why we should fail build for supported scenario? I'd recommend to use Debug.Assert instead or better just delete it.",
              "createdAt": "2021-06-02T11:08:24Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1330,7 +1334,7 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node\n             // and produce more references (more work to do.)  This just verifies we do not attempt to send a traversal to\n             // an out-of-proc node because doing so is inefficient and presently will cause the engine to fail on the remote",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: Could it break anyone? If I understand these changes correctly, new code can only make previously failing builds pass, doesn't it?",
              "createdAt": "2021-06-02T11:11:04Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -123,7 +126,10 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen\n             _targetBuilderCallback = targetBuilderCallback;\n             _continueOnError = false;\n             _activeProxy = true;\n-            _callbackMonitor = new Object();\n+            _callbackMonitor = new object();\n+            _disableInprocNode = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I remember that back when I did this change a month ago I had some good reasons, but I forget what they were. Either way, for now it's protected under a change wave and whenever we remove Wave17_0, we'll remove the old code as well. Should be all overly safe, even if we're overdoing it.",
              "createdAt": "2021-06-02T22:15:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -123,7 +126,10 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen\n             _targetBuilderCallback = targetBuilderCallback;\n             _continueOnError = false;\n             _activeProxy = true;\n-            _callbackMonitor = new Object();\n+            _callbackMonitor = new object();\n+            _disableInprocNode = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}