{
  "number": 7699,
  "title": "Cleaning up msbuild static graph setplatform negotiation logic",
  "body": "Fixes #\r\n\r\nThis fixes an issue where if two projects each building a separate platform reference the same project and that project resolves to the same platform in both cases the project graph would have two separate nodes to that that references project.\r\n\r\nExample\r\nproj a (x86) -> projb (anycpu)\r\nprojc(x64) -> projb (anycpu)\r\n\r\nThis would output a projectgraph with the following nodes\r\nproj a (x86)\r\nprojb (anycpu)\r\nprojb (anycpu)\r\nprojc(x64)\r\n\r\nCorrect behavior would be \r\n\r\nproj a (x86)\r\nprojb (anycpu)\r\nprojc(x64)\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\nI added in a unit test to test for this scenario. \r\n\r\n\r\n### Notes\r\n\r\nThis way of doing the set platform negotiation is actually much closer to how it is done during build which is good as project graph is meant to mimic build as much as possible\r\n",
  "state": "MERGED",
  "createdAt": "2022-06-14T01:16:30Z",
  "updatedAt": "2022-06-22T19:34:19Z",
  "closedAt": "2022-06-22T19:34:19Z",
  "mergedAt": "2022-06-22T19:34:19Z",
  "additions": 74,
  "deletions": 57,
  "changedFiles": 4,
  "headRefName": "setplatformcleanup",
  "isDraft": false,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3f918d227a29f8d6e6c7abc68626e155a8fa15fd",
          "message": "Cleaning up msbuild static graph setplatform negotiation logic",
          "committedDate": "2022-06-14T01:13:22Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "048f6c88cab6d4c313a3a7d4b5cdeea40ac51501",
          "message": "Cleaning up unused variable",
          "committedDate": "2022-06-14T01:20:47Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4df719d228c797c20e0f613054c8463c0b09b62f",
          "message": "formatting",
          "committedDate": "2022-06-14T01:28:27Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "448792b4d9e7b7307223c87df36768ddb51c5922",
          "message": "using predefined variable",
          "committedDate": "2022-06-14T14:24:55Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1a49cb21aabc27e25a3f9ba6f09e68ea9e3fe1a",
          "message": "Adding in graph count node validation",
          "committedDate": "2022-06-15T15:18:48Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e228e3e08dde042096adf454dd1e0b197583a297",
          "message": "Update src/Build/Graph/ProjectInterpretation.cs\n\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2022-06-15T17:05:26Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f0b77c3b04168b8a9ac76945358fe3fcec2707c",
          "message": "Update src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs\n\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2022-06-15T17:05:34Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you also assert that there's only one `3.proj` in the graph? Or \"just 3 nodes\" or something?",
              "createdAt": "2022-06-14T19:07:39Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -75,6 +75,46 @@ public void ValidateSetPlatformOverride()\n             }\n         }\n \n+        [Fact]\n+        public void ResolvesMultibleReferencesToSameProject()\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+\n+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @\"<PropertyGroup>\n+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                                                                                                <Platform>x64</Platform>\n+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>\n+                                                                                            </PropertyGroup>\n+                                                                                            <ItemGroup>\n+                                                                                                <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)2.proj\"\" />\n+                                                                                                <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)3.proj\"\" />\n+                                                                                            </ItemGroup>\");\n+                var proj2 = env.CreateFile(\"2.proj\", @\"\n+                                                    <Project>\n+                                                        <PropertyGroup>\n+                                                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                                                            <Platforms>AnyCPU</Platforms>\n+                                                        </PropertyGroup>\n+                                                        <ItemGroup>\n+                                                            <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)3.proj\"\" />\n+                                                        </ItemGroup>\n+                                                    </Project>\");\n+\n+                var proj3 = env.CreateFile(\"3.proj\", @\"\n+                                                    <Project>\n+                                                        <PropertyGroup>\n+                                                            <Platforms>AnyCPU</Platforms>\n+                                                        </PropertyGroup>\n+                                                    </Project>\");\n+\n+\n+                ProjectGraph graph = new ProjectGraph(entryProject.Path);\n+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties[\"Platform\"].ShouldBe(\"AnyCPU\");\n+                GetFirstNodeWithProjectNumber(graph, 3).ProjectInstance.GlobalProperties[\"Platform\"].ShouldBe(\"AnyCPU\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Added in a check to make sure there are only 3 nodes here",
              "createdAt": "2022-06-15T15:19:51Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -75,6 +75,46 @@ public void ValidateSetPlatformOverride()\n             }\n         }\n \n+        [Fact]\n+        public void ResolvesMultibleReferencesToSameProject()\n+        {\n+            using (var env = TestEnvironment.Create())\n+            {\n+\n+                TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @\"<PropertyGroup>\n+                                                                                                <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                                                                                                <Platform>x64</Platform>\n+                                                                                                <PlatformLookupTable>win32=x64</PlatformLookupTable>\n+                                                                                            </PropertyGroup>\n+                                                                                            <ItemGroup>\n+                                                                                                <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)2.proj\"\" />\n+                                                                                                <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)3.proj\"\" />\n+                                                                                            </ItemGroup>\");\n+                var proj2 = env.CreateFile(\"2.proj\", @\"\n+                                                    <Project>\n+                                                        <PropertyGroup>\n+                                                            <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\n+                                                            <Platforms>AnyCPU</Platforms>\n+                                                        </PropertyGroup>\n+                                                        <ItemGroup>\n+                                                            <ProjectReference Include=\"\"$(MSBuildThisFileDirectory)3.proj\"\" />\n+                                                        </ItemGroup>\n+                                                    </Project>\");\n+\n+                var proj3 = env.CreateFile(\"3.proj\", @\"\n+                                                    <Project>\n+                                                        <PropertyGroup>\n+                                                            <Platforms>AnyCPU</Platforms>\n+                                                        </PropertyGroup>\n+                                                    </Project>\");\n+\n+\n+                ProjectGraph graph = new ProjectGraph(entryProject.Path);\n+                GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties[\"Platform\"].ShouldBe(\"AnyCPU\");\n+                GetFirstNodeWithProjectNumber(graph, 3).ProjectInstance.GlobalProperties[\"Platform\"].ShouldBe(\"AnyCPU\");",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the significance of `!projectReferenceItem.HasMetadata(SetPlatformMetadataName)`? Shouldn't it collapse to a single node even if there's an explicit setplatform?",
              "createdAt": "2022-06-14T19:09:21Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -101,13 +105,30 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                 var requesterPlatform = \"\";\n                 var requesterPlatformLookupTable = \"\";\n \n-                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(\"EnableDynamicPlatformResolution\")))\n+                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && !projectReferenceItem.HasMetadata(SetPlatformMetadataName))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes but the setplatform negotiation should be skipped if setplatform is already defined.",
              "createdAt": "2022-06-15T15:19:37Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -101,13 +105,30 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                 var requesterPlatform = \"\";\n                 var requesterPlatformLookupTable = \"\";\n \n-                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(\"EnableDynamicPlatformResolution\")))\n+                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && !projectReferenceItem.HasMetadata(SetPlatformMetadataName))",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "HasMetadata is (in theory) a faster check that should short-circuit `ValidBooleanTrue` whenever possible\r\n```suggestion\r\n                if ( !projectReferenceItem.HasMetadata(SetPlatformMetadataName) && ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)))\r\n```\r\n\r\nMSBuild does a ton of string equals otherwise:\r\n\r\n```\r\n        private static bool ValidBooleanTrue(string parameterValue)\r\n        {\r\n            return (String.Equals(parameterValue, \"true\", StringComparison.OrdinalIgnoreCase)) ||\r\n                    (String.Equals(parameterValue, \"on\", StringComparison.OrdinalIgnoreCase)) ||\r\n                    (String.Equals(parameterValue, \"yes\", StringComparison.OrdinalIgnoreCase)) ||\r\n                    (String.Equals(parameterValue, \"!false\", StringComparison.OrdinalIgnoreCase)) ||\r\n                    (String.Equals(parameterValue, \"!off\", StringComparison.OrdinalIgnoreCase)) ||\r\n                    (String.Equals(parameterValue, \"!no\", StringComparison.OrdinalIgnoreCase));\r\n        }\r\n```",
              "createdAt": "2022-06-15T15:48:35Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -101,13 +105,30 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                 var requesterPlatform = \"\";\n                 var requesterPlatformLookupTable = \"\";\n \n-                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(\"EnableDynamicPlatformResolution\")))\n+                if (ConversionUtilities.ValidBooleanTrue(requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && !projectReferenceItem.HasMetadata(SetPlatformMetadataName))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        public void ResolvesMultipleReferencesToSameProject()\r\n```\r\n\r\nnit: typo",
              "createdAt": "2022-06-15T15:50:52Z",
              "path": "src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs",
              "diffHunk": "@@ -75,6 +75,47 @@ public void ValidateSetPlatformOverride()\n             }\n         }\n \n+        [Fact]\n+        public void ResolvesMultibleReferencesToSameProject()",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}