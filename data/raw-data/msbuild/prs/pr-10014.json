{
  "number": 10014,
  "title": "Analyzers acquisition experience",
  "body": "### Context\r\nThis PR implements acquisition flow for custom analyzers.\r\n\r\nThe process can be described the next way:\r\nA Custom Analyzer library contains a file `Company.AnalyzerTemplate.props`.\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/b764c54c-16f8-4f72-b5fb-03131714ae3a)\r\n\r\nIf this analyzer is referenced from any solution, MSBuild invokes  intrinsic function `RegisterAnalyzer`  during the evaluation. It emits `BuildCheckAcquisitionEventArgs` if the parsed path to custom analyzer is valid.\r\nThis event is handled by `BuildCheckConnectorLogger`: it passes the info to `IBuildCheckManager.ProcessAnalyzerAcquisition`.\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/644f2a9c-fcfc-4fa1-8e07-d16085230879)\r\n\r\n### Tests\r\nManual and unit tests.\r\nI plan to cover e2e scenarios once MSBuild.Build package with BuildCheck infrastructure is available for public reference (it is needed for custom templates). \r\n\r\nbased on: https://github.com/dotnet/msbuild/pull/9977",
  "state": "MERGED",
  "createdAt": "2024-04-16T10:26:59Z",
  "updatedAt": "2024-04-25T18:53:50Z",
  "closedAt": "2024-04-25T08:12:12Z",
  "mergedAt": "2024-04-25T08:12:12Z",
  "additions": 781,
  "deletions": 176,
  "changedFiles": 37,
  "headRefName": "dev/ykovalova/analyzers_aquisition_experience",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a59fe1e1ba7394a72aef92b6bacee0e2240b4de4",
          "message": "Initial demonstration version",
          "committedDate": "2024-02-20T14:04:15Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "628394dd0cd40fd187fffe70ce0f8a987c776bb8",
          "message": "Make analyzer test use bootstrap properly (#9733)",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59ab931843eaa81145f590fd25ce8338e877f546",
          "message": "Hook analyzers stats stub",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "92e3795badecd4b5c8f44643c4a5a3bd17624c87",
          "message": "Fix unit tests by explicitly opting into analysis",
          "committedDate": "2024-02-20T14:07:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "33c4d2e1671b69671af7f94dfc34bcdbcb3be488",
          "message": "Disable build acceleration for MSBuild.Bootstrap",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b37e4957a8c4cf536c3d37dd2e8bf99b0c8569a5",
          "message": "Make EndToEndTests disposable",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2db509fa6470841d395d311202f1b22f4f4210eb",
          "message": "Support running Analyzers.UnitTests from stage1",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4cdd9037e5a5b0fce48d3170ec1974ea4c183198",
          "message": "Fix MSBuild.dll casing",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05450bb3c439526af4e23015ecd59c15cbbc10fa",
          "message": "Don't run netfx Analyzer.UnitTests in Windows Core builds",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e12ef07b6e693e2f6f4c3394b90a3e4a8e0d827",
          "message": "Fix Analyzers.UnitTests on Mac",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fdda2cd5694dadb729b26a12e86ed5ae718f1c25",
          "message": "Renaming changes",
          "committedDate": "2024-02-20T14:07:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72749c4bea44a32a597ab781f2fa9341c6877f48",
          "message": "Renaming for clarity (#9754)",
          "committedDate": "2024-02-20T14:07:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "93141216d60beaf2517ed718eb0a71ec6e5b3cf5",
          "message": "Removing unnecessary types",
          "committedDate": "2024-02-20T14:07:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "886c483721408fd2e27ba45d5b98db72d7f3d62c",
          "message": "Code move",
          "committedDate": "2024-02-20T14:48:04Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60e01a7c955e134bdffc958e2a0c97eaeeb00d24",
          "message": "Adjust namespaces",
          "committedDate": "2024-02-20T15:00:45Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b474fa12e159f1d573b50689e25593d6c7309983",
          "message": "Simplify TestEnvironments in EndToEndTests",
          "committedDate": "2024-02-21T09:57:06Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac76b77ef77a47d0926d214c3310ce46b10acb4a",
          "message": "Support for per-project configuration, Acquisition mounting, etc",
          "committedDate": "2024-02-28T14:45:49Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0467261a12db78679974ba354e1650e4bd0c385b",
          "message": "Add more comments",
          "committedDate": "2024-02-28T16:52:17Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f9d94192a42441942c443ba43bbefa49ec9b06a",
          "message": "Grace handle double initialization attempts",
          "committedDate": "2024-02-29T11:13:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40dd6e01abf4fb873c7a514af55f259a3db6798f",
          "message": "Fix tests",
          "committedDate": "2024-02-29T13:16:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bddef4cd1f7c6b0e3b772437840ade284f9466f5",
          "message": "Troubleshoot test, comment",
          "committedDate": "2024-02-29T17:45:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "296faa9688adf1578ec871f7964bf3340c88fd64",
          "message": "Reflect PR comments",
          "committedDate": "2024-03-01T18:22:43Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f873eda39fa323875dd91307f6baf530210cedd8",
          "message": "Fix build",
          "committedDate": "2024-03-01T20:28:27Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3db5e97f2886f2ca7b450285ce0061d69faba86a",
          "message": "Fix build - proper multitargeting on core builds",
          "committedDate": "2024-03-05T14:03:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "602177126b5c147573729b59ce184c0343e023e4",
          "message": "Adjust API naming and exposure",
          "committedDate": "2024-03-12T13:04:39Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72f2d519f1cd6170f390351a2b9001b395d2c8d0",
          "message": "Merge branch 'main' into exp/build-analyzers",
          "committedDate": "2024-03-18T13:54:38Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "178907fb4672985268dba16314e33c88bbf08bf3",
          "message": "Add forgotten acquisition data sending",
          "committedDate": "2024-03-18T14:58:48Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e178918c282e5205814fa0a23ec483716a21919b",
          "message": "Renaming BuildCop to BuildCheck (#9893)\n\nWe decided to rename the analyzer project from BuildCop to BuildCheck. This PR is just reflecting that on the code.",
          "committedDate": "2024-03-19T12:53:36Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0892e86c1a3729d97f10d48c01ea48f401aa9cec",
          "message": "Renamed a few files missed (#9900)",
          "committedDate": "2024-03-21T13:49:46Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "31a2a0ee38223acd7ff19a638923bd227352ea7b",
          "message": "Add template for custom analyzers (#9789)",
          "committedDate": "2024-03-25T12:55:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d710e004a44d2d57606b62d78f5ea7ae26feedad",
          "message": "Merge branch 'main' into exp/build-analyzers",
          "committedDate": "2024-03-25T21:45:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2aeda7e81c185633ebc8ac88a096ca8187281812",
          "message": "init changes",
          "committedDate": "2024-03-26T09:35:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5fab936eeb1a112eb4fb3e611818d33d70238903",
          "message": "Run tests against just-built bootstrap environment",
          "committedDate": "2024-04-03T09:04:05Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b5b92502dc09e881fb8c167c102e4122946a00f",
          "message": "Reflecting PR comments",
          "committedDate": "2024-04-04T14:29:18Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d97a6118caf9a2a07277706f9d1de6d45fced589",
          "message": "Add test without analysis",
          "committedDate": "2024-04-04T16:51:54Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e18f00ff47e93fb9f0edbeccdfa20ca21e62eb89",
          "message": "Rename tests project",
          "committedDate": "2024-04-04T16:56:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "368cb08fa02f125382896ad8a4abefcac182cf85",
          "message": "Force case renaming",
          "committedDate": "2024-04-04T17:45:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1112bed7b36ef5c8fbad40d979c37e5685c3735",
          "message": "pass logging context to inrinsic function",
          "committedDate": "2024-04-04T18:26:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e721c0a0e4a5a6881d283c6acbac5ada686b9e9b",
          "message": "merge",
          "committedDate": "2024-04-04T18:29:27Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7025f3a4fc43a4fe856293d523399e571dff3e3a",
          "message": "Simplify GlobalInstance initialization",
          "committedDate": "2024-04-05T09:16:50Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aeb41072668d679693ac454553c88368fddef262",
          "message": "Remove multiple registrations checking",
          "committedDate": "2024-04-05T12:03:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01510e2df40b98d0ed1453bbd1aa0dff3e453aa2",
          "message": "Reflect on PR feedback",
          "committedDate": "2024-04-05T15:59:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d7c4c635287a08e383a4f4486d7c4e949327a9e",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Mariana Dematte <magarces@microsoft.com>",
          "committedDate": "2024-04-05T16:01:21Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "25b5f75df908bf749b1283d76b37996c6a02bb67",
          "message": "Reflect on PR comments",
          "committedDate": "2024-04-05T16:03:55Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53a7c8bfe7005d04c0f1fe247f9e03d7961f16f4",
          "message": "implement full aquisition flow",
          "committedDate": "2024-04-08T11:15:58Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5dea8dca4572d495074fdd3f2f718e1ad77c6927",
          "message": "merge",
          "committedDate": "2024-04-08T11:18:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06e06d53e2ad55a49fefa4ac02e09105e26f4176",
          "message": "cleanup",
          "committedDate": "2024-04-08T11:23:43Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab744f6f66c1bf4ea746aca9252498880ee401e8",
          "message": "fix template",
          "committedDate": "2024-04-08T12:13:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b86a3d2f35873805bb9fa7399fd62a1e2b55779",
          "message": "add test coverage",
          "committedDate": "2024-04-09T09:28:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b73069ca65dc7fe164dfc5c51f8f2f12cea7df67",
          "message": "cleanup",
          "committedDate": "2024-04-09T09:35:27Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0fdf77f0d690b3425e9f02bf796c9427b0186e14",
          "message": "cleanup",
          "committedDate": "2024-04-09T10:13:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aaaafccae7ea79994554c2d04b606956f2ee58e4",
          "message": "Update src/Build/BuildCheck/API/BuildAnalyzerRule.cs\n\nCo-authored-by: Farhad Alizada <104755925+f-alizada@users.noreply.github.com>",
          "committedDate": "2024-04-10T13:47:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf29add1d3d61f89addbbb851b511841dfe45266",
          "message": "Reflect PR comments",
          "committedDate": "2024-04-10T16:14:56Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "402f490c1b926611161dac49f3e067e20fe389d5",
          "message": "Merge branch 'exp/build-analyzers' of https://github.com/dotnet/msbuild into exp/build-analyzers",
          "committedDate": "2024-04-10T16:14:59Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e046562673e2c7e02709ee2fd347532d686882a",
          "message": "merge + fix review comments",
          "committedDate": "2024-04-11T12:10:00Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c7d1b1dc0c8f853fca8fa2d72c98f4a897cd506f",
          "message": "fix test failure",
          "committedDate": "2024-04-11T13:06:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "724f1f36c1cf42564269a58dc6154cf99c1d42a3",
          "message": "fix review comments",
          "committedDate": "2024-04-15T08:44:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e0b455bd310c9c8d0d0a7322a0e22bedcbab505",
          "message": "fix review comments",
          "committedDate": "2024-04-15T08:45:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "086dbea37a830885dfb07dadf593d1c7ad6e50a1",
          "message": "merge",
          "committedDate": "2024-04-16T10:26:05Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dde2231e31f4c0e0b2ef884332b188bd92841cd9",
          "message": "remove extra file",
          "committedDate": "2024-04-16T10:28:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c5dbb564a8a6d4ecc61c20b35370209c9f2bc550",
          "message": "fix review comments",
          "committedDate": "2024-04-17T14:43:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0071485c5d0f065642ee8acb3b18bbaf009ea044",
          "message": "fix review comments",
          "committedDate": "2024-04-23T10:42:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74d2af9a4b24a3b12bb0298055a2817844cab6e2",
          "message": "Merge branch 'main' into dev/ykovalova/analyzers_aquisition_experience",
          "committedDate": "2024-04-23T10:43:38Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed8e6a5107a39063dd75f37b8119920a22078a0f",
          "message": "Update Strings.resx",
          "committedDate": "2024-04-23T10:53:20Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bcb5ba380c14054086668f4142c0d4c5b8f6875c",
          "message": "update string resources",
          "committedDate": "2024-04-23T11:03:37Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b2d984e1fb8db56781eaf15895a94964421bbf9a",
          "message": "add one more exception catching layer",
          "committedDate": "2024-04-25T07:08:48Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> It looks great!\r\n> \r\n> I'd love to see an end to end test of this as well :-) Doesn't have to be part of this PR (but would be nice)\r\n\r\ne2e tests will be added in a separate PR",
        "createdAt": "2024-04-17T14:44:04Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Please assign the current buildEventContext in the else branch (leftover from original code - but good idea to fix it now ;-))",
              "createdAt": "2024-04-17T12:20:36Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -96,12 +95,19 @@ public void SetDataSource(BuildCheckDataSource buildCheckDataSource)\n             }\n         }\n \n-        public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData)\n+        public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, BuildEventContext buildEventContext)\n         {\n             if (IsInProcNode)\n             {\n-                var factory = _acquisitionModule.CreateBuildAnalyzerFactory(acquisitionData);\n-                RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, factory);\n+                var analyzersFactories = _acquisitionModule.CreateBuildAnalyzerFactories(acquisitionData, buildEventContext);\n+                if (analyzersFactories.Count != 0)\n+                {\n+                    RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, analyzersFactories, buildEventContext);\n+                }\n+                else\n+                {\n+                    _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"CustomAnalyzerFailedAcquisition\", acquisitionData.AssemblyPath);\n+                }\n             }\n             else\n             {",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we log some info in the `false` case? The nonexistent path might be a valuable investigation data point",
              "createdAt": "2024-04-17T12:23:24Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -669,6 +670,19 @@ public static bool IsRunningFromVisualStudio()\n             return BuildEnvironmentHelper.Instance.Mode == BuildEnvironmentMode.VisualStudio;\n         }\n \n+        public static bool RegisterAnalyzer(string pathToAssembly, LoggingContext loggingContext)\n+        {\n+            pathToAssembly = FileUtilities.GetFullPathNoThrow(pathToAssembly);\n+            if (File.Exists(pathToAssembly))\n+            {\n+                loggingContext.LogBuildEvent(new BuildCheckAcquisitionEventArgs(pathToAssembly));\n+\n+                return true;\n+            }\n+",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-04-17T14:43:24Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -669,6 +670,19 @@ public static bool IsRunningFromVisualStudio()\n             return BuildEnvironmentHelper.Instance.Mode == BuildEnvironmentMode.VisualStudio;\n         }\n \n+        public static bool RegisterAnalyzer(string pathToAssembly, LoggingContext loggingContext)\n+        {\n+            pathToAssembly = FileUtilities.GetFullPathNoThrow(pathToAssembly);\n+            if (File.Exists(pathToAssembly))\n+            {\n+                loggingContext.LogBuildEvent(new BuildCheckAcquisitionEventArgs(pathToAssembly));\n+\n+                return true;\n+            }\n+",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>Failed to instantiate the custom analyzer rule with the following exception: {0}.</value>\r\n```\r\n\r\nI'm not a native speaker though",
              "createdAt": "2024-04-17T12:24:10Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -2095,6 +2095,18 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n       LOCALIZATION: {0} is integer number denoting number of bytes. 'int.MaxValue' should not be translated.\n     </comment>\n   </data>\n+  <data name=\"CustomAnalyzerSuccessfulAcquisition\" xml:space=\"preserve\">\n+    <value>Custom analyzer rule: {0} has been registered successfully.</value>\n+    <comment>The message is emmited on successful loading of the custom analyzer rule in app domain.</comment>\n+  </data>\n+  <data name=\"CustomAnalyzerFailedAcquisition\" xml:space=\"preserve\">\n+    <value>Failed to register the custom analyzer: {0}.</value>\n+    <comment>The message is emmited on failed loading of the custom analyzer in app domain.</comment>\n+  </data>\n+  <data name=\"CustomAnalyzerFailedRuleLoading\" xml:space=\"preserve\">\n+    <value>Failed to instantiate the custom analyzer rule with the next exception: {0}.</value>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should null `_loggingContext` be an error here? Checked with something like `ErrorUtilities.VerifyThrow`.",
              "createdAt": "2024-04-23T07:47:31Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3885,6 +3917,15 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                     }\n                     else if (_receiverType == typeof(IntrinsicFunctions))\n                     {\n+                        if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.RegisterAnalyzer), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (_loggingContext != null && TryGetArg(args, out string arg0))",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I haven't reviewed everything yet but this looks unexpected. Presumably, the reason why this method returns a list of _factories_ is to allow analyzers to be loaded lazily. If it is desired to load and scan the assembly here, shouldn't the return type change to the list of analyzers?",
              "createdAt": "2024-04-23T08:10:35Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,72 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+    {\n+        _loggingService = loggingService;\n+    }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+            foreach (Type analyzerType in analyzerTypes)\n+            {\n+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)\n+                {\n+                    analyzersFactories.Add(() => instance);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "@JanKrivanek this question can be addressed to you :)",
              "createdAt": "2024-04-23T09:22:27Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,72 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+    {\n+        _loggingService = loggingService;\n+    }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+            foreach (Type analyzerType in analyzerTypes)\n+            {\n+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)\n+                {\n+                    analyzersFactories.Add(() => instance);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "This is meant as preparation for future (hopefully still V1) improvement, where we do not load the type (nor even scan the assembly) before it is required (we hit a project for which it's enabled by editorconfig - as there is a chance it might not be enabled for current build at all).\r\n\r\nTo enable this, the analyzer package author would need to put the rule ids and default enablement status as an argument to the intrinsic function (the template can handle this by calling the type and extracting the values and adding it as arguments to the generated intrinsic function call)\r\n\r\nThis is already supported by the infra: https://github.com/dotnet/msbuild/blob/9cdb3615adb4115f92b390de2f258fac5f320909/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs#L208-L222\r\n ",
              "createdAt": "2024-04-23T10:34:03Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,72 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+    {\n+        _loggingService = loggingService;\n+    }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+            foreach (Type analyzerType in analyzerTypes)\n+            {\n+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)\n+                {\n+                    analyzersFactories.Add(() => instance);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Sounds like a reasonable future proofing. Thank you and feel free to resolve.",
              "createdAt": "2024-04-24T15:10:05Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,72 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+    {\n+        _loggingService = loggingService;\n+    }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+            foreach (Type analyzerType in analyzerTypes)\n+            {\n+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)\n+                {\n+                    analyzersFactories.Add(() => instance);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we require analyzers to be public types? That would allow us to speed this up by using `GetExportedTypes` instead of `GetTypes`.",
              "createdAt": "2024-04-23T08:13:58Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,72 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+    {\n+        _loggingService = loggingService;\n+    }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Mentioning \"app domain\" is a bit misleading as we don't load custom analyzers into separate app domains.",
              "createdAt": "2024-04-23T08:16:34Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -2095,6 +2095,22 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n       LOCALIZATION: {0} is integer number denoting number of bytes. 'int.MaxValue' should not be translated.\n     </comment>\n   </data>\n+  <data name=\"CustomAnalyzerSuccessfulAcquisition\" xml:space=\"preserve\">\n+    <value>Custom analyzer rule: {0} has been registered successfully.</value>\n+    <comment>The message is emitted on successful loading of the custom analyzer rule in app domain.</comment>\n+  </data>\n+  <data name=\"CustomAnalyzerFailedAcquisition\" xml:space=\"preserve\">\n+    <value>Failed to register the custom analyzer: {0}.</value>\n+    <comment>The message is emitted on failed loading of the custom analyzer in app domain.</comment>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There are existing methods in the `Expander` class that take `LoggingContext` as a parameter. Makes me wonder if we can simplify them now that the context is added as an instance field. Related to that, can we require `LoggingContext` be passed to the constructor or are there scenarios where we would still want to create the `Expander` without a logging context?",
              "createdAt": "2024-04-24T15:20:49Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "We surely want LoggingContext as much as possible - but it's well beyond the scope of this PR.\r\n\r\nThere are about gazillion of codepaths that can create Expander and that'd need to be updated (it's a little exaggeration - it's only in order of hundreds :-)), some are quite nested and unfortunately there are some that cannot provide the LoggingContext - e.g. ToolsetReader (as it expands path variables even before starting to evaluate particular project).\r\n\r\nIn any case I'm just working on experimental changeset that'd have this addressed",
              "createdAt": "2024-04-24T18:01:18Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. just to brag about it again :-) Here is the experimental change (not yet finallized) illustrating the extend of propagating LoggingContext to Expander: https://github.com/dotnet/msbuild/pull/10009/commits/f97bb85f94704a4af68cede76b6efe67317723ca",
              "createdAt": "2024-04-25T18:53:50Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Do we want to catch all exceptions here? We run external code (constructors of custom analyzers) so anything can happen.",
              "createdAt": "2024-04-24T15:28:48Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,69 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n namespace Microsoft.Build.BuildCheck.Acquisition;\n \n-internal class BuildCheckAcquisitionModule\n+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    private readonly ILoggingService _loggingService;\n+\n+    internal BuildCheckAcquisitionModule(ILoggingService loggingService) => _loggingService = loggingService;\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+    /// <summary>\n+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory.\n+    /// </summary>\n+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+    /// <summary>\n+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.\n+    /// </summary>\n+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        var analyzersFactories = new List<BuildAnalyzerFactory>();\n+\n+        try\n+        {\n+            Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+            IEnumerable<Type> analyzerTypes = assembly.GetExportedTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+            foreach (Type analyzerType in analyzerTypes)\n+            {\n+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)\n+                {\n+                    analyzersFactories.Add(() => instance);\n+                }\n+                else\n+                {\n+                    throw new InvalidOperationException($\"Failed to create an instance of type {analyzerType.FullName} as BuildAnalyzer.\");\n+                }\n+            }\n+        }\n+        catch (ReflectionTypeLoadException ex)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}