{
  "number": 9217,
  "title": "Change Copy task LogDiagnostics Warning so it is suppressible",
  "body": "Fixes #9210 \r\n\r\n### Context\r\nCopy task implement `LogDiagnostics` as warnings. This is causing issues for `/WarnAsError` use cases.\r\n\r\n### Changes Made\r\nChange Copy task `LogDiagnostics` from Warning to low importance Message.\r\n``` C#\r\n/// <summary>\r\n/// If MSBUILDALWAYSRETRY is set, also log useful diagnostic information -- as \r\n/// a warning, so it's easily visible. \r\n/// </summary>\r\nprivate void LogDiagnostic(string message, params object[] messageArgs)\r\n{\r\n    if (s_alwaysRetryCopy)\r\n    {\r\n        Log.LogMessage(MessageImportance.Low, message, messageArgs);\r\n    }\r\n}\r\n```\r\nThe reasoning for Warning level \"so it's easily visible\" is, IMO, not strong enough.\r\n\r\n### Testing\r\nUnit tests.\r\nLocally.\r\n\r\n### Notes\r\n@rainersigwald  Since we see increasing number of people reporting issues with Copy conflicts, I believe it is candidate for 17.8 ",
  "state": "MERGED",
  "createdAt": "2023-09-13T11:35:38Z",
  "updatedAt": "2023-09-21T19:36:23Z",
  "closedAt": "2023-09-21T19:36:22Z",
  "mergedAt": "2023-09-21T19:36:22Z",
  "additions": 142,
  "deletions": 4,
  "changedFiles": 15,
  "headRefName": "rokonec/copy-task-diagnostics-messages",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "357e158cc7686598a0d1900459e4d9108b73babc",
          "message": "Translatable warning with Codes",
          "committedDate": "2023-09-13T18:44:45Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e46d31e7a6afd07193665ca150c399da32d2a07e",
          "message": "Naming",
          "committedDate": "2023-09-13T18:46:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58f00c888583d3ccb1e77f2202f5b7f76096029b",
          "message": "Fixed warn codes typo",
          "committedDate": "2023-09-14T07:19:33Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Not closed actually, but hard reset + force push have confused github",
        "createdAt": "2023-09-13T18:26:21Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Pls adjust or remove the comment - as now it's out of sync with actual code.\r\n\r\nBtw. can a `MessageImportance.High` be a better way to satisfy the need for visibility? Low importance message would not be sent to common loggers (Output windw, console) and hence it can confuse users that were used to see it there in case of problems. ",
              "createdAt": "2023-09-13T14:52:21Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I am questioning the need for visibility. I don't think it has a value for people. They just need a file to be copied to destination. These are diagnostics messages, according to name and fact that they are hard coded strings (non translated), they were never intended to be read by customer.",
              "createdAt": "2023-09-13T15:20:55Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I do not have opinion here :-)\r\nSounds like you thought a bit about that - so I'm fine with your conclusion.\r\nLet's remove the comment then.",
              "createdAt": "2023-09-13T15:23:16Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Low seems a reasonable default here - it will appear in binlogs and other locations, but not in a 'normal' `dotnet build` scenario.\r\n",
              "createdAt": "2023-09-13T15:23:24Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I am less sure about that. There are cases where copies need retries to work around infrastructure flakiness (copying to a network release share, for instance), but often retries are indicative of a bug in your build (overbuilding or racing to a file write). \"Warning\" seems like a pretty reasonable place to me (though I can empathize with wanting the warning to be suppressible).",
              "createdAt": "2023-09-13T15:26:16Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Now I have conflicting opinions from two most respected authorities in msbuild. I am fine with either, this is pros and cons:\r\n\r\na) low warning (as is ATM)\r\n- pros: \r\n  - simple implementation\r\n  - people would not see non translated slightly cryptic messages \"Got {0} copying {1} to {2} and HR is {3}\"\r\n- cons: \r\n  -- might hide infrastructure flaky issues and/or bug in project or sln files causing these flakiness (mostly race conditions or redundant multi copies)\r\n\r\nb) warnings (as was), but translated and suppressible. \r\n- pros: \r\n  - less probability of regression (it was this way for ages)\r\n  - more visibly pointing on infrastructure flakiness or project files bugs\r\n- cons: \r\n  - if we have some system problem which is causing those copy issues, people will have it more difficult to workaround it (MSBUILDALWAYSRETRY + nowarn:MSBXXXX)\r\n  - when MSBUILDALWAYSRETRY and /WarnAsError infrastructure flakiness cascade into build flakiness\r\n\r\n@baronfel  @rainersigwald please advise...",
              "createdAt": "2023-09-13T16:06:07Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I'm happy to keep warnings _as long as they get a code_ - we basically should never make a warning-level message without a suppressible code.",
              "createdAt": "2023-09-13T16:07:35Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Reworked into warnings. Ready for review",
              "createdAt": "2023-09-13T18:50:42Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -215,7 +215,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n         {\n             if (s_alwaysRetryCopy)\n             {\n-                Log.LogWarning(message, messageArgs);\n+                Log.LogMessage(MessageImportance.Low, message, messageArgs);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Codes seem to be taken already: https://github.com/search?q=repo%3Adotnet%2Fmsbuild+MSB3094+MSB3095&type=code",
              "createdAt": "2023-09-14T06:55:43Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -2781,6 +2781,14 @@\n     <value>MSB3893: Could not use a link to copy \"{0}\" to \"{1}\".</value>\n     <comment>{StrBegin=\"MSB3893: \"} LOCALIZATION: {0} and {1} are paths.</comment>\n   </data>\n+  <data name=\"Copy.IOException\">\n+    <value>MSB3094: \"Got {0} copying {1} to {2} and HR is {3}\"</value>\n+    <comment>{StrBegin=\"MSB3094: \"} LOCALIZATION: {0} is exception.ToString(), {1} and {2} are paths, {3} is a number\")</comment>\n+  </data>\n+  <data name=\"Copy.RetryingOnAccessDenied\">\n+    <value>\"MSB3095: Retrying on ERROR_ACCESS_DENIED because environment variable MSBUILDALWAYSRETRY = 1\"</value>\n+    <comment>{StrBegin=\"MSB3095: \"} LOCALIZATION: Do NOT translate MSBUILDALWAYSRETRY\")</comment>\n+  </data>",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Good catch. TLDR: Should have used glasses when coding at night. Mistaken 0 and 8, with my font they are similar:\r\n![image](https://github.com/dotnet/msbuild/assets/25249058/a5ebca79-3daa-460a-a885-0b5016516cd9)\r\nFixed.",
              "createdAt": "2023-09-14T07:18:24Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -2781,6 +2781,14 @@\n     <value>MSB3893: Could not use a link to copy \"{0}\" to \"{1}\".</value>\n     <comment>{StrBegin=\"MSB3893: \"} LOCALIZATION: {0} and {1} are paths.</comment>\n   </data>\n+  <data name=\"Copy.IOException\">\n+    <value>MSB3094: \"Got {0} copying {1} to {2} and HR is {3}\"</value>\n+    <comment>{StrBegin=\"MSB3094: \"} LOCALIZATION: {0} is exception.ToString(), {1} and {2} are paths, {3} is a number\")</comment>\n+  </data>\n+  <data name=\"Copy.RetryingOnAccessDenied\">\n+    <value>\"MSB3095: Retrying on ERROR_ACCESS_DENIED because environment variable MSBUILDALWAYSRETRY = 1\"</value>\n+    <comment>{StrBegin=\"MSB3095: \"} LOCALIZATION: Do NOT translate MSBUILDALWAYSRETRY\")</comment>\n+  </data>",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}