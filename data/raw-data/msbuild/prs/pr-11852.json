{
  "number": 11852,
  "title": "Avoid allocating enumerator",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2025-05-16T19:24:00Z",
  "updatedAt": "2025-05-23T18:00:47Z",
  "closedAt": "2025-05-19T18:11:36Z",
  "mergedAt": null,
  "additions": 6,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/indexOf",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bc1382dd1816af843a28824b9a043788b3fa6144",
          "message": "Avoid allocating enumerator",
          "committedDate": "2025-05-16T19:23:32Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a93726da6019f3bbb2ed987a15a6b7c9ff4b932",
          "message": "Fix typo",
          "committedDate": "2025-05-16T19:25:16Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Now covered in greater detail by @rainersigwald's PR: https://github.com/dotnet/msbuild/pull/11868",
        "createdAt": "2025-05-19T18:11:36Z",
        "author": {
          "login": "Erarndt"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Correct the typo 'migh' to 'might' for clarity in the comment.\n```suggestion\n                // PERF: you might be tempted to switch this to call Contains(), but there is no string.Contains(char) overload\n```",
              "createdAt": "2025-05-16T19:24:20Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1862,7 +1862,12 @@ internal static ExpressionShredder.ItemExpressionCapture ExpandSingleItemVectorE\n                 }\n \n                 List<ExpressionShredder.ItemExpressionCapture> matches;\n-                if (!expression.Contains('@'))\n+\n+                // PERF: you migh be tempted to switch this to call Contains(), but there is no string.Contains(char) overload",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // string.Contains(string) overload instead, but it's slightly slower and you'll get a suggestion in\r\n```",
              "createdAt": "2025-05-19T14:56:14Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1862,7 +1862,12 @@ internal static ExpressionShredder.ItemExpressionCapture ExpandSingleItemVectorE\n                 }\n \n                 List<ExpressionShredder.ItemExpressionCapture> matches;\n-                if (!expression.Contains('@'))\n+\n+                // PERF: you might be tempted to switch this to call Contains(), but there is no string.Contains(char) overload\n+                // in framework. Instead, you'll call the LINQ overload and allocate an enumerator. We could use the\n+                // string.Contains(string) overload instead, but it's slighly slower and you'll get a suggestion in",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "fyi @stephentoub -- this regressed with #11448.",
              "createdAt": "2025-05-19T15:04:37Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -1862,7 +1862,12 @@ internal static ExpressionShredder.ItemExpressionCapture ExpandSingleItemVectorE\n                 }\n \n                 List<ExpressionShredder.ItemExpressionCapture> matches;\n-                if (!expression.Contains('@'))\n+\n+                // PERF: you might be tempted to switch this to call Contains(), but there is no string.Contains(char) overload\n+                // in framework. Instead, you'll call the LINQ overload and allocate an enumerator. We could use the\n+                // string.Contains(string) overload instead, but it's slighly slower and you'll get a suggestion in\n+                // newer .NET to use string.Contains(char) where that overload actually exists.\n+                if (expression.IndexOf('@') < 0)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}