{
  "number": 9433,
  "title": "Fix WriteCodeFragment task with OutputFile set using file name but no OutputDirectory",
  "body": "Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1827536\r\n\r\n### Context\r\nActually, the issue is different from what the ADO ticket describes. For WriteCodeFragment task, if OutputFile path is a file name but OutputDirectory is not set, it gets empty string as directory name given to ensuring directory exists. Then the issue happens.\r\n\r\n### Changes Made\r\nIn the case OutputFile path is a file name but OutputDirectory is not set, expand OutputFile path to a fully qualified path based on current directory.\r\n\r\n### Testing\r\nAdded a unit test.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-17T08:24:47Z",
  "updatedAt": "2024-03-15T08:43:24Z",
  "closedAt": "2024-03-15T08:43:24Z",
  "mergedAt": "2024-03-15T08:43:24Z",
  "additions": 36,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "outputfile-path",
  "isDraft": false,
  "author": {
    "login": "GangWang01"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cef856d851d44b57507eb53017f773c0d27dc363",
          "message": "Fix WriteCodeFragment task with OutputFile set using file name but no OutputDirectory",
          "committedDate": "2023-11-17T08:10:29Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9fc6e9db2528c2bb8582611b6d2c2ab0b366e9d",
          "message": "Use the item's metadata to get full path rather than computing it directly",
          "committedDate": "2023-11-22T03:17:55Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0d030f815fe84aba7dc109663b3ac7bb4fc550d8",
          "message": "Merge branch 'main' into outputfile-path",
          "committedDate": "2024-02-27T09:36:29Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b970e4ac9e6494e2f3a296e6dce06e6a6c836944",
          "message": "Improve FileUtilities.EnsureDirectoryExists instead of the change to task",
          "committedDate": "2024-03-14T08:04:03Z",
          "author": {
            "name": "Gang Wang",
            "email": "v-gaw@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-11-22T06:32:00Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-11-22T06:32:11Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> So this was a regression from #8558?\r\n\r\nYes, that change introduced the issue.\r\n",
        "createdAt": "2023-11-22T06:59:52Z",
        "author": {
          "login": "GangWang01"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Please wrap the test in a TestEnvironment, and use `ExpectFile` to get the path of the file and assert its existence--that way cleanup can happen in \"the usual way\".",
              "createdAt": "2023-11-17T16:09:05Z",
              "path": "src/Tasks.UnitTests/WriteCodeFragment_Tests.cs",
              "diffHunk": "@@ -137,6 +137,31 @@ public void FileWithPathAndDirectoryDoesNotExist()\n             Assert.True(File.Exists(task.OutputFile.ItemSpec));\n         }\n \n+        /// <summary>\n+        /// File name is set but no OutputDirectory\n+        /// </summary>\n+        [Fact]\n+        public void FileNameNoDirectory()\n+        {\n+            WriteCodeFragment task = new WriteCodeFragment();\n+            MockEngine engine = new MockEngine(true);\n+            task.BuildEngine = engine;\n+            task.Language = \"c#\";\n+            task.AssemblyAttributes = new TaskItem[] { new TaskItem(\"aa\") };\n+\n+            string fileName = \"file.tmp\";\n+            string file = Path.GetFullPath(fileName);\n+            task.OutputFile = new TaskItem(fileName);\n+            bool result = task.Execute();\n+\n+            Assert.True(result);\n+\n+            Assert.Equal(file, task.OutputFile.ItemSpec);\n+            Assert.True(File.Exists(file));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Modifying `OutputFile.ItemSpec` feels wrong to me. Could you instead either\r\n\r\n1. Use a local variable for \"full path of file\", or\r\n2. When doing filesystem operations, use the item's `Directory` and `FullPath` metadata rather than computing it directly?",
              "createdAt": "2023-11-17T16:11:32Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -110,6 +110,12 @@ public override bool Execute()\n                 {\n                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));\n                 }\n+                else if (OutputFile != null && OutputDirectory == null && !Path.IsPathRooted(OutputFile.ItemSpec))\n+                {\n+                    // In case specified OutputFile path is a file name but OutputDirectory is not set, expand it to a fully qualified path based on current directory.\n+                    // So that it has the directory given to ensuring directory exists.\n+                    OutputFile.ItemSpec = Path.GetFullPath(OutputFile.ItemSpec);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`Directory` metadata returns full path of item directory relative to root. So I had to use `FullPath` metadata.",
              "createdAt": "2023-11-22T07:46:43Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -110,6 +110,12 @@ public override bool Execute()\n                 {\n                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));\n                 }\n+                else if (OutputFile != null && OutputDirectory == null && !Path.IsPathRooted(OutputFile.ItemSpec))\n+                {\n+                    // In case specified OutputFile path is a file name but OutputDirectory is not set, expand it to a fully qualified path based on current directory.\n+                    // So that it has the directory given to ensuring directory exists.\n+                    OutputFile.ItemSpec = Path.GetFullPath(OutputFile.ItemSpec);",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If FileUtilities.PathIsInvalid, won't this just throw?",
              "createdAt": "2023-12-22T20:58:28Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Throwing an exception might break something existing on Unix because of the union of invalid characters of path or file name across OSes https://github.com/dotnet/msbuild/blob/b59f07e4312eb6e3e33e59241453606c81992738/src/Shared/FileUtilities.cs#L94-L114, while Unix just has very fewer invalid characters(`\\0`, `/`). I prefer to not introduce breaking change.",
              "createdAt": "2023-12-27T09:43:56Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "GangWang01"
              }
            },
            {
              "body": "I approve of the plan to not add breaking changes! I'm just a little confused because if PathIsInvalid(OutputFile.ItemSpec), you then use OutputFile.ItemSpec as the input to Path.GetDirectoryName(fullPath), and that throws an ArgumentException on framework and old .NET Core. It was throwing an exception before, so it isn't like you introduced anything new, but it just seemed like more convoluted logic to end up at the same place in that case, so I was a little confused \ud83d\ude42",
              "createdAt": "2023-12-27T17:06:00Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm also confused by this. If I'm reading it right, by this line `OutputFile` should always be fully qualified (but may be an invalid path if it was set to one by the user). Why not use `FullPath` unconditionally?",
              "createdAt": "2024-02-20T20:05:00Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> Why not use FullPath unconditionally?\r\n\r\nFor net472, invalid path causes `OutputFile.GetMetadata(\"FullPath\")` to throw System.InvalidOperationException. So I have to use FullPath conditionally.",
              "createdAt": "2024-02-21T13:31:11Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "GangWang01"
              }
            },
            {
              "body": "If it's invalid will `EnsureDirectoryExists` or `WriteAllText` throw the same exception?",
              "createdAt": "2024-02-23T17:06:03Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If it's invalid path `EnsureDirectoryExists` will throw IO related exception, which is the same exception thrown from the same place as before.",
              "createdAt": "2024-02-26T10:46:27Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "GangWang01"
              }
            },
            {
              "body": "@GangWang01 instead of adding this logic, wouldn't the better way of fixing the bug be simply allowing an empty string in `EnsureDirectoryExists`?\r\n\r\nIn https://github.com/dotnet/msbuild/blob/0326fd7c9e131c4c26bac3c0f72a43ef9fd2812c/src/Shared/FileUtilities.cs#L1488\r\n\r\n`if (!string.IsNullOrEmpty(directoryPath)` instead of `if (directoryPath != null`.",
              "createdAt": "2024-03-12T10:43:37Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ah, you're right! I haven't even noticed this. Thank you!",
              "createdAt": "2024-03-14T08:06:28Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -113,7 +113,9 @@ public override bool Execute()\n \n                 OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));\n \n-                FileUtilities.EnsureDirectoryExists(Path.GetDirectoryName(OutputFile.ItemSpec));\n+                // To get OutputFile's directory use its full path in case specified OutputFile path is a file name but OutputDirectory is not set\n+                var fullPath = FileUtilities.PathIsInvalid(OutputFile.ItemSpec) ? OutputFile.ItemSpec : OutputFile.GetMetadata(\"FullPath\");",
              "author": {
                "login": "GangWang01"
              }
            }
          ]
        }
      }
    ]
  }
}