{
  "number": 8257,
  "title": "Exclude isolation-violating cache results from output results cache (#4386)",
  "body": "Fixes #4386\r\n\r\n### Context\r\nAny cache entries from projects excluded from isolation constraints should be excluded from the output results cache file.\r\n\r\n### Changes Made\r\nOnly the cache entry with the smallest configuration ID (that of the project to be built in isolation) should be serialized into the output results cache file. As described in #4386, this prevents the case where dependency projects pass down the same cache entry obtained through skipping/violating isolation constraints to a dependent project, creating duplicate input cache entries.\r\n\r\n### Testing\r\nAdded a UT.\r\n\r\n### Notes\r\nAddressing this issue since it came up frequently when testing #8249.",
  "state": "MERGED",
  "createdAt": "2022-12-19T23:11:05Z",
  "updatedAt": "2023-01-10T03:36:03Z",
  "closedAt": "2023-01-10T03:36:02Z",
  "mergedAt": "2023-01-10T03:36:02Z",
  "additions": 164,
  "deletions": 0,
  "changedFiles": 4,
  "headRefName": "exclude-isolation-violating-cache-results-from-orc",
  "isDraft": false,
  "author": {
    "login": "DmitriyShepelev"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ebe09208ee097ef98a405c48c42095ac4eecdfc0",
          "message": "Exclude isolation-violating cache results from output results cache (#4386)",
          "committedDate": "2023-01-06T18:46:33Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76afbec1e0d4b7a5892c848f0cb6cbd188a7f485",
          "message": "Improve `GetSmallestConfigId` error checking",
          "committedDate": "2023-01-06T18:46:33Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abbd63c800e843ba783d9cba608784fcb71adb36",
          "message": "Fix style issues",
          "committedDate": "2023-01-06T23:17:54Z",
          "author": {
            "name": "Dmitriy Shepelev",
            "email": "dshepelev@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "How often is this called? Linq can be slow, but I think this is called infrequently, so it shouldn't be a problem.\r\n\r\n`FirstOrDefault`, if _configurations is empty, will return null, which you then dereference. If it's guaranteed non-null, you can just use `First`. If not, there should be some check in there. (You can consider putting a check in anyway like \"if empty, fail.\")",
              "createdAt": "2022-12-27T18:01:36Z",
              "path": "src/Build/BackEnd/Components/Caching/ConfigCache.cs",
              "diffHunk": "@@ -200,6 +201,20 @@ public void ClearConfigurations()\n             }\n         }\n \n+        /// <summary>\n+        /// Gets the smallest configuration id of any configuration\n+        /// in this cache.\n+        /// </summary>\n+        /// <returns>Gets the smallest configuration id of any\n+        /// configuration in this cache.</returns>\n+        public int GetSmallestConfigId()\n+        {\n+            lock (_lockObject)\n+            {\n+                return _configurations.OrderBy(kvp => kvp.Key).FirstOrDefault().Key;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> How often is this called? Linq can be slow, but I think this is called infrequently, so it shouldn't be a problem.\r\n\r\nIt would be called once for each project build, at the very end when we serialize the output cache.\r\n\r\n> FirstOrDefault, if _configurations is empty, will return null, which you then dereference. If it's guaranteed non-null, you can just use First. If not, there should be some check in there. (You can consider putting a check in anyway like \"if empty, fail.\")\r\n\r\nIt should always be non-null, but I'll put the check in there for safety.",
              "createdAt": "2022-12-29T14:55:36Z",
              "path": "src/Build/BackEnd/Components/Caching/ConfigCache.cs",
              "diffHunk": "@@ -200,6 +201,20 @@ public void ClearConfigurations()\n             }\n         }\n \n+        /// <summary>\n+        /// Gets the smallest configuration id of any configuration\n+        /// in this cache.\n+        /// </summary>\n+        /// <returns>Gets the smallest configuration id of any\n+        /// configuration in this cache.</returns>\n+        public int GetSmallestConfigId()\n+        {\n+            lock (_lockObject)\n+            {\n+                return _configurations.OrderBy(kvp => kvp.Key).FirstOrDefault().Key;",
              "author": {
                "login": "DmitriyShepelev"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    if (configCacheToSerialize.Count > 0)\r\n```\r\n\r\n? \"no projects were built\" sounds like 0",
              "createdAt": "2022-12-27T18:04:56Z",
              "path": "src/Build/BackEnd/BuildManager/CacheSerialization.cs",
              "diffHunk": "@@ -61,6 +62,27 @@ public static string SerializeCaches(IConfigCache configCache, IResultsCache res\n                             break;\n                     }\n \n+                    // Avoid creating new config and results caches if no projects were built in violation\n+                    // of isolation mode.\n+                    if (configCacheToSerialize.Count() > 1)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Projects built in violation of isolation mode are those whose results were not entirely provided via the input caches. For example, if we're building in isolation a project A which depends on project B but we only have a strict subset S' of the required target results S from project B provided via input caches, then we obtain the complement S'' of S'  _in violation of isolation mode_, which means `configCacheToSerialize.Count()` would return `2`. (Our config cache would contain entries for A and B.) If S was provided via the input caches, then `configCacheToSerialize.Count()` would return `1`, meaning no isolation violation occurred, there are no cache results to exclude, and there is no need to create new config and results caches (i.e., we can just defer to the old serialization logic).",
              "createdAt": "2022-12-29T14:47:13Z",
              "path": "src/Build/BackEnd/BuildManager/CacheSerialization.cs",
              "diffHunk": "@@ -61,6 +62,27 @@ public static string SerializeCaches(IConfigCache configCache, IResultsCache res\n                             break;\n                     }\n \n+                    // Avoid creating new config and results caches if no projects were built in violation\n+                    // of isolation mode.\n+                    if (configCacheToSerialize.Count() > 1)",
              "author": {
                "login": "DmitriyShepelev"
              }
            },
            {
              "body": "Ok, so we _always_ have the project being built in the configCacheToSerialize, but we only _add_ another project if we tried to find it in the cache, failed, and ended up building it separately. I think that makes sense. Thanks!",
              "createdAt": "2022-12-29T19:30:14Z",
              "path": "src/Build/BackEnd/BuildManager/CacheSerialization.cs",
              "diffHunk": "@@ -61,6 +62,27 @@ public static string SerializeCaches(IConfigCache configCache, IResultsCache res\n                             break;\n                     }\n \n+                    // Avoid creating new config and results caches if no projects were built in violation\n+                    // of isolation mode.\n+                    if (configCacheToSerialize.Count() > 1)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}