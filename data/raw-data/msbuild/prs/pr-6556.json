{
  "number": 6556,
  "title": "Make InterningBinaryReader pool buffers",
  "body": "Fixes #3954\r\n\r\n### Context\r\n\r\nThe `Buffer` class is 100 kB (40 for characters and 60 for the byte array) and it is being allocated a lot, easily in the order of tens of thousands of instances per build. OOM crashes are often blamed on such allocations.\r\n\r\n### Changes Made\r\n\r\n1. Made the byte array allocation lazy since in many scenarios it ends up not being used.\r\n2. Implemented a trivial `Buffer` pooling which eliminates >97% of allocations.\r\n\r\n### Testing\r\n\r\n- [x] Existing unit tests.\r\n- [x] Experimental VS insertion.\r\n\r\n### Notes\r\n\r\nOpted for a 1-element static cache to keep the last used `Buffer` around. This works very well given MSBuild's single-threadedness and keeps the code simple and policy-free.",
  "state": "MERGED",
  "createdAt": "2021-06-14T15:23:14Z",
  "updatedAt": "2021-10-25T11:19:51Z",
  "closedAt": "2021-06-25T17:38:13Z",
  "mergedAt": "2021-06-25T17:38:12Z",
  "additions": 109,
  "deletions": 66,
  "changedFiles": 9,
  "headRefName": "exp/interning-binary-reader-pooling",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a1bf5dc75a28d4b1438bff925f0b1bf22d29576f",
          "message": "Pool Buffers in InterningBinaryReader",
          "committedDate": "2021-06-14T13:53:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d43d7472becc997f7e2491c0ced34d7aaf33445b",
          "message": "Fix TestSerializationMode",
          "committedDate": "2021-06-14T21:12:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fa52ba3830ab9632fc7c33fd9b55a0a2865c1589",
          "message": "Remove redundant try/finally",
          "committedDate": "2021-06-15T08:33:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "![image](https://user-images.githubusercontent.com/12206368/121956010-e8218f00-cd60-11eb-8e26-b3600a5fa4ad.png)\r\n\r\nRPS is showing ~6% improvement in allocated devenv bytes during rebuild. Will address the failing unit test shortly.",
        "createdAt": "2021-06-14T20:40:06Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "safe to remove this try/finally as well?",
              "createdAt": "2021-06-14T21:39:23Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -706,7 +699,7 @@ public void RetrieveFromCache()\n                     return;\n                 }\n \n-                ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);\n+                using ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);\n                 try\n                 {",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Definitely. Thank you!",
              "createdAt": "2021-06-15T08:34:16Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -706,7 +699,7 @@ public void RetrieveFromCache()\n                     return;\n                 }\n \n-                ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);\n+                using ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);\n                 try\n                 {",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider to throw when `buffer == null && isPrivateBuffer`",
              "createdAt": "2021-06-15T08:22:41Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -39,7 +52,7 @@ internal class InterningBinaryReader : BinaryReader\n         /// <summary>\n         /// Comment about constructing.\n         /// </summary>\n-        private InterningBinaryReader(Stream input, Buffer buffer)\n+        private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "`buffer` must not be null regardless of `isPrivateBuffer`. This is a private constructor, though, and the caller never passes null so I don't see value in checking. Can you please clarify?",
              "createdAt": "2021-06-15T12:13:13Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -39,7 +52,7 @@ internal class InterningBinaryReader : BinaryReader\n         /// <summary>\n         /// Comment about constructing.\n         /// </summary>\n-        private InterningBinaryReader(Stream input, Buffer buffer)\n+        private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Good point - isPrivateBuffer is not related. There was already null check for `input` so I have thought we might consider to have null check for buffer as well. Maybe Debug.Assert or nothing, as it is indeed not very complex private code.",
              "createdAt": "2021-06-15T14:21:46Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -39,7 +52,7 @@ internal class InterningBinaryReader : BinaryReader\n         /// <summary>\n         /// Comment about constructing.\n         /// </summary>\n-        private InterningBinaryReader(Stream input, Buffer buffer)\n+        private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "**NIT**\r\nThis line is called in following cases:\r\n1) very 1st pooled buffer creation\r\n2) 'not using using' bug in code - no dispose called\r\n3) using BinaryReadTranslator concurrently\r\n\r\nBoth 2. and 3. invalidate usability of pooled buffer. If using BinaryReadTranslator concurrently is rare or not expected at all, I'd like to have some debug only heuristics warnings about such cases. Something in line of:\r\n```C#\r\n[Conditional(\"DEBUG\")]\r\npublic void EnsureNotCalledVeryOften(TimeSpan range, int maxCount)\r\n{\r\n  lock(s_me)\r\n  {\r\n    if (DateTime.UtcNow - s_lastMeasuredRangeStart > range)\r\n    {\r\n       s_lastMeasuredRangeStart = DateTime.UtcNow;\r\n       s_occurenceCount = 0;\r\n    }\r\n    if (++s_occurenceCount > maxCount)\r\n     throw new InvalidOperationException(\"Suspiciously often created PooledBuffer. Please verify proper Disposing.\")\r\n  }\r\n}\r\n```\r\n\r\n",
              "createdAt": "2021-06-15T09:06:35Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -152,57 +166,97 @@ override public String ReadString()\n         /// <summary>\n         /// A shared buffer to avoid extra allocations in InterningBinaryReader.\n         /// </summary>\n+        /// <remarks>\n+        /// The caller is responsible for managing the lifetime of the returned buffer and for passing it to <see cref=\"Create\"/>.\n+        /// </remarks>\n         internal static SharedReadBuffer CreateSharedBuffer()\n         {\n             return new Buffer();\n         }\n \n+        /// <summary>\n+        /// Gets a buffer from the pool or creates a new one.\n+        /// </summary>\n+        /// <returns>The <see cref=\"Buffer\"/>. Should be returned to the pool after we're done with it.</returns>\n+        private static Buffer GetPooledBuffer()\n+        {\n+            Buffer buffer = Interlocked.Exchange(ref s_bufferPool, null);\n+            if (buffer != null)\n+            {\n+                return buffer;\n+            }\n+            return new Buffer();",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "This is a good point. Especially given our aspiration to remove the single-threadedness at some point. Though I'm not sure if such a complex invariant is worth capturing in the code or if we should rely on testing infrastructure to catch regressions reliably and early. For 2. that would be something like a static code analyzer, for 3. a performance benchmark (catching all regressions, not just ones we foresee - in this particular case it is covered with RPS so I believe it would catch it).",
              "createdAt": "2021-06-15T14:29:41Z",
              "path": "src/Shared/InterningBinaryReader.cs",
              "diffHunk": "@@ -152,57 +166,97 @@ override public String ReadString()\n         /// <summary>\n         /// A shared buffer to avoid extra allocations in InterningBinaryReader.\n         /// </summary>\n+        /// <remarks>\n+        /// The caller is responsible for managing the lifetime of the returned buffer and for passing it to <see cref=\"Create\"/>.\n+        /// </remarks>\n         internal static SharedReadBuffer CreateSharedBuffer()\n         {\n             return new Buffer();\n         }\n \n+        /// <summary>\n+        /// Gets a buffer from the pool or creates a new one.\n+        /// </summary>\n+        /// <returns>The <see cref=\"Buffer\"/>. Should be returned to the pool after we're done with it.</returns>\n+        private static Buffer GetPooledBuffer()\n+        {\n+            Buffer buffer = Interlocked.Exchange(ref s_bufferPool, null);\n+            if (buffer != null)\n+            {\n+                return buffer;\n+            }\n+            return new Buffer();",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}